define(["api/SplunkVisualizationBase","api/SplunkVisualizationUtils","splunkjs/mvc"], function(__WEBPACK_EXTERNAL_MODULE_293__, __WEBPACK_EXTERNAL_MODULE_294__, __WEBPACK_EXTERNAL_MODULE_316__) { return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(1);


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;  /*
	  * Visualization source

	  SANKEY Diagram - Used filtering functions
	  Unique List - https://medium.com/front-end-weekly/getting-unique-values-in-javascript-arrays-17063080f836
	  SA-devforall - Modal Ideas
	  Random Hash Creator - https://stackoverflow.com/questions/1349404/generate-random-string-characters-in-javascript

	  */
	  !(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	      __webpack_require__(292),
	      __webpack_require__(309),
	      __webpack_require__(293),
	      __webpack_require__(294),
	      __webpack_require__(295),
	      __webpack_require__(302),
	      __webpack_require__(303),
	      __webpack_require__(307),
	      __webpack_require__(2),
	      __webpack_require__(310),
	      __webpack_require__(312),
	      __webpack_require__(313),
	      __webpack_require__(314),
	      __webpack_require__(315),
	      __webpack_require__(316)
	      //'splunkjs/mvc/simplexml/ready!'      
	      // Euler cannot work with anything above 300 Nodes
	      // Add required assets to this list
	    ], __WEBPACK_AMD_DEFINE_RESULT__ = function (
	      $,
	      _,
	      SplunkVisualizationBase,
	      SplunkVisualizationUtils,
	      cytoscape,
	      cxtmenu,
	      fcose,
	      popper,
	      dagre,
	      klay,
	      d3,
	      Modal,
	      coseBilkent,
	      dblclick,
	      mvc
	      
	    ) {

	      // Load menu extension
	      cxtmenu(cytoscape);
	      // Load FCose Layout Extension
	      fcose(cytoscape);
	      // Load Dagre Layout Extension
	      dagre(cytoscape);
	      // Load Popper Extension
	      popper(cytoscape);
	      // Load Dagre Layout Extension
	      klay(cytoscape);
	      // Load Cose Bilkent Layout Extension
	      coseBilkent(cytoscape); // register extension
	      dblclick(cytoscape);

	      /*
	      Initiate Global Variables for use throughout code
	      */

	      // Prefilter variable for use to prefilter the graph
	      var preFilter;
	      // Variable to specify whether direction in path finding is honored
	      var directedGlobal;
	      // What path finding algorithm is used
	      var pathAlgoGlobal;
	      // If items are to be preRemoved before rendering
	      var preRemove;
	      // Variable to define whether the graph is being loaded for the first time or note
	      var initialRun;
	      // A collection of elements that are being removed
	      var element_preRemove;
	      // A variable to store highlighted nodes
	      var boxedNodes;
	      // Background color
	      var bgColor;
	      // Text color
	      var textColor;
	      // Not in use - A number to use when removing nodes by children / parent count
	      var removeNodesByCount;
	      // Whether to recursively add nodes in the graph
	      var recursiveLookup;
	      // The existing layout prior to initiating the focus function
	      var graphStateForFocus;
	      // A variable to tell the graph that it is zoomed in and to not honor mouse over actions on edges
	      var isZoomedIn;
	      // The incrementer for a dynamic class that is used in edge styling
	      var edgeSearchColorNum = 0;
	      // Set a global Token to allow for persistence in token selection
	      var tokenCheckedGlobal;
	      var tokenValueGlobal;
	      // Set current layout
	      var currentLayout;

	      // Create empty array for storing header rows / fields
	      columns = [];

	      return SplunkVisualizationBase.extend({

	        initialize: function () {
	          SplunkVisualizationBase.prototype.initialize.apply(this, arguments);
	          this.$el = $(this.el);
	          // If the theme is dark mode set the correct background color and text color.
	          if (SplunkVisualizationUtils.getCurrentTheme && SplunkVisualizationUtils.getCurrentTheme() === 'dark') {
	            bgColor = "#212527";
	            textColor = "#ffffff";
	          }

	        },
	        // Escape properties that are passed as configuration items
	        _getEscapedProperty: function (name, config) {
	          var propertyValue = config[this.getPropertyNamespaceInfo().propertyNamespace + name];
	          return SplunkVisualizationUtils.escapeHtml(propertyValue);
	        },
	        // Get the configuration parameters
	        _getConfigParams: function (config) {
	          changedConfig = Object.keys(config)[0];
	          // If there is only one configuration change (This happens after the first click of formatter menu)
	          if (Object.keys(config).length == 1) {
	            switch (changedConfig) {
	              case "display.visualizations.custom.link_analysis_app.link_analysis.layoutStyle":
	                this.layoutStyle = this._getEscapedProperty('layoutStyle', config);
	                break;

	              case "display.visualizations.custom.link_analysis_app.link_analysis.pathAlgo":
	                this.pathAlgo = this._getEscapedProperty('pathAlgo', config);
	                break;

	              case "display.visualizations.custom.link_analysis_app.link_analysis.directed":
	                this.directed = SplunkVisualizationUtils.normalizeBoolean(this._getEscapedProperty('directed', config));
	                break;

	              default:
	                // Set default options for the console if this is a fresh load or something else happened.
	                this.layoutStyle = this._getEscapedProperty('layoutStyle', config) || 'fcose';
	                this.directed = SplunkVisualizationUtils.normalizeBoolean(this._getEscapedProperty('directed', config), {
	                  default: false
	                });
	                this.pathAlgo = this._getEscapedProperty('pathAlgo', config) || 'dijkstra';
	                this.recursiveLookup = SplunkVisualizationUtils.normalizeBoolean(this._getEscapedProperty('recursiveLookup', config), {
	                  default: false
	                });
	                recursiveLookup = this.recursiveLookup;


	                break;
	            }
	            return;
	          } else {
	            // Set default options for the console if this is a fresh load or something else happened.
	            this.layoutStyle = this._getEscapedProperty('layoutStyle', config) || 'fcose';
	            this.directed = SplunkVisualizationUtils.normalizeBoolean(this._getEscapedProperty('directed', config), {
	              default: false
	            });
	            this.pathAlgo = this._getEscapedProperty('pathAlgo', config) || 'dijkstra';
	            this.recursiveLookup = SplunkVisualizationUtils.normalizeBoolean(this._getEscapedProperty('recursiveLookup', config), {
	              default: false
	            });
	            recursiveLookup = this.recursiveLookup;


	            return;
	          }


	        },

	        onConfigChange: function (configChanges, previousConfig) {
	          // Get Configuration Data
	          // if the previous config is the same as the configured menu item.  Do Nothing.  Handling first time opening the format menu
	          if (Object.keys(previousConfig).length == 1 && previousConfig["display.visualizations.custom.drilldown"] == "all" && Object.keys(configChanges).length > 1) {
	            //this._getConfigParams(configChanges);
	            return;
	          }

	          // If Config has been updated then re-run invalidateUpdateView()
	          else {
	            changedConfig = Object.keys(configChanges)[0];
	            switch (changedConfig) {
	              case "display.visualizations.custom.link_analysis_app.link_analysis.layoutStyle":
	                this.invalidateUpdateView();
	                break;

	              case "display.visualizations.custom.link_analysis_app.link_analysis.pathAlgo":
	                pathAlgoGlobal = configChanges["display.visualizations.custom.link_analysis_app.link_analysis.pathAlgo"];
	                this._getConfigParams(configChanges);
	                break;


	              case "display.visualizations.custom.link_analysis_app.link_analysis.directed":

	                directedGlobal = SplunkVisualizationUtils.normalizeBoolean(configChanges["display.visualizations.custom.link_analysis_app.link_analysis.directed"]);
	                this._getConfigParams(configChanges);
	                break;

	              default:
	                this.invalidateUpdateView();
	                break;
	            }
	            return;
	          }
	        },

	        // Optionally implement to format data returned from search.
	        // The returned object will be passed to updateView as 'data'
	        formatData: function (data, config) {
	          // A dictionary for formatting
	          format_info = {};
	          // Create an empty group array to allow group assignment
	          group_list = [];
	          // Take the first data point
	          datum = data.rows;
	          // Create empty array to place all of the nodes in
	          var nodesArray = [];
	          // Create empty array to place all edges / links in
	          var linksArray = [];
	          // Get updated configuration parameters
	          this._getConfigParams(config);

	          // Create pattern for matching header rows / fields to match nodeXX
	          var pattern = /node\d{2}$/i;

	          // Create nodes dictionary for ID creation purposes.
	          var nodesByName = {};
	          
	          // Update group items
	          // For each field in the output if the regex matches the pattern variable push it to the columns array

	          // Set x to 0 so the line numbers match up.
	          formatIterNum = 0;

	          // Create a variable of x that is 0 to enable iteration
	          var columnIterator = 0;

	          data.fields.forEach(function (column) {
	            var columnStr = String(column.name);
	          // For each field in the output if the regex matches the pattern variable push it to the columns array
	          if (columnStr.match(pattern)) {
	            columns.push(columnIterator);
	          }
	          columnIterator++;

	            switch (columnStr) {
	              case "line_label":
	                format_info['line_label'] = formatIterNum;
	                break;

	              case "line_color":
	                format_info['line_color'] = formatIterNum;
	                break;

	              case "line_colour":
	                format_info['line_color'] = formatIterNum;
	                break;

	              case "filter_start":
	                format_info['filter_start'] = formatIterNum;
	                preFilter = data.rows[0][formatIterNum].toString();
	                break;
	              case "filter_end":
	                format_info['filter_end'] = formatIterNum;
	                break;
	              case "src_color":
	                format_info['src_color'] = formatIterNum;
	                break;
	              case "dest_color":
	                format_info['dest_color'] = formatIterNum;
	                break;
	              case "src_shape":
	                format_info['src_shape'] = formatIterNum;
	                break;
	              case "dest_shape":
	                format_info['dest_shape'] = formatIterNum;
	                break;
	              case "remove":
	                format_info['remove'] = formatIterNum;
	                preRemove = data.rows[0][formatIterNum].toString();
	                break;
	              default:
	                break;
	            }

	            formatIterNum++;
	          });

	          //For each row in the data push the value of the first and second column into the group_list array.

	        // If there are header fields with node then push the nodes to the group_list array
	        if (columns.length >1){

	          
	          // For each row in the data push the value of the each column into the group_list array.
	          datum.forEach(function (link) {
	            var z = 1;
	            group_id = 0;
	            // While i is less than the total amount of columns (count of nodeXX field)
	            for (i = 0; z < columns.length; i++) {
	              var node_row = Number(columns[i]);
	              group_list.push({
	                name: link[node_row]
	              });

	              // For the total column length pick 2 columns at a time to push to the linksArray array.
	              node_source = Number(columns[i]);
	              node_target = Number(columns[z]);
	              
	              // Create add nodes to a large array
	              nodesArray.push(link[node_target]);
	              nodesArray.push(link[node_source]);
	              // Create a link object to push the target and source to the linksArray array.
	              object = {};
	              object.target = nodeByName(link[node_target], group_id);
	              object.source = nodeByName(link[node_source], group_id);
	              // Push the nodes to the nodesByName array including a group id of 0.
	              // Push the object dictionary item from lines above to the linksArray array
	              linksArray.push(object);
	              // Increment the counter
	            // Check if there is a field of src_color or dest_color and then assign it to the color of the field.  
	            if (link[format_info['src_color']]) {
	              nodesByName[link[i]].color ? "true" : nodesByName[link[i]].color = link[format_info['src_color']]
	            }
	            if (link[format_info['dest_color']]) {
	              nodesByName[link[z]].color ? "true" : nodesByName[link[z]].color = link[format_info['dest_color']]
	            }

	            // Check if there is a field of src_shape or dest_shape and then assign it to the shape of the field.  
	            if (link[format_info['src_shape']]) {
	              nodesByName[link[i]].shape ? "true" : nodesByName[link[i]].shape = link[format_info['src_shape']]
	            }
	            if (link[format_info['dest_shape']]) {
	              nodesByName[link[z]].shape ? "true" : nodesByName[link[z]].shape = link[format_info['dest_shape']]
	            }
	              z++;
	            }

	        });
	        console.log(linksArray);
	      }
	      
	          else if(columns.length == 0){
	          datum.forEach(function (link) {
	            // Create a list of nodes and add to array
	            nodesArray.push(link[0]);
	            nodesArray.push(link[1]);
	            // Add each node to an array so that we can later use it to create dynamic groups for colouring
	            this.group_list.push({
	              name: link[0]
	            });
	            this.group_list.push({
	              name: link[1]
	            });
	            group_id = 0;
	            // Create a link object to push the target and source to the linksArray array.
	            object = {};
	            object.target = nodeByName(link[0], group_id);
	            object.source = nodeByName(link[1], group_id);
	            object.count = link[2];
	            // Push the nodes to the nodesByName array including a group id of 0.
	            // Push the object dictionary item from lines above to the linksArray array
	            linksArray.push(object);

	            // Check if there is a field of src_color or dest_color and then assign it to the color of the field.  
	            if (link[format_info['src_color']]) {
	              nodesByName[link[0]].color ? "true" : nodesByName[link[0]].color = link[format_info['src_color']]
	            }
	            if (link[format_info['dest_color']]) {
	              nodesByName[link[1]].color ? "true" : nodesByName[link[1]].color = link[format_info['dest_color']]
	            }

	            // Check if there is a field of src_shape or dest_shape and then assign it to the shape of the field.  
	            if (link[format_info['src_shape']]) {
	              nodesByName[link[0]].shape ? "true" : nodesByName[link[0]].shape = link[format_info['src_shape']]
	            }
	            if (link[format_info['dest_shape']]) {
	              nodesByName[link[1]].shape ? "true" : nodesByName[link[1]].shape = link[format_info['dest_shape']]
	            }

	          });
	        }

	          // For performance reasons if there is more than 1000 edges don't apply dynamic colours.
	          if (datum.length < 1000) {
	            // Perform a group by count by each source address
	            this.groupCount = d3.nest()
	              .key(function (d) {
	                return d.name;
	              })
	              .rollup(function (v) {

	                return v.length;
	              })
	              .entries(group_list)
	              .sort(function (a, b) {
	                return d3.descending(a.value, b.value);
	              });

	          }
	          this.format_info = format_info;
	          this.group_list = group_list;
	          this.nodesArray = nodesArray;
	          this.nodesByName = nodesByName;
	          this.linksArray = linksArray;

	          // Function to check if a node is in the list and push the name and the group
	          function nodeByName(name, groupId) {
	            return nodesByName[name] || (nodesByName[name] = {
	              name: name,
	              group: groupId
	            });
	          }
	          return data;
	          // End Format Data Function

	        },

	        // Implement updateView to render a visualization.
	        // 'data' will be the data object returned from formatData or from the search
	        // 'config' will be the configuration property object
	        updateView: function (data, config) {

	          // Guard for empty data
	          if (data.rows.length < 1) {
	            return false;
	          }

	          if (data.fields.length < 2) {
	            throw new SplunkVisualizationBase.VisualizationError(
	              'Need at least two columns formatted <src> <dest>'
	            );
	          }
	          if (data.meta.done === false) {
	            var searchRunningMessage = 'Search is still running';
	            this.el.innerHTML = 'Status: ' + searchRunningMessage;
	          }

	          if (data.meta.done) {
	            this.el.innerHTML = "";

	            // Throw warning if there is more than 10,000 rows
	            if (data.rows.length > 10000) {
	              var tooManyRowsMessage = 'Status: Maximum Results is 10,000. Results might be truncated.';
	              this.el.innerHTML = tooManyRowsMessage;
	            }

	            // Get configuration
	            this._getConfigParams(config);

	            // Take the first data point
	            datum = data.rows;

	            // Create nodes dictionary for ID creation purposes.
	            var nodesByName = this.nodesByName;

	            // Create an array that is used to highlight neighbouring links
	            var linkedByIndex = {};

	            // Create an empty dictionary for placing the results of the headers in
	            var headers = {};

	            // Create empty array to place all of the links in
	            var linksArray = this.linksArray;

	            // Create a variable of x that is 0 to enable iteration
	            // var x = 0;

	            var groupCount = this.groupCount;
	            // Create variable for line style
	            var format_info = {};

	            // Create pattern for matching header rows / fields to match nodeXX
	            var pattern = /node\d{2}$/i;

	            // Create a color gradient for highlighting groups
	            var color = d3.scaleOrdinal(d3.schemeCategory20);

	            // Nodes Array
	            nodesArray = this.nodesArray;
	            // Path Finding Algo
	            var start;
	            var end;

	            // Set Layout Style Global var
	            layoutStyle_global = this.layoutStyle;

	            // Set Directed Global
	            directedGlobal = this.directed;

	            // Path Algo Global
	            pathAlgoGlobal = this.pathAlgo;

	            // Grab the width and height of the current element
	            var width = this.$el.width();
	            var height = this.$el.height();
	            
	            // Get a unique identifier to ensure that no 'cy' node has the same id
	            var uniqueCy = this.el.dataset.cid + "cy";

	            // Create a unique node list for each panel and unique search for the panel
	            var panel_node_list = uniqueCy + 'node_list';

	            var customSearchInput = uniqueCy + 'search_input';
	            // Check to see if cy element exists
	            var getCy = document.getElementById(uniqueCy);
	            // If the cy element is null then
	            if (getCy == null) {
	              // Specify a width and height that matches the Splunk console
	              // Append an SVG Element
	              var svg = d3.select(this.el)
	                .append("div")
	                .attr('width', width)
	                .attr('height', height)
	                .attr('id', uniqueCy)
	                .attr('active-bg-color', '#555');

	              // Create unique Style for this element
	              document.getElementById(uniqueCy).style.width = '100%';
	              document.getElementById(uniqueCy).style.height = '100%';
	              document.getElementById(uniqueCy).style.position = 'absolute';
	              document.getElementById(uniqueCy).style.top = '0px';
	              document.getElementById(uniqueCy).style.left = '0px';
	              document.getElementById(uniqueCy).style.zIndex = '999';
	              document.getElementById(uniqueCy).style.activeBgOpacity = '0.333';
	            }
	            // Add Cytoscape Element
	            var cy = cytoscape({
	              container: document.getElementById(uniqueCy),
	              style: [{
	                selector: 'node',
	                style: {
	                  label: 'data(label)'
	                }
	              }]
	            });
	            // If a group count exists
	            if (groupCount) {
	              // Return group counts which have a rollup value of greater than 1
	              var groups = groupCount.filter(function (group) {
	                return group.value > 1;
	              });
	              // Start from the first group and iterate through
	              var z = 1;
	              groups.forEach(function (groupArrayMember) {
	                groupArrayMember.group = z;
	                z++;
	              });

	              // For each item in the groups array
	              groups.forEach(function (groupArrayMember) {
	                // Return a subset of the linksArray where a group number hasn't been allocated i.e 0
	                linkGroup = linksArray.filter(function (x) {
	                  return nodesByName[x.source.name].group === 0 || nodesByName[x.target.name].group === 0;
	                });
	                // For each item in the linkGroup array
	                linkGroup.forEach(function (linkGroupArray) {
	                  // If the reduced array group is either the source or target.
	                  if (groupArrayMember.key === linkGroupArray.source.name || groupArrayMember.key === linkGroupArray.target.name) {
	                    // If the group value of the source is 0
	                    if (nodesByName[linkGroupArray.source.name].group === 0) {
	                      // Set the group value of both the source to group.group
	                      nodesByName[linkGroupArray.source.name].group = groupArrayMember.group;
	                    }
	                    // If the group value of the target is 0
	                    if (nodesByName[linkGroupArray.target.name].group === 0) {
	                      // Set the group value of both the target to group.value
	                      nodesByName[linkGroupArray.target.name].group = groupArrayMember.group;
	                    }
	                  }
	                });
	              });
	            }
	            // Create a unique list of nodes
	            const unique = (value, index, self) => {
	              return self.indexOf(value) === index;
	            }
	            // Create a unique list of items from the nodesArray variable
	            nodesUnique = nodesArray.filter(unique);

	            // Create an incrementer variable for node id
	            var n = 0;

	            // Foreach unique node add to the node list
	            nodesUnique.forEach(function (node) {
	              // Create an incrementer for the node id
	              node_id = "n" + n;
	              // Add node and node ID
	              nodeById(node, node_id);
	              // Check to see if the nodesByName[node].color has a value.  If so, set node_color to nodesByName[node].color
	              // else set the color to the group color.
	              node_color = nodesByName[node].color ? nodesByName[node].color : color(nodesByName[node].group);

	              // Check to see if the nodesByName[node].shape has a value.  If so, set node_shape to nodesByName[node].shape
	              // else set the shape to a ellipse.
	              node_shape = nodesByName[node].shape ? nodesByName[node].shape : 'ellipse';
	              cy.add({
	                data: {
	                  id: node_id,
	                  weight: 1,
	                  label: node,
	                  color: node_color,
	                  shape: node_shape
	                }
	              });
	              n++;
	            });

	            if(columns.length > 0){
	            // If the nodeXX format is used
	            datum.forEach(function (link) {
	            var z = 1;
	            group_id = 0;
	            // While i is less than the total amount of columns (count of nodeXX field)
	            for (i = 0; z < columns.length; i++) {
	              var node_row = Number(columns[i]);
	              group_list.push({
	                name: link[node_row]
	              });

	              // For the total column length pick 2 columns at a time to push to the linksArray array.
	              node_source = Number(columns[i]);
	              node_target = Number(columns[z]);

	              // Add nodes to list
	              debugger;
	              source_out = nodesByName[link[node_source]].id;
	              target_out = nodesByName[link[node_target]].id;
	              node_data = {
	                data: {
	                  source: source_out,
	                  target: target_out,
	                }
	              }
	              if (this.format_info['line_label']) {
	                line_label_num = this.format_info['line_label']
	                node_data.data.label = link[line_label_num]
	              }
	              node_data.data.color = this.format_info['line_color'] ? node_data.data.color = link[this.format_info['line_color']] : "#808080"

	              cy.add(node_data)

	              z++
	            }
	            
	          });
	        }

	          else if(columns.length == 0){
	            // If there is only two columns
	            datum.forEach(function (link) {
	              // Add nodes to list
	              source_out = nodesByName[link[0]].id;
	              target_out = nodesByName[link[1]].id;
	              node_data = {
	                data: {
	                  source: source_out,
	                  target: target_out,
	                }
	              }
	              if (this.format_info['line_label']) {
	                line_label_num = this.format_info['line_label']
	                node_data.data.label = link[line_label_num]
	              }
	              node_data.data.color = this.format_info['line_color'] ? node_data.data.color = link[this.format_info['line_color']] : "#808080"

	              cy.add(node_data)

	            });
	          }


	            /* 
	            Cytoscape Styling of graph
	            */

	            // Style the edges
	            cy.style()
	              .selector('edge')
	              .style({
	                'width': 5,
	                'edge-text-rotation': 'autorotate',
	                'target-arrow-shape': 'triangle',
	                'arrow-scale': 2,
	                'curve-style': 'bezier',
	                'text-background-color': 'white',
	                'text-opacity': 0.1,
	                'opacity': 0.3,
	                'text-background-opacity': 0.8,
	                'text-background-shape': 'roundrectangle',
	                'min-zoomed-font-size': '15',
	                'text-valign"': 'top',
	                'text-halign': 'center',
	                'control-point-weight': '0.5', // '0': curve towards source node, '1': towards target node.

	              })
	            // If the background color is set then apply the appropriate background color
	            if (bgColor) {
	              cy.style()
	                .selector('core')
	                .style({
	                  'background': bgColor
	                })

	              //Apply the edge color as required including the background color
	              cy.style()
	                .selector('edge')
	                .style({
	                  'color': textColor,
	                  'text-background-color': bgColor
	                })

	            }
	            // If there is a line_label field in the Splunk search define it as a data field
	            if (this.format_info.line_label) {
	              cy.style()
	                .selector('edge')
	                .style({
	                  'label': 'data(label)'
	                })
	            }

	            // If there is a line_color field in the Splunk search define it as a data field

	            if (this.format_info.line_color) {
	              cy.style()
	                .selector('edge')
	                .style({
	                  'line-color': 'data(color)',
	                })
	            }

	            // Cytoscape Styling
	            // Apply the node color as defined in the textColor format option
	            cy.style()
	              .selector('node')
	              .style({
	                'background-color': 'data(color)',
	                'min-zoomed-font-size': '15',
	                'color': textColor,
	                'shape': 'data(shape)'
	              })

	            // Node Highlighting class
	            cy.style()
	              .selector('.nodehighlighted')
	              .style({
	                'border-width': 5,
	                'border-color': 'red',
	                'width': '60px',
	                'height': '60px',
	                'transition-duration': '1s'
	              });

	            // Node highlighted children class (Used when remove field is present)
	            cy.style()
	              .selector('.nodehighlightedchildren')
	              .style({
	                'border-width': 5,
	                'border-color': 'red',
	                'transition-duration': '1s'
	              });


	            // Highlighted Class for path highlighted nodes and finally update the style sheet
	            cy.style()
	              .selector('.highlighted')
	              .style({
	                'background-color': '#61bffc',
	                'line-color': '#cc0000',
	                'target-arrow-color': '#cc0000',
	                'transition-property': 'background-color, line-color, target-arrow-color',
	                'transition-duration': '0.5s'
	              }).update();

	            // End Styling

	            // Run the layout
	            runLayout(this.layoutStyle)

	            // Run Layout function
	            function runLayout(layoutStyle, initialRun = true) {

	              // If Prefilter has been configured
	              if (preFilter) {
	                // If it is the first time the layout has been run for this javascript session
	                if (initialRun == true) {
	                  if (preFilter.length > 0) {
	                    // If the node exists
	                    if (nodesByName[preFilter].id) {
	                      node_id = "#" + nodesByName[preFilter].id;
	                      // Do a path finding process and add to a collection to highlight all nodes outbound and inbound respecting direction for removal
	                      highlightCollection = cy.collection(cy.elements().bfs(node_id, 1, directedGlobal).path);
	                      var element_del = cy.elements().not(cy.$(highlightCollection));
	                      // Remove elements
	                      cy.remove(element_del);
	                    }
	                  }
	                }
	              }
	              // If the remove is specified and it is also the initial run of the graph
	              if (preRemove && initialRun == true) {
	                // Check to ensure that the preRemove var is not empty
	                if (preRemove.length > 0) {
	                  // Check to ensure that the node exists.
	                  if (nodesByName[preRemove].id) {
	                    var initialRun = false;

	                    node_id = "#" + nodesByName[preRemove].id;
	                    initial_node = cy.$(node_id);
	                    // If we are adding children recursively on clicks 
	                    if (recursiveLookup == false) {
	                      successor_preRemove = initial_node.outgoers()
	                      predecessor_preRemove = initial_node.incomers()
	                      // If we are only adding immediate children on clicks 
	                    } else {
	                      successor_preRemove = initial_node.successors()
	                      predecessor_preRemove = initial_node.predecessors()
	                    }
	                    // Create a new colletion from aboce
	                    jointNodes_preRemove = successor_preRemove.union(predecessor_preRemove);
	                    // Add the children as keys in the nodesByName dictionary
	                    nodesByName[preRemove].children = jointNodes_preRemove;

	                    // Delete the rest and push the element_preRemove to a variable that can be used later for adding back in a compute efficient way.
	                    element_preRemove = cy.$().not(cy.$(node_id));

	                    // Iterate through nodes and add predecessors and successors to the nodeByName array
	                    for (var x = 0; x < element_preRemove.length; x++) {
	                      if (element_preRemove[x].outgoers().length > 1 || element_preRemove[x].incomers().length > 1) {
	                        if (recursiveLookup == false) {
	                          var successor_preRemove = element_preRemove[x].outgoers()
	                          var predecessor_preRemove = element_preRemove[x].incomers()
	                        } else {
	                          var successor_preRemove = element_preRemove[x].successors()
	                          var predecessor_preRemove = element_preRemove[x].predecessors()
	                        }
	                        var jointNodes_preRemove = successor_preRemove.union(predecessor_preRemove);
	                        node_id = "#" + element_preRemove[x].id();
	                        node_label = cy.$(node_id).data('label');
	                        if (nodesByName[node_label]) {
	                          nodesByName[node_label].children = jointNodes_preRemove
	                        }

	                      }
	                    }

	                    // Remove all of the elements from the view except the first node.
	                    cy.remove(element_preRemove);
	                  }
	                }
	              }
	              // Fcose Layout Options
	              // Fcose Layout Options
	              var fcoseOptions = {
	                stop: function () {
	                  cy.removeAllListeners();
	                  launchPostProcess();
	                },
	                name: layoutStyle,
	                quality: "default",
	                // Type of layout animation. The option set is {'during', 'end', false}
	                animate: false,
	                fit: false,
	                // For enabling tiling
	                tile: true,
	                spacingFactor: 1.2,
	                hideEdgesOnViewport: true,
	                hideLabelsOnViewport: true,
	                nodeDimensionsIncludeLabels: true,
	                // interpolate on high density displays instead of increasing resolution
	                pixelRatio: 1,
	                // a motion blur effect that increases perceived performance for little or no cost
	                motionBlur: true,
	                nodeDimensionsIncludeLabels: true,
	                nodeRepulsion: 20000,
	                nodeOverlap: 300,
	                // separation amount between nodes
	                nodeSeparation: 500,
	                // Nesting factor (multiplier) to compute ideal edge length for nested edges
	                nestingFactor: 0.1,
	                // Gravity force (constant)
	                gravity: 0.1,

	              };

	              // Cose Bilkent Layout options
	              var coseBilkentOptions = {
	                stop: function () {
	                  cy.removeAllListeners();
	                  launchPostProcess();
	                },
	                name: layoutStyle,
	                // Type of layout animation. The option set is {'during', 'end', false}
	                animate: false,
	                fit: false,

	                hideEdgesOnViewport: true,
	                hideLabelsOnViewport: true,
	                // interpolate on high density displays instead of increasing resolution
	                pixelRatio: 1,
	                // a motion blur effect that increases perceived performance for little or no cost
	                motionBlur: true,
	                nodeRepulsion: 20000,
	                nodeOverlap: 300
	              };
	              // Standard Cose Animation Options
	              var layoutCoseOptions = {
	                stop: function () {
	                  cy.removeAllListeners();
	                  launchPostProcess();
	                },
	                name: 'cose',
	                animate: false,
	                padding: 100,
	                fit: false,
	                nodeOverlap: 30,
	                idealEdgeLength: function (edge) {
	                  switch (edge.data().type) {
	                    case 1:
	                      return 30;
	                    case 2:
	                    case 3:
	                      return 120;
	                    case 0:
	                    default:
	                      return 120;
	                  }
	                },
	                edgeElasticity: function (edge) {
	                  switch (edge.data().type) {
	                    case 1:
	                      return 50;
	                    case 2:
	                    case 3:
	                      return 200;
	                    case 0:
	                    default:
	                      return 200;
	                  }
	                },
	                nestingFactor: 1.2,
	                initialTemp: 1000,
	                coolingFactor: 0.99,
	                minTemp: 1.0,
	                gravity: 1.4
	              };
	              // Switch statement to run different operations depending on the layout selected.
	              switch (layoutStyle) {
	                case "fcose":
	                  currentLayout = cy.layout(fcoseOptions)
	                  currentLayout.run();
	                  break;
	                case "cose-bilkent":
	                  currentLayout = cy.layout(coseBilkentOptions);
	                  currentLayout.run();
	                  break;

	                case "cose":
	                  currentLayout = cy.layout(layoutCoseOptions);
	                  currentLayout.run();
	                  break;

	                default:
	                  currentLayout = cy.layout({
	                    stop: function () {
	                      cy.removeAllListeners();
	                      launchPostProcess();
	                    },
	                    name: layoutStyle,
	                    nodeDimensionsIncludeLabels: true,
	                    // Performance Options
	                    hideEdgesOnViewport: true,
	                    hideLabelsOnViewport: true,
	                    // interpolate on high density displays instead of increasing resolution
	                    pixelRatio: 1,
	                    // a motion blur effect that increases perceived performance for little or no cost
	                    motionBlur: true,
	                    animate: false,
	                    nodeRepulsion: 4096,
	                    nodeOverlap: 4,
	                    fit: false
	                  })
	                  currentLayout.run();
	                  break;
	              }
	            }

	            function launchPostProcess() {
	              let boxedNodes = cy.collection();
	              let elemsWChildren = cy.collection();
	              if (preRemove) {
	                cy.$(cy.elements()).removeClass('nodehighlightedchildren');
	                cy.on('tap', 'node', function (evt) {
	                  node_id = "#" + evt.target.id();
	                  node_label = cy.$(node_id).data('label');
	                  if (nodesByName[node_label].children && nodesByName[node_label].children.length > 0 && nodesByName[node_label].children.difference(cy.elements()).length > 0) {
	                    var diff_nodes = nodesByName[node_label].children.difference(cy.elements());
	                    cy.add(diff_nodes);
	                    runLayout(layoutStyle_global, false);
	                  }

	                });
	                for (var x = 0; x < cy.elements().length; x++) {
	                  if (nodesByName[cy.elements()[x].data('label')] && nodesByName[cy.elements()[x].data('label')].children.length > 0 && nodesByName[cy.elements()[x].data('label')].children.difference(cy.elements())) {
	                    if (nodesByName[cy.elements()[x].data('label')].children.difference(cy.elements()).length > 0) {
	                      elemsWChildren = elemsWChildren.union(cy.elements()[x]);
	                    }
	                  }
	                }
	                cy.$(elemsWChildren).addClass('nodehighlightedchildren')
	              }
	              // If the node list and menus do not exist, add them.
	              if (document.getElementById(panel_node_list) == undefined) {
	                // Create a Datalist for the search nodes
	                var nodeListDataList = document.createElement("datalist");
	                nodeListDataList.setAttribute("id", panel_node_list);
	                document.body.appendChild(nodeListDataList);

	                // Add nodes to list
	                var list = document.getElementById(panel_node_list);
	                nodesUnique.forEach(function (node) {
	                  var option = document.createElement('option');
	                  option.value = node;
	                  list.appendChild(option);
	                });
	              }
	              if (document.getElementById('menu_list') == undefined) {
	                // Create a list element
	                var menuDataList = document.createElement("datalist");
	                menuDataList.setAttribute("id", "menu_list");
	                document.body.appendChild(menuDataList);

	                // Add Menu Items
	                menu_list_items = ['Delete Highlighted Items', 'Delete Non-Highlighted Items', 'Refresh', 'Clear Formatting', 'Save State', 'Style Edges'];
	                menu_list_items = menu_list_items.sort()
	                var list = document.getElementById('menu_list');
	                menu_list_items.forEach(function (item) {
	                  var option = document.createElement('option');
	                  option.value = item;
	                  list.appendChild(option);
	                });

	              }
	              // Add box highlight function
	              cy.on('box', function (e) {
	                let node = e.target;
	                boxedNodes = boxedNodes.union(node);
	                boxedNodes.addClass('highlighted');
	              });

	              // Begin - Add Menu for nodes and background
	              cy.cxtmenu({
	                selector: 'node',
	                commands: [{
	                    content: "Single Path Select",
	                    select: function (ele) {
	                      if (start) {
	                        end = ele.id();
	                        highlightNextEle(start, end);
	                      } else {
	                        start = ele.id();
	                        cy.getElementById(start).addClass('highlighted')
	                      };
	                    }
	                  },
	                  {
	                    content: "Hlt All Paths",
	                    select: function (ele) {
	                      start = ele.id();
	                      n_predecessors = ele.predecessors()
	                      n_successors = ele.successors()
	                      jointNodes = n_predecessors.union(n_successors);
	                      jointNodes.addClass('highlighted')
	                      highlightAllPathsFrom(start)

	                    }
	                  },
	                  {
	                    content: "Set Token",
	                    select: function (ele) {
	                      // Get List of All tokems and push to an array
	                      var tokens = mvc.Components.get("default");
	                      var tokenList = [];
	                      for (const [key, value] of Object.entries(tokens.attributes)) {
	                        tokenList.push(key)
	                      }



	                      if (document.getElementById('token_list') == undefined) {
	                        // Create a Datalist for the token list
	                        var tokenListDataList = document.createElement("datalist");
	                        tokenListDataList.setAttribute("id", "token_list");
	                        document.body.appendChild(tokenListDataList);
	        
	                        // Add tokens to list
	                        var list = document.getElementById("token_list");
	                        tokenList.forEach(function (token) {
	                          var option = document.createElement('option');
	                          option.value = token;
	                          list.appendChild(option);
	                        });
	                      }

	                      if (tokenCheckedGlobal){
	                        console.log('Persistent field checked, updated token with new value');
	                        // Change the value of a token the selected value from the graph
	                        tokens.set(tokenValueGlobal, cy.$("#" + ele.id()).data().label);
	                      }
	                      // If no global token set, create the modal
	                      else {
	                      // Create a Modal that asks the user which token they want to set this as.
	                      // Now we initialize the Modal itself
	                      var myModal = new Modal("modal1", {
	                        title: "Set Token",
	                        backdrop: 'static',
	                        keyboard: false,
	                        destroyOnHide: true,
	                        type: 'normal'
	                      });
	                      myModal.body
	                        .append($('<p>Use this menu to set a token in your visualisation.</p>'));
	                      myModal.body
	                        .append($('<input>').attr({
	                          'name': 'token_list',
	                          'id': 'token_input',
	                          'type': 'text',
	                          'list': 'token_list',
	                          'style': 'z-index:9999'
	                        }));
	                      myModal.body
	                      .append($('<h4>Persist Token:</h4>'));
	                      myModal.body
	                      .append($('<input type="checkbox" id="tokenCheckbox" name="tokenCheckbox">'));

	                      myModal.footer.append($('<button>').attr({
	                        type: 'button',
	                        'data-dismiss': 'modal'
	                      }).addClass('btn btn-primary').text('Set Token').on('click', function () {
	                        // Do Nothing Function
	                        tok = document.getElementById('tokenCheckbox');
	                        tokValue = document.getElementById('token_input');
	                        tokenCheckedGlobal = tok.checked
	                        tokenValueGlobal = tokValue.value
	                        var element = document.getElementById('tokenCheckbox');
	                        element.parentNode.removeChild(element);

	                        // Change the value of a token the selected value from the graph
	                        tokens.set(tokenValueGlobal, cy.$("#" + ele.id()).data().label);

	                      }))
	                      myModal.show(); // Launch it!
	                      // End Modal Addition
	                    }
	                  }
	                  },

	                  {
	                    content: 'Focus',
	                    select: function (ele) {
	                      var collection;
	                      // Save the current state of the graph
	                      graphStateForFocus = cy.json();
	                      // Find the node if of the currently selected node
	                      node_id = "#" + ele.id();
	                      node = cy.$(node_id)
	                      positionOfNode = ele.position()
	                      isZoomedIn = true;
	                      focus_Node_Outgoers = ele.outgoers()
	                      focus_Node_Incomers = ele.incomers()
	                      collection = focus_Node_Outgoers.union(focus_Node_Incomers);
	                      collection = collection.union(node);
	                      notInCollection = cy.elements().not(cy.$(collection));

	                      var layout = collection.layout({
	                        name: 'concentric',
	                        fit: false,
	                        animate: true,
	                        spacingFactor: 4,
	                        minNodeSpacing: 20,
	                        avoidOverlap: true,
	                        boundingBox: {
	                          x1: positionOfNode.x - 1,
	                          x2: positionOfNode.x + 1,
	                          y1: positionOfNode.y - 1,
	                          y2: positionOfNode.y + 1
	                        },
	                        concentric: function (ele) {
	                          if (ele.same(node)) {
	                            return 4;
	                          } else {
	                            return 1;
	                          }
	                        },
	                        levelWidth: function () {
	                          return 1;
	                        },


	                      });

	                      // Run the layout
	                      layout.run();
	                      // Update the style to make all nodes opacity 1
	                      cy.style()
	                        .selector(notInCollection)
	                        .style({
	                          'opacity': 0.1,
	                        })

	                      cy.style()
	                        .selector(collection)
	                        .style({
	                          'text-opacity': 1.0,
	                          'z-index': 999,
	                          'opacity': 1.0
	                        })
	                        .update()


	                      cy.animate({
	                        zoom: 1,
	                        center: {
	                          eles: node
	                        }
	                      }, {
	                        duration: 1000

	                      });

	                      // Create a popper menu to allow resetting the layout
	                      let popper2 = cy.popper({
	                        content: () => {
	                          // Create an input box
	                          var x = document.createElement("button");
	                          x.setAttribute("name", "reset_view");
	                          x.setAttribute("id", "reset_view");
	                          x.setAttribute("class", "btn  btn-primary")
	                          x.innerHTML = "Reset";
	                          x.setAttribute("style", "z-index:9999");
	                          x.addEventListener("click", function (e) {
	                            // Add the saved graph as the current json
	                            cy.json(graphStateForFocus)
	                            var layoutStatic = cy.layout({
	                              name: 'preset',
	                              animation: true,
	                              animationEasing: 'linear',
	                              animationDuration: 1000

	                            });
	                            // Prevent mouse over highlight from occuring
	                            isZoomedIn = undefined;
	                            layoutStatic.run();
	                            // Delete the button after using
	                            var element = document.getElementById('reset_view');
	                            element.parentNode.removeChild(element);
	                          }, false);;
	                          document.body.appendChild(x);

	                          return x;
	                        },
	                        renderedPosition: () => ({
	                          x: 10,
	                          y: 10
	                        }),
	                        popper: {

	                        } // my popper options here
	                      });

	                    },
	                  },
	                  {
	                    content: 'Condense',
	                    select: function (ele) {
	                      var collection;
	                      // Find the node if of the currently selected node
	                      node_id = "#" + ele.id();
	                      node = cy.$(node_id)
	                      positionOfNode = ele.position()
	                      focus_Node_Outgoers = ele.outgoers()
	                      focus_Node_Incomers = ele.incomers()
	                      collection = focus_Node_Outgoers.union(focus_Node_Incomers);
	                      collection = collection.union(node);
	                      notInCollection = cy.elements().not(cy.$(collection));
	                      concentricCount = 0;

	                      // Total nodes to calculate the amount of 
	                      totalNodes = collection.length
	                      if (totalNodes < 50) {
	                        spacingFactorVar = 4
	                      } else if (totalNodes >= 50 && totalNodes <= 80) {
	                        spacingFactorVar = 2

	                      } else if (totalNodes >= 81 && totalNodes <= 150) {
	                        spacingFactorVar = 1

	                      } else {
	                        spacingFactorVar = 0.25
	                      }
	                      var layout = collection.layout({
	                        name: 'concentric',
	                        fit: false,
	                        animate: true,
	                        spacingFactor: spacingFactorVar,
	                        minNodeSpacing: 5,
	                        avoidOverlap: true,
	                        boundingBox: {
	                          x1: positionOfNode.x - 1,
	                          x2: positionOfNode.x + 1,
	                          y1: positionOfNode.y - 1,
	                          y2: positionOfNode.y + 1
	                        },
	                        concentric: function (ele) {
	                          if (ele.same(node)) {
	                            return 4;
	                          } else {
	                            return 1;
	                          }
	                        },
	                        levelWidth: function () {
	                          return 1;
	                        },



	                      });

	                      // Run the layout
	                      layout.run();
	                      currentLayout = layout
	                      cy.animate({
	                        zoom: 0.2,
	                        center: {
	                          eles: node
	                        }
	                      }, {
	                        duration: 1000

	                      });

	                    },
	                  },

	                ]
	              });

	              cy.cxtmenu({
	                selector: 'core',
	                commands: [{
	                    content: 'Search Nodes',
	                    select: function () {
	                      // Now we initialize the Modal itself
	                      var myModal = new Modal("modal1", {
	                        title: "Search Nodes",
	                        backdrop: 'static',
	                        keyboard: false,
	                        destroyOnHide: true,
	                        type: 'normal'
	                      });
	                      myModal.body
	                        .append($('<p>Use the search menu to find and zoom into a node.</p>'));
	                      myModal.body
	                        .append($('<input>').attr({
	                          'name': 'node_search',
	                          'id': 'node_search',
	                          'type': 'text',
	                          'list': panel_node_list,
	                          'style': 'z-index:9999'
	                        }));

	                      myModal.footer.append($('<button>').attr({
	                        type: 'button',
	                        'data-dismiss': 'modal'
	                      }).addClass('btn btn-primary').text('Search').on('click', function () {
	                        // Do Nothing Function
	                        searchNodes();

	                      }))
	                      myModal.show(); // Launch it!
	                    },
	                  },

	                  {
	                    content: 'Menu',
	                    select: function (ele) {
	                      // Now we initialize the Modal itself
	                      var myModal = new Modal("modal1", {
	                        title: "Menu",
	                        backdrop: 'static',
	                        keyboard: false,
	                        destroyOnHide: true,
	                        type: 'normal'
	                      });
	                      myModal.body
	                        .append($('<p>Select from the list of available functions.</p>'));

	                      myModal.body
	                        .append($('<input>').attr({
	                          'name': 'menu_select',
	                          'id': 'menu_select',
	                          'type': 'text',
	                          'list': 'menu_list',
	                          'style': 'z-index:9999'
	                        }).addClass('table table-striped table-hover'));

	                      myModal.footer.append($('<button>').attr({
	                        type: 'button',
	                        'data-dismiss': 'modal'
	                      }).addClass('btn btn-primary').text('Select').on('click', function () {
	                        // Do Nothing Function
	                        x = document.getElementById('menu_select')
	                        returnMenu(ele, x);

	                      }))
	                      myModal.show(); // Launch it!
	                    },
	                  },

	                ]
	              });

	              // Set Min Zoom / Max Zoom
	              cy.minZoom(0.05);
	              cy.maxZoom(1.5);
	              var zIndex;
	              // Set a mouse over and mouse out listener for edges to make them easier to view
	              cy.on('mouseover', 'edge', function (evt) {
	                if (isZoomedIn == undefined) {
	                  edge_id = "#" + evt.target.id()
	                  zIndex = cy.$(edge_id).style().zIndex
	                  cy.style()
	                    .selector(edge_id)
	                    .style({
	                      'text-opacity': 1.0,
	                      'opacity': 1.0,
	                      'z-index': 999
	                    }).update()
	                }
	              });

	              cy.on('mouseout', 'edge', function (evt) {
	                if (isZoomedIn == undefined) {
	                  edge_id = "#" + evt.target.id()
	                  cy.style()
	                    .selector(edge_id)
	                    .style({
	                      'text-opacity': 0.1,
	                      'opacity': 0.3,
	                      'z-index': zIndex
	                    }).update()
	                  var zIndez
	                }
	              });


	              if (preFilter) {
	                node_id = "#" + nodesByName[preFilter].id;
	                cy.fit(node_id);
	              } else if (preRemove && initialRun == true) {
	                node_id = "#" + nodesByName[preRemove].id;
	                cy.fit(node_id);
	              } else if (initialRun == false) {
	                // Do nothing routine
	                pass
	              } else {
	                cy.fit()
	              }


	            }

	            // Specify interval (in milliseconds)
	            const interval = 300;
	            cy.dblclick(interval);

	            cy.on('dblclick', function (e) {
	              this.drilldownToCategory('_raw', 'test', e);
	            }.bind(this));

	            // End - Add Menu for nodes and background


	            function searchNodes(ele) {
	              var node_value = document.getElementById("node_search").value;
	              if (nodesByName[node_value]) {
	                node_id = "#" + nodesByName[node_value].id;
	                // Zoom in to the node naturally
	                cy.animate({
	                  zoom: 1,
	                  center: {
	                    eles: node_id
	                  }
	                }, {
	                  duration: 1000

	                });
	                // Adjust view to ensure that the node is ~ centre
	                cy.$(node_id).flashClass('nodehighlighted', 2500);

	              }
	              // Delete the search box
	              var element = document.getElementById('node_search');
	              element.parentNode.removeChild(element);
	              // var data_node_list = document.getElementById("node_list");
	              // data_node_list.remove(data_node_list);

	            }

	            // Begin - Path Highlighting Function

	            function highlightNextEle(start_id, end_id) {
	              // Highlight Elements
	              startid_hash = "#" + start_id
	              endid_hash = "#" + end_id
	              switch (pathAlgoGlobal) {

	                case "dijkstra":
	                  // code block
	                  var dijkstra = cy.elements().dijkstra(startid_hash, function (eles) {
	                    return 1
	                  }, directedGlobal);
	                  var djs = dijkstra.pathTo(endid_hash);
	                  djs.length == 1 ? displayMessage("Error", "No path found between two nodes") : nodesByName[link[1]].color = link[format_info['dest_color']]
	                  displayMessage(title, message)

	                  for (var x = 0; x < djs.length; x++) {
	                    var el = djs[x];
	                    el.addClass('highlighted');
	                  }
	                  break;

	                case "aStar":
	                  // code block
	                  var aStar = cy.elements().aStar({
	                    root: startid_hash,
	                    goal: endid_hash,
	                    directed: directedGlobal
	                  });
	                  for (var x = 0; x < aStar.path.length; x++) {
	                    var el = aStar.path[x];
	                    el.addClass('highlighted');
	                  }
	                  break;

	                case "floydWarshall":
	                  // code block
	                  var fw = cy.elements().floydWarshall();
	                  fw_collection = fw.path(startid_hash, endid_hash)
	                  for (var x = 0; x < fw_collection.length; x++) {
	                    var el = fw_collection[x];
	                    el.addClass('highlighted');
	                  }
	                  break;
	                case "bellmanFord":
	                  // code block
	                  var bellmanFord = cy.elements().bellmanFord({
	                    root: startid_hash,
	                    directed: directedGlobal
	                  });
	                  var djs = bellmanFord.pathTo(endid_hash);
	                  for (var x = 0; x < djs.length; x++) {
	                    var el = djs[x];
	                    el.addClass('highlighted');
	                  }
	                  break;

	                default:
	                  // code block
	                  var dijkstra = cy.elements().dijkstra(startid_hash, function (eles) {
	                    return 1
	                  }, directedGlobal);
	                  var djs = dijkstra.pathTo(endid_hash);

	                  for (var x = 0; x < djs.length; x++) {
	                    var el = djs[x];
	                    el.addClass('highlighted');
	                  }
	                  break;
	              }
	              start = undefined;
	              end = undefined;
	            }

	            // End - Single Path Highlighting Function

	            // Begin - Higlight All Paths From.
	            function highlightAllPathsFrom(start_node) {
	              start_node = "#" + start_node;
	              var bfs = cy.elements().bfs(start_node, 1, directedGlobal);
	              for (var x = 0; x < bfs.path.length; x++) {
	                var el = bfs.path[x];
	                el.addClass('highlighted');
	              }

	            }
	            // End Higlight All Nodes between path.

	            // Debounce Function for improved performance
	            function debounce(func, wait, immediate) {
	              var timeout;
	              return function () {
	                var context = this,
	                  args = arguments;
	                var later = function () {
	                  timeout = null;
	                  if (!immediate) func.apply(context, args);
	                };
	                var callNow = immediate && !timeout;
	                clearTimeout(timeout);
	                timeout = setTimeout(later, wait);
	                if (callNow) func.apply(context, args);
	              };
	            };

	            function nodeById(name, node_id) {
	              return nodesByName[name].id || (nodesByName[name].id = node_id);
	            }

	            function returnMenu(ele, x) {

	              switch (x.value) {
	                case "Delete Highlighted Items":

	                  deleteElement('menu_select')

	                  var element_del = cy.elements(cy.$('.highlighted'));
	                  // Remove elements
	                  cy.remove(element_del);
	                  break;

	                case "Delete Non-Highlighted Items":
	                  // deleteElement('menu_list')
	                  deleteElement('menu_select')
	                  // Select all elements that are not highligted
	                  var element_del = cy.elements().not(cy.$('.highlighted'));
	                  // Remove elements
	                  cy.remove(element_del);
	                  cy.elements().removeClass('highlighted');

	                  break;

	                case "Refresh":
	                  // deleteElement('menu_list')
	                  deleteElement('menu_select')
	                  runLayout(layoutStyle_global, false);
	                  break;

	                case "Search":
	                  // deleteElement('menu_list')
	                  deleteElement('menu_select')

	                  break;



	                case "Clear Formatting":
	                  // deleteElement('menu_list')
	                  deleteElement('menu_select')
	                  start = undefined;
	                  end = undefined;
	                  cy.elements().removeClass('highlighted');
	                  break;

	                case "Save State":
	                  // deleteElement('menu_list')
	                  deleteElement('menu_select')

	                  // Create Modal for HTTP Save State
	                  var myModal = new Modal("modal1", {
	                    title: "Save State",
	                    backdrop: 'static',
	                    keyboard: false,
	                    destroyOnHide: true,
	                    type: 'normal'
	                  });
	                  myModal.body
	                    .append($('<p>This menu allows you to save state of your diagram</p>'));


	                  myModal.body
	                    .append($('<h4>HTTP Event Code</h4>'));
	                  myModal.body
	                    .append($('<input type="text" autocomplete="on" id="http_event_code" name="http_event_code" required>'));

	                  myModal.body
	                    .append($('<h4>HTTP Destination</h4>'));
	                  myModal.body
	                    .append($('<input type="text" id="http_destination" autocomplete="on" name="http_destination" value="https://yoursplunkserver.com:8089/services/collector" required>'));

	                  myModal.body
	                    .append($('<h4>Description</h4>'));
	                  myModal.body
	                    .append($('<input type="text" id="http_description" name="http_description" value="This graph shows ...." required>'));


	                  myModal.footer.append($('<button>').attr({
	                    type: 'button',
	                    'data-dismiss': 'modal'
	                  }).addClass('btn btn-primary').text('Submit').on('click', function (modalEle) {
	                    // Post to HEC
	                    var description = document.getElementById("http_description").value;
	                    var http_event_code = document.getElementById("http_event_code").value;
	                    var http_destination = document.getElementById("http_destination").value;
	                    httpRequest(http_destination, http_event_code, cy.json(), description);

	                  }))
	                  myModal.show(); // Launch it!

	                  break;

	                case "Remove Nodes by Count":
	                  // deleteElement('menu_list')
	                  deleteElement('menu_select')

	                  // Create Modal for HTTP Save State
	                  var myModal = new Modal("modal1", {
	                    title: "Remove Nodes By Count",
	                    backdrop: 'static',
	                    keyboard: false,
	                    destroyOnHide: true,
	                    type: 'normal'
	                  });
	                  /*
	                  $(myModal.$el).on("hide", function() {
	                  })*/
	                  myModal.body
	                    .append($('<p>This menu allows you to delete nodes that have less than or greater than a number you specify of children or parent nodes recursively</p>'));

	                  myModal.body
	                    .append($('<select id="lt_gt" name="lt_gt"><option value ="less_than">Less Than</option><option value ="gt_than">Greater Than</option>'));
	                  myModal.body
	                    .append($('<input type="text" autocomplete="on" id="number" name="number" required>'));

	                  myModal.footer.append($('<button>').attr({
	                    type: 'button',
	                    'data-dismiss': 'modal'
	                  }).addClass('btn btn-primary').text('Submit').on('click', function (modalEle) {
	                    var lt_gt = document.getElementById("lt_gt").value;
	                    var numberInput = document.getElementById("number").value;
	                    if (Number(numberInput)) {
	                      if (lt_gt == "less_than") {
	                        removeNodesByCount = cy.collection()
	                        Object.keys(nodesByName).forEach(function (key) {

	                          if (nodesByName[key].children && nodesByName[key].children.length < numberInput) {
	                            removeNodesByCount.union(nodesByName[key].children)
	                          } else {
	                            // Delete the node
	                            node_id = "#" + nodesByName[key].id
	                            removeNodesByCount.union(cy.$(node_id))
	                          }
	                        })
	                      } else if (lt_gt == "gt_than") {
	                        if (nodesByName[key].children && nodesByName[key].children.length > numberInput) {
	                          removeNodesByCount.union(nodesByName[key].children)
	                        }

	                      }
	                      // Finally
	                      cy.remove(removeNodesByCount);
	                    } else(
	                      console.log("Error not a number")
	                    )

	                  }))
	                  myModal.show(); // Launch it!

	                  break;

	                case "Style Edges":
	                  // deleteElement('menu_list')
	                  deleteElement('menu_select')

	                  // Create Modal for HTTP Save State
	                  var myModal = new Modal("modal1", {
	                    title: "Style Edges",
	                    backdrop: 'static',
	                    keyboard: false,
	                    destroyOnHide: true,
	                    type: 'normal'
	                  });
	                  /*
	                  $(myModal.$el).on("hide", function() {
	                  })*/
	                  myModal.body
	                    .append($('<p>This menu allows you to style edges that have a string present on the edge and highlight it in a different colour</p>'));
	                  myModal.body
	                    .append($('<h4>String To Search (Single Phrase)</h4>'));
	                  myModal.body
	                    .append($('<input type="text" autocomplete="on" id="edgeTextSearch" name="edgeTextSearch" required>'));
	                  myModal.body
	                    .append($('<h4>Color to Select</h4>'));
	                  myModal.body
	                    .append($(' <input type="color" id="style_color" name="head" value="#e66465">'));

	                  myModal.footer.append($('<button>').attr({
	                    type: 'button',
	                    'data-dismiss': 'modal'
	                  }).addClass('btn btn-primary').text('Submit').on('click', function (modalEle) {
	                    var description = document.getElementById("edgeTextSearch").value;
	                    var edgeLineColor = document.getElementById("style_color").value;
	                    searchString = 'edge[label *= "' + description + '"]';
	                    searchFilter = cy.filter(searchString);
	                    // Create new edge search color style and apply it.
	                    edgeSearchColorNum++

	                    // Used to create the style in CSS Format.
	                    edgeSearchColorStyle = '.edgeSearchColor' + edgeSearchColorNum.toString()
	                    // Used to apply the style in CSS format
	                    edgeSearchColorStyleCy = 'edgeSearchColor' + edgeSearchColorNum.toString()
	                    // Highlighted Class
	                    cy.style()
	                      .selector(edgeSearchColorStyle)
	                      .style({
	                        'line-color': edgeLineColor
	                      }).update();
	                    cy.$(searchFilter).addClass(edgeSearchColorStyleCy)
	                  }))
	                  myModal.show(); // Launch it!

	                  break;

	                default:
	                  // deleteElement('menu_list')
	                  deleteElement('menu_select')
	                  // Do nothing

	                  break;

	              }
	            }

	            function deleteElement(elementId) {
	              // Delete the search box
	              var element = document.getElementById(elementId);
	              element.remove(element);
	            }

	            function makeid() {
	              var result = '';
	              var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
	              var charactersLength = characters.length;
	              for (var i = 0; i < 20; i++) {
	                result += characters.charAt(Math.floor(Math.random() * charactersLength));
	              }
	              return result;
	            }

	            function displayMessage(title, message) {
	              var myModal = new Modal("Temp Model", {
	                title: title,
	                backdrop: 'static',
	                keyboard: false,
	                destroyOnHide: true,
	                type: 'normal'
	              });
	              myModal.body
	                .append($('<p>' + message + '</p>'));

	              myModal.footer.append($('<button>').attr({
	                type: 'button',
	                'data-dismiss': 'modal'
	              }).addClass('btn btn-primary').text('Close').on('click', function () {
	                // Do Nothing Function

	              }))
	              myModal.show(); // Launch it!
	            }

	            function httpRequest(url, hec_code, message, description) {
	              var xhttp = new XMLHttpRequest();
	              full_hec = "Splunk " + hec_code;
	              full_message = {
	                "event": {
	                  "description": description,
	                  "graph_info": message,
	                  "graph_id": makeid()
	                },
	                "sourcetype": "cyto:graph"
	              };
	              xhttp.open("POST", url, true);
	              xhttp.setRequestHeader("Authorization", full_hec);
	              xhttp.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
	              xhttp.onload = function () {
	                // If a non hard error occurs or success
	                responseText = JSON.parse(xhttp.responseText)
	                // Now we initialize the Modal itself
	                var myModal = new Modal("modal1", {
	                  title: "Save State Status",
	                  backdrop: 'static',
	                  keyboard: false,
	                  destroyOnHide: true,
	                  type: 'normal'
	                });
	                /*
	                $(myModal.$el).on("hide", function() {
	                })*/
	                myModal.body
	                  .append($('<p><b>Response</b> : ' + responseText.text + ' </p>'));

	                myModal.footer.append($('<button>').attr({
	                  type: 'button',
	                  'data-dismiss': 'modal'
	                }).addClass('btn btn-primary').text('Close').on('click', function () {
	                  // Do Nothing Function

	                }))
	                myModal.show(); // Launch it!

	              };
	              xhttp.onerror = function () {
	                // If a hard error occurs
	                // Now we initialize the Modal itself
	                var myModal = new Modal("modal1", {
	                  title: "Error Occured in Saving State",
	                  backdrop: 'static',
	                  keyboard: false,
	                  destroyOnHide: true,
	                  type: 'normal'
	                });
	                /*
	                $(myModal.$el).on("hide", function() {
	                })*/
	                myModal.body
	                  .append($('<p>Error occured.  Check the Javascript console for the details.</p>'));

	                myModal.footer.append($('<button>').attr({
	                  type: 'button',
	                  'data-dismiss': 'modal'
	                }).addClass('btn btn-primary').text('Close').on('click', function () {
	                  // Do Nothing Function

	                }))
	                myModal.show(); // Launch it!

	              }
	              xhttp.send(JSON.stringify(full_message));

	            }

	            function toggleModal() {
	              modal.classList.toggle("show-modal");
	            }

	            function getRandomArbitrary(min, max) {
	              return Math.ceil(Math.random() * (max - min) + min);
	            }

	          // Function to check if a node is in the list and push the name and the group
	          function nodeByName(name, groupId) {
	            return nodesByName[name] || (nodesByName[name] = {
	              name: name,
	              group: groupId
	            });
	          }

	        }

	        },


	        // Search data params
	        getInitialDataParams: function () {
	          return ({
	            outputMode: SplunkVisualizationBase.ROW_MAJOR_OUTPUT_MODE,
	            count: 10000
	          });
	        },

	        drilldownToCategory: function (categoryName, categoryFieldValue, browserEvent) {
	          var data = {};
	          data[categoryName] = categoryFieldValue;

	          this.drilldown({
	            action: SplunkVisualizationBase.FIELD_VALUE_DRILLDOWN,
	            data: data
	          }, browserEvent);
	        },


	        // Override to respond to re-sizing events
	        reflow: function () {}
	      });
	    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

	(function webpackUniversalModuleDefinition(root, factory) {
		if(true)
			module.exports = factory(__webpack_require__(3));
		else if(typeof define === 'function' && define.amd)
			define(["dagre"], factory);
		else if(typeof exports === 'object')
			exports["cytoscapeDagre"] = factory(require("dagre"));
		else
			root["cytoscapeDagre"] = factory(root["dagre"]);
	})(this, function(__WEBPACK_EXTERNAL_MODULE_4__) {
	return /******/ (function(modules) { // webpackBootstrap
	/******/ 	// The module cache
	/******/ 	var installedModules = {};
	/******/
	/******/ 	// The require function
	/******/ 	function __webpack_require__(moduleId) {
	/******/
	/******/ 		// Check if module is in cache
	/******/ 		if(installedModules[moduleId]) {
	/******/ 			return installedModules[moduleId].exports;
	/******/ 		}
	/******/ 		// Create a new module (and put it into the cache)
	/******/ 		var module = installedModules[moduleId] = {
	/******/ 			i: moduleId,
	/******/ 			l: false,
	/******/ 			exports: {}
	/******/ 		};
	/******/
	/******/ 		// Execute the module function
	/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
	/******/
	/******/ 		// Flag the module as loaded
	/******/ 		module.l = true;
	/******/
	/******/ 		// Return the exports of the module
	/******/ 		return module.exports;
	/******/ 	}
	/******/
	/******/
	/******/ 	// expose the modules object (__webpack_modules__)
	/******/ 	__webpack_require__.m = modules;
	/******/
	/******/ 	// expose the module cache
	/******/ 	__webpack_require__.c = installedModules;
	/******/
	/******/ 	// identity function for calling harmony imports with the correct context
	/******/ 	__webpack_require__.i = function(value) { return value; };
	/******/
	/******/ 	// define getter function for harmony exports
	/******/ 	__webpack_require__.d = function(exports, name, getter) {
	/******/ 		if(!__webpack_require__.o(exports, name)) {
	/******/ 			Object.defineProperty(exports, name, {
	/******/ 				configurable: false,
	/******/ 				enumerable: true,
	/******/ 				get: getter
	/******/ 			});
	/******/ 		}
	/******/ 	};
	/******/
	/******/ 	// getDefaultExport function for compatibility with non-harmony modules
	/******/ 	__webpack_require__.n = function(module) {
	/******/ 		var getter = module && module.__esModule ?
	/******/ 			function getDefault() { return module['default']; } :
	/******/ 			function getModuleExports() { return module; };
	/******/ 		__webpack_require__.d(getter, 'a', getter);
	/******/ 		return getter;
	/******/ 	};
	/******/
	/******/ 	// Object.prototype.hasOwnProperty.call
	/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
	/******/
	/******/ 	// __webpack_public_path__
	/******/ 	__webpack_require__.p = "";
	/******/
	/******/ 	// Load entry module and return exports
	/******/ 	return __webpack_require__(__webpack_require__.s = 3);
	/******/ })
	/************************************************************************/
	/******/ ([
	/* 0 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var isFunction = function isFunction(o) {
	  return typeof o === 'function';
	};
	var defaults = __webpack_require__(2);
	var assign = __webpack_require__(1);
	var dagre = __webpack_require__(4);

	// constructor
	// options : object containing layout options
	function DagreLayout(options) {
	  this.options = assign({}, defaults, options);
	}

	// runs the layout
	DagreLayout.prototype.run = function () {
	  var options = this.options;
	  var layout = this;

	  var cy = options.cy; // cy is automatically populated for us in the constructor
	  var eles = options.eles;

	  var getVal = function getVal(ele, val) {
	    return isFunction(val) ? val.apply(ele, [ele]) : val;
	  };

	  var bb = options.boundingBox || { x1: 0, y1: 0, w: cy.width(), h: cy.height() };
	  if (bb.x2 === undefined) {
	    bb.x2 = bb.x1 + bb.w;
	  }
	  if (bb.w === undefined) {
	    bb.w = bb.x2 - bb.x1;
	  }
	  if (bb.y2 === undefined) {
	    bb.y2 = bb.y1 + bb.h;
	  }
	  if (bb.h === undefined) {
	    bb.h = bb.y2 - bb.y1;
	  }

	  var g = new dagre.graphlib.Graph({
	    multigraph: true,
	    compound: true
	  });

	  var gObj = {};
	  var setGObj = function setGObj(name, val) {
	    if (val != null) {
	      gObj[name] = val;
	    }
	  };

	  setGObj('nodesep', options.nodeSep);
	  setGObj('edgesep', options.edgeSep);
	  setGObj('ranksep', options.rankSep);
	  setGObj('rankdir', options.rankDir);
	  setGObj('ranker', options.ranker);

	  g.setGraph(gObj);

	  g.setDefaultEdgeLabel(function () {
	    return {};
	  });
	  g.setDefaultNodeLabel(function () {
	    return {};
	  });

	  // add nodes to dagre
	  var nodes = eles.nodes();
	  for (var i = 0; i < nodes.length; i++) {
	    var node = nodes[i];
	    var nbb = node.layoutDimensions(options);

	    g.setNode(node.id(), {
	      width: nbb.w,
	      height: nbb.h,
	      name: node.id()
	    });

	    // console.log( g.node(node.id()) );
	  }

	  // set compound parents
	  for (var _i = 0; _i < nodes.length; _i++) {
	    var _node = nodes[_i];

	    if (_node.isChild()) {
	      g.setParent(_node.id(), _node.parent().id());
	    }
	  }

	  // add edges to dagre
	  var edges = eles.edges().stdFilter(function (edge) {
	    return !edge.source().isParent() && !edge.target().isParent(); // dagre can't handle edges on compound nodes
	  });
	  for (var _i2 = 0; _i2 < edges.length; _i2++) {
	    var edge = edges[_i2];

	    g.setEdge(edge.source().id(), edge.target().id(), {
	      minlen: getVal(edge, options.minLen),
	      weight: getVal(edge, options.edgeWeight),
	      name: edge.id()
	    }, edge.id());

	    // console.log( g.edge(edge.source().id(), edge.target().id(), edge.id()) );
	  }

	  dagre.layout(g);

	  var gNodeIds = g.nodes();
	  for (var _i3 = 0; _i3 < gNodeIds.length; _i3++) {
	    var id = gNodeIds[_i3];
	    var n = g.node(id);

	    cy.getElementById(id).scratch().dagre = n;
	  }

	  var dagreBB = void 0;

	  if (options.boundingBox) {
	    dagreBB = { x1: Infinity, x2: -Infinity, y1: Infinity, y2: -Infinity };
	    nodes.forEach(function (node) {
	      var dModel = node.scratch().dagre;

	      dagreBB.x1 = Math.min(dagreBB.x1, dModel.x);
	      dagreBB.x2 = Math.max(dagreBB.x2, dModel.x);

	      dagreBB.y1 = Math.min(dagreBB.y1, dModel.y);
	      dagreBB.y2 = Math.max(dagreBB.y2, dModel.y);
	    });

	    dagreBB.w = dagreBB.x2 - dagreBB.x1;
	    dagreBB.h = dagreBB.y2 - dagreBB.y1;
	  } else {
	    dagreBB = bb;
	  }

	  var constrainPos = function constrainPos(p) {
	    if (options.boundingBox) {
	      var xPct = dagreBB.w === 0 ? 0 : (p.x - dagreBB.x1) / dagreBB.w;
	      var yPct = dagreBB.h === 0 ? 0 : (p.y - dagreBB.y1) / dagreBB.h;

	      return {
	        x: bb.x1 + xPct * bb.w,
	        y: bb.y1 + yPct * bb.h
	      };
	    } else {
	      return p;
	    }
	  };

	  nodes.layoutPositions(layout, options, function (ele) {
	    ele = (typeof ele === 'undefined' ? 'undefined' : _typeof(ele)) === "object" ? ele : this;
	    var dModel = ele.scratch().dagre;

	    return constrainPos({
	      x: dModel.x,
	      y: dModel.y
	    });
	  });

	  return this; // chaining
	};

	module.exports = DagreLayout;

	/***/ }),
	/* 1 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	// Simple, internal Object.assign() polyfill for options objects etc.

	module.exports = Object.assign != null ? Object.assign.bind(Object) : function (tgt) {
	  for (var _len = arguments.length, srcs = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	    srcs[_key - 1] = arguments[_key];
	  }

	  srcs.forEach(function (src) {
	    Object.keys(src).forEach(function (k) {
	      return tgt[k] = src[k];
	    });
	  });

	  return tgt;
	};

	/***/ }),
	/* 2 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	var defaults = {
	  // dagre algo options, uses default value on undefined
	  nodeSep: undefined, // the separation between adjacent nodes in the same rank
	  edgeSep: undefined, // the separation between adjacent edges in the same rank
	  rankSep: undefined, // the separation between adjacent nodes in the same rank
	  rankDir: undefined, // 'TB' for top to bottom flow, 'LR' for left to right,
	  ranker: undefined, // Type of algorithm to assigns a rank to each node in the input graph.
	  // Possible values: network-simplex, tight-tree or longest-path
	  minLen: function minLen(edge) {
	    return 1;
	  }, // number of ranks to keep between the source and target of the edge
	  edgeWeight: function edgeWeight(edge) {
	    return 1;
	  }, // higher weight edges are generally made shorter and straighter than lower weight edges

	  // general layout options
	  fit: true, // whether to fit to viewport
	  padding: 30, // fit padding
	  spacingFactor: undefined, // Applies a multiplicative factor (>0) to expand or compress the overall area that the nodes take up
	  nodeDimensionsIncludeLabels: false, // whether labels should be included in determining the space used by a node
	  animate: false, // whether to transition the node positions
	  animateFilter: function animateFilter(node, i) {
	    return true;
	  }, // whether to animate specific nodes when animation is on; non-animated nodes immediately go to their final positions
	  animationDuration: 500, // duration of animation in ms if enabled
	  animationEasing: undefined, // easing of animation if enabled
	  boundingBox: undefined, // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }
	  transform: function transform(node, pos) {
	    return pos;
	  }, // a function that applies a transform to the final node position
	  ready: function ready() {}, // on layoutready
	  stop: function stop() {} // on layoutstop
	};

	module.exports = defaults;

	/***/ }),
	/* 3 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	var impl = __webpack_require__(0);

	// registers the extension on a cytoscape lib ref
	var register = function register(cytoscape) {
	  if (!cytoscape) {
	    return;
	  } // can't register if cytoscape unspecified

	  cytoscape('layout', 'dagre', impl); // register with cytoscape.js
	};

	if (typeof cytoscape !== 'undefined') {
	  // expose to global cytoscape (i.e. window.cytoscape)
	  register(cytoscape);
	}

	module.exports = register;

	/***/ }),
	/* 4 */
	/***/ (function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_4__;

	/***/ })
	/******/ ]);
	});

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

	/*
	Copyright (c) 2012-2014 Chris Pettitt

	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:

	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.

	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE.
	*/

	module.exports = {
	  graphlib: __webpack_require__(4),

	  layout: __webpack_require__(220),
	  debug: __webpack_require__(290),
	  util: {
	    time: __webpack_require__(270).time,
	    notime: __webpack_require__(270).notime
	  },
	  version: __webpack_require__(291)
	};


/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

	/* global window */

	var graphlib;

	if (true) {
	  try {
	    graphlib = __webpack_require__(5);
	  } catch (e) {
	    // continue regardless of error
	  }
	}

	if (!graphlib) {
	  graphlib = window.graphlib;
	}

	module.exports = graphlib;


/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2014, Chris Pettitt
	 * All rights reserved.
	 *
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are met:
	 *
	 * 1. Redistributions of source code must retain the above copyright notice, this
	 * list of conditions and the following disclaimer.
	 *
	 * 2. Redistributions in binary form must reproduce the above copyright notice,
	 * this list of conditions and the following disclaimer in the documentation
	 * and/or other materials provided with the distribution.
	 *
	 * 3. Neither the name of the copyright holder nor the names of its contributors
	 * may be used to endorse or promote products derived from this software without
	 * specific prior written permission.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
	 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
	 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
	 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
	 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
	 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
	 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
	 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
	 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
	 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 */

	var lib = __webpack_require__(6);

	module.exports = {
	  Graph: lib.Graph,
	  json: __webpack_require__(205),
	  alg: __webpack_require__(206),
	  version: lib.version
	};


/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

	// Includes only the "core" of graphlib
	module.exports = {
	  Graph: __webpack_require__(7),
	  version: __webpack_require__(204)
	};


/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	var _ = __webpack_require__(8);

	module.exports = Graph;

	var DEFAULT_EDGE_NAME = "\x00";
	var GRAPH_NODE = "\x00";
	var EDGE_KEY_DELIM = "\x01";

	// Implementation notes:
	//
	//  * Node id query functions should return string ids for the nodes
	//  * Edge id query functions should return an "edgeObj", edge object, that is
	//    composed of enough information to uniquely identify an edge: {v, w, name}.
	//  * Internally we use an "edgeId", a stringified form of the edgeObj, to
	//    reference edges. This is because we need a performant way to look these
	//    edges up and, object properties, which have string keys, are the closest
	//    we're going to get to a performant hashtable in JavaScript.

	function Graph(opts) {
	  this._isDirected = _.has(opts, "directed") ? opts.directed : true;
	  this._isMultigraph = _.has(opts, "multigraph") ? opts.multigraph : false;
	  this._isCompound = _.has(opts, "compound") ? opts.compound : false;

	  // Label for the graph itself
	  this._label = undefined;

	  // Defaults to be set when creating a new node
	  this._defaultNodeLabelFn = _.constant(undefined);

	  // Defaults to be set when creating a new edge
	  this._defaultEdgeLabelFn = _.constant(undefined);

	  // v -> label
	  this._nodes = {};

	  if (this._isCompound) {
	    // v -> parent
	    this._parent = {};

	    // v -> children
	    this._children = {};
	    this._children[GRAPH_NODE] = {};
	  }

	  // v -> edgeObj
	  this._in = {};

	  // u -> v -> Number
	  this._preds = {};

	  // v -> edgeObj
	  this._out = {};

	  // v -> w -> Number
	  this._sucs = {};

	  // e -> edgeObj
	  this._edgeObjs = {};

	  // e -> label
	  this._edgeLabels = {};
	}

	/* Number of nodes in the graph. Should only be changed by the implementation. */
	Graph.prototype._nodeCount = 0;

	/* Number of edges in the graph. Should only be changed by the implementation. */
	Graph.prototype._edgeCount = 0;


	/* === Graph functions ========= */

	Graph.prototype.isDirected = function() {
	  return this._isDirected;
	};

	Graph.prototype.isMultigraph = function() {
	  return this._isMultigraph;
	};

	Graph.prototype.isCompound = function() {
	  return this._isCompound;
	};

	Graph.prototype.setGraph = function(label) {
	  this._label = label;
	  return this;
	};

	Graph.prototype.graph = function() {
	  return this._label;
	};


	/* === Node functions ========== */

	Graph.prototype.setDefaultNodeLabel = function(newDefault) {
	  if (!_.isFunction(newDefault)) {
	    newDefault = _.constant(newDefault);
	  }
	  this._defaultNodeLabelFn = newDefault;
	  return this;
	};

	Graph.prototype.nodeCount = function() {
	  return this._nodeCount;
	};

	Graph.prototype.nodes = function() {
	  return _.keys(this._nodes);
	};

	Graph.prototype.sources = function() {
	  var self = this;
	  return _.filter(this.nodes(), function(v) {
	    return _.isEmpty(self._in[v]);
	  });
	};

	Graph.prototype.sinks = function() {
	  var self = this;
	  return _.filter(this.nodes(), function(v) {
	    return _.isEmpty(self._out[v]);
	  });
	};

	Graph.prototype.setNodes = function(vs, value) {
	  var args = arguments;
	  var self = this;
	  _.each(vs, function(v) {
	    if (args.length > 1) {
	      self.setNode(v, value);
	    } else {
	      self.setNode(v);
	    }
	  });
	  return this;
	};

	Graph.prototype.setNode = function(v, value) {
	  if (_.has(this._nodes, v)) {
	    if (arguments.length > 1) {
	      this._nodes[v] = value;
	    }
	    return this;
	  }

	  this._nodes[v] = arguments.length > 1 ? value : this._defaultNodeLabelFn(v);
	  if (this._isCompound) {
	    this._parent[v] = GRAPH_NODE;
	    this._children[v] = {};
	    this._children[GRAPH_NODE][v] = true;
	  }
	  this._in[v] = {};
	  this._preds[v] = {};
	  this._out[v] = {};
	  this._sucs[v] = {};
	  ++this._nodeCount;
	  return this;
	};

	Graph.prototype.node = function(v) {
	  return this._nodes[v];
	};

	Graph.prototype.hasNode = function(v) {
	  return _.has(this._nodes, v);
	};

	Graph.prototype.removeNode =  function(v) {
	  var self = this;
	  if (_.has(this._nodes, v)) {
	    var removeEdge = function(e) { self.removeEdge(self._edgeObjs[e]); };
	    delete this._nodes[v];
	    if (this._isCompound) {
	      this._removeFromParentsChildList(v);
	      delete this._parent[v];
	      _.each(this.children(v), function(child) {
	        self.setParent(child);
	      });
	      delete this._children[v];
	    }
	    _.each(_.keys(this._in[v]), removeEdge);
	    delete this._in[v];
	    delete this._preds[v];
	    _.each(_.keys(this._out[v]), removeEdge);
	    delete this._out[v];
	    delete this._sucs[v];
	    --this._nodeCount;
	  }
	  return this;
	};

	Graph.prototype.setParent = function(v, parent) {
	  if (!this._isCompound) {
	    throw new Error("Cannot set parent in a non-compound graph");
	  }

	  if (_.isUndefined(parent)) {
	    parent = GRAPH_NODE;
	  } else {
	    // Coerce parent to string
	    parent += "";
	    for (var ancestor = parent;
	      !_.isUndefined(ancestor);
	      ancestor = this.parent(ancestor)) {
	      if (ancestor === v) {
	        throw new Error("Setting " + parent+ " as parent of " + v +
	                        " would create a cycle");
	      }
	    }

	    this.setNode(parent);
	  }

	  this.setNode(v);
	  this._removeFromParentsChildList(v);
	  this._parent[v] = parent;
	  this._children[parent][v] = true;
	  return this;
	};

	Graph.prototype._removeFromParentsChildList = function(v) {
	  delete this._children[this._parent[v]][v];
	};

	Graph.prototype.parent = function(v) {
	  if (this._isCompound) {
	    var parent = this._parent[v];
	    if (parent !== GRAPH_NODE) {
	      return parent;
	    }
	  }
	};

	Graph.prototype.children = function(v) {
	  if (_.isUndefined(v)) {
	    v = GRAPH_NODE;
	  }

	  if (this._isCompound) {
	    var children = this._children[v];
	    if (children) {
	      return _.keys(children);
	    }
	  } else if (v === GRAPH_NODE) {
	    return this.nodes();
	  } else if (this.hasNode(v)) {
	    return [];
	  }
	};

	Graph.prototype.predecessors = function(v) {
	  var predsV = this._preds[v];
	  if (predsV) {
	    return _.keys(predsV);
	  }
	};

	Graph.prototype.successors = function(v) {
	  var sucsV = this._sucs[v];
	  if (sucsV) {
	    return _.keys(sucsV);
	  }
	};

	Graph.prototype.neighbors = function(v) {
	  var preds = this.predecessors(v);
	  if (preds) {
	    return _.union(preds, this.successors(v));
	  }
	};

	Graph.prototype.isLeaf = function (v) {
	  var neighbors;
	  if (this.isDirected()) {
	    neighbors = this.successors(v);
	  } else {
	    neighbors = this.neighbors(v);
	  }
	  return neighbors.length === 0;
	};

	Graph.prototype.filterNodes = function(filter) {
	  var copy = new this.constructor({
	    directed: this._isDirected,
	    multigraph: this._isMultigraph,
	    compound: this._isCompound
	  });

	  copy.setGraph(this.graph());

	  var self = this;
	  _.each(this._nodes, function(value, v) {
	    if (filter(v)) {
	      copy.setNode(v, value);
	    }
	  });

	  _.each(this._edgeObjs, function(e) {
	    if (copy.hasNode(e.v) && copy.hasNode(e.w)) {
	      copy.setEdge(e, self.edge(e));
	    }
	  });

	  var parents = {};
	  function findParent(v) {
	    var parent = self.parent(v);
	    if (parent === undefined || copy.hasNode(parent)) {
	      parents[v] = parent;
	      return parent;
	    } else if (parent in parents) {
	      return parents[parent];
	    } else {
	      return findParent(parent);
	    }
	  }

	  if (this._isCompound) {
	    _.each(copy.nodes(), function(v) {
	      copy.setParent(v, findParent(v));
	    });
	  }

	  return copy;
	};

	/* === Edge functions ========== */

	Graph.prototype.setDefaultEdgeLabel = function(newDefault) {
	  if (!_.isFunction(newDefault)) {
	    newDefault = _.constant(newDefault);
	  }
	  this._defaultEdgeLabelFn = newDefault;
	  return this;
	};

	Graph.prototype.edgeCount = function() {
	  return this._edgeCount;
	};

	Graph.prototype.edges = function() {
	  return _.values(this._edgeObjs);
	};

	Graph.prototype.setPath = function(vs, value) {
	  var self = this;
	  var args = arguments;
	  _.reduce(vs, function(v, w) {
	    if (args.length > 1) {
	      self.setEdge(v, w, value);
	    } else {
	      self.setEdge(v, w);
	    }
	    return w;
	  });
	  return this;
	};

	/*
	 * setEdge(v, w, [value, [name]])
	 * setEdge({ v, w, [name] }, [value])
	 */
	Graph.prototype.setEdge = function() {
	  var v, w, name, value;
	  var valueSpecified = false;
	  var arg0 = arguments[0];

	  if (typeof arg0 === "object" && arg0 !== null && "v" in arg0) {
	    v = arg0.v;
	    w = arg0.w;
	    name = arg0.name;
	    if (arguments.length === 2) {
	      value = arguments[1];
	      valueSpecified = true;
	    }
	  } else {
	    v = arg0;
	    w = arguments[1];
	    name = arguments[3];
	    if (arguments.length > 2) {
	      value = arguments[2];
	      valueSpecified = true;
	    }
	  }

	  v = "" + v;
	  w = "" + w;
	  if (!_.isUndefined(name)) {
	    name = "" + name;
	  }

	  var e = edgeArgsToId(this._isDirected, v, w, name);
	  if (_.has(this._edgeLabels, e)) {
	    if (valueSpecified) {
	      this._edgeLabels[e] = value;
	    }
	    return this;
	  }

	  if (!_.isUndefined(name) && !this._isMultigraph) {
	    throw new Error("Cannot set a named edge when isMultigraph = false");
	  }

	  // It didn't exist, so we need to create it.
	  // First ensure the nodes exist.
	  this.setNode(v);
	  this.setNode(w);

	  this._edgeLabels[e] = valueSpecified ? value : this._defaultEdgeLabelFn(v, w, name);

	  var edgeObj = edgeArgsToObj(this._isDirected, v, w, name);
	  // Ensure we add undirected edges in a consistent way.
	  v = edgeObj.v;
	  w = edgeObj.w;

	  Object.freeze(edgeObj);
	  this._edgeObjs[e] = edgeObj;
	  incrementOrInitEntry(this._preds[w], v);
	  incrementOrInitEntry(this._sucs[v], w);
	  this._in[w][e] = edgeObj;
	  this._out[v][e] = edgeObj;
	  this._edgeCount++;
	  return this;
	};

	Graph.prototype.edge = function(v, w, name) {
	  var e = (arguments.length === 1
	    ? edgeObjToId(this._isDirected, arguments[0])
	    : edgeArgsToId(this._isDirected, v, w, name));
	  return this._edgeLabels[e];
	};

	Graph.prototype.hasEdge = function(v, w, name) {
	  var e = (arguments.length === 1
	    ? edgeObjToId(this._isDirected, arguments[0])
	    : edgeArgsToId(this._isDirected, v, w, name));
	  return _.has(this._edgeLabels, e);
	};

	Graph.prototype.removeEdge = function(v, w, name) {
	  var e = (arguments.length === 1
	    ? edgeObjToId(this._isDirected, arguments[0])
	    : edgeArgsToId(this._isDirected, v, w, name));
	  var edge = this._edgeObjs[e];
	  if (edge) {
	    v = edge.v;
	    w = edge.w;
	    delete this._edgeLabels[e];
	    delete this._edgeObjs[e];
	    decrementOrRemoveEntry(this._preds[w], v);
	    decrementOrRemoveEntry(this._sucs[v], w);
	    delete this._in[w][e];
	    delete this._out[v][e];
	    this._edgeCount--;
	  }
	  return this;
	};

	Graph.prototype.inEdges = function(v, u) {
	  var inV = this._in[v];
	  if (inV) {
	    var edges = _.values(inV);
	    if (!u) {
	      return edges;
	    }
	    return _.filter(edges, function(edge) { return edge.v === u; });
	  }
	};

	Graph.prototype.outEdges = function(v, w) {
	  var outV = this._out[v];
	  if (outV) {
	    var edges = _.values(outV);
	    if (!w) {
	      return edges;
	    }
	    return _.filter(edges, function(edge) { return edge.w === w; });
	  }
	};

	Graph.prototype.nodeEdges = function(v, w) {
	  var inEdges = this.inEdges(v, w);
	  if (inEdges) {
	    return inEdges.concat(this.outEdges(v, w));
	  }
	};

	function incrementOrInitEntry(map, k) {
	  if (map[k]) {
	    map[k]++;
	  } else {
	    map[k] = 1;
	  }
	}

	function decrementOrRemoveEntry(map, k) {
	  if (!--map[k]) { delete map[k]; }
	}

	function edgeArgsToId(isDirected, v_, w_, name) {
	  var v = "" + v_;
	  var w = "" + w_;
	  if (!isDirected && v > w) {
	    var tmp = v;
	    v = w;
	    w = tmp;
	  }
	  return v + EDGE_KEY_DELIM + w + EDGE_KEY_DELIM +
	             (_.isUndefined(name) ? DEFAULT_EDGE_NAME : name);
	}

	function edgeArgsToObj(isDirected, v_, w_, name) {
	  var v = "" + v_;
	  var w = "" + w_;
	  if (!isDirected && v > w) {
	    var tmp = v;
	    v = w;
	    w = tmp;
	  }
	  var edgeObj =  { v: v, w: w };
	  if (name) {
	    edgeObj.name = name;
	  }
	  return edgeObj;
	}

	function edgeObjToId(isDirected, edgeObj) {
	  return edgeArgsToId(isDirected, edgeObj.v, edgeObj.w, edgeObj.name);
	}


/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

	/* global window */

	var lodash;

	if (true) {
	  try {
	    lodash = {
	      clone: __webpack_require__(9),
	      constant: __webpack_require__(118),
	      each: __webpack_require__(119),
	      filter: __webpack_require__(128),
	      has:  __webpack_require__(167),
	      isArray: __webpack_require__(67),
	      isEmpty: __webpack_require__(169),
	      isFunction: __webpack_require__(28),
	      isUndefined: __webpack_require__(170),
	      keys: __webpack_require__(61),
	      map: __webpack_require__(171),
	      reduce: __webpack_require__(173),
	      size: __webpack_require__(176),
	      transform: __webpack_require__(182),
	      union: __webpack_require__(183),
	      values: __webpack_require__(202)
	    };
	  } catch (e) {
	    // continue regardless of error
	  }
	}

	if (!lodash) {
	  lodash = window._;
	}

	module.exports = lodash;


/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

	var baseClone = __webpack_require__(10);

	/** Used to compose bitmasks for cloning. */
	var CLONE_SYMBOLS_FLAG = 4;

	/**
	 * Creates a shallow clone of `value`.
	 *
	 * **Note:** This method is loosely based on the
	 * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
	 * and supports cloning arrays, array buffers, booleans, date objects, maps,
	 * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
	 * arrays. The own enumerable properties of `arguments` objects are cloned
	 * as plain objects. An empty object is returned for uncloneable values such
	 * as error objects, functions, DOM nodes, and WeakMaps.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to clone.
	 * @returns {*} Returns the cloned value.
	 * @see _.cloneDeep
	 * @example
	 *
	 * var objects = [{ 'a': 1 }, { 'b': 2 }];
	 *
	 * var shallow = _.clone(objects);
	 * console.log(shallow[0] === objects[0]);
	 * // => true
	 */
	function clone(value) {
	  return baseClone(value, CLONE_SYMBOLS_FLAG);
	}

	module.exports = clone;


/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

	var Stack = __webpack_require__(11),
	    arrayEach = __webpack_require__(55),
	    assignValue = __webpack_require__(56),
	    baseAssign = __webpack_require__(59),
	    baseAssignIn = __webpack_require__(82),
	    cloneBuffer = __webpack_require__(86),
	    copyArray = __webpack_require__(87),
	    copySymbols = __webpack_require__(88),
	    copySymbolsIn = __webpack_require__(92),
	    getAllKeys = __webpack_require__(96),
	    getAllKeysIn = __webpack_require__(98),
	    getTag = __webpack_require__(99),
	    initCloneArray = __webpack_require__(104),
	    initCloneByTag = __webpack_require__(105),
	    initCloneObject = __webpack_require__(112),
	    isArray = __webpack_require__(67),
	    isBuffer = __webpack_require__(68),
	    isMap = __webpack_require__(114),
	    isObject = __webpack_require__(35),
	    isSet = __webpack_require__(116),
	    keys = __webpack_require__(61);

	/** Used to compose bitmasks for cloning. */
	var CLONE_DEEP_FLAG = 1,
	    CLONE_FLAT_FLAG = 2,
	    CLONE_SYMBOLS_FLAG = 4;

	/** `Object#toString` result references. */
	var argsTag = '[object Arguments]',
	    arrayTag = '[object Array]',
	    boolTag = '[object Boolean]',
	    dateTag = '[object Date]',
	    errorTag = '[object Error]',
	    funcTag = '[object Function]',
	    genTag = '[object GeneratorFunction]',
	    mapTag = '[object Map]',
	    numberTag = '[object Number]',
	    objectTag = '[object Object]',
	    regexpTag = '[object RegExp]',
	    setTag = '[object Set]',
	    stringTag = '[object String]',
	    symbolTag = '[object Symbol]',
	    weakMapTag = '[object WeakMap]';

	var arrayBufferTag = '[object ArrayBuffer]',
	    dataViewTag = '[object DataView]',
	    float32Tag = '[object Float32Array]',
	    float64Tag = '[object Float64Array]',
	    int8Tag = '[object Int8Array]',
	    int16Tag = '[object Int16Array]',
	    int32Tag = '[object Int32Array]',
	    uint8Tag = '[object Uint8Array]',
	    uint8ClampedTag = '[object Uint8ClampedArray]',
	    uint16Tag = '[object Uint16Array]',
	    uint32Tag = '[object Uint32Array]';

	/** Used to identify `toStringTag` values supported by `_.clone`. */
	var cloneableTags = {};
	cloneableTags[argsTag] = cloneableTags[arrayTag] =
	cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
	cloneableTags[boolTag] = cloneableTags[dateTag] =
	cloneableTags[float32Tag] = cloneableTags[float64Tag] =
	cloneableTags[int8Tag] = cloneableTags[int16Tag] =
	cloneableTags[int32Tag] = cloneableTags[mapTag] =
	cloneableTags[numberTag] = cloneableTags[objectTag] =
	cloneableTags[regexpTag] = cloneableTags[setTag] =
	cloneableTags[stringTag] = cloneableTags[symbolTag] =
	cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
	cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
	cloneableTags[errorTag] = cloneableTags[funcTag] =
	cloneableTags[weakMapTag] = false;

	/**
	 * The base implementation of `_.clone` and `_.cloneDeep` which tracks
	 * traversed objects.
	 *
	 * @private
	 * @param {*} value The value to clone.
	 * @param {boolean} bitmask The bitmask flags.
	 *  1 - Deep clone
	 *  2 - Flatten inherited properties
	 *  4 - Clone symbols
	 * @param {Function} [customizer] The function to customize cloning.
	 * @param {string} [key] The key of `value`.
	 * @param {Object} [object] The parent object of `value`.
	 * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
	 * @returns {*} Returns the cloned value.
	 */
	function baseClone(value, bitmask, customizer, key, object, stack) {
	  var result,
	      isDeep = bitmask & CLONE_DEEP_FLAG,
	      isFlat = bitmask & CLONE_FLAT_FLAG,
	      isFull = bitmask & CLONE_SYMBOLS_FLAG;

	  if (customizer) {
	    result = object ? customizer(value, key, object, stack) : customizer(value);
	  }
	  if (result !== undefined) {
	    return result;
	  }
	  if (!isObject(value)) {
	    return value;
	  }
	  var isArr = isArray(value);
	  if (isArr) {
	    result = initCloneArray(value);
	    if (!isDeep) {
	      return copyArray(value, result);
	    }
	  } else {
	    var tag = getTag(value),
	        isFunc = tag == funcTag || tag == genTag;

	    if (isBuffer(value)) {
	      return cloneBuffer(value, isDeep);
	    }
	    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
	      result = (isFlat || isFunc) ? {} : initCloneObject(value);
	      if (!isDeep) {
	        return isFlat
	          ? copySymbolsIn(value, baseAssignIn(result, value))
	          : copySymbols(value, baseAssign(result, value));
	      }
	    } else {
	      if (!cloneableTags[tag]) {
	        return object ? value : {};
	      }
	      result = initCloneByTag(value, tag, isDeep);
	    }
	  }
	  // Check for circular references and return its corresponding clone.
	  stack || (stack = new Stack);
	  var stacked = stack.get(value);
	  if (stacked) {
	    return stacked;
	  }
	  stack.set(value, result);

	  if (isSet(value)) {
	    value.forEach(function(subValue) {
	      result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
	    });
	  } else if (isMap(value)) {
	    value.forEach(function(subValue, key) {
	      result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
	    });
	  }

	  var keysFunc = isFull
	    ? (isFlat ? getAllKeysIn : getAllKeys)
	    : (isFlat ? keysIn : keys);

	  var props = isArr ? undefined : keysFunc(value);
	  arrayEach(props || value, function(subValue, key) {
	    if (props) {
	      key = subValue;
	      subValue = value[key];
	    }
	    // Recursively populate clone (susceptible to call stack limits).
	    assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
	  });
	  return result;
	}

	module.exports = baseClone;


/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

	var ListCache = __webpack_require__(12),
	    stackClear = __webpack_require__(20),
	    stackDelete = __webpack_require__(21),
	    stackGet = __webpack_require__(22),
	    stackHas = __webpack_require__(23),
	    stackSet = __webpack_require__(24);

	/**
	 * Creates a stack cache object to store key-value pairs.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function Stack(entries) {
	  var data = this.__data__ = new ListCache(entries);
	  this.size = data.size;
	}

	// Add methods to `Stack`.
	Stack.prototype.clear = stackClear;
	Stack.prototype['delete'] = stackDelete;
	Stack.prototype.get = stackGet;
	Stack.prototype.has = stackHas;
	Stack.prototype.set = stackSet;

	module.exports = Stack;


/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

	var listCacheClear = __webpack_require__(13),
	    listCacheDelete = __webpack_require__(14),
	    listCacheGet = __webpack_require__(17),
	    listCacheHas = __webpack_require__(18),
	    listCacheSet = __webpack_require__(19);

	/**
	 * Creates an list cache object.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function ListCache(entries) {
	  var index = -1,
	      length = entries == null ? 0 : entries.length;

	  this.clear();
	  while (++index < length) {
	    var entry = entries[index];
	    this.set(entry[0], entry[1]);
	  }
	}

	// Add methods to `ListCache`.
	ListCache.prototype.clear = listCacheClear;
	ListCache.prototype['delete'] = listCacheDelete;
	ListCache.prototype.get = listCacheGet;
	ListCache.prototype.has = listCacheHas;
	ListCache.prototype.set = listCacheSet;

	module.exports = ListCache;


/***/ }),
/* 13 */
/***/ (function(module, exports) {

	/**
	 * Removes all key-value entries from the list cache.
	 *
	 * @private
	 * @name clear
	 * @memberOf ListCache
	 */
	function listCacheClear() {
	  this.__data__ = [];
	  this.size = 0;
	}

	module.exports = listCacheClear;


/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

	var assocIndexOf = __webpack_require__(15);

	/** Used for built-in method references. */
	var arrayProto = Array.prototype;

	/** Built-in value references. */
	var splice = arrayProto.splice;

	/**
	 * Removes `key` and its value from the list cache.
	 *
	 * @private
	 * @name delete
	 * @memberOf ListCache
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function listCacheDelete(key) {
	  var data = this.__data__,
	      index = assocIndexOf(data, key);

	  if (index < 0) {
	    return false;
	  }
	  var lastIndex = data.length - 1;
	  if (index == lastIndex) {
	    data.pop();
	  } else {
	    splice.call(data, index, 1);
	  }
	  --this.size;
	  return true;
	}

	module.exports = listCacheDelete;


/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

	var eq = __webpack_require__(16);

	/**
	 * Gets the index at which the `key` is found in `array` of key-value pairs.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {*} key The key to search for.
	 * @returns {number} Returns the index of the matched value, else `-1`.
	 */
	function assocIndexOf(array, key) {
	  var length = array.length;
	  while (length--) {
	    if (eq(array[length][0], key)) {
	      return length;
	    }
	  }
	  return -1;
	}

	module.exports = assocIndexOf;


/***/ }),
/* 16 */
/***/ (function(module, exports) {

	/**
	 * Performs a
	 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	 * comparison between two values to determine if they are equivalent.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	 * @example
	 *
	 * var object = { 'a': 1 };
	 * var other = { 'a': 1 };
	 *
	 * _.eq(object, object);
	 * // => true
	 *
	 * _.eq(object, other);
	 * // => false
	 *
	 * _.eq('a', 'a');
	 * // => true
	 *
	 * _.eq('a', Object('a'));
	 * // => false
	 *
	 * _.eq(NaN, NaN);
	 * // => true
	 */
	function eq(value, other) {
	  return value === other || (value !== value && other !== other);
	}

	module.exports = eq;


/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

	var assocIndexOf = __webpack_require__(15);

	/**
	 * Gets the list cache value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf ListCache
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function listCacheGet(key) {
	  var data = this.__data__,
	      index = assocIndexOf(data, key);

	  return index < 0 ? undefined : data[index][1];
	}

	module.exports = listCacheGet;


/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

	var assocIndexOf = __webpack_require__(15);

	/**
	 * Checks if a list cache value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf ListCache
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function listCacheHas(key) {
	  return assocIndexOf(this.__data__, key) > -1;
	}

	module.exports = listCacheHas;


/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

	var assocIndexOf = __webpack_require__(15);

	/**
	 * Sets the list cache `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf ListCache
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the list cache instance.
	 */
	function listCacheSet(key, value) {
	  var data = this.__data__,
	      index = assocIndexOf(data, key);

	  if (index < 0) {
	    ++this.size;
	    data.push([key, value]);
	  } else {
	    data[index][1] = value;
	  }
	  return this;
	}

	module.exports = listCacheSet;


/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

	var ListCache = __webpack_require__(12);

	/**
	 * Removes all key-value entries from the stack.
	 *
	 * @private
	 * @name clear
	 * @memberOf Stack
	 */
	function stackClear() {
	  this.__data__ = new ListCache;
	  this.size = 0;
	}

	module.exports = stackClear;


/***/ }),
/* 21 */
/***/ (function(module, exports) {

	/**
	 * Removes `key` and its value from the stack.
	 *
	 * @private
	 * @name delete
	 * @memberOf Stack
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function stackDelete(key) {
	  var data = this.__data__,
	      result = data['delete'](key);

	  this.size = data.size;
	  return result;
	}

	module.exports = stackDelete;


/***/ }),
/* 22 */
/***/ (function(module, exports) {

	/**
	 * Gets the stack value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf Stack
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function stackGet(key) {
	  return this.__data__.get(key);
	}

	module.exports = stackGet;


/***/ }),
/* 23 */
/***/ (function(module, exports) {

	/**
	 * Checks if a stack value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf Stack
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function stackHas(key) {
	  return this.__data__.has(key);
	}

	module.exports = stackHas;


/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

	var ListCache = __webpack_require__(12),
	    Map = __webpack_require__(25),
	    MapCache = __webpack_require__(40);

	/** Used as the size to enable large array optimizations. */
	var LARGE_ARRAY_SIZE = 200;

	/**
	 * Sets the stack `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf Stack
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the stack cache instance.
	 */
	function stackSet(key, value) {
	  var data = this.__data__;
	  if (data instanceof ListCache) {
	    var pairs = data.__data__;
	    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
	      pairs.push([key, value]);
	      this.size = ++data.size;
	      return this;
	    }
	    data = this.__data__ = new MapCache(pairs);
	  }
	  data.set(key, value);
	  this.size = data.size;
	  return this;
	}

	module.exports = stackSet;


/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

	var getNative = __webpack_require__(26),
	    root = __webpack_require__(31);

	/* Built-in method references that are verified to be native. */
	var Map = getNative(root, 'Map');

	module.exports = Map;


/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

	var baseIsNative = __webpack_require__(27),
	    getValue = __webpack_require__(39);

	/**
	 * Gets the native function at `key` of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {string} key The key of the method to get.
	 * @returns {*} Returns the function if it's native, else `undefined`.
	 */
	function getNative(object, key) {
	  var value = getValue(object, key);
	  return baseIsNative(value) ? value : undefined;
	}

	module.exports = getNative;


/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

	var isFunction = __webpack_require__(28),
	    isMasked = __webpack_require__(36),
	    isObject = __webpack_require__(35),
	    toSource = __webpack_require__(38);

	/**
	 * Used to match `RegExp`
	 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
	 */
	var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

	/** Used to detect host constructors (Safari). */
	var reIsHostCtor = /^\[object .+?Constructor\]$/;

	/** Used for built-in method references. */
	var funcProto = Function.prototype,
	    objectProto = Object.prototype;

	/** Used to resolve the decompiled source of functions. */
	var funcToString = funcProto.toString;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/** Used to detect if a method is native. */
	var reIsNative = RegExp('^' +
	  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
	  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
	);

	/**
	 * The base implementation of `_.isNative` without bad shim checks.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a native function,
	 *  else `false`.
	 */
	function baseIsNative(value) {
	  if (!isObject(value) || isMasked(value)) {
	    return false;
	  }
	  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
	  return pattern.test(toSource(value));
	}

	module.exports = baseIsNative;


/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

	var baseGetTag = __webpack_require__(29),
	    isObject = __webpack_require__(35);

	/** `Object#toString` result references. */
	var asyncTag = '[object AsyncFunction]',
	    funcTag = '[object Function]',
	    genTag = '[object GeneratorFunction]',
	    proxyTag = '[object Proxy]';

	/**
	 * Checks if `value` is classified as a `Function` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
	 * @example
	 *
	 * _.isFunction(_);
	 * // => true
	 *
	 * _.isFunction(/abc/);
	 * // => false
	 */
	function isFunction(value) {
	  if (!isObject(value)) {
	    return false;
	  }
	  // The use of `Object#toString` avoids issues with the `typeof` operator
	  // in Safari 9 which returns 'object' for typed arrays and other constructors.
	  var tag = baseGetTag(value);
	  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
	}

	module.exports = isFunction;


/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

	var Symbol = __webpack_require__(30),
	    getRawTag = __webpack_require__(33),
	    objectToString = __webpack_require__(34);

	/** `Object#toString` result references. */
	var nullTag = '[object Null]',
	    undefinedTag = '[object Undefined]';

	/** Built-in value references. */
	var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

	/**
	 * The base implementation of `getTag` without fallbacks for buggy environments.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the `toStringTag`.
	 */
	function baseGetTag(value) {
	  if (value == null) {
	    return value === undefined ? undefinedTag : nullTag;
	  }
	  return (symToStringTag && symToStringTag in Object(value))
	    ? getRawTag(value)
	    : objectToString(value);
	}

	module.exports = baseGetTag;


/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

	var root = __webpack_require__(31);

	/** Built-in value references. */
	var Symbol = root.Symbol;

	module.exports = Symbol;


/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

	var freeGlobal = __webpack_require__(32);

	/** Detect free variable `self`. */
	var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

	/** Used as a reference to the global object. */
	var root = freeGlobal || freeSelf || Function('return this')();

	module.exports = root;


/***/ }),
/* 32 */
/***/ (function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {/** Detect free variable `global` from Node.js. */
	var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

	module.exports = freeGlobal;

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

	var Symbol = __webpack_require__(30);

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var nativeObjectToString = objectProto.toString;

	/** Built-in value references. */
	var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

	/**
	 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the raw `toStringTag`.
	 */
	function getRawTag(value) {
	  var isOwn = hasOwnProperty.call(value, symToStringTag),
	      tag = value[symToStringTag];

	  try {
	    value[symToStringTag] = undefined;
	    var unmasked = true;
	  } catch (e) {}

	  var result = nativeObjectToString.call(value);
	  if (unmasked) {
	    if (isOwn) {
	      value[symToStringTag] = tag;
	    } else {
	      delete value[symToStringTag];
	    }
	  }
	  return result;
	}

	module.exports = getRawTag;


/***/ }),
/* 34 */
/***/ (function(module, exports) {

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var nativeObjectToString = objectProto.toString;

	/**
	 * Converts `value` to a string using `Object.prototype.toString`.
	 *
	 * @private
	 * @param {*} value The value to convert.
	 * @returns {string} Returns the converted string.
	 */
	function objectToString(value) {
	  return nativeObjectToString.call(value);
	}

	module.exports = objectToString;


/***/ }),
/* 35 */
/***/ (function(module, exports) {

	/**
	 * Checks if `value` is the
	 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
	 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	 * @example
	 *
	 * _.isObject({});
	 * // => true
	 *
	 * _.isObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isObject(_.noop);
	 * // => true
	 *
	 * _.isObject(null);
	 * // => false
	 */
	function isObject(value) {
	  var type = typeof value;
	  return value != null && (type == 'object' || type == 'function');
	}

	module.exports = isObject;


/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

	var coreJsData = __webpack_require__(37);

	/** Used to detect methods masquerading as native. */
	var maskSrcKey = (function() {
	  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
	  return uid ? ('Symbol(src)_1.' + uid) : '';
	}());

	/**
	 * Checks if `func` has its source masked.
	 *
	 * @private
	 * @param {Function} func The function to check.
	 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
	 */
	function isMasked(func) {
	  return !!maskSrcKey && (maskSrcKey in func);
	}

	module.exports = isMasked;


/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

	var root = __webpack_require__(31);

	/** Used to detect overreaching core-js shims. */
	var coreJsData = root['__core-js_shared__'];

	module.exports = coreJsData;


/***/ }),
/* 38 */
/***/ (function(module, exports) {

	/** Used for built-in method references. */
	var funcProto = Function.prototype;

	/** Used to resolve the decompiled source of functions. */
	var funcToString = funcProto.toString;

	/**
	 * Converts `func` to its source code.
	 *
	 * @private
	 * @param {Function} func The function to convert.
	 * @returns {string} Returns the source code.
	 */
	function toSource(func) {
	  if (func != null) {
	    try {
	      return funcToString.call(func);
	    } catch (e) {}
	    try {
	      return (func + '');
	    } catch (e) {}
	  }
	  return '';
	}

	module.exports = toSource;


/***/ }),
/* 39 */
/***/ (function(module, exports) {

	/**
	 * Gets the value at `key` of `object`.
	 *
	 * @private
	 * @param {Object} [object] The object to query.
	 * @param {string} key The key of the property to get.
	 * @returns {*} Returns the property value.
	 */
	function getValue(object, key) {
	  return object == null ? undefined : object[key];
	}

	module.exports = getValue;


/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

	var mapCacheClear = __webpack_require__(41),
	    mapCacheDelete = __webpack_require__(49),
	    mapCacheGet = __webpack_require__(52),
	    mapCacheHas = __webpack_require__(53),
	    mapCacheSet = __webpack_require__(54);

	/**
	 * Creates a map cache object to store key-value pairs.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function MapCache(entries) {
	  var index = -1,
	      length = entries == null ? 0 : entries.length;

	  this.clear();
	  while (++index < length) {
	    var entry = entries[index];
	    this.set(entry[0], entry[1]);
	  }
	}

	// Add methods to `MapCache`.
	MapCache.prototype.clear = mapCacheClear;
	MapCache.prototype['delete'] = mapCacheDelete;
	MapCache.prototype.get = mapCacheGet;
	MapCache.prototype.has = mapCacheHas;
	MapCache.prototype.set = mapCacheSet;

	module.exports = MapCache;


/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

	var Hash = __webpack_require__(42),
	    ListCache = __webpack_require__(12),
	    Map = __webpack_require__(25);

	/**
	 * Removes all key-value entries from the map.
	 *
	 * @private
	 * @name clear
	 * @memberOf MapCache
	 */
	function mapCacheClear() {
	  this.size = 0;
	  this.__data__ = {
	    'hash': new Hash,
	    'map': new (Map || ListCache),
	    'string': new Hash
	  };
	}

	module.exports = mapCacheClear;


/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

	var hashClear = __webpack_require__(43),
	    hashDelete = __webpack_require__(45),
	    hashGet = __webpack_require__(46),
	    hashHas = __webpack_require__(47),
	    hashSet = __webpack_require__(48);

	/**
	 * Creates a hash object.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function Hash(entries) {
	  var index = -1,
	      length = entries == null ? 0 : entries.length;

	  this.clear();
	  while (++index < length) {
	    var entry = entries[index];
	    this.set(entry[0], entry[1]);
	  }
	}

	// Add methods to `Hash`.
	Hash.prototype.clear = hashClear;
	Hash.prototype['delete'] = hashDelete;
	Hash.prototype.get = hashGet;
	Hash.prototype.has = hashHas;
	Hash.prototype.set = hashSet;

	module.exports = Hash;


/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

	var nativeCreate = __webpack_require__(44);

	/**
	 * Removes all key-value entries from the hash.
	 *
	 * @private
	 * @name clear
	 * @memberOf Hash
	 */
	function hashClear() {
	  this.__data__ = nativeCreate ? nativeCreate(null) : {};
	  this.size = 0;
	}

	module.exports = hashClear;


/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

	var getNative = __webpack_require__(26);

	/* Built-in method references that are verified to be native. */
	var nativeCreate = getNative(Object, 'create');

	module.exports = nativeCreate;


/***/ }),
/* 45 */
/***/ (function(module, exports) {

	/**
	 * Removes `key` and its value from the hash.
	 *
	 * @private
	 * @name delete
	 * @memberOf Hash
	 * @param {Object} hash The hash to modify.
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function hashDelete(key) {
	  var result = this.has(key) && delete this.__data__[key];
	  this.size -= result ? 1 : 0;
	  return result;
	}

	module.exports = hashDelete;


/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

	var nativeCreate = __webpack_require__(44);

	/** Used to stand-in for `undefined` hash values. */
	var HASH_UNDEFINED = '__lodash_hash_undefined__';

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Gets the hash value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf Hash
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function hashGet(key) {
	  var data = this.__data__;
	  if (nativeCreate) {
	    var result = data[key];
	    return result === HASH_UNDEFINED ? undefined : result;
	  }
	  return hasOwnProperty.call(data, key) ? data[key] : undefined;
	}

	module.exports = hashGet;


/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

	var nativeCreate = __webpack_require__(44);

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Checks if a hash value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf Hash
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function hashHas(key) {
	  var data = this.__data__;
	  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
	}

	module.exports = hashHas;


/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

	var nativeCreate = __webpack_require__(44);

	/** Used to stand-in for `undefined` hash values. */
	var HASH_UNDEFINED = '__lodash_hash_undefined__';

	/**
	 * Sets the hash `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf Hash
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the hash instance.
	 */
	function hashSet(key, value) {
	  var data = this.__data__;
	  this.size += this.has(key) ? 0 : 1;
	  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
	  return this;
	}

	module.exports = hashSet;


/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

	var getMapData = __webpack_require__(50);

	/**
	 * Removes `key` and its value from the map.
	 *
	 * @private
	 * @name delete
	 * @memberOf MapCache
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function mapCacheDelete(key) {
	  var result = getMapData(this, key)['delete'](key);
	  this.size -= result ? 1 : 0;
	  return result;
	}

	module.exports = mapCacheDelete;


/***/ }),
/* 50 */
/***/ (function(module, exports, __webpack_require__) {

	var isKeyable = __webpack_require__(51);

	/**
	 * Gets the data for `map`.
	 *
	 * @private
	 * @param {Object} map The map to query.
	 * @param {string} key The reference key.
	 * @returns {*} Returns the map data.
	 */
	function getMapData(map, key) {
	  var data = map.__data__;
	  return isKeyable(key)
	    ? data[typeof key == 'string' ? 'string' : 'hash']
	    : data.map;
	}

	module.exports = getMapData;


/***/ }),
/* 51 */
/***/ (function(module, exports) {

	/**
	 * Checks if `value` is suitable for use as unique object key.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
	 */
	function isKeyable(value) {
	  var type = typeof value;
	  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
	    ? (value !== '__proto__')
	    : (value === null);
	}

	module.exports = isKeyable;


/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

	var getMapData = __webpack_require__(50);

	/**
	 * Gets the map value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf MapCache
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function mapCacheGet(key) {
	  return getMapData(this, key).get(key);
	}

	module.exports = mapCacheGet;


/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

	var getMapData = __webpack_require__(50);

	/**
	 * Checks if a map value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf MapCache
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function mapCacheHas(key) {
	  return getMapData(this, key).has(key);
	}

	module.exports = mapCacheHas;


/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

	var getMapData = __webpack_require__(50);

	/**
	 * Sets the map `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf MapCache
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the map cache instance.
	 */
	function mapCacheSet(key, value) {
	  var data = getMapData(this, key),
	      size = data.size;

	  data.set(key, value);
	  this.size += data.size == size ? 0 : 1;
	  return this;
	}

	module.exports = mapCacheSet;


/***/ }),
/* 55 */
/***/ (function(module, exports) {

	/**
	 * A specialized version of `_.forEach` for arrays without support for
	 * iteratee shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns `array`.
	 */
	function arrayEach(array, iteratee) {
	  var index = -1,
	      length = array == null ? 0 : array.length;

	  while (++index < length) {
	    if (iteratee(array[index], index, array) === false) {
	      break;
	    }
	  }
	  return array;
	}

	module.exports = arrayEach;


/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

	var baseAssignValue = __webpack_require__(57),
	    eq = __webpack_require__(16);

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Assigns `value` to `key` of `object` if the existing value is not equivalent
	 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	 * for equality comparisons.
	 *
	 * @private
	 * @param {Object} object The object to modify.
	 * @param {string} key The key of the property to assign.
	 * @param {*} value The value to assign.
	 */
	function assignValue(object, key, value) {
	  var objValue = object[key];
	  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
	      (value === undefined && !(key in object))) {
	    baseAssignValue(object, key, value);
	  }
	}

	module.exports = assignValue;


/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

	var defineProperty = __webpack_require__(58);

	/**
	 * The base implementation of `assignValue` and `assignMergeValue` without
	 * value checks.
	 *
	 * @private
	 * @param {Object} object The object to modify.
	 * @param {string} key The key of the property to assign.
	 * @param {*} value The value to assign.
	 */
	function baseAssignValue(object, key, value) {
	  if (key == '__proto__' && defineProperty) {
	    defineProperty(object, key, {
	      'configurable': true,
	      'enumerable': true,
	      'value': value,
	      'writable': true
	    });
	  } else {
	    object[key] = value;
	  }
	}

	module.exports = baseAssignValue;


/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

	var getNative = __webpack_require__(26);

	var defineProperty = (function() {
	  try {
	    var func = getNative(Object, 'defineProperty');
	    func({}, '', {});
	    return func;
	  } catch (e) {}
	}());

	module.exports = defineProperty;


/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

	var copyObject = __webpack_require__(60),
	    keys = __webpack_require__(61);

	/**
	 * The base implementation of `_.assign` without support for multiple sources
	 * or `customizer` functions.
	 *
	 * @private
	 * @param {Object} object The destination object.
	 * @param {Object} source The source object.
	 * @returns {Object} Returns `object`.
	 */
	function baseAssign(object, source) {
	  return object && copyObject(source, keys(source), object);
	}

	module.exports = baseAssign;


/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

	var assignValue = __webpack_require__(56),
	    baseAssignValue = __webpack_require__(57);

	/**
	 * Copies properties of `source` to `object`.
	 *
	 * @private
	 * @param {Object} source The object to copy properties from.
	 * @param {Array} props The property identifiers to copy.
	 * @param {Object} [object={}] The object to copy properties to.
	 * @param {Function} [customizer] The function to customize copied values.
	 * @returns {Object} Returns `object`.
	 */
	function copyObject(source, props, object, customizer) {
	  var isNew = !object;
	  object || (object = {});

	  var index = -1,
	      length = props.length;

	  while (++index < length) {
	    var key = props[index];

	    var newValue = customizer
	      ? customizer(object[key], source[key], key, object, source)
	      : undefined;

	    if (newValue === undefined) {
	      newValue = source[key];
	    }
	    if (isNew) {
	      baseAssignValue(object, key, newValue);
	    } else {
	      assignValue(object, key, newValue);
	    }
	  }
	  return object;
	}

	module.exports = copyObject;


/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

	var arrayLikeKeys = __webpack_require__(62),
	    baseKeys = __webpack_require__(77),
	    isArrayLike = __webpack_require__(81);

	/**
	 * Creates an array of the own enumerable property names of `object`.
	 *
	 * **Note:** Non-object values are coerced to objects. See the
	 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
	 * for more details.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.keys(new Foo);
	 * // => ['a', 'b'] (iteration order is not guaranteed)
	 *
	 * _.keys('hi');
	 * // => ['0', '1']
	 */
	function keys(object) {
	  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
	}

	module.exports = keys;


/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

	var baseTimes = __webpack_require__(63),
	    isArguments = __webpack_require__(64),
	    isArray = __webpack_require__(67),
	    isBuffer = __webpack_require__(68),
	    isIndex = __webpack_require__(71),
	    isTypedArray = __webpack_require__(72);

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Creates an array of the enumerable property names of the array-like `value`.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @param {boolean} inherited Specify returning inherited property names.
	 * @returns {Array} Returns the array of property names.
	 */
	function arrayLikeKeys(value, inherited) {
	  var isArr = isArray(value),
	      isArg = !isArr && isArguments(value),
	      isBuff = !isArr && !isArg && isBuffer(value),
	      isType = !isArr && !isArg && !isBuff && isTypedArray(value),
	      skipIndexes = isArr || isArg || isBuff || isType,
	      result = skipIndexes ? baseTimes(value.length, String) : [],
	      length = result.length;

	  for (var key in value) {
	    if ((inherited || hasOwnProperty.call(value, key)) &&
	        !(skipIndexes && (
	           // Safari 9 has enumerable `arguments.length` in strict mode.
	           key == 'length' ||
	           // Node.js 0.10 has enumerable non-index properties on buffers.
	           (isBuff && (key == 'offset' || key == 'parent')) ||
	           // PhantomJS 2 has enumerable non-index properties on typed arrays.
	           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
	           // Skip index properties.
	           isIndex(key, length)
	        ))) {
	      result.push(key);
	    }
	  }
	  return result;
	}

	module.exports = arrayLikeKeys;


/***/ }),
/* 63 */
/***/ (function(module, exports) {

	/**
	 * The base implementation of `_.times` without support for iteratee shorthands
	 * or max array length checks.
	 *
	 * @private
	 * @param {number} n The number of times to invoke `iteratee`.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns the array of results.
	 */
	function baseTimes(n, iteratee) {
	  var index = -1,
	      result = Array(n);

	  while (++index < n) {
	    result[index] = iteratee(index);
	  }
	  return result;
	}

	module.exports = baseTimes;


/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

	var baseIsArguments = __webpack_require__(65),
	    isObjectLike = __webpack_require__(66);

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/** Built-in value references. */
	var propertyIsEnumerable = objectProto.propertyIsEnumerable;

	/**
	 * Checks if `value` is likely an `arguments` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
	 *  else `false`.
	 * @example
	 *
	 * _.isArguments(function() { return arguments; }());
	 * // => true
	 *
	 * _.isArguments([1, 2, 3]);
	 * // => false
	 */
	var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
	  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
	    !propertyIsEnumerable.call(value, 'callee');
	};

	module.exports = isArguments;


/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

	var baseGetTag = __webpack_require__(29),
	    isObjectLike = __webpack_require__(66);

	/** `Object#toString` result references. */
	var argsTag = '[object Arguments]';

	/**
	 * The base implementation of `_.isArguments`.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
	 */
	function baseIsArguments(value) {
	  return isObjectLike(value) && baseGetTag(value) == argsTag;
	}

	module.exports = baseIsArguments;


/***/ }),
/* 66 */
/***/ (function(module, exports) {

	/**
	 * Checks if `value` is object-like. A value is object-like if it's not `null`
	 * and has a `typeof` result of "object".
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	 * @example
	 *
	 * _.isObjectLike({});
	 * // => true
	 *
	 * _.isObjectLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isObjectLike(_.noop);
	 * // => false
	 *
	 * _.isObjectLike(null);
	 * // => false
	 */
	function isObjectLike(value) {
	  return value != null && typeof value == 'object';
	}

	module.exports = isObjectLike;


/***/ }),
/* 67 */
/***/ (function(module, exports) {

	/**
	 * Checks if `value` is classified as an `Array` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
	 * @example
	 *
	 * _.isArray([1, 2, 3]);
	 * // => true
	 *
	 * _.isArray(document.body.children);
	 * // => false
	 *
	 * _.isArray('abc');
	 * // => false
	 *
	 * _.isArray(_.noop);
	 * // => false
	 */
	var isArray = Array.isArray;

	module.exports = isArray;


/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {var root = __webpack_require__(31),
	    stubFalse = __webpack_require__(70);

	/** Detect free variable `exports`. */
	var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

	/** Detect free variable `module`. */
	var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

	/** Detect the popular CommonJS extension `module.exports`. */
	var moduleExports = freeModule && freeModule.exports === freeExports;

	/** Built-in value references. */
	var Buffer = moduleExports ? root.Buffer : undefined;

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;

	/**
	 * Checks if `value` is a buffer.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.3.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
	 * @example
	 *
	 * _.isBuffer(new Buffer(2));
	 * // => true
	 *
	 * _.isBuffer(new Uint8Array(2));
	 * // => false
	 */
	var isBuffer = nativeIsBuffer || stubFalse;

	module.exports = isBuffer;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(69)(module)))

/***/ }),
/* 69 */
/***/ (function(module, exports) {

	module.exports = function(module) {
		if(!module.webpackPolyfill) {
			module.deprecate = function() {};
			module.paths = [];
			// module.parent = undefined by default
			module.children = [];
			module.webpackPolyfill = 1;
		}
		return module;
	}


/***/ }),
/* 70 */
/***/ (function(module, exports) {

	/**
	 * This method returns `false`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.13.0
	 * @category Util
	 * @returns {boolean} Returns `false`.
	 * @example
	 *
	 * _.times(2, _.stubFalse);
	 * // => [false, false]
	 */
	function stubFalse() {
	  return false;
	}

	module.exports = stubFalse;


/***/ }),
/* 71 */
/***/ (function(module, exports) {

	/** Used as references for various `Number` constants. */
	var MAX_SAFE_INTEGER = 9007199254740991;

	/** Used to detect unsigned integer values. */
	var reIsUint = /^(?:0|[1-9]\d*)$/;

	/**
	 * Checks if `value` is a valid array-like index.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
	 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
	 */
	function isIndex(value, length) {
	  var type = typeof value;
	  length = length == null ? MAX_SAFE_INTEGER : length;

	  return !!length &&
	    (type == 'number' ||
	      (type != 'symbol' && reIsUint.test(value))) &&
	        (value > -1 && value % 1 == 0 && value < length);
	}

	module.exports = isIndex;


/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

	var baseIsTypedArray = __webpack_require__(73),
	    baseUnary = __webpack_require__(75),
	    nodeUtil = __webpack_require__(76);

	/* Node.js helper references. */
	var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

	/**
	 * Checks if `value` is classified as a typed array.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
	 * @example
	 *
	 * _.isTypedArray(new Uint8Array);
	 * // => true
	 *
	 * _.isTypedArray([]);
	 * // => false
	 */
	var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

	module.exports = isTypedArray;


/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

	var baseGetTag = __webpack_require__(29),
	    isLength = __webpack_require__(74),
	    isObjectLike = __webpack_require__(66);

	/** `Object#toString` result references. */
	var argsTag = '[object Arguments]',
	    arrayTag = '[object Array]',
	    boolTag = '[object Boolean]',
	    dateTag = '[object Date]',
	    errorTag = '[object Error]',
	    funcTag = '[object Function]',
	    mapTag = '[object Map]',
	    numberTag = '[object Number]',
	    objectTag = '[object Object]',
	    regexpTag = '[object RegExp]',
	    setTag = '[object Set]',
	    stringTag = '[object String]',
	    weakMapTag = '[object WeakMap]';

	var arrayBufferTag = '[object ArrayBuffer]',
	    dataViewTag = '[object DataView]',
	    float32Tag = '[object Float32Array]',
	    float64Tag = '[object Float64Array]',
	    int8Tag = '[object Int8Array]',
	    int16Tag = '[object Int16Array]',
	    int32Tag = '[object Int32Array]',
	    uint8Tag = '[object Uint8Array]',
	    uint8ClampedTag = '[object Uint8ClampedArray]',
	    uint16Tag = '[object Uint16Array]',
	    uint32Tag = '[object Uint32Array]';

	/** Used to identify `toStringTag` values of typed arrays. */
	var typedArrayTags = {};
	typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
	typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
	typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
	typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
	typedArrayTags[uint32Tag] = true;
	typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
	typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
	typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
	typedArrayTags[errorTag] = typedArrayTags[funcTag] =
	typedArrayTags[mapTag] = typedArrayTags[numberTag] =
	typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
	typedArrayTags[setTag] = typedArrayTags[stringTag] =
	typedArrayTags[weakMapTag] = false;

	/**
	 * The base implementation of `_.isTypedArray` without Node.js optimizations.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
	 */
	function baseIsTypedArray(value) {
	  return isObjectLike(value) &&
	    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
	}

	module.exports = baseIsTypedArray;


/***/ }),
/* 74 */
/***/ (function(module, exports) {

	/** Used as references for various `Number` constants. */
	var MAX_SAFE_INTEGER = 9007199254740991;

	/**
	 * Checks if `value` is a valid array-like length.
	 *
	 * **Note:** This method is loosely based on
	 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
	 * @example
	 *
	 * _.isLength(3);
	 * // => true
	 *
	 * _.isLength(Number.MIN_VALUE);
	 * // => false
	 *
	 * _.isLength(Infinity);
	 * // => false
	 *
	 * _.isLength('3');
	 * // => false
	 */
	function isLength(value) {
	  return typeof value == 'number' &&
	    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
	}

	module.exports = isLength;


/***/ }),
/* 75 */
/***/ (function(module, exports) {

	/**
	 * The base implementation of `_.unary` without support for storing metadata.
	 *
	 * @private
	 * @param {Function} func The function to cap arguments for.
	 * @returns {Function} Returns the new capped function.
	 */
	function baseUnary(func) {
	  return function(value) {
	    return func(value);
	  };
	}

	module.exports = baseUnary;


/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {var freeGlobal = __webpack_require__(32);

	/** Detect free variable `exports`. */
	var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

	/** Detect free variable `module`. */
	var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

	/** Detect the popular CommonJS extension `module.exports`. */
	var moduleExports = freeModule && freeModule.exports === freeExports;

	/** Detect free variable `process` from Node.js. */
	var freeProcess = moduleExports && freeGlobal.process;

	/** Used to access faster Node.js helpers. */
	var nodeUtil = (function() {
	  try {
	    // Use `util.types` for Node.js 10+.
	    var types = freeModule && freeModule.require && freeModule.require('util').types;

	    if (types) {
	      return types;
	    }

	    // Legacy `process.binding('util')` for Node.js < 10.
	    return freeProcess && freeProcess.binding && freeProcess.binding('util');
	  } catch (e) {}
	}());

	module.exports = nodeUtil;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(69)(module)))

/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

	var isPrototype = __webpack_require__(78),
	    nativeKeys = __webpack_require__(79);

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 */
	function baseKeys(object) {
	  if (!isPrototype(object)) {
	    return nativeKeys(object);
	  }
	  var result = [];
	  for (var key in Object(object)) {
	    if (hasOwnProperty.call(object, key) && key != 'constructor') {
	      result.push(key);
	    }
	  }
	  return result;
	}

	module.exports = baseKeys;


/***/ }),
/* 78 */
/***/ (function(module, exports) {

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/**
	 * Checks if `value` is likely a prototype object.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
	 */
	function isPrototype(value) {
	  var Ctor = value && value.constructor,
	      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

	  return value === proto;
	}

	module.exports = isPrototype;


/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

	var overArg = __webpack_require__(80);

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeKeys = overArg(Object.keys, Object);

	module.exports = nativeKeys;


/***/ }),
/* 80 */
/***/ (function(module, exports) {

	/**
	 * Creates a unary function that invokes `func` with its argument transformed.
	 *
	 * @private
	 * @param {Function} func The function to wrap.
	 * @param {Function} transform The argument transform.
	 * @returns {Function} Returns the new function.
	 */
	function overArg(func, transform) {
	  return function(arg) {
	    return func(transform(arg));
	  };
	}

	module.exports = overArg;


/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

	var isFunction = __webpack_require__(28),
	    isLength = __webpack_require__(74);

	/**
	 * Checks if `value` is array-like. A value is considered array-like if it's
	 * not a function and has a `value.length` that's an integer greater than or
	 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
	 * @example
	 *
	 * _.isArrayLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isArrayLike(document.body.children);
	 * // => true
	 *
	 * _.isArrayLike('abc');
	 * // => true
	 *
	 * _.isArrayLike(_.noop);
	 * // => false
	 */
	function isArrayLike(value) {
	  return value != null && isLength(value.length) && !isFunction(value);
	}

	module.exports = isArrayLike;


/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

	var copyObject = __webpack_require__(60),
	    keysIn = __webpack_require__(83);

	/**
	 * The base implementation of `_.assignIn` without support for multiple sources
	 * or `customizer` functions.
	 *
	 * @private
	 * @param {Object} object The destination object.
	 * @param {Object} source The source object.
	 * @returns {Object} Returns `object`.
	 */
	function baseAssignIn(object, source) {
	  return object && copyObject(source, keysIn(source), object);
	}

	module.exports = baseAssignIn;


/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

	var arrayLikeKeys = __webpack_require__(62),
	    baseKeysIn = __webpack_require__(84),
	    isArrayLike = __webpack_require__(81);

	/**
	 * Creates an array of the own and inherited enumerable property names of `object`.
	 *
	 * **Note:** Non-object values are coerced to objects.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.keysIn(new Foo);
	 * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
	 */
	function keysIn(object) {
	  return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
	}

	module.exports = keysIn;


/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(35),
	    isPrototype = __webpack_require__(78),
	    nativeKeysIn = __webpack_require__(85);

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 */
	function baseKeysIn(object) {
	  if (!isObject(object)) {
	    return nativeKeysIn(object);
	  }
	  var isProto = isPrototype(object),
	      result = [];

	  for (var key in object) {
	    if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
	      result.push(key);
	    }
	  }
	  return result;
	}

	module.exports = baseKeysIn;


/***/ }),
/* 85 */
/***/ (function(module, exports) {

	/**
	 * This function is like
	 * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
	 * except that it includes inherited enumerable properties.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 */
	function nativeKeysIn(object) {
	  var result = [];
	  if (object != null) {
	    for (var key in Object(object)) {
	      result.push(key);
	    }
	  }
	  return result;
	}

	module.exports = nativeKeysIn;


/***/ }),
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {var root = __webpack_require__(31);

	/** Detect free variable `exports`. */
	var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

	/** Detect free variable `module`. */
	var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

	/** Detect the popular CommonJS extension `module.exports`. */
	var moduleExports = freeModule && freeModule.exports === freeExports;

	/** Built-in value references. */
	var Buffer = moduleExports ? root.Buffer : undefined,
	    allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;

	/**
	 * Creates a clone of  `buffer`.
	 *
	 * @private
	 * @param {Buffer} buffer The buffer to clone.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @returns {Buffer} Returns the cloned buffer.
	 */
	function cloneBuffer(buffer, isDeep) {
	  if (isDeep) {
	    return buffer.slice();
	  }
	  var length = buffer.length,
	      result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

	  buffer.copy(result);
	  return result;
	}

	module.exports = cloneBuffer;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(69)(module)))

/***/ }),
/* 87 */
/***/ (function(module, exports) {

	/**
	 * Copies the values of `source` to `array`.
	 *
	 * @private
	 * @param {Array} source The array to copy values from.
	 * @param {Array} [array=[]] The array to copy values to.
	 * @returns {Array} Returns `array`.
	 */
	function copyArray(source, array) {
	  var index = -1,
	      length = source.length;

	  array || (array = Array(length));
	  while (++index < length) {
	    array[index] = source[index];
	  }
	  return array;
	}

	module.exports = copyArray;


/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

	var copyObject = __webpack_require__(60),
	    getSymbols = __webpack_require__(89);

	/**
	 * Copies own symbols of `source` to `object`.
	 *
	 * @private
	 * @param {Object} source The object to copy symbols from.
	 * @param {Object} [object={}] The object to copy symbols to.
	 * @returns {Object} Returns `object`.
	 */
	function copySymbols(source, object) {
	  return copyObject(source, getSymbols(source), object);
	}

	module.exports = copySymbols;


/***/ }),
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

	var arrayFilter = __webpack_require__(90),
	    stubArray = __webpack_require__(91);

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Built-in value references. */
	var propertyIsEnumerable = objectProto.propertyIsEnumerable;

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeGetSymbols = Object.getOwnPropertySymbols;

	/**
	 * Creates an array of the own enumerable symbols of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of symbols.
	 */
	var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
	  if (object == null) {
	    return [];
	  }
	  object = Object(object);
	  return arrayFilter(nativeGetSymbols(object), function(symbol) {
	    return propertyIsEnumerable.call(object, symbol);
	  });
	};

	module.exports = getSymbols;


/***/ }),
/* 90 */
/***/ (function(module, exports) {

	/**
	 * A specialized version of `_.filter` for arrays without support for
	 * iteratee shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} predicate The function invoked per iteration.
	 * @returns {Array} Returns the new filtered array.
	 */
	function arrayFilter(array, predicate) {
	  var index = -1,
	      length = array == null ? 0 : array.length,
	      resIndex = 0,
	      result = [];

	  while (++index < length) {
	    var value = array[index];
	    if (predicate(value, index, array)) {
	      result[resIndex++] = value;
	    }
	  }
	  return result;
	}

	module.exports = arrayFilter;


/***/ }),
/* 91 */
/***/ (function(module, exports) {

	/**
	 * This method returns a new empty array.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.13.0
	 * @category Util
	 * @returns {Array} Returns the new empty array.
	 * @example
	 *
	 * var arrays = _.times(2, _.stubArray);
	 *
	 * console.log(arrays);
	 * // => [[], []]
	 *
	 * console.log(arrays[0] === arrays[1]);
	 * // => false
	 */
	function stubArray() {
	  return [];
	}

	module.exports = stubArray;


/***/ }),
/* 92 */
/***/ (function(module, exports, __webpack_require__) {

	var copyObject = __webpack_require__(60),
	    getSymbolsIn = __webpack_require__(93);

	/**
	 * Copies own and inherited symbols of `source` to `object`.
	 *
	 * @private
	 * @param {Object} source The object to copy symbols from.
	 * @param {Object} [object={}] The object to copy symbols to.
	 * @returns {Object} Returns `object`.
	 */
	function copySymbolsIn(source, object) {
	  return copyObject(source, getSymbolsIn(source), object);
	}

	module.exports = copySymbolsIn;


/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

	var arrayPush = __webpack_require__(94),
	    getPrototype = __webpack_require__(95),
	    getSymbols = __webpack_require__(89),
	    stubArray = __webpack_require__(91);

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeGetSymbols = Object.getOwnPropertySymbols;

	/**
	 * Creates an array of the own and inherited enumerable symbols of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of symbols.
	 */
	var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
	  var result = [];
	  while (object) {
	    arrayPush(result, getSymbols(object));
	    object = getPrototype(object);
	  }
	  return result;
	};

	module.exports = getSymbolsIn;


/***/ }),
/* 94 */
/***/ (function(module, exports) {

	/**
	 * Appends the elements of `values` to `array`.
	 *
	 * @private
	 * @param {Array} array The array to modify.
	 * @param {Array} values The values to append.
	 * @returns {Array} Returns `array`.
	 */
	function arrayPush(array, values) {
	  var index = -1,
	      length = values.length,
	      offset = array.length;

	  while (++index < length) {
	    array[offset + index] = values[index];
	  }
	  return array;
	}

	module.exports = arrayPush;


/***/ }),
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

	var overArg = __webpack_require__(80);

	/** Built-in value references. */
	var getPrototype = overArg(Object.getPrototypeOf, Object);

	module.exports = getPrototype;


/***/ }),
/* 96 */
/***/ (function(module, exports, __webpack_require__) {

	var baseGetAllKeys = __webpack_require__(97),
	    getSymbols = __webpack_require__(89),
	    keys = __webpack_require__(61);

	/**
	 * Creates an array of own enumerable property names and symbols of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names and symbols.
	 */
	function getAllKeys(object) {
	  return baseGetAllKeys(object, keys, getSymbols);
	}

	module.exports = getAllKeys;


/***/ }),
/* 97 */
/***/ (function(module, exports, __webpack_require__) {

	var arrayPush = __webpack_require__(94),
	    isArray = __webpack_require__(67);

	/**
	 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
	 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
	 * symbols of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Function} keysFunc The function to get the keys of `object`.
	 * @param {Function} symbolsFunc The function to get the symbols of `object`.
	 * @returns {Array} Returns the array of property names and symbols.
	 */
	function baseGetAllKeys(object, keysFunc, symbolsFunc) {
	  var result = keysFunc(object);
	  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
	}

	module.exports = baseGetAllKeys;


/***/ }),
/* 98 */
/***/ (function(module, exports, __webpack_require__) {

	var baseGetAllKeys = __webpack_require__(97),
	    getSymbolsIn = __webpack_require__(93),
	    keysIn = __webpack_require__(83);

	/**
	 * Creates an array of own and inherited enumerable property names and
	 * symbols of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names and symbols.
	 */
	function getAllKeysIn(object) {
	  return baseGetAllKeys(object, keysIn, getSymbolsIn);
	}

	module.exports = getAllKeysIn;


/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

	var DataView = __webpack_require__(100),
	    Map = __webpack_require__(25),
	    Promise = __webpack_require__(101),
	    Set = __webpack_require__(102),
	    WeakMap = __webpack_require__(103),
	    baseGetTag = __webpack_require__(29),
	    toSource = __webpack_require__(38);

	/** `Object#toString` result references. */
	var mapTag = '[object Map]',
	    objectTag = '[object Object]',
	    promiseTag = '[object Promise]',
	    setTag = '[object Set]',
	    weakMapTag = '[object WeakMap]';

	var dataViewTag = '[object DataView]';

	/** Used to detect maps, sets, and weakmaps. */
	var dataViewCtorString = toSource(DataView),
	    mapCtorString = toSource(Map),
	    promiseCtorString = toSource(Promise),
	    setCtorString = toSource(Set),
	    weakMapCtorString = toSource(WeakMap);

	/**
	 * Gets the `toStringTag` of `value`.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the `toStringTag`.
	 */
	var getTag = baseGetTag;

	// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
	if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
	    (Map && getTag(new Map) != mapTag) ||
	    (Promise && getTag(Promise.resolve()) != promiseTag) ||
	    (Set && getTag(new Set) != setTag) ||
	    (WeakMap && getTag(new WeakMap) != weakMapTag)) {
	  getTag = function(value) {
	    var result = baseGetTag(value),
	        Ctor = result == objectTag ? value.constructor : undefined,
	        ctorString = Ctor ? toSource(Ctor) : '';

	    if (ctorString) {
	      switch (ctorString) {
	        case dataViewCtorString: return dataViewTag;
	        case mapCtorString: return mapTag;
	        case promiseCtorString: return promiseTag;
	        case setCtorString: return setTag;
	        case weakMapCtorString: return weakMapTag;
	      }
	    }
	    return result;
	  };
	}

	module.exports = getTag;


/***/ }),
/* 100 */
/***/ (function(module, exports, __webpack_require__) {

	var getNative = __webpack_require__(26),
	    root = __webpack_require__(31);

	/* Built-in method references that are verified to be native. */
	var DataView = getNative(root, 'DataView');

	module.exports = DataView;


/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

	var getNative = __webpack_require__(26),
	    root = __webpack_require__(31);

	/* Built-in method references that are verified to be native. */
	var Promise = getNative(root, 'Promise');

	module.exports = Promise;


/***/ }),
/* 102 */
/***/ (function(module, exports, __webpack_require__) {

	var getNative = __webpack_require__(26),
	    root = __webpack_require__(31);

	/* Built-in method references that are verified to be native. */
	var Set = getNative(root, 'Set');

	module.exports = Set;


/***/ }),
/* 103 */
/***/ (function(module, exports, __webpack_require__) {

	var getNative = __webpack_require__(26),
	    root = __webpack_require__(31);

	/* Built-in method references that are verified to be native. */
	var WeakMap = getNative(root, 'WeakMap');

	module.exports = WeakMap;


/***/ }),
/* 104 */
/***/ (function(module, exports) {

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Initializes an array clone.
	 *
	 * @private
	 * @param {Array} array The array to clone.
	 * @returns {Array} Returns the initialized clone.
	 */
	function initCloneArray(array) {
	  var length = array.length,
	      result = new array.constructor(length);

	  // Add properties assigned by `RegExp#exec`.
	  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
	    result.index = array.index;
	    result.input = array.input;
	  }
	  return result;
	}

	module.exports = initCloneArray;


/***/ }),
/* 105 */
/***/ (function(module, exports, __webpack_require__) {

	var cloneArrayBuffer = __webpack_require__(106),
	    cloneDataView = __webpack_require__(108),
	    cloneRegExp = __webpack_require__(109),
	    cloneSymbol = __webpack_require__(110),
	    cloneTypedArray = __webpack_require__(111);

	/** `Object#toString` result references. */
	var boolTag = '[object Boolean]',
	    dateTag = '[object Date]',
	    mapTag = '[object Map]',
	    numberTag = '[object Number]',
	    regexpTag = '[object RegExp]',
	    setTag = '[object Set]',
	    stringTag = '[object String]',
	    symbolTag = '[object Symbol]';

	var arrayBufferTag = '[object ArrayBuffer]',
	    dataViewTag = '[object DataView]',
	    float32Tag = '[object Float32Array]',
	    float64Tag = '[object Float64Array]',
	    int8Tag = '[object Int8Array]',
	    int16Tag = '[object Int16Array]',
	    int32Tag = '[object Int32Array]',
	    uint8Tag = '[object Uint8Array]',
	    uint8ClampedTag = '[object Uint8ClampedArray]',
	    uint16Tag = '[object Uint16Array]',
	    uint32Tag = '[object Uint32Array]';

	/**
	 * Initializes an object clone based on its `toStringTag`.
	 *
	 * **Note:** This function only supports cloning values with tags of
	 * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
	 *
	 * @private
	 * @param {Object} object The object to clone.
	 * @param {string} tag The `toStringTag` of the object to clone.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @returns {Object} Returns the initialized clone.
	 */
	function initCloneByTag(object, tag, isDeep) {
	  var Ctor = object.constructor;
	  switch (tag) {
	    case arrayBufferTag:
	      return cloneArrayBuffer(object);

	    case boolTag:
	    case dateTag:
	      return new Ctor(+object);

	    case dataViewTag:
	      return cloneDataView(object, isDeep);

	    case float32Tag: case float64Tag:
	    case int8Tag: case int16Tag: case int32Tag:
	    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
	      return cloneTypedArray(object, isDeep);

	    case mapTag:
	      return new Ctor;

	    case numberTag:
	    case stringTag:
	      return new Ctor(object);

	    case regexpTag:
	      return cloneRegExp(object);

	    case setTag:
	      return new Ctor;

	    case symbolTag:
	      return cloneSymbol(object);
	  }
	}

	module.exports = initCloneByTag;


/***/ }),
/* 106 */
/***/ (function(module, exports, __webpack_require__) {

	var Uint8Array = __webpack_require__(107);

	/**
	 * Creates a clone of `arrayBuffer`.
	 *
	 * @private
	 * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
	 * @returns {ArrayBuffer} Returns the cloned array buffer.
	 */
	function cloneArrayBuffer(arrayBuffer) {
	  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
	  new Uint8Array(result).set(new Uint8Array(arrayBuffer));
	  return result;
	}

	module.exports = cloneArrayBuffer;


/***/ }),
/* 107 */
/***/ (function(module, exports, __webpack_require__) {

	var root = __webpack_require__(31);

	/** Built-in value references. */
	var Uint8Array = root.Uint8Array;

	module.exports = Uint8Array;


/***/ }),
/* 108 */
/***/ (function(module, exports, __webpack_require__) {

	var cloneArrayBuffer = __webpack_require__(106);

	/**
	 * Creates a clone of `dataView`.
	 *
	 * @private
	 * @param {Object} dataView The data view to clone.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @returns {Object} Returns the cloned data view.
	 */
	function cloneDataView(dataView, isDeep) {
	  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
	  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
	}

	module.exports = cloneDataView;


/***/ }),
/* 109 */
/***/ (function(module, exports) {

	/** Used to match `RegExp` flags from their coerced string values. */
	var reFlags = /\w*$/;

	/**
	 * Creates a clone of `regexp`.
	 *
	 * @private
	 * @param {Object} regexp The regexp to clone.
	 * @returns {Object} Returns the cloned regexp.
	 */
	function cloneRegExp(regexp) {
	  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
	  result.lastIndex = regexp.lastIndex;
	  return result;
	}

	module.exports = cloneRegExp;


/***/ }),
/* 110 */
/***/ (function(module, exports, __webpack_require__) {

	var Symbol = __webpack_require__(30);

	/** Used to convert symbols to primitives and strings. */
	var symbolProto = Symbol ? Symbol.prototype : undefined,
	    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

	/**
	 * Creates a clone of the `symbol` object.
	 *
	 * @private
	 * @param {Object} symbol The symbol object to clone.
	 * @returns {Object} Returns the cloned symbol object.
	 */
	function cloneSymbol(symbol) {
	  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
	}

	module.exports = cloneSymbol;


/***/ }),
/* 111 */
/***/ (function(module, exports, __webpack_require__) {

	var cloneArrayBuffer = __webpack_require__(106);

	/**
	 * Creates a clone of `typedArray`.
	 *
	 * @private
	 * @param {Object} typedArray The typed array to clone.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @returns {Object} Returns the cloned typed array.
	 */
	function cloneTypedArray(typedArray, isDeep) {
	  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
	  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
	}

	module.exports = cloneTypedArray;


/***/ }),
/* 112 */
/***/ (function(module, exports, __webpack_require__) {

	var baseCreate = __webpack_require__(113),
	    getPrototype = __webpack_require__(95),
	    isPrototype = __webpack_require__(78);

	/**
	 * Initializes an object clone.
	 *
	 * @private
	 * @param {Object} object The object to clone.
	 * @returns {Object} Returns the initialized clone.
	 */
	function initCloneObject(object) {
	  return (typeof object.constructor == 'function' && !isPrototype(object))
	    ? baseCreate(getPrototype(object))
	    : {};
	}

	module.exports = initCloneObject;


/***/ }),
/* 113 */
/***/ (function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(35);

	/** Built-in value references. */
	var objectCreate = Object.create;

	/**
	 * The base implementation of `_.create` without support for assigning
	 * properties to the created object.
	 *
	 * @private
	 * @param {Object} proto The object to inherit from.
	 * @returns {Object} Returns the new object.
	 */
	var baseCreate = (function() {
	  function object() {}
	  return function(proto) {
	    if (!isObject(proto)) {
	      return {};
	    }
	    if (objectCreate) {
	      return objectCreate(proto);
	    }
	    object.prototype = proto;
	    var result = new object;
	    object.prototype = undefined;
	    return result;
	  };
	}());

	module.exports = baseCreate;


/***/ }),
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

	var baseIsMap = __webpack_require__(115),
	    baseUnary = __webpack_require__(75),
	    nodeUtil = __webpack_require__(76);

	/* Node.js helper references. */
	var nodeIsMap = nodeUtil && nodeUtil.isMap;

	/**
	 * Checks if `value` is classified as a `Map` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.3.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a map, else `false`.
	 * @example
	 *
	 * _.isMap(new Map);
	 * // => true
	 *
	 * _.isMap(new WeakMap);
	 * // => false
	 */
	var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

	module.exports = isMap;


/***/ }),
/* 115 */
/***/ (function(module, exports, __webpack_require__) {

	var getTag = __webpack_require__(99),
	    isObjectLike = __webpack_require__(66);

	/** `Object#toString` result references. */
	var mapTag = '[object Map]';

	/**
	 * The base implementation of `_.isMap` without Node.js optimizations.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a map, else `false`.
	 */
	function baseIsMap(value) {
	  return isObjectLike(value) && getTag(value) == mapTag;
	}

	module.exports = baseIsMap;


/***/ }),
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

	var baseIsSet = __webpack_require__(117),
	    baseUnary = __webpack_require__(75),
	    nodeUtil = __webpack_require__(76);

	/* Node.js helper references. */
	var nodeIsSet = nodeUtil && nodeUtil.isSet;

	/**
	 * Checks if `value` is classified as a `Set` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.3.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a set, else `false`.
	 * @example
	 *
	 * _.isSet(new Set);
	 * // => true
	 *
	 * _.isSet(new WeakSet);
	 * // => false
	 */
	var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

	module.exports = isSet;


/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

	var getTag = __webpack_require__(99),
	    isObjectLike = __webpack_require__(66);

	/** `Object#toString` result references. */
	var setTag = '[object Set]';

	/**
	 * The base implementation of `_.isSet` without Node.js optimizations.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a set, else `false`.
	 */
	function baseIsSet(value) {
	  return isObjectLike(value) && getTag(value) == setTag;
	}

	module.exports = baseIsSet;


/***/ }),
/* 118 */
/***/ (function(module, exports) {

	/**
	 * Creates a function that returns `value`.
	 *
	 * @static
	 * @memberOf _
	 * @since 2.4.0
	 * @category Util
	 * @param {*} value The value to return from the new function.
	 * @returns {Function} Returns the new constant function.
	 * @example
	 *
	 * var objects = _.times(2, _.constant({ 'a': 1 }));
	 *
	 * console.log(objects);
	 * // => [{ 'a': 1 }, { 'a': 1 }]
	 *
	 * console.log(objects[0] === objects[1]);
	 * // => true
	 */
	function constant(value) {
	  return function() {
	    return value;
	  };
	}

	module.exports = constant;


/***/ }),
/* 119 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(120);


/***/ }),
/* 120 */
/***/ (function(module, exports, __webpack_require__) {

	var arrayEach = __webpack_require__(55),
	    baseEach = __webpack_require__(121),
	    castFunction = __webpack_require__(126),
	    isArray = __webpack_require__(67);

	/**
	 * Iterates over elements of `collection` and invokes `iteratee` for each element.
	 * The iteratee is invoked with three arguments: (value, index|key, collection).
	 * Iteratee functions may exit iteration early by explicitly returning `false`.
	 *
	 * **Note:** As with other "Collections" methods, objects with a "length"
	 * property are iterated like arrays. To avoid this behavior use `_.forIn`
	 * or `_.forOwn` for object iteration.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @alias each
	 * @category Collection
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	 * @returns {Array|Object} Returns `collection`.
	 * @see _.forEachRight
	 * @example
	 *
	 * _.forEach([1, 2], function(value) {
	 *   console.log(value);
	 * });
	 * // => Logs `1` then `2`.
	 *
	 * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
	 *   console.log(key);
	 * });
	 * // => Logs 'a' then 'b' (iteration order is not guaranteed).
	 */
	function forEach(collection, iteratee) {
	  var func = isArray(collection) ? arrayEach : baseEach;
	  return func(collection, castFunction(iteratee));
	}

	module.exports = forEach;


/***/ }),
/* 121 */
/***/ (function(module, exports, __webpack_require__) {

	var baseForOwn = __webpack_require__(122),
	    createBaseEach = __webpack_require__(125);

	/**
	 * The base implementation of `_.forEach` without support for iteratee shorthands.
	 *
	 * @private
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array|Object} Returns `collection`.
	 */
	var baseEach = createBaseEach(baseForOwn);

	module.exports = baseEach;


/***/ }),
/* 122 */
/***/ (function(module, exports, __webpack_require__) {

	var baseFor = __webpack_require__(123),
	    keys = __webpack_require__(61);

	/**
	 * The base implementation of `_.forOwn` without support for iteratee shorthands.
	 *
	 * @private
	 * @param {Object} object The object to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Object} Returns `object`.
	 */
	function baseForOwn(object, iteratee) {
	  return object && baseFor(object, iteratee, keys);
	}

	module.exports = baseForOwn;


/***/ }),
/* 123 */
/***/ (function(module, exports, __webpack_require__) {

	var createBaseFor = __webpack_require__(124);

	/**
	 * The base implementation of `baseForOwn` which iterates over `object`
	 * properties returned by `keysFunc` and invokes `iteratee` for each property.
	 * Iteratee functions may exit iteration early by explicitly returning `false`.
	 *
	 * @private
	 * @param {Object} object The object to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @param {Function} keysFunc The function to get the keys of `object`.
	 * @returns {Object} Returns `object`.
	 */
	var baseFor = createBaseFor();

	module.exports = baseFor;


/***/ }),
/* 124 */
/***/ (function(module, exports) {

	/**
	 * Creates a base function for methods like `_.forIn` and `_.forOwn`.
	 *
	 * @private
	 * @param {boolean} [fromRight] Specify iterating from right to left.
	 * @returns {Function} Returns the new base function.
	 */
	function createBaseFor(fromRight) {
	  return function(object, iteratee, keysFunc) {
	    var index = -1,
	        iterable = Object(object),
	        props = keysFunc(object),
	        length = props.length;

	    while (length--) {
	      var key = props[fromRight ? length : ++index];
	      if (iteratee(iterable[key], key, iterable) === false) {
	        break;
	      }
	    }
	    return object;
	  };
	}

	module.exports = createBaseFor;


/***/ }),
/* 125 */
/***/ (function(module, exports, __webpack_require__) {

	var isArrayLike = __webpack_require__(81);

	/**
	 * Creates a `baseEach` or `baseEachRight` function.
	 *
	 * @private
	 * @param {Function} eachFunc The function to iterate over a collection.
	 * @param {boolean} [fromRight] Specify iterating from right to left.
	 * @returns {Function} Returns the new base function.
	 */
	function createBaseEach(eachFunc, fromRight) {
	  return function(collection, iteratee) {
	    if (collection == null) {
	      return collection;
	    }
	    if (!isArrayLike(collection)) {
	      return eachFunc(collection, iteratee);
	    }
	    var length = collection.length,
	        index = fromRight ? length : -1,
	        iterable = Object(collection);

	    while ((fromRight ? index-- : ++index < length)) {
	      if (iteratee(iterable[index], index, iterable) === false) {
	        break;
	      }
	    }
	    return collection;
	  };
	}

	module.exports = createBaseEach;


/***/ }),
/* 126 */
/***/ (function(module, exports, __webpack_require__) {

	var identity = __webpack_require__(127);

	/**
	 * Casts `value` to `identity` if it's not a function.
	 *
	 * @private
	 * @param {*} value The value to inspect.
	 * @returns {Function} Returns cast function.
	 */
	function castFunction(value) {
	  return typeof value == 'function' ? value : identity;
	}

	module.exports = castFunction;


/***/ }),
/* 127 */
/***/ (function(module, exports) {

	/**
	 * This method returns the first argument it receives.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Util
	 * @param {*} value Any value.
	 * @returns {*} Returns `value`.
	 * @example
	 *
	 * var object = { 'a': 1 };
	 *
	 * console.log(_.identity(object) === object);
	 * // => true
	 */
	function identity(value) {
	  return value;
	}

	module.exports = identity;


/***/ }),
/* 128 */
/***/ (function(module, exports, __webpack_require__) {

	var arrayFilter = __webpack_require__(90),
	    baseFilter = __webpack_require__(129),
	    baseIteratee = __webpack_require__(130),
	    isArray = __webpack_require__(67);

	/**
	 * Iterates over elements of `collection`, returning an array of all elements
	 * `predicate` returns truthy for. The predicate is invoked with three
	 * arguments: (value, index|key, collection).
	 *
	 * **Note:** Unlike `_.remove`, this method returns a new array.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Collection
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} [predicate=_.identity] The function invoked per iteration.
	 * @returns {Array} Returns the new filtered array.
	 * @see _.reject
	 * @example
	 *
	 * var users = [
	 *   { 'user': 'barney', 'age': 36, 'active': true },
	 *   { 'user': 'fred',   'age': 40, 'active': false }
	 * ];
	 *
	 * _.filter(users, function(o) { return !o.active; });
	 * // => objects for ['fred']
	 *
	 * // The `_.matches` iteratee shorthand.
	 * _.filter(users, { 'age': 36, 'active': true });
	 * // => objects for ['barney']
	 *
	 * // The `_.matchesProperty` iteratee shorthand.
	 * _.filter(users, ['active', false]);
	 * // => objects for ['fred']
	 *
	 * // The `_.property` iteratee shorthand.
	 * _.filter(users, 'active');
	 * // => objects for ['barney']
	 */
	function filter(collection, predicate) {
	  var func = isArray(collection) ? arrayFilter : baseFilter;
	  return func(collection, baseIteratee(predicate, 3));
	}

	module.exports = filter;


/***/ }),
/* 129 */
/***/ (function(module, exports, __webpack_require__) {

	var baseEach = __webpack_require__(121);

	/**
	 * The base implementation of `_.filter` without support for iteratee shorthands.
	 *
	 * @private
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} predicate The function invoked per iteration.
	 * @returns {Array} Returns the new filtered array.
	 */
	function baseFilter(collection, predicate) {
	  var result = [];
	  baseEach(collection, function(value, index, collection) {
	    if (predicate(value, index, collection)) {
	      result.push(value);
	    }
	  });
	  return result;
	}

	module.exports = baseFilter;


/***/ }),
/* 130 */
/***/ (function(module, exports, __webpack_require__) {

	var baseMatches = __webpack_require__(131),
	    baseMatchesProperty = __webpack_require__(148),
	    identity = __webpack_require__(127),
	    isArray = __webpack_require__(67),
	    property = __webpack_require__(164);

	/**
	 * The base implementation of `_.iteratee`.
	 *
	 * @private
	 * @param {*} [value=_.identity] The value to convert to an iteratee.
	 * @returns {Function} Returns the iteratee.
	 */
	function baseIteratee(value) {
	  // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
	  // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
	  if (typeof value == 'function') {
	    return value;
	  }
	  if (value == null) {
	    return identity;
	  }
	  if (typeof value == 'object') {
	    return isArray(value)
	      ? baseMatchesProperty(value[0], value[1])
	      : baseMatches(value);
	  }
	  return property(value);
	}

	module.exports = baseIteratee;


/***/ }),
/* 131 */
/***/ (function(module, exports, __webpack_require__) {

	var baseIsMatch = __webpack_require__(132),
	    getMatchData = __webpack_require__(145),
	    matchesStrictComparable = __webpack_require__(147);

	/**
	 * The base implementation of `_.matches` which doesn't clone `source`.
	 *
	 * @private
	 * @param {Object} source The object of property values to match.
	 * @returns {Function} Returns the new spec function.
	 */
	function baseMatches(source) {
	  var matchData = getMatchData(source);
	  if (matchData.length == 1 && matchData[0][2]) {
	    return matchesStrictComparable(matchData[0][0], matchData[0][1]);
	  }
	  return function(object) {
	    return object === source || baseIsMatch(object, source, matchData);
	  };
	}

	module.exports = baseMatches;


/***/ }),
/* 132 */
/***/ (function(module, exports, __webpack_require__) {

	var Stack = __webpack_require__(11),
	    baseIsEqual = __webpack_require__(133);

	/** Used to compose bitmasks for value comparisons. */
	var COMPARE_PARTIAL_FLAG = 1,
	    COMPARE_UNORDERED_FLAG = 2;

	/**
	 * The base implementation of `_.isMatch` without support for iteratee shorthands.
	 *
	 * @private
	 * @param {Object} object The object to inspect.
	 * @param {Object} source The object of property values to match.
	 * @param {Array} matchData The property names, values, and compare flags to match.
	 * @param {Function} [customizer] The function to customize comparisons.
	 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	 */
	function baseIsMatch(object, source, matchData, customizer) {
	  var index = matchData.length,
	      length = index,
	      noCustomizer = !customizer;

	  if (object == null) {
	    return !length;
	  }
	  object = Object(object);
	  while (index--) {
	    var data = matchData[index];
	    if ((noCustomizer && data[2])
	          ? data[1] !== object[data[0]]
	          : !(data[0] in object)
	        ) {
	      return false;
	    }
	  }
	  while (++index < length) {
	    data = matchData[index];
	    var key = data[0],
	        objValue = object[key],
	        srcValue = data[1];

	    if (noCustomizer && data[2]) {
	      if (objValue === undefined && !(key in object)) {
	        return false;
	      }
	    } else {
	      var stack = new Stack;
	      if (customizer) {
	        var result = customizer(objValue, srcValue, key, object, source, stack);
	      }
	      if (!(result === undefined
	            ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
	            : result
	          )) {
	        return false;
	      }
	    }
	  }
	  return true;
	}

	module.exports = baseIsMatch;


/***/ }),
/* 133 */
/***/ (function(module, exports, __webpack_require__) {

	var baseIsEqualDeep = __webpack_require__(134),
	    isObjectLike = __webpack_require__(66);

	/**
	 * The base implementation of `_.isEqual` which supports partial comparisons
	 * and tracks traversed objects.
	 *
	 * @private
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @param {boolean} bitmask The bitmask flags.
	 *  1 - Unordered comparison
	 *  2 - Partial comparison
	 * @param {Function} [customizer] The function to customize comparisons.
	 * @param {Object} [stack] Tracks traversed `value` and `other` objects.
	 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	 */
	function baseIsEqual(value, other, bitmask, customizer, stack) {
	  if (value === other) {
	    return true;
	  }
	  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
	    return value !== value && other !== other;
	  }
	  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
	}

	module.exports = baseIsEqual;


/***/ }),
/* 134 */
/***/ (function(module, exports, __webpack_require__) {

	var Stack = __webpack_require__(11),
	    equalArrays = __webpack_require__(135),
	    equalByTag = __webpack_require__(141),
	    equalObjects = __webpack_require__(144),
	    getTag = __webpack_require__(99),
	    isArray = __webpack_require__(67),
	    isBuffer = __webpack_require__(68),
	    isTypedArray = __webpack_require__(72);

	/** Used to compose bitmasks for value comparisons. */
	var COMPARE_PARTIAL_FLAG = 1;

	/** `Object#toString` result references. */
	var argsTag = '[object Arguments]',
	    arrayTag = '[object Array]',
	    objectTag = '[object Object]';

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * A specialized version of `baseIsEqual` for arrays and objects which performs
	 * deep comparisons and tracks traversed objects enabling objects with circular
	 * references to be compared.
	 *
	 * @private
	 * @param {Object} object The object to compare.
	 * @param {Object} other The other object to compare.
	 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	 * @param {Function} customizer The function to customize comparisons.
	 * @param {Function} equalFunc The function to determine equivalents of values.
	 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
	 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	 */
	function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
	  var objIsArr = isArray(object),
	      othIsArr = isArray(other),
	      objTag = objIsArr ? arrayTag : getTag(object),
	      othTag = othIsArr ? arrayTag : getTag(other);

	  objTag = objTag == argsTag ? objectTag : objTag;
	  othTag = othTag == argsTag ? objectTag : othTag;

	  var objIsObj = objTag == objectTag,
	      othIsObj = othTag == objectTag,
	      isSameTag = objTag == othTag;

	  if (isSameTag && isBuffer(object)) {
	    if (!isBuffer(other)) {
	      return false;
	    }
	    objIsArr = true;
	    objIsObj = false;
	  }
	  if (isSameTag && !objIsObj) {
	    stack || (stack = new Stack);
	    return (objIsArr || isTypedArray(object))
	      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
	      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
	  }
	  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
	    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
	        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

	    if (objIsWrapped || othIsWrapped) {
	      var objUnwrapped = objIsWrapped ? object.value() : object,
	          othUnwrapped = othIsWrapped ? other.value() : other;

	      stack || (stack = new Stack);
	      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
	    }
	  }
	  if (!isSameTag) {
	    return false;
	  }
	  stack || (stack = new Stack);
	  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
	}

	module.exports = baseIsEqualDeep;


/***/ }),
/* 135 */
/***/ (function(module, exports, __webpack_require__) {

	var SetCache = __webpack_require__(136),
	    arraySome = __webpack_require__(139),
	    cacheHas = __webpack_require__(140);

	/** Used to compose bitmasks for value comparisons. */
	var COMPARE_PARTIAL_FLAG = 1,
	    COMPARE_UNORDERED_FLAG = 2;

	/**
	 * A specialized version of `baseIsEqualDeep` for arrays with support for
	 * partial deep comparisons.
	 *
	 * @private
	 * @param {Array} array The array to compare.
	 * @param {Array} other The other array to compare.
	 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	 * @param {Function} customizer The function to customize comparisons.
	 * @param {Function} equalFunc The function to determine equivalents of values.
	 * @param {Object} stack Tracks traversed `array` and `other` objects.
	 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
	 */
	function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
	  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
	      arrLength = array.length,
	      othLength = other.length;

	  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
	    return false;
	  }
	  // Assume cyclic values are equal.
	  var stacked = stack.get(array);
	  if (stacked && stack.get(other)) {
	    return stacked == other;
	  }
	  var index = -1,
	      result = true,
	      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;

	  stack.set(array, other);
	  stack.set(other, array);

	  // Ignore non-index properties.
	  while (++index < arrLength) {
	    var arrValue = array[index],
	        othValue = other[index];

	    if (customizer) {
	      var compared = isPartial
	        ? customizer(othValue, arrValue, index, other, array, stack)
	        : customizer(arrValue, othValue, index, array, other, stack);
	    }
	    if (compared !== undefined) {
	      if (compared) {
	        continue;
	      }
	      result = false;
	      break;
	    }
	    // Recursively compare arrays (susceptible to call stack limits).
	    if (seen) {
	      if (!arraySome(other, function(othValue, othIndex) {
	            if (!cacheHas(seen, othIndex) &&
	                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
	              return seen.push(othIndex);
	            }
	          })) {
	        result = false;
	        break;
	      }
	    } else if (!(
	          arrValue === othValue ||
	            equalFunc(arrValue, othValue, bitmask, customizer, stack)
	        )) {
	      result = false;
	      break;
	    }
	  }
	  stack['delete'](array);
	  stack['delete'](other);
	  return result;
	}

	module.exports = equalArrays;


/***/ }),
/* 136 */
/***/ (function(module, exports, __webpack_require__) {

	var MapCache = __webpack_require__(40),
	    setCacheAdd = __webpack_require__(137),
	    setCacheHas = __webpack_require__(138);

	/**
	 *
	 * Creates an array cache object to store unique values.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [values] The values to cache.
	 */
	function SetCache(values) {
	  var index = -1,
	      length = values == null ? 0 : values.length;

	  this.__data__ = new MapCache;
	  while (++index < length) {
	    this.add(values[index]);
	  }
	}

	// Add methods to `SetCache`.
	SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
	SetCache.prototype.has = setCacheHas;

	module.exports = SetCache;


/***/ }),
/* 137 */
/***/ (function(module, exports) {

	/** Used to stand-in for `undefined` hash values. */
	var HASH_UNDEFINED = '__lodash_hash_undefined__';

	/**
	 * Adds `value` to the array cache.
	 *
	 * @private
	 * @name add
	 * @memberOf SetCache
	 * @alias push
	 * @param {*} value The value to cache.
	 * @returns {Object} Returns the cache instance.
	 */
	function setCacheAdd(value) {
	  this.__data__.set(value, HASH_UNDEFINED);
	  return this;
	}

	module.exports = setCacheAdd;


/***/ }),
/* 138 */
/***/ (function(module, exports) {

	/**
	 * Checks if `value` is in the array cache.
	 *
	 * @private
	 * @name has
	 * @memberOf SetCache
	 * @param {*} value The value to search for.
	 * @returns {number} Returns `true` if `value` is found, else `false`.
	 */
	function setCacheHas(value) {
	  return this.__data__.has(value);
	}

	module.exports = setCacheHas;


/***/ }),
/* 139 */
/***/ (function(module, exports) {

	/**
	 * A specialized version of `_.some` for arrays without support for iteratee
	 * shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} predicate The function invoked per iteration.
	 * @returns {boolean} Returns `true` if any element passes the predicate check,
	 *  else `false`.
	 */
	function arraySome(array, predicate) {
	  var index = -1,
	      length = array == null ? 0 : array.length;

	  while (++index < length) {
	    if (predicate(array[index], index, array)) {
	      return true;
	    }
	  }
	  return false;
	}

	module.exports = arraySome;


/***/ }),
/* 140 */
/***/ (function(module, exports) {

	/**
	 * Checks if a `cache` value for `key` exists.
	 *
	 * @private
	 * @param {Object} cache The cache to query.
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function cacheHas(cache, key) {
	  return cache.has(key);
	}

	module.exports = cacheHas;


/***/ }),
/* 141 */
/***/ (function(module, exports, __webpack_require__) {

	var Symbol = __webpack_require__(30),
	    Uint8Array = __webpack_require__(107),
	    eq = __webpack_require__(16),
	    equalArrays = __webpack_require__(135),
	    mapToArray = __webpack_require__(142),
	    setToArray = __webpack_require__(143);

	/** Used to compose bitmasks for value comparisons. */
	var COMPARE_PARTIAL_FLAG = 1,
	    COMPARE_UNORDERED_FLAG = 2;

	/** `Object#toString` result references. */
	var boolTag = '[object Boolean]',
	    dateTag = '[object Date]',
	    errorTag = '[object Error]',
	    mapTag = '[object Map]',
	    numberTag = '[object Number]',
	    regexpTag = '[object RegExp]',
	    setTag = '[object Set]',
	    stringTag = '[object String]',
	    symbolTag = '[object Symbol]';

	var arrayBufferTag = '[object ArrayBuffer]',
	    dataViewTag = '[object DataView]';

	/** Used to convert symbols to primitives and strings. */
	var symbolProto = Symbol ? Symbol.prototype : undefined,
	    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

	/**
	 * A specialized version of `baseIsEqualDeep` for comparing objects of
	 * the same `toStringTag`.
	 *
	 * **Note:** This function only supports comparing values with tags of
	 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
	 *
	 * @private
	 * @param {Object} object The object to compare.
	 * @param {Object} other The other object to compare.
	 * @param {string} tag The `toStringTag` of the objects to compare.
	 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	 * @param {Function} customizer The function to customize comparisons.
	 * @param {Function} equalFunc The function to determine equivalents of values.
	 * @param {Object} stack Tracks traversed `object` and `other` objects.
	 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	 */
	function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
	  switch (tag) {
	    case dataViewTag:
	      if ((object.byteLength != other.byteLength) ||
	          (object.byteOffset != other.byteOffset)) {
	        return false;
	      }
	      object = object.buffer;
	      other = other.buffer;

	    case arrayBufferTag:
	      if ((object.byteLength != other.byteLength) ||
	          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
	        return false;
	      }
	      return true;

	    case boolTag:
	    case dateTag:
	    case numberTag:
	      // Coerce booleans to `1` or `0` and dates to milliseconds.
	      // Invalid dates are coerced to `NaN`.
	      return eq(+object, +other);

	    case errorTag:
	      return object.name == other.name && object.message == other.message;

	    case regexpTag:
	    case stringTag:
	      // Coerce regexes to strings and treat strings, primitives and objects,
	      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
	      // for more details.
	      return object == (other + '');

	    case mapTag:
	      var convert = mapToArray;

	    case setTag:
	      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
	      convert || (convert = setToArray);

	      if (object.size != other.size && !isPartial) {
	        return false;
	      }
	      // Assume cyclic values are equal.
	      var stacked = stack.get(object);
	      if (stacked) {
	        return stacked == other;
	      }
	      bitmask |= COMPARE_UNORDERED_FLAG;

	      // Recursively compare objects (susceptible to call stack limits).
	      stack.set(object, other);
	      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
	      stack['delete'](object);
	      return result;

	    case symbolTag:
	      if (symbolValueOf) {
	        return symbolValueOf.call(object) == symbolValueOf.call(other);
	      }
	  }
	  return false;
	}

	module.exports = equalByTag;


/***/ }),
/* 142 */
/***/ (function(module, exports) {

	/**
	 * Converts `map` to its key-value pairs.
	 *
	 * @private
	 * @param {Object} map The map to convert.
	 * @returns {Array} Returns the key-value pairs.
	 */
	function mapToArray(map) {
	  var index = -1,
	      result = Array(map.size);

	  map.forEach(function(value, key) {
	    result[++index] = [key, value];
	  });
	  return result;
	}

	module.exports = mapToArray;


/***/ }),
/* 143 */
/***/ (function(module, exports) {

	/**
	 * Converts `set` to an array of its values.
	 *
	 * @private
	 * @param {Object} set The set to convert.
	 * @returns {Array} Returns the values.
	 */
	function setToArray(set) {
	  var index = -1,
	      result = Array(set.size);

	  set.forEach(function(value) {
	    result[++index] = value;
	  });
	  return result;
	}

	module.exports = setToArray;


/***/ }),
/* 144 */
/***/ (function(module, exports, __webpack_require__) {

	var getAllKeys = __webpack_require__(96);

	/** Used to compose bitmasks for value comparisons. */
	var COMPARE_PARTIAL_FLAG = 1;

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * A specialized version of `baseIsEqualDeep` for objects with support for
	 * partial deep comparisons.
	 *
	 * @private
	 * @param {Object} object The object to compare.
	 * @param {Object} other The other object to compare.
	 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	 * @param {Function} customizer The function to customize comparisons.
	 * @param {Function} equalFunc The function to determine equivalents of values.
	 * @param {Object} stack Tracks traversed `object` and `other` objects.
	 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	 */
	function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
	  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
	      objProps = getAllKeys(object),
	      objLength = objProps.length,
	      othProps = getAllKeys(other),
	      othLength = othProps.length;

	  if (objLength != othLength && !isPartial) {
	    return false;
	  }
	  var index = objLength;
	  while (index--) {
	    var key = objProps[index];
	    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
	      return false;
	    }
	  }
	  // Assume cyclic values are equal.
	  var stacked = stack.get(object);
	  if (stacked && stack.get(other)) {
	    return stacked == other;
	  }
	  var result = true;
	  stack.set(object, other);
	  stack.set(other, object);

	  var skipCtor = isPartial;
	  while (++index < objLength) {
	    key = objProps[index];
	    var objValue = object[key],
	        othValue = other[key];

	    if (customizer) {
	      var compared = isPartial
	        ? customizer(othValue, objValue, key, other, object, stack)
	        : customizer(objValue, othValue, key, object, other, stack);
	    }
	    // Recursively compare objects (susceptible to call stack limits).
	    if (!(compared === undefined
	          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
	          : compared
	        )) {
	      result = false;
	      break;
	    }
	    skipCtor || (skipCtor = key == 'constructor');
	  }
	  if (result && !skipCtor) {
	    var objCtor = object.constructor,
	        othCtor = other.constructor;

	    // Non `Object` object instances with different constructors are not equal.
	    if (objCtor != othCtor &&
	        ('constructor' in object && 'constructor' in other) &&
	        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
	          typeof othCtor == 'function' && othCtor instanceof othCtor)) {
	      result = false;
	    }
	  }
	  stack['delete'](object);
	  stack['delete'](other);
	  return result;
	}

	module.exports = equalObjects;


/***/ }),
/* 145 */
/***/ (function(module, exports, __webpack_require__) {

	var isStrictComparable = __webpack_require__(146),
	    keys = __webpack_require__(61);

	/**
	 * Gets the property names, values, and compare flags of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the match data of `object`.
	 */
	function getMatchData(object) {
	  var result = keys(object),
	      length = result.length;

	  while (length--) {
	    var key = result[length],
	        value = object[key];

	    result[length] = [key, value, isStrictComparable(value)];
	  }
	  return result;
	}

	module.exports = getMatchData;


/***/ }),
/* 146 */
/***/ (function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(35);

	/**
	 * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` if suitable for strict
	 *  equality comparisons, else `false`.
	 */
	function isStrictComparable(value) {
	  return value === value && !isObject(value);
	}

	module.exports = isStrictComparable;


/***/ }),
/* 147 */
/***/ (function(module, exports) {

	/**
	 * A specialized version of `matchesProperty` for source values suitable
	 * for strict equality comparisons, i.e. `===`.
	 *
	 * @private
	 * @param {string} key The key of the property to get.
	 * @param {*} srcValue The value to match.
	 * @returns {Function} Returns the new spec function.
	 */
	function matchesStrictComparable(key, srcValue) {
	  return function(object) {
	    if (object == null) {
	      return false;
	    }
	    return object[key] === srcValue &&
	      (srcValue !== undefined || (key in Object(object)));
	  };
	}

	module.exports = matchesStrictComparable;


/***/ }),
/* 148 */
/***/ (function(module, exports, __webpack_require__) {

	var baseIsEqual = __webpack_require__(133),
	    get = __webpack_require__(149),
	    hasIn = __webpack_require__(161),
	    isKey = __webpack_require__(152),
	    isStrictComparable = __webpack_require__(146),
	    matchesStrictComparable = __webpack_require__(147),
	    toKey = __webpack_require__(160);

	/** Used to compose bitmasks for value comparisons. */
	var COMPARE_PARTIAL_FLAG = 1,
	    COMPARE_UNORDERED_FLAG = 2;

	/**
	 * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
	 *
	 * @private
	 * @param {string} path The path of the property to get.
	 * @param {*} srcValue The value to match.
	 * @returns {Function} Returns the new spec function.
	 */
	function baseMatchesProperty(path, srcValue) {
	  if (isKey(path) && isStrictComparable(srcValue)) {
	    return matchesStrictComparable(toKey(path), srcValue);
	  }
	  return function(object) {
	    var objValue = get(object, path);
	    return (objValue === undefined && objValue === srcValue)
	      ? hasIn(object, path)
	      : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
	  };
	}

	module.exports = baseMatchesProperty;


/***/ }),
/* 149 */
/***/ (function(module, exports, __webpack_require__) {

	var baseGet = __webpack_require__(150);

	/**
	 * Gets the value at `path` of `object`. If the resolved value is
	 * `undefined`, the `defaultValue` is returned in its place.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.7.0
	 * @category Object
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path of the property to get.
	 * @param {*} [defaultValue] The value returned for `undefined` resolved values.
	 * @returns {*} Returns the resolved value.
	 * @example
	 *
	 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	 *
	 * _.get(object, 'a[0].b.c');
	 * // => 3
	 *
	 * _.get(object, ['a', '0', 'b', 'c']);
	 * // => 3
	 *
	 * _.get(object, 'a.b.c', 'default');
	 * // => 'default'
	 */
	function get(object, path, defaultValue) {
	  var result = object == null ? undefined : baseGet(object, path);
	  return result === undefined ? defaultValue : result;
	}

	module.exports = get;


/***/ }),
/* 150 */
/***/ (function(module, exports, __webpack_require__) {

	var castPath = __webpack_require__(151),
	    toKey = __webpack_require__(160);

	/**
	 * The base implementation of `_.get` without support for default values.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path of the property to get.
	 * @returns {*} Returns the resolved value.
	 */
	function baseGet(object, path) {
	  path = castPath(path, object);

	  var index = 0,
	      length = path.length;

	  while (object != null && index < length) {
	    object = object[toKey(path[index++])];
	  }
	  return (index && index == length) ? object : undefined;
	}

	module.exports = baseGet;


/***/ }),
/* 151 */
/***/ (function(module, exports, __webpack_require__) {

	var isArray = __webpack_require__(67),
	    isKey = __webpack_require__(152),
	    stringToPath = __webpack_require__(154),
	    toString = __webpack_require__(157);

	/**
	 * Casts `value` to a path array if it's not one.
	 *
	 * @private
	 * @param {*} value The value to inspect.
	 * @param {Object} [object] The object to query keys on.
	 * @returns {Array} Returns the cast property path array.
	 */
	function castPath(value, object) {
	  if (isArray(value)) {
	    return value;
	  }
	  return isKey(value, object) ? [value] : stringToPath(toString(value));
	}

	module.exports = castPath;


/***/ }),
/* 152 */
/***/ (function(module, exports, __webpack_require__) {

	var isArray = __webpack_require__(67),
	    isSymbol = __webpack_require__(153);

	/** Used to match property names within property paths. */
	var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
	    reIsPlainProp = /^\w*$/;

	/**
	 * Checks if `value` is a property name and not a property path.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @param {Object} [object] The object to query keys on.
	 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
	 */
	function isKey(value, object) {
	  if (isArray(value)) {
	    return false;
	  }
	  var type = typeof value;
	  if (type == 'number' || type == 'symbol' || type == 'boolean' ||
	      value == null || isSymbol(value)) {
	    return true;
	  }
	  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
	    (object != null && value in Object(object));
	}

	module.exports = isKey;


/***/ }),
/* 153 */
/***/ (function(module, exports, __webpack_require__) {

	var baseGetTag = __webpack_require__(29),
	    isObjectLike = __webpack_require__(66);

	/** `Object#toString` result references. */
	var symbolTag = '[object Symbol]';

	/**
	 * Checks if `value` is classified as a `Symbol` primitive or object.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
	 * @example
	 *
	 * _.isSymbol(Symbol.iterator);
	 * // => true
	 *
	 * _.isSymbol('abc');
	 * // => false
	 */
	function isSymbol(value) {
	  return typeof value == 'symbol' ||
	    (isObjectLike(value) && baseGetTag(value) == symbolTag);
	}

	module.exports = isSymbol;


/***/ }),
/* 154 */
/***/ (function(module, exports, __webpack_require__) {

	var memoizeCapped = __webpack_require__(155);

	/** Used to match property names within property paths. */
	var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

	/** Used to match backslashes in property paths. */
	var reEscapeChar = /\\(\\)?/g;

	/**
	 * Converts `string` to a property path array.
	 *
	 * @private
	 * @param {string} string The string to convert.
	 * @returns {Array} Returns the property path array.
	 */
	var stringToPath = memoizeCapped(function(string) {
	  var result = [];
	  if (string.charCodeAt(0) === 46 /* . */) {
	    result.push('');
	  }
	  string.replace(rePropName, function(match, number, quote, subString) {
	    result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
	  });
	  return result;
	});

	module.exports = stringToPath;


/***/ }),
/* 155 */
/***/ (function(module, exports, __webpack_require__) {

	var memoize = __webpack_require__(156);

	/** Used as the maximum memoize cache size. */
	var MAX_MEMOIZE_SIZE = 500;

	/**
	 * A specialized version of `_.memoize` which clears the memoized function's
	 * cache when it exceeds `MAX_MEMOIZE_SIZE`.
	 *
	 * @private
	 * @param {Function} func The function to have its output memoized.
	 * @returns {Function} Returns the new memoized function.
	 */
	function memoizeCapped(func) {
	  var result = memoize(func, function(key) {
	    if (cache.size === MAX_MEMOIZE_SIZE) {
	      cache.clear();
	    }
	    return key;
	  });

	  var cache = result.cache;
	  return result;
	}

	module.exports = memoizeCapped;


/***/ }),
/* 156 */
/***/ (function(module, exports, __webpack_require__) {

	var MapCache = __webpack_require__(40);

	/** Error message constants. */
	var FUNC_ERROR_TEXT = 'Expected a function';

	/**
	 * Creates a function that memoizes the result of `func`. If `resolver` is
	 * provided, it determines the cache key for storing the result based on the
	 * arguments provided to the memoized function. By default, the first argument
	 * provided to the memoized function is used as the map cache key. The `func`
	 * is invoked with the `this` binding of the memoized function.
	 *
	 * **Note:** The cache is exposed as the `cache` property on the memoized
	 * function. Its creation may be customized by replacing the `_.memoize.Cache`
	 * constructor with one whose instances implement the
	 * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
	 * method interface of `clear`, `delete`, `get`, `has`, and `set`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Function
	 * @param {Function} func The function to have its output memoized.
	 * @param {Function} [resolver] The function to resolve the cache key.
	 * @returns {Function} Returns the new memoized function.
	 * @example
	 *
	 * var object = { 'a': 1, 'b': 2 };
	 * var other = { 'c': 3, 'd': 4 };
	 *
	 * var values = _.memoize(_.values);
	 * values(object);
	 * // => [1, 2]
	 *
	 * values(other);
	 * // => [3, 4]
	 *
	 * object.a = 2;
	 * values(object);
	 * // => [1, 2]
	 *
	 * // Modify the result cache.
	 * values.cache.set(object, ['a', 'b']);
	 * values(object);
	 * // => ['a', 'b']
	 *
	 * // Replace `_.memoize.Cache`.
	 * _.memoize.Cache = WeakMap;
	 */
	function memoize(func, resolver) {
	  if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
	    throw new TypeError(FUNC_ERROR_TEXT);
	  }
	  var memoized = function() {
	    var args = arguments,
	        key = resolver ? resolver.apply(this, args) : args[0],
	        cache = memoized.cache;

	    if (cache.has(key)) {
	      return cache.get(key);
	    }
	    var result = func.apply(this, args);
	    memoized.cache = cache.set(key, result) || cache;
	    return result;
	  };
	  memoized.cache = new (memoize.Cache || MapCache);
	  return memoized;
	}

	// Expose `MapCache`.
	memoize.Cache = MapCache;

	module.exports = memoize;


/***/ }),
/* 157 */
/***/ (function(module, exports, __webpack_require__) {

	var baseToString = __webpack_require__(158);

	/**
	 * Converts `value` to a string. An empty string is returned for `null`
	 * and `undefined` values. The sign of `-0` is preserved.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to convert.
	 * @returns {string} Returns the converted string.
	 * @example
	 *
	 * _.toString(null);
	 * // => ''
	 *
	 * _.toString(-0);
	 * // => '-0'
	 *
	 * _.toString([1, 2, 3]);
	 * // => '1,2,3'
	 */
	function toString(value) {
	  return value == null ? '' : baseToString(value);
	}

	module.exports = toString;


/***/ }),
/* 158 */
/***/ (function(module, exports, __webpack_require__) {

	var Symbol = __webpack_require__(30),
	    arrayMap = __webpack_require__(159),
	    isArray = __webpack_require__(67),
	    isSymbol = __webpack_require__(153);

	/** Used as references for various `Number` constants. */
	var INFINITY = 1 / 0;

	/** Used to convert symbols to primitives and strings. */
	var symbolProto = Symbol ? Symbol.prototype : undefined,
	    symbolToString = symbolProto ? symbolProto.toString : undefined;

	/**
	 * The base implementation of `_.toString` which doesn't convert nullish
	 * values to empty strings.
	 *
	 * @private
	 * @param {*} value The value to process.
	 * @returns {string} Returns the string.
	 */
	function baseToString(value) {
	  // Exit early for strings to avoid a performance hit in some environments.
	  if (typeof value == 'string') {
	    return value;
	  }
	  if (isArray(value)) {
	    // Recursively convert values (susceptible to call stack limits).
	    return arrayMap(value, baseToString) + '';
	  }
	  if (isSymbol(value)) {
	    return symbolToString ? symbolToString.call(value) : '';
	  }
	  var result = (value + '');
	  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
	}

	module.exports = baseToString;


/***/ }),
/* 159 */
/***/ (function(module, exports) {

	/**
	 * A specialized version of `_.map` for arrays without support for iteratee
	 * shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns the new mapped array.
	 */
	function arrayMap(array, iteratee) {
	  var index = -1,
	      length = array == null ? 0 : array.length,
	      result = Array(length);

	  while (++index < length) {
	    result[index] = iteratee(array[index], index, array);
	  }
	  return result;
	}

	module.exports = arrayMap;


/***/ }),
/* 160 */
/***/ (function(module, exports, __webpack_require__) {

	var isSymbol = __webpack_require__(153);

	/** Used as references for various `Number` constants. */
	var INFINITY = 1 / 0;

	/**
	 * Converts `value` to a string key if it's not a string or symbol.
	 *
	 * @private
	 * @param {*} value The value to inspect.
	 * @returns {string|symbol} Returns the key.
	 */
	function toKey(value) {
	  if (typeof value == 'string' || isSymbol(value)) {
	    return value;
	  }
	  var result = (value + '');
	  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
	}

	module.exports = toKey;


/***/ }),
/* 161 */
/***/ (function(module, exports, __webpack_require__) {

	var baseHasIn = __webpack_require__(162),
	    hasPath = __webpack_require__(163);

	/**
	 * Checks if `path` is a direct or inherited property of `object`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Object
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path to check.
	 * @returns {boolean} Returns `true` if `path` exists, else `false`.
	 * @example
	 *
	 * var object = _.create({ 'a': _.create({ 'b': 2 }) });
	 *
	 * _.hasIn(object, 'a');
	 * // => true
	 *
	 * _.hasIn(object, 'a.b');
	 * // => true
	 *
	 * _.hasIn(object, ['a', 'b']);
	 * // => true
	 *
	 * _.hasIn(object, 'b');
	 * // => false
	 */
	function hasIn(object, path) {
	  return object != null && hasPath(object, path, baseHasIn);
	}

	module.exports = hasIn;


/***/ }),
/* 162 */
/***/ (function(module, exports) {

	/**
	 * The base implementation of `_.hasIn` without support for deep paths.
	 *
	 * @private
	 * @param {Object} [object] The object to query.
	 * @param {Array|string} key The key to check.
	 * @returns {boolean} Returns `true` if `key` exists, else `false`.
	 */
	function baseHasIn(object, key) {
	  return object != null && key in Object(object);
	}

	module.exports = baseHasIn;


/***/ }),
/* 163 */
/***/ (function(module, exports, __webpack_require__) {

	var castPath = __webpack_require__(151),
	    isArguments = __webpack_require__(64),
	    isArray = __webpack_require__(67),
	    isIndex = __webpack_require__(71),
	    isLength = __webpack_require__(74),
	    toKey = __webpack_require__(160);

	/**
	 * Checks if `path` exists on `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path to check.
	 * @param {Function} hasFunc The function to check properties.
	 * @returns {boolean} Returns `true` if `path` exists, else `false`.
	 */
	function hasPath(object, path, hasFunc) {
	  path = castPath(path, object);

	  var index = -1,
	      length = path.length,
	      result = false;

	  while (++index < length) {
	    var key = toKey(path[index]);
	    if (!(result = object != null && hasFunc(object, key))) {
	      break;
	    }
	    object = object[key];
	  }
	  if (result || ++index != length) {
	    return result;
	  }
	  length = object == null ? 0 : object.length;
	  return !!length && isLength(length) && isIndex(key, length) &&
	    (isArray(object) || isArguments(object));
	}

	module.exports = hasPath;


/***/ }),
/* 164 */
/***/ (function(module, exports, __webpack_require__) {

	var baseProperty = __webpack_require__(165),
	    basePropertyDeep = __webpack_require__(166),
	    isKey = __webpack_require__(152),
	    toKey = __webpack_require__(160);

	/**
	 * Creates a function that returns the value at `path` of a given object.
	 *
	 * @static
	 * @memberOf _
	 * @since 2.4.0
	 * @category Util
	 * @param {Array|string} path The path of the property to get.
	 * @returns {Function} Returns the new accessor function.
	 * @example
	 *
	 * var objects = [
	 *   { 'a': { 'b': 2 } },
	 *   { 'a': { 'b': 1 } }
	 * ];
	 *
	 * _.map(objects, _.property('a.b'));
	 * // => [2, 1]
	 *
	 * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
	 * // => [1, 2]
	 */
	function property(path) {
	  return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
	}

	module.exports = property;


/***/ }),
/* 165 */
/***/ (function(module, exports) {

	/**
	 * The base implementation of `_.property` without support for deep paths.
	 *
	 * @private
	 * @param {string} key The key of the property to get.
	 * @returns {Function} Returns the new accessor function.
	 */
	function baseProperty(key) {
	  return function(object) {
	    return object == null ? undefined : object[key];
	  };
	}

	module.exports = baseProperty;


/***/ }),
/* 166 */
/***/ (function(module, exports, __webpack_require__) {

	var baseGet = __webpack_require__(150);

	/**
	 * A specialized version of `baseProperty` which supports deep paths.
	 *
	 * @private
	 * @param {Array|string} path The path of the property to get.
	 * @returns {Function} Returns the new accessor function.
	 */
	function basePropertyDeep(path) {
	  return function(object) {
	    return baseGet(object, path);
	  };
	}

	module.exports = basePropertyDeep;


/***/ }),
/* 167 */
/***/ (function(module, exports, __webpack_require__) {

	var baseHas = __webpack_require__(168),
	    hasPath = __webpack_require__(163);

	/**
	 * Checks if `path` is a direct property of `object`.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path to check.
	 * @returns {boolean} Returns `true` if `path` exists, else `false`.
	 * @example
	 *
	 * var object = { 'a': { 'b': 2 } };
	 * var other = _.create({ 'a': _.create({ 'b': 2 }) });
	 *
	 * _.has(object, 'a');
	 * // => true
	 *
	 * _.has(object, 'a.b');
	 * // => true
	 *
	 * _.has(object, ['a', 'b']);
	 * // => true
	 *
	 * _.has(other, 'a');
	 * // => false
	 */
	function has(object, path) {
	  return object != null && hasPath(object, path, baseHas);
	}

	module.exports = has;


/***/ }),
/* 168 */
/***/ (function(module, exports) {

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * The base implementation of `_.has` without support for deep paths.
	 *
	 * @private
	 * @param {Object} [object] The object to query.
	 * @param {Array|string} key The key to check.
	 * @returns {boolean} Returns `true` if `key` exists, else `false`.
	 */
	function baseHas(object, key) {
	  return object != null && hasOwnProperty.call(object, key);
	}

	module.exports = baseHas;


/***/ }),
/* 169 */
/***/ (function(module, exports, __webpack_require__) {

	var baseKeys = __webpack_require__(77),
	    getTag = __webpack_require__(99),
	    isArguments = __webpack_require__(64),
	    isArray = __webpack_require__(67),
	    isArrayLike = __webpack_require__(81),
	    isBuffer = __webpack_require__(68),
	    isPrototype = __webpack_require__(78),
	    isTypedArray = __webpack_require__(72);

	/** `Object#toString` result references. */
	var mapTag = '[object Map]',
	    setTag = '[object Set]';

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Checks if `value` is an empty object, collection, map, or set.
	 *
	 * Objects are considered empty if they have no own enumerable string keyed
	 * properties.
	 *
	 * Array-like values such as `arguments` objects, arrays, buffers, strings, or
	 * jQuery-like collections are considered empty if they have a `length` of `0`.
	 * Similarly, maps and sets are considered empty if they have a `size` of `0`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is empty, else `false`.
	 * @example
	 *
	 * _.isEmpty(null);
	 * // => true
	 *
	 * _.isEmpty(true);
	 * // => true
	 *
	 * _.isEmpty(1);
	 * // => true
	 *
	 * _.isEmpty([1, 2, 3]);
	 * // => false
	 *
	 * _.isEmpty({ 'a': 1 });
	 * // => false
	 */
	function isEmpty(value) {
	  if (value == null) {
	    return true;
	  }
	  if (isArrayLike(value) &&
	      (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||
	        isBuffer(value) || isTypedArray(value) || isArguments(value))) {
	    return !value.length;
	  }
	  var tag = getTag(value);
	  if (tag == mapTag || tag == setTag) {
	    return !value.size;
	  }
	  if (isPrototype(value)) {
	    return !baseKeys(value).length;
	  }
	  for (var key in value) {
	    if (hasOwnProperty.call(value, key)) {
	      return false;
	    }
	  }
	  return true;
	}

	module.exports = isEmpty;


/***/ }),
/* 170 */
/***/ (function(module, exports) {

	/**
	 * Checks if `value` is `undefined`.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
	 * @example
	 *
	 * _.isUndefined(void 0);
	 * // => true
	 *
	 * _.isUndefined(null);
	 * // => false
	 */
	function isUndefined(value) {
	  return value === undefined;
	}

	module.exports = isUndefined;


/***/ }),
/* 171 */
/***/ (function(module, exports, __webpack_require__) {

	var arrayMap = __webpack_require__(159),
	    baseIteratee = __webpack_require__(130),
	    baseMap = __webpack_require__(172),
	    isArray = __webpack_require__(67);

	/**
	 * Creates an array of values by running each element in `collection` thru
	 * `iteratee`. The iteratee is invoked with three arguments:
	 * (value, index|key, collection).
	 *
	 * Many lodash methods are guarded to work as iteratees for methods like
	 * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
	 *
	 * The guarded methods are:
	 * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
	 * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
	 * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
	 * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Collection
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	 * @returns {Array} Returns the new mapped array.
	 * @example
	 *
	 * function square(n) {
	 *   return n * n;
	 * }
	 *
	 * _.map([4, 8], square);
	 * // => [16, 64]
	 *
	 * _.map({ 'a': 4, 'b': 8 }, square);
	 * // => [16, 64] (iteration order is not guaranteed)
	 *
	 * var users = [
	 *   { 'user': 'barney' },
	 *   { 'user': 'fred' }
	 * ];
	 *
	 * // The `_.property` iteratee shorthand.
	 * _.map(users, 'user');
	 * // => ['barney', 'fred']
	 */
	function map(collection, iteratee) {
	  var func = isArray(collection) ? arrayMap : baseMap;
	  return func(collection, baseIteratee(iteratee, 3));
	}

	module.exports = map;


/***/ }),
/* 172 */
/***/ (function(module, exports, __webpack_require__) {

	var baseEach = __webpack_require__(121),
	    isArrayLike = __webpack_require__(81);

	/**
	 * The base implementation of `_.map` without support for iteratee shorthands.
	 *
	 * @private
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns the new mapped array.
	 */
	function baseMap(collection, iteratee) {
	  var index = -1,
	      result = isArrayLike(collection) ? Array(collection.length) : [];

	  baseEach(collection, function(value, key, collection) {
	    result[++index] = iteratee(value, key, collection);
	  });
	  return result;
	}

	module.exports = baseMap;


/***/ }),
/* 173 */
/***/ (function(module, exports, __webpack_require__) {

	var arrayReduce = __webpack_require__(174),
	    baseEach = __webpack_require__(121),
	    baseIteratee = __webpack_require__(130),
	    baseReduce = __webpack_require__(175),
	    isArray = __webpack_require__(67);

	/**
	 * Reduces `collection` to a value which is the accumulated result of running
	 * each element in `collection` thru `iteratee`, where each successive
	 * invocation is supplied the return value of the previous. If `accumulator`
	 * is not given, the first element of `collection` is used as the initial
	 * value. The iteratee is invoked with four arguments:
	 * (accumulator, value, index|key, collection).
	 *
	 * Many lodash methods are guarded to work as iteratees for methods like
	 * `_.reduce`, `_.reduceRight`, and `_.transform`.
	 *
	 * The guarded methods are:
	 * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
	 * and `sortBy`
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Collection
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	 * @param {*} [accumulator] The initial value.
	 * @returns {*} Returns the accumulated value.
	 * @see _.reduceRight
	 * @example
	 *
	 * _.reduce([1, 2], function(sum, n) {
	 *   return sum + n;
	 * }, 0);
	 * // => 3
	 *
	 * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
	 *   (result[value] || (result[value] = [])).push(key);
	 *   return result;
	 * }, {});
	 * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
	 */
	function reduce(collection, iteratee, accumulator) {
	  var func = isArray(collection) ? arrayReduce : baseReduce,
	      initAccum = arguments.length < 3;

	  return func(collection, baseIteratee(iteratee, 4), accumulator, initAccum, baseEach);
	}

	module.exports = reduce;


/***/ }),
/* 174 */
/***/ (function(module, exports) {

	/**
	 * A specialized version of `_.reduce` for arrays without support for
	 * iteratee shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @param {*} [accumulator] The initial value.
	 * @param {boolean} [initAccum] Specify using the first element of `array` as
	 *  the initial value.
	 * @returns {*} Returns the accumulated value.
	 */
	function arrayReduce(array, iteratee, accumulator, initAccum) {
	  var index = -1,
	      length = array == null ? 0 : array.length;

	  if (initAccum && length) {
	    accumulator = array[++index];
	  }
	  while (++index < length) {
	    accumulator = iteratee(accumulator, array[index], index, array);
	  }
	  return accumulator;
	}

	module.exports = arrayReduce;


/***/ }),
/* 175 */
/***/ (function(module, exports) {

	/**
	 * The base implementation of `_.reduce` and `_.reduceRight`, without support
	 * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
	 *
	 * @private
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @param {*} accumulator The initial value.
	 * @param {boolean} initAccum Specify using the first or last element of
	 *  `collection` as the initial value.
	 * @param {Function} eachFunc The function to iterate over `collection`.
	 * @returns {*} Returns the accumulated value.
	 */
	function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
	  eachFunc(collection, function(value, index, collection) {
	    accumulator = initAccum
	      ? (initAccum = false, value)
	      : iteratee(accumulator, value, index, collection);
	  });
	  return accumulator;
	}

	module.exports = baseReduce;


/***/ }),
/* 176 */
/***/ (function(module, exports, __webpack_require__) {

	var baseKeys = __webpack_require__(77),
	    getTag = __webpack_require__(99),
	    isArrayLike = __webpack_require__(81),
	    isString = __webpack_require__(177),
	    stringSize = __webpack_require__(178);

	/** `Object#toString` result references. */
	var mapTag = '[object Map]',
	    setTag = '[object Set]';

	/**
	 * Gets the size of `collection` by returning its length for array-like
	 * values or the number of own enumerable string keyed properties for objects.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Collection
	 * @param {Array|Object|string} collection The collection to inspect.
	 * @returns {number} Returns the collection size.
	 * @example
	 *
	 * _.size([1, 2, 3]);
	 * // => 3
	 *
	 * _.size({ 'a': 1, 'b': 2 });
	 * // => 2
	 *
	 * _.size('pebbles');
	 * // => 7
	 */
	function size(collection) {
	  if (collection == null) {
	    return 0;
	  }
	  if (isArrayLike(collection)) {
	    return isString(collection) ? stringSize(collection) : collection.length;
	  }
	  var tag = getTag(collection);
	  if (tag == mapTag || tag == setTag) {
	    return collection.size;
	  }
	  return baseKeys(collection).length;
	}

	module.exports = size;


/***/ }),
/* 177 */
/***/ (function(module, exports, __webpack_require__) {

	var baseGetTag = __webpack_require__(29),
	    isArray = __webpack_require__(67),
	    isObjectLike = __webpack_require__(66);

	/** `Object#toString` result references. */
	var stringTag = '[object String]';

	/**
	 * Checks if `value` is classified as a `String` primitive or object.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a string, else `false`.
	 * @example
	 *
	 * _.isString('abc');
	 * // => true
	 *
	 * _.isString(1);
	 * // => false
	 */
	function isString(value) {
	  return typeof value == 'string' ||
	    (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);
	}

	module.exports = isString;


/***/ }),
/* 178 */
/***/ (function(module, exports, __webpack_require__) {

	var asciiSize = __webpack_require__(179),
	    hasUnicode = __webpack_require__(180),
	    unicodeSize = __webpack_require__(181);

	/**
	 * Gets the number of symbols in `string`.
	 *
	 * @private
	 * @param {string} string The string to inspect.
	 * @returns {number} Returns the string size.
	 */
	function stringSize(string) {
	  return hasUnicode(string)
	    ? unicodeSize(string)
	    : asciiSize(string);
	}

	module.exports = stringSize;


/***/ }),
/* 179 */
/***/ (function(module, exports, __webpack_require__) {

	var baseProperty = __webpack_require__(165);

	/**
	 * Gets the size of an ASCII `string`.
	 *
	 * @private
	 * @param {string} string The string inspect.
	 * @returns {number} Returns the string size.
	 */
	var asciiSize = baseProperty('length');

	module.exports = asciiSize;


/***/ }),
/* 180 */
/***/ (function(module, exports) {

	/** Used to compose unicode character classes. */
	var rsAstralRange = '\\ud800-\\udfff',
	    rsComboMarksRange = '\\u0300-\\u036f',
	    reComboHalfMarksRange = '\\ufe20-\\ufe2f',
	    rsComboSymbolsRange = '\\u20d0-\\u20ff',
	    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
	    rsVarRange = '\\ufe0e\\ufe0f';

	/** Used to compose unicode capture groups. */
	var rsZWJ = '\\u200d';

	/** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
	var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');

	/**
	 * Checks if `string` contains Unicode symbols.
	 *
	 * @private
	 * @param {string} string The string to inspect.
	 * @returns {boolean} Returns `true` if a symbol is found, else `false`.
	 */
	function hasUnicode(string) {
	  return reHasUnicode.test(string);
	}

	module.exports = hasUnicode;


/***/ }),
/* 181 */
/***/ (function(module, exports) {

	/** Used to compose unicode character classes. */
	var rsAstralRange = '\\ud800-\\udfff',
	    rsComboMarksRange = '\\u0300-\\u036f',
	    reComboHalfMarksRange = '\\ufe20-\\ufe2f',
	    rsComboSymbolsRange = '\\u20d0-\\u20ff',
	    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
	    rsVarRange = '\\ufe0e\\ufe0f';

	/** Used to compose unicode capture groups. */
	var rsAstral = '[' + rsAstralRange + ']',
	    rsCombo = '[' + rsComboRange + ']',
	    rsFitz = '\\ud83c[\\udffb-\\udfff]',
	    rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
	    rsNonAstral = '[^' + rsAstralRange + ']',
	    rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
	    rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
	    rsZWJ = '\\u200d';

	/** Used to compose unicode regexes. */
	var reOptMod = rsModifier + '?',
	    rsOptVar = '[' + rsVarRange + ']?',
	    rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
	    rsSeq = rsOptVar + reOptMod + rsOptJoin,
	    rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

	/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
	var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

	/**
	 * Gets the size of a Unicode `string`.
	 *
	 * @private
	 * @param {string} string The string inspect.
	 * @returns {number} Returns the string size.
	 */
	function unicodeSize(string) {
	  var result = reUnicode.lastIndex = 0;
	  while (reUnicode.test(string)) {
	    ++result;
	  }
	  return result;
	}

	module.exports = unicodeSize;


/***/ }),
/* 182 */
/***/ (function(module, exports, __webpack_require__) {

	var arrayEach = __webpack_require__(55),
	    baseCreate = __webpack_require__(113),
	    baseForOwn = __webpack_require__(122),
	    baseIteratee = __webpack_require__(130),
	    getPrototype = __webpack_require__(95),
	    isArray = __webpack_require__(67),
	    isBuffer = __webpack_require__(68),
	    isFunction = __webpack_require__(28),
	    isObject = __webpack_require__(35),
	    isTypedArray = __webpack_require__(72);

	/**
	 * An alternative to `_.reduce`; this method transforms `object` to a new
	 * `accumulator` object which is the result of running each of its own
	 * enumerable string keyed properties thru `iteratee`, with each invocation
	 * potentially mutating the `accumulator` object. If `accumulator` is not
	 * provided, a new object with the same `[[Prototype]]` will be used. The
	 * iteratee is invoked with four arguments: (accumulator, value, key, object).
	 * Iteratee functions may exit iteration early by explicitly returning `false`.
	 *
	 * @static
	 * @memberOf _
	 * @since 1.3.0
	 * @category Object
	 * @param {Object} object The object to iterate over.
	 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	 * @param {*} [accumulator] The custom accumulator value.
	 * @returns {*} Returns the accumulated value.
	 * @example
	 *
	 * _.transform([2, 3, 4], function(result, n) {
	 *   result.push(n *= n);
	 *   return n % 2 == 0;
	 * }, []);
	 * // => [4, 9]
	 *
	 * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
	 *   (result[value] || (result[value] = [])).push(key);
	 * }, {});
	 * // => { '1': ['a', 'c'], '2': ['b'] }
	 */
	function transform(object, iteratee, accumulator) {
	  var isArr = isArray(object),
	      isArrLike = isArr || isBuffer(object) || isTypedArray(object);

	  iteratee = baseIteratee(iteratee, 4);
	  if (accumulator == null) {
	    var Ctor = object && object.constructor;
	    if (isArrLike) {
	      accumulator = isArr ? new Ctor : [];
	    }
	    else if (isObject(object)) {
	      accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
	    }
	    else {
	      accumulator = {};
	    }
	  }
	  (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {
	    return iteratee(accumulator, value, index, object);
	  });
	  return accumulator;
	}

	module.exports = transform;


/***/ }),
/* 183 */
/***/ (function(module, exports, __webpack_require__) {

	var baseFlatten = __webpack_require__(184),
	    baseRest = __webpack_require__(186),
	    baseUniq = __webpack_require__(192),
	    isArrayLikeObject = __webpack_require__(201);

	/**
	 * Creates an array of unique values, in order, from all given arrays using
	 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	 * for equality comparisons.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Array
	 * @param {...Array} [arrays] The arrays to inspect.
	 * @returns {Array} Returns the new array of combined values.
	 * @example
	 *
	 * _.union([2], [1, 2]);
	 * // => [2, 1]
	 */
	var union = baseRest(function(arrays) {
	  return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
	});

	module.exports = union;


/***/ }),
/* 184 */
/***/ (function(module, exports, __webpack_require__) {

	var arrayPush = __webpack_require__(94),
	    isFlattenable = __webpack_require__(185);

	/**
	 * The base implementation of `_.flatten` with support for restricting flattening.
	 *
	 * @private
	 * @param {Array} array The array to flatten.
	 * @param {number} depth The maximum recursion depth.
	 * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
	 * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
	 * @param {Array} [result=[]] The initial result value.
	 * @returns {Array} Returns the new flattened array.
	 */
	function baseFlatten(array, depth, predicate, isStrict, result) {
	  var index = -1,
	      length = array.length;

	  predicate || (predicate = isFlattenable);
	  result || (result = []);

	  while (++index < length) {
	    var value = array[index];
	    if (depth > 0 && predicate(value)) {
	      if (depth > 1) {
	        // Recursively flatten arrays (susceptible to call stack limits).
	        baseFlatten(value, depth - 1, predicate, isStrict, result);
	      } else {
	        arrayPush(result, value);
	      }
	    } else if (!isStrict) {
	      result[result.length] = value;
	    }
	  }
	  return result;
	}

	module.exports = baseFlatten;


/***/ }),
/* 185 */
/***/ (function(module, exports, __webpack_require__) {

	var Symbol = __webpack_require__(30),
	    isArguments = __webpack_require__(64),
	    isArray = __webpack_require__(67);

	/** Built-in value references. */
	var spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined;

	/**
	 * Checks if `value` is a flattenable `arguments` object or array.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
	 */
	function isFlattenable(value) {
	  return isArray(value) || isArguments(value) ||
	    !!(spreadableSymbol && value && value[spreadableSymbol]);
	}

	module.exports = isFlattenable;


/***/ }),
/* 186 */
/***/ (function(module, exports, __webpack_require__) {

	var identity = __webpack_require__(127),
	    overRest = __webpack_require__(187),
	    setToString = __webpack_require__(189);

	/**
	 * The base implementation of `_.rest` which doesn't validate or coerce arguments.
	 *
	 * @private
	 * @param {Function} func The function to apply a rest parameter to.
	 * @param {number} [start=func.length-1] The start position of the rest parameter.
	 * @returns {Function} Returns the new function.
	 */
	function baseRest(func, start) {
	  return setToString(overRest(func, start, identity), func + '');
	}

	module.exports = baseRest;


/***/ }),
/* 187 */
/***/ (function(module, exports, __webpack_require__) {

	var apply = __webpack_require__(188);

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeMax = Math.max;

	/**
	 * A specialized version of `baseRest` which transforms the rest array.
	 *
	 * @private
	 * @param {Function} func The function to apply a rest parameter to.
	 * @param {number} [start=func.length-1] The start position of the rest parameter.
	 * @param {Function} transform The rest array transform.
	 * @returns {Function} Returns the new function.
	 */
	function overRest(func, start, transform) {
	  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
	  return function() {
	    var args = arguments,
	        index = -1,
	        length = nativeMax(args.length - start, 0),
	        array = Array(length);

	    while (++index < length) {
	      array[index] = args[start + index];
	    }
	    index = -1;
	    var otherArgs = Array(start + 1);
	    while (++index < start) {
	      otherArgs[index] = args[index];
	    }
	    otherArgs[start] = transform(array);
	    return apply(func, this, otherArgs);
	  };
	}

	module.exports = overRest;


/***/ }),
/* 188 */
/***/ (function(module, exports) {

	/**
	 * A faster alternative to `Function#apply`, this function invokes `func`
	 * with the `this` binding of `thisArg` and the arguments of `args`.
	 *
	 * @private
	 * @param {Function} func The function to invoke.
	 * @param {*} thisArg The `this` binding of `func`.
	 * @param {Array} args The arguments to invoke `func` with.
	 * @returns {*} Returns the result of `func`.
	 */
	function apply(func, thisArg, args) {
	  switch (args.length) {
	    case 0: return func.call(thisArg);
	    case 1: return func.call(thisArg, args[0]);
	    case 2: return func.call(thisArg, args[0], args[1]);
	    case 3: return func.call(thisArg, args[0], args[1], args[2]);
	  }
	  return func.apply(thisArg, args);
	}

	module.exports = apply;


/***/ }),
/* 189 */
/***/ (function(module, exports, __webpack_require__) {

	var baseSetToString = __webpack_require__(190),
	    shortOut = __webpack_require__(191);

	/**
	 * Sets the `toString` method of `func` to return `string`.
	 *
	 * @private
	 * @param {Function} func The function to modify.
	 * @param {Function} string The `toString` result.
	 * @returns {Function} Returns `func`.
	 */
	var setToString = shortOut(baseSetToString);

	module.exports = setToString;


/***/ }),
/* 190 */
/***/ (function(module, exports, __webpack_require__) {

	var constant = __webpack_require__(118),
	    defineProperty = __webpack_require__(58),
	    identity = __webpack_require__(127);

	/**
	 * The base implementation of `setToString` without support for hot loop shorting.
	 *
	 * @private
	 * @param {Function} func The function to modify.
	 * @param {Function} string The `toString` result.
	 * @returns {Function} Returns `func`.
	 */
	var baseSetToString = !defineProperty ? identity : function(func, string) {
	  return defineProperty(func, 'toString', {
	    'configurable': true,
	    'enumerable': false,
	    'value': constant(string),
	    'writable': true
	  });
	};

	module.exports = baseSetToString;


/***/ }),
/* 191 */
/***/ (function(module, exports) {

	/** Used to detect hot functions by number of calls within a span of milliseconds. */
	var HOT_COUNT = 800,
	    HOT_SPAN = 16;

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeNow = Date.now;

	/**
	 * Creates a function that'll short out and invoke `identity` instead
	 * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
	 * milliseconds.
	 *
	 * @private
	 * @param {Function} func The function to restrict.
	 * @returns {Function} Returns the new shortable function.
	 */
	function shortOut(func) {
	  var count = 0,
	      lastCalled = 0;

	  return function() {
	    var stamp = nativeNow(),
	        remaining = HOT_SPAN - (stamp - lastCalled);

	    lastCalled = stamp;
	    if (remaining > 0) {
	      if (++count >= HOT_COUNT) {
	        return arguments[0];
	      }
	    } else {
	      count = 0;
	    }
	    return func.apply(undefined, arguments);
	  };
	}

	module.exports = shortOut;


/***/ }),
/* 192 */
/***/ (function(module, exports, __webpack_require__) {

	var SetCache = __webpack_require__(136),
	    arrayIncludes = __webpack_require__(193),
	    arrayIncludesWith = __webpack_require__(198),
	    cacheHas = __webpack_require__(140),
	    createSet = __webpack_require__(199),
	    setToArray = __webpack_require__(143);

	/** Used as the size to enable large array optimizations. */
	var LARGE_ARRAY_SIZE = 200;

	/**
	 * The base implementation of `_.uniqBy` without support for iteratee shorthands.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {Function} [iteratee] The iteratee invoked per element.
	 * @param {Function} [comparator] The comparator invoked per element.
	 * @returns {Array} Returns the new duplicate free array.
	 */
	function baseUniq(array, iteratee, comparator) {
	  var index = -1,
	      includes = arrayIncludes,
	      length = array.length,
	      isCommon = true,
	      result = [],
	      seen = result;

	  if (comparator) {
	    isCommon = false;
	    includes = arrayIncludesWith;
	  }
	  else if (length >= LARGE_ARRAY_SIZE) {
	    var set = iteratee ? null : createSet(array);
	    if (set) {
	      return setToArray(set);
	    }
	    isCommon = false;
	    includes = cacheHas;
	    seen = new SetCache;
	  }
	  else {
	    seen = iteratee ? [] : result;
	  }
	  outer:
	  while (++index < length) {
	    var value = array[index],
	        computed = iteratee ? iteratee(value) : value;

	    value = (comparator || value !== 0) ? value : 0;
	    if (isCommon && computed === computed) {
	      var seenIndex = seen.length;
	      while (seenIndex--) {
	        if (seen[seenIndex] === computed) {
	          continue outer;
	        }
	      }
	      if (iteratee) {
	        seen.push(computed);
	      }
	      result.push(value);
	    }
	    else if (!includes(seen, computed, comparator)) {
	      if (seen !== result) {
	        seen.push(computed);
	      }
	      result.push(value);
	    }
	  }
	  return result;
	}

	module.exports = baseUniq;


/***/ }),
/* 193 */
/***/ (function(module, exports, __webpack_require__) {

	var baseIndexOf = __webpack_require__(194);

	/**
	 * A specialized version of `_.includes` for arrays without support for
	 * specifying an index to search from.
	 *
	 * @private
	 * @param {Array} [array] The array to inspect.
	 * @param {*} target The value to search for.
	 * @returns {boolean} Returns `true` if `target` is found, else `false`.
	 */
	function arrayIncludes(array, value) {
	  var length = array == null ? 0 : array.length;
	  return !!length && baseIndexOf(array, value, 0) > -1;
	}

	module.exports = arrayIncludes;


/***/ }),
/* 194 */
/***/ (function(module, exports, __webpack_require__) {

	var baseFindIndex = __webpack_require__(195),
	    baseIsNaN = __webpack_require__(196),
	    strictIndexOf = __webpack_require__(197);

	/**
	 * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {*} value The value to search for.
	 * @param {number} fromIndex The index to search from.
	 * @returns {number} Returns the index of the matched value, else `-1`.
	 */
	function baseIndexOf(array, value, fromIndex) {
	  return value === value
	    ? strictIndexOf(array, value, fromIndex)
	    : baseFindIndex(array, baseIsNaN, fromIndex);
	}

	module.exports = baseIndexOf;


/***/ }),
/* 195 */
/***/ (function(module, exports) {

	/**
	 * The base implementation of `_.findIndex` and `_.findLastIndex` without
	 * support for iteratee shorthands.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {Function} predicate The function invoked per iteration.
	 * @param {number} fromIndex The index to search from.
	 * @param {boolean} [fromRight] Specify iterating from right to left.
	 * @returns {number} Returns the index of the matched value, else `-1`.
	 */
	function baseFindIndex(array, predicate, fromIndex, fromRight) {
	  var length = array.length,
	      index = fromIndex + (fromRight ? 1 : -1);

	  while ((fromRight ? index-- : ++index < length)) {
	    if (predicate(array[index], index, array)) {
	      return index;
	    }
	  }
	  return -1;
	}

	module.exports = baseFindIndex;


/***/ }),
/* 196 */
/***/ (function(module, exports) {

	/**
	 * The base implementation of `_.isNaN` without support for number objects.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
	 */
	function baseIsNaN(value) {
	  return value !== value;
	}

	module.exports = baseIsNaN;


/***/ }),
/* 197 */
/***/ (function(module, exports) {

	/**
	 * A specialized version of `_.indexOf` which performs strict equality
	 * comparisons of values, i.e. `===`.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {*} value The value to search for.
	 * @param {number} fromIndex The index to search from.
	 * @returns {number} Returns the index of the matched value, else `-1`.
	 */
	function strictIndexOf(array, value, fromIndex) {
	  var index = fromIndex - 1,
	      length = array.length;

	  while (++index < length) {
	    if (array[index] === value) {
	      return index;
	    }
	  }
	  return -1;
	}

	module.exports = strictIndexOf;


/***/ }),
/* 198 */
/***/ (function(module, exports) {

	/**
	 * This function is like `arrayIncludes` except that it accepts a comparator.
	 *
	 * @private
	 * @param {Array} [array] The array to inspect.
	 * @param {*} target The value to search for.
	 * @param {Function} comparator The comparator invoked per element.
	 * @returns {boolean} Returns `true` if `target` is found, else `false`.
	 */
	function arrayIncludesWith(array, value, comparator) {
	  var index = -1,
	      length = array == null ? 0 : array.length;

	  while (++index < length) {
	    if (comparator(value, array[index])) {
	      return true;
	    }
	  }
	  return false;
	}

	module.exports = arrayIncludesWith;


/***/ }),
/* 199 */
/***/ (function(module, exports, __webpack_require__) {

	var Set = __webpack_require__(102),
	    noop = __webpack_require__(200),
	    setToArray = __webpack_require__(143);

	/** Used as references for various `Number` constants. */
	var INFINITY = 1 / 0;

	/**
	 * Creates a set object of `values`.
	 *
	 * @private
	 * @param {Array} values The values to add to the set.
	 * @returns {Object} Returns the new set.
	 */
	var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {
	  return new Set(values);
	};

	module.exports = createSet;


/***/ }),
/* 200 */
/***/ (function(module, exports) {

	/**
	 * This method returns `undefined`.
	 *
	 * @static
	 * @memberOf _
	 * @since 2.3.0
	 * @category Util
	 * @example
	 *
	 * _.times(2, _.noop);
	 * // => [undefined, undefined]
	 */
	function noop() {
	  // No operation performed.
	}

	module.exports = noop;


/***/ }),
/* 201 */
/***/ (function(module, exports, __webpack_require__) {

	var isArrayLike = __webpack_require__(81),
	    isObjectLike = __webpack_require__(66);

	/**
	 * This method is like `_.isArrayLike` except that it also checks if `value`
	 * is an object.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an array-like object,
	 *  else `false`.
	 * @example
	 *
	 * _.isArrayLikeObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isArrayLikeObject(document.body.children);
	 * // => true
	 *
	 * _.isArrayLikeObject('abc');
	 * // => false
	 *
	 * _.isArrayLikeObject(_.noop);
	 * // => false
	 */
	function isArrayLikeObject(value) {
	  return isObjectLike(value) && isArrayLike(value);
	}

	module.exports = isArrayLikeObject;


/***/ }),
/* 202 */
/***/ (function(module, exports, __webpack_require__) {

	var baseValues = __webpack_require__(203),
	    keys = __webpack_require__(61);

	/**
	 * Creates an array of the own enumerable string keyed property values of `object`.
	 *
	 * **Note:** Non-object values are coerced to objects.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property values.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.values(new Foo);
	 * // => [1, 2] (iteration order is not guaranteed)
	 *
	 * _.values('hi');
	 * // => ['h', 'i']
	 */
	function values(object) {
	  return object == null ? [] : baseValues(object, keys(object));
	}

	module.exports = values;


/***/ }),
/* 203 */
/***/ (function(module, exports, __webpack_require__) {

	var arrayMap = __webpack_require__(159);

	/**
	 * The base implementation of `_.values` and `_.valuesIn` which creates an
	 * array of `object` property values corresponding to the property names
	 * of `props`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Array} props The property names to get values for.
	 * @returns {Object} Returns the array of property values.
	 */
	function baseValues(object, props) {
	  return arrayMap(props, function(key) {
	    return object[key];
	  });
	}

	module.exports = baseValues;


/***/ }),
/* 204 */
/***/ (function(module, exports) {

	module.exports = '2.1.8';


/***/ }),
/* 205 */
/***/ (function(module, exports, __webpack_require__) {

	var _ = __webpack_require__(8);
	var Graph = __webpack_require__(7);

	module.exports = {
	  write: write,
	  read: read
	};

	function write(g) {
	  var json = {
	    options: {
	      directed: g.isDirected(),
	      multigraph: g.isMultigraph(),
	      compound: g.isCompound()
	    },
	    nodes: writeNodes(g),
	    edges: writeEdges(g)
	  };
	  if (!_.isUndefined(g.graph())) {
	    json.value = _.clone(g.graph());
	  }
	  return json;
	}

	function writeNodes(g) {
	  return _.map(g.nodes(), function(v) {
	    var nodeValue = g.node(v);
	    var parent = g.parent(v);
	    var node = { v: v };
	    if (!_.isUndefined(nodeValue)) {
	      node.value = nodeValue;
	    }
	    if (!_.isUndefined(parent)) {
	      node.parent = parent;
	    }
	    return node;
	  });
	}

	function writeEdges(g) {
	  return _.map(g.edges(), function(e) {
	    var edgeValue = g.edge(e);
	    var edge = { v: e.v, w: e.w };
	    if (!_.isUndefined(e.name)) {
	      edge.name = e.name;
	    }
	    if (!_.isUndefined(edgeValue)) {
	      edge.value = edgeValue;
	    }
	    return edge;
	  });
	}

	function read(json) {
	  var g = new Graph(json.options).setGraph(json.value);
	  _.each(json.nodes, function(entry) {
	    g.setNode(entry.v, entry.value);
	    if (entry.parent) {
	      g.setParent(entry.v, entry.parent);
	    }
	  });
	  _.each(json.edges, function(entry) {
	    g.setEdge({ v: entry.v, w: entry.w, name: entry.name }, entry.value);
	  });
	  return g;
	}


/***/ }),
/* 206 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = {
	  components: __webpack_require__(207),
	  dijkstra: __webpack_require__(208),
	  dijkstraAll: __webpack_require__(210),
	  findCycles: __webpack_require__(211),
	  floydWarshall: __webpack_require__(213),
	  isAcyclic: __webpack_require__(214),
	  postorder: __webpack_require__(216),
	  preorder: __webpack_require__(218),
	  prim: __webpack_require__(219),
	  tarjan: __webpack_require__(212),
	  topsort: __webpack_require__(215)
	};


/***/ }),
/* 207 */
/***/ (function(module, exports, __webpack_require__) {

	var _ = __webpack_require__(8);

	module.exports = components;

	function components(g) {
	  var visited = {};
	  var cmpts = [];
	  var cmpt;

	  function dfs(v) {
	    if (_.has(visited, v)) return;
	    visited[v] = true;
	    cmpt.push(v);
	    _.each(g.successors(v), dfs);
	    _.each(g.predecessors(v), dfs);
	  }

	  _.each(g.nodes(), function(v) {
	    cmpt = [];
	    dfs(v);
	    if (cmpt.length) {
	      cmpts.push(cmpt);
	    }
	  });

	  return cmpts;
	}


/***/ }),
/* 208 */
/***/ (function(module, exports, __webpack_require__) {

	var _ = __webpack_require__(8);
	var PriorityQueue = __webpack_require__(209);

	module.exports = dijkstra;

	var DEFAULT_WEIGHT_FUNC = _.constant(1);

	function dijkstra(g, source, weightFn, edgeFn) {
	  return runDijkstra(g, String(source),
	    weightFn || DEFAULT_WEIGHT_FUNC,
	    edgeFn || function(v) { return g.outEdges(v); });
	}

	function runDijkstra(g, source, weightFn, edgeFn) {
	  var results = {};
	  var pq = new PriorityQueue();
	  var v, vEntry;

	  var updateNeighbors = function(edge) {
	    var w = edge.v !== v ? edge.v : edge.w;
	    var wEntry = results[w];
	    var weight = weightFn(edge);
	    var distance = vEntry.distance + weight;

	    if (weight < 0) {
	      throw new Error("dijkstra does not allow negative edge weights. " +
	                      "Bad edge: " + edge + " Weight: " + weight);
	    }

	    if (distance < wEntry.distance) {
	      wEntry.distance = distance;
	      wEntry.predecessor = v;
	      pq.decrease(w, distance);
	    }
	  };

	  g.nodes().forEach(function(v) {
	    var distance = v === source ? 0 : Number.POSITIVE_INFINITY;
	    results[v] = { distance: distance };
	    pq.add(v, distance);
	  });

	  while (pq.size() > 0) {
	    v = pq.removeMin();
	    vEntry = results[v];
	    if (vEntry.distance === Number.POSITIVE_INFINITY) {
	      break;
	    }

	    edgeFn(v).forEach(updateNeighbors);
	  }

	  return results;
	}


/***/ }),
/* 209 */
/***/ (function(module, exports, __webpack_require__) {

	var _ = __webpack_require__(8);

	module.exports = PriorityQueue;

	/**
	 * A min-priority queue data structure. This algorithm is derived from Cormen,
	 * et al., "Introduction to Algorithms". The basic idea of a min-priority
	 * queue is that you can efficiently (in O(1) time) get the smallest key in
	 * the queue. Adding and removing elements takes O(log n) time. A key can
	 * have its priority decreased in O(log n) time.
	 */
	function PriorityQueue() {
	  this._arr = [];
	  this._keyIndices = {};
	}

	/**
	 * Returns the number of elements in the queue. Takes `O(1)` time.
	 */
	PriorityQueue.prototype.size = function() {
	  return this._arr.length;
	};

	/**
	 * Returns the keys that are in the queue. Takes `O(n)` time.
	 */
	PriorityQueue.prototype.keys = function() {
	  return this._arr.map(function(x) { return x.key; });
	};

	/**
	 * Returns `true` if **key** is in the queue and `false` if not.
	 */
	PriorityQueue.prototype.has = function(key) {
	  return _.has(this._keyIndices, key);
	};

	/**
	 * Returns the priority for **key**. If **key** is not present in the queue
	 * then this function returns `undefined`. Takes `O(1)` time.
	 *
	 * @param {Object} key
	 */
	PriorityQueue.prototype.priority = function(key) {
	  var index = this._keyIndices[key];
	  if (index !== undefined) {
	    return this._arr[index].priority;
	  }
	};

	/**
	 * Returns the key for the minimum element in this queue. If the queue is
	 * empty this function throws an Error. Takes `O(1)` time.
	 */
	PriorityQueue.prototype.min = function() {
	  if (this.size() === 0) {
	    throw new Error("Queue underflow");
	  }
	  return this._arr[0].key;
	};

	/**
	 * Inserts a new key into the priority queue. If the key already exists in
	 * the queue this function returns `false`; otherwise it will return `true`.
	 * Takes `O(n)` time.
	 *
	 * @param {Object} key the key to add
	 * @param {Number} priority the initial priority for the key
	 */
	PriorityQueue.prototype.add = function(key, priority) {
	  var keyIndices = this._keyIndices;
	  key = String(key);
	  if (!_.has(keyIndices, key)) {
	    var arr = this._arr;
	    var index = arr.length;
	    keyIndices[key] = index;
	    arr.push({key: key, priority: priority});
	    this._decrease(index);
	    return true;
	  }
	  return false;
	};

	/**
	 * Removes and returns the smallest key in the queue. Takes `O(log n)` time.
	 */
	PriorityQueue.prototype.removeMin = function() {
	  this._swap(0, this._arr.length - 1);
	  var min = this._arr.pop();
	  delete this._keyIndices[min.key];
	  this._heapify(0);
	  return min.key;
	};

	/**
	 * Decreases the priority for **key** to **priority**. If the new priority is
	 * greater than the previous priority, this function will throw an Error.
	 *
	 * @param {Object} key the key for which to raise priority
	 * @param {Number} priority the new priority for the key
	 */
	PriorityQueue.prototype.decrease = function(key, priority) {
	  var index = this._keyIndices[key];
	  if (priority > this._arr[index].priority) {
	    throw new Error("New priority is greater than current priority. " +
	        "Key: " + key + " Old: " + this._arr[index].priority + " New: " + priority);
	  }
	  this._arr[index].priority = priority;
	  this._decrease(index);
	};

	PriorityQueue.prototype._heapify = function(i) {
	  var arr = this._arr;
	  var l = 2 * i;
	  var r = l + 1;
	  var largest = i;
	  if (l < arr.length) {
	    largest = arr[l].priority < arr[largest].priority ? l : largest;
	    if (r < arr.length) {
	      largest = arr[r].priority < arr[largest].priority ? r : largest;
	    }
	    if (largest !== i) {
	      this._swap(i, largest);
	      this._heapify(largest);
	    }
	  }
	};

	PriorityQueue.prototype._decrease = function(index) {
	  var arr = this._arr;
	  var priority = arr[index].priority;
	  var parent;
	  while (index !== 0) {
	    parent = index >> 1;
	    if (arr[parent].priority < priority) {
	      break;
	    }
	    this._swap(index, parent);
	    index = parent;
	  }
	};

	PriorityQueue.prototype._swap = function(i, j) {
	  var arr = this._arr;
	  var keyIndices = this._keyIndices;
	  var origArrI = arr[i];
	  var origArrJ = arr[j];
	  arr[i] = origArrJ;
	  arr[j] = origArrI;
	  keyIndices[origArrJ.key] = i;
	  keyIndices[origArrI.key] = j;
	};


/***/ }),
/* 210 */
/***/ (function(module, exports, __webpack_require__) {

	var dijkstra = __webpack_require__(208);
	var _ = __webpack_require__(8);

	module.exports = dijkstraAll;

	function dijkstraAll(g, weightFunc, edgeFunc) {
	  return _.transform(g.nodes(), function(acc, v) {
	    acc[v] = dijkstra(g, v, weightFunc, edgeFunc);
	  }, {});
	}


/***/ }),
/* 211 */
/***/ (function(module, exports, __webpack_require__) {

	var _ = __webpack_require__(8);
	var tarjan = __webpack_require__(212);

	module.exports = findCycles;

	function findCycles(g) {
	  return _.filter(tarjan(g), function(cmpt) {
	    return cmpt.length > 1 || (cmpt.length === 1 && g.hasEdge(cmpt[0], cmpt[0]));
	  });
	}


/***/ }),
/* 212 */
/***/ (function(module, exports, __webpack_require__) {

	var _ = __webpack_require__(8);

	module.exports = tarjan;

	function tarjan(g) {
	  var index = 0;
	  var stack = [];
	  var visited = {}; // node id -> { onStack, lowlink, index }
	  var results = [];

	  function dfs(v) {
	    var entry = visited[v] = {
	      onStack: true,
	      lowlink: index,
	      index: index++
	    };
	    stack.push(v);

	    g.successors(v).forEach(function(w) {
	      if (!_.has(visited, w)) {
	        dfs(w);
	        entry.lowlink = Math.min(entry.lowlink, visited[w].lowlink);
	      } else if (visited[w].onStack) {
	        entry.lowlink = Math.min(entry.lowlink, visited[w].index);
	      }
	    });

	    if (entry.lowlink === entry.index) {
	      var cmpt = [];
	      var w;
	      do {
	        w = stack.pop();
	        visited[w].onStack = false;
	        cmpt.push(w);
	      } while (v !== w);
	      results.push(cmpt);
	    }
	  }

	  g.nodes().forEach(function(v) {
	    if (!_.has(visited, v)) {
	      dfs(v);
	    }
	  });

	  return results;
	}


/***/ }),
/* 213 */
/***/ (function(module, exports, __webpack_require__) {

	var _ = __webpack_require__(8);

	module.exports = floydWarshall;

	var DEFAULT_WEIGHT_FUNC = _.constant(1);

	function floydWarshall(g, weightFn, edgeFn) {
	  return runFloydWarshall(g,
	    weightFn || DEFAULT_WEIGHT_FUNC,
	    edgeFn || function(v) { return g.outEdges(v); });
	}

	function runFloydWarshall(g, weightFn, edgeFn) {
	  var results = {};
	  var nodes = g.nodes();

	  nodes.forEach(function(v) {
	    results[v] = {};
	    results[v][v] = { distance: 0 };
	    nodes.forEach(function(w) {
	      if (v !== w) {
	        results[v][w] = { distance: Number.POSITIVE_INFINITY };
	      }
	    });
	    edgeFn(v).forEach(function(edge) {
	      var w = edge.v === v ? edge.w : edge.v;
	      var d = weightFn(edge);
	      results[v][w] = { distance: d, predecessor: v };
	    });
	  });

	  nodes.forEach(function(k) {
	    var rowK = results[k];
	    nodes.forEach(function(i) {
	      var rowI = results[i];
	      nodes.forEach(function(j) {
	        var ik = rowI[k];
	        var kj = rowK[j];
	        var ij = rowI[j];
	        var altDistance = ik.distance + kj.distance;
	        if (altDistance < ij.distance) {
	          ij.distance = altDistance;
	          ij.predecessor = kj.predecessor;
	        }
	      });
	    });
	  });

	  return results;
	}


/***/ }),
/* 214 */
/***/ (function(module, exports, __webpack_require__) {

	var topsort = __webpack_require__(215);

	module.exports = isAcyclic;

	function isAcyclic(g) {
	  try {
	    topsort(g);
	  } catch (e) {
	    if (e instanceof topsort.CycleException) {
	      return false;
	    }
	    throw e;
	  }
	  return true;
	}


/***/ }),
/* 215 */
/***/ (function(module, exports, __webpack_require__) {

	var _ = __webpack_require__(8);

	module.exports = topsort;
	topsort.CycleException = CycleException;

	function topsort(g) {
	  var visited = {};
	  var stack = {};
	  var results = [];

	  function visit(node) {
	    if (_.has(stack, node)) {
	      throw new CycleException();
	    }

	    if (!_.has(visited, node)) {
	      stack[node] = true;
	      visited[node] = true;
	      _.each(g.predecessors(node), visit);
	      delete stack[node];
	      results.push(node);
	    }
	  }

	  _.each(g.sinks(), visit);

	  if (_.size(visited) !== g.nodeCount()) {
	    throw new CycleException();
	  }

	  return results;
	}

	function CycleException() {}
	CycleException.prototype = new Error(); // must be an instance of Error to pass testing

/***/ }),
/* 216 */
/***/ (function(module, exports, __webpack_require__) {

	var dfs = __webpack_require__(217);

	module.exports = postorder;

	function postorder(g, vs) {
	  return dfs(g, vs, "post");
	}


/***/ }),
/* 217 */
/***/ (function(module, exports, __webpack_require__) {

	var _ = __webpack_require__(8);

	module.exports = dfs;

	/*
	 * A helper that preforms a pre- or post-order traversal on the input graph
	 * and returns the nodes in the order they were visited. If the graph is
	 * undirected then this algorithm will navigate using neighbors. If the graph
	 * is directed then this algorithm will navigate using successors.
	 *
	 * Order must be one of "pre" or "post".
	 */
	function dfs(g, vs, order) {
	  if (!_.isArray(vs)) {
	    vs = [vs];
	  }

	  var navigation = (g.isDirected() ? g.successors : g.neighbors).bind(g);

	  var acc = [];
	  var visited = {};
	  _.each(vs, function(v) {
	    if (!g.hasNode(v)) {
	      throw new Error("Graph does not have node: " + v);
	    }

	    doDfs(g, v, order === "post", visited, navigation, acc);
	  });
	  return acc;
	}

	function doDfs(g, v, postorder, visited, navigation, acc) {
	  if (!_.has(visited, v)) {
	    visited[v] = true;

	    if (!postorder) { acc.push(v); }
	    _.each(navigation(v), function(w) {
	      doDfs(g, w, postorder, visited, navigation, acc);
	    });
	    if (postorder) { acc.push(v); }
	  }
	}


/***/ }),
/* 218 */
/***/ (function(module, exports, __webpack_require__) {

	var dfs = __webpack_require__(217);

	module.exports = preorder;

	function preorder(g, vs) {
	  return dfs(g, vs, "pre");
	}


/***/ }),
/* 219 */
/***/ (function(module, exports, __webpack_require__) {

	var _ = __webpack_require__(8);
	var Graph = __webpack_require__(7);
	var PriorityQueue = __webpack_require__(209);

	module.exports = prim;

	function prim(g, weightFunc) {
	  var result = new Graph();
	  var parents = {};
	  var pq = new PriorityQueue();
	  var v;

	  function updateNeighbors(edge) {
	    var w = edge.v === v ? edge.w : edge.v;
	    var pri = pq.priority(w);
	    if (pri !== undefined) {
	      var edgeWeight = weightFunc(edge);
	      if (edgeWeight < pri) {
	        parents[w] = v;
	        pq.decrease(w, edgeWeight);
	      }
	    }
	  }

	  if (g.nodeCount() === 0) {
	    return result;
	  }

	  _.each(g.nodes(), function(v) {
	    pq.add(v, Number.POSITIVE_INFINITY);
	    result.setNode(v);
	  });

	  // Start from an arbitrary node
	  pq.decrease(g.nodes()[0], 0);

	  var init = false;
	  while (pq.size() > 0) {
	    v = pq.removeMin();
	    if (_.has(parents, v)) {
	      result.setEdge(v, parents[v]);
	    } else if (init) {
	      throw new Error("Input graph is not connected: " + g);
	    } else {
	      init = true;
	    }

	    g.nodeEdges(v).forEach(updateNeighbors);
	  }

	  return result;
	}


/***/ }),
/* 220 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	var _ = __webpack_require__(221);
	var acyclic = __webpack_require__(266);
	var normalize = __webpack_require__(269);
	var rank = __webpack_require__(271);
	var normalizeRanks = __webpack_require__(270).normalizeRanks;
	var parentDummyChains = __webpack_require__(275);
	var removeEmptyRanks = __webpack_require__(270).removeEmptyRanks;
	var nestingGraph = __webpack_require__(276);
	var addBorderSegments = __webpack_require__(277);
	var coordinateSystem = __webpack_require__(278);
	var order = __webpack_require__(279);
	var position = __webpack_require__(288);
	var util = __webpack_require__(270);
	var Graph = __webpack_require__(4).Graph;

	module.exports = layout;

	function layout(g, opts) {
	  var time = opts && opts.debugTiming ? util.time : util.notime;
	  time("layout", function() {
	    var layoutGraph = 
	      time("  buildLayoutGraph", function() { return buildLayoutGraph(g); });
	    time("  runLayout",        function() { runLayout(layoutGraph, time); });
	    time("  updateInputGraph", function() { updateInputGraph(g, layoutGraph); });
	  });
	}

	function runLayout(g, time) {
	  time("    makeSpaceForEdgeLabels", function() { makeSpaceForEdgeLabels(g); });
	  time("    removeSelfEdges",        function() { removeSelfEdges(g); });
	  time("    acyclic",                function() { acyclic.run(g); });
	  time("    nestingGraph.run",       function() { nestingGraph.run(g); });
	  time("    rank",                   function() { rank(util.asNonCompoundGraph(g)); });
	  time("    injectEdgeLabelProxies", function() { injectEdgeLabelProxies(g); });
	  time("    removeEmptyRanks",       function() { removeEmptyRanks(g); });
	  time("    nestingGraph.cleanup",   function() { nestingGraph.cleanup(g); });
	  time("    normalizeRanks",         function() { normalizeRanks(g); });
	  time("    assignRankMinMax",       function() { assignRankMinMax(g); });
	  time("    removeEdgeLabelProxies", function() { removeEdgeLabelProxies(g); });
	  time("    normalize.run",          function() { normalize.run(g); });
	  time("    parentDummyChains",      function() { parentDummyChains(g); });
	  time("    addBorderSegments",      function() { addBorderSegments(g); });
	  time("    order",                  function() { order(g); });
	  time("    insertSelfEdges",        function() { insertSelfEdges(g); });
	  time("    adjustCoordinateSystem", function() { coordinateSystem.adjust(g); });
	  time("    position",               function() { position(g); });
	  time("    positionSelfEdges",      function() { positionSelfEdges(g); });
	  time("    removeBorderNodes",      function() { removeBorderNodes(g); });
	  time("    normalize.undo",         function() { normalize.undo(g); });
	  time("    fixupEdgeLabelCoords",   function() { fixupEdgeLabelCoords(g); });
	  time("    undoCoordinateSystem",   function() { coordinateSystem.undo(g); });
	  time("    translateGraph",         function() { translateGraph(g); });
	  time("    assignNodeIntersects",   function() { assignNodeIntersects(g); });
	  time("    reversePoints",          function() { reversePointsForReversedEdges(g); });
	  time("    acyclic.undo",           function() { acyclic.undo(g); });
	}

	/*
	 * Copies final layout information from the layout graph back to the input
	 * graph. This process only copies whitelisted attributes from the layout graph
	 * to the input graph, so it serves as a good place to determine what
	 * attributes can influence layout.
	 */
	function updateInputGraph(inputGraph, layoutGraph) {
	  _.forEach(inputGraph.nodes(), function(v) {
	    var inputLabel = inputGraph.node(v);
	    var layoutLabel = layoutGraph.node(v);

	    if (inputLabel) {
	      inputLabel.x = layoutLabel.x;
	      inputLabel.y = layoutLabel.y;

	      if (layoutGraph.children(v).length) {
	        inputLabel.width = layoutLabel.width;
	        inputLabel.height = layoutLabel.height;
	      }
	    }
	  });

	  _.forEach(inputGraph.edges(), function(e) {
	    var inputLabel = inputGraph.edge(e);
	    var layoutLabel = layoutGraph.edge(e);

	    inputLabel.points = layoutLabel.points;
	    if (_.has(layoutLabel, "x")) {
	      inputLabel.x = layoutLabel.x;
	      inputLabel.y = layoutLabel.y;
	    }
	  });

	  inputGraph.graph().width = layoutGraph.graph().width;
	  inputGraph.graph().height = layoutGraph.graph().height;
	}

	var graphNumAttrs = ["nodesep", "edgesep", "ranksep", "marginx", "marginy"];
	var graphDefaults = { ranksep: 50, edgesep: 20, nodesep: 50, rankdir: "tb" };
	var graphAttrs = ["acyclicer", "ranker", "rankdir", "align"];
	var nodeNumAttrs = ["width", "height"];
	var nodeDefaults = { width: 0, height: 0 };
	var edgeNumAttrs = ["minlen", "weight", "width", "height", "labeloffset"];
	var edgeDefaults = {
	  minlen: 1, weight: 1, width: 0, height: 0,
	  labeloffset: 10, labelpos: "r"
	};
	var edgeAttrs = ["labelpos"];

	/*
	 * Constructs a new graph from the input graph, which can be used for layout.
	 * This process copies only whitelisted attributes from the input graph to the
	 * layout graph. Thus this function serves as a good place to determine what
	 * attributes can influence layout.
	 */
	function buildLayoutGraph(inputGraph) {
	  var g = new Graph({ multigraph: true, compound: true });
	  var graph = canonicalize(inputGraph.graph());

	  g.setGraph(_.merge({},
	    graphDefaults,
	    selectNumberAttrs(graph, graphNumAttrs),
	    _.pick(graph, graphAttrs)));

	  _.forEach(inputGraph.nodes(), function(v) {
	    var node = canonicalize(inputGraph.node(v));
	    g.setNode(v, _.defaults(selectNumberAttrs(node, nodeNumAttrs), nodeDefaults));
	    g.setParent(v, inputGraph.parent(v));
	  });

	  _.forEach(inputGraph.edges(), function(e) {
	    var edge = canonicalize(inputGraph.edge(e));
	    g.setEdge(e, _.merge({},
	      edgeDefaults,
	      selectNumberAttrs(edge, edgeNumAttrs),
	      _.pick(edge, edgeAttrs)));
	  });

	  return g;
	}

	/*
	 * This idea comes from the Gansner paper: to account for edge labels in our
	 * layout we split each rank in half by doubling minlen and halving ranksep.
	 * Then we can place labels at these mid-points between nodes.
	 *
	 * We also add some minimal padding to the width to push the label for the edge
	 * away from the edge itself a bit.
	 */
	function makeSpaceForEdgeLabels(g) {
	  var graph = g.graph();
	  graph.ranksep /= 2;
	  _.forEach(g.edges(), function(e) {
	    var edge = g.edge(e);
	    edge.minlen *= 2;
	    if (edge.labelpos.toLowerCase() !== "c") {
	      if (graph.rankdir === "TB" || graph.rankdir === "BT") {
	        edge.width += edge.labeloffset;
	      } else {
	        edge.height += edge.labeloffset;
	      }
	    }
	  });
	}

	/*
	 * Creates temporary dummy nodes that capture the rank in which each edge's
	 * label is going to, if it has one of non-zero width and height. We do this
	 * so that we can safely remove empty ranks while preserving balance for the
	 * label's position.
	 */
	function injectEdgeLabelProxies(g) {
	  _.forEach(g.edges(), function(e) {
	    var edge = g.edge(e);
	    if (edge.width && edge.height) {
	      var v = g.node(e.v);
	      var w = g.node(e.w);
	      var label = { rank: (w.rank - v.rank) / 2 + v.rank, e: e };
	      util.addDummyNode(g, "edge-proxy", label, "_ep");
	    }
	  });
	}

	function assignRankMinMax(g) {
	  var maxRank = 0;
	  _.forEach(g.nodes(), function(v) {
	    var node = g.node(v);
	    if (node.borderTop) {
	      node.minRank = g.node(node.borderTop).rank;
	      node.maxRank = g.node(node.borderBottom).rank;
	      maxRank = _.max(maxRank, node.maxRank);
	    }
	  });
	  g.graph().maxRank = maxRank;
	}

	function removeEdgeLabelProxies(g) {
	  _.forEach(g.nodes(), function(v) {
	    var node = g.node(v);
	    if (node.dummy === "edge-proxy") {
	      g.edge(node.e).labelRank = node.rank;
	      g.removeNode(v);
	    }
	  });
	}

	function translateGraph(g) {
	  var minX = Number.POSITIVE_INFINITY;
	  var maxX = 0;
	  var minY = Number.POSITIVE_INFINITY;
	  var maxY = 0;
	  var graphLabel = g.graph();
	  var marginX = graphLabel.marginx || 0;
	  var marginY = graphLabel.marginy || 0;

	  function getExtremes(attrs) {
	    var x = attrs.x;
	    var y = attrs.y;
	    var w = attrs.width;
	    var h = attrs.height;
	    minX = Math.min(minX, x - w / 2);
	    maxX = Math.max(maxX, x + w / 2);
	    minY = Math.min(minY, y - h / 2);
	    maxY = Math.max(maxY, y + h / 2);
	  }

	  _.forEach(g.nodes(), function(v) { getExtremes(g.node(v)); });
	  _.forEach(g.edges(), function(e) {
	    var edge = g.edge(e);
	    if (_.has(edge, "x")) {
	      getExtremes(edge);
	    }
	  });

	  minX -= marginX;
	  minY -= marginY;

	  _.forEach(g.nodes(), function(v) {
	    var node = g.node(v);
	    node.x -= minX;
	    node.y -= minY;
	  });

	  _.forEach(g.edges(), function(e) {
	    var edge = g.edge(e);
	    _.forEach(edge.points, function(p) {
	      p.x -= minX;
	      p.y -= minY;
	    });
	    if (_.has(edge, "x")) { edge.x -= minX; }
	    if (_.has(edge, "y")) { edge.y -= minY; }
	  });

	  graphLabel.width = maxX - minX + marginX;
	  graphLabel.height = maxY - minY + marginY;
	}

	function assignNodeIntersects(g) {
	  _.forEach(g.edges(), function(e) {
	    var edge = g.edge(e);
	    var nodeV = g.node(e.v);
	    var nodeW = g.node(e.w);
	    var p1, p2;
	    if (!edge.points) {
	      edge.points = [];
	      p1 = nodeW;
	      p2 = nodeV;
	    } else {
	      p1 = edge.points[0];
	      p2 = edge.points[edge.points.length - 1];
	    }
	    edge.points.unshift(util.intersectRect(nodeV, p1));
	    edge.points.push(util.intersectRect(nodeW, p2));
	  });
	}

	function fixupEdgeLabelCoords(g) {
	  _.forEach(g.edges(), function(e) {
	    var edge = g.edge(e);
	    if (_.has(edge, "x")) {
	      if (edge.labelpos === "l" || edge.labelpos === "r") {
	        edge.width -= edge.labeloffset;
	      }
	      switch (edge.labelpos) {
	      case "l": edge.x -= edge.width / 2 + edge.labeloffset; break;
	      case "r": edge.x += edge.width / 2 + edge.labeloffset; break;
	      }
	    }
	  });
	}

	function reversePointsForReversedEdges(g) {
	  _.forEach(g.edges(), function(e) {
	    var edge = g.edge(e);
	    if (edge.reversed) {
	      edge.points.reverse();
	    }
	  });
	}

	function removeBorderNodes(g) {
	  _.forEach(g.nodes(), function(v) {
	    if (g.children(v).length) {
	      var node = g.node(v);
	      var t = g.node(node.borderTop);
	      var b = g.node(node.borderBottom);
	      var l = g.node(_.last(node.borderLeft));
	      var r = g.node(_.last(node.borderRight));

	      node.width = Math.abs(r.x - l.x);
	      node.height = Math.abs(b.y - t.y);
	      node.x = l.x + node.width / 2;
	      node.y = t.y + node.height / 2;
	    }
	  });

	  _.forEach(g.nodes(), function(v) {
	    if (g.node(v).dummy === "border") {
	      g.removeNode(v);
	    }
	  });
	}

	function removeSelfEdges(g) {
	  _.forEach(g.edges(), function(e) {
	    if (e.v === e.w) {
	      var node = g.node(e.v);
	      if (!node.selfEdges) {
	        node.selfEdges = [];
	      }
	      node.selfEdges.push({ e: e, label: g.edge(e) });
	      g.removeEdge(e);
	    }
	  });
	}

	function insertSelfEdges(g) {
	  var layers = util.buildLayerMatrix(g);
	  _.forEach(layers, function(layer) {
	    var orderShift = 0;
	    _.forEach(layer, function(v, i) {
	      var node = g.node(v);
	      node.order = i + orderShift;
	      _.forEach(node.selfEdges, function(selfEdge) {
	        util.addDummyNode(g, "selfedge", {
	          width: selfEdge.label.width,
	          height: selfEdge.label.height,
	          rank: node.rank,
	          order: i + (++orderShift),
	          e: selfEdge.e,
	          label: selfEdge.label
	        }, "_se");
	      });
	      delete node.selfEdges;
	    });
	  });
	}

	function positionSelfEdges(g) {
	  _.forEach(g.nodes(), function(v) {
	    var node = g.node(v);
	    if (node.dummy === "selfedge") {
	      var selfNode = g.node(node.e.v);
	      var x = selfNode.x + selfNode.width / 2;
	      var y = selfNode.y;
	      var dx = node.x - x;
	      var dy = selfNode.height / 2;
	      g.setEdge(node.e, node.label);
	      g.removeNode(v);
	      node.label.points = [
	        { x: x + 2 * dx / 3, y: y - dy },
	        { x: x + 5 * dx / 6, y: y - dy },
	        { x: x +     dx    , y: y },
	        { x: x + 5 * dx / 6, y: y + dy },
	        { x: x + 2 * dx / 3, y: y + dy }
	      ];
	      node.label.x = node.x;
	      node.label.y = node.y;
	    }
	  });
	}

	function selectNumberAttrs(obj, attrs) {
	  return _.mapValues(_.pick(obj, attrs), Number);
	}

	function canonicalize(attrs) {
	  var newAttrs = {};
	  _.forEach(attrs, function(v, k) {
	    newAttrs[k.toLowerCase()] = v;
	  });
	  return newAttrs;
	}


/***/ }),
/* 221 */
/***/ (function(module, exports, __webpack_require__) {

	/* global window */

	var lodash;

	if (true) {
	  try {
	    lodash = {
	      cloneDeep: __webpack_require__(222),
	      constant: __webpack_require__(118),
	      defaults: __webpack_require__(223),
	      each: __webpack_require__(119),
	      filter: __webpack_require__(128),
	      find: __webpack_require__(225),
	      flatten: __webpack_require__(231),
	      forEach: __webpack_require__(120),
	      forIn: __webpack_require__(232),
	      has:  __webpack_require__(167),
	      isUndefined: __webpack_require__(170),
	      last: __webpack_require__(233),
	      map: __webpack_require__(171),
	      mapValues: __webpack_require__(234),
	      max: __webpack_require__(235),
	      merge: __webpack_require__(238),
	      min: __webpack_require__(246),
	      minBy: __webpack_require__(248),
	      now: __webpack_require__(249),
	      pick: __webpack_require__(250),
	      range: __webpack_require__(255),
	      reduce: __webpack_require__(173),
	      sortBy: __webpack_require__(258),
	      uniqueId: __webpack_require__(263),
	      values: __webpack_require__(202),
	      zipObject: __webpack_require__(264),
	    };
	  } catch (e) {
	    // continue regardless of error
	  }
	}

	if (!lodash) {
	  lodash = window._;
	}

	module.exports = lodash;


/***/ }),
/* 222 */
/***/ (function(module, exports, __webpack_require__) {

	var baseClone = __webpack_require__(10);

	/** Used to compose bitmasks for cloning. */
	var CLONE_DEEP_FLAG = 1,
	    CLONE_SYMBOLS_FLAG = 4;

	/**
	 * This method is like `_.clone` except that it recursively clones `value`.
	 *
	 * @static
	 * @memberOf _
	 * @since 1.0.0
	 * @category Lang
	 * @param {*} value The value to recursively clone.
	 * @returns {*} Returns the deep cloned value.
	 * @see _.clone
	 * @example
	 *
	 * var objects = [{ 'a': 1 }, { 'b': 2 }];
	 *
	 * var deep = _.cloneDeep(objects);
	 * console.log(deep[0] === objects[0]);
	 * // => false
	 */
	function cloneDeep(value) {
	  return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
	}

	module.exports = cloneDeep;


/***/ }),
/* 223 */
/***/ (function(module, exports, __webpack_require__) {

	var baseRest = __webpack_require__(186),
	    eq = __webpack_require__(16),
	    isIterateeCall = __webpack_require__(224),
	    keysIn = __webpack_require__(83);

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Assigns own and inherited enumerable string keyed properties of source
	 * objects to the destination object for all destination properties that
	 * resolve to `undefined`. Source objects are applied from left to right.
	 * Once a property is set, additional values of the same property are ignored.
	 *
	 * **Note:** This method mutates `object`.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The destination object.
	 * @param {...Object} [sources] The source objects.
	 * @returns {Object} Returns `object`.
	 * @see _.defaultsDeep
	 * @example
	 *
	 * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
	 * // => { 'a': 1, 'b': 2 }
	 */
	var defaults = baseRest(function(object, sources) {
	  object = Object(object);

	  var index = -1;
	  var length = sources.length;
	  var guard = length > 2 ? sources[2] : undefined;

	  if (guard && isIterateeCall(sources[0], sources[1], guard)) {
	    length = 1;
	  }

	  while (++index < length) {
	    var source = sources[index];
	    var props = keysIn(source);
	    var propsIndex = -1;
	    var propsLength = props.length;

	    while (++propsIndex < propsLength) {
	      var key = props[propsIndex];
	      var value = object[key];

	      if (value === undefined ||
	          (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {
	        object[key] = source[key];
	      }
	    }
	  }

	  return object;
	});

	module.exports = defaults;


/***/ }),
/* 224 */
/***/ (function(module, exports, __webpack_require__) {

	var eq = __webpack_require__(16),
	    isArrayLike = __webpack_require__(81),
	    isIndex = __webpack_require__(71),
	    isObject = __webpack_require__(35);

	/**
	 * Checks if the given arguments are from an iteratee call.
	 *
	 * @private
	 * @param {*} value The potential iteratee value argument.
	 * @param {*} index The potential iteratee index or key argument.
	 * @param {*} object The potential iteratee object argument.
	 * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
	 *  else `false`.
	 */
	function isIterateeCall(value, index, object) {
	  if (!isObject(object)) {
	    return false;
	  }
	  var type = typeof index;
	  if (type == 'number'
	        ? (isArrayLike(object) && isIndex(index, object.length))
	        : (type == 'string' && index in object)
	      ) {
	    return eq(object[index], value);
	  }
	  return false;
	}

	module.exports = isIterateeCall;


/***/ }),
/* 225 */
/***/ (function(module, exports, __webpack_require__) {

	var createFind = __webpack_require__(226),
	    findIndex = __webpack_require__(227);

	/**
	 * Iterates over elements of `collection`, returning the first element
	 * `predicate` returns truthy for. The predicate is invoked with three
	 * arguments: (value, index|key, collection).
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Collection
	 * @param {Array|Object} collection The collection to inspect.
	 * @param {Function} [predicate=_.identity] The function invoked per iteration.
	 * @param {number} [fromIndex=0] The index to search from.
	 * @returns {*} Returns the matched element, else `undefined`.
	 * @example
	 *
	 * var users = [
	 *   { 'user': 'barney',  'age': 36, 'active': true },
	 *   { 'user': 'fred',    'age': 40, 'active': false },
	 *   { 'user': 'pebbles', 'age': 1,  'active': true }
	 * ];
	 *
	 * _.find(users, function(o) { return o.age < 40; });
	 * // => object for 'barney'
	 *
	 * // The `_.matches` iteratee shorthand.
	 * _.find(users, { 'age': 1, 'active': true });
	 * // => object for 'pebbles'
	 *
	 * // The `_.matchesProperty` iteratee shorthand.
	 * _.find(users, ['active', false]);
	 * // => object for 'fred'
	 *
	 * // The `_.property` iteratee shorthand.
	 * _.find(users, 'active');
	 * // => object for 'barney'
	 */
	var find = createFind(findIndex);

	module.exports = find;


/***/ }),
/* 226 */
/***/ (function(module, exports, __webpack_require__) {

	var baseIteratee = __webpack_require__(130),
	    isArrayLike = __webpack_require__(81),
	    keys = __webpack_require__(61);

	/**
	 * Creates a `_.find` or `_.findLast` function.
	 *
	 * @private
	 * @param {Function} findIndexFunc The function to find the collection index.
	 * @returns {Function} Returns the new find function.
	 */
	function createFind(findIndexFunc) {
	  return function(collection, predicate, fromIndex) {
	    var iterable = Object(collection);
	    if (!isArrayLike(collection)) {
	      var iteratee = baseIteratee(predicate, 3);
	      collection = keys(collection);
	      predicate = function(key) { return iteratee(iterable[key], key, iterable); };
	    }
	    var index = findIndexFunc(collection, predicate, fromIndex);
	    return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
	  };
	}

	module.exports = createFind;


/***/ }),
/* 227 */
/***/ (function(module, exports, __webpack_require__) {

	var baseFindIndex = __webpack_require__(195),
	    baseIteratee = __webpack_require__(130),
	    toInteger = __webpack_require__(228);

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeMax = Math.max;

	/**
	 * This method is like `_.find` except that it returns the index of the first
	 * element `predicate` returns truthy for instead of the element itself.
	 *
	 * @static
	 * @memberOf _
	 * @since 1.1.0
	 * @category Array
	 * @param {Array} array The array to inspect.
	 * @param {Function} [predicate=_.identity] The function invoked per iteration.
	 * @param {number} [fromIndex=0] The index to search from.
	 * @returns {number} Returns the index of the found element, else `-1`.
	 * @example
	 *
	 * var users = [
	 *   { 'user': 'barney',  'active': false },
	 *   { 'user': 'fred',    'active': false },
	 *   { 'user': 'pebbles', 'active': true }
	 * ];
	 *
	 * _.findIndex(users, function(o) { return o.user == 'barney'; });
	 * // => 0
	 *
	 * // The `_.matches` iteratee shorthand.
	 * _.findIndex(users, { 'user': 'fred', 'active': false });
	 * // => 1
	 *
	 * // The `_.matchesProperty` iteratee shorthand.
	 * _.findIndex(users, ['active', false]);
	 * // => 0
	 *
	 * // The `_.property` iteratee shorthand.
	 * _.findIndex(users, 'active');
	 * // => 2
	 */
	function findIndex(array, predicate, fromIndex) {
	  var length = array == null ? 0 : array.length;
	  if (!length) {
	    return -1;
	  }
	  var index = fromIndex == null ? 0 : toInteger(fromIndex);
	  if (index < 0) {
	    index = nativeMax(length + index, 0);
	  }
	  return baseFindIndex(array, baseIteratee(predicate, 3), index);
	}

	module.exports = findIndex;


/***/ }),
/* 228 */
/***/ (function(module, exports, __webpack_require__) {

	var toFinite = __webpack_require__(229);

	/**
	 * Converts `value` to an integer.
	 *
	 * **Note:** This method is loosely based on
	 * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to convert.
	 * @returns {number} Returns the converted integer.
	 * @example
	 *
	 * _.toInteger(3.2);
	 * // => 3
	 *
	 * _.toInteger(Number.MIN_VALUE);
	 * // => 0
	 *
	 * _.toInteger(Infinity);
	 * // => 1.7976931348623157e+308
	 *
	 * _.toInteger('3.2');
	 * // => 3
	 */
	function toInteger(value) {
	  var result = toFinite(value),
	      remainder = result % 1;

	  return result === result ? (remainder ? result - remainder : result) : 0;
	}

	module.exports = toInteger;


/***/ }),
/* 229 */
/***/ (function(module, exports, __webpack_require__) {

	var toNumber = __webpack_require__(230);

	/** Used as references for various `Number` constants. */
	var INFINITY = 1 / 0,
	    MAX_INTEGER = 1.7976931348623157e+308;

	/**
	 * Converts `value` to a finite number.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.12.0
	 * @category Lang
	 * @param {*} value The value to convert.
	 * @returns {number} Returns the converted number.
	 * @example
	 *
	 * _.toFinite(3.2);
	 * // => 3.2
	 *
	 * _.toFinite(Number.MIN_VALUE);
	 * // => 5e-324
	 *
	 * _.toFinite(Infinity);
	 * // => 1.7976931348623157e+308
	 *
	 * _.toFinite('3.2');
	 * // => 3.2
	 */
	function toFinite(value) {
	  if (!value) {
	    return value === 0 ? value : 0;
	  }
	  value = toNumber(value);
	  if (value === INFINITY || value === -INFINITY) {
	    var sign = (value < 0 ? -1 : 1);
	    return sign * MAX_INTEGER;
	  }
	  return value === value ? value : 0;
	}

	module.exports = toFinite;


/***/ }),
/* 230 */
/***/ (function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(35),
	    isSymbol = __webpack_require__(153);

	/** Used as references for various `Number` constants. */
	var NAN = 0 / 0;

	/** Used to match leading and trailing whitespace. */
	var reTrim = /^\s+|\s+$/g;

	/** Used to detect bad signed hexadecimal string values. */
	var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

	/** Used to detect binary string values. */
	var reIsBinary = /^0b[01]+$/i;

	/** Used to detect octal string values. */
	var reIsOctal = /^0o[0-7]+$/i;

	/** Built-in method references without a dependency on `root`. */
	var freeParseInt = parseInt;

	/**
	 * Converts `value` to a number.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to process.
	 * @returns {number} Returns the number.
	 * @example
	 *
	 * _.toNumber(3.2);
	 * // => 3.2
	 *
	 * _.toNumber(Number.MIN_VALUE);
	 * // => 5e-324
	 *
	 * _.toNumber(Infinity);
	 * // => Infinity
	 *
	 * _.toNumber('3.2');
	 * // => 3.2
	 */
	function toNumber(value) {
	  if (typeof value == 'number') {
	    return value;
	  }
	  if (isSymbol(value)) {
	    return NAN;
	  }
	  if (isObject(value)) {
	    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
	    value = isObject(other) ? (other + '') : other;
	  }
	  if (typeof value != 'string') {
	    return value === 0 ? value : +value;
	  }
	  value = value.replace(reTrim, '');
	  var isBinary = reIsBinary.test(value);
	  return (isBinary || reIsOctal.test(value))
	    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
	    : (reIsBadHex.test(value) ? NAN : +value);
	}

	module.exports = toNumber;


/***/ }),
/* 231 */
/***/ (function(module, exports, __webpack_require__) {

	var baseFlatten = __webpack_require__(184);

	/**
	 * Flattens `array` a single level deep.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Array
	 * @param {Array} array The array to flatten.
	 * @returns {Array} Returns the new flattened array.
	 * @example
	 *
	 * _.flatten([1, [2, [3, [4]], 5]]);
	 * // => [1, 2, [3, [4]], 5]
	 */
	function flatten(array) {
	  var length = array == null ? 0 : array.length;
	  return length ? baseFlatten(array, 1) : [];
	}

	module.exports = flatten;


/***/ }),
/* 232 */
/***/ (function(module, exports, __webpack_require__) {

	var baseFor = __webpack_require__(123),
	    castFunction = __webpack_require__(126),
	    keysIn = __webpack_require__(83);

	/**
	 * Iterates over own and inherited enumerable string keyed properties of an
	 * object and invokes `iteratee` for each property. The iteratee is invoked
	 * with three arguments: (value, key, object). Iteratee functions may exit
	 * iteration early by explicitly returning `false`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.3.0
	 * @category Object
	 * @param {Object} object The object to iterate over.
	 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	 * @returns {Object} Returns `object`.
	 * @see _.forInRight
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.forIn(new Foo, function(value, key) {
	 *   console.log(key);
	 * });
	 * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
	 */
	function forIn(object, iteratee) {
	  return object == null
	    ? object
	    : baseFor(object, castFunction(iteratee), keysIn);
	}

	module.exports = forIn;


/***/ }),
/* 233 */
/***/ (function(module, exports) {

	/**
	 * Gets the last element of `array`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Array
	 * @param {Array} array The array to query.
	 * @returns {*} Returns the last element of `array`.
	 * @example
	 *
	 * _.last([1, 2, 3]);
	 * // => 3
	 */
	function last(array) {
	  var length = array == null ? 0 : array.length;
	  return length ? array[length - 1] : undefined;
	}

	module.exports = last;


/***/ }),
/* 234 */
/***/ (function(module, exports, __webpack_require__) {

	var baseAssignValue = __webpack_require__(57),
	    baseForOwn = __webpack_require__(122),
	    baseIteratee = __webpack_require__(130);

	/**
	 * Creates an object with the same keys as `object` and values generated
	 * by running each own enumerable string keyed property of `object` thru
	 * `iteratee`. The iteratee is invoked with three arguments:
	 * (value, key, object).
	 *
	 * @static
	 * @memberOf _
	 * @since 2.4.0
	 * @category Object
	 * @param {Object} object The object to iterate over.
	 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	 * @returns {Object} Returns the new mapped object.
	 * @see _.mapKeys
	 * @example
	 *
	 * var users = {
	 *   'fred':    { 'user': 'fred',    'age': 40 },
	 *   'pebbles': { 'user': 'pebbles', 'age': 1 }
	 * };
	 *
	 * _.mapValues(users, function(o) { return o.age; });
	 * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
	 *
	 * // The `_.property` iteratee shorthand.
	 * _.mapValues(users, 'age');
	 * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
	 */
	function mapValues(object, iteratee) {
	  var result = {};
	  iteratee = baseIteratee(iteratee, 3);

	  baseForOwn(object, function(value, key, object) {
	    baseAssignValue(result, key, iteratee(value, key, object));
	  });
	  return result;
	}

	module.exports = mapValues;


/***/ }),
/* 235 */
/***/ (function(module, exports, __webpack_require__) {

	var baseExtremum = __webpack_require__(236),
	    baseGt = __webpack_require__(237),
	    identity = __webpack_require__(127);

	/**
	 * Computes the maximum value of `array`. If `array` is empty or falsey,
	 * `undefined` is returned.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Math
	 * @param {Array} array The array to iterate over.
	 * @returns {*} Returns the maximum value.
	 * @example
	 *
	 * _.max([4, 2, 8, 6]);
	 * // => 8
	 *
	 * _.max([]);
	 * // => undefined
	 */
	function max(array) {
	  return (array && array.length)
	    ? baseExtremum(array, identity, baseGt)
	    : undefined;
	}

	module.exports = max;


/***/ }),
/* 236 */
/***/ (function(module, exports, __webpack_require__) {

	var isSymbol = __webpack_require__(153);

	/**
	 * The base implementation of methods like `_.max` and `_.min` which accepts a
	 * `comparator` to determine the extremum value.
	 *
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} iteratee The iteratee invoked per iteration.
	 * @param {Function} comparator The comparator used to compare values.
	 * @returns {*} Returns the extremum value.
	 */
	function baseExtremum(array, iteratee, comparator) {
	  var index = -1,
	      length = array.length;

	  while (++index < length) {
	    var value = array[index],
	        current = iteratee(value);

	    if (current != null && (computed === undefined
	          ? (current === current && !isSymbol(current))
	          : comparator(current, computed)
	        )) {
	      var computed = current,
	          result = value;
	    }
	  }
	  return result;
	}

	module.exports = baseExtremum;


/***/ }),
/* 237 */
/***/ (function(module, exports) {

	/**
	 * The base implementation of `_.gt` which doesn't coerce arguments.
	 *
	 * @private
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @returns {boolean} Returns `true` if `value` is greater than `other`,
	 *  else `false`.
	 */
	function baseGt(value, other) {
	  return value > other;
	}

	module.exports = baseGt;


/***/ }),
/* 238 */
/***/ (function(module, exports, __webpack_require__) {

	var baseMerge = __webpack_require__(239),
	    createAssigner = __webpack_require__(245);

	/**
	 * This method is like `_.assign` except that it recursively merges own and
	 * inherited enumerable string keyed properties of source objects into the
	 * destination object. Source properties that resolve to `undefined` are
	 * skipped if a destination value exists. Array and plain object properties
	 * are merged recursively. Other objects and value types are overridden by
	 * assignment. Source objects are applied from left to right. Subsequent
	 * sources overwrite property assignments of previous sources.
	 *
	 * **Note:** This method mutates `object`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.5.0
	 * @category Object
	 * @param {Object} object The destination object.
	 * @param {...Object} [sources] The source objects.
	 * @returns {Object} Returns `object`.
	 * @example
	 *
	 * var object = {
	 *   'a': [{ 'b': 2 }, { 'd': 4 }]
	 * };
	 *
	 * var other = {
	 *   'a': [{ 'c': 3 }, { 'e': 5 }]
	 * };
	 *
	 * _.merge(object, other);
	 * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
	 */
	var merge = createAssigner(function(object, source, srcIndex) {
	  baseMerge(object, source, srcIndex);
	});

	module.exports = merge;


/***/ }),
/* 239 */
/***/ (function(module, exports, __webpack_require__) {

	var Stack = __webpack_require__(11),
	    assignMergeValue = __webpack_require__(240),
	    baseFor = __webpack_require__(123),
	    baseMergeDeep = __webpack_require__(241),
	    isObject = __webpack_require__(35),
	    keysIn = __webpack_require__(83),
	    safeGet = __webpack_require__(243);

	/**
	 * The base implementation of `_.merge` without support for multiple sources.
	 *
	 * @private
	 * @param {Object} object The destination object.
	 * @param {Object} source The source object.
	 * @param {number} srcIndex The index of `source`.
	 * @param {Function} [customizer] The function to customize merged values.
	 * @param {Object} [stack] Tracks traversed source values and their merged
	 *  counterparts.
	 */
	function baseMerge(object, source, srcIndex, customizer, stack) {
	  if (object === source) {
	    return;
	  }
	  baseFor(source, function(srcValue, key) {
	    stack || (stack = new Stack);
	    if (isObject(srcValue)) {
	      baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
	    }
	    else {
	      var newValue = customizer
	        ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)
	        : undefined;

	      if (newValue === undefined) {
	        newValue = srcValue;
	      }
	      assignMergeValue(object, key, newValue);
	    }
	  }, keysIn);
	}

	module.exports = baseMerge;


/***/ }),
/* 240 */
/***/ (function(module, exports, __webpack_require__) {

	var baseAssignValue = __webpack_require__(57),
	    eq = __webpack_require__(16);

	/**
	 * This function is like `assignValue` except that it doesn't assign
	 * `undefined` values.
	 *
	 * @private
	 * @param {Object} object The object to modify.
	 * @param {string} key The key of the property to assign.
	 * @param {*} value The value to assign.
	 */
	function assignMergeValue(object, key, value) {
	  if ((value !== undefined && !eq(object[key], value)) ||
	      (value === undefined && !(key in object))) {
	    baseAssignValue(object, key, value);
	  }
	}

	module.exports = assignMergeValue;


/***/ }),
/* 241 */
/***/ (function(module, exports, __webpack_require__) {

	var assignMergeValue = __webpack_require__(240),
	    cloneBuffer = __webpack_require__(86),
	    cloneTypedArray = __webpack_require__(111),
	    copyArray = __webpack_require__(87),
	    initCloneObject = __webpack_require__(112),
	    isArguments = __webpack_require__(64),
	    isArray = __webpack_require__(67),
	    isArrayLikeObject = __webpack_require__(201),
	    isBuffer = __webpack_require__(68),
	    isFunction = __webpack_require__(28),
	    isObject = __webpack_require__(35),
	    isPlainObject = __webpack_require__(242),
	    isTypedArray = __webpack_require__(72),
	    safeGet = __webpack_require__(243),
	    toPlainObject = __webpack_require__(244);

	/**
	 * A specialized version of `baseMerge` for arrays and objects which performs
	 * deep merges and tracks traversed objects enabling objects with circular
	 * references to be merged.
	 *
	 * @private
	 * @param {Object} object The destination object.
	 * @param {Object} source The source object.
	 * @param {string} key The key of the value to merge.
	 * @param {number} srcIndex The index of `source`.
	 * @param {Function} mergeFunc The function to merge values.
	 * @param {Function} [customizer] The function to customize assigned values.
	 * @param {Object} [stack] Tracks traversed source values and their merged
	 *  counterparts.
	 */
	function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
	  var objValue = safeGet(object, key),
	      srcValue = safeGet(source, key),
	      stacked = stack.get(srcValue);

	  if (stacked) {
	    assignMergeValue(object, key, stacked);
	    return;
	  }
	  var newValue = customizer
	    ? customizer(objValue, srcValue, (key + ''), object, source, stack)
	    : undefined;

	  var isCommon = newValue === undefined;

	  if (isCommon) {
	    var isArr = isArray(srcValue),
	        isBuff = !isArr && isBuffer(srcValue),
	        isTyped = !isArr && !isBuff && isTypedArray(srcValue);

	    newValue = srcValue;
	    if (isArr || isBuff || isTyped) {
	      if (isArray(objValue)) {
	        newValue = objValue;
	      }
	      else if (isArrayLikeObject(objValue)) {
	        newValue = copyArray(objValue);
	      }
	      else if (isBuff) {
	        isCommon = false;
	        newValue = cloneBuffer(srcValue, true);
	      }
	      else if (isTyped) {
	        isCommon = false;
	        newValue = cloneTypedArray(srcValue, true);
	      }
	      else {
	        newValue = [];
	      }
	    }
	    else if (isPlainObject(srcValue) || isArguments(srcValue)) {
	      newValue = objValue;
	      if (isArguments(objValue)) {
	        newValue = toPlainObject(objValue);
	      }
	      else if (!isObject(objValue) || isFunction(objValue)) {
	        newValue = initCloneObject(srcValue);
	      }
	    }
	    else {
	      isCommon = false;
	    }
	  }
	  if (isCommon) {
	    // Recursively merge objects and arrays (susceptible to call stack limits).
	    stack.set(srcValue, newValue);
	    mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
	    stack['delete'](srcValue);
	  }
	  assignMergeValue(object, key, newValue);
	}

	module.exports = baseMergeDeep;


/***/ }),
/* 242 */
/***/ (function(module, exports, __webpack_require__) {

	var baseGetTag = __webpack_require__(29),
	    getPrototype = __webpack_require__(95),
	    isObjectLike = __webpack_require__(66);

	/** `Object#toString` result references. */
	var objectTag = '[object Object]';

	/** Used for built-in method references. */
	var funcProto = Function.prototype,
	    objectProto = Object.prototype;

	/** Used to resolve the decompiled source of functions. */
	var funcToString = funcProto.toString;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/** Used to infer the `Object` constructor. */
	var objectCtorString = funcToString.call(Object);

	/**
	 * Checks if `value` is a plain object, that is, an object created by the
	 * `Object` constructor or one with a `[[Prototype]]` of `null`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.8.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 * }
	 *
	 * _.isPlainObject(new Foo);
	 * // => false
	 *
	 * _.isPlainObject([1, 2, 3]);
	 * // => false
	 *
	 * _.isPlainObject({ 'x': 0, 'y': 0 });
	 * // => true
	 *
	 * _.isPlainObject(Object.create(null));
	 * // => true
	 */
	function isPlainObject(value) {
	  if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
	    return false;
	  }
	  var proto = getPrototype(value);
	  if (proto === null) {
	    return true;
	  }
	  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
	  return typeof Ctor == 'function' && Ctor instanceof Ctor &&
	    funcToString.call(Ctor) == objectCtorString;
	}

	module.exports = isPlainObject;


/***/ }),
/* 243 */
/***/ (function(module, exports) {

	/**
	 * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {string} key The key of the property to get.
	 * @returns {*} Returns the property value.
	 */
	function safeGet(object, key) {
	  if (key === 'constructor' && typeof object[key] === 'function') {
	    return;
	  }

	  if (key == '__proto__') {
	    return;
	  }

	  return object[key];
	}

	module.exports = safeGet;


/***/ }),
/* 244 */
/***/ (function(module, exports, __webpack_require__) {

	var copyObject = __webpack_require__(60),
	    keysIn = __webpack_require__(83);

	/**
	 * Converts `value` to a plain object flattening inherited enumerable string
	 * keyed properties of `value` to own properties of the plain object.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category Lang
	 * @param {*} value The value to convert.
	 * @returns {Object} Returns the converted plain object.
	 * @example
	 *
	 * function Foo() {
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.assign({ 'a': 1 }, new Foo);
	 * // => { 'a': 1, 'b': 2 }
	 *
	 * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
	 * // => { 'a': 1, 'b': 2, 'c': 3 }
	 */
	function toPlainObject(value) {
	  return copyObject(value, keysIn(value));
	}

	module.exports = toPlainObject;


/***/ }),
/* 245 */
/***/ (function(module, exports, __webpack_require__) {

	var baseRest = __webpack_require__(186),
	    isIterateeCall = __webpack_require__(224);

	/**
	 * Creates a function like `_.assign`.
	 *
	 * @private
	 * @param {Function} assigner The function to assign values.
	 * @returns {Function} Returns the new assigner function.
	 */
	function createAssigner(assigner) {
	  return baseRest(function(object, sources) {
	    var index = -1,
	        length = sources.length,
	        customizer = length > 1 ? sources[length - 1] : undefined,
	        guard = length > 2 ? sources[2] : undefined;

	    customizer = (assigner.length > 3 && typeof customizer == 'function')
	      ? (length--, customizer)
	      : undefined;

	    if (guard && isIterateeCall(sources[0], sources[1], guard)) {
	      customizer = length < 3 ? undefined : customizer;
	      length = 1;
	    }
	    object = Object(object);
	    while (++index < length) {
	      var source = sources[index];
	      if (source) {
	        assigner(object, source, index, customizer);
	      }
	    }
	    return object;
	  });
	}

	module.exports = createAssigner;


/***/ }),
/* 246 */
/***/ (function(module, exports, __webpack_require__) {

	var baseExtremum = __webpack_require__(236),
	    baseLt = __webpack_require__(247),
	    identity = __webpack_require__(127);

	/**
	 * Computes the minimum value of `array`. If `array` is empty or falsey,
	 * `undefined` is returned.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Math
	 * @param {Array} array The array to iterate over.
	 * @returns {*} Returns the minimum value.
	 * @example
	 *
	 * _.min([4, 2, 8, 6]);
	 * // => 2
	 *
	 * _.min([]);
	 * // => undefined
	 */
	function min(array) {
	  return (array && array.length)
	    ? baseExtremum(array, identity, baseLt)
	    : undefined;
	}

	module.exports = min;


/***/ }),
/* 247 */
/***/ (function(module, exports) {

	/**
	 * The base implementation of `_.lt` which doesn't coerce arguments.
	 *
	 * @private
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @returns {boolean} Returns `true` if `value` is less than `other`,
	 *  else `false`.
	 */
	function baseLt(value, other) {
	  return value < other;
	}

	module.exports = baseLt;


/***/ }),
/* 248 */
/***/ (function(module, exports, __webpack_require__) {

	var baseExtremum = __webpack_require__(236),
	    baseIteratee = __webpack_require__(130),
	    baseLt = __webpack_require__(247);

	/**
	 * This method is like `_.min` except that it accepts `iteratee` which is
	 * invoked for each element in `array` to generate the criterion by which
	 * the value is ranked. The iteratee is invoked with one argument: (value).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Math
	 * @param {Array} array The array to iterate over.
	 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	 * @returns {*} Returns the minimum value.
	 * @example
	 *
	 * var objects = [{ 'n': 1 }, { 'n': 2 }];
	 *
	 * _.minBy(objects, function(o) { return o.n; });
	 * // => { 'n': 1 }
	 *
	 * // The `_.property` iteratee shorthand.
	 * _.minBy(objects, 'n');
	 * // => { 'n': 1 }
	 */
	function minBy(array, iteratee) {
	  return (array && array.length)
	    ? baseExtremum(array, baseIteratee(iteratee, 2), baseLt)
	    : undefined;
	}

	module.exports = minBy;


/***/ }),
/* 249 */
/***/ (function(module, exports, __webpack_require__) {

	var root = __webpack_require__(31);

	/**
	 * Gets the timestamp of the number of milliseconds that have elapsed since
	 * the Unix epoch (1 January 1970 00:00:00 UTC).
	 *
	 * @static
	 * @memberOf _
	 * @since 2.4.0
	 * @category Date
	 * @returns {number} Returns the timestamp.
	 * @example
	 *
	 * _.defer(function(stamp) {
	 *   console.log(_.now() - stamp);
	 * }, _.now());
	 * // => Logs the number of milliseconds it took for the deferred invocation.
	 */
	var now = function() {
	  return root.Date.now();
	};

	module.exports = now;


/***/ }),
/* 250 */
/***/ (function(module, exports, __webpack_require__) {

	var basePick = __webpack_require__(251),
	    flatRest = __webpack_require__(254);

	/**
	 * Creates an object composed of the picked `object` properties.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The source object.
	 * @param {...(string|string[])} [paths] The property paths to pick.
	 * @returns {Object} Returns the new object.
	 * @example
	 *
	 * var object = { 'a': 1, 'b': '2', 'c': 3 };
	 *
	 * _.pick(object, ['a', 'c']);
	 * // => { 'a': 1, 'c': 3 }
	 */
	var pick = flatRest(function(object, paths) {
	  return object == null ? {} : basePick(object, paths);
	});

	module.exports = pick;


/***/ }),
/* 251 */
/***/ (function(module, exports, __webpack_require__) {

	var basePickBy = __webpack_require__(252),
	    hasIn = __webpack_require__(161);

	/**
	 * The base implementation of `_.pick` without support for individual
	 * property identifiers.
	 *
	 * @private
	 * @param {Object} object The source object.
	 * @param {string[]} paths The property paths to pick.
	 * @returns {Object} Returns the new object.
	 */
	function basePick(object, paths) {
	  return basePickBy(object, paths, function(value, path) {
	    return hasIn(object, path);
	  });
	}

	module.exports = basePick;


/***/ }),
/* 252 */
/***/ (function(module, exports, __webpack_require__) {

	var baseGet = __webpack_require__(150),
	    baseSet = __webpack_require__(253),
	    castPath = __webpack_require__(151);

	/**
	 * The base implementation of  `_.pickBy` without support for iteratee shorthands.
	 *
	 * @private
	 * @param {Object} object The source object.
	 * @param {string[]} paths The property paths to pick.
	 * @param {Function} predicate The function invoked per property.
	 * @returns {Object} Returns the new object.
	 */
	function basePickBy(object, paths, predicate) {
	  var index = -1,
	      length = paths.length,
	      result = {};

	  while (++index < length) {
	    var path = paths[index],
	        value = baseGet(object, path);

	    if (predicate(value, path)) {
	      baseSet(result, castPath(path, object), value);
	    }
	  }
	  return result;
	}

	module.exports = basePickBy;


/***/ }),
/* 253 */
/***/ (function(module, exports, __webpack_require__) {

	var assignValue = __webpack_require__(56),
	    castPath = __webpack_require__(151),
	    isIndex = __webpack_require__(71),
	    isObject = __webpack_require__(35),
	    toKey = __webpack_require__(160);

	/**
	 * The base implementation of `_.set`.
	 *
	 * @private
	 * @param {Object} object The object to modify.
	 * @param {Array|string} path The path of the property to set.
	 * @param {*} value The value to set.
	 * @param {Function} [customizer] The function to customize path creation.
	 * @returns {Object} Returns `object`.
	 */
	function baseSet(object, path, value, customizer) {
	  if (!isObject(object)) {
	    return object;
	  }
	  path = castPath(path, object);

	  var index = -1,
	      length = path.length,
	      lastIndex = length - 1,
	      nested = object;

	  while (nested != null && ++index < length) {
	    var key = toKey(path[index]),
	        newValue = value;

	    if (index != lastIndex) {
	      var objValue = nested[key];
	      newValue = customizer ? customizer(objValue, key, nested) : undefined;
	      if (newValue === undefined) {
	        newValue = isObject(objValue)
	          ? objValue
	          : (isIndex(path[index + 1]) ? [] : {});
	      }
	    }
	    assignValue(nested, key, newValue);
	    nested = nested[key];
	  }
	  return object;
	}

	module.exports = baseSet;


/***/ }),
/* 254 */
/***/ (function(module, exports, __webpack_require__) {

	var flatten = __webpack_require__(231),
	    overRest = __webpack_require__(187),
	    setToString = __webpack_require__(189);

	/**
	 * A specialized version of `baseRest` which flattens the rest array.
	 *
	 * @private
	 * @param {Function} func The function to apply a rest parameter to.
	 * @returns {Function} Returns the new function.
	 */
	function flatRest(func) {
	  return setToString(overRest(func, undefined, flatten), func + '');
	}

	module.exports = flatRest;


/***/ }),
/* 255 */
/***/ (function(module, exports, __webpack_require__) {

	var createRange = __webpack_require__(256);

	/**
	 * Creates an array of numbers (positive and/or negative) progressing from
	 * `start` up to, but not including, `end`. A step of `-1` is used if a negative
	 * `start` is specified without an `end` or `step`. If `end` is not specified,
	 * it's set to `start` with `start` then set to `0`.
	 *
	 * **Note:** JavaScript follows the IEEE-754 standard for resolving
	 * floating-point values which can produce unexpected results.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Util
	 * @param {number} [start=0] The start of the range.
	 * @param {number} end The end of the range.
	 * @param {number} [step=1] The value to increment or decrement by.
	 * @returns {Array} Returns the range of numbers.
	 * @see _.inRange, _.rangeRight
	 * @example
	 *
	 * _.range(4);
	 * // => [0, 1, 2, 3]
	 *
	 * _.range(-4);
	 * // => [0, -1, -2, -3]
	 *
	 * _.range(1, 5);
	 * // => [1, 2, 3, 4]
	 *
	 * _.range(0, 20, 5);
	 * // => [0, 5, 10, 15]
	 *
	 * _.range(0, -4, -1);
	 * // => [0, -1, -2, -3]
	 *
	 * _.range(1, 4, 0);
	 * // => [1, 1, 1]
	 *
	 * _.range(0);
	 * // => []
	 */
	var range = createRange();

	module.exports = range;


/***/ }),
/* 256 */
/***/ (function(module, exports, __webpack_require__) {

	var baseRange = __webpack_require__(257),
	    isIterateeCall = __webpack_require__(224),
	    toFinite = __webpack_require__(229);

	/**
	 * Creates a `_.range` or `_.rangeRight` function.
	 *
	 * @private
	 * @param {boolean} [fromRight] Specify iterating from right to left.
	 * @returns {Function} Returns the new range function.
	 */
	function createRange(fromRight) {
	  return function(start, end, step) {
	    if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
	      end = step = undefined;
	    }
	    // Ensure the sign of `-0` is preserved.
	    start = toFinite(start);
	    if (end === undefined) {
	      end = start;
	      start = 0;
	    } else {
	      end = toFinite(end);
	    }
	    step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);
	    return baseRange(start, end, step, fromRight);
	  };
	}

	module.exports = createRange;


/***/ }),
/* 257 */
/***/ (function(module, exports) {

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeCeil = Math.ceil,
	    nativeMax = Math.max;

	/**
	 * The base implementation of `_.range` and `_.rangeRight` which doesn't
	 * coerce arguments.
	 *
	 * @private
	 * @param {number} start The start of the range.
	 * @param {number} end The end of the range.
	 * @param {number} step The value to increment or decrement by.
	 * @param {boolean} [fromRight] Specify iterating from right to left.
	 * @returns {Array} Returns the range of numbers.
	 */
	function baseRange(start, end, step, fromRight) {
	  var index = -1,
	      length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
	      result = Array(length);

	  while (length--) {
	    result[fromRight ? length : ++index] = start;
	    start += step;
	  }
	  return result;
	}

	module.exports = baseRange;


/***/ }),
/* 258 */
/***/ (function(module, exports, __webpack_require__) {

	var baseFlatten = __webpack_require__(184),
	    baseOrderBy = __webpack_require__(259),
	    baseRest = __webpack_require__(186),
	    isIterateeCall = __webpack_require__(224);

	/**
	 * Creates an array of elements, sorted in ascending order by the results of
	 * running each element in a collection thru each iteratee. This method
	 * performs a stable sort, that is, it preserves the original sort order of
	 * equal elements. The iteratees are invoked with one argument: (value).
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Collection
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {...(Function|Function[])} [iteratees=[_.identity]]
	 *  The iteratees to sort by.
	 * @returns {Array} Returns the new sorted array.
	 * @example
	 *
	 * var users = [
	 *   { 'user': 'fred',   'age': 48 },
	 *   { 'user': 'barney', 'age': 36 },
	 *   { 'user': 'fred',   'age': 40 },
	 *   { 'user': 'barney', 'age': 34 }
	 * ];
	 *
	 * _.sortBy(users, [function(o) { return o.user; }]);
	 * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
	 *
	 * _.sortBy(users, ['user', 'age']);
	 * // => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]
	 */
	var sortBy = baseRest(function(collection, iteratees) {
	  if (collection == null) {
	    return [];
	  }
	  var length = iteratees.length;
	  if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
	    iteratees = [];
	  } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
	    iteratees = [iteratees[0]];
	  }
	  return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
	});

	module.exports = sortBy;


/***/ }),
/* 259 */
/***/ (function(module, exports, __webpack_require__) {

	var arrayMap = __webpack_require__(159),
	    baseIteratee = __webpack_require__(130),
	    baseMap = __webpack_require__(172),
	    baseSortBy = __webpack_require__(260),
	    baseUnary = __webpack_require__(75),
	    compareMultiple = __webpack_require__(261),
	    identity = __webpack_require__(127);

	/**
	 * The base implementation of `_.orderBy` without param guards.
	 *
	 * @private
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
	 * @param {string[]} orders The sort orders of `iteratees`.
	 * @returns {Array} Returns the new sorted array.
	 */
	function baseOrderBy(collection, iteratees, orders) {
	  var index = -1;
	  iteratees = arrayMap(iteratees.length ? iteratees : [identity], baseUnary(baseIteratee));

	  var result = baseMap(collection, function(value, key, collection) {
	    var criteria = arrayMap(iteratees, function(iteratee) {
	      return iteratee(value);
	    });
	    return { 'criteria': criteria, 'index': ++index, 'value': value };
	  });

	  return baseSortBy(result, function(object, other) {
	    return compareMultiple(object, other, orders);
	  });
	}

	module.exports = baseOrderBy;


/***/ }),
/* 260 */
/***/ (function(module, exports) {

	/**
	 * The base implementation of `_.sortBy` which uses `comparer` to define the
	 * sort order of `array` and replaces criteria objects with their corresponding
	 * values.
	 *
	 * @private
	 * @param {Array} array The array to sort.
	 * @param {Function} comparer The function to define sort order.
	 * @returns {Array} Returns `array`.
	 */
	function baseSortBy(array, comparer) {
	  var length = array.length;

	  array.sort(comparer);
	  while (length--) {
	    array[length] = array[length].value;
	  }
	  return array;
	}

	module.exports = baseSortBy;


/***/ }),
/* 261 */
/***/ (function(module, exports, __webpack_require__) {

	var compareAscending = __webpack_require__(262);

	/**
	 * Used by `_.orderBy` to compare multiple properties of a value to another
	 * and stable sort them.
	 *
	 * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
	 * specify an order of "desc" for descending or "asc" for ascending sort order
	 * of corresponding values.
	 *
	 * @private
	 * @param {Object} object The object to compare.
	 * @param {Object} other The other object to compare.
	 * @param {boolean[]|string[]} orders The order to sort by for each property.
	 * @returns {number} Returns the sort order indicator for `object`.
	 */
	function compareMultiple(object, other, orders) {
	  var index = -1,
	      objCriteria = object.criteria,
	      othCriteria = other.criteria,
	      length = objCriteria.length,
	      ordersLength = orders.length;

	  while (++index < length) {
	    var result = compareAscending(objCriteria[index], othCriteria[index]);
	    if (result) {
	      if (index >= ordersLength) {
	        return result;
	      }
	      var order = orders[index];
	      return result * (order == 'desc' ? -1 : 1);
	    }
	  }
	  // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
	  // that causes it, under certain circumstances, to provide the same value for
	  // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
	  // for more details.
	  //
	  // This also ensures a stable sort in V8 and other engines.
	  // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
	  return object.index - other.index;
	}

	module.exports = compareMultiple;


/***/ }),
/* 262 */
/***/ (function(module, exports, __webpack_require__) {

	var isSymbol = __webpack_require__(153);

	/**
	 * Compares values to sort them in ascending order.
	 *
	 * @private
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @returns {number} Returns the sort order indicator for `value`.
	 */
	function compareAscending(value, other) {
	  if (value !== other) {
	    var valIsDefined = value !== undefined,
	        valIsNull = value === null,
	        valIsReflexive = value === value,
	        valIsSymbol = isSymbol(value);

	    var othIsDefined = other !== undefined,
	        othIsNull = other === null,
	        othIsReflexive = other === other,
	        othIsSymbol = isSymbol(other);

	    if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
	        (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
	        (valIsNull && othIsDefined && othIsReflexive) ||
	        (!valIsDefined && othIsReflexive) ||
	        !valIsReflexive) {
	      return 1;
	    }
	    if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
	        (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
	        (othIsNull && valIsDefined && valIsReflexive) ||
	        (!othIsDefined && valIsReflexive) ||
	        !othIsReflexive) {
	      return -1;
	    }
	  }
	  return 0;
	}

	module.exports = compareAscending;


/***/ }),
/* 263 */
/***/ (function(module, exports, __webpack_require__) {

	var toString = __webpack_require__(157);

	/** Used to generate unique IDs. */
	var idCounter = 0;

	/**
	 * Generates a unique ID. If `prefix` is given, the ID is appended to it.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Util
	 * @param {string} [prefix=''] The value to prefix the ID with.
	 * @returns {string} Returns the unique ID.
	 * @example
	 *
	 * _.uniqueId('contact_');
	 * // => 'contact_104'
	 *
	 * _.uniqueId();
	 * // => '105'
	 */
	function uniqueId(prefix) {
	  var id = ++idCounter;
	  return toString(prefix) + id;
	}

	module.exports = uniqueId;


/***/ }),
/* 264 */
/***/ (function(module, exports, __webpack_require__) {

	var assignValue = __webpack_require__(56),
	    baseZipObject = __webpack_require__(265);

	/**
	 * This method is like `_.fromPairs` except that it accepts two arrays,
	 * one of property identifiers and one of corresponding values.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.4.0
	 * @category Array
	 * @param {Array} [props=[]] The property identifiers.
	 * @param {Array} [values=[]] The property values.
	 * @returns {Object} Returns the new object.
	 * @example
	 *
	 * _.zipObject(['a', 'b'], [1, 2]);
	 * // => { 'a': 1, 'b': 2 }
	 */
	function zipObject(props, values) {
	  return baseZipObject(props || [], values || [], assignValue);
	}

	module.exports = zipObject;


/***/ }),
/* 265 */
/***/ (function(module, exports) {

	/**
	 * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
	 *
	 * @private
	 * @param {Array} props The property identifiers.
	 * @param {Array} values The property values.
	 * @param {Function} assignFunc The function to assign values.
	 * @returns {Object} Returns the new object.
	 */
	function baseZipObject(props, values, assignFunc) {
	  var index = -1,
	      length = props.length,
	      valsLength = values.length,
	      result = {};

	  while (++index < length) {
	    var value = index < valsLength ? values[index] : undefined;
	    assignFunc(result, props[index], value);
	  }
	  return result;
	}

	module.exports = baseZipObject;


/***/ }),
/* 266 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	var _ = __webpack_require__(221);
	var greedyFAS = __webpack_require__(267);

	module.exports = {
	  run: run,
	  undo: undo
	};

	function run(g) {
	  var fas = (g.graph().acyclicer === "greedy"
	    ? greedyFAS(g, weightFn(g))
	    : dfsFAS(g));
	  _.forEach(fas, function(e) {
	    var label = g.edge(e);
	    g.removeEdge(e);
	    label.forwardName = e.name;
	    label.reversed = true;
	    g.setEdge(e.w, e.v, label, _.uniqueId("rev"));
	  });

	  function weightFn(g) {
	    return function(e) {
	      return g.edge(e).weight;
	    };
	  }
	}

	function dfsFAS(g) {
	  var fas = [];
	  var stack = {};
	  var visited = {};

	  function dfs(v) {
	    if (_.has(visited, v)) {
	      return;
	    }
	    visited[v] = true;
	    stack[v] = true;
	    _.forEach(g.outEdges(v), function(e) {
	      if (_.has(stack, e.w)) {
	        fas.push(e);
	      } else {
	        dfs(e.w);
	      }
	    });
	    delete stack[v];
	  }

	  _.forEach(g.nodes(), dfs);
	  return fas;
	}

	function undo(g) {
	  _.forEach(g.edges(), function(e) {
	    var label = g.edge(e);
	    if (label.reversed) {
	      g.removeEdge(e);

	      var forwardName = label.forwardName;
	      delete label.reversed;
	      delete label.forwardName;
	      g.setEdge(e.w, e.v, label, forwardName);
	    }
	  });
	}


/***/ }),
/* 267 */
/***/ (function(module, exports, __webpack_require__) {

	var _ = __webpack_require__(221);
	var Graph = __webpack_require__(4).Graph;
	var List = __webpack_require__(268);

	/*
	 * A greedy heuristic for finding a feedback arc set for a graph. A feedback
	 * arc set is a set of edges that can be removed to make a graph acyclic.
	 * The algorithm comes from: P. Eades, X. Lin, and W. F. Smyth, "A fast and
	 * effective heuristic for the feedback arc set problem." This implementation
	 * adjusts that from the paper to allow for weighted edges.
	 */
	module.exports = greedyFAS;

	var DEFAULT_WEIGHT_FN = _.constant(1);

	function greedyFAS(g, weightFn) {
	  if (g.nodeCount() <= 1) {
	    return [];
	  }
	  var state = buildState(g, weightFn || DEFAULT_WEIGHT_FN);
	  var results = doGreedyFAS(state.graph, state.buckets, state.zeroIdx);

	  // Expand multi-edges
	  return _.flatten(_.map(results, function(e) {
	    return g.outEdges(e.v, e.w);
	  }), true);
	}

	function doGreedyFAS(g, buckets, zeroIdx) {
	  var results = [];
	  var sources = buckets[buckets.length - 1];
	  var sinks = buckets[0];

	  var entry;
	  while (g.nodeCount()) {
	    while ((entry = sinks.dequeue()))   { removeNode(g, buckets, zeroIdx, entry); }
	    while ((entry = sources.dequeue())) { removeNode(g, buckets, zeroIdx, entry); }
	    if (g.nodeCount()) {
	      for (var i = buckets.length - 2; i > 0; --i) {
	        entry = buckets[i].dequeue();
	        if (entry) {
	          results = results.concat(removeNode(g, buckets, zeroIdx, entry, true));
	          break;
	        }
	      }
	    }
	  }

	  return results;
	}

	function removeNode(g, buckets, zeroIdx, entry, collectPredecessors) {
	  var results = collectPredecessors ? [] : undefined;

	  _.forEach(g.inEdges(entry.v), function(edge) {
	    var weight = g.edge(edge);
	    var uEntry = g.node(edge.v);

	    if (collectPredecessors) {
	      results.push({ v: edge.v, w: edge.w });
	    }

	    uEntry.out -= weight;
	    assignBucket(buckets, zeroIdx, uEntry);
	  });

	  _.forEach(g.outEdges(entry.v), function(edge) {
	    var weight = g.edge(edge);
	    var w = edge.w;
	    var wEntry = g.node(w);
	    wEntry["in"] -= weight;
	    assignBucket(buckets, zeroIdx, wEntry);
	  });

	  g.removeNode(entry.v);

	  return results;
	}

	function buildState(g, weightFn) {
	  var fasGraph = new Graph();
	  var maxIn = 0;
	  var maxOut = 0;

	  _.forEach(g.nodes(), function(v) {
	    fasGraph.setNode(v, { v: v, "in": 0, out: 0 });
	  });

	  // Aggregate weights on nodes, but also sum the weights across multi-edges
	  // into a single edge for the fasGraph.
	  _.forEach(g.edges(), function(e) {
	    var prevWeight = fasGraph.edge(e.v, e.w) || 0;
	    var weight = weightFn(e);
	    var edgeWeight = prevWeight + weight;
	    fasGraph.setEdge(e.v, e.w, edgeWeight);
	    maxOut = Math.max(maxOut, fasGraph.node(e.v).out += weight);
	    maxIn  = Math.max(maxIn,  fasGraph.node(e.w)["in"]  += weight);
	  });

	  var buckets = _.range(maxOut + maxIn + 3).map(function() { return new List(); });
	  var zeroIdx = maxIn + 1;

	  _.forEach(fasGraph.nodes(), function(v) {
	    assignBucket(buckets, zeroIdx, fasGraph.node(v));
	  });

	  return { graph: fasGraph, buckets: buckets, zeroIdx: zeroIdx };
	}

	function assignBucket(buckets, zeroIdx, entry) {
	  if (!entry.out) {
	    buckets[0].enqueue(entry);
	  } else if (!entry["in"]) {
	    buckets[buckets.length - 1].enqueue(entry);
	  } else {
	    buckets[entry.out - entry["in"] + zeroIdx].enqueue(entry);
	  }
	}


/***/ }),
/* 268 */
/***/ (function(module, exports) {

	/*
	 * Simple doubly linked list implementation derived from Cormen, et al.,
	 * "Introduction to Algorithms".
	 */

	module.exports = List;

	function List() {
	  var sentinel = {};
	  sentinel._next = sentinel._prev = sentinel;
	  this._sentinel = sentinel;
	}

	List.prototype.dequeue = function() {
	  var sentinel = this._sentinel;
	  var entry = sentinel._prev;
	  if (entry !== sentinel) {
	    unlink(entry);
	    return entry;
	  }
	};

	List.prototype.enqueue = function(entry) {
	  var sentinel = this._sentinel;
	  if (entry._prev && entry._next) {
	    unlink(entry);
	  }
	  entry._next = sentinel._next;
	  sentinel._next._prev = entry;
	  sentinel._next = entry;
	  entry._prev = sentinel;
	};

	List.prototype.toString = function() {
	  var strs = [];
	  var sentinel = this._sentinel;
	  var curr = sentinel._prev;
	  while (curr !== sentinel) {
	    strs.push(JSON.stringify(curr, filterOutLinks));
	    curr = curr._prev;
	  }
	  return "[" + strs.join(", ") + "]";
	};

	function unlink(entry) {
	  entry._prev._next = entry._next;
	  entry._next._prev = entry._prev;
	  delete entry._next;
	  delete entry._prev;
	}

	function filterOutLinks(k, v) {
	  if (k !== "_next" && k !== "_prev") {
	    return v;
	  }
	}


/***/ }),
/* 269 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	var _ = __webpack_require__(221);
	var util = __webpack_require__(270);

	module.exports = {
	  run: run,
	  undo: undo
	};

	/*
	 * Breaks any long edges in the graph into short segments that span 1 layer
	 * each. This operation is undoable with the denormalize function.
	 *
	 * Pre-conditions:
	 *
	 *    1. The input graph is a DAG.
	 *    2. Each node in the graph has a "rank" property.
	 *
	 * Post-condition:
	 *
	 *    1. All edges in the graph have a length of 1.
	 *    2. Dummy nodes are added where edges have been split into segments.
	 *    3. The graph is augmented with a "dummyChains" attribute which contains
	 *       the first dummy in each chain of dummy nodes produced.
	 */
	function run(g) {
	  g.graph().dummyChains = [];
	  _.forEach(g.edges(), function(edge) { normalizeEdge(g, edge); });
	}

	function normalizeEdge(g, e) {
	  var v = e.v;
	  var vRank = g.node(v).rank;
	  var w = e.w;
	  var wRank = g.node(w).rank;
	  var name = e.name;
	  var edgeLabel = g.edge(e);
	  var labelRank = edgeLabel.labelRank;

	  if (wRank === vRank + 1) return;

	  g.removeEdge(e);

	  var dummy, attrs, i;
	  for (i = 0, ++vRank; vRank < wRank; ++i, ++vRank) {
	    edgeLabel.points = [];
	    attrs = {
	      width: 0, height: 0,
	      edgeLabel: edgeLabel, edgeObj: e,
	      rank: vRank
	    };
	    dummy = util.addDummyNode(g, "edge", attrs, "_d");
	    if (vRank === labelRank) {
	      attrs.width = edgeLabel.width;
	      attrs.height = edgeLabel.height;
	      attrs.dummy = "edge-label";
	      attrs.labelpos = edgeLabel.labelpos;
	    }
	    g.setEdge(v, dummy, { weight: edgeLabel.weight }, name);
	    if (i === 0) {
	      g.graph().dummyChains.push(dummy);
	    }
	    v = dummy;
	  }

	  g.setEdge(v, w, { weight: edgeLabel.weight }, name);
	}

	function undo(g) {
	  _.forEach(g.graph().dummyChains, function(v) {
	    var node = g.node(v);
	    var origLabel = node.edgeLabel;
	    var w;
	    g.setEdge(node.edgeObj, origLabel);
	    while (node.dummy) {
	      w = g.successors(v)[0];
	      g.removeNode(v);
	      origLabel.points.push({ x: node.x, y: node.y });
	      if (node.dummy === "edge-label") {
	        origLabel.x = node.x;
	        origLabel.y = node.y;
	        origLabel.width = node.width;
	        origLabel.height = node.height;
	      }
	      v = w;
	      node = g.node(v);
	    }
	  });
	}


/***/ }),
/* 270 */
/***/ (function(module, exports, __webpack_require__) {

	/* eslint "no-console": off */

	"use strict";

	var _ = __webpack_require__(221);
	var Graph = __webpack_require__(4).Graph;

	module.exports = {
	  addDummyNode: addDummyNode,
	  simplify: simplify,
	  asNonCompoundGraph: asNonCompoundGraph,
	  successorWeights: successorWeights,
	  predecessorWeights: predecessorWeights,
	  intersectRect: intersectRect,
	  buildLayerMatrix: buildLayerMatrix,
	  normalizeRanks: normalizeRanks,
	  removeEmptyRanks: removeEmptyRanks,
	  addBorderNode: addBorderNode,
	  maxRank: maxRank,
	  partition: partition,
	  time: time,
	  notime: notime
	};

	/*
	 * Adds a dummy node to the graph and return v.
	 */
	function addDummyNode(g, type, attrs, name) {
	  var v;
	  do {
	    v = _.uniqueId(name);
	  } while (g.hasNode(v));

	  attrs.dummy = type;
	  g.setNode(v, attrs);
	  return v;
	}

	/*
	 * Returns a new graph with only simple edges. Handles aggregation of data
	 * associated with multi-edges.
	 */
	function simplify(g) {
	  var simplified = new Graph().setGraph(g.graph());
	  _.forEach(g.nodes(), function(v) { simplified.setNode(v, g.node(v)); });
	  _.forEach(g.edges(), function(e) {
	    var simpleLabel = simplified.edge(e.v, e.w) || { weight: 0, minlen: 1 };
	    var label = g.edge(e);
	    simplified.setEdge(e.v, e.w, {
	      weight: simpleLabel.weight + label.weight,
	      minlen: Math.max(simpleLabel.minlen, label.minlen)
	    });
	  });
	  return simplified;
	}

	function asNonCompoundGraph(g) {
	  var simplified = new Graph({ multigraph: g.isMultigraph() }).setGraph(g.graph());
	  _.forEach(g.nodes(), function(v) {
	    if (!g.children(v).length) {
	      simplified.setNode(v, g.node(v));
	    }
	  });
	  _.forEach(g.edges(), function(e) {
	    simplified.setEdge(e, g.edge(e));
	  });
	  return simplified;
	}

	function successorWeights(g) {
	  var weightMap = _.map(g.nodes(), function(v) {
	    var sucs = {};
	    _.forEach(g.outEdges(v), function(e) {
	      sucs[e.w] = (sucs[e.w] || 0) + g.edge(e).weight;
	    });
	    return sucs;
	  });
	  return _.zipObject(g.nodes(), weightMap);
	}

	function predecessorWeights(g) {
	  var weightMap = _.map(g.nodes(), function(v) {
	    var preds = {};
	    _.forEach(g.inEdges(v), function(e) {
	      preds[e.v] = (preds[e.v] || 0) + g.edge(e).weight;
	    });
	    return preds;
	  });
	  return _.zipObject(g.nodes(), weightMap);
	}

	/*
	 * Finds where a line starting at point ({x, y}) would intersect a rectangle
	 * ({x, y, width, height}) if it were pointing at the rectangle's center.
	 */
	function intersectRect(rect, point) {
	  var x = rect.x;
	  var y = rect.y;

	  // Rectangle intersection algorithm from:
	  // http://math.stackexchange.com/questions/108113/find-edge-between-two-boxes
	  var dx = point.x - x;
	  var dy = point.y - y;
	  var w = rect.width / 2;
	  var h = rect.height / 2;

	  if (!dx && !dy) {
	    throw new Error("Not possible to find intersection inside of the rectangle");
	  }

	  var sx, sy;
	  if (Math.abs(dy) * w > Math.abs(dx) * h) {
	    // Intersection is top or bottom of rect.
	    if (dy < 0) {
	      h = -h;
	    }
	    sx = h * dx / dy;
	    sy = h;
	  } else {
	    // Intersection is left or right of rect.
	    if (dx < 0) {
	      w = -w;
	    }
	    sx = w;
	    sy = w * dy / dx;
	  }

	  return { x: x + sx, y: y + sy };
	}

	/*
	 * Given a DAG with each node assigned "rank" and "order" properties, this
	 * function will produce a matrix with the ids of each node.
	 */
	function buildLayerMatrix(g) {
	  var layering = _.map(_.range(maxRank(g) + 1), function() { return []; });
	  _.forEach(g.nodes(), function(v) {
	    var node = g.node(v);
	    var rank = node.rank;
	    if (!_.isUndefined(rank)) {
	      layering[rank][node.order] = v;
	    }
	  });
	  return layering;
	}

	/*
	 * Adjusts the ranks for all nodes in the graph such that all nodes v have
	 * rank(v) >= 0 and at least one node w has rank(w) = 0.
	 */
	function normalizeRanks(g) {
	  var min = _.min(_.map(g.nodes(), function(v) { return g.node(v).rank; }));
	  _.forEach(g.nodes(), function(v) {
	    var node = g.node(v);
	    if (_.has(node, "rank")) {
	      node.rank -= min;
	    }
	  });
	}

	function removeEmptyRanks(g) {
	  // Ranks may not start at 0, so we need to offset them
	  var offset = _.min(_.map(g.nodes(), function(v) { return g.node(v).rank; }));

	  var layers = [];
	  _.forEach(g.nodes(), function(v) {
	    var rank = g.node(v).rank - offset;
	    if (!layers[rank]) {
	      layers[rank] = [];
	    }
	    layers[rank].push(v);
	  });

	  var delta = 0;
	  var nodeRankFactor = g.graph().nodeRankFactor;
	  _.forEach(layers, function(vs, i) {
	    if (_.isUndefined(vs) && i % nodeRankFactor !== 0) {
	      --delta;
	    } else if (delta) {
	      _.forEach(vs, function(v) { g.node(v).rank += delta; });
	    }
	  });
	}

	function addBorderNode(g, prefix, rank, order) {
	  var node = {
	    width: 0,
	    height: 0
	  };
	  if (arguments.length >= 4) {
	    node.rank = rank;
	    node.order = order;
	  }
	  return addDummyNode(g, "border", node, prefix);
	}

	function maxRank(g) {
	  return _.max(_.map(g.nodes(), function(v) {
	    var rank = g.node(v).rank;
	    if (!_.isUndefined(rank)) {
	      return rank;
	    }
	  }));
	}

	/*
	 * Partition a collection into two groups: `lhs` and `rhs`. If the supplied
	 * function returns true for an entry it goes into `lhs`. Otherwise it goes
	 * into `rhs.
	 */
	function partition(collection, fn) {
	  var result = { lhs: [], rhs: [] };
	  _.forEach(collection, function(value) {
	    if (fn(value)) {
	      result.lhs.push(value);
	    } else {
	      result.rhs.push(value);
	    }
	  });
	  return result;
	}

	/*
	 * Returns a new function that wraps `fn` with a timer. The wrapper logs the
	 * time it takes to execute the function.
	 */
	function time(name, fn) {
	  var start = _.now();
	  try {
	    return fn();
	  } finally {
	    console.log(name + " time: " + (_.now() - start) + "ms");
	  }
	}

	function notime(name, fn) {
	  return fn();
	}


/***/ }),
/* 271 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	var rankUtil = __webpack_require__(272);
	var longestPath = rankUtil.longestPath;
	var feasibleTree = __webpack_require__(273);
	var networkSimplex = __webpack_require__(274);

	module.exports = rank;

	/*
	 * Assigns a rank to each node in the input graph that respects the "minlen"
	 * constraint specified on edges between nodes.
	 *
	 * This basic structure is derived from Gansner, et al., "A Technique for
	 * Drawing Directed Graphs."
	 *
	 * Pre-conditions:
	 *
	 *    1. Graph must be a connected DAG
	 *    2. Graph nodes must be objects
	 *    3. Graph edges must have "weight" and "minlen" attributes
	 *
	 * Post-conditions:
	 *
	 *    1. Graph nodes will have a "rank" attribute based on the results of the
	 *       algorithm. Ranks can start at any index (including negative), we'll
	 *       fix them up later.
	 */
	function rank(g) {
	  switch(g.graph().ranker) {
	  case "network-simplex": networkSimplexRanker(g); break;
	  case "tight-tree": tightTreeRanker(g); break;
	  case "longest-path": longestPathRanker(g); break;
	  default: networkSimplexRanker(g);
	  }
	}

	// A fast and simple ranker, but results are far from optimal.
	var longestPathRanker = longestPath;

	function tightTreeRanker(g) {
	  longestPath(g);
	  feasibleTree(g);
	}

	function networkSimplexRanker(g) {
	  networkSimplex(g);
	}


/***/ }),
/* 272 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	var _ = __webpack_require__(221);

	module.exports = {
	  longestPath: longestPath,
	  slack: slack
	};

	/*
	 * Initializes ranks for the input graph using the longest path algorithm. This
	 * algorithm scales well and is fast in practice, it yields rather poor
	 * solutions. Nodes are pushed to the lowest layer possible, leaving the bottom
	 * ranks wide and leaving edges longer than necessary. However, due to its
	 * speed, this algorithm is good for getting an initial ranking that can be fed
	 * into other algorithms.
	 *
	 * This algorithm does not normalize layers because it will be used by other
	 * algorithms in most cases. If using this algorithm directly, be sure to
	 * run normalize at the end.
	 *
	 * Pre-conditions:
	 *
	 *    1. Input graph is a DAG.
	 *    2. Input graph node labels can be assigned properties.
	 *
	 * Post-conditions:
	 *
	 *    1. Each node will be assign an (unnormalized) "rank" property.
	 */
	function longestPath(g) {
	  var visited = {};

	  function dfs(v) {
	    var label = g.node(v);
	    if (_.has(visited, v)) {
	      return label.rank;
	    }
	    visited[v] = true;

	    var rank = _.min(_.map(g.outEdges(v), function(e) {
	      return dfs(e.w) - g.edge(e).minlen;
	    }));

	    if (rank === Number.POSITIVE_INFINITY || // return value of _.map([]) for Lodash 3
	        rank === undefined || // return value of _.map([]) for Lodash 4
	        rank === null) { // return value of _.map([null])
	      rank = 0;
	    }

	    return (label.rank = rank);
	  }

	  _.forEach(g.sources(), dfs);
	}

	/*
	 * Returns the amount of slack for the given edge. The slack is defined as the
	 * difference between the length of the edge and its minimum length.
	 */
	function slack(g, e) {
	  return g.node(e.w).rank - g.node(e.v).rank - g.edge(e).minlen;
	}


/***/ }),
/* 273 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	var _ = __webpack_require__(221);
	var Graph = __webpack_require__(4).Graph;
	var slack = __webpack_require__(272).slack;

	module.exports = feasibleTree;

	/*
	 * Constructs a spanning tree with tight edges and adjusted the input node's
	 * ranks to achieve this. A tight edge is one that is has a length that matches
	 * its "minlen" attribute.
	 *
	 * The basic structure for this function is derived from Gansner, et al., "A
	 * Technique for Drawing Directed Graphs."
	 *
	 * Pre-conditions:
	 *
	 *    1. Graph must be a DAG.
	 *    2. Graph must be connected.
	 *    3. Graph must have at least one node.
	 *    5. Graph nodes must have been previously assigned a "rank" property that
	 *       respects the "minlen" property of incident edges.
	 *    6. Graph edges must have a "minlen" property.
	 *
	 * Post-conditions:
	 *
	 *    - Graph nodes will have their rank adjusted to ensure that all edges are
	 *      tight.
	 *
	 * Returns a tree (undirected graph) that is constructed using only "tight"
	 * edges.
	 */
	function feasibleTree(g) {
	  var t = new Graph({ directed: false });

	  // Choose arbitrary node from which to start our tree
	  var start = g.nodes()[0];
	  var size = g.nodeCount();
	  t.setNode(start, {});

	  var edge, delta;
	  while (tightTree(t, g) < size) {
	    edge = findMinSlackEdge(t, g);
	    delta = t.hasNode(edge.v) ? slack(g, edge) : -slack(g, edge);
	    shiftRanks(t, g, delta);
	  }

	  return t;
	}

	/*
	 * Finds a maximal tree of tight edges and returns the number of nodes in the
	 * tree.
	 */
	function tightTree(t, g) {
	  function dfs(v) {
	    _.forEach(g.nodeEdges(v), function(e) {
	      var edgeV = e.v,
	        w = (v === edgeV) ? e.w : edgeV;
	      if (!t.hasNode(w) && !slack(g, e)) {
	        t.setNode(w, {});
	        t.setEdge(v, w, {});
	        dfs(w);
	      }
	    });
	  }

	  _.forEach(t.nodes(), dfs);
	  return t.nodeCount();
	}

	/*
	 * Finds the edge with the smallest slack that is incident on tree and returns
	 * it.
	 */
	function findMinSlackEdge(t, g) {
	  return _.minBy(g.edges(), function(e) {
	    if (t.hasNode(e.v) !== t.hasNode(e.w)) {
	      return slack(g, e);
	    }
	  });
	}

	function shiftRanks(t, g, delta) {
	  _.forEach(t.nodes(), function(v) {
	    g.node(v).rank += delta;
	  });
	}


/***/ }),
/* 274 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	var _ = __webpack_require__(221);
	var feasibleTree = __webpack_require__(273);
	var slack = __webpack_require__(272).slack;
	var initRank = __webpack_require__(272).longestPath;
	var preorder = __webpack_require__(4).alg.preorder;
	var postorder = __webpack_require__(4).alg.postorder;
	var simplify = __webpack_require__(270).simplify;

	module.exports = networkSimplex;

	// Expose some internals for testing purposes
	networkSimplex.initLowLimValues = initLowLimValues;
	networkSimplex.initCutValues = initCutValues;
	networkSimplex.calcCutValue = calcCutValue;
	networkSimplex.leaveEdge = leaveEdge;
	networkSimplex.enterEdge = enterEdge;
	networkSimplex.exchangeEdges = exchangeEdges;

	/*
	 * The network simplex algorithm assigns ranks to each node in the input graph
	 * and iteratively improves the ranking to reduce the length of edges.
	 *
	 * Preconditions:
	 *
	 *    1. The input graph must be a DAG.
	 *    2. All nodes in the graph must have an object value.
	 *    3. All edges in the graph must have "minlen" and "weight" attributes.
	 *
	 * Postconditions:
	 *
	 *    1. All nodes in the graph will have an assigned "rank" attribute that has
	 *       been optimized by the network simplex algorithm. Ranks start at 0.
	 *
	 *
	 * A rough sketch of the algorithm is as follows:
	 *
	 *    1. Assign initial ranks to each node. We use the longest path algorithm,
	 *       which assigns ranks to the lowest position possible. In general this
	 *       leads to very wide bottom ranks and unnecessarily long edges.
	 *    2. Construct a feasible tight tree. A tight tree is one such that all
	 *       edges in the tree have no slack (difference between length of edge
	 *       and minlen for the edge). This by itself greatly improves the assigned
	 *       rankings by shorting edges.
	 *    3. Iteratively find edges that have negative cut values. Generally a
	 *       negative cut value indicates that the edge could be removed and a new
	 *       tree edge could be added to produce a more compact graph.
	 *
	 * Much of the algorithms here are derived from Gansner, et al., "A Technique
	 * for Drawing Directed Graphs." The structure of the file roughly follows the
	 * structure of the overall algorithm.
	 */
	function networkSimplex(g) {
	  g = simplify(g);
	  initRank(g);
	  var t = feasibleTree(g);
	  initLowLimValues(t);
	  initCutValues(t, g);

	  var e, f;
	  while ((e = leaveEdge(t))) {
	    f = enterEdge(t, g, e);
	    exchangeEdges(t, g, e, f);
	  }
	}

	/*
	 * Initializes cut values for all edges in the tree.
	 */
	function initCutValues(t, g) {
	  var vs = postorder(t, t.nodes());
	  vs = vs.slice(0, vs.length - 1);
	  _.forEach(vs, function(v) {
	    assignCutValue(t, g, v);
	  });
	}

	function assignCutValue(t, g, child) {
	  var childLab = t.node(child);
	  var parent = childLab.parent;
	  t.edge(child, parent).cutvalue = calcCutValue(t, g, child);
	}

	/*
	 * Given the tight tree, its graph, and a child in the graph calculate and
	 * return the cut value for the edge between the child and its parent.
	 */
	function calcCutValue(t, g, child) {
	  var childLab = t.node(child);
	  var parent = childLab.parent;
	  // True if the child is on the tail end of the edge in the directed graph
	  var childIsTail = true;
	  // The graph's view of the tree edge we're inspecting
	  var graphEdge = g.edge(child, parent);
	  // The accumulated cut value for the edge between this node and its parent
	  var cutValue = 0;

	  if (!graphEdge) {
	    childIsTail = false;
	    graphEdge = g.edge(parent, child);
	  }

	  cutValue = graphEdge.weight;

	  _.forEach(g.nodeEdges(child), function(e) {
	    var isOutEdge = e.v === child,
	      other = isOutEdge ? e.w : e.v;

	    if (other !== parent) {
	      var pointsToHead = isOutEdge === childIsTail,
	        otherWeight = g.edge(e).weight;

	      cutValue += pointsToHead ? otherWeight : -otherWeight;
	      if (isTreeEdge(t, child, other)) {
	        var otherCutValue = t.edge(child, other).cutvalue;
	        cutValue += pointsToHead ? -otherCutValue : otherCutValue;
	      }
	    }
	  });

	  return cutValue;
	}

	function initLowLimValues(tree, root) {
	  if (arguments.length < 2) {
	    root = tree.nodes()[0];
	  }
	  dfsAssignLowLim(tree, {}, 1, root);
	}

	function dfsAssignLowLim(tree, visited, nextLim, v, parent) {
	  var low = nextLim;
	  var label = tree.node(v);

	  visited[v] = true;
	  _.forEach(tree.neighbors(v), function(w) {
	    if (!_.has(visited, w)) {
	      nextLim = dfsAssignLowLim(tree, visited, nextLim, w, v);
	    }
	  });

	  label.low = low;
	  label.lim = nextLim++;
	  if (parent) {
	    label.parent = parent;
	  } else {
	    // TODO should be able to remove this when we incrementally update low lim
	    delete label.parent;
	  }

	  return nextLim;
	}

	function leaveEdge(tree) {
	  return _.find(tree.edges(), function(e) {
	    return tree.edge(e).cutvalue < 0;
	  });
	}

	function enterEdge(t, g, edge) {
	  var v = edge.v;
	  var w = edge.w;

	  // For the rest of this function we assume that v is the tail and w is the
	  // head, so if we don't have this edge in the graph we should flip it to
	  // match the correct orientation.
	  if (!g.hasEdge(v, w)) {
	    v = edge.w;
	    w = edge.v;
	  }

	  var vLabel = t.node(v);
	  var wLabel = t.node(w);
	  var tailLabel = vLabel;
	  var flip = false;

	  // If the root is in the tail of the edge then we need to flip the logic that
	  // checks for the head and tail nodes in the candidates function below.
	  if (vLabel.lim > wLabel.lim) {
	    tailLabel = wLabel;
	    flip = true;
	  }

	  var candidates = _.filter(g.edges(), function(edge) {
	    return flip === isDescendant(t, t.node(edge.v), tailLabel) &&
	           flip !== isDescendant(t, t.node(edge.w), tailLabel);
	  });

	  return _.minBy(candidates, function(edge) { return slack(g, edge); });
	}

	function exchangeEdges(t, g, e, f) {
	  var v = e.v;
	  var w = e.w;
	  t.removeEdge(v, w);
	  t.setEdge(f.v, f.w, {});
	  initLowLimValues(t);
	  initCutValues(t, g);
	  updateRanks(t, g);
	}

	function updateRanks(t, g) {
	  var root = _.find(t.nodes(), function(v) { return !g.node(v).parent; });
	  var vs = preorder(t, root);
	  vs = vs.slice(1);
	  _.forEach(vs, function(v) {
	    var parent = t.node(v).parent,
	      edge = g.edge(v, parent),
	      flipped = false;

	    if (!edge) {
	      edge = g.edge(parent, v);
	      flipped = true;
	    }

	    g.node(v).rank = g.node(parent).rank + (flipped ? edge.minlen : -edge.minlen);
	  });
	}

	/*
	 * Returns true if the edge is in the tree.
	 */
	function isTreeEdge(tree, u, v) {
	  return tree.hasEdge(u, v);
	}

	/*
	 * Returns true if the specified node is descendant of the root node per the
	 * assigned low and lim attributes in the tree.
	 */
	function isDescendant(tree, vLabel, rootLabel) {
	  return rootLabel.low <= vLabel.lim && vLabel.lim <= rootLabel.lim;
	}


/***/ }),
/* 275 */
/***/ (function(module, exports, __webpack_require__) {

	var _ = __webpack_require__(221);

	module.exports = parentDummyChains;

	function parentDummyChains(g) {
	  var postorderNums = postorder(g);

	  _.forEach(g.graph().dummyChains, function(v) {
	    var node = g.node(v);
	    var edgeObj = node.edgeObj;
	    var pathData = findPath(g, postorderNums, edgeObj.v, edgeObj.w);
	    var path = pathData.path;
	    var lca = pathData.lca;
	    var pathIdx = 0;
	    var pathV = path[pathIdx];
	    var ascending = true;

	    while (v !== edgeObj.w) {
	      node = g.node(v);

	      if (ascending) {
	        while ((pathV = path[pathIdx]) !== lca &&
	               g.node(pathV).maxRank < node.rank) {
	          pathIdx++;
	        }

	        if (pathV === lca) {
	          ascending = false;
	        }
	      }

	      if (!ascending) {
	        while (pathIdx < path.length - 1 &&
	               g.node(pathV = path[pathIdx + 1]).minRank <= node.rank) {
	          pathIdx++;
	        }
	        pathV = path[pathIdx];
	      }

	      g.setParent(v, pathV);
	      v = g.successors(v)[0];
	    }
	  });
	}

	// Find a path from v to w through the lowest common ancestor (LCA). Return the
	// full path and the LCA.
	function findPath(g, postorderNums, v, w) {
	  var vPath = [];
	  var wPath = [];
	  var low = Math.min(postorderNums[v].low, postorderNums[w].low);
	  var lim = Math.max(postorderNums[v].lim, postorderNums[w].lim);
	  var parent;
	  var lca;

	  // Traverse up from v to find the LCA
	  parent = v;
	  do {
	    parent = g.parent(parent);
	    vPath.push(parent);
	  } while (parent &&
	           (postorderNums[parent].low > low || lim > postorderNums[parent].lim));
	  lca = parent;

	  // Traverse from w to LCA
	  parent = w;
	  while ((parent = g.parent(parent)) !== lca) {
	    wPath.push(parent);
	  }

	  return { path: vPath.concat(wPath.reverse()), lca: lca };
	}

	function postorder(g) {
	  var result = {};
	  var lim = 0;

	  function dfs(v) {
	    var low = lim;
	    _.forEach(g.children(v), dfs);
	    result[v] = { low: low, lim: lim++ };
	  }
	  _.forEach(g.children(), dfs);

	  return result;
	}


/***/ }),
/* 276 */
/***/ (function(module, exports, __webpack_require__) {

	var _ = __webpack_require__(221);
	var util = __webpack_require__(270);

	module.exports = {
	  run: run,
	  cleanup: cleanup
	};

	/*
	 * A nesting graph creates dummy nodes for the tops and bottoms of subgraphs,
	 * adds appropriate edges to ensure that all cluster nodes are placed between
	 * these boundries, and ensures that the graph is connected.
	 *
	 * In addition we ensure, through the use of the minlen property, that nodes
	 * and subgraph border nodes to not end up on the same rank.
	 *
	 * Preconditions:
	 *
	 *    1. Input graph is a DAG
	 *    2. Nodes in the input graph has a minlen attribute
	 *
	 * Postconditions:
	 *
	 *    1. Input graph is connected.
	 *    2. Dummy nodes are added for the tops and bottoms of subgraphs.
	 *    3. The minlen attribute for nodes is adjusted to ensure nodes do not
	 *       get placed on the same rank as subgraph border nodes.
	 *
	 * The nesting graph idea comes from Sander, "Layout of Compound Directed
	 * Graphs."
	 */
	function run(g) {
	  var root = util.addDummyNode(g, "root", {}, "_root");
	  var depths = treeDepths(g);
	  var height = _.max(_.values(depths)) - 1; // Note: depths is an Object not an array
	  var nodeSep = 2 * height + 1;

	  g.graph().nestingRoot = root;

	  // Multiply minlen by nodeSep to align nodes on non-border ranks.
	  _.forEach(g.edges(), function(e) { g.edge(e).minlen *= nodeSep; });

	  // Calculate a weight that is sufficient to keep subgraphs vertically compact
	  var weight = sumWeights(g) + 1;

	  // Create border nodes and link them up
	  _.forEach(g.children(), function(child) {
	    dfs(g, root, nodeSep, weight, height, depths, child);
	  });

	  // Save the multiplier for node layers for later removal of empty border
	  // layers.
	  g.graph().nodeRankFactor = nodeSep;
	}

	function dfs(g, root, nodeSep, weight, height, depths, v) {
	  var children = g.children(v);
	  if (!children.length) {
	    if (v !== root) {
	      g.setEdge(root, v, { weight: 0, minlen: nodeSep });
	    }
	    return;
	  }

	  var top = util.addBorderNode(g, "_bt");
	  var bottom = util.addBorderNode(g, "_bb");
	  var label = g.node(v);

	  g.setParent(top, v);
	  label.borderTop = top;
	  g.setParent(bottom, v);
	  label.borderBottom = bottom;

	  _.forEach(children, function(child) {
	    dfs(g, root, nodeSep, weight, height, depths, child);

	    var childNode = g.node(child);
	    var childTop = childNode.borderTop ? childNode.borderTop : child;
	    var childBottom = childNode.borderBottom ? childNode.borderBottom : child;
	    var thisWeight = childNode.borderTop ? weight : 2 * weight;
	    var minlen = childTop !== childBottom ? 1 : height - depths[v] + 1;

	    g.setEdge(top, childTop, {
	      weight: thisWeight,
	      minlen: minlen,
	      nestingEdge: true
	    });

	    g.setEdge(childBottom, bottom, {
	      weight: thisWeight,
	      minlen: minlen,
	      nestingEdge: true
	    });
	  });

	  if (!g.parent(v)) {
	    g.setEdge(root, top, { weight: 0, minlen: height + depths[v] });
	  }
	}

	function treeDepths(g) {
	  var depths = {};
	  function dfs(v, depth) {
	    var children = g.children(v);
	    if (children && children.length) {
	      _.forEach(children, function(child) {
	        dfs(child, depth + 1);
	      });
	    }
	    depths[v] = depth;
	  }
	  _.forEach(g.children(), function(v) { dfs(v, 1); });
	  return depths;
	}

	function sumWeights(g) {
	  return _.reduce(g.edges(), function(acc, e) {
	    return acc + g.edge(e).weight;
	  }, 0);
	}

	function cleanup(g) {
	  var graphLabel = g.graph();
	  g.removeNode(graphLabel.nestingRoot);
	  delete graphLabel.nestingRoot;
	  _.forEach(g.edges(), function(e) {
	    var edge = g.edge(e);
	    if (edge.nestingEdge) {
	      g.removeEdge(e);
	    }
	  });
	}


/***/ }),
/* 277 */
/***/ (function(module, exports, __webpack_require__) {

	var _ = __webpack_require__(221);
	var util = __webpack_require__(270);

	module.exports = addBorderSegments;

	function addBorderSegments(g) {
	  function dfs(v) {
	    var children = g.children(v);
	    var node = g.node(v);
	    if (children.length) {
	      _.forEach(children, dfs);
	    }

	    if (_.has(node, "minRank")) {
	      node.borderLeft = [];
	      node.borderRight = [];
	      for (var rank = node.minRank, maxRank = node.maxRank + 1;
	        rank < maxRank;
	        ++rank) {
	        addBorderNode(g, "borderLeft", "_bl", v, node, rank);
	        addBorderNode(g, "borderRight", "_br", v, node, rank);
	      }
	    }
	  }

	  _.forEach(g.children(), dfs);
	}

	function addBorderNode(g, prop, prefix, sg, sgNode, rank) {
	  var label = { width: 0, height: 0, rank: rank, borderType: prop };
	  var prev = sgNode[prop][rank - 1];
	  var curr = util.addDummyNode(g, "border", label, prefix);
	  sgNode[prop][rank] = curr;
	  g.setParent(curr, sg);
	  if (prev) {
	    g.setEdge(prev, curr, { weight: 1 });
	  }
	}


/***/ }),
/* 278 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	var _ = __webpack_require__(221);

	module.exports = {
	  adjust: adjust,
	  undo: undo
	};

	function adjust(g) {
	  var rankDir = g.graph().rankdir.toLowerCase();
	  if (rankDir === "lr" || rankDir === "rl") {
	    swapWidthHeight(g);
	  }
	}

	function undo(g) {
	  var rankDir = g.graph().rankdir.toLowerCase();
	  if (rankDir === "bt" || rankDir === "rl") {
	    reverseY(g);
	  }

	  if (rankDir === "lr" || rankDir === "rl") {
	    swapXY(g);
	    swapWidthHeight(g);
	  }
	}

	function swapWidthHeight(g) {
	  _.forEach(g.nodes(), function(v) { swapWidthHeightOne(g.node(v)); });
	  _.forEach(g.edges(), function(e) { swapWidthHeightOne(g.edge(e)); });
	}

	function swapWidthHeightOne(attrs) {
	  var w = attrs.width;
	  attrs.width = attrs.height;
	  attrs.height = w;
	}

	function reverseY(g) {
	  _.forEach(g.nodes(), function(v) { reverseYOne(g.node(v)); });

	  _.forEach(g.edges(), function(e) {
	    var edge = g.edge(e);
	    _.forEach(edge.points, reverseYOne);
	    if (_.has(edge, "y")) {
	      reverseYOne(edge);
	    }
	  });
	}

	function reverseYOne(attrs) {
	  attrs.y = -attrs.y;
	}

	function swapXY(g) {
	  _.forEach(g.nodes(), function(v) { swapXYOne(g.node(v)); });

	  _.forEach(g.edges(), function(e) {
	    var edge = g.edge(e);
	    _.forEach(edge.points, swapXYOne);
	    if (_.has(edge, "x")) {
	      swapXYOne(edge);
	    }
	  });
	}

	function swapXYOne(attrs) {
	  var x = attrs.x;
	  attrs.x = attrs.y;
	  attrs.y = x;
	}


/***/ }),
/* 279 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	var _ = __webpack_require__(221);
	var initOrder = __webpack_require__(280);
	var crossCount = __webpack_require__(281);
	var sortSubgraph = __webpack_require__(282);
	var buildLayerGraph = __webpack_require__(286);
	var addSubgraphConstraints = __webpack_require__(287);
	var Graph = __webpack_require__(4).Graph;
	var util = __webpack_require__(270);

	module.exports = order;

	/*
	 * Applies heuristics to minimize edge crossings in the graph and sets the best
	 * order solution as an order attribute on each node.
	 *
	 * Pre-conditions:
	 *
	 *    1. Graph must be DAG
	 *    2. Graph nodes must be objects with a "rank" attribute
	 *    3. Graph edges must have the "weight" attribute
	 *
	 * Post-conditions:
	 *
	 *    1. Graph nodes will have an "order" attribute based on the results of the
	 *       algorithm.
	 */
	function order(g) {
	  var maxRank = util.maxRank(g),
	    downLayerGraphs = buildLayerGraphs(g, _.range(1, maxRank + 1), "inEdges"),
	    upLayerGraphs = buildLayerGraphs(g, _.range(maxRank - 1, -1, -1), "outEdges");

	  var layering = initOrder(g);
	  assignOrder(g, layering);

	  var bestCC = Number.POSITIVE_INFINITY,
	    best;

	  for (var i = 0, lastBest = 0; lastBest < 4; ++i, ++lastBest) {
	    sweepLayerGraphs(i % 2 ? downLayerGraphs : upLayerGraphs, i % 4 >= 2);

	    layering = util.buildLayerMatrix(g);
	    var cc = crossCount(g, layering);
	    if (cc < bestCC) {
	      lastBest = 0;
	      best = _.cloneDeep(layering);
	      bestCC = cc;
	    }
	  }

	  assignOrder(g, best);
	}

	function buildLayerGraphs(g, ranks, relationship) {
	  return _.map(ranks, function(rank) {
	    return buildLayerGraph(g, rank, relationship);
	  });
	}

	function sweepLayerGraphs(layerGraphs, biasRight) {
	  var cg = new Graph();
	  _.forEach(layerGraphs, function(lg) {
	    var root = lg.graph().root;
	    var sorted = sortSubgraph(lg, root, cg, biasRight);
	    _.forEach(sorted.vs, function(v, i) {
	      lg.node(v).order = i;
	    });
	    addSubgraphConstraints(lg, cg, sorted.vs);
	  });
	}

	function assignOrder(g, layering) {
	  _.forEach(layering, function(layer) {
	    _.forEach(layer, function(v, i) {
	      g.node(v).order = i;
	    });
	  });
	}


/***/ }),
/* 280 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	var _ = __webpack_require__(221);

	module.exports = initOrder;

	/*
	 * Assigns an initial order value for each node by performing a DFS search
	 * starting from nodes in the first rank. Nodes are assigned an order in their
	 * rank as they are first visited.
	 *
	 * This approach comes from Gansner, et al., "A Technique for Drawing Directed
	 * Graphs."
	 *
	 * Returns a layering matrix with an array per layer and each layer sorted by
	 * the order of its nodes.
	 */
	function initOrder(g) {
	  var visited = {};
	  var simpleNodes = _.filter(g.nodes(), function(v) {
	    return !g.children(v).length;
	  });
	  var maxRank = _.max(_.map(simpleNodes, function(v) { return g.node(v).rank; }));
	  var layers = _.map(_.range(maxRank + 1), function() { return []; });

	  function dfs(v) {
	    if (_.has(visited, v)) return;
	    visited[v] = true;
	    var node = g.node(v);
	    layers[node.rank].push(v);
	    _.forEach(g.successors(v), dfs);
	  }

	  var orderedVs = _.sortBy(simpleNodes, function(v) { return g.node(v).rank; });
	  _.forEach(orderedVs, dfs);

	  return layers;
	}


/***/ }),
/* 281 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	var _ = __webpack_require__(221);

	module.exports = crossCount;

	/*
	 * A function that takes a layering (an array of layers, each with an array of
	 * ordererd nodes) and a graph and returns a weighted crossing count.
	 *
	 * Pre-conditions:
	 *
	 *    1. Input graph must be simple (not a multigraph), directed, and include
	 *       only simple edges.
	 *    2. Edges in the input graph must have assigned weights.
	 *
	 * Post-conditions:
	 *
	 *    1. The graph and layering matrix are left unchanged.
	 *
	 * This algorithm is derived from Barth, et al., "Bilayer Cross Counting."
	 */
	function crossCount(g, layering) {
	  var cc = 0;
	  for (var i = 1; i < layering.length; ++i) {
	    cc += twoLayerCrossCount(g, layering[i-1], layering[i]);
	  }
	  return cc;
	}

	function twoLayerCrossCount(g, northLayer, southLayer) {
	  // Sort all of the edges between the north and south layers by their position
	  // in the north layer and then the south. Map these edges to the position of
	  // their head in the south layer.
	  var southPos = _.zipObject(southLayer,
	    _.map(southLayer, function (v, i) { return i; }));
	  var southEntries = _.flatten(_.map(northLayer, function(v) {
	    return _.sortBy(_.map(g.outEdges(v), function(e) {
	      return { pos: southPos[e.w], weight: g.edge(e).weight };
	    }), "pos");
	  }), true);

	  // Build the accumulator tree
	  var firstIndex = 1;
	  while (firstIndex < southLayer.length) firstIndex <<= 1;
	  var treeSize = 2 * firstIndex - 1;
	  firstIndex -= 1;
	  var tree = _.map(new Array(treeSize), function() { return 0; });

	  // Calculate the weighted crossings
	  var cc = 0;
	  _.forEach(southEntries.forEach(function(entry) {
	    var index = entry.pos + firstIndex;
	    tree[index] += entry.weight;
	    var weightSum = 0;
	    while (index > 0) {
	      if (index % 2) {
	        weightSum += tree[index + 1];
	      }
	      index = (index - 1) >> 1;
	      tree[index] += entry.weight;
	    }
	    cc += entry.weight * weightSum;
	  }));

	  return cc;
	}


/***/ }),
/* 282 */
/***/ (function(module, exports, __webpack_require__) {

	var _ = __webpack_require__(221);
	var barycenter = __webpack_require__(283);
	var resolveConflicts = __webpack_require__(284);
	var sort = __webpack_require__(285);

	module.exports = sortSubgraph;

	function sortSubgraph(g, v, cg, biasRight) {
	  var movable = g.children(v);
	  var node = g.node(v);
	  var bl = node ? node.borderLeft : undefined;
	  var br = node ? node.borderRight: undefined;
	  var subgraphs = {};

	  if (bl) {
	    movable = _.filter(movable, function(w) {
	      return w !== bl && w !== br;
	    });
	  }

	  var barycenters = barycenter(g, movable);
	  _.forEach(barycenters, function(entry) {
	    if (g.children(entry.v).length) {
	      var subgraphResult = sortSubgraph(g, entry.v, cg, biasRight);
	      subgraphs[entry.v] = subgraphResult;
	      if (_.has(subgraphResult, "barycenter")) {
	        mergeBarycenters(entry, subgraphResult);
	      }
	    }
	  });

	  var entries = resolveConflicts(barycenters, cg);
	  expandSubgraphs(entries, subgraphs);

	  var result = sort(entries, biasRight);

	  if (bl) {
	    result.vs = _.flatten([bl, result.vs, br], true);
	    if (g.predecessors(bl).length) {
	      var blPred = g.node(g.predecessors(bl)[0]),
	        brPred = g.node(g.predecessors(br)[0]);
	      if (!_.has(result, "barycenter")) {
	        result.barycenter = 0;
	        result.weight = 0;
	      }
	      result.barycenter = (result.barycenter * result.weight +
	                           blPred.order + brPred.order) / (result.weight + 2);
	      result.weight += 2;
	    }
	  }

	  return result;
	}

	function expandSubgraphs(entries, subgraphs) {
	  _.forEach(entries, function(entry) {
	    entry.vs = _.flatten(entry.vs.map(function(v) {
	      if (subgraphs[v]) {
	        return subgraphs[v].vs;
	      }
	      return v;
	    }), true);
	  });
	}

	function mergeBarycenters(target, other) {
	  if (!_.isUndefined(target.barycenter)) {
	    target.barycenter = (target.barycenter * target.weight +
	                         other.barycenter * other.weight) /
	                        (target.weight + other.weight);
	    target.weight += other.weight;
	  } else {
	    target.barycenter = other.barycenter;
	    target.weight = other.weight;
	  }
	}


/***/ }),
/* 283 */
/***/ (function(module, exports, __webpack_require__) {

	var _ = __webpack_require__(221);

	module.exports = barycenter;

	function barycenter(g, movable) {
	  return _.map(movable, function(v) {
	    var inV = g.inEdges(v);
	    if (!inV.length) {
	      return { v: v };
	    } else {
	      var result = _.reduce(inV, function(acc, e) {
	        var edge = g.edge(e),
	          nodeU = g.node(e.v);
	        return {
	          sum: acc.sum + (edge.weight * nodeU.order),
	          weight: acc.weight + edge.weight
	        };
	      }, { sum: 0, weight: 0 });

	      return {
	        v: v,
	        barycenter: result.sum / result.weight,
	        weight: result.weight
	      };
	    }
	  });
	}



/***/ }),
/* 284 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	var _ = __webpack_require__(221);

	module.exports = resolveConflicts;

	/*
	 * Given a list of entries of the form {v, barycenter, weight} and a
	 * constraint graph this function will resolve any conflicts between the
	 * constraint graph and the barycenters for the entries. If the barycenters for
	 * an entry would violate a constraint in the constraint graph then we coalesce
	 * the nodes in the conflict into a new node that respects the contraint and
	 * aggregates barycenter and weight information.
	 *
	 * This implementation is based on the description in Forster, "A Fast and
	 * Simple Hueristic for Constrained Two-Level Crossing Reduction," thought it
	 * differs in some specific details.
	 *
	 * Pre-conditions:
	 *
	 *    1. Each entry has the form {v, barycenter, weight}, or if the node has
	 *       no barycenter, then {v}.
	 *
	 * Returns:
	 *
	 *    A new list of entries of the form {vs, i, barycenter, weight}. The list
	 *    `vs` may either be a singleton or it may be an aggregation of nodes
	 *    ordered such that they do not violate constraints from the constraint
	 *    graph. The property `i` is the lowest original index of any of the
	 *    elements in `vs`.
	 */
	function resolveConflicts(entries, cg) {
	  var mappedEntries = {};
	  _.forEach(entries, function(entry, i) {
	    var tmp = mappedEntries[entry.v] = {
	      indegree: 0,
	      "in": [],
	      out: [],
	      vs: [entry.v],
	      i: i
	    };
	    if (!_.isUndefined(entry.barycenter)) {
	      tmp.barycenter = entry.barycenter;
	      tmp.weight = entry.weight;
	    }
	  });

	  _.forEach(cg.edges(), function(e) {
	    var entryV = mappedEntries[e.v];
	    var entryW = mappedEntries[e.w];
	    if (!_.isUndefined(entryV) && !_.isUndefined(entryW)) {
	      entryW.indegree++;
	      entryV.out.push(mappedEntries[e.w]);
	    }
	  });

	  var sourceSet = _.filter(mappedEntries, function(entry) {
	    return !entry.indegree;
	  });

	  return doResolveConflicts(sourceSet);
	}

	function doResolveConflicts(sourceSet) {
	  var entries = [];

	  function handleIn(vEntry) {
	    return function(uEntry) {
	      if (uEntry.merged) {
	        return;
	      }
	      if (_.isUndefined(uEntry.barycenter) ||
	          _.isUndefined(vEntry.barycenter) ||
	          uEntry.barycenter >= vEntry.barycenter) {
	        mergeEntries(vEntry, uEntry);
	      }
	    };
	  }

	  function handleOut(vEntry) {
	    return function(wEntry) {
	      wEntry["in"].push(vEntry);
	      if (--wEntry.indegree === 0) {
	        sourceSet.push(wEntry);
	      }
	    };
	  }

	  while (sourceSet.length) {
	    var entry = sourceSet.pop();
	    entries.push(entry);
	    _.forEach(entry["in"].reverse(), handleIn(entry));
	    _.forEach(entry.out, handleOut(entry));
	  }

	  return _.map(_.filter(entries, function(entry) { return !entry.merged; }),
	    function(entry) {
	      return _.pick(entry, ["vs", "i", "barycenter", "weight"]);
	    });

	}

	function mergeEntries(target, source) {
	  var sum = 0;
	  var weight = 0;

	  if (target.weight) {
	    sum += target.barycenter * target.weight;
	    weight += target.weight;
	  }

	  if (source.weight) {
	    sum += source.barycenter * source.weight;
	    weight += source.weight;
	  }

	  target.vs = source.vs.concat(target.vs);
	  target.barycenter = sum / weight;
	  target.weight = weight;
	  target.i = Math.min(source.i, target.i);
	  source.merged = true;
	}


/***/ }),
/* 285 */
/***/ (function(module, exports, __webpack_require__) {

	var _ = __webpack_require__(221);
	var util = __webpack_require__(270);

	module.exports = sort;

	function sort(entries, biasRight) {
	  var parts = util.partition(entries, function(entry) {
	    return _.has(entry, "barycenter");
	  });
	  var sortable = parts.lhs,
	    unsortable = _.sortBy(parts.rhs, function(entry) { return -entry.i; }),
	    vs = [],
	    sum = 0,
	    weight = 0,
	    vsIndex = 0;

	  sortable.sort(compareWithBias(!!biasRight));

	  vsIndex = consumeUnsortable(vs, unsortable, vsIndex);

	  _.forEach(sortable, function (entry) {
	    vsIndex += entry.vs.length;
	    vs.push(entry.vs);
	    sum += entry.barycenter * entry.weight;
	    weight += entry.weight;
	    vsIndex = consumeUnsortable(vs, unsortable, vsIndex);
	  });

	  var result = { vs: _.flatten(vs, true) };
	  if (weight) {
	    result.barycenter = sum / weight;
	    result.weight = weight;
	  }
	  return result;
	}

	function consumeUnsortable(vs, unsortable, index) {
	  var last;
	  while (unsortable.length && (last = _.last(unsortable)).i <= index) {
	    unsortable.pop();
	    vs.push(last.vs);
	    index++;
	  }
	  return index;
	}

	function compareWithBias(bias) {
	  return function(entryV, entryW) {
	    if (entryV.barycenter < entryW.barycenter) {
	      return -1;
	    } else if (entryV.barycenter > entryW.barycenter) {
	      return 1;
	    }

	    return !bias ? entryV.i - entryW.i : entryW.i - entryV.i;
	  };
	}


/***/ }),
/* 286 */
/***/ (function(module, exports, __webpack_require__) {

	var _ = __webpack_require__(221);
	var Graph = __webpack_require__(4).Graph;

	module.exports = buildLayerGraph;

	/*
	 * Constructs a graph that can be used to sort a layer of nodes. The graph will
	 * contain all base and subgraph nodes from the request layer in their original
	 * hierarchy and any edges that are incident on these nodes and are of the type
	 * requested by the "relationship" parameter.
	 *
	 * Nodes from the requested rank that do not have parents are assigned a root
	 * node in the output graph, which is set in the root graph attribute. This
	 * makes it easy to walk the hierarchy of movable nodes during ordering.
	 *
	 * Pre-conditions:
	 *
	 *    1. Input graph is a DAG
	 *    2. Base nodes in the input graph have a rank attribute
	 *    3. Subgraph nodes in the input graph has minRank and maxRank attributes
	 *    4. Edges have an assigned weight
	 *
	 * Post-conditions:
	 *
	 *    1. Output graph has all nodes in the movable rank with preserved
	 *       hierarchy.
	 *    2. Root nodes in the movable layer are made children of the node
	 *       indicated by the root attribute of the graph.
	 *    3. Non-movable nodes incident on movable nodes, selected by the
	 *       relationship parameter, are included in the graph (without hierarchy).
	 *    4. Edges incident on movable nodes, selected by the relationship
	 *       parameter, are added to the output graph.
	 *    5. The weights for copied edges are aggregated as need, since the output
	 *       graph is not a multi-graph.
	 */
	function buildLayerGraph(g, rank, relationship) {
	  var root = createRootNode(g),
	    result = new Graph({ compound: true }).setGraph({ root: root })
	      .setDefaultNodeLabel(function(v) { return g.node(v); });

	  _.forEach(g.nodes(), function(v) {
	    var node = g.node(v),
	      parent = g.parent(v);

	    if (node.rank === rank || node.minRank <= rank && rank <= node.maxRank) {
	      result.setNode(v);
	      result.setParent(v, parent || root);

	      // This assumes we have only short edges!
	      _.forEach(g[relationship](v), function(e) {
	        var u = e.v === v ? e.w : e.v,
	          edge = result.edge(u, v),
	          weight = !_.isUndefined(edge) ? edge.weight : 0;
	        result.setEdge(u, v, { weight: g.edge(e).weight + weight });
	      });

	      if (_.has(node, "minRank")) {
	        result.setNode(v, {
	          borderLeft: node.borderLeft[rank],
	          borderRight: node.borderRight[rank]
	        });
	      }
	    }
	  });

	  return result;
	}

	function createRootNode(g) {
	  var v;
	  while (g.hasNode((v = _.uniqueId("_root"))));
	  return v;
	}


/***/ }),
/* 287 */
/***/ (function(module, exports, __webpack_require__) {

	var _ = __webpack_require__(221);

	module.exports = addSubgraphConstraints;

	function addSubgraphConstraints(g, cg, vs) {
	  var prev = {},
	    rootPrev;

	  _.forEach(vs, function(v) {
	    var child = g.parent(v),
	      parent,
	      prevChild;
	    while (child) {
	      parent = g.parent(child);
	      if (parent) {
	        prevChild = prev[parent];
	        prev[parent] = child;
	      } else {
	        prevChild = rootPrev;
	        rootPrev = child;
	      }
	      if (prevChild && prevChild !== child) {
	        cg.setEdge(prevChild, child);
	        return;
	      }
	      child = parent;
	    }
	  });

	  /*
	  function dfs(v) {
	    var children = v ? g.children(v) : g.children();
	    if (children.length) {
	      var min = Number.POSITIVE_INFINITY,
	          subgraphs = [];
	      _.each(children, function(child) {
	        var childMin = dfs(child);
	        if (g.children(child).length) {
	          subgraphs.push({ v: child, order: childMin });
	        }
	        min = Math.min(min, childMin);
	      });
	      _.reduce(_.sortBy(subgraphs, "order"), function(prev, curr) {
	        cg.setEdge(prev.v, curr.v);
	        return curr;
	      });
	      return min;
	    }
	    return g.node(v).order;
	  }
	  dfs(undefined);
	  */
	}


/***/ }),
/* 288 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	var _ = __webpack_require__(221);
	var util = __webpack_require__(270);
	var positionX = __webpack_require__(289).positionX;

	module.exports = position;

	function position(g) {
	  g = util.asNonCompoundGraph(g);

	  positionY(g);
	  _.forEach(positionX(g), function(x, v) {
	    g.node(v).x = x;
	  });
	}

	function positionY(g) {
	  var layering = util.buildLayerMatrix(g);
	  var rankSep = g.graph().ranksep;
	  var prevY = 0;
	  _.forEach(layering, function(layer) {
	    var maxHeight = _.max(_.map(layer, function(v) { return g.node(v).height; }));
	    _.forEach(layer, function(v) {
	      g.node(v).y = prevY + maxHeight / 2;
	    });
	    prevY += maxHeight + rankSep;
	  });
	}



/***/ }),
/* 289 */
/***/ (function(module, exports, __webpack_require__) {

	"use strict";

	var _ = __webpack_require__(221);
	var Graph = __webpack_require__(4).Graph;
	var util = __webpack_require__(270);

	/*
	 * This module provides coordinate assignment based on Brandes and Köpf, "Fast
	 * and Simple Horizontal Coordinate Assignment."
	 */

	module.exports = {
	  positionX: positionX,
	  findType1Conflicts: findType1Conflicts,
	  findType2Conflicts: findType2Conflicts,
	  addConflict: addConflict,
	  hasConflict: hasConflict,
	  verticalAlignment: verticalAlignment,
	  horizontalCompaction: horizontalCompaction,
	  alignCoordinates: alignCoordinates,
	  findSmallestWidthAlignment: findSmallestWidthAlignment,
	  balance: balance
	};

	/*
	 * Marks all edges in the graph with a type-1 conflict with the "type1Conflict"
	 * property. A type-1 conflict is one where a non-inner segment crosses an
	 * inner segment. An inner segment is an edge with both incident nodes marked
	 * with the "dummy" property.
	 *
	 * This algorithm scans layer by layer, starting with the second, for type-1
	 * conflicts between the current layer and the previous layer. For each layer
	 * it scans the nodes from left to right until it reaches one that is incident
	 * on an inner segment. It then scans predecessors to determine if they have
	 * edges that cross that inner segment. At the end a final scan is done for all
	 * nodes on the current rank to see if they cross the last visited inner
	 * segment.
	 *
	 * This algorithm (safely) assumes that a dummy node will only be incident on a
	 * single node in the layers being scanned.
	 */
	function findType1Conflicts(g, layering) {
	  var conflicts = {};

	  function visitLayer(prevLayer, layer) {
	    var
	      // last visited node in the previous layer that is incident on an inner
	      // segment.
	      k0 = 0,
	      // Tracks the last node in this layer scanned for crossings with a type-1
	      // segment.
	      scanPos = 0,
	      prevLayerLength = prevLayer.length,
	      lastNode = _.last(layer);

	    _.forEach(layer, function(v, i) {
	      var w = findOtherInnerSegmentNode(g, v),
	        k1 = w ? g.node(w).order : prevLayerLength;

	      if (w || v === lastNode) {
	        _.forEach(layer.slice(scanPos, i +1), function(scanNode) {
	          _.forEach(g.predecessors(scanNode), function(u) {
	            var uLabel = g.node(u),
	              uPos = uLabel.order;
	            if ((uPos < k0 || k1 < uPos) &&
	                !(uLabel.dummy && g.node(scanNode).dummy)) {
	              addConflict(conflicts, u, scanNode);
	            }
	          });
	        });
	        scanPos = i + 1;
	        k0 = k1;
	      }
	    });

	    return layer;
	  }

	  _.reduce(layering, visitLayer);
	  return conflicts;
	}

	function findType2Conflicts(g, layering) {
	  var conflicts = {};

	  function scan(south, southPos, southEnd, prevNorthBorder, nextNorthBorder) {
	    var v;
	    _.forEach(_.range(southPos, southEnd), function(i) {
	      v = south[i];
	      if (g.node(v).dummy) {
	        _.forEach(g.predecessors(v), function(u) {
	          var uNode = g.node(u);
	          if (uNode.dummy &&
	              (uNode.order < prevNorthBorder || uNode.order > nextNorthBorder)) {
	            addConflict(conflicts, u, v);
	          }
	        });
	      }
	    });
	  }


	  function visitLayer(north, south) {
	    var prevNorthPos = -1,
	      nextNorthPos,
	      southPos = 0;

	    _.forEach(south, function(v, southLookahead) {
	      if (g.node(v).dummy === "border") {
	        var predecessors = g.predecessors(v);
	        if (predecessors.length) {
	          nextNorthPos = g.node(predecessors[0]).order;
	          scan(south, southPos, southLookahead, prevNorthPos, nextNorthPos);
	          southPos = southLookahead;
	          prevNorthPos = nextNorthPos;
	        }
	      }
	      scan(south, southPos, south.length, nextNorthPos, north.length);
	    });

	    return south;
	  }

	  _.reduce(layering, visitLayer);
	  return conflicts;
	}

	function findOtherInnerSegmentNode(g, v) {
	  if (g.node(v).dummy) {
	    return _.find(g.predecessors(v), function(u) {
	      return g.node(u).dummy;
	    });
	  }
	}

	function addConflict(conflicts, v, w) {
	  if (v > w) {
	    var tmp = v;
	    v = w;
	    w = tmp;
	  }

	  var conflictsV = conflicts[v];
	  if (!conflictsV) {
	    conflicts[v] = conflictsV = {};
	  }
	  conflictsV[w] = true;
	}

	function hasConflict(conflicts, v, w) {
	  if (v > w) {
	    var tmp = v;
	    v = w;
	    w = tmp;
	  }
	  return _.has(conflicts[v], w);
	}

	/*
	 * Try to align nodes into vertical "blocks" where possible. This algorithm
	 * attempts to align a node with one of its median neighbors. If the edge
	 * connecting a neighbor is a type-1 conflict then we ignore that possibility.
	 * If a previous node has already formed a block with a node after the node
	 * we're trying to form a block with, we also ignore that possibility - our
	 * blocks would be split in that scenario.
	 */
	function verticalAlignment(g, layering, conflicts, neighborFn) {
	  var root = {},
	    align = {},
	    pos = {};

	  // We cache the position here based on the layering because the graph and
	  // layering may be out of sync. The layering matrix is manipulated to
	  // generate different extreme alignments.
	  _.forEach(layering, function(layer) {
	    _.forEach(layer, function(v, order) {
	      root[v] = v;
	      align[v] = v;
	      pos[v] = order;
	    });
	  });

	  _.forEach(layering, function(layer) {
	    var prevIdx = -1;
	    _.forEach(layer, function(v) {
	      var ws = neighborFn(v);
	      if (ws.length) {
	        ws = _.sortBy(ws, function(w) { return pos[w]; });
	        var mp = (ws.length - 1) / 2;
	        for (var i = Math.floor(mp), il = Math.ceil(mp); i <= il; ++i) {
	          var w = ws[i];
	          if (align[v] === v &&
	              prevIdx < pos[w] &&
	              !hasConflict(conflicts, v, w)) {
	            align[w] = v;
	            align[v] = root[v] = root[w];
	            prevIdx = pos[w];
	          }
	        }
	      }
	    });
	  });

	  return { root: root, align: align };
	}

	function horizontalCompaction(g, layering, root, align, reverseSep) {
	  // This portion of the algorithm differs from BK due to a number of problems.
	  // Instead of their algorithm we construct a new block graph and do two
	  // sweeps. The first sweep places blocks with the smallest possible
	  // coordinates. The second sweep removes unused space by moving blocks to the
	  // greatest coordinates without violating separation.
	  var xs = {},
	    blockG = buildBlockGraph(g, layering, root, reverseSep),
	    borderType = reverseSep ? "borderLeft" : "borderRight";

	  function iterate(setXsFunc, nextNodesFunc) {
	    var stack = blockG.nodes();
	    var elem = stack.pop();
	    var visited = {};
	    while (elem) {
	      if (visited[elem]) {
	        setXsFunc(elem);
	      } else {
	        visited[elem] = true;
	        stack.push(elem);
	        stack = stack.concat(nextNodesFunc(elem));
	      }

	      elem = stack.pop();
	    }
	  }

	  // First pass, assign smallest coordinates
	  function pass1(elem) {
	    xs[elem] = blockG.inEdges(elem).reduce(function(acc, e) {
	      return Math.max(acc, xs[e.v] + blockG.edge(e));
	    }, 0);
	  }

	  // Second pass, assign greatest coordinates
	  function pass2(elem) {
	    var min = blockG.outEdges(elem).reduce(function(acc, e) {
	      return Math.min(acc, xs[e.w] - blockG.edge(e));
	    }, Number.POSITIVE_INFINITY);

	    var node = g.node(elem);
	    if (min !== Number.POSITIVE_INFINITY && node.borderType !== borderType) {
	      xs[elem] = Math.max(xs[elem], min);
	    }
	  }

	  iterate(pass1, blockG.predecessors.bind(blockG));
	  iterate(pass2, blockG.successors.bind(blockG));

	  // Assign x coordinates to all nodes
	  _.forEach(align, function(v) {
	    xs[v] = xs[root[v]];
	  });

	  return xs;
	}


	function buildBlockGraph(g, layering, root, reverseSep) {
	  var blockGraph = new Graph(),
	    graphLabel = g.graph(),
	    sepFn = sep(graphLabel.nodesep, graphLabel.edgesep, reverseSep);

	  _.forEach(layering, function(layer) {
	    var u;
	    _.forEach(layer, function(v) {
	      var vRoot = root[v];
	      blockGraph.setNode(vRoot);
	      if (u) {
	        var uRoot = root[u],
	          prevMax = blockGraph.edge(uRoot, vRoot);
	        blockGraph.setEdge(uRoot, vRoot, Math.max(sepFn(g, v, u), prevMax || 0));
	      }
	      u = v;
	    });
	  });

	  return blockGraph;
	}

	/*
	 * Returns the alignment that has the smallest width of the given alignments.
	 */
	function findSmallestWidthAlignment(g, xss) {
	  return _.minBy(_.values(xss), function (xs) {
	    var max = Number.NEGATIVE_INFINITY;
	    var min = Number.POSITIVE_INFINITY;

	    _.forIn(xs, function (x, v) {
	      var halfWidth = width(g, v) / 2;

	      max = Math.max(x + halfWidth, max);
	      min = Math.min(x - halfWidth, min);
	    });

	    return max - min;
	  });
	}

	/*
	 * Align the coordinates of each of the layout alignments such that
	 * left-biased alignments have their minimum coordinate at the same point as
	 * the minimum coordinate of the smallest width alignment and right-biased
	 * alignments have their maximum coordinate at the same point as the maximum
	 * coordinate of the smallest width alignment.
	 */
	function alignCoordinates(xss, alignTo) {
	  var alignToVals = _.values(alignTo),
	    alignToMin = _.min(alignToVals),
	    alignToMax = _.max(alignToVals);

	  _.forEach(["u", "d"], function(vert) {
	    _.forEach(["l", "r"], function(horiz) {
	      var alignment = vert + horiz,
	        xs = xss[alignment],
	        delta;
	      if (xs === alignTo) return;

	      var xsVals = _.values(xs);
	      delta = horiz === "l" ? alignToMin - _.min(xsVals) : alignToMax - _.max(xsVals);

	      if (delta) {
	        xss[alignment] = _.mapValues(xs, function(x) { return x + delta; });
	      }
	    });
	  });
	}

	function balance(xss, align) {
	  return _.mapValues(xss.ul, function(ignore, v) {
	    if (align) {
	      return xss[align.toLowerCase()][v];
	    } else {
	      var xs = _.sortBy(_.map(xss, v));
	      return (xs[1] + xs[2]) / 2;
	    }
	  });
	}

	function positionX(g) {
	  var layering = util.buildLayerMatrix(g);
	  var conflicts = _.merge(
	    findType1Conflicts(g, layering),
	    findType2Conflicts(g, layering));

	  var xss = {};
	  var adjustedLayering;
	  _.forEach(["u", "d"], function(vert) {
	    adjustedLayering = vert === "u" ? layering : _.values(layering).reverse();
	    _.forEach(["l", "r"], function(horiz) {
	      if (horiz === "r") {
	        adjustedLayering = _.map(adjustedLayering, function(inner) {
	          return _.values(inner).reverse();
	        });
	      }

	      var neighborFn = (vert === "u" ? g.predecessors : g.successors).bind(g);
	      var align = verticalAlignment(g, adjustedLayering, conflicts, neighborFn);
	      var xs = horizontalCompaction(g, adjustedLayering,
	        align.root, align.align, horiz === "r");
	      if (horiz === "r") {
	        xs = _.mapValues(xs, function(x) { return -x; });
	      }
	      xss[vert + horiz] = xs;
	    });
	  });

	  var smallestWidth = findSmallestWidthAlignment(g, xss);
	  alignCoordinates(xss, smallestWidth);
	  return balance(xss, g.graph().align);
	}

	function sep(nodeSep, edgeSep, reverseSep) {
	  return function(g, v, w) {
	    var vLabel = g.node(v);
	    var wLabel = g.node(w);
	    var sum = 0;
	    var delta;

	    sum += vLabel.width / 2;
	    if (_.has(vLabel, "labelpos")) {
	      switch (vLabel.labelpos.toLowerCase()) {
	      case "l": delta = -vLabel.width / 2; break;
	      case "r": delta = vLabel.width / 2; break;
	      }
	    }
	    if (delta) {
	      sum += reverseSep ? delta : -delta;
	    }
	    delta = 0;

	    sum += (vLabel.dummy ? edgeSep : nodeSep) / 2;
	    sum += (wLabel.dummy ? edgeSep : nodeSep) / 2;

	    sum += wLabel.width / 2;
	    if (_.has(wLabel, "labelpos")) {
	      switch (wLabel.labelpos.toLowerCase()) {
	      case "l": delta = wLabel.width / 2; break;
	      case "r": delta = -wLabel.width / 2; break;
	      }
	    }
	    if (delta) {
	      sum += reverseSep ? delta : -delta;
	    }
	    delta = 0;

	    return sum;
	  };
	}

	function width(g, v) {
	  return g.node(v).width;
	}


/***/ }),
/* 290 */
/***/ (function(module, exports, __webpack_require__) {

	var _ = __webpack_require__(221);
	var util = __webpack_require__(270);
	var Graph = __webpack_require__(4).Graph;

	module.exports = {
	  debugOrdering: debugOrdering
	};

	/* istanbul ignore next */
	function debugOrdering(g) {
	  var layerMatrix = util.buildLayerMatrix(g);

	  var h = new Graph({ compound: true, multigraph: true }).setGraph({});

	  _.forEach(g.nodes(), function(v) {
	    h.setNode(v, { label: v });
	    h.setParent(v, "layer" + g.node(v).rank);
	  });

	  _.forEach(g.edges(), function(e) {
	    h.setEdge(e.v, e.w, {}, e.name);
	  });

	  _.forEach(layerMatrix, function(layer, i) {
	    var layerV = "layer" + i;
	    h.setNode(layerV, { rank: "same" });
	    _.reduce(layer, function(u, v) {
	      h.setEdge(u, v, { style: "invis" });
	      return v;
	    });
	  });

	  return h;
	}


/***/ }),
/* 291 */
/***/ (function(module, exports) {

	module.exports = "0.8.5";


/***/ }),
/* 292 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
	 * jQuery JavaScript Library v3.4.1
	 * https://jquery.com/
	 *
	 * Includes Sizzle.js
	 * https://sizzlejs.com/
	 *
	 * Copyright JS Foundation and other contributors
	 * Released under the MIT license
	 * https://jquery.org/license
	 *
	 * Date: 2019-05-01T21:04Z
	 */
	( function( global, factory ) {

		"use strict";

		if ( typeof module === "object" && typeof module.exports === "object" ) {

			// For CommonJS and CommonJS-like environments where a proper `window`
			// is present, execute the factory and get jQuery.
			// For environments that do not have a `window` with a `document`
			// (such as Node.js), expose a factory as module.exports.
			// This accentuates the need for the creation of a real `window`.
			// e.g. var jQuery = require("jquery")(window);
			// See ticket #14549 for more info.
			module.exports = global.document ?
				factory( global, true ) :
				function( w ) {
					if ( !w.document ) {
						throw new Error( "jQuery requires a window with a document" );
					}
					return factory( w );
				};
		} else {
			factory( global );
		}

	// Pass this if window is not defined yet
	} )( typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

	// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1
	// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode
	// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common
	// enough that all such attempts are guarded in a try block.
	"use strict";

	var arr = [];

	var document = window.document;

	var getProto = Object.getPrototypeOf;

	var slice = arr.slice;

	var concat = arr.concat;

	var push = arr.push;

	var indexOf = arr.indexOf;

	var class2type = {};

	var toString = class2type.toString;

	var hasOwn = class2type.hasOwnProperty;

	var fnToString = hasOwn.toString;

	var ObjectFunctionString = fnToString.call( Object );

	var support = {};

	var isFunction = function isFunction( obj ) {

	      // Support: Chrome <=57, Firefox <=52
	      // In some browsers, typeof returns "function" for HTML <object> elements
	      // (i.e., `typeof document.createElement( "object" ) === "function"`).
	      // We don't want to classify *any* DOM node as a function.
	      return typeof obj === "function" && typeof obj.nodeType !== "number";
	  };


	var isWindow = function isWindow( obj ) {
			return obj != null && obj === obj.window;
		};




		var preservedScriptAttributes = {
			type: true,
			src: true,
			nonce: true,
			noModule: true
		};

		function DOMEval( code, node, doc ) {
			doc = doc || document;

			var i, val,
				script = doc.createElement( "script" );

			script.text = code;
			if ( node ) {
				for ( i in preservedScriptAttributes ) {

					// Support: Firefox 64+, Edge 18+
					// Some browsers don't support the "nonce" property on scripts.
					// On the other hand, just using `getAttribute` is not enough as
					// the `nonce` attribute is reset to an empty string whenever it
					// becomes browsing-context connected.
					// See https://github.com/whatwg/html/issues/2369
					// See https://html.spec.whatwg.org/#nonce-attributes
					// The `node.getAttribute` check was added for the sake of
					// `jQuery.globalEval` so that it can fake a nonce-containing node
					// via an object.
					val = node[ i ] || node.getAttribute && node.getAttribute( i );
					if ( val ) {
						script.setAttribute( i, val );
					}
				}
			}
			doc.head.appendChild( script ).parentNode.removeChild( script );
		}


	function toType( obj ) {
		if ( obj == null ) {
			return obj + "";
		}

		// Support: Android <=2.3 only (functionish RegExp)
		return typeof obj === "object" || typeof obj === "function" ?
			class2type[ toString.call( obj ) ] || "object" :
			typeof obj;
	}
	/* global Symbol */
	// Defining this global in .eslintrc.json would create a danger of using the global
	// unguarded in another place, it seems safer to define global only for this module



	var
		version = "3.4.1",

		// Define a local copy of jQuery
		jQuery = function( selector, context ) {

			// The jQuery object is actually just the init constructor 'enhanced'
			// Need init if jQuery is called (just allow error to be thrown if not included)
			return new jQuery.fn.init( selector, context );
		},

		// Support: Android <=4.0 only
		// Make sure we trim BOM and NBSP
		rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;

	jQuery.fn = jQuery.prototype = {

		// The current version of jQuery being used
		jquery: version,

		constructor: jQuery,

		// The default length of a jQuery object is 0
		length: 0,

		toArray: function() {
			return slice.call( this );
		},

		// Get the Nth element in the matched element set OR
		// Get the whole matched element set as a clean array
		get: function( num ) {

			// Return all the elements in a clean array
			if ( num == null ) {
				return slice.call( this );
			}

			// Return just the one element from the set
			return num < 0 ? this[ num + this.length ] : this[ num ];
		},

		// Take an array of elements and push it onto the stack
		// (returning the new matched element set)
		pushStack: function( elems ) {

			// Build a new jQuery matched element set
			var ret = jQuery.merge( this.constructor(), elems );

			// Add the old object onto the stack (as a reference)
			ret.prevObject = this;

			// Return the newly-formed element set
			return ret;
		},

		// Execute a callback for every element in the matched set.
		each: function( callback ) {
			return jQuery.each( this, callback );
		},

		map: function( callback ) {
			return this.pushStack( jQuery.map( this, function( elem, i ) {
				return callback.call( elem, i, elem );
			} ) );
		},

		slice: function() {
			return this.pushStack( slice.apply( this, arguments ) );
		},

		first: function() {
			return this.eq( 0 );
		},

		last: function() {
			return this.eq( -1 );
		},

		eq: function( i ) {
			var len = this.length,
				j = +i + ( i < 0 ? len : 0 );
			return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
		},

		end: function() {
			return this.prevObject || this.constructor();
		},

		// For internal use only.
		// Behaves like an Array's method, not like a jQuery method.
		push: push,
		sort: arr.sort,
		splice: arr.splice
	};

	jQuery.extend = jQuery.fn.extend = function() {
		var options, name, src, copy, copyIsArray, clone,
			target = arguments[ 0 ] || {},
			i = 1,
			length = arguments.length,
			deep = false;

		// Handle a deep copy situation
		if ( typeof target === "boolean" ) {
			deep = target;

			// Skip the boolean and the target
			target = arguments[ i ] || {};
			i++;
		}

		// Handle case when target is a string or something (possible in deep copy)
		if ( typeof target !== "object" && !isFunction( target ) ) {
			target = {};
		}

		// Extend jQuery itself if only one argument is passed
		if ( i === length ) {
			target = this;
			i--;
		}

		for ( ; i < length; i++ ) {

			// Only deal with non-null/undefined values
			if ( ( options = arguments[ i ] ) != null ) {

				// Extend the base object
				for ( name in options ) {
					copy = options[ name ];

					// Prevent Object.prototype pollution
					// Prevent never-ending loop
					if ( name === "__proto__" || target === copy ) {
						continue;
					}

					// Recurse if we're merging plain objects or arrays
					if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
						( copyIsArray = Array.isArray( copy ) ) ) ) {
						src = target[ name ];

						// Ensure proper type for the source value
						if ( copyIsArray && !Array.isArray( src ) ) {
							clone = [];
						} else if ( !copyIsArray && !jQuery.isPlainObject( src ) ) {
							clone = {};
						} else {
							clone = src;
						}
						copyIsArray = false;

						// Never move original objects, clone them
						target[ name ] = jQuery.extend( deep, clone, copy );

					// Don't bring in undefined values
					} else if ( copy !== undefined ) {
						target[ name ] = copy;
					}
				}
			}
		}

		// Return the modified object
		return target;
	};

	jQuery.extend( {

		// Unique for each copy of jQuery on the page
		expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

		// Assume jQuery is ready without the ready module
		isReady: true,

		error: function( msg ) {
			throw new Error( msg );
		},

		noop: function() {},

		isPlainObject: function( obj ) {
			var proto, Ctor;

			// Detect obvious negatives
			// Use toString instead of jQuery.type to catch host objects
			if ( !obj || toString.call( obj ) !== "[object Object]" ) {
				return false;
			}

			proto = getProto( obj );

			// Objects with no prototype (e.g., `Object.create( null )`) are plain
			if ( !proto ) {
				return true;
			}

			// Objects with prototype are plain iff they were constructed by a global Object function
			Ctor = hasOwn.call( proto, "constructor" ) && proto.constructor;
			return typeof Ctor === "function" && fnToString.call( Ctor ) === ObjectFunctionString;
		},

		isEmptyObject: function( obj ) {
			var name;

			for ( name in obj ) {
				return false;
			}
			return true;
		},

		// Evaluates a script in a global context
		globalEval: function( code, options ) {
			DOMEval( code, { nonce: options && options.nonce } );
		},

		each: function( obj, callback ) {
			var length, i = 0;

			if ( isArrayLike( obj ) ) {
				length = obj.length;
				for ( ; i < length; i++ ) {
					if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
						break;
					}
				}
			}

			return obj;
		},

		// Support: Android <=4.0 only
		trim: function( text ) {
			return text == null ?
				"" :
				( text + "" ).replace( rtrim, "" );
		},

		// results is for internal usage only
		makeArray: function( arr, results ) {
			var ret = results || [];

			if ( arr != null ) {
				if ( isArrayLike( Object( arr ) ) ) {
					jQuery.merge( ret,
						typeof arr === "string" ?
						[ arr ] : arr
					);
				} else {
					push.call( ret, arr );
				}
			}

			return ret;
		},

		inArray: function( elem, arr, i ) {
			return arr == null ? -1 : indexOf.call( arr, elem, i );
		},

		// Support: Android <=4.0 only, PhantomJS 1 only
		// push.apply(_, arraylike) throws on ancient WebKit
		merge: function( first, second ) {
			var len = +second.length,
				j = 0,
				i = first.length;

			for ( ; j < len; j++ ) {
				first[ i++ ] = second[ j ];
			}

			first.length = i;

			return first;
		},

		grep: function( elems, callback, invert ) {
			var callbackInverse,
				matches = [],
				i = 0,
				length = elems.length,
				callbackExpect = !invert;

			// Go through the array, only saving the items
			// that pass the validator function
			for ( ; i < length; i++ ) {
				callbackInverse = !callback( elems[ i ], i );
				if ( callbackInverse !== callbackExpect ) {
					matches.push( elems[ i ] );
				}
			}

			return matches;
		},

		// arg is for internal usage only
		map: function( elems, callback, arg ) {
			var length, value,
				i = 0,
				ret = [];

			// Go through the array, translating each of the items to their new values
			if ( isArrayLike( elems ) ) {
				length = elems.length;
				for ( ; i < length; i++ ) {
					value = callback( elems[ i ], i, arg );

					if ( value != null ) {
						ret.push( value );
					}
				}

			// Go through every key on the object,
			} else {
				for ( i in elems ) {
					value = callback( elems[ i ], i, arg );

					if ( value != null ) {
						ret.push( value );
					}
				}
			}

			// Flatten any nested arrays
			return concat.apply( [], ret );
		},

		// A global GUID counter for objects
		guid: 1,

		// jQuery.support is not used in Core but other projects attach their
		// properties to it so it needs to exist.
		support: support
	} );

	if ( typeof Symbol === "function" ) {
		jQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];
	}

	// Populate the class2type map
	jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
	function( i, name ) {
		class2type[ "[object " + name + "]" ] = name.toLowerCase();
	} );

	function isArrayLike( obj ) {

		// Support: real iOS 8.2 only (not reproducible in simulator)
		// `in` check used to prevent JIT error (gh-2145)
		// hasOwn isn't used here due to false negatives
		// regarding Nodelist length in IE
		var length = !!obj && "length" in obj && obj.length,
			type = toType( obj );

		if ( isFunction( obj ) || isWindow( obj ) ) {
			return false;
		}

		return type === "array" || length === 0 ||
			typeof length === "number" && length > 0 && ( length - 1 ) in obj;
	}
	var Sizzle =
	/*!
	 * Sizzle CSS Selector Engine v2.3.4
	 * https://sizzlejs.com/
	 *
	 * Copyright JS Foundation and other contributors
	 * Released under the MIT license
	 * https://js.foundation/
	 *
	 * Date: 2019-04-08
	 */
	(function( window ) {

	var i,
		support,
		Expr,
		getText,
		isXML,
		tokenize,
		compile,
		select,
		outermostContext,
		sortInput,
		hasDuplicate,

		// Local document vars
		setDocument,
		document,
		docElem,
		documentIsHTML,
		rbuggyQSA,
		rbuggyMatches,
		matches,
		contains,

		// Instance-specific data
		expando = "sizzle" + 1 * new Date(),
		preferredDoc = window.document,
		dirruns = 0,
		done = 0,
		classCache = createCache(),
		tokenCache = createCache(),
		compilerCache = createCache(),
		nonnativeSelectorCache = createCache(),
		sortOrder = function( a, b ) {
			if ( a === b ) {
				hasDuplicate = true;
			}
			return 0;
		},

		// Instance methods
		hasOwn = ({}).hasOwnProperty,
		arr = [],
		pop = arr.pop,
		push_native = arr.push,
		push = arr.push,
		slice = arr.slice,
		// Use a stripped-down indexOf as it's faster than native
		// https://jsperf.com/thor-indexof-vs-for/5
		indexOf = function( list, elem ) {
			var i = 0,
				len = list.length;
			for ( ; i < len; i++ ) {
				if ( list[i] === elem ) {
					return i;
				}
			}
			return -1;
		},

		booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

		// Regular expressions

		// http://www.w3.org/TR/css3-selectors/#whitespace
		whitespace = "[\\x20\\t\\r\\n\\f]",

		// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
		identifier = "(?:\\\\.|[\\w-]|[^\0-\\xa0])+",

		// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
		attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +
			// Operator (capture 2)
			"*([*^$|!~]?=)" + whitespace +
			// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
			"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
			"*\\]",

		pseudos = ":(" + identifier + ")(?:\\((" +
			// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
			// 1. quoted (capture 3; capture 4 or capture 5)
			"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
			// 2. simple (capture 6)
			"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
			// 3. anything else (capture 2)
			".*" +
			")\\)|)",

		// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
		rwhitespace = new RegExp( whitespace + "+", "g" ),
		rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

		rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
		rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),
		rdescend = new RegExp( whitespace + "|>" ),

		rpseudo = new RegExp( pseudos ),
		ridentifier = new RegExp( "^" + identifier + "$" ),

		matchExpr = {
			"ID": new RegExp( "^#(" + identifier + ")" ),
			"CLASS": new RegExp( "^\\.(" + identifier + ")" ),
			"TAG": new RegExp( "^(" + identifier + "|[*])" ),
			"ATTR": new RegExp( "^" + attributes ),
			"PSEUDO": new RegExp( "^" + pseudos ),
			"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
				"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
				"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
			"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
			// For use in libraries implementing .is()
			// We use this for POS matching in `select`
			"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
				whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
		},

		rhtml = /HTML$/i,
		rinputs = /^(?:input|select|textarea|button)$/i,
		rheader = /^h\d$/i,

		rnative = /^[^{]+\{\s*\[native \w/,

		// Easily-parseable/retrievable ID or TAG or CLASS selectors
		rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

		rsibling = /[+~]/,

		// CSS escapes
		// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
		runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
		funescape = function( _, escaped, escapedWhitespace ) {
			var high = "0x" + escaped - 0x10000;
			// NaN means non-codepoint
			// Support: Firefox<24
			// Workaround erroneous numeric interpretation of +"0x"
			return high !== high || escapedWhitespace ?
				escaped :
				high < 0 ?
					// BMP codepoint
					String.fromCharCode( high + 0x10000 ) :
					// Supplemental Plane codepoint (surrogate pair)
					String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
		},

		// CSS string/identifier serialization
		// https://drafts.csswg.org/cssom/#common-serializing-idioms
		rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
		fcssescape = function( ch, asCodePoint ) {
			if ( asCodePoint ) {

				// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
				if ( ch === "\0" ) {
					return "\uFFFD";
				}

				// Control characters and (dependent upon position) numbers get escaped as code points
				return ch.slice( 0, -1 ) + "\\" + ch.charCodeAt( ch.length - 1 ).toString( 16 ) + " ";
			}

			// Other potentially-special ASCII characters get backslash-escaped
			return "\\" + ch;
		},

		// Used for iframes
		// See setDocument()
		// Removing the function wrapper causes a "Permission Denied"
		// error in IE
		unloadHandler = function() {
			setDocument();
		},

		inDisabledFieldset = addCombinator(
			function( elem ) {
				return elem.disabled === true && elem.nodeName.toLowerCase() === "fieldset";
			},
			{ dir: "parentNode", next: "legend" }
		);

	// Optimize for push.apply( _, NodeList )
	try {
		push.apply(
			(arr = slice.call( preferredDoc.childNodes )),
			preferredDoc.childNodes
		);
		// Support: Android<4.0
		// Detect silently failing push.apply
		arr[ preferredDoc.childNodes.length ].nodeType;
	} catch ( e ) {
		push = { apply: arr.length ?

			// Leverage slice if possible
			function( target, els ) {
				push_native.apply( target, slice.call(els) );
			} :

			// Support: IE<9
			// Otherwise append directly
			function( target, els ) {
				var j = target.length,
					i = 0;
				// Can't trust NodeList.length
				while ( (target[j++] = els[i++]) ) {}
				target.length = j - 1;
			}
		};
	}

	function Sizzle( selector, context, results, seed ) {
		var m, i, elem, nid, match, groups, newSelector,
			newContext = context && context.ownerDocument,

			// nodeType defaults to 9, since context defaults to document
			nodeType = context ? context.nodeType : 9;

		results = results || [];

		// Return early from calls with invalid selector or context
		if ( typeof selector !== "string" || !selector ||
			nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

			return results;
		}

		// Try to shortcut find operations (as opposed to filters) in HTML documents
		if ( !seed ) {

			if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
				setDocument( context );
			}
			context = context || document;

			if ( documentIsHTML ) {

				// If the selector is sufficiently simple, try using a "get*By*" DOM method
				// (excepting DocumentFragment context, where the methods don't exist)
				if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {

					// ID selector
					if ( (m = match[1]) ) {

						// Document context
						if ( nodeType === 9 ) {
							if ( (elem = context.getElementById( m )) ) {

								// Support: IE, Opera, Webkit
								// TODO: identify versions
								// getElementById can match elements by name instead of ID
								if ( elem.id === m ) {
									results.push( elem );
									return results;
								}
							} else {
								return results;
							}

						// Element context
						} else {

							// Support: IE, Opera, Webkit
							// TODO: identify versions
							// getElementById can match elements by name instead of ID
							if ( newContext && (elem = newContext.getElementById( m )) &&
								contains( context, elem ) &&
								elem.id === m ) {

								results.push( elem );
								return results;
							}
						}

					// Type selector
					} else if ( match[2] ) {
						push.apply( results, context.getElementsByTagName( selector ) );
						return results;

					// Class selector
					} else if ( (m = match[3]) && support.getElementsByClassName &&
						context.getElementsByClassName ) {

						push.apply( results, context.getElementsByClassName( m ) );
						return results;
					}
				}

				// Take advantage of querySelectorAll
				if ( support.qsa &&
					!nonnativeSelectorCache[ selector + " " ] &&
					(!rbuggyQSA || !rbuggyQSA.test( selector )) &&

					// Support: IE 8 only
					// Exclude object elements
					(nodeType !== 1 || context.nodeName.toLowerCase() !== "object") ) {

					newSelector = selector;
					newContext = context;

					// qSA considers elements outside a scoping root when evaluating child or
					// descendant combinators, which is not what we want.
					// In such cases, we work around the behavior by prefixing every selector in the
					// list with an ID selector referencing the scope context.
					// Thanks to Andrew Dupont for this technique.
					if ( nodeType === 1 && rdescend.test( selector ) ) {

						// Capture the context ID, setting it first if necessary
						if ( (nid = context.getAttribute( "id" )) ) {
							nid = nid.replace( rcssescape, fcssescape );
						} else {
							context.setAttribute( "id", (nid = expando) );
						}

						// Prefix every selector in the list
						groups = tokenize( selector );
						i = groups.length;
						while ( i-- ) {
							groups[i] = "#" + nid + " " + toSelector( groups[i] );
						}
						newSelector = groups.join( "," );

						// Expand context for sibling selectors
						newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
							context;
					}

					try {
						push.apply( results,
							newContext.querySelectorAll( newSelector )
						);
						return results;
					} catch ( qsaError ) {
						nonnativeSelectorCache( selector, true );
					} finally {
						if ( nid === expando ) {
							context.removeAttribute( "id" );
						}
					}
				}
			}
		}

		// All others
		return select( selector.replace( rtrim, "$1" ), context, results, seed );
	}

	/**
	 * Create key-value caches of limited size
	 * @returns {function(string, object)} Returns the Object data after storing it on itself with
	 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
	 *	deleting the oldest entry
	 */
	function createCache() {
		var keys = [];

		function cache( key, value ) {
			// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
			if ( keys.push( key + " " ) > Expr.cacheLength ) {
				// Only keep the most recent entries
				delete cache[ keys.shift() ];
			}
			return (cache[ key + " " ] = value);
		}
		return cache;
	}

	/**
	 * Mark a function for special use by Sizzle
	 * @param {Function} fn The function to mark
	 */
	function markFunction( fn ) {
		fn[ expando ] = true;
		return fn;
	}

	/**
	 * Support testing using an element
	 * @param {Function} fn Passed the created element and returns a boolean result
	 */
	function assert( fn ) {
		var el = document.createElement("fieldset");

		try {
			return !!fn( el );
		} catch (e) {
			return false;
		} finally {
			// Remove from its parent by default
			if ( el.parentNode ) {
				el.parentNode.removeChild( el );
			}
			// release memory in IE
			el = null;
		}
	}

	/**
	 * Adds the same handler for all of the specified attrs
	 * @param {String} attrs Pipe-separated list of attributes
	 * @param {Function} handler The method that will be applied
	 */
	function addHandle( attrs, handler ) {
		var arr = attrs.split("|"),
			i = arr.length;

		while ( i-- ) {
			Expr.attrHandle[ arr[i] ] = handler;
		}
	}

	/**
	 * Checks document order of two siblings
	 * @param {Element} a
	 * @param {Element} b
	 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
	 */
	function siblingCheck( a, b ) {
		var cur = b && a,
			diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
				a.sourceIndex - b.sourceIndex;

		// Use IE sourceIndex if available on both nodes
		if ( diff ) {
			return diff;
		}

		// Check if b follows a
		if ( cur ) {
			while ( (cur = cur.nextSibling) ) {
				if ( cur === b ) {
					return -1;
				}
			}
		}

		return a ? 1 : -1;
	}

	/**
	 * Returns a function to use in pseudos for input types
	 * @param {String} type
	 */
	function createInputPseudo( type ) {
		return function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === type;
		};
	}

	/**
	 * Returns a function to use in pseudos for buttons
	 * @param {String} type
	 */
	function createButtonPseudo( type ) {
		return function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return (name === "input" || name === "button") && elem.type === type;
		};
	}

	/**
	 * Returns a function to use in pseudos for :enabled/:disabled
	 * @param {Boolean} disabled true for :disabled; false for :enabled
	 */
	function createDisabledPseudo( disabled ) {

		// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
		return function( elem ) {

			// Only certain elements can match :enabled or :disabled
			// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
			// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
			if ( "form" in elem ) {

				// Check for inherited disabledness on relevant non-disabled elements:
				// * listed form-associated elements in a disabled fieldset
				//   https://html.spec.whatwg.org/multipage/forms.html#category-listed
				//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
				// * option elements in a disabled optgroup
				//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
				// All such elements have a "form" property.
				if ( elem.parentNode && elem.disabled === false ) {

					// Option elements defer to a parent optgroup if present
					if ( "label" in elem ) {
						if ( "label" in elem.parentNode ) {
							return elem.parentNode.disabled === disabled;
						} else {
							return elem.disabled === disabled;
						}
					}

					// Support: IE 6 - 11
					// Use the isDisabled shortcut property to check for disabled fieldset ancestors
					return elem.isDisabled === disabled ||

						// Where there is no isDisabled, check manually
						/* jshint -W018 */
						elem.isDisabled !== !disabled &&
							inDisabledFieldset( elem ) === disabled;
				}

				return elem.disabled === disabled;

			// Try to winnow out elements that can't be disabled before trusting the disabled property.
			// Some victims get caught in our net (label, legend, menu, track), but it shouldn't
			// even exist on them, let alone have a boolean value.
			} else if ( "label" in elem ) {
				return elem.disabled === disabled;
			}

			// Remaining elements are neither :enabled nor :disabled
			return false;
		};
	}

	/**
	 * Returns a function to use in pseudos for positionals
	 * @param {Function} fn
	 */
	function createPositionalPseudo( fn ) {
		return markFunction(function( argument ) {
			argument = +argument;
			return markFunction(function( seed, matches ) {
				var j,
					matchIndexes = fn( [], seed.length, argument ),
					i = matchIndexes.length;

				// Match elements found at the specified indexes
				while ( i-- ) {
					if ( seed[ (j = matchIndexes[i]) ] ) {
						seed[j] = !(matches[j] = seed[j]);
					}
				}
			});
		});
	}

	/**
	 * Checks a node for validity as a Sizzle context
	 * @param {Element|Object=} context
	 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
	 */
	function testContext( context ) {
		return context && typeof context.getElementsByTagName !== "undefined" && context;
	}

	// Expose support vars for convenience
	support = Sizzle.support = {};

	/**
	 * Detects XML nodes
	 * @param {Element|Object} elem An element or a document
	 * @returns {Boolean} True iff elem is a non-HTML XML node
	 */
	isXML = Sizzle.isXML = function( elem ) {
		var namespace = elem.namespaceURI,
			docElem = (elem.ownerDocument || elem).documentElement;

		// Support: IE <=8
		// Assume HTML when documentElement doesn't yet exist, such as inside loading iframes
		// https://bugs.jquery.com/ticket/4833
		return !rhtml.test( namespace || docElem && docElem.nodeName || "HTML" );
	};

	/**
	 * Sets document-related variables once based on the current document
	 * @param {Element|Object} [doc] An element or document object to use to set the document
	 * @returns {Object} Returns the current document
	 */
	setDocument = Sizzle.setDocument = function( node ) {
		var hasCompare, subWindow,
			doc = node ? node.ownerDocument || node : preferredDoc;

		// Return early if doc is invalid or already selected
		if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
			return document;
		}

		// Update global variables
		document = doc;
		docElem = document.documentElement;
		documentIsHTML = !isXML( document );

		// Support: IE 9-11, Edge
		// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
		if ( preferredDoc !== document &&
			(subWindow = document.defaultView) && subWindow.top !== subWindow ) {

			// Support: IE 11, Edge
			if ( subWindow.addEventListener ) {
				subWindow.addEventListener( "unload", unloadHandler, false );

			// Support: IE 9 - 10 only
			} else if ( subWindow.attachEvent ) {
				subWindow.attachEvent( "onunload", unloadHandler );
			}
		}

		/* Attributes
		---------------------------------------------------------------------- */

		// Support: IE<8
		// Verify that getAttribute really returns attributes and not properties
		// (excepting IE8 booleans)
		support.attributes = assert(function( el ) {
			el.className = "i";
			return !el.getAttribute("className");
		});

		/* getElement(s)By*
		---------------------------------------------------------------------- */

		// Check if getElementsByTagName("*") returns only elements
		support.getElementsByTagName = assert(function( el ) {
			el.appendChild( document.createComment("") );
			return !el.getElementsByTagName("*").length;
		});

		// Support: IE<9
		support.getElementsByClassName = rnative.test( document.getElementsByClassName );

		// Support: IE<10
		// Check if getElementById returns elements by name
		// The broken getElementById methods don't pick up programmatically-set names,
		// so use a roundabout getElementsByName test
		support.getById = assert(function( el ) {
			docElem.appendChild( el ).id = expando;
			return !document.getElementsByName || !document.getElementsByName( expando ).length;
		});

		// ID filter and find
		if ( support.getById ) {
			Expr.filter["ID"] = function( id ) {
				var attrId = id.replace( runescape, funescape );
				return function( elem ) {
					return elem.getAttribute("id") === attrId;
				};
			};
			Expr.find["ID"] = function( id, context ) {
				if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
					var elem = context.getElementById( id );
					return elem ? [ elem ] : [];
				}
			};
		} else {
			Expr.filter["ID"] =  function( id ) {
				var attrId = id.replace( runescape, funescape );
				return function( elem ) {
					var node = typeof elem.getAttributeNode !== "undefined" &&
						elem.getAttributeNode("id");
					return node && node.value === attrId;
				};
			};

			// Support: IE 6 - 7 only
			// getElementById is not reliable as a find shortcut
			Expr.find["ID"] = function( id, context ) {
				if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
					var node, i, elems,
						elem = context.getElementById( id );

					if ( elem ) {

						// Verify the id attribute
						node = elem.getAttributeNode("id");
						if ( node && node.value === id ) {
							return [ elem ];
						}

						// Fall back on getElementsByName
						elems = context.getElementsByName( id );
						i = 0;
						while ( (elem = elems[i++]) ) {
							node = elem.getAttributeNode("id");
							if ( node && node.value === id ) {
								return [ elem ];
							}
						}
					}

					return [];
				}
			};
		}

		// Tag
		Expr.find["TAG"] = support.getElementsByTagName ?
			function( tag, context ) {
				if ( typeof context.getElementsByTagName !== "undefined" ) {
					return context.getElementsByTagName( tag );

				// DocumentFragment nodes don't have gEBTN
				} else if ( support.qsa ) {
					return context.querySelectorAll( tag );
				}
			} :

			function( tag, context ) {
				var elem,
					tmp = [],
					i = 0,
					// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
					results = context.getElementsByTagName( tag );

				// Filter out possible comments
				if ( tag === "*" ) {
					while ( (elem = results[i++]) ) {
						if ( elem.nodeType === 1 ) {
							tmp.push( elem );
						}
					}

					return tmp;
				}
				return results;
			};

		// Class
		Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
			if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
				return context.getElementsByClassName( className );
			}
		};

		/* QSA/matchesSelector
		---------------------------------------------------------------------- */

		// QSA and matchesSelector support

		// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
		rbuggyMatches = [];

		// qSa(:focus) reports false when true (Chrome 21)
		// We allow this because of a bug in IE8/9 that throws an error
		// whenever `document.activeElement` is accessed on an iframe
		// So, we allow :focus to pass through QSA all the time to avoid the IE error
		// See https://bugs.jquery.com/ticket/13378
		rbuggyQSA = [];

		if ( (support.qsa = rnative.test( document.querySelectorAll )) ) {
			// Build QSA regex
			// Regex strategy adopted from Diego Perini
			assert(function( el ) {
				// Select is set to empty string on purpose
				// This is to test IE's treatment of not explicitly
				// setting a boolean content attribute,
				// since its presence should be enough
				// https://bugs.jquery.com/ticket/12359
				docElem.appendChild( el ).innerHTML = "<a id='" + expando + "'></a>" +
					"<select id='" + expando + "-\r\\' msallowcapture=''>" +
					"<option selected=''></option></select>";

				// Support: IE8, Opera 11-12.16
				// Nothing should be selected when empty strings follow ^= or $= or *=
				// The test attribute must be unknown in Opera but "safe" for WinRT
				// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
				if ( el.querySelectorAll("[msallowcapture^='']").length ) {
					rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
				}

				// Support: IE8
				// Boolean attributes and "value" are not treated correctly
				if ( !el.querySelectorAll("[selected]").length ) {
					rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
				}

				// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
				if ( !el.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
					rbuggyQSA.push("~=");
				}

				// Webkit/Opera - :checked should return selected option elements
				// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
				// IE8 throws error here and will not see later tests
				if ( !el.querySelectorAll(":checked").length ) {
					rbuggyQSA.push(":checked");
				}

				// Support: Safari 8+, iOS 8+
				// https://bugs.webkit.org/show_bug.cgi?id=136851
				// In-page `selector#id sibling-combinator selector` fails
				if ( !el.querySelectorAll( "a#" + expando + "+*" ).length ) {
					rbuggyQSA.push(".#.+[+~]");
				}
			});

			assert(function( el ) {
				el.innerHTML = "<a href='' disabled='disabled'></a>" +
					"<select disabled='disabled'><option/></select>";

				// Support: Windows 8 Native Apps
				// The type and name attributes are restricted during .innerHTML assignment
				var input = document.createElement("input");
				input.setAttribute( "type", "hidden" );
				el.appendChild( input ).setAttribute( "name", "D" );

				// Support: IE8
				// Enforce case-sensitivity of name attribute
				if ( el.querySelectorAll("[name=d]").length ) {
					rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
				}

				// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
				// IE8 throws error here and will not see later tests
				if ( el.querySelectorAll(":enabled").length !== 2 ) {
					rbuggyQSA.push( ":enabled", ":disabled" );
				}

				// Support: IE9-11+
				// IE's :disabled selector does not pick up the children of disabled fieldsets
				docElem.appendChild( el ).disabled = true;
				if ( el.querySelectorAll(":disabled").length !== 2 ) {
					rbuggyQSA.push( ":enabled", ":disabled" );
				}

				// Opera 10-11 does not throw on post-comma invalid pseudos
				el.querySelectorAll("*,:x");
				rbuggyQSA.push(",.*:");
			});
		}

		if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
			docElem.webkitMatchesSelector ||
			docElem.mozMatchesSelector ||
			docElem.oMatchesSelector ||
			docElem.msMatchesSelector) )) ) {

			assert(function( el ) {
				// Check to see if it's possible to do matchesSelector
				// on a disconnected node (IE 9)
				support.disconnectedMatch = matches.call( el, "*" );

				// This should fail with an exception
				// Gecko does not error, returns false instead
				matches.call( el, "[s!='']:x" );
				rbuggyMatches.push( "!=", pseudos );
			});
		}

		rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
		rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

		/* Contains
		---------------------------------------------------------------------- */
		hasCompare = rnative.test( docElem.compareDocumentPosition );

		// Element contains another
		// Purposefully self-exclusive
		// As in, an element does not contain itself
		contains = hasCompare || rnative.test( docElem.contains ) ?
			function( a, b ) {
				var adown = a.nodeType === 9 ? a.documentElement : a,
					bup = b && b.parentNode;
				return a === bup || !!( bup && bup.nodeType === 1 && (
					adown.contains ?
						adown.contains( bup ) :
						a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
				));
			} :
			function( a, b ) {
				if ( b ) {
					while ( (b = b.parentNode) ) {
						if ( b === a ) {
							return true;
						}
					}
				}
				return false;
			};

		/* Sorting
		---------------------------------------------------------------------- */

		// Document order sorting
		sortOrder = hasCompare ?
		function( a, b ) {

			// Flag for duplicate removal
			if ( a === b ) {
				hasDuplicate = true;
				return 0;
			}

			// Sort on method existence if only one input has compareDocumentPosition
			var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
			if ( compare ) {
				return compare;
			}

			// Calculate position if both inputs belong to the same document
			compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
				a.compareDocumentPosition( b ) :

				// Otherwise we know they are disconnected
				1;

			// Disconnected nodes
			if ( compare & 1 ||
				(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

				// Choose the first element that is related to our preferred document
				if ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
					return -1;
				}
				if ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
					return 1;
				}

				// Maintain original order
				return sortInput ?
					( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
					0;
			}

			return compare & 4 ? -1 : 1;
		} :
		function( a, b ) {
			// Exit early if the nodes are identical
			if ( a === b ) {
				hasDuplicate = true;
				return 0;
			}

			var cur,
				i = 0,
				aup = a.parentNode,
				bup = b.parentNode,
				ap = [ a ],
				bp = [ b ];

			// Parentless nodes are either documents or disconnected
			if ( !aup || !bup ) {
				return a === document ? -1 :
					b === document ? 1 :
					aup ? -1 :
					bup ? 1 :
					sortInput ?
					( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
					0;

			// If the nodes are siblings, we can do a quick check
			} else if ( aup === bup ) {
				return siblingCheck( a, b );
			}

			// Otherwise we need full lists of their ancestors for comparison
			cur = a;
			while ( (cur = cur.parentNode) ) {
				ap.unshift( cur );
			}
			cur = b;
			while ( (cur = cur.parentNode) ) {
				bp.unshift( cur );
			}

			// Walk down the tree looking for a discrepancy
			while ( ap[i] === bp[i] ) {
				i++;
			}

			return i ?
				// Do a sibling check if the nodes have a common ancestor
				siblingCheck( ap[i], bp[i] ) :

				// Otherwise nodes in our document sort first
				ap[i] === preferredDoc ? -1 :
				bp[i] === preferredDoc ? 1 :
				0;
		};

		return document;
	};

	Sizzle.matches = function( expr, elements ) {
		return Sizzle( expr, null, null, elements );
	};

	Sizzle.matchesSelector = function( elem, expr ) {
		// Set document vars if needed
		if ( ( elem.ownerDocument || elem ) !== document ) {
			setDocument( elem );
		}

		if ( support.matchesSelector && documentIsHTML &&
			!nonnativeSelectorCache[ expr + " " ] &&
			( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
			( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

			try {
				var ret = matches.call( elem, expr );

				// IE 9's matchesSelector returns false on disconnected nodes
				if ( ret || support.disconnectedMatch ||
						// As well, disconnected nodes are said to be in a document
						// fragment in IE 9
						elem.document && elem.document.nodeType !== 11 ) {
					return ret;
				}
			} catch (e) {
				nonnativeSelectorCache( expr, true );
			}
		}

		return Sizzle( expr, document, null, [ elem ] ).length > 0;
	};

	Sizzle.contains = function( context, elem ) {
		// Set document vars if needed
		if ( ( context.ownerDocument || context ) !== document ) {
			setDocument( context );
		}
		return contains( context, elem );
	};

	Sizzle.attr = function( elem, name ) {
		// Set document vars if needed
		if ( ( elem.ownerDocument || elem ) !== document ) {
			setDocument( elem );
		}

		var fn = Expr.attrHandle[ name.toLowerCase() ],
			// Don't get fooled by Object.prototype properties (jQuery #13807)
			val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
				fn( elem, name, !documentIsHTML ) :
				undefined;

		return val !== undefined ?
			val :
			support.attributes || !documentIsHTML ?
				elem.getAttribute( name ) :
				(val = elem.getAttributeNode(name)) && val.specified ?
					val.value :
					null;
	};

	Sizzle.escape = function( sel ) {
		return (sel + "").replace( rcssescape, fcssescape );
	};

	Sizzle.error = function( msg ) {
		throw new Error( "Syntax error, unrecognized expression: " + msg );
	};

	/**
	 * Document sorting and removing duplicates
	 * @param {ArrayLike} results
	 */
	Sizzle.uniqueSort = function( results ) {
		var elem,
			duplicates = [],
			j = 0,
			i = 0;

		// Unless we *know* we can detect duplicates, assume their presence
		hasDuplicate = !support.detectDuplicates;
		sortInput = !support.sortStable && results.slice( 0 );
		results.sort( sortOrder );

		if ( hasDuplicate ) {
			while ( (elem = results[i++]) ) {
				if ( elem === results[ i ] ) {
					j = duplicates.push( i );
				}
			}
			while ( j-- ) {
				results.splice( duplicates[ j ], 1 );
			}
		}

		// Clear input after sorting to release objects
		// See https://github.com/jquery/sizzle/pull/225
		sortInput = null;

		return results;
	};

	/**
	 * Utility function for retrieving the text value of an array of DOM nodes
	 * @param {Array|Element} elem
	 */
	getText = Sizzle.getText = function( elem ) {
		var node,
			ret = "",
			i = 0,
			nodeType = elem.nodeType;

		if ( !nodeType ) {
			// If no nodeType, this is expected to be an array
			while ( (node = elem[i++]) ) {
				// Do not traverse comment nodes
				ret += getText( node );
			}
		} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
			// Use textContent for elements
			// innerText usage removed for consistency of new lines (jQuery #11153)
			if ( typeof elem.textContent === "string" ) {
				return elem.textContent;
			} else {
				// Traverse its children
				for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
					ret += getText( elem );
				}
			}
		} else if ( nodeType === 3 || nodeType === 4 ) {
			return elem.nodeValue;
		}
		// Do not include comment or processing instruction nodes

		return ret;
	};

	Expr = Sizzle.selectors = {

		// Can be adjusted by the user
		cacheLength: 50,

		createPseudo: markFunction,

		match: matchExpr,

		attrHandle: {},

		find: {},

		relative: {
			">": { dir: "parentNode", first: true },
			" ": { dir: "parentNode" },
			"+": { dir: "previousSibling", first: true },
			"~": { dir: "previousSibling" }
		},

		preFilter: {
			"ATTR": function( match ) {
				match[1] = match[1].replace( runescape, funescape );

				// Move the given value to match[3] whether quoted or unquoted
				match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );

				if ( match[2] === "~=" ) {
					match[3] = " " + match[3] + " ";
				}

				return match.slice( 0, 4 );
			},

			"CHILD": function( match ) {
				/* matches from matchExpr["CHILD"]
					1 type (only|nth|...)
					2 what (child|of-type)
					3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
					4 xn-component of xn+y argument ([+-]?\d*n|)
					5 sign of xn-component
					6 x of xn-component
					7 sign of y-component
					8 y of y-component
				*/
				match[1] = match[1].toLowerCase();

				if ( match[1].slice( 0, 3 ) === "nth" ) {
					// nth-* requires argument
					if ( !match[3] ) {
						Sizzle.error( match[0] );
					}

					// numeric x and y parameters for Expr.filter.CHILD
					// remember that false/true cast respectively to 0/1
					match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
					match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

				// other types prohibit arguments
				} else if ( match[3] ) {
					Sizzle.error( match[0] );
				}

				return match;
			},

			"PSEUDO": function( match ) {
				var excess,
					unquoted = !match[6] && match[2];

				if ( matchExpr["CHILD"].test( match[0] ) ) {
					return null;
				}

				// Accept quoted arguments as-is
				if ( match[3] ) {
					match[2] = match[4] || match[5] || "";

				// Strip excess characters from unquoted arguments
				} else if ( unquoted && rpseudo.test( unquoted ) &&
					// Get excess from tokenize (recursively)
					(excess = tokenize( unquoted, true )) &&
					// advance to the next closing parenthesis
					(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

					// excess is a negative index
					match[0] = match[0].slice( 0, excess );
					match[2] = unquoted.slice( 0, excess );
				}

				// Return only captures needed by the pseudo filter method (type and argument)
				return match.slice( 0, 3 );
			}
		},

		filter: {

			"TAG": function( nodeNameSelector ) {
				var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
				return nodeNameSelector === "*" ?
					function() { return true; } :
					function( elem ) {
						return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
					};
			},

			"CLASS": function( className ) {
				var pattern = classCache[ className + " " ];

				return pattern ||
					(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
					classCache( className, function( elem ) {
						return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );
					});
			},

			"ATTR": function( name, operator, check ) {
				return function( elem ) {
					var result = Sizzle.attr( elem, name );

					if ( result == null ) {
						return operator === "!=";
					}
					if ( !operator ) {
						return true;
					}

					result += "";

					return operator === "=" ? result === check :
						operator === "!=" ? result !== check :
						operator === "^=" ? check && result.indexOf( check ) === 0 :
						operator === "*=" ? check && result.indexOf( check ) > -1 :
						operator === "$=" ? check && result.slice( -check.length ) === check :
						operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
						operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
						false;
				};
			},

			"CHILD": function( type, what, argument, first, last ) {
				var simple = type.slice( 0, 3 ) !== "nth",
					forward = type.slice( -4 ) !== "last",
					ofType = what === "of-type";

				return first === 1 && last === 0 ?

					// Shortcut for :nth-*(n)
					function( elem ) {
						return !!elem.parentNode;
					} :

					function( elem, context, xml ) {
						var cache, uniqueCache, outerCache, node, nodeIndex, start,
							dir = simple !== forward ? "nextSibling" : "previousSibling",
							parent = elem.parentNode,
							name = ofType && elem.nodeName.toLowerCase(),
							useCache = !xml && !ofType,
							diff = false;

						if ( parent ) {

							// :(first|last|only)-(child|of-type)
							if ( simple ) {
								while ( dir ) {
									node = elem;
									while ( (node = node[ dir ]) ) {
										if ( ofType ?
											node.nodeName.toLowerCase() === name :
											node.nodeType === 1 ) {

											return false;
										}
									}
									// Reverse direction for :only-* (if we haven't yet done so)
									start = dir = type === "only" && !start && "nextSibling";
								}
								return true;
							}

							start = [ forward ? parent.firstChild : parent.lastChild ];

							// non-xml :nth-child(...) stores cache data on `parent`
							if ( forward && useCache ) {

								// Seek `elem` from a previously-cached index

								// ...in a gzip-friendly way
								node = parent;
								outerCache = node[ expando ] || (node[ expando ] = {});

								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[ node.uniqueID ] ||
									(outerCache[ node.uniqueID ] = {});

								cache = uniqueCache[ type ] || [];
								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
								diff = nodeIndex && cache[ 2 ];
								node = nodeIndex && parent.childNodes[ nodeIndex ];

								while ( (node = ++nodeIndex && node && node[ dir ] ||

									// Fallback to seeking `elem` from the start
									(diff = nodeIndex = 0) || start.pop()) ) {

									// When found, cache indexes on `parent` and break
									if ( node.nodeType === 1 && ++diff && node === elem ) {
										uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];
										break;
									}
								}

							} else {
								// Use previously-cached element index if available
								if ( useCache ) {
									// ...in a gzip-friendly way
									node = elem;
									outerCache = node[ expando ] || (node[ expando ] = {});

									// Support: IE <9 only
									// Defend against cloned attroperties (jQuery gh-1709)
									uniqueCache = outerCache[ node.uniqueID ] ||
										(outerCache[ node.uniqueID ] = {});

									cache = uniqueCache[ type ] || [];
									nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
									diff = nodeIndex;
								}

								// xml :nth-child(...)
								// or :nth-last-child(...) or :nth(-last)?-of-type(...)
								if ( diff === false ) {
									// Use the same loop as above to seek `elem` from the start
									while ( (node = ++nodeIndex && node && node[ dir ] ||
										(diff = nodeIndex = 0) || start.pop()) ) {

										if ( ( ofType ?
											node.nodeName.toLowerCase() === name :
											node.nodeType === 1 ) &&
											++diff ) {

											// Cache the index of each encountered element
											if ( useCache ) {
												outerCache = node[ expando ] || (node[ expando ] = {});

												// Support: IE <9 only
												// Defend against cloned attroperties (jQuery gh-1709)
												uniqueCache = outerCache[ node.uniqueID ] ||
													(outerCache[ node.uniqueID ] = {});

												uniqueCache[ type ] = [ dirruns, diff ];
											}

											if ( node === elem ) {
												break;
											}
										}
									}
								}
							}

							// Incorporate the offset, then check against cycle size
							diff -= last;
							return diff === first || ( diff % first === 0 && diff / first >= 0 );
						}
					};
			},

			"PSEUDO": function( pseudo, argument ) {
				// pseudo-class names are case-insensitive
				// http://www.w3.org/TR/selectors/#pseudo-classes
				// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
				// Remember that setFilters inherits from pseudos
				var args,
					fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
						Sizzle.error( "unsupported pseudo: " + pseudo );

				// The user may use createPseudo to indicate that
				// arguments are needed to create the filter function
				// just as Sizzle does
				if ( fn[ expando ] ) {
					return fn( argument );
				}

				// But maintain support for old signatures
				if ( fn.length > 1 ) {
					args = [ pseudo, pseudo, "", argument ];
					return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
						markFunction(function( seed, matches ) {
							var idx,
								matched = fn( seed, argument ),
								i = matched.length;
							while ( i-- ) {
								idx = indexOf( seed, matched[i] );
								seed[ idx ] = !( matches[ idx ] = matched[i] );
							}
						}) :
						function( elem ) {
							return fn( elem, 0, args );
						};
				}

				return fn;
			}
		},

		pseudos: {
			// Potentially complex pseudos
			"not": markFunction(function( selector ) {
				// Trim the selector passed to compile
				// to avoid treating leading and trailing
				// spaces as combinators
				var input = [],
					results = [],
					matcher = compile( selector.replace( rtrim, "$1" ) );

				return matcher[ expando ] ?
					markFunction(function( seed, matches, context, xml ) {
						var elem,
							unmatched = matcher( seed, null, xml, [] ),
							i = seed.length;

						// Match elements unmatched by `matcher`
						while ( i-- ) {
							if ( (elem = unmatched[i]) ) {
								seed[i] = !(matches[i] = elem);
							}
						}
					}) :
					function( elem, context, xml ) {
						input[0] = elem;
						matcher( input, null, xml, results );
						// Don't keep the element (issue #299)
						input[0] = null;
						return !results.pop();
					};
			}),

			"has": markFunction(function( selector ) {
				return function( elem ) {
					return Sizzle( selector, elem ).length > 0;
				};
			}),

			"contains": markFunction(function( text ) {
				text = text.replace( runescape, funescape );
				return function( elem ) {
					return ( elem.textContent || getText( elem ) ).indexOf( text ) > -1;
				};
			}),

			// "Whether an element is represented by a :lang() selector
			// is based solely on the element's language value
			// being equal to the identifier C,
			// or beginning with the identifier C immediately followed by "-".
			// The matching of C against the element's language value is performed case-insensitively.
			// The identifier C does not have to be a valid language name."
			// http://www.w3.org/TR/selectors/#lang-pseudo
			"lang": markFunction( function( lang ) {
				// lang value must be a valid identifier
				if ( !ridentifier.test(lang || "") ) {
					Sizzle.error( "unsupported lang: " + lang );
				}
				lang = lang.replace( runescape, funescape ).toLowerCase();
				return function( elem ) {
					var elemLang;
					do {
						if ( (elemLang = documentIsHTML ?
							elem.lang :
							elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

							elemLang = elemLang.toLowerCase();
							return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
						}
					} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
					return false;
				};
			}),

			// Miscellaneous
			"target": function( elem ) {
				var hash = window.location && window.location.hash;
				return hash && hash.slice( 1 ) === elem.id;
			},

			"root": function( elem ) {
				return elem === docElem;
			},

			"focus": function( elem ) {
				return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
			},

			// Boolean properties
			"enabled": createDisabledPseudo( false ),
			"disabled": createDisabledPseudo( true ),

			"checked": function( elem ) {
				// In CSS3, :checked should return both checked and selected elements
				// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
				var nodeName = elem.nodeName.toLowerCase();
				return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
			},

			"selected": function( elem ) {
				// Accessing this property makes selected-by-default
				// options in Safari work properly
				if ( elem.parentNode ) {
					elem.parentNode.selectedIndex;
				}

				return elem.selected === true;
			},

			// Contents
			"empty": function( elem ) {
				// http://www.w3.org/TR/selectors/#empty-pseudo
				// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
				//   but not by others (comment: 8; processing instruction: 7; etc.)
				// nodeType < 6 works because attributes (2) do not appear as children
				for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
					if ( elem.nodeType < 6 ) {
						return false;
					}
				}
				return true;
			},

			"parent": function( elem ) {
				return !Expr.pseudos["empty"]( elem );
			},

			// Element/input types
			"header": function( elem ) {
				return rheader.test( elem.nodeName );
			},

			"input": function( elem ) {
				return rinputs.test( elem.nodeName );
			},

			"button": function( elem ) {
				var name = elem.nodeName.toLowerCase();
				return name === "input" && elem.type === "button" || name === "button";
			},

			"text": function( elem ) {
				var attr;
				return elem.nodeName.toLowerCase() === "input" &&
					elem.type === "text" &&

					// Support: IE<8
					// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
					( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
			},

			// Position-in-collection
			"first": createPositionalPseudo(function() {
				return [ 0 ];
			}),

			"last": createPositionalPseudo(function( matchIndexes, length ) {
				return [ length - 1 ];
			}),

			"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
				return [ argument < 0 ? argument + length : argument ];
			}),

			"even": createPositionalPseudo(function( matchIndexes, length ) {
				var i = 0;
				for ( ; i < length; i += 2 ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),

			"odd": createPositionalPseudo(function( matchIndexes, length ) {
				var i = 1;
				for ( ; i < length; i += 2 ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),

			"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
				var i = argument < 0 ?
					argument + length :
					argument > length ?
						length :
						argument;
				for ( ; --i >= 0; ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),

			"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
				var i = argument < 0 ? argument + length : argument;
				for ( ; ++i < length; ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			})
		}
	};

	Expr.pseudos["nth"] = Expr.pseudos["eq"];

	// Add button/input type pseudos
	for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
		Expr.pseudos[ i ] = createInputPseudo( i );
	}
	for ( i in { submit: true, reset: true } ) {
		Expr.pseudos[ i ] = createButtonPseudo( i );
	}

	// Easy API for creating new setFilters
	function setFilters() {}
	setFilters.prototype = Expr.filters = Expr.pseudos;
	Expr.setFilters = new setFilters();

	tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
		var matched, match, tokens, type,
			soFar, groups, preFilters,
			cached = tokenCache[ selector + " " ];

		if ( cached ) {
			return parseOnly ? 0 : cached.slice( 0 );
		}

		soFar = selector;
		groups = [];
		preFilters = Expr.preFilter;

		while ( soFar ) {

			// Comma and first run
			if ( !matched || (match = rcomma.exec( soFar )) ) {
				if ( match ) {
					// Don't consume trailing commas as valid
					soFar = soFar.slice( match[0].length ) || soFar;
				}
				groups.push( (tokens = []) );
			}

			matched = false;

			// Combinators
			if ( (match = rcombinators.exec( soFar )) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					// Cast descendant combinators to space
					type: match[0].replace( rtrim, " " )
				});
				soFar = soFar.slice( matched.length );
			}

			// Filters
			for ( type in Expr.filter ) {
				if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
					(match = preFilters[ type ]( match ))) ) {
					matched = match.shift();
					tokens.push({
						value: matched,
						type: type,
						matches: match
					});
					soFar = soFar.slice( matched.length );
				}
			}

			if ( !matched ) {
				break;
			}
		}

		// Return the length of the invalid excess
		// if we're just parsing
		// Otherwise, throw an error or return tokens
		return parseOnly ?
			soFar.length :
			soFar ?
				Sizzle.error( selector ) :
				// Cache the tokens
				tokenCache( selector, groups ).slice( 0 );
	};

	function toSelector( tokens ) {
		var i = 0,
			len = tokens.length,
			selector = "";
		for ( ; i < len; i++ ) {
			selector += tokens[i].value;
		}
		return selector;
	}

	function addCombinator( matcher, combinator, base ) {
		var dir = combinator.dir,
			skip = combinator.next,
			key = skip || dir,
			checkNonElements = base && key === "parentNode",
			doneName = done++;

		return combinator.first ?
			// Check against closest ancestor/preceding element
			function( elem, context, xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						return matcher( elem, context, xml );
					}
				}
				return false;
			} :

			// Check against all ancestor/preceding elements
			function( elem, context, xml ) {
				var oldCache, uniqueCache, outerCache,
					newCache = [ dirruns, doneName ];

				// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
				if ( xml ) {
					while ( (elem = elem[ dir ]) ) {
						if ( elem.nodeType === 1 || checkNonElements ) {
							if ( matcher( elem, context, xml ) ) {
								return true;
							}
						}
					}
				} else {
					while ( (elem = elem[ dir ]) ) {
						if ( elem.nodeType === 1 || checkNonElements ) {
							outerCache = elem[ expando ] || (elem[ expando ] = {});

							// Support: IE <9 only
							// Defend against cloned attroperties (jQuery gh-1709)
							uniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});

							if ( skip && skip === elem.nodeName.toLowerCase() ) {
								elem = elem[ dir ] || elem;
							} else if ( (oldCache = uniqueCache[ key ]) &&
								oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

								// Assign to newCache so results back-propagate to previous elements
								return (newCache[ 2 ] = oldCache[ 2 ]);
							} else {
								// Reuse newcache so results back-propagate to previous elements
								uniqueCache[ key ] = newCache;

								// A match means we're done; a fail means we have to keep checking
								if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
									return true;
								}
							}
						}
					}
				}
				return false;
			};
	}

	function elementMatcher( matchers ) {
		return matchers.length > 1 ?
			function( elem, context, xml ) {
				var i = matchers.length;
				while ( i-- ) {
					if ( !matchers[i]( elem, context, xml ) ) {
						return false;
					}
				}
				return true;
			} :
			matchers[0];
	}

	function multipleContexts( selector, contexts, results ) {
		var i = 0,
			len = contexts.length;
		for ( ; i < len; i++ ) {
			Sizzle( selector, contexts[i], results );
		}
		return results;
	}

	function condense( unmatched, map, filter, context, xml ) {
		var elem,
			newUnmatched = [],
			i = 0,
			len = unmatched.length,
			mapped = map != null;

		for ( ; i < len; i++ ) {
			if ( (elem = unmatched[i]) ) {
				if ( !filter || filter( elem, context, xml ) ) {
					newUnmatched.push( elem );
					if ( mapped ) {
						map.push( i );
					}
				}
			}
		}

		return newUnmatched;
	}

	function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
		if ( postFilter && !postFilter[ expando ] ) {
			postFilter = setMatcher( postFilter );
		}
		if ( postFinder && !postFinder[ expando ] ) {
			postFinder = setMatcher( postFinder, postSelector );
		}
		return markFunction(function( seed, results, context, xml ) {
			var temp, i, elem,
				preMap = [],
				postMap = [],
				preexisting = results.length,

				// Get initial elements from seed or context
				elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

				// Prefilter to get matcher input, preserving a map for seed-results synchronization
				matcherIn = preFilter && ( seed || !selector ) ?
					condense( elems, preMap, preFilter, context, xml ) :
					elems,

				matcherOut = matcher ?
					// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
					postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

						// ...intermediate processing is necessary
						[] :

						// ...otherwise use results directly
						results :
					matcherIn;

			// Find primary matches
			if ( matcher ) {
				matcher( matcherIn, matcherOut, context, xml );
			}

			// Apply postFilter
			if ( postFilter ) {
				temp = condense( matcherOut, postMap );
				postFilter( temp, [], context, xml );

				// Un-match failing elements by moving them back to matcherIn
				i = temp.length;
				while ( i-- ) {
					if ( (elem = temp[i]) ) {
						matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
					}
				}
			}

			if ( seed ) {
				if ( postFinder || preFilter ) {
					if ( postFinder ) {
						// Get the final matcherOut by condensing this intermediate into postFinder contexts
						temp = [];
						i = matcherOut.length;
						while ( i-- ) {
							if ( (elem = matcherOut[i]) ) {
								// Restore matcherIn since elem is not yet a final match
								temp.push( (matcherIn[i] = elem) );
							}
						}
						postFinder( null, (matcherOut = []), temp, xml );
					}

					// Move matched elements from seed to results to keep them synchronized
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) &&
							(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {

							seed[temp] = !(results[temp] = elem);
						}
					}
				}

			// Add elements to results, through postFinder if defined
			} else {
				matcherOut = condense(
					matcherOut === results ?
						matcherOut.splice( preexisting, matcherOut.length ) :
						matcherOut
				);
				if ( postFinder ) {
					postFinder( null, results, matcherOut, xml );
				} else {
					push.apply( results, matcherOut );
				}
			}
		});
	}

	function matcherFromTokens( tokens ) {
		var checkContext, matcher, j,
			len = tokens.length,
			leadingRelative = Expr.relative[ tokens[0].type ],
			implicitRelative = leadingRelative || Expr.relative[" "],
			i = leadingRelative ? 1 : 0,

			// The foundational matcher ensures that elements are reachable from top-level context(s)
			matchContext = addCombinator( function( elem ) {
				return elem === checkContext;
			}, implicitRelative, true ),
			matchAnyContext = addCombinator( function( elem ) {
				return indexOf( checkContext, elem ) > -1;
			}, implicitRelative, true ),
			matchers = [ function( elem, context, xml ) {
				var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
					(checkContext = context).nodeType ?
						matchContext( elem, context, xml ) :
						matchAnyContext( elem, context, xml ) );
				// Avoid hanging onto element (issue #299)
				checkContext = null;
				return ret;
			} ];

		for ( ; i < len; i++ ) {
			if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
				matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
			} else {
				matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

				// Return special upon seeing a positional matcher
				if ( matcher[ expando ] ) {
					// Find the next relative operator (if any) for proper handling
					j = ++i;
					for ( ; j < len; j++ ) {
						if ( Expr.relative[ tokens[j].type ] ) {
							break;
						}
					}
					return setMatcher(
						i > 1 && elementMatcher( matchers ),
						i > 1 && toSelector(
							// If the preceding token was a descendant combinator, insert an implicit any-element `*`
							tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
						).replace( rtrim, "$1" ),
						matcher,
						i < j && matcherFromTokens( tokens.slice( i, j ) ),
						j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
						j < len && toSelector( tokens )
					);
				}
				matchers.push( matcher );
			}
		}

		return elementMatcher( matchers );
	}

	function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
		var bySet = setMatchers.length > 0,
			byElement = elementMatchers.length > 0,
			superMatcher = function( seed, context, xml, results, outermost ) {
				var elem, j, matcher,
					matchedCount = 0,
					i = "0",
					unmatched = seed && [],
					setMatched = [],
					contextBackup = outermostContext,
					// We must always have either seed elements or outermost context
					elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
					// Use integer dirruns iff this is the outermost matcher
					dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
					len = elems.length;

				if ( outermost ) {
					outermostContext = context === document || context || outermost;
				}

				// Add elements passing elementMatchers directly to results
				// Support: IE<9, Safari
				// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
				for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
					if ( byElement && elem ) {
						j = 0;
						if ( !context && elem.ownerDocument !== document ) {
							setDocument( elem );
							xml = !documentIsHTML;
						}
						while ( (matcher = elementMatchers[j++]) ) {
							if ( matcher( elem, context || document, xml) ) {
								results.push( elem );
								break;
							}
						}
						if ( outermost ) {
							dirruns = dirrunsUnique;
						}
					}

					// Track unmatched elements for set filters
					if ( bySet ) {
						// They will have gone through all possible matchers
						if ( (elem = !matcher && elem) ) {
							matchedCount--;
						}

						// Lengthen the array for every element, matched or not
						if ( seed ) {
							unmatched.push( elem );
						}
					}
				}

				// `i` is now the count of elements visited above, and adding it to `matchedCount`
				// makes the latter nonnegative.
				matchedCount += i;

				// Apply set filters to unmatched elements
				// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
				// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
				// no element matchers and no seed.
				// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
				// case, which will result in a "00" `matchedCount` that differs from `i` but is also
				// numerically zero.
				if ( bySet && i !== matchedCount ) {
					j = 0;
					while ( (matcher = setMatchers[j++]) ) {
						matcher( unmatched, setMatched, context, xml );
					}

					if ( seed ) {
						// Reintegrate element matches to eliminate the need for sorting
						if ( matchedCount > 0 ) {
							while ( i-- ) {
								if ( !(unmatched[i] || setMatched[i]) ) {
									setMatched[i] = pop.call( results );
								}
							}
						}

						// Discard index placeholder values to get only actual matches
						setMatched = condense( setMatched );
					}

					// Add matches to results
					push.apply( results, setMatched );

					// Seedless set matches succeeding multiple successful matchers stipulate sorting
					if ( outermost && !seed && setMatched.length > 0 &&
						( matchedCount + setMatchers.length ) > 1 ) {

						Sizzle.uniqueSort( results );
					}
				}

				// Override manipulation of globals by nested matchers
				if ( outermost ) {
					dirruns = dirrunsUnique;
					outermostContext = contextBackup;
				}

				return unmatched;
			};

		return bySet ?
			markFunction( superMatcher ) :
			superMatcher;
	}

	compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
		var i,
			setMatchers = [],
			elementMatchers = [],
			cached = compilerCache[ selector + " " ];

		if ( !cached ) {
			// Generate a function of recursive functions that can be used to check each element
			if ( !match ) {
				match = tokenize( selector );
			}
			i = match.length;
			while ( i-- ) {
				cached = matcherFromTokens( match[i] );
				if ( cached[ expando ] ) {
					setMatchers.push( cached );
				} else {
					elementMatchers.push( cached );
				}
			}

			// Cache the compiled function
			cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );

			// Save selector and tokenization
			cached.selector = selector;
		}
		return cached;
	};

	/**
	 * A low-level selection function that works with Sizzle's compiled
	 *  selector functions
	 * @param {String|Function} selector A selector or a pre-compiled
	 *  selector function built with Sizzle.compile
	 * @param {Element} context
	 * @param {Array} [results]
	 * @param {Array} [seed] A set of elements to match against
	 */
	select = Sizzle.select = function( selector, context, results, seed ) {
		var i, tokens, token, type, find,
			compiled = typeof selector === "function" && selector,
			match = !seed && tokenize( (selector = compiled.selector || selector) );

		results = results || [];

		// Try to minimize operations if there is only one selector in the list and no seed
		// (the latter of which guarantees us context)
		if ( match.length === 1 ) {

			// Reduce context if the leading compound selector is an ID
			tokens = match[0] = match[0].slice( 0 );
			if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
					context.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[1].type ] ) {

				context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
				if ( !context ) {
					return results;

				// Precompiled matchers will still verify ancestry, so step up a level
				} else if ( compiled ) {
					context = context.parentNode;
				}

				selector = selector.slice( tokens.shift().value.length );
			}

			// Fetch a seed set for right-to-left matching
			i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
			while ( i-- ) {
				token = tokens[i];

				// Abort if we hit a combinator
				if ( Expr.relative[ (type = token.type) ] ) {
					break;
				}
				if ( (find = Expr.find[ type ]) ) {
					// Search, expanding context for leading sibling combinators
					if ( (seed = find(
						token.matches[0].replace( runescape, funescape ),
						rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
					)) ) {

						// If seed is empty or no tokens remain, we can return early
						tokens.splice( i, 1 );
						selector = seed.length && toSelector( tokens );
						if ( !selector ) {
							push.apply( results, seed );
							return results;
						}

						break;
					}
				}
			}
		}

		// Compile and execute a filtering function if one is not provided
		// Provide `match` to avoid retokenization if we modified the selector above
		( compiled || compile( selector, match ) )(
			seed,
			context,
			!documentIsHTML,
			results,
			!context || rsibling.test( selector ) && testContext( context.parentNode ) || context
		);
		return results;
	};

	// One-time assignments

	// Sort stability
	support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

	// Support: Chrome 14-35+
	// Always assume duplicates if they aren't passed to the comparison function
	support.detectDuplicates = !!hasDuplicate;

	// Initialize against the default document
	setDocument();

	// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
	// Detached nodes confoundingly follow *each other*
	support.sortDetached = assert(function( el ) {
		// Should return 1, but returns 4 (following)
		return el.compareDocumentPosition( document.createElement("fieldset") ) & 1;
	});

	// Support: IE<8
	// Prevent attribute/property "interpolation"
	// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
	if ( !assert(function( el ) {
		el.innerHTML = "<a href='#'></a>";
		return el.firstChild.getAttribute("href") === "#" ;
	}) ) {
		addHandle( "type|href|height|width", function( elem, name, isXML ) {
			if ( !isXML ) {
				return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
			}
		});
	}

	// Support: IE<9
	// Use defaultValue in place of getAttribute("value")
	if ( !support.attributes || !assert(function( el ) {
		el.innerHTML = "<input/>";
		el.firstChild.setAttribute( "value", "" );
		return el.firstChild.getAttribute( "value" ) === "";
	}) ) {
		addHandle( "value", function( elem, name, isXML ) {
			if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
				return elem.defaultValue;
			}
		});
	}

	// Support: IE<9
	// Use getAttributeNode to fetch booleans when getAttribute lies
	if ( !assert(function( el ) {
		return el.getAttribute("disabled") == null;
	}) ) {
		addHandle( booleans, function( elem, name, isXML ) {
			var val;
			if ( !isXML ) {
				return elem[ name ] === true ? name.toLowerCase() :
						(val = elem.getAttributeNode( name )) && val.specified ?
						val.value :
					null;
			}
		});
	}

	return Sizzle;

	})( window );



	jQuery.find = Sizzle;
	jQuery.expr = Sizzle.selectors;

	// Deprecated
	jQuery.expr[ ":" ] = jQuery.expr.pseudos;
	jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
	jQuery.text = Sizzle.getText;
	jQuery.isXMLDoc = Sizzle.isXML;
	jQuery.contains = Sizzle.contains;
	jQuery.escapeSelector = Sizzle.escape;




	var dir = function( elem, dir, until ) {
		var matched = [],
			truncate = until !== undefined;

		while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
			if ( elem.nodeType === 1 ) {
				if ( truncate && jQuery( elem ).is( until ) ) {
					break;
				}
				matched.push( elem );
			}
		}
		return matched;
	};


	var siblings = function( n, elem ) {
		var matched = [];

		for ( ; n; n = n.nextSibling ) {
			if ( n.nodeType === 1 && n !== elem ) {
				matched.push( n );
			}
		}

		return matched;
	};


	var rneedsContext = jQuery.expr.match.needsContext;



	function nodeName( elem, name ) {

	  return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();

	};
	var rsingleTag = ( /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i );



	// Implement the identical functionality for filter and not
	function winnow( elements, qualifier, not ) {
		if ( isFunction( qualifier ) ) {
			return jQuery.grep( elements, function( elem, i ) {
				return !!qualifier.call( elem, i, elem ) !== not;
			} );
		}

		// Single element
		if ( qualifier.nodeType ) {
			return jQuery.grep( elements, function( elem ) {
				return ( elem === qualifier ) !== not;
			} );
		}

		// Arraylike of elements (jQuery, arguments, Array)
		if ( typeof qualifier !== "string" ) {
			return jQuery.grep( elements, function( elem ) {
				return ( indexOf.call( qualifier, elem ) > -1 ) !== not;
			} );
		}

		// Filtered directly for both simple and complex selectors
		return jQuery.filter( qualifier, elements, not );
	}

	jQuery.filter = function( expr, elems, not ) {
		var elem = elems[ 0 ];

		if ( not ) {
			expr = ":not(" + expr + ")";
		}

		if ( elems.length === 1 && elem.nodeType === 1 ) {
			return jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];
		}

		return jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
			return elem.nodeType === 1;
		} ) );
	};

	jQuery.fn.extend( {
		find: function( selector ) {
			var i, ret,
				len = this.length,
				self = this;

			if ( typeof selector !== "string" ) {
				return this.pushStack( jQuery( selector ).filter( function() {
					for ( i = 0; i < len; i++ ) {
						if ( jQuery.contains( self[ i ], this ) ) {
							return true;
						}
					}
				} ) );
			}

			ret = this.pushStack( [] );

			for ( i = 0; i < len; i++ ) {
				jQuery.find( selector, self[ i ], ret );
			}

			return len > 1 ? jQuery.uniqueSort( ret ) : ret;
		},
		filter: function( selector ) {
			return this.pushStack( winnow( this, selector || [], false ) );
		},
		not: function( selector ) {
			return this.pushStack( winnow( this, selector || [], true ) );
		},
		is: function( selector ) {
			return !!winnow(
				this,

				// If this is a positional/relative selector, check membership in the returned set
				// so $("p:first").is("p:last") won't return true for a doc with two "p".
				typeof selector === "string" && rneedsContext.test( selector ) ?
					jQuery( selector ) :
					selector || [],
				false
			).length;
		}
	} );


	// Initialize a jQuery object


	// A central reference to the root jQuery(document)
	var rootjQuery,

		// A simple way to check for HTML strings
		// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
		// Strict HTML recognition (#11290: must start with <)
		// Shortcut simple #id case for speed
		rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,

		init = jQuery.fn.init = function( selector, context, root ) {
			var match, elem;

			// HANDLE: $(""), $(null), $(undefined), $(false)
			if ( !selector ) {
				return this;
			}

			// Method init() accepts an alternate rootjQuery
			// so migrate can support jQuery.sub (gh-2101)
			root = root || rootjQuery;

			// Handle HTML strings
			if ( typeof selector === "string" ) {
				if ( selector[ 0 ] === "<" &&
					selector[ selector.length - 1 ] === ">" &&
					selector.length >= 3 ) {

					// Assume that strings that start and end with <> are HTML and skip the regex check
					match = [ null, selector, null ];

				} else {
					match = rquickExpr.exec( selector );
				}

				// Match html or make sure no context is specified for #id
				if ( match && ( match[ 1 ] || !context ) ) {

					// HANDLE: $(html) -> $(array)
					if ( match[ 1 ] ) {
						context = context instanceof jQuery ? context[ 0 ] : context;

						// Option to run scripts is true for back-compat
						// Intentionally let the error be thrown if parseHTML is not present
						jQuery.merge( this, jQuery.parseHTML(
							match[ 1 ],
							context && context.nodeType ? context.ownerDocument || context : document,
							true
						) );

						// HANDLE: $(html, props)
						if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {
							for ( match in context ) {

								// Properties of context are called as methods if possible
								if ( isFunction( this[ match ] ) ) {
									this[ match ]( context[ match ] );

								// ...and otherwise set as attributes
								} else {
									this.attr( match, context[ match ] );
								}
							}
						}

						return this;

					// HANDLE: $(#id)
					} else {
						elem = document.getElementById( match[ 2 ] );

						if ( elem ) {

							// Inject the element directly into the jQuery object
							this[ 0 ] = elem;
							this.length = 1;
						}
						return this;
					}

				// HANDLE: $(expr, $(...))
				} else if ( !context || context.jquery ) {
					return ( context || root ).find( selector );

				// HANDLE: $(expr, context)
				// (which is just equivalent to: $(context).find(expr)
				} else {
					return this.constructor( context ).find( selector );
				}

			// HANDLE: $(DOMElement)
			} else if ( selector.nodeType ) {
				this[ 0 ] = selector;
				this.length = 1;
				return this;

			// HANDLE: $(function)
			// Shortcut for document ready
			} else if ( isFunction( selector ) ) {
				return root.ready !== undefined ?
					root.ready( selector ) :

					// Execute immediately if ready is not present
					selector( jQuery );
			}

			return jQuery.makeArray( selector, this );
		};

	// Give the init function the jQuery prototype for later instantiation
	init.prototype = jQuery.fn;

	// Initialize central reference
	rootjQuery = jQuery( document );


	var rparentsprev = /^(?:parents|prev(?:Until|All))/,

		// Methods guaranteed to produce a unique set when starting from a unique set
		guaranteedUnique = {
			children: true,
			contents: true,
			next: true,
			prev: true
		};

	jQuery.fn.extend( {
		has: function( target ) {
			var targets = jQuery( target, this ),
				l = targets.length;

			return this.filter( function() {
				var i = 0;
				for ( ; i < l; i++ ) {
					if ( jQuery.contains( this, targets[ i ] ) ) {
						return true;
					}
				}
			} );
		},

		closest: function( selectors, context ) {
			var cur,
				i = 0,
				l = this.length,
				matched = [],
				targets = typeof selectors !== "string" && jQuery( selectors );

			// Positional selectors never match, since there's no _selection_ context
			if ( !rneedsContext.test( selectors ) ) {
				for ( ; i < l; i++ ) {
					for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {

						// Always skip document fragments
						if ( cur.nodeType < 11 && ( targets ?
							targets.index( cur ) > -1 :

							// Don't pass non-elements to Sizzle
							cur.nodeType === 1 &&
								jQuery.find.matchesSelector( cur, selectors ) ) ) {

							matched.push( cur );
							break;
						}
					}
				}
			}

			return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );
		},

		// Determine the position of an element within the set
		index: function( elem ) {

			// No argument, return index in parent
			if ( !elem ) {
				return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
			}

			// Index in selector
			if ( typeof elem === "string" ) {
				return indexOf.call( jQuery( elem ), this[ 0 ] );
			}

			// Locate the position of the desired element
			return indexOf.call( this,

				// If it receives a jQuery object, the first element is used
				elem.jquery ? elem[ 0 ] : elem
			);
		},

		add: function( selector, context ) {
			return this.pushStack(
				jQuery.uniqueSort(
					jQuery.merge( this.get(), jQuery( selector, context ) )
				)
			);
		},

		addBack: function( selector ) {
			return this.add( selector == null ?
				this.prevObject : this.prevObject.filter( selector )
			);
		}
	} );

	function sibling( cur, dir ) {
		while ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}
		return cur;
	}

	jQuery.each( {
		parent: function( elem ) {
			var parent = elem.parentNode;
			return parent && parent.nodeType !== 11 ? parent : null;
		},
		parents: function( elem ) {
			return dir( elem, "parentNode" );
		},
		parentsUntil: function( elem, i, until ) {
			return dir( elem, "parentNode", until );
		},
		next: function( elem ) {
			return sibling( elem, "nextSibling" );
		},
		prev: function( elem ) {
			return sibling( elem, "previousSibling" );
		},
		nextAll: function( elem ) {
			return dir( elem, "nextSibling" );
		},
		prevAll: function( elem ) {
			return dir( elem, "previousSibling" );
		},
		nextUntil: function( elem, i, until ) {
			return dir( elem, "nextSibling", until );
		},
		prevUntil: function( elem, i, until ) {
			return dir( elem, "previousSibling", until );
		},
		siblings: function( elem ) {
			return siblings( ( elem.parentNode || {} ).firstChild, elem );
		},
		children: function( elem ) {
			return siblings( elem.firstChild );
		},
		contents: function( elem ) {
			if ( typeof elem.contentDocument !== "undefined" ) {
				return elem.contentDocument;
			}

			// Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only
			// Treat the template element as a regular one in browsers that
			// don't support it.
			if ( nodeName( elem, "template" ) ) {
				elem = elem.content || elem;
			}

			return jQuery.merge( [], elem.childNodes );
		}
	}, function( name, fn ) {
		jQuery.fn[ name ] = function( until, selector ) {
			var matched = jQuery.map( this, fn, until );

			if ( name.slice( -5 ) !== "Until" ) {
				selector = until;
			}

			if ( selector && typeof selector === "string" ) {
				matched = jQuery.filter( selector, matched );
			}

			if ( this.length > 1 ) {

				// Remove duplicates
				if ( !guaranteedUnique[ name ] ) {
					jQuery.uniqueSort( matched );
				}

				// Reverse order for parents* and prev-derivatives
				if ( rparentsprev.test( name ) ) {
					matched.reverse();
				}
			}

			return this.pushStack( matched );
		};
	} );
	var rnothtmlwhite = ( /[^\x20\t\r\n\f]+/g );



	// Convert String-formatted options into Object-formatted ones
	function createOptions( options ) {
		var object = {};
		jQuery.each( options.match( rnothtmlwhite ) || [], function( _, flag ) {
			object[ flag ] = true;
		} );
		return object;
	}

	/*
	 * Create a callback list using the following parameters:
	 *
	 *	options: an optional list of space-separated options that will change how
	 *			the callback list behaves or a more traditional option object
	 *
	 * By default a callback list will act like an event callback list and can be
	 * "fired" multiple times.
	 *
	 * Possible options:
	 *
	 *	once:			will ensure the callback list can only be fired once (like a Deferred)
	 *
	 *	memory:			will keep track of previous values and will call any callback added
	 *					after the list has been fired right away with the latest "memorized"
	 *					values (like a Deferred)
	 *
	 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
	 *
	 *	stopOnFalse:	interrupt callings when a callback returns false
	 *
	 */
	jQuery.Callbacks = function( options ) {

		// Convert options from String-formatted to Object-formatted if needed
		// (we check in cache first)
		options = typeof options === "string" ?
			createOptions( options ) :
			jQuery.extend( {}, options );

		var // Flag to know if list is currently firing
			firing,

			// Last fire value for non-forgettable lists
			memory,

			// Flag to know if list was already fired
			fired,

			// Flag to prevent firing
			locked,

			// Actual callback list
			list = [],

			// Queue of execution data for repeatable lists
			queue = [],

			// Index of currently firing callback (modified by add/remove as needed)
			firingIndex = -1,

			// Fire callbacks
			fire = function() {

				// Enforce single-firing
				locked = locked || options.once;

				// Execute callbacks for all pending executions,
				// respecting firingIndex overrides and runtime changes
				fired = firing = true;
				for ( ; queue.length; firingIndex = -1 ) {
					memory = queue.shift();
					while ( ++firingIndex < list.length ) {

						// Run callback and check for early termination
						if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
							options.stopOnFalse ) {

							// Jump to end and forget the data so .add doesn't re-fire
							firingIndex = list.length;
							memory = false;
						}
					}
				}

				// Forget the data if we're done with it
				if ( !options.memory ) {
					memory = false;
				}

				firing = false;

				// Clean up if we're done firing for good
				if ( locked ) {

					// Keep an empty list if we have data for future add calls
					if ( memory ) {
						list = [];

					// Otherwise, this object is spent
					} else {
						list = "";
					}
				}
			},

			// Actual Callbacks object
			self = {

				// Add a callback or a collection of callbacks to the list
				add: function() {
					if ( list ) {

						// If we have memory from a past run, we should fire after adding
						if ( memory && !firing ) {
							firingIndex = list.length - 1;
							queue.push( memory );
						}

						( function add( args ) {
							jQuery.each( args, function( _, arg ) {
								if ( isFunction( arg ) ) {
									if ( !options.unique || !self.has( arg ) ) {
										list.push( arg );
									}
								} else if ( arg && arg.length && toType( arg ) !== "string" ) {

									// Inspect recursively
									add( arg );
								}
							} );
						} )( arguments );

						if ( memory && !firing ) {
							fire();
						}
					}
					return this;
				},

				// Remove a callback from the list
				remove: function() {
					jQuery.each( arguments, function( _, arg ) {
						var index;
						while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
							list.splice( index, 1 );

							// Handle firing indexes
							if ( index <= firingIndex ) {
								firingIndex--;
							}
						}
					} );
					return this;
				},

				// Check if a given callback is in the list.
				// If no argument is given, return whether or not list has callbacks attached.
				has: function( fn ) {
					return fn ?
						jQuery.inArray( fn, list ) > -1 :
						list.length > 0;
				},

				// Remove all callbacks from the list
				empty: function() {
					if ( list ) {
						list = [];
					}
					return this;
				},

				// Disable .fire and .add
				// Abort any current/pending executions
				// Clear all callbacks and values
				disable: function() {
					locked = queue = [];
					list = memory = "";
					return this;
				},
				disabled: function() {
					return !list;
				},

				// Disable .fire
				// Also disable .add unless we have memory (since it would have no effect)
				// Abort any pending executions
				lock: function() {
					locked = queue = [];
					if ( !memory && !firing ) {
						list = memory = "";
					}
					return this;
				},
				locked: function() {
					return !!locked;
				},

				// Call all callbacks with the given context and arguments
				fireWith: function( context, args ) {
					if ( !locked ) {
						args = args || [];
						args = [ context, args.slice ? args.slice() : args ];
						queue.push( args );
						if ( !firing ) {
							fire();
						}
					}
					return this;
				},

				// Call all the callbacks with the given arguments
				fire: function() {
					self.fireWith( this, arguments );
					return this;
				},

				// To know if the callbacks have already been called at least once
				fired: function() {
					return !!fired;
				}
			};

		return self;
	};


	function Identity( v ) {
		return v;
	}
	function Thrower( ex ) {
		throw ex;
	}

	function adoptValue( value, resolve, reject, noValue ) {
		var method;

		try {

			// Check for promise aspect first to privilege synchronous behavior
			if ( value && isFunction( ( method = value.promise ) ) ) {
				method.call( value ).done( resolve ).fail( reject );

			// Other thenables
			} else if ( value && isFunction( ( method = value.then ) ) ) {
				method.call( value, resolve, reject );

			// Other non-thenables
			} else {

				// Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:
				// * false: [ value ].slice( 0 ) => resolve( value )
				// * true: [ value ].slice( 1 ) => resolve()
				resolve.apply( undefined, [ value ].slice( noValue ) );
			}

		// For Promises/A+, convert exceptions into rejections
		// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
		// Deferred#then to conditionally suppress rejection.
		} catch ( value ) {

			// Support: Android 4.0 only
			// Strict mode functions invoked without .call/.apply get global-object context
			reject.apply( undefined, [ value ] );
		}
	}

	jQuery.extend( {

		Deferred: function( func ) {
			var tuples = [

					// action, add listener, callbacks,
					// ... .then handlers, argument index, [final state]
					[ "notify", "progress", jQuery.Callbacks( "memory" ),
						jQuery.Callbacks( "memory" ), 2 ],
					[ "resolve", "done", jQuery.Callbacks( "once memory" ),
						jQuery.Callbacks( "once memory" ), 0, "resolved" ],
					[ "reject", "fail", jQuery.Callbacks( "once memory" ),
						jQuery.Callbacks( "once memory" ), 1, "rejected" ]
				],
				state = "pending",
				promise = {
					state: function() {
						return state;
					},
					always: function() {
						deferred.done( arguments ).fail( arguments );
						return this;
					},
					"catch": function( fn ) {
						return promise.then( null, fn );
					},

					// Keep pipe for back-compat
					pipe: function( /* fnDone, fnFail, fnProgress */ ) {
						var fns = arguments;

						return jQuery.Deferred( function( newDefer ) {
							jQuery.each( tuples, function( i, tuple ) {

								// Map tuples (progress, done, fail) to arguments (done, fail, progress)
								var fn = isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];

								// deferred.progress(function() { bind to newDefer or newDefer.notify })
								// deferred.done(function() { bind to newDefer or newDefer.resolve })
								// deferred.fail(function() { bind to newDefer or newDefer.reject })
								deferred[ tuple[ 1 ] ]( function() {
									var returned = fn && fn.apply( this, arguments );
									if ( returned && isFunction( returned.promise ) ) {
										returned.promise()
											.progress( newDefer.notify )
											.done( newDefer.resolve )
											.fail( newDefer.reject );
									} else {
										newDefer[ tuple[ 0 ] + "With" ](
											this,
											fn ? [ returned ] : arguments
										);
									}
								} );
							} );
							fns = null;
						} ).promise();
					},
					then: function( onFulfilled, onRejected, onProgress ) {
						var maxDepth = 0;
						function resolve( depth, deferred, handler, special ) {
							return function() {
								var that = this,
									args = arguments,
									mightThrow = function() {
										var returned, then;

										// Support: Promises/A+ section 2.3.3.3.3
										// https://promisesaplus.com/#point-59
										// Ignore double-resolution attempts
										if ( depth < maxDepth ) {
											return;
										}

										returned = handler.apply( that, args );

										// Support: Promises/A+ section 2.3.1
										// https://promisesaplus.com/#point-48
										if ( returned === deferred.promise() ) {
											throw new TypeError( "Thenable self-resolution" );
										}

										// Support: Promises/A+ sections 2.3.3.1, 3.5
										// https://promisesaplus.com/#point-54
										// https://promisesaplus.com/#point-75
										// Retrieve `then` only once
										then = returned &&

											// Support: Promises/A+ section 2.3.4
											// https://promisesaplus.com/#point-64
											// Only check objects and functions for thenability
											( typeof returned === "object" ||
												typeof returned === "function" ) &&
											returned.then;

										// Handle a returned thenable
										if ( isFunction( then ) ) {

											// Special processors (notify) just wait for resolution
											if ( special ) {
												then.call(
													returned,
													resolve( maxDepth, deferred, Identity, special ),
													resolve( maxDepth, deferred, Thrower, special )
												);

											// Normal processors (resolve) also hook into progress
											} else {

												// ...and disregard older resolution values
												maxDepth++;

												then.call(
													returned,
													resolve( maxDepth, deferred, Identity, special ),
													resolve( maxDepth, deferred, Thrower, special ),
													resolve( maxDepth, deferred, Identity,
														deferred.notifyWith )
												);
											}

										// Handle all other returned values
										} else {

											// Only substitute handlers pass on context
											// and multiple values (non-spec behavior)
											if ( handler !== Identity ) {
												that = undefined;
												args = [ returned ];
											}

											// Process the value(s)
											// Default process is resolve
											( special || deferred.resolveWith )( that, args );
										}
									},

									// Only normal processors (resolve) catch and reject exceptions
									process = special ?
										mightThrow :
										function() {
											try {
												mightThrow();
											} catch ( e ) {

												if ( jQuery.Deferred.exceptionHook ) {
													jQuery.Deferred.exceptionHook( e,
														process.stackTrace );
												}

												// Support: Promises/A+ section 2.3.3.3.4.1
												// https://promisesaplus.com/#point-61
												// Ignore post-resolution exceptions
												if ( depth + 1 >= maxDepth ) {

													// Only substitute handlers pass on context
													// and multiple values (non-spec behavior)
													if ( handler !== Thrower ) {
														that = undefined;
														args = [ e ];
													}

													deferred.rejectWith( that, args );
												}
											}
										};

								// Support: Promises/A+ section 2.3.3.3.1
								// https://promisesaplus.com/#point-57
								// Re-resolve promises immediately to dodge false rejection from
								// subsequent errors
								if ( depth ) {
									process();
								} else {

									// Call an optional hook to record the stack, in case of exception
									// since it's otherwise lost when execution goes async
									if ( jQuery.Deferred.getStackHook ) {
										process.stackTrace = jQuery.Deferred.getStackHook();
									}
									window.setTimeout( process );
								}
							};
						}

						return jQuery.Deferred( function( newDefer ) {

							// progress_handlers.add( ... )
							tuples[ 0 ][ 3 ].add(
								resolve(
									0,
									newDefer,
									isFunction( onProgress ) ?
										onProgress :
										Identity,
									newDefer.notifyWith
								)
							);

							// fulfilled_handlers.add( ... )
							tuples[ 1 ][ 3 ].add(
								resolve(
									0,
									newDefer,
									isFunction( onFulfilled ) ?
										onFulfilled :
										Identity
								)
							);

							// rejected_handlers.add( ... )
							tuples[ 2 ][ 3 ].add(
								resolve(
									0,
									newDefer,
									isFunction( onRejected ) ?
										onRejected :
										Thrower
								)
							);
						} ).promise();
					},

					// Get a promise for this deferred
					// If obj is provided, the promise aspect is added to the object
					promise: function( obj ) {
						return obj != null ? jQuery.extend( obj, promise ) : promise;
					}
				},
				deferred = {};

			// Add list-specific methods
			jQuery.each( tuples, function( i, tuple ) {
				var list = tuple[ 2 ],
					stateString = tuple[ 5 ];

				// promise.progress = list.add
				// promise.done = list.add
				// promise.fail = list.add
				promise[ tuple[ 1 ] ] = list.add;

				// Handle state
				if ( stateString ) {
					list.add(
						function() {

							// state = "resolved" (i.e., fulfilled)
							// state = "rejected"
							state = stateString;
						},

						// rejected_callbacks.disable
						// fulfilled_callbacks.disable
						tuples[ 3 - i ][ 2 ].disable,

						// rejected_handlers.disable
						// fulfilled_handlers.disable
						tuples[ 3 - i ][ 3 ].disable,

						// progress_callbacks.lock
						tuples[ 0 ][ 2 ].lock,

						// progress_handlers.lock
						tuples[ 0 ][ 3 ].lock
					);
				}

				// progress_handlers.fire
				// fulfilled_handlers.fire
				// rejected_handlers.fire
				list.add( tuple[ 3 ].fire );

				// deferred.notify = function() { deferred.notifyWith(...) }
				// deferred.resolve = function() { deferred.resolveWith(...) }
				// deferred.reject = function() { deferred.rejectWith(...) }
				deferred[ tuple[ 0 ] ] = function() {
					deferred[ tuple[ 0 ] + "With" ]( this === deferred ? undefined : this, arguments );
					return this;
				};

				// deferred.notifyWith = list.fireWith
				// deferred.resolveWith = list.fireWith
				// deferred.rejectWith = list.fireWith
				deferred[ tuple[ 0 ] + "With" ] = list.fireWith;
			} );

			// Make the deferred a promise
			promise.promise( deferred );

			// Call given func if any
			if ( func ) {
				func.call( deferred, deferred );
			}

			// All done!
			return deferred;
		},

		// Deferred helper
		when: function( singleValue ) {
			var

				// count of uncompleted subordinates
				remaining = arguments.length,

				// count of unprocessed arguments
				i = remaining,

				// subordinate fulfillment data
				resolveContexts = Array( i ),
				resolveValues = slice.call( arguments ),

				// the master Deferred
				master = jQuery.Deferred(),

				// subordinate callback factory
				updateFunc = function( i ) {
					return function( value ) {
						resolveContexts[ i ] = this;
						resolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
						if ( !( --remaining ) ) {
							master.resolveWith( resolveContexts, resolveValues );
						}
					};
				};

			// Single- and empty arguments are adopted like Promise.resolve
			if ( remaining <= 1 ) {
				adoptValue( singleValue, master.done( updateFunc( i ) ).resolve, master.reject,
					!remaining );

				// Use .then() to unwrap secondary thenables (cf. gh-3000)
				if ( master.state() === "pending" ||
					isFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {

					return master.then();
				}
			}

			// Multiple arguments are aggregated like Promise.all array elements
			while ( i-- ) {
				adoptValue( resolveValues[ i ], updateFunc( i ), master.reject );
			}

			return master.promise();
		}
	} );


	// These usually indicate a programmer mistake during development,
	// warn about them ASAP rather than swallowing them by default.
	var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;

	jQuery.Deferred.exceptionHook = function( error, stack ) {

		// Support: IE 8 - 9 only
		// Console exists when dev tools are open, which can happen at any time
		if ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {
			window.console.warn( "jQuery.Deferred exception: " + error.message, error.stack, stack );
		}
	};




	jQuery.readyException = function( error ) {
		window.setTimeout( function() {
			throw error;
		} );
	};




	// The deferred used on DOM ready
	var readyList = jQuery.Deferred();

	jQuery.fn.ready = function( fn ) {

		readyList
			.then( fn )

			// Wrap jQuery.readyException in a function so that the lookup
			// happens at the time of error handling instead of callback
			// registration.
			.catch( function( error ) {
				jQuery.readyException( error );
			} );

		return this;
	};

	jQuery.extend( {

		// Is the DOM ready to be used? Set to true once it occurs.
		isReady: false,

		// A counter to track how many items to wait for before
		// the ready event fires. See #6781
		readyWait: 1,

		// Handle when the DOM is ready
		ready: function( wait ) {

			// Abort if there are pending holds or we're already ready
			if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
				return;
			}

			// Remember that the DOM is ready
			jQuery.isReady = true;

			// If a normal DOM Ready event fired, decrement, and wait if need be
			if ( wait !== true && --jQuery.readyWait > 0 ) {
				return;
			}

			// If there are functions bound, to execute
			readyList.resolveWith( document, [ jQuery ] );
		}
	} );

	jQuery.ready.then = readyList.then;

	// The ready event handler and self cleanup method
	function completed() {
		document.removeEventListener( "DOMContentLoaded", completed );
		window.removeEventListener( "load", completed );
		jQuery.ready();
	}

	// Catch cases where $(document).ready() is called
	// after the browser event has already occurred.
	// Support: IE <=9 - 10 only
	// Older IE sometimes signals "interactive" too soon
	if ( document.readyState === "complete" ||
		( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {

		// Handle it asynchronously to allow scripts the opportunity to delay ready
		window.setTimeout( jQuery.ready );

	} else {

		// Use the handy event callback
		document.addEventListener( "DOMContentLoaded", completed );

		// A fallback to window.onload, that will always work
		window.addEventListener( "load", completed );
	}




	// Multifunctional method to get and set values of a collection
	// The value/s can optionally be executed if it's a function
	var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
		var i = 0,
			len = elems.length,
			bulk = key == null;

		// Sets many values
		if ( toType( key ) === "object" ) {
			chainable = true;
			for ( i in key ) {
				access( elems, fn, i, key[ i ], true, emptyGet, raw );
			}

		// Sets one value
		} else if ( value !== undefined ) {
			chainable = true;

			if ( !isFunction( value ) ) {
				raw = true;
			}

			if ( bulk ) {

				// Bulk operations run against the entire set
				if ( raw ) {
					fn.call( elems, value );
					fn = null;

				// ...except when executing function values
				} else {
					bulk = fn;
					fn = function( elem, key, value ) {
						return bulk.call( jQuery( elem ), value );
					};
				}
			}

			if ( fn ) {
				for ( ; i < len; i++ ) {
					fn(
						elems[ i ], key, raw ?
						value :
						value.call( elems[ i ], i, fn( elems[ i ], key ) )
					);
				}
			}
		}

		if ( chainable ) {
			return elems;
		}

		// Gets
		if ( bulk ) {
			return fn.call( elems );
		}

		return len ? fn( elems[ 0 ], key ) : emptyGet;
	};


	// Matches dashed string for camelizing
	var rmsPrefix = /^-ms-/,
		rdashAlpha = /-([a-z])/g;

	// Used by camelCase as callback to replace()
	function fcamelCase( all, letter ) {
		return letter.toUpperCase();
	}

	// Convert dashed to camelCase; used by the css and data modules
	// Support: IE <=9 - 11, Edge 12 - 15
	// Microsoft forgot to hump their vendor prefix (#9572)
	function camelCase( string ) {
		return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
	}
	var acceptData = function( owner ) {

		// Accepts only:
		//  - Node
		//    - Node.ELEMENT_NODE
		//    - Node.DOCUMENT_NODE
		//  - Object
		//    - Any
		return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
	};




	function Data() {
		this.expando = jQuery.expando + Data.uid++;
	}

	Data.uid = 1;

	Data.prototype = {

		cache: function( owner ) {

			// Check if the owner object already has a cache
			var value = owner[ this.expando ];

			// If not, create one
			if ( !value ) {
				value = {};

				// We can accept data for non-element nodes in modern browsers,
				// but we should not, see #8335.
				// Always return an empty object.
				if ( acceptData( owner ) ) {

					// If it is a node unlikely to be stringify-ed or looped over
					// use plain assignment
					if ( owner.nodeType ) {
						owner[ this.expando ] = value;

					// Otherwise secure it in a non-enumerable property
					// configurable must be true to allow the property to be
					// deleted when data is removed
					} else {
						Object.defineProperty( owner, this.expando, {
							value: value,
							configurable: true
						} );
					}
				}
			}

			return value;
		},
		set: function( owner, data, value ) {
			var prop,
				cache = this.cache( owner );

			// Handle: [ owner, key, value ] args
			// Always use camelCase key (gh-2257)
			if ( typeof data === "string" ) {
				cache[ camelCase( data ) ] = value;

			// Handle: [ owner, { properties } ] args
			} else {

				// Copy the properties one-by-one to the cache object
				for ( prop in data ) {
					cache[ camelCase( prop ) ] = data[ prop ];
				}
			}
			return cache;
		},
		get: function( owner, key ) {
			return key === undefined ?
				this.cache( owner ) :

				// Always use camelCase key (gh-2257)
				owner[ this.expando ] && owner[ this.expando ][ camelCase( key ) ];
		},
		access: function( owner, key, value ) {

			// In cases where either:
			//
			//   1. No key was specified
			//   2. A string key was specified, but no value provided
			//
			// Take the "read" path and allow the get method to determine
			// which value to return, respectively either:
			//
			//   1. The entire cache object
			//   2. The data stored at the key
			//
			if ( key === undefined ||
					( ( key && typeof key === "string" ) && value === undefined ) ) {

				return this.get( owner, key );
			}

			// When the key is not a string, or both a key and value
			// are specified, set or extend (existing objects) with either:
			//
			//   1. An object of properties
			//   2. A key and value
			//
			this.set( owner, key, value );

			// Since the "set" path can have two possible entry points
			// return the expected data based on which path was taken[*]
			return value !== undefined ? value : key;
		},
		remove: function( owner, key ) {
			var i,
				cache = owner[ this.expando ];

			if ( cache === undefined ) {
				return;
			}

			if ( key !== undefined ) {

				// Support array or space separated string of keys
				if ( Array.isArray( key ) ) {

					// If key is an array of keys...
					// We always set camelCase keys, so remove that.
					key = key.map( camelCase );
				} else {
					key = camelCase( key );

					// If a key with the spaces exists, use it.
					// Otherwise, create an array by matching non-whitespace
					key = key in cache ?
						[ key ] :
						( key.match( rnothtmlwhite ) || [] );
				}

				i = key.length;

				while ( i-- ) {
					delete cache[ key[ i ] ];
				}
			}

			// Remove the expando if there's no more data
			if ( key === undefined || jQuery.isEmptyObject( cache ) ) {

				// Support: Chrome <=35 - 45
				// Webkit & Blink performance suffers when deleting properties
				// from DOM nodes, so set to undefined instead
				// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
				if ( owner.nodeType ) {
					owner[ this.expando ] = undefined;
				} else {
					delete owner[ this.expando ];
				}
			}
		},
		hasData: function( owner ) {
			var cache = owner[ this.expando ];
			return cache !== undefined && !jQuery.isEmptyObject( cache );
		}
	};
	var dataPriv = new Data();

	var dataUser = new Data();



	//	Implementation Summary
	//
	//	1. Enforce API surface and semantic compatibility with 1.9.x branch
	//	2. Improve the module's maintainability by reducing the storage
	//		paths to a single mechanism.
	//	3. Use the same single mechanism to support "private" and "user" data.
	//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
	//	5. Avoid exposing implementation details on user objects (eg. expando properties)
	//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

	var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
		rmultiDash = /[A-Z]/g;

	function getData( data ) {
		if ( data === "true" ) {
			return true;
		}

		if ( data === "false" ) {
			return false;
		}

		if ( data === "null" ) {
			return null;
		}

		// Only convert to a number if it doesn't change the string
		if ( data === +data + "" ) {
			return +data;
		}

		if ( rbrace.test( data ) ) {
			return JSON.parse( data );
		}

		return data;
	}

	function dataAttr( elem, key, data ) {
		var name;

		// If nothing was found internally, try to fetch any
		// data from the HTML5 data-* attribute
		if ( data === undefined && elem.nodeType === 1 ) {
			name = "data-" + key.replace( rmultiDash, "-$&" ).toLowerCase();
			data = elem.getAttribute( name );

			if ( typeof data === "string" ) {
				try {
					data = getData( data );
				} catch ( e ) {}

				// Make sure we set the data so it isn't changed later
				dataUser.set( elem, key, data );
			} else {
				data = undefined;
			}
		}
		return data;
	}

	jQuery.extend( {
		hasData: function( elem ) {
			return dataUser.hasData( elem ) || dataPriv.hasData( elem );
		},

		data: function( elem, name, data ) {
			return dataUser.access( elem, name, data );
		},

		removeData: function( elem, name ) {
			dataUser.remove( elem, name );
		},

		// TODO: Now that all calls to _data and _removeData have been replaced
		// with direct calls to dataPriv methods, these can be deprecated.
		_data: function( elem, name, data ) {
			return dataPriv.access( elem, name, data );
		},

		_removeData: function( elem, name ) {
			dataPriv.remove( elem, name );
		}
	} );

	jQuery.fn.extend( {
		data: function( key, value ) {
			var i, name, data,
				elem = this[ 0 ],
				attrs = elem && elem.attributes;

			// Gets all values
			if ( key === undefined ) {
				if ( this.length ) {
					data = dataUser.get( elem );

					if ( elem.nodeType === 1 && !dataPriv.get( elem, "hasDataAttrs" ) ) {
						i = attrs.length;
						while ( i-- ) {

							// Support: IE 11 only
							// The attrs elements can be null (#14894)
							if ( attrs[ i ] ) {
								name = attrs[ i ].name;
								if ( name.indexOf( "data-" ) === 0 ) {
									name = camelCase( name.slice( 5 ) );
									dataAttr( elem, name, data[ name ] );
								}
							}
						}
						dataPriv.set( elem, "hasDataAttrs", true );
					}
				}

				return data;
			}

			// Sets multiple values
			if ( typeof key === "object" ) {
				return this.each( function() {
					dataUser.set( this, key );
				} );
			}

			return access( this, function( value ) {
				var data;

				// The calling jQuery object (element matches) is not empty
				// (and therefore has an element appears at this[ 0 ]) and the
				// `value` parameter was not undefined. An empty jQuery object
				// will result in `undefined` for elem = this[ 0 ] which will
				// throw an exception if an attempt to read a data cache is made.
				if ( elem && value === undefined ) {

					// Attempt to get data from the cache
					// The key will always be camelCased in Data
					data = dataUser.get( elem, key );
					if ( data !== undefined ) {
						return data;
					}

					// Attempt to "discover" the data in
					// HTML5 custom data-* attrs
					data = dataAttr( elem, key );
					if ( data !== undefined ) {
						return data;
					}

					// We tried really hard, but the data doesn't exist.
					return;
				}

				// Set the data...
				this.each( function() {

					// We always store the camelCased key
					dataUser.set( this, key, value );
				} );
			}, null, value, arguments.length > 1, null, true );
		},

		removeData: function( key ) {
			return this.each( function() {
				dataUser.remove( this, key );
			} );
		}
	} );


	jQuery.extend( {
		queue: function( elem, type, data ) {
			var queue;

			if ( elem ) {
				type = ( type || "fx" ) + "queue";
				queue = dataPriv.get( elem, type );

				// Speed up dequeue by getting out quickly if this is just a lookup
				if ( data ) {
					if ( !queue || Array.isArray( data ) ) {
						queue = dataPriv.access( elem, type, jQuery.makeArray( data ) );
					} else {
						queue.push( data );
					}
				}
				return queue || [];
			}
		},

		dequeue: function( elem, type ) {
			type = type || "fx";

			var queue = jQuery.queue( elem, type ),
				startLength = queue.length,
				fn = queue.shift(),
				hooks = jQuery._queueHooks( elem, type ),
				next = function() {
					jQuery.dequeue( elem, type );
				};

			// If the fx queue is dequeued, always remove the progress sentinel
			if ( fn === "inprogress" ) {
				fn = queue.shift();
				startLength--;
			}

			if ( fn ) {

				// Add a progress sentinel to prevent the fx queue from being
				// automatically dequeued
				if ( type === "fx" ) {
					queue.unshift( "inprogress" );
				}

				// Clear up the last queue stop function
				delete hooks.stop;
				fn.call( elem, next, hooks );
			}

			if ( !startLength && hooks ) {
				hooks.empty.fire();
			}
		},

		// Not public - generate a queueHooks object, or return the current one
		_queueHooks: function( elem, type ) {
			var key = type + "queueHooks";
			return dataPriv.get( elem, key ) || dataPriv.access( elem, key, {
				empty: jQuery.Callbacks( "once memory" ).add( function() {
					dataPriv.remove( elem, [ type + "queue", key ] );
				} )
			} );
		}
	} );

	jQuery.fn.extend( {
		queue: function( type, data ) {
			var setter = 2;

			if ( typeof type !== "string" ) {
				data = type;
				type = "fx";
				setter--;
			}

			if ( arguments.length < setter ) {
				return jQuery.queue( this[ 0 ], type );
			}

			return data === undefined ?
				this :
				this.each( function() {
					var queue = jQuery.queue( this, type, data );

					// Ensure a hooks for this queue
					jQuery._queueHooks( this, type );

					if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {
						jQuery.dequeue( this, type );
					}
				} );
		},
		dequeue: function( type ) {
			return this.each( function() {
				jQuery.dequeue( this, type );
			} );
		},
		clearQueue: function( type ) {
			return this.queue( type || "fx", [] );
		},

		// Get a promise resolved when queues of a certain type
		// are emptied (fx is the type by default)
		promise: function( type, obj ) {
			var tmp,
				count = 1,
				defer = jQuery.Deferred(),
				elements = this,
				i = this.length,
				resolve = function() {
					if ( !( --count ) ) {
						defer.resolveWith( elements, [ elements ] );
					}
				};

			if ( typeof type !== "string" ) {
				obj = type;
				type = undefined;
			}
			type = type || "fx";

			while ( i-- ) {
				tmp = dataPriv.get( elements[ i ], type + "queueHooks" );
				if ( tmp && tmp.empty ) {
					count++;
					tmp.empty.add( resolve );
				}
			}
			resolve();
			return defer.promise( obj );
		}
	} );
	var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;

	var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );


	var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

	var documentElement = document.documentElement;



		var isAttached = function( elem ) {
				return jQuery.contains( elem.ownerDocument, elem );
			},
			composed = { composed: true };

		// Support: IE 9 - 11+, Edge 12 - 18+, iOS 10.0 - 10.2 only
		// Check attachment across shadow DOM boundaries when possible (gh-3504)
		// Support: iOS 10.0-10.2 only
		// Early iOS 10 versions support `attachShadow` but not `getRootNode`,
		// leading to errors. We need to check for `getRootNode`.
		if ( documentElement.getRootNode ) {
			isAttached = function( elem ) {
				return jQuery.contains( elem.ownerDocument, elem ) ||
					elem.getRootNode( composed ) === elem.ownerDocument;
			};
		}
	var isHiddenWithinTree = function( elem, el ) {

			// isHiddenWithinTree might be called from jQuery#filter function;
			// in that case, element will be second argument
			elem = el || elem;

			// Inline style trumps all
			return elem.style.display === "none" ||
				elem.style.display === "" &&

				// Otherwise, check computed style
				// Support: Firefox <=43 - 45
				// Disconnected elements can have computed display: none, so first confirm that elem is
				// in the document.
				isAttached( elem ) &&

				jQuery.css( elem, "display" ) === "none";
		};

	var swap = function( elem, options, callback, args ) {
		var ret, name,
			old = {};

		// Remember the old values, and insert the new ones
		for ( name in options ) {
			old[ name ] = elem.style[ name ];
			elem.style[ name ] = options[ name ];
		}

		ret = callback.apply( elem, args || [] );

		// Revert the old values
		for ( name in options ) {
			elem.style[ name ] = old[ name ];
		}

		return ret;
	};




	function adjustCSS( elem, prop, valueParts, tween ) {
		var adjusted, scale,
			maxIterations = 20,
			currentValue = tween ?
				function() {
					return tween.cur();
				} :
				function() {
					return jQuery.css( elem, prop, "" );
				},
			initial = currentValue(),
			unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

			// Starting value computation is required for potential unit mismatches
			initialInUnit = elem.nodeType &&
				( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
				rcssNum.exec( jQuery.css( elem, prop ) );

		if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {

			// Support: Firefox <=54
			// Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)
			initial = initial / 2;

			// Trust units reported by jQuery.css
			unit = unit || initialInUnit[ 3 ];

			// Iteratively approximate from a nonzero starting point
			initialInUnit = +initial || 1;

			while ( maxIterations-- ) {

				// Evaluate and update our best guess (doubling guesses that zero out).
				// Finish if the scale equals or crosses 1 (making the old*new product non-positive).
				jQuery.style( elem, prop, initialInUnit + unit );
				if ( ( 1 - scale ) * ( 1 - ( scale = currentValue() / initial || 0.5 ) ) <= 0 ) {
					maxIterations = 0;
				}
				initialInUnit = initialInUnit / scale;

			}

			initialInUnit = initialInUnit * 2;
			jQuery.style( elem, prop, initialInUnit + unit );

			// Make sure we update the tween properties later on
			valueParts = valueParts || [];
		}

		if ( valueParts ) {
			initialInUnit = +initialInUnit || +initial || 0;

			// Apply relative offset (+=/-=) if specified
			adjusted = valueParts[ 1 ] ?
				initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :
				+valueParts[ 2 ];
			if ( tween ) {
				tween.unit = unit;
				tween.start = initialInUnit;
				tween.end = adjusted;
			}
		}
		return adjusted;
	}


	var defaultDisplayMap = {};

	function getDefaultDisplay( elem ) {
		var temp,
			doc = elem.ownerDocument,
			nodeName = elem.nodeName,
			display = defaultDisplayMap[ nodeName ];

		if ( display ) {
			return display;
		}

		temp = doc.body.appendChild( doc.createElement( nodeName ) );
		display = jQuery.css( temp, "display" );

		temp.parentNode.removeChild( temp );

		if ( display === "none" ) {
			display = "block";
		}
		defaultDisplayMap[ nodeName ] = display;

		return display;
	}

	function showHide( elements, show ) {
		var display, elem,
			values = [],
			index = 0,
			length = elements.length;

		// Determine new display value for elements that need to change
		for ( ; index < length; index++ ) {
			elem = elements[ index ];
			if ( !elem.style ) {
				continue;
			}

			display = elem.style.display;
			if ( show ) {

				// Since we force visibility upon cascade-hidden elements, an immediate (and slow)
				// check is required in this first loop unless we have a nonempty display value (either
				// inline or about-to-be-restored)
				if ( display === "none" ) {
					values[ index ] = dataPriv.get( elem, "display" ) || null;
					if ( !values[ index ] ) {
						elem.style.display = "";
					}
				}
				if ( elem.style.display === "" && isHiddenWithinTree( elem ) ) {
					values[ index ] = getDefaultDisplay( elem );
				}
			} else {
				if ( display !== "none" ) {
					values[ index ] = "none";

					// Remember what we're overwriting
					dataPriv.set( elem, "display", display );
				}
			}
		}

		// Set the display of the elements in a second loop to avoid constant reflow
		for ( index = 0; index < length; index++ ) {
			if ( values[ index ] != null ) {
				elements[ index ].style.display = values[ index ];
			}
		}

		return elements;
	}

	jQuery.fn.extend( {
		show: function() {
			return showHide( this, true );
		},
		hide: function() {
			return showHide( this );
		},
		toggle: function( state ) {
			if ( typeof state === "boolean" ) {
				return state ? this.show() : this.hide();
			}

			return this.each( function() {
				if ( isHiddenWithinTree( this ) ) {
					jQuery( this ).show();
				} else {
					jQuery( this ).hide();
				}
			} );
		}
	} );
	var rcheckableType = ( /^(?:checkbox|radio)$/i );

	var rtagName = ( /<([a-z][^\/\0>\x20\t\r\n\f]*)/i );

	var rscriptType = ( /^$|^module$|\/(?:java|ecma)script/i );



	// We have to close these tags to support XHTML (#13200)
	var wrapMap = {

		// Support: IE <=9 only
		option: [ 1, "<select multiple='multiple'>", "</select>" ],

		// XHTML parsers do not magically insert elements in the
		// same way that tag soup parsers do. So we cannot shorten
		// this by omitting <tbody> or other required elements.
		thead: [ 1, "<table>", "</table>" ],
		col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
		tr: [ 2, "<table><tbody>", "</tbody></table>" ],
		td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

		_default: [ 0, "", "" ]
	};

	// Support: IE <=9 only
	wrapMap.optgroup = wrapMap.option;

	wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
	wrapMap.th = wrapMap.td;


	function getAll( context, tag ) {

		// Support: IE <=9 - 11 only
		// Use typeof to avoid zero-argument method invocation on host objects (#15151)
		var ret;

		if ( typeof context.getElementsByTagName !== "undefined" ) {
			ret = context.getElementsByTagName( tag || "*" );

		} else if ( typeof context.querySelectorAll !== "undefined" ) {
			ret = context.querySelectorAll( tag || "*" );

		} else {
			ret = [];
		}

		if ( tag === undefined || tag && nodeName( context, tag ) ) {
			return jQuery.merge( [ context ], ret );
		}

		return ret;
	}


	// Mark scripts as having already been evaluated
	function setGlobalEval( elems, refElements ) {
		var i = 0,
			l = elems.length;

		for ( ; i < l; i++ ) {
			dataPriv.set(
				elems[ i ],
				"globalEval",
				!refElements || dataPriv.get( refElements[ i ], "globalEval" )
			);
		}
	}


	var rhtml = /<|&#?\w+;/;

	function buildFragment( elems, context, scripts, selection, ignored ) {
		var elem, tmp, tag, wrap, attached, j,
			fragment = context.createDocumentFragment(),
			nodes = [],
			i = 0,
			l = elems.length;

		for ( ; i < l; i++ ) {
			elem = elems[ i ];

			if ( elem || elem === 0 ) {

				// Add nodes directly
				if ( toType( elem ) === "object" ) {

					// Support: Android <=4.0 only, PhantomJS 1 only
					// push.apply(_, arraylike) throws on ancient WebKit
					jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

				// Convert non-html into a text node
				} else if ( !rhtml.test( elem ) ) {
					nodes.push( context.createTextNode( elem ) );

				// Convert html into DOM nodes
				} else {
					tmp = tmp || fragment.appendChild( context.createElement( "div" ) );

					// Deserialize a standard representation
					tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
					wrap = wrapMap[ tag ] || wrapMap._default;
					tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];

					// Descend through wrappers to the right content
					j = wrap[ 0 ];
					while ( j-- ) {
						tmp = tmp.lastChild;
					}

					// Support: Android <=4.0 only, PhantomJS 1 only
					// push.apply(_, arraylike) throws on ancient WebKit
					jQuery.merge( nodes, tmp.childNodes );

					// Remember the top-level container
					tmp = fragment.firstChild;

					// Ensure the created nodes are orphaned (#12392)
					tmp.textContent = "";
				}
			}
		}

		// Remove wrapper from fragment
		fragment.textContent = "";

		i = 0;
		while ( ( elem = nodes[ i++ ] ) ) {

			// Skip elements already in the context collection (trac-4087)
			if ( selection && jQuery.inArray( elem, selection ) > -1 ) {
				if ( ignored ) {
					ignored.push( elem );
				}
				continue;
			}

			attached = isAttached( elem );

			// Append to fragment
			tmp = getAll( fragment.appendChild( elem ), "script" );

			// Preserve script evaluation history
			if ( attached ) {
				setGlobalEval( tmp );
			}

			// Capture executables
			if ( scripts ) {
				j = 0;
				while ( ( elem = tmp[ j++ ] ) ) {
					if ( rscriptType.test( elem.type || "" ) ) {
						scripts.push( elem );
					}
				}
			}
		}

		return fragment;
	}


	( function() {
		var fragment = document.createDocumentFragment(),
			div = fragment.appendChild( document.createElement( "div" ) ),
			input = document.createElement( "input" );

		// Support: Android 4.0 - 4.3 only
		// Check state lost if the name is set (#11217)
		// Support: Windows Web Apps (WWA)
		// `name` and `type` must use .setAttribute for WWA (#14901)
		input.setAttribute( "type", "radio" );
		input.setAttribute( "checked", "checked" );
		input.setAttribute( "name", "t" );

		div.appendChild( input );

		// Support: Android <=4.1 only
		// Older WebKit doesn't clone checked state correctly in fragments
		support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

		// Support: IE <=11 only
		// Make sure textarea (and checkbox) defaultValue is properly cloned
		div.innerHTML = "<textarea>x</textarea>";
		support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;
	} )();


	var
		rkeyEvent = /^key/,
		rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
		rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

	function returnTrue() {
		return true;
	}

	function returnFalse() {
		return false;
	}

	// Support: IE <=9 - 11+
	// focus() and blur() are asynchronous, except when they are no-op.
	// So expect focus to be synchronous when the element is already active,
	// and blur to be synchronous when the element is not already active.
	// (focus and blur are always synchronous in other supported browsers,
	// this just defines when we can count on it).
	function expectSync( elem, type ) {
		return ( elem === safeActiveElement() ) === ( type === "focus" );
	}

	// Support: IE <=9 only
	// Accessing document.activeElement can throw unexpectedly
	// https://bugs.jquery.com/ticket/13393
	function safeActiveElement() {
		try {
			return document.activeElement;
		} catch ( err ) { }
	}

	function on( elem, types, selector, data, fn, one ) {
		var origFn, type;

		// Types can be a map of types/handlers
		if ( typeof types === "object" ) {

			// ( types-Object, selector, data )
			if ( typeof selector !== "string" ) {

				// ( types-Object, data )
				data = data || selector;
				selector = undefined;
			}
			for ( type in types ) {
				on( elem, type, selector, data, types[ type ], one );
			}
			return elem;
		}

		if ( data == null && fn == null ) {

			// ( types, fn )
			fn = selector;
			data = selector = undefined;
		} else if ( fn == null ) {
			if ( typeof selector === "string" ) {

				// ( types, selector, fn )
				fn = data;
				data = undefined;
			} else {

				// ( types, data, fn )
				fn = data;
				data = selector;
				selector = undefined;
			}
		}
		if ( fn === false ) {
			fn = returnFalse;
		} else if ( !fn ) {
			return elem;
		}

		if ( one === 1 ) {
			origFn = fn;
			fn = function( event ) {

				// Can use an empty set, since event contains the info
				jQuery().off( event );
				return origFn.apply( this, arguments );
			};

			// Use same guid so caller can remove using origFn
			fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
		}
		return elem.each( function() {
			jQuery.event.add( this, types, fn, data, selector );
		} );
	}

	/*
	 * Helper functions for managing events -- not part of the public interface.
	 * Props to Dean Edwards' addEvent library for many of the ideas.
	 */
	jQuery.event = {

		global: {},

		add: function( elem, types, handler, data, selector ) {

			var handleObjIn, eventHandle, tmp,
				events, t, handleObj,
				special, handlers, type, namespaces, origType,
				elemData = dataPriv.get( elem );

			// Don't attach events to noData or text/comment nodes (but allow plain objects)
			if ( !elemData ) {
				return;
			}

			// Caller can pass in an object of custom data in lieu of the handler
			if ( handler.handler ) {
				handleObjIn = handler;
				handler = handleObjIn.handler;
				selector = handleObjIn.selector;
			}

			// Ensure that invalid selectors throw exceptions at attach time
			// Evaluate against documentElement in case elem is a non-element node (e.g., document)
			if ( selector ) {
				jQuery.find.matchesSelector( documentElement, selector );
			}

			// Make sure that the handler has a unique ID, used to find/remove it later
			if ( !handler.guid ) {
				handler.guid = jQuery.guid++;
			}

			// Init the element's event structure and main handler, if this is the first
			if ( !( events = elemData.events ) ) {
				events = elemData.events = {};
			}
			if ( !( eventHandle = elemData.handle ) ) {
				eventHandle = elemData.handle = function( e ) {

					// Discard the second event of a jQuery.event.trigger() and
					// when an event is called after a page has unloaded
					return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?
						jQuery.event.dispatch.apply( elem, arguments ) : undefined;
				};
			}

			// Handle multiple events separated by a space
			types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
			t = types.length;
			while ( t-- ) {
				tmp = rtypenamespace.exec( types[ t ] ) || [];
				type = origType = tmp[ 1 ];
				namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

				// There *must* be a type, no attaching namespace-only handlers
				if ( !type ) {
					continue;
				}

				// If event changes its type, use the special event handlers for the changed type
				special = jQuery.event.special[ type ] || {};

				// If selector defined, determine special event api type, otherwise given type
				type = ( selector ? special.delegateType : special.bindType ) || type;

				// Update special based on newly reset type
				special = jQuery.event.special[ type ] || {};

				// handleObj is passed to all event handlers
				handleObj = jQuery.extend( {
					type: type,
					origType: origType,
					data: data,
					handler: handler,
					guid: handler.guid,
					selector: selector,
					needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
					namespace: namespaces.join( "." )
				}, handleObjIn );

				// Init the event handler queue if we're the first
				if ( !( handlers = events[ type ] ) ) {
					handlers = events[ type ] = [];
					handlers.delegateCount = 0;

					// Only use addEventListener if the special events handler returns false
					if ( !special.setup ||
						special.setup.call( elem, data, namespaces, eventHandle ) === false ) {

						if ( elem.addEventListener ) {
							elem.addEventListener( type, eventHandle );
						}
					}
				}

				if ( special.add ) {
					special.add.call( elem, handleObj );

					if ( !handleObj.handler.guid ) {
						handleObj.handler.guid = handler.guid;
					}
				}

				// Add to the element's handler list, delegates in front
				if ( selector ) {
					handlers.splice( handlers.delegateCount++, 0, handleObj );
				} else {
					handlers.push( handleObj );
				}

				// Keep track of which events have ever been used, for event optimization
				jQuery.event.global[ type ] = true;
			}

		},

		// Detach an event or set of events from an element
		remove: function( elem, types, handler, selector, mappedTypes ) {

			var j, origCount, tmp,
				events, t, handleObj,
				special, handlers, type, namespaces, origType,
				elemData = dataPriv.hasData( elem ) && dataPriv.get( elem );

			if ( !elemData || !( events = elemData.events ) ) {
				return;
			}

			// Once for each type.namespace in types; type may be omitted
			types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
			t = types.length;
			while ( t-- ) {
				tmp = rtypenamespace.exec( types[ t ] ) || [];
				type = origType = tmp[ 1 ];
				namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

				// Unbind all events (on this namespace, if provided) for the element
				if ( !type ) {
					for ( type in events ) {
						jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
					}
					continue;
				}

				special = jQuery.event.special[ type ] || {};
				type = ( selector ? special.delegateType : special.bindType ) || type;
				handlers = events[ type ] || [];
				tmp = tmp[ 2 ] &&
					new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );

				// Remove matching events
				origCount = j = handlers.length;
				while ( j-- ) {
					handleObj = handlers[ j ];

					if ( ( mappedTypes || origType === handleObj.origType ) &&
						( !handler || handler.guid === handleObj.guid ) &&
						( !tmp || tmp.test( handleObj.namespace ) ) &&
						( !selector || selector === handleObj.selector ||
							selector === "**" && handleObj.selector ) ) {
						handlers.splice( j, 1 );

						if ( handleObj.selector ) {
							handlers.delegateCount--;
						}
						if ( special.remove ) {
							special.remove.call( elem, handleObj );
						}
					}
				}

				// Remove generic event handler if we removed something and no more handlers exist
				// (avoids potential for endless recursion during removal of special event handlers)
				if ( origCount && !handlers.length ) {
					if ( !special.teardown ||
						special.teardown.call( elem, namespaces, elemData.handle ) === false ) {

						jQuery.removeEvent( elem, type, elemData.handle );
					}

					delete events[ type ];
				}
			}

			// Remove data and the expando if it's no longer used
			if ( jQuery.isEmptyObject( events ) ) {
				dataPriv.remove( elem, "handle events" );
			}
		},

		dispatch: function( nativeEvent ) {

			// Make a writable jQuery.Event from the native event object
			var event = jQuery.event.fix( nativeEvent );

			var i, j, ret, matched, handleObj, handlerQueue,
				args = new Array( arguments.length ),
				handlers = ( dataPriv.get( this, "events" ) || {} )[ event.type ] || [],
				special = jQuery.event.special[ event.type ] || {};

			// Use the fix-ed jQuery.Event rather than the (read-only) native event
			args[ 0 ] = event;

			for ( i = 1; i < arguments.length; i++ ) {
				args[ i ] = arguments[ i ];
			}

			event.delegateTarget = this;

			// Call the preDispatch hook for the mapped type, and let it bail if desired
			if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
				return;
			}

			// Determine handlers
			handlerQueue = jQuery.event.handlers.call( this, event, handlers );

			// Run delegates first; they may want to stop propagation beneath us
			i = 0;
			while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
				event.currentTarget = matched.elem;

				j = 0;
				while ( ( handleObj = matched.handlers[ j++ ] ) &&
					!event.isImmediatePropagationStopped() ) {

					// If the event is namespaced, then each handler is only invoked if it is
					// specially universal or its namespaces are a superset of the event's.
					if ( !event.rnamespace || handleObj.namespace === false ||
						event.rnamespace.test( handleObj.namespace ) ) {

						event.handleObj = handleObj;
						event.data = handleObj.data;

						ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
							handleObj.handler ).apply( matched.elem, args );

						if ( ret !== undefined ) {
							if ( ( event.result = ret ) === false ) {
								event.preventDefault();
								event.stopPropagation();
							}
						}
					}
				}
			}

			// Call the postDispatch hook for the mapped type
			if ( special.postDispatch ) {
				special.postDispatch.call( this, event );
			}

			return event.result;
		},

		handlers: function( event, handlers ) {
			var i, handleObj, sel, matchedHandlers, matchedSelectors,
				handlerQueue = [],
				delegateCount = handlers.delegateCount,
				cur = event.target;

			// Find delegate handlers
			if ( delegateCount &&

				// Support: IE <=9
				// Black-hole SVG <use> instance trees (trac-13180)
				cur.nodeType &&

				// Support: Firefox <=42
				// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
				// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
				// Support: IE 11 only
				// ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
				!( event.type === "click" && event.button >= 1 ) ) {

				for ( ; cur !== this; cur = cur.parentNode || this ) {

					// Don't check non-elements (#13208)
					// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
					if ( cur.nodeType === 1 && !( event.type === "click" && cur.disabled === true ) ) {
						matchedHandlers = [];
						matchedSelectors = {};
						for ( i = 0; i < delegateCount; i++ ) {
							handleObj = handlers[ i ];

							// Don't conflict with Object.prototype properties (#13203)
							sel = handleObj.selector + " ";

							if ( matchedSelectors[ sel ] === undefined ) {
								matchedSelectors[ sel ] = handleObj.needsContext ?
									jQuery( sel, this ).index( cur ) > -1 :
									jQuery.find( sel, this, null, [ cur ] ).length;
							}
							if ( matchedSelectors[ sel ] ) {
								matchedHandlers.push( handleObj );
							}
						}
						if ( matchedHandlers.length ) {
							handlerQueue.push( { elem: cur, handlers: matchedHandlers } );
						}
					}
				}
			}

			// Add the remaining (directly-bound) handlers
			cur = this;
			if ( delegateCount < handlers.length ) {
				handlerQueue.push( { elem: cur, handlers: handlers.slice( delegateCount ) } );
			}

			return handlerQueue;
		},

		addProp: function( name, hook ) {
			Object.defineProperty( jQuery.Event.prototype, name, {
				enumerable: true,
				configurable: true,

				get: isFunction( hook ) ?
					function() {
						if ( this.originalEvent ) {
								return hook( this.originalEvent );
						}
					} :
					function() {
						if ( this.originalEvent ) {
								return this.originalEvent[ name ];
						}
					},

				set: function( value ) {
					Object.defineProperty( this, name, {
						enumerable: true,
						configurable: true,
						writable: true,
						value: value
					} );
				}
			} );
		},

		fix: function( originalEvent ) {
			return originalEvent[ jQuery.expando ] ?
				originalEvent :
				new jQuery.Event( originalEvent );
		},

		special: {
			load: {

				// Prevent triggered image.load events from bubbling to window.load
				noBubble: true
			},
			click: {

				// Utilize native event to ensure correct state for checkable inputs
				setup: function( data ) {

					// For mutual compressibility with _default, replace `this` access with a local var.
					// `|| data` is dead code meant only to preserve the variable through minification.
					var el = this || data;

					// Claim the first handler
					if ( rcheckableType.test( el.type ) &&
						el.click && nodeName( el, "input" ) ) {

						// dataPriv.set( el, "click", ... )
						leverageNative( el, "click", returnTrue );
					}

					// Return false to allow normal processing in the caller
					return false;
				},
				trigger: function( data ) {

					// For mutual compressibility with _default, replace `this` access with a local var.
					// `|| data` is dead code meant only to preserve the variable through minification.
					var el = this || data;

					// Force setup before triggering a click
					if ( rcheckableType.test( el.type ) &&
						el.click && nodeName( el, "input" ) ) {

						leverageNative( el, "click" );
					}

					// Return non-false to allow normal event-path propagation
					return true;
				},

				// For cross-browser consistency, suppress native .click() on links
				// Also prevent it if we're currently inside a leveraged native-event stack
				_default: function( event ) {
					var target = event.target;
					return rcheckableType.test( target.type ) &&
						target.click && nodeName( target, "input" ) &&
						dataPriv.get( target, "click" ) ||
						nodeName( target, "a" );
				}
			},

			beforeunload: {
				postDispatch: function( event ) {

					// Support: Firefox 20+
					// Firefox doesn't alert if the returnValue field is not set.
					if ( event.result !== undefined && event.originalEvent ) {
						event.originalEvent.returnValue = event.result;
					}
				}
			}
		}
	};

	// Ensure the presence of an event listener that handles manually-triggered
	// synthetic events by interrupting progress until reinvoked in response to
	// *native* events that it fires directly, ensuring that state changes have
	// already occurred before other listeners are invoked.
	function leverageNative( el, type, expectSync ) {

		// Missing expectSync indicates a trigger call, which must force setup through jQuery.event.add
		if ( !expectSync ) {
			if ( dataPriv.get( el, type ) === undefined ) {
				jQuery.event.add( el, type, returnTrue );
			}
			return;
		}

		// Register the controller as a special universal handler for all event namespaces
		dataPriv.set( el, type, false );
		jQuery.event.add( el, type, {
			namespace: false,
			handler: function( event ) {
				var notAsync, result,
					saved = dataPriv.get( this, type );

				if ( ( event.isTrigger & 1 ) && this[ type ] ) {

					// Interrupt processing of the outer synthetic .trigger()ed event
					// Saved data should be false in such cases, but might be a leftover capture object
					// from an async native handler (gh-4350)
					if ( !saved.length ) {

						// Store arguments for use when handling the inner native event
						// There will always be at least one argument (an event object), so this array
						// will not be confused with a leftover capture object.
						saved = slice.call( arguments );
						dataPriv.set( this, type, saved );

						// Trigger the native event and capture its result
						// Support: IE <=9 - 11+
						// focus() and blur() are asynchronous
						notAsync = expectSync( this, type );
						this[ type ]();
						result = dataPriv.get( this, type );
						if ( saved !== result || notAsync ) {
							dataPriv.set( this, type, false );
						} else {
							result = {};
						}
						if ( saved !== result ) {

							// Cancel the outer synthetic event
							event.stopImmediatePropagation();
							event.preventDefault();
							return result.value;
						}

					// If this is an inner synthetic event for an event with a bubbling surrogate
					// (focus or blur), assume that the surrogate already propagated from triggering the
					// native event and prevent that from happening again here.
					// This technically gets the ordering wrong w.r.t. to `.trigger()` (in which the
					// bubbling surrogate propagates *after* the non-bubbling base), but that seems
					// less bad than duplication.
					} else if ( ( jQuery.event.special[ type ] || {} ).delegateType ) {
						event.stopPropagation();
					}

				// If this is a native event triggered above, everything is now in order
				// Fire an inner synthetic event with the original arguments
				} else if ( saved.length ) {

					// ...and capture the result
					dataPriv.set( this, type, {
						value: jQuery.event.trigger(

							// Support: IE <=9 - 11+
							// Extend with the prototype to reset the above stopImmediatePropagation()
							jQuery.extend( saved[ 0 ], jQuery.Event.prototype ),
							saved.slice( 1 ),
							this
						)
					} );

					// Abort handling of the native event
					event.stopImmediatePropagation();
				}
			}
		} );
	}

	jQuery.removeEvent = function( elem, type, handle ) {

		// This "if" is needed for plain objects
		if ( elem.removeEventListener ) {
			elem.removeEventListener( type, handle );
		}
	};

	jQuery.Event = function( src, props ) {

		// Allow instantiation without the 'new' keyword
		if ( !( this instanceof jQuery.Event ) ) {
			return new jQuery.Event( src, props );
		}

		// Event object
		if ( src && src.type ) {
			this.originalEvent = src;
			this.type = src.type;

			// Events bubbling up the document may have been marked as prevented
			// by a handler lower down the tree; reflect the correct value.
			this.isDefaultPrevented = src.defaultPrevented ||
					src.defaultPrevented === undefined &&

					// Support: Android <=2.3 only
					src.returnValue === false ?
				returnTrue :
				returnFalse;

			// Create target properties
			// Support: Safari <=6 - 7 only
			// Target should not be a text node (#504, #13143)
			this.target = ( src.target && src.target.nodeType === 3 ) ?
				src.target.parentNode :
				src.target;

			this.currentTarget = src.currentTarget;
			this.relatedTarget = src.relatedTarget;

		// Event type
		} else {
			this.type = src;
		}

		// Put explicitly provided properties onto the event object
		if ( props ) {
			jQuery.extend( this, props );
		}

		// Create a timestamp if incoming event doesn't have one
		this.timeStamp = src && src.timeStamp || Date.now();

		// Mark it as fixed
		this[ jQuery.expando ] = true;
	};

	// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
	// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
	jQuery.Event.prototype = {
		constructor: jQuery.Event,
		isDefaultPrevented: returnFalse,
		isPropagationStopped: returnFalse,
		isImmediatePropagationStopped: returnFalse,
		isSimulated: false,

		preventDefault: function() {
			var e = this.originalEvent;

			this.isDefaultPrevented = returnTrue;

			if ( e && !this.isSimulated ) {
				e.preventDefault();
			}
		},
		stopPropagation: function() {
			var e = this.originalEvent;

			this.isPropagationStopped = returnTrue;

			if ( e && !this.isSimulated ) {
				e.stopPropagation();
			}
		},
		stopImmediatePropagation: function() {
			var e = this.originalEvent;

			this.isImmediatePropagationStopped = returnTrue;

			if ( e && !this.isSimulated ) {
				e.stopImmediatePropagation();
			}

			this.stopPropagation();
		}
	};

	// Includes all common event props including KeyEvent and MouseEvent specific props
	jQuery.each( {
		altKey: true,
		bubbles: true,
		cancelable: true,
		changedTouches: true,
		ctrlKey: true,
		detail: true,
		eventPhase: true,
		metaKey: true,
		pageX: true,
		pageY: true,
		shiftKey: true,
		view: true,
		"char": true,
		code: true,
		charCode: true,
		key: true,
		keyCode: true,
		button: true,
		buttons: true,
		clientX: true,
		clientY: true,
		offsetX: true,
		offsetY: true,
		pointerId: true,
		pointerType: true,
		screenX: true,
		screenY: true,
		targetTouches: true,
		toElement: true,
		touches: true,

		which: function( event ) {
			var button = event.button;

			// Add which for key events
			if ( event.which == null && rkeyEvent.test( event.type ) ) {
				return event.charCode != null ? event.charCode : event.keyCode;
			}

			// Add which for click: 1 === left; 2 === middle; 3 === right
			if ( !event.which && button !== undefined && rmouseEvent.test( event.type ) ) {
				if ( button & 1 ) {
					return 1;
				}

				if ( button & 2 ) {
					return 3;
				}

				if ( button & 4 ) {
					return 2;
				}

				return 0;
			}

			return event.which;
		}
	}, jQuery.event.addProp );

	jQuery.each( { focus: "focusin", blur: "focusout" }, function( type, delegateType ) {
		jQuery.event.special[ type ] = {

			// Utilize native event if possible so blur/focus sequence is correct
			setup: function() {

				// Claim the first handler
				// dataPriv.set( this, "focus", ... )
				// dataPriv.set( this, "blur", ... )
				leverageNative( this, type, expectSync );

				// Return false to allow normal processing in the caller
				return false;
			},
			trigger: function() {

				// Force setup before trigger
				leverageNative( this, type );

				// Return non-false to allow normal event-path propagation
				return true;
			},

			delegateType: delegateType
		};
	} );

	// Create mouseenter/leave events using mouseover/out and event-time checks
	// so that event delegation works in jQuery.
	// Do the same for pointerenter/pointerleave and pointerover/pointerout
	//
	// Support: Safari 7 only
	// Safari sends mouseenter too often; see:
	// https://bugs.chromium.org/p/chromium/issues/detail?id=470258
	// for the description of the bug (it existed in older Chrome versions as well).
	jQuery.each( {
		mouseenter: "mouseover",
		mouseleave: "mouseout",
		pointerenter: "pointerover",
		pointerleave: "pointerout"
	}, function( orig, fix ) {
		jQuery.event.special[ orig ] = {
			delegateType: fix,
			bindType: fix,

			handle: function( event ) {
				var ret,
					target = this,
					related = event.relatedTarget,
					handleObj = event.handleObj;

				// For mouseenter/leave call the handler if related is outside the target.
				// NB: No relatedTarget if the mouse left/entered the browser window
				if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
					event.type = handleObj.origType;
					ret = handleObj.handler.apply( this, arguments );
					event.type = fix;
				}
				return ret;
			}
		};
	} );

	jQuery.fn.extend( {

		on: function( types, selector, data, fn ) {
			return on( this, types, selector, data, fn );
		},
		one: function( types, selector, data, fn ) {
			return on( this, types, selector, data, fn, 1 );
		},
		off: function( types, selector, fn ) {
			var handleObj, type;
			if ( types && types.preventDefault && types.handleObj ) {

				// ( event )  dispatched jQuery.Event
				handleObj = types.handleObj;
				jQuery( types.delegateTarget ).off(
					handleObj.namespace ?
						handleObj.origType + "." + handleObj.namespace :
						handleObj.origType,
					handleObj.selector,
					handleObj.handler
				);
				return this;
			}
			if ( typeof types === "object" ) {

				// ( types-object [, selector] )
				for ( type in types ) {
					this.off( type, selector, types[ type ] );
				}
				return this;
			}
			if ( selector === false || typeof selector === "function" ) {

				// ( types [, fn] )
				fn = selector;
				selector = undefined;
			}
			if ( fn === false ) {
				fn = returnFalse;
			}
			return this.each( function() {
				jQuery.event.remove( this, types, fn, selector );
			} );
		}
	} );


	var

		/* eslint-disable max-len */

		// See https://github.com/eslint/eslint/issues/3229
		rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,

		/* eslint-enable */

		// Support: IE <=10 - 11, Edge 12 - 13 only
		// In IE/Edge using regex groups here causes severe slowdowns.
		// See https://connect.microsoft.com/IE/feedback/details/1736512/
		rnoInnerhtml = /<script|<style|<link/i,

		// checked="checked" or checked
		rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
		rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;

	// Prefer a tbody over its parent table for containing new rows
	function manipulationTarget( elem, content ) {
		if ( nodeName( elem, "table" ) &&
			nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ) {

			return jQuery( elem ).children( "tbody" )[ 0 ] || elem;
		}

		return elem;
	}

	// Replace/restore the type attribute of script elements for safe DOM manipulation
	function disableScript( elem ) {
		elem.type = ( elem.getAttribute( "type" ) !== null ) + "/" + elem.type;
		return elem;
	}
	function restoreScript( elem ) {
		if ( ( elem.type || "" ).slice( 0, 5 ) === "true/" ) {
			elem.type = elem.type.slice( 5 );
		} else {
			elem.removeAttribute( "type" );
		}

		return elem;
	}

	function cloneCopyEvent( src, dest ) {
		var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;

		if ( dest.nodeType !== 1 ) {
			return;
		}

		// 1. Copy private data: events, handlers, etc.
		if ( dataPriv.hasData( src ) ) {
			pdataOld = dataPriv.access( src );
			pdataCur = dataPriv.set( dest, pdataOld );
			events = pdataOld.events;

			if ( events ) {
				delete pdataCur.handle;
				pdataCur.events = {};

				for ( type in events ) {
					for ( i = 0, l = events[ type ].length; i < l; i++ ) {
						jQuery.event.add( dest, type, events[ type ][ i ] );
					}
				}
			}
		}

		// 2. Copy user data
		if ( dataUser.hasData( src ) ) {
			udataOld = dataUser.access( src );
			udataCur = jQuery.extend( {}, udataOld );

			dataUser.set( dest, udataCur );
		}
	}

	// Fix IE bugs, see support tests
	function fixInput( src, dest ) {
		var nodeName = dest.nodeName.toLowerCase();

		// Fails to persist the checked state of a cloned checkbox or radio button.
		if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
			dest.checked = src.checked;

		// Fails to return the selected option to the default selected state when cloning options
		} else if ( nodeName === "input" || nodeName === "textarea" ) {
			dest.defaultValue = src.defaultValue;
		}
	}

	function domManip( collection, args, callback, ignored ) {

		// Flatten any nested arrays
		args = concat.apply( [], args );

		var fragment, first, scripts, hasScripts, node, doc,
			i = 0,
			l = collection.length,
			iNoClone = l - 1,
			value = args[ 0 ],
			valueIsFunction = isFunction( value );

		// We can't cloneNode fragments that contain checked, in WebKit
		if ( valueIsFunction ||
				( l > 1 && typeof value === "string" &&
					!support.checkClone && rchecked.test( value ) ) ) {
			return collection.each( function( index ) {
				var self = collection.eq( index );
				if ( valueIsFunction ) {
					args[ 0 ] = value.call( this, index, self.html() );
				}
				domManip( self, args, callback, ignored );
			} );
		}

		if ( l ) {
			fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
			first = fragment.firstChild;

			if ( fragment.childNodes.length === 1 ) {
				fragment = first;
			}

			// Require either new content or an interest in ignored elements to invoke the callback
			if ( first || ignored ) {
				scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
				hasScripts = scripts.length;

				// Use the original fragment for the last item
				// instead of the first because it can end up
				// being emptied incorrectly in certain situations (#8070).
				for ( ; i < l; i++ ) {
					node = fragment;

					if ( i !== iNoClone ) {
						node = jQuery.clone( node, true, true );

						// Keep references to cloned scripts for later restoration
						if ( hasScripts ) {

							// Support: Android <=4.0 only, PhantomJS 1 only
							// push.apply(_, arraylike) throws on ancient WebKit
							jQuery.merge( scripts, getAll( node, "script" ) );
						}
					}

					callback.call( collection[ i ], node, i );
				}

				if ( hasScripts ) {
					doc = scripts[ scripts.length - 1 ].ownerDocument;

					// Reenable scripts
					jQuery.map( scripts, restoreScript );

					// Evaluate executable scripts on first document insertion
					for ( i = 0; i < hasScripts; i++ ) {
						node = scripts[ i ];
						if ( rscriptType.test( node.type || "" ) &&
							!dataPriv.access( node, "globalEval" ) &&
							jQuery.contains( doc, node ) ) {

							if ( node.src && ( node.type || "" ).toLowerCase()  !== "module" ) {

								// Optional AJAX dependency, but won't run scripts if not present
								if ( jQuery._evalUrl && !node.noModule ) {
									jQuery._evalUrl( node.src, {
										nonce: node.nonce || node.getAttribute( "nonce" )
									} );
								}
							} else {
								DOMEval( node.textContent.replace( rcleanScript, "" ), node, doc );
							}
						}
					}
				}
			}
		}

		return collection;
	}

	function remove( elem, selector, keepData ) {
		var node,
			nodes = selector ? jQuery.filter( selector, elem ) : elem,
			i = 0;

		for ( ; ( node = nodes[ i ] ) != null; i++ ) {
			if ( !keepData && node.nodeType === 1 ) {
				jQuery.cleanData( getAll( node ) );
			}

			if ( node.parentNode ) {
				if ( keepData && isAttached( node ) ) {
					setGlobalEval( getAll( node, "script" ) );
				}
				node.parentNode.removeChild( node );
			}
		}

		return elem;
	}

	jQuery.extend( {
		htmlPrefilter: function( html ) {
			return html.replace( rxhtmlTag, "<$1></$2>" );
		},

		clone: function( elem, dataAndEvents, deepDataAndEvents ) {
			var i, l, srcElements, destElements,
				clone = elem.cloneNode( true ),
				inPage = isAttached( elem );

			// Fix IE cloning issues
			if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
					!jQuery.isXMLDoc( elem ) ) {

				// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2
				destElements = getAll( clone );
				srcElements = getAll( elem );

				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					fixInput( srcElements[ i ], destElements[ i ] );
				}
			}

			// Copy the events from the original to the clone
			if ( dataAndEvents ) {
				if ( deepDataAndEvents ) {
					srcElements = srcElements || getAll( elem );
					destElements = destElements || getAll( clone );

					for ( i = 0, l = srcElements.length; i < l; i++ ) {
						cloneCopyEvent( srcElements[ i ], destElements[ i ] );
					}
				} else {
					cloneCopyEvent( elem, clone );
				}
			}

			// Preserve script evaluation history
			destElements = getAll( clone, "script" );
			if ( destElements.length > 0 ) {
				setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
			}

			// Return the cloned set
			return clone;
		},

		cleanData: function( elems ) {
			var data, elem, type,
				special = jQuery.event.special,
				i = 0;

			for ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {
				if ( acceptData( elem ) ) {
					if ( ( data = elem[ dataPriv.expando ] ) ) {
						if ( data.events ) {
							for ( type in data.events ) {
								if ( special[ type ] ) {
									jQuery.event.remove( elem, type );

								// This is a shortcut to avoid jQuery.event.remove's overhead
								} else {
									jQuery.removeEvent( elem, type, data.handle );
								}
							}
						}

						// Support: Chrome <=35 - 45+
						// Assign undefined instead of using delete, see Data#remove
						elem[ dataPriv.expando ] = undefined;
					}
					if ( elem[ dataUser.expando ] ) {

						// Support: Chrome <=35 - 45+
						// Assign undefined instead of using delete, see Data#remove
						elem[ dataUser.expando ] = undefined;
					}
				}
			}
		}
	} );

	jQuery.fn.extend( {
		detach: function( selector ) {
			return remove( this, selector, true );
		},

		remove: function( selector ) {
			return remove( this, selector );
		},

		text: function( value ) {
			return access( this, function( value ) {
				return value === undefined ?
					jQuery.text( this ) :
					this.empty().each( function() {
						if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
							this.textContent = value;
						}
					} );
			}, null, value, arguments.length );
		},

		append: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
					var target = manipulationTarget( this, elem );
					target.appendChild( elem );
				}
			} );
		},

		prepend: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
					var target = manipulationTarget( this, elem );
					target.insertBefore( elem, target.firstChild );
				}
			} );
		},

		before: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.parentNode ) {
					this.parentNode.insertBefore( elem, this );
				}
			} );
		},

		after: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.parentNode ) {
					this.parentNode.insertBefore( elem, this.nextSibling );
				}
			} );
		},

		empty: function() {
			var elem,
				i = 0;

			for ( ; ( elem = this[ i ] ) != null; i++ ) {
				if ( elem.nodeType === 1 ) {

					// Prevent memory leaks
					jQuery.cleanData( getAll( elem, false ) );

					// Remove any remaining nodes
					elem.textContent = "";
				}
			}

			return this;
		},

		clone: function( dataAndEvents, deepDataAndEvents ) {
			dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
			deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

			return this.map( function() {
				return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
			} );
		},

		html: function( value ) {
			return access( this, function( value ) {
				var elem = this[ 0 ] || {},
					i = 0,
					l = this.length;

				if ( value === undefined && elem.nodeType === 1 ) {
					return elem.innerHTML;
				}

				// See if we can take a shortcut and just use innerHTML
				if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
					!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

					value = jQuery.htmlPrefilter( value );

					try {
						for ( ; i < l; i++ ) {
							elem = this[ i ] || {};

							// Remove element nodes and prevent memory leaks
							if ( elem.nodeType === 1 ) {
								jQuery.cleanData( getAll( elem, false ) );
								elem.innerHTML = value;
							}
						}

						elem = 0;

					// If using innerHTML throws an exception, use the fallback method
					} catch ( e ) {}
				}

				if ( elem ) {
					this.empty().append( value );
				}
			}, null, value, arguments.length );
		},

		replaceWith: function() {
			var ignored = [];

			// Make the changes, replacing each non-ignored context element with the new content
			return domManip( this, arguments, function( elem ) {
				var parent = this.parentNode;

				if ( jQuery.inArray( this, ignored ) < 0 ) {
					jQuery.cleanData( getAll( this ) );
					if ( parent ) {
						parent.replaceChild( elem, this );
					}
				}

			// Force callback invocation
			}, ignored );
		}
	} );

	jQuery.each( {
		appendTo: "append",
		prependTo: "prepend",
		insertBefore: "before",
		insertAfter: "after",
		replaceAll: "replaceWith"
	}, function( name, original ) {
		jQuery.fn[ name ] = function( selector ) {
			var elems,
				ret = [],
				insert = jQuery( selector ),
				last = insert.length - 1,
				i = 0;

			for ( ; i <= last; i++ ) {
				elems = i === last ? this : this.clone( true );
				jQuery( insert[ i ] )[ original ]( elems );

				// Support: Android <=4.0 only, PhantomJS 1 only
				// .get() because push.apply(_, arraylike) throws on ancient WebKit
				push.apply( ret, elems.get() );
			}

			return this.pushStack( ret );
		};
	} );
	var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

	var getStyles = function( elem ) {

			// Support: IE <=11 only, Firefox <=30 (#15098, #14150)
			// IE throws on elements created in popups
			// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
			var view = elem.ownerDocument.defaultView;

			if ( !view || !view.opener ) {
				view = window;
			}

			return view.getComputedStyle( elem );
		};

	var rboxStyle = new RegExp( cssExpand.join( "|" ), "i" );



	( function() {

		// Executing both pixelPosition & boxSizingReliable tests require only one layout
		// so they're executed at the same time to save the second computation.
		function computeStyleTests() {

			// This is a singleton, we need to execute it only once
			if ( !div ) {
				return;
			}

			container.style.cssText = "position:absolute;left:-11111px;width:60px;" +
				"margin-top:1px;padding:0;border:0";
			div.style.cssText =
				"position:relative;display:block;box-sizing:border-box;overflow:scroll;" +
				"margin:auto;border:1px;padding:1px;" +
				"width:60%;top:1%";
			documentElement.appendChild( container ).appendChild( div );

			var divStyle = window.getComputedStyle( div );
			pixelPositionVal = divStyle.top !== "1%";

			// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44
			reliableMarginLeftVal = roundPixelMeasures( divStyle.marginLeft ) === 12;

			// Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3
			// Some styles come back with percentage values, even though they shouldn't
			div.style.right = "60%";
			pixelBoxStylesVal = roundPixelMeasures( divStyle.right ) === 36;

			// Support: IE 9 - 11 only
			// Detect misreporting of content dimensions for box-sizing:border-box elements
			boxSizingReliableVal = roundPixelMeasures( divStyle.width ) === 36;

			// Support: IE 9 only
			// Detect overflow:scroll screwiness (gh-3699)
			// Support: Chrome <=64
			// Don't get tricked when zoom affects offsetWidth (gh-4029)
			div.style.position = "absolute";
			scrollboxSizeVal = roundPixelMeasures( div.offsetWidth / 3 ) === 12;

			documentElement.removeChild( container );

			// Nullify the div so it wouldn't be stored in the memory and
			// it will also be a sign that checks already performed
			div = null;
		}

		function roundPixelMeasures( measure ) {
			return Math.round( parseFloat( measure ) );
		}

		var pixelPositionVal, boxSizingReliableVal, scrollboxSizeVal, pixelBoxStylesVal,
			reliableMarginLeftVal,
			container = document.createElement( "div" ),
			div = document.createElement( "div" );

		// Finish early in limited (non-browser) environments
		if ( !div.style ) {
			return;
		}

		// Support: IE <=9 - 11 only
		// Style of cloned element affects source element cloned (#8908)
		div.style.backgroundClip = "content-box";
		div.cloneNode( true ).style.backgroundClip = "";
		support.clearCloneStyle = div.style.backgroundClip === "content-box";

		jQuery.extend( support, {
			boxSizingReliable: function() {
				computeStyleTests();
				return boxSizingReliableVal;
			},
			pixelBoxStyles: function() {
				computeStyleTests();
				return pixelBoxStylesVal;
			},
			pixelPosition: function() {
				computeStyleTests();
				return pixelPositionVal;
			},
			reliableMarginLeft: function() {
				computeStyleTests();
				return reliableMarginLeftVal;
			},
			scrollboxSize: function() {
				computeStyleTests();
				return scrollboxSizeVal;
			}
		} );
	} )();


	function curCSS( elem, name, computed ) {
		var width, minWidth, maxWidth, ret,

			// Support: Firefox 51+
			// Retrieving style before computed somehow
			// fixes an issue with getting wrong values
			// on detached elements
			style = elem.style;

		computed = computed || getStyles( elem );

		// getPropertyValue is needed for:
		//   .css('filter') (IE 9 only, #12537)
		//   .css('--customProperty) (#3144)
		if ( computed ) {
			ret = computed.getPropertyValue( name ) || computed[ name ];

			if ( ret === "" && !isAttached( elem ) ) {
				ret = jQuery.style( elem, name );
			}

			// A tribute to the "awesome hack by Dean Edwards"
			// Android Browser returns percentage for some values,
			// but width seems to be reliably pixels.
			// This is against the CSSOM draft spec:
			// https://drafts.csswg.org/cssom/#resolved-values
			if ( !support.pixelBoxStyles() && rnumnonpx.test( ret ) && rboxStyle.test( name ) ) {

				// Remember the original values
				width = style.width;
				minWidth = style.minWidth;
				maxWidth = style.maxWidth;

				// Put in the new values to get a computed value out
				style.minWidth = style.maxWidth = style.width = ret;
				ret = computed.width;

				// Revert the changed values
				style.width = width;
				style.minWidth = minWidth;
				style.maxWidth = maxWidth;
			}
		}

		return ret !== undefined ?

			// Support: IE <=9 - 11 only
			// IE returns zIndex value as an integer.
			ret + "" :
			ret;
	}


	function addGetHookIf( conditionFn, hookFn ) {

		// Define the hook, we'll check on the first run if it's really needed.
		return {
			get: function() {
				if ( conditionFn() ) {

					// Hook not needed (or it's not possible to use it due
					// to missing dependency), remove it.
					delete this.get;
					return;
				}

				// Hook needed; redefine it so that the support test is not executed again.
				return ( this.get = hookFn ).apply( this, arguments );
			}
		};
	}


	var cssPrefixes = [ "Webkit", "Moz", "ms" ],
		emptyStyle = document.createElement( "div" ).style,
		vendorProps = {};

	// Return a vendor-prefixed property or undefined
	function vendorPropName( name ) {

		// Check for vendor prefixed names
		var capName = name[ 0 ].toUpperCase() + name.slice( 1 ),
			i = cssPrefixes.length;

		while ( i-- ) {
			name = cssPrefixes[ i ] + capName;
			if ( name in emptyStyle ) {
				return name;
			}
		}
	}

	// Return a potentially-mapped jQuery.cssProps or vendor prefixed property
	function finalPropName( name ) {
		var final = jQuery.cssProps[ name ] || vendorProps[ name ];

		if ( final ) {
			return final;
		}
		if ( name in emptyStyle ) {
			return name;
		}
		return vendorProps[ name ] = vendorPropName( name ) || name;
	}


	var

		// Swappable if display is none or starts with table
		// except "table", "table-cell", or "table-caption"
		// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
		rdisplayswap = /^(none|table(?!-c[ea]).+)/,
		rcustomProp = /^--/,
		cssShow = { position: "absolute", visibility: "hidden", display: "block" },
		cssNormalTransform = {
			letterSpacing: "0",
			fontWeight: "400"
		};

	function setPositiveNumber( elem, value, subtract ) {

		// Any relative (+/-) values have already been
		// normalized at this point
		var matches = rcssNum.exec( value );
		return matches ?

			// Guard against undefined "subtract", e.g., when used as in cssHooks
			Math.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || "px" ) :
			value;
	}

	function boxModelAdjustment( elem, dimension, box, isBorderBox, styles, computedVal ) {
		var i = dimension === "width" ? 1 : 0,
			extra = 0,
			delta = 0;

		// Adjustment may not be necessary
		if ( box === ( isBorderBox ? "border" : "content" ) ) {
			return 0;
		}

		for ( ; i < 4; i += 2 ) {

			// Both box models exclude margin
			if ( box === "margin" ) {
				delta += jQuery.css( elem, box + cssExpand[ i ], true, styles );
			}

			// If we get here with a content-box, we're seeking "padding" or "border" or "margin"
			if ( !isBorderBox ) {

				// Add padding
				delta += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

				// For "border" or "margin", add border
				if ( box !== "padding" ) {
					delta += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );

				// But still keep track of it otherwise
				} else {
					extra += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
				}

			// If we get here with a border-box (content + padding + border), we're seeking "content" or
			// "padding" or "margin"
			} else {

				// For "content", subtract padding
				if ( box === "content" ) {
					delta -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
				}

				// For "content" or "padding", subtract border
				if ( box !== "margin" ) {
					delta -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
				}
			}
		}

		// Account for positive content-box scroll gutter when requested by providing computedVal
		if ( !isBorderBox && computedVal >= 0 ) {

			// offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border
			// Assuming integer scroll gutter, subtract the rest and round down
			delta += Math.max( 0, Math.ceil(
				elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
				computedVal -
				delta -
				extra -
				0.5

			// If offsetWidth/offsetHeight is unknown, then we can't determine content-box scroll gutter
			// Use an explicit zero to avoid NaN (gh-3964)
			) ) || 0;
		}

		return delta;
	}

	function getWidthOrHeight( elem, dimension, extra ) {

		// Start with computed style
		var styles = getStyles( elem ),

			// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-4322).
			// Fake content-box until we know it's needed to know the true value.
			boxSizingNeeded = !support.boxSizingReliable() || extra,
			isBorderBox = boxSizingNeeded &&
				jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
			valueIsBorderBox = isBorderBox,

			val = curCSS( elem, dimension, styles ),
			offsetProp = "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 );

		// Support: Firefox <=54
		// Return a confounding non-pixel value or feign ignorance, as appropriate.
		if ( rnumnonpx.test( val ) ) {
			if ( !extra ) {
				return val;
			}
			val = "auto";
		}


		// Fall back to offsetWidth/offsetHeight when value is "auto"
		// This happens for inline elements with no explicit setting (gh-3571)
		// Support: Android <=4.1 - 4.3 only
		// Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)
		// Support: IE 9-11 only
		// Also use offsetWidth/offsetHeight for when box sizing is unreliable
		// We use getClientRects() to check for hidden/disconnected.
		// In those cases, the computed value can be trusted to be border-box
		if ( ( !support.boxSizingReliable() && isBorderBox ||
			val === "auto" ||
			!parseFloat( val ) && jQuery.css( elem, "display", false, styles ) === "inline" ) &&
			elem.getClientRects().length ) {

			isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

			// Where available, offsetWidth/offsetHeight approximate border box dimensions.
			// Where not available (e.g., SVG), assume unreliable box-sizing and interpret the
			// retrieved value as a content box dimension.
			valueIsBorderBox = offsetProp in elem;
			if ( valueIsBorderBox ) {
				val = elem[ offsetProp ];
			}
		}

		// Normalize "" and auto
		val = parseFloat( val ) || 0;

		// Adjust for the element's box model
		return ( val +
			boxModelAdjustment(
				elem,
				dimension,
				extra || ( isBorderBox ? "border" : "content" ),
				valueIsBorderBox,
				styles,

				// Provide the current computed size to request scroll gutter calculation (gh-3589)
				val
			)
		) + "px";
	}

	jQuery.extend( {

		// Add in style property hooks for overriding the default
		// behavior of getting and setting a style property
		cssHooks: {
			opacity: {
				get: function( elem, computed ) {
					if ( computed ) {

						// We should always get a number back from opacity
						var ret = curCSS( elem, "opacity" );
						return ret === "" ? "1" : ret;
					}
				}
			}
		},

		// Don't automatically add "px" to these possibly-unitless properties
		cssNumber: {
			"animationIterationCount": true,
			"columnCount": true,
			"fillOpacity": true,
			"flexGrow": true,
			"flexShrink": true,
			"fontWeight": true,
			"gridArea": true,
			"gridColumn": true,
			"gridColumnEnd": true,
			"gridColumnStart": true,
			"gridRow": true,
			"gridRowEnd": true,
			"gridRowStart": true,
			"lineHeight": true,
			"opacity": true,
			"order": true,
			"orphans": true,
			"widows": true,
			"zIndex": true,
			"zoom": true
		},

		// Add in properties whose names you wish to fix before
		// setting or getting the value
		cssProps: {},

		// Get and set the style property on a DOM Node
		style: function( elem, name, value, extra ) {

			// Don't set styles on text and comment nodes
			if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
				return;
			}

			// Make sure that we're working with the right name
			var ret, type, hooks,
				origName = camelCase( name ),
				isCustomProp = rcustomProp.test( name ),
				style = elem.style;

			// Make sure that we're working with the right name. We don't
			// want to query the value if it is a CSS custom property
			// since they are user-defined.
			if ( !isCustomProp ) {
				name = finalPropName( origName );
			}

			// Gets hook for the prefixed version, then unprefixed version
			hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

			// Check if we're setting a value
			if ( value !== undefined ) {
				type = typeof value;

				// Convert "+=" or "-=" to relative numbers (#7345)
				if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
					value = adjustCSS( elem, name, ret );

					// Fixes bug #9237
					type = "number";
				}

				// Make sure that null and NaN values aren't set (#7116)
				if ( value == null || value !== value ) {
					return;
				}

				// If a number was passed in, add the unit (except for certain CSS properties)
				// The isCustomProp check can be removed in jQuery 4.0 when we only auto-append
				// "px" to a few hardcoded values.
				if ( type === "number" && !isCustomProp ) {
					value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
				}

				// background-* props affect original clone's values
				if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
					style[ name ] = "inherit";
				}

				// If a hook was provided, use that value, otherwise just set the specified value
				if ( !hooks || !( "set" in hooks ) ||
					( value = hooks.set( elem, value, extra ) ) !== undefined ) {

					if ( isCustomProp ) {
						style.setProperty( name, value );
					} else {
						style[ name ] = value;
					}
				}

			} else {

				// If a hook was provided get the non-computed value from there
				if ( hooks && "get" in hooks &&
					( ret = hooks.get( elem, false, extra ) ) !== undefined ) {

					return ret;
				}

				// Otherwise just get the value from the style object
				return style[ name ];
			}
		},

		css: function( elem, name, extra, styles ) {
			var val, num, hooks,
				origName = camelCase( name ),
				isCustomProp = rcustomProp.test( name );

			// Make sure that we're working with the right name. We don't
			// want to modify the value if it is a CSS custom property
			// since they are user-defined.
			if ( !isCustomProp ) {
				name = finalPropName( origName );
			}

			// Try prefixed name followed by the unprefixed name
			hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

			// If a hook was provided get the computed value from there
			if ( hooks && "get" in hooks ) {
				val = hooks.get( elem, true, extra );
			}

			// Otherwise, if a way to get the computed value exists, use that
			if ( val === undefined ) {
				val = curCSS( elem, name, styles );
			}

			// Convert "normal" to computed value
			if ( val === "normal" && name in cssNormalTransform ) {
				val = cssNormalTransform[ name ];
			}

			// Make numeric if forced or a qualifier was provided and val looks numeric
			if ( extra === "" || extra ) {
				num = parseFloat( val );
				return extra === true || isFinite( num ) ? num || 0 : val;
			}

			return val;
		}
	} );

	jQuery.each( [ "height", "width" ], function( i, dimension ) {
		jQuery.cssHooks[ dimension ] = {
			get: function( elem, computed, extra ) {
				if ( computed ) {

					// Certain elements can have dimension info if we invisibly show them
					// but it must have a current display style that would benefit
					return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&

						// Support: Safari 8+
						// Table columns in Safari have non-zero offsetWidth & zero
						// getBoundingClientRect().width unless display is changed.
						// Support: IE <=11 only
						// Running getBoundingClientRect on a disconnected node
						// in IE throws an error.
						( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?
							swap( elem, cssShow, function() {
								return getWidthOrHeight( elem, dimension, extra );
							} ) :
							getWidthOrHeight( elem, dimension, extra );
				}
			},

			set: function( elem, value, extra ) {
				var matches,
					styles = getStyles( elem ),

					// Only read styles.position if the test has a chance to fail
					// to avoid forcing a reflow.
					scrollboxSizeBuggy = !support.scrollboxSize() &&
						styles.position === "absolute",

					// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-3991)
					boxSizingNeeded = scrollboxSizeBuggy || extra,
					isBorderBox = boxSizingNeeded &&
						jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
					subtract = extra ?
						boxModelAdjustment(
							elem,
							dimension,
							extra,
							isBorderBox,
							styles
						) :
						0;

				// Account for unreliable border-box dimensions by comparing offset* to computed and
				// faking a content-box to get border and padding (gh-3699)
				if ( isBorderBox && scrollboxSizeBuggy ) {
					subtract -= Math.ceil(
						elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
						parseFloat( styles[ dimension ] ) -
						boxModelAdjustment( elem, dimension, "border", false, styles ) -
						0.5
					);
				}

				// Convert to pixels if value adjustment is needed
				if ( subtract && ( matches = rcssNum.exec( value ) ) &&
					( matches[ 3 ] || "px" ) !== "px" ) {

					elem.style[ dimension ] = value;
					value = jQuery.css( elem, dimension );
				}

				return setPositiveNumber( elem, value, subtract );
			}
		};
	} );

	jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
		function( elem, computed ) {
			if ( computed ) {
				return ( parseFloat( curCSS( elem, "marginLeft" ) ) ||
					elem.getBoundingClientRect().left -
						swap( elem, { marginLeft: 0 }, function() {
							return elem.getBoundingClientRect().left;
						} )
					) + "px";
			}
		}
	);

	// These hooks are used by animate to expand properties
	jQuery.each( {
		margin: "",
		padding: "",
		border: "Width"
	}, function( prefix, suffix ) {
		jQuery.cssHooks[ prefix + suffix ] = {
			expand: function( value ) {
				var i = 0,
					expanded = {},

					// Assumes a single number if not a string
					parts = typeof value === "string" ? value.split( " " ) : [ value ];

				for ( ; i < 4; i++ ) {
					expanded[ prefix + cssExpand[ i ] + suffix ] =
						parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
				}

				return expanded;
			}
		};

		if ( prefix !== "margin" ) {
			jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
		}
	} );

	jQuery.fn.extend( {
		css: function( name, value ) {
			return access( this, function( elem, name, value ) {
				var styles, len,
					map = {},
					i = 0;

				if ( Array.isArray( name ) ) {
					styles = getStyles( elem );
					len = name.length;

					for ( ; i < len; i++ ) {
						map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
					}

					return map;
				}

				return value !== undefined ?
					jQuery.style( elem, name, value ) :
					jQuery.css( elem, name );
			}, name, value, arguments.length > 1 );
		}
	} );


	function Tween( elem, options, prop, end, easing ) {
		return new Tween.prototype.init( elem, options, prop, end, easing );
	}
	jQuery.Tween = Tween;

	Tween.prototype = {
		constructor: Tween,
		init: function( elem, options, prop, end, easing, unit ) {
			this.elem = elem;
			this.prop = prop;
			this.easing = easing || jQuery.easing._default;
			this.options = options;
			this.start = this.now = this.cur();
			this.end = end;
			this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
		},
		cur: function() {
			var hooks = Tween.propHooks[ this.prop ];

			return hooks && hooks.get ?
				hooks.get( this ) :
				Tween.propHooks._default.get( this );
		},
		run: function( percent ) {
			var eased,
				hooks = Tween.propHooks[ this.prop ];

			if ( this.options.duration ) {
				this.pos = eased = jQuery.easing[ this.easing ](
					percent, this.options.duration * percent, 0, 1, this.options.duration
				);
			} else {
				this.pos = eased = percent;
			}
			this.now = ( this.end - this.start ) * eased + this.start;

			if ( this.options.step ) {
				this.options.step.call( this.elem, this.now, this );
			}

			if ( hooks && hooks.set ) {
				hooks.set( this );
			} else {
				Tween.propHooks._default.set( this );
			}
			return this;
		}
	};

	Tween.prototype.init.prototype = Tween.prototype;

	Tween.propHooks = {
		_default: {
			get: function( tween ) {
				var result;

				// Use a property on the element directly when it is not a DOM element,
				// or when there is no matching style property that exists.
				if ( tween.elem.nodeType !== 1 ||
					tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
					return tween.elem[ tween.prop ];
				}

				// Passing an empty string as a 3rd parameter to .css will automatically
				// attempt a parseFloat and fallback to a string if the parse fails.
				// Simple values such as "10px" are parsed to Float;
				// complex values such as "rotate(1rad)" are returned as-is.
				result = jQuery.css( tween.elem, tween.prop, "" );

				// Empty strings, null, undefined and "auto" are converted to 0.
				return !result || result === "auto" ? 0 : result;
			},
			set: function( tween ) {

				// Use step hook for back compat.
				// Use cssHook if its there.
				// Use .style if available and use plain properties where available.
				if ( jQuery.fx.step[ tween.prop ] ) {
					jQuery.fx.step[ tween.prop ]( tween );
				} else if ( tween.elem.nodeType === 1 && (
						jQuery.cssHooks[ tween.prop ] ||
						tween.elem.style[ finalPropName( tween.prop ) ] != null ) ) {
					jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
				} else {
					tween.elem[ tween.prop ] = tween.now;
				}
			}
		}
	};

	// Support: IE <=9 only
	// Panic based approach to setting things on disconnected nodes
	Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
		set: function( tween ) {
			if ( tween.elem.nodeType && tween.elem.parentNode ) {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	};

	jQuery.easing = {
		linear: function( p ) {
			return p;
		},
		swing: function( p ) {
			return 0.5 - Math.cos( p * Math.PI ) / 2;
		},
		_default: "swing"
	};

	jQuery.fx = Tween.prototype.init;

	// Back compat <1.8 extension point
	jQuery.fx.step = {};




	var
		fxNow, inProgress,
		rfxtypes = /^(?:toggle|show|hide)$/,
		rrun = /queueHooks$/;

	function schedule() {
		if ( inProgress ) {
			if ( document.hidden === false && window.requestAnimationFrame ) {
				window.requestAnimationFrame( schedule );
			} else {
				window.setTimeout( schedule, jQuery.fx.interval );
			}

			jQuery.fx.tick();
		}
	}

	// Animations created synchronously will run synchronously
	function createFxNow() {
		window.setTimeout( function() {
			fxNow = undefined;
		} );
		return ( fxNow = Date.now() );
	}

	// Generate parameters to create a standard animation
	function genFx( type, includeWidth ) {
		var which,
			i = 0,
			attrs = { height: type };

		// If we include width, step value is 1 to do all cssExpand values,
		// otherwise step value is 2 to skip over Left and Right
		includeWidth = includeWidth ? 1 : 0;
		for ( ; i < 4; i += 2 - includeWidth ) {
			which = cssExpand[ i ];
			attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
		}

		if ( includeWidth ) {
			attrs.opacity = attrs.width = type;
		}

		return attrs;
	}

	function createTween( value, prop, animation ) {
		var tween,
			collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
			index = 0,
			length = collection.length;
		for ( ; index < length; index++ ) {
			if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {

				// We're done with this property
				return tween;
			}
		}
	}

	function defaultPrefilter( elem, props, opts ) {
		var prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,
			isBox = "width" in props || "height" in props,
			anim = this,
			orig = {},
			style = elem.style,
			hidden = elem.nodeType && isHiddenWithinTree( elem ),
			dataShow = dataPriv.get( elem, "fxshow" );

		// Queue-skipping animations hijack the fx hooks
		if ( !opts.queue ) {
			hooks = jQuery._queueHooks( elem, "fx" );
			if ( hooks.unqueued == null ) {
				hooks.unqueued = 0;
				oldfire = hooks.empty.fire;
				hooks.empty.fire = function() {
					if ( !hooks.unqueued ) {
						oldfire();
					}
				};
			}
			hooks.unqueued++;

			anim.always( function() {

				// Ensure the complete handler is called before this completes
				anim.always( function() {
					hooks.unqueued--;
					if ( !jQuery.queue( elem, "fx" ).length ) {
						hooks.empty.fire();
					}
				} );
			} );
		}

		// Detect show/hide animations
		for ( prop in props ) {
			value = props[ prop ];
			if ( rfxtypes.test( value ) ) {
				delete props[ prop ];
				toggle = toggle || value === "toggle";
				if ( value === ( hidden ? "hide" : "show" ) ) {

					// Pretend to be hidden if this is a "show" and
					// there is still data from a stopped show/hide
					if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
						hidden = true;

					// Ignore all other no-op show/hide data
					} else {
						continue;
					}
				}
				orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );
			}
		}

		// Bail out if this is a no-op like .hide().hide()
		propTween = !jQuery.isEmptyObject( props );
		if ( !propTween && jQuery.isEmptyObject( orig ) ) {
			return;
		}

		// Restrict "overflow" and "display" styles during box animations
		if ( isBox && elem.nodeType === 1 ) {

			// Support: IE <=9 - 11, Edge 12 - 15
			// Record all 3 overflow attributes because IE does not infer the shorthand
			// from identically-valued overflowX and overflowY and Edge just mirrors
			// the overflowX value there.
			opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

			// Identify a display type, preferring old show/hide data over the CSS cascade
			restoreDisplay = dataShow && dataShow.display;
			if ( restoreDisplay == null ) {
				restoreDisplay = dataPriv.get( elem, "display" );
			}
			display = jQuery.css( elem, "display" );
			if ( display === "none" ) {
				if ( restoreDisplay ) {
					display = restoreDisplay;
				} else {

					// Get nonempty value(s) by temporarily forcing visibility
					showHide( [ elem ], true );
					restoreDisplay = elem.style.display || restoreDisplay;
					display = jQuery.css( elem, "display" );
					showHide( [ elem ] );
				}
			}

			// Animate inline elements as inline-block
			if ( display === "inline" || display === "inline-block" && restoreDisplay != null ) {
				if ( jQuery.css( elem, "float" ) === "none" ) {

					// Restore the original display value at the end of pure show/hide animations
					if ( !propTween ) {
						anim.done( function() {
							style.display = restoreDisplay;
						} );
						if ( restoreDisplay == null ) {
							display = style.display;
							restoreDisplay = display === "none" ? "" : display;
						}
					}
					style.display = "inline-block";
				}
			}
		}

		if ( opts.overflow ) {
			style.overflow = "hidden";
			anim.always( function() {
				style.overflow = opts.overflow[ 0 ];
				style.overflowX = opts.overflow[ 1 ];
				style.overflowY = opts.overflow[ 2 ];
			} );
		}

		// Implement show/hide animations
		propTween = false;
		for ( prop in orig ) {

			// General show/hide setup for this element animation
			if ( !propTween ) {
				if ( dataShow ) {
					if ( "hidden" in dataShow ) {
						hidden = dataShow.hidden;
					}
				} else {
					dataShow = dataPriv.access( elem, "fxshow", { display: restoreDisplay } );
				}

				// Store hidden/visible for toggle so `.stop().toggle()` "reverses"
				if ( toggle ) {
					dataShow.hidden = !hidden;
				}

				// Show elements before animating them
				if ( hidden ) {
					showHide( [ elem ], true );
				}

				/* eslint-disable no-loop-func */

				anim.done( function() {

				/* eslint-enable no-loop-func */

					// The final step of a "hide" animation is actually hiding the element
					if ( !hidden ) {
						showHide( [ elem ] );
					}
					dataPriv.remove( elem, "fxshow" );
					for ( prop in orig ) {
						jQuery.style( elem, prop, orig[ prop ] );
					}
				} );
			}

			// Per-property setup
			propTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );
			if ( !( prop in dataShow ) ) {
				dataShow[ prop ] = propTween.start;
				if ( hidden ) {
					propTween.end = propTween.start;
					propTween.start = 0;
				}
			}
		}
	}

	function propFilter( props, specialEasing ) {
		var index, name, easing, value, hooks;

		// camelCase, specialEasing and expand cssHook pass
		for ( index in props ) {
			name = camelCase( index );
			easing = specialEasing[ name ];
			value = props[ index ];
			if ( Array.isArray( value ) ) {
				easing = value[ 1 ];
				value = props[ index ] = value[ 0 ];
			}

			if ( index !== name ) {
				props[ name ] = value;
				delete props[ index ];
			}

			hooks = jQuery.cssHooks[ name ];
			if ( hooks && "expand" in hooks ) {
				value = hooks.expand( value );
				delete props[ name ];

				// Not quite $.extend, this won't overwrite existing keys.
				// Reusing 'index' because we have the correct "name"
				for ( index in value ) {
					if ( !( index in props ) ) {
						props[ index ] = value[ index ];
						specialEasing[ index ] = easing;
					}
				}
			} else {
				specialEasing[ name ] = easing;
			}
		}
	}

	function Animation( elem, properties, options ) {
		var result,
			stopped,
			index = 0,
			length = Animation.prefilters.length,
			deferred = jQuery.Deferred().always( function() {

				// Don't match elem in the :animated selector
				delete tick.elem;
			} ),
			tick = function() {
				if ( stopped ) {
					return false;
				}
				var currentTime = fxNow || createFxNow(),
					remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),

					// Support: Android 2.3 only
					// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
					temp = remaining / animation.duration || 0,
					percent = 1 - temp,
					index = 0,
					length = animation.tweens.length;

				for ( ; index < length; index++ ) {
					animation.tweens[ index ].run( percent );
				}

				deferred.notifyWith( elem, [ animation, percent, remaining ] );

				// If there's more to do, yield
				if ( percent < 1 && length ) {
					return remaining;
				}

				// If this was an empty animation, synthesize a final progress notification
				if ( !length ) {
					deferred.notifyWith( elem, [ animation, 1, 0 ] );
				}

				// Resolve the animation and report its conclusion
				deferred.resolveWith( elem, [ animation ] );
				return false;
			},
			animation = deferred.promise( {
				elem: elem,
				props: jQuery.extend( {}, properties ),
				opts: jQuery.extend( true, {
					specialEasing: {},
					easing: jQuery.easing._default
				}, options ),
				originalProperties: properties,
				originalOptions: options,
				startTime: fxNow || createFxNow(),
				duration: options.duration,
				tweens: [],
				createTween: function( prop, end ) {
					var tween = jQuery.Tween( elem, animation.opts, prop, end,
							animation.opts.specialEasing[ prop ] || animation.opts.easing );
					animation.tweens.push( tween );
					return tween;
				},
				stop: function( gotoEnd ) {
					var index = 0,

						// If we are going to the end, we want to run all the tweens
						// otherwise we skip this part
						length = gotoEnd ? animation.tweens.length : 0;
					if ( stopped ) {
						return this;
					}
					stopped = true;
					for ( ; index < length; index++ ) {
						animation.tweens[ index ].run( 1 );
					}

					// Resolve when we played the last frame; otherwise, reject
					if ( gotoEnd ) {
						deferred.notifyWith( elem, [ animation, 1, 0 ] );
						deferred.resolveWith( elem, [ animation, gotoEnd ] );
					} else {
						deferred.rejectWith( elem, [ animation, gotoEnd ] );
					}
					return this;
				}
			} ),
			props = animation.props;

		propFilter( props, animation.opts.specialEasing );

		for ( ; index < length; index++ ) {
			result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );
			if ( result ) {
				if ( isFunction( result.stop ) ) {
					jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =
						result.stop.bind( result );
				}
				return result;
			}
		}

		jQuery.map( props, createTween, animation );

		if ( isFunction( animation.opts.start ) ) {
			animation.opts.start.call( elem, animation );
		}

		// Attach callbacks from options
		animation
			.progress( animation.opts.progress )
			.done( animation.opts.done, animation.opts.complete )
			.fail( animation.opts.fail )
			.always( animation.opts.always );

		jQuery.fx.timer(
			jQuery.extend( tick, {
				elem: elem,
				anim: animation,
				queue: animation.opts.queue
			} )
		);

		return animation;
	}

	jQuery.Animation = jQuery.extend( Animation, {

		tweeners: {
			"*": [ function( prop, value ) {
				var tween = this.createTween( prop, value );
				adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );
				return tween;
			} ]
		},

		tweener: function( props, callback ) {
			if ( isFunction( props ) ) {
				callback = props;
				props = [ "*" ];
			} else {
				props = props.match( rnothtmlwhite );
			}

			var prop,
				index = 0,
				length = props.length;

			for ( ; index < length; index++ ) {
				prop = props[ index ];
				Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];
				Animation.tweeners[ prop ].unshift( callback );
			}
		},

		prefilters: [ defaultPrefilter ],

		prefilter: function( callback, prepend ) {
			if ( prepend ) {
				Animation.prefilters.unshift( callback );
			} else {
				Animation.prefilters.push( callback );
			}
		}
	} );

	jQuery.speed = function( speed, easing, fn ) {
		var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
			complete: fn || !fn && easing ||
				isFunction( speed ) && speed,
			duration: speed,
			easing: fn && easing || easing && !isFunction( easing ) && easing
		};

		// Go to the end state if fx are off
		if ( jQuery.fx.off ) {
			opt.duration = 0;

		} else {
			if ( typeof opt.duration !== "number" ) {
				if ( opt.duration in jQuery.fx.speeds ) {
					opt.duration = jQuery.fx.speeds[ opt.duration ];

				} else {
					opt.duration = jQuery.fx.speeds._default;
				}
			}
		}

		// Normalize opt.queue - true/undefined/null -> "fx"
		if ( opt.queue == null || opt.queue === true ) {
			opt.queue = "fx";
		}

		// Queueing
		opt.old = opt.complete;

		opt.complete = function() {
			if ( isFunction( opt.old ) ) {
				opt.old.call( this );
			}

			if ( opt.queue ) {
				jQuery.dequeue( this, opt.queue );
			}
		};

		return opt;
	};

	jQuery.fn.extend( {
		fadeTo: function( speed, to, easing, callback ) {

			// Show any hidden elements after setting opacity to 0
			return this.filter( isHiddenWithinTree ).css( "opacity", 0 ).show()

				// Animate to the value specified
				.end().animate( { opacity: to }, speed, easing, callback );
		},
		animate: function( prop, speed, easing, callback ) {
			var empty = jQuery.isEmptyObject( prop ),
				optall = jQuery.speed( speed, easing, callback ),
				doAnimation = function() {

					// Operate on a copy of prop so per-property easing won't be lost
					var anim = Animation( this, jQuery.extend( {}, prop ), optall );

					// Empty animations, or finishing resolves immediately
					if ( empty || dataPriv.get( this, "finish" ) ) {
						anim.stop( true );
					}
				};
				doAnimation.finish = doAnimation;

			return empty || optall.queue === false ?
				this.each( doAnimation ) :
				this.queue( optall.queue, doAnimation );
		},
		stop: function( type, clearQueue, gotoEnd ) {
			var stopQueue = function( hooks ) {
				var stop = hooks.stop;
				delete hooks.stop;
				stop( gotoEnd );
			};

			if ( typeof type !== "string" ) {
				gotoEnd = clearQueue;
				clearQueue = type;
				type = undefined;
			}
			if ( clearQueue && type !== false ) {
				this.queue( type || "fx", [] );
			}

			return this.each( function() {
				var dequeue = true,
					index = type != null && type + "queueHooks",
					timers = jQuery.timers,
					data = dataPriv.get( this );

				if ( index ) {
					if ( data[ index ] && data[ index ].stop ) {
						stopQueue( data[ index ] );
					}
				} else {
					for ( index in data ) {
						if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
							stopQueue( data[ index ] );
						}
					}
				}

				for ( index = timers.length; index--; ) {
					if ( timers[ index ].elem === this &&
						( type == null || timers[ index ].queue === type ) ) {

						timers[ index ].anim.stop( gotoEnd );
						dequeue = false;
						timers.splice( index, 1 );
					}
				}

				// Start the next in the queue if the last step wasn't forced.
				// Timers currently will call their complete callbacks, which
				// will dequeue but only if they were gotoEnd.
				if ( dequeue || !gotoEnd ) {
					jQuery.dequeue( this, type );
				}
			} );
		},
		finish: function( type ) {
			if ( type !== false ) {
				type = type || "fx";
			}
			return this.each( function() {
				var index,
					data = dataPriv.get( this ),
					queue = data[ type + "queue" ],
					hooks = data[ type + "queueHooks" ],
					timers = jQuery.timers,
					length = queue ? queue.length : 0;

				// Enable finishing flag on private data
				data.finish = true;

				// Empty the queue first
				jQuery.queue( this, type, [] );

				if ( hooks && hooks.stop ) {
					hooks.stop.call( this, true );
				}

				// Look for any active animations, and finish them
				for ( index = timers.length; index--; ) {
					if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
						timers[ index ].anim.stop( true );
						timers.splice( index, 1 );
					}
				}

				// Look for any animations in the old queue and finish them
				for ( index = 0; index < length; index++ ) {
					if ( queue[ index ] && queue[ index ].finish ) {
						queue[ index ].finish.call( this );
					}
				}

				// Turn off finishing flag
				delete data.finish;
			} );
		}
	} );

	jQuery.each( [ "toggle", "show", "hide" ], function( i, name ) {
		var cssFn = jQuery.fn[ name ];
		jQuery.fn[ name ] = function( speed, easing, callback ) {
			return speed == null || typeof speed === "boolean" ?
				cssFn.apply( this, arguments ) :
				this.animate( genFx( name, true ), speed, easing, callback );
		};
	} );

	// Generate shortcuts for custom animations
	jQuery.each( {
		slideDown: genFx( "show" ),
		slideUp: genFx( "hide" ),
		slideToggle: genFx( "toggle" ),
		fadeIn: { opacity: "show" },
		fadeOut: { opacity: "hide" },
		fadeToggle: { opacity: "toggle" }
	}, function( name, props ) {
		jQuery.fn[ name ] = function( speed, easing, callback ) {
			return this.animate( props, speed, easing, callback );
		};
	} );

	jQuery.timers = [];
	jQuery.fx.tick = function() {
		var timer,
			i = 0,
			timers = jQuery.timers;

		fxNow = Date.now();

		for ( ; i < timers.length; i++ ) {
			timer = timers[ i ];

			// Run the timer and safely remove it when done (allowing for external removal)
			if ( !timer() && timers[ i ] === timer ) {
				timers.splice( i--, 1 );
			}
		}

		if ( !timers.length ) {
			jQuery.fx.stop();
		}
		fxNow = undefined;
	};

	jQuery.fx.timer = function( timer ) {
		jQuery.timers.push( timer );
		jQuery.fx.start();
	};

	jQuery.fx.interval = 13;
	jQuery.fx.start = function() {
		if ( inProgress ) {
			return;
		}

		inProgress = true;
		schedule();
	};

	jQuery.fx.stop = function() {
		inProgress = null;
	};

	jQuery.fx.speeds = {
		slow: 600,
		fast: 200,

		// Default speed
		_default: 400
	};


	// Based off of the plugin by Clint Helfers, with permission.
	// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
	jQuery.fn.delay = function( time, type ) {
		time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
		type = type || "fx";

		return this.queue( type, function( next, hooks ) {
			var timeout = window.setTimeout( next, time );
			hooks.stop = function() {
				window.clearTimeout( timeout );
			};
		} );
	};


	( function() {
		var input = document.createElement( "input" ),
			select = document.createElement( "select" ),
			opt = select.appendChild( document.createElement( "option" ) );

		input.type = "checkbox";

		// Support: Android <=4.3 only
		// Default value for a checkbox should be "on"
		support.checkOn = input.value !== "";

		// Support: IE <=11 only
		// Must access selectedIndex to make default options select
		support.optSelected = opt.selected;

		// Support: IE <=11 only
		// An input loses its value after becoming a radio
		input = document.createElement( "input" );
		input.value = "t";
		input.type = "radio";
		support.radioValue = input.value === "t";
	} )();


	var boolHook,
		attrHandle = jQuery.expr.attrHandle;

	jQuery.fn.extend( {
		attr: function( name, value ) {
			return access( this, jQuery.attr, name, value, arguments.length > 1 );
		},

		removeAttr: function( name ) {
			return this.each( function() {
				jQuery.removeAttr( this, name );
			} );
		}
	} );

	jQuery.extend( {
		attr: function( elem, name, value ) {
			var ret, hooks,
				nType = elem.nodeType;

			// Don't get/set attributes on text, comment and attribute nodes
			if ( nType === 3 || nType === 8 || nType === 2 ) {
				return;
			}

			// Fallback to prop when attributes are not supported
			if ( typeof elem.getAttribute === "undefined" ) {
				return jQuery.prop( elem, name, value );
			}

			// Attribute hooks are determined by the lowercase version
			// Grab necessary hook if one is defined
			if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
				hooks = jQuery.attrHooks[ name.toLowerCase() ] ||
					( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );
			}

			if ( value !== undefined ) {
				if ( value === null ) {
					jQuery.removeAttr( elem, name );
					return;
				}

				if ( hooks && "set" in hooks &&
					( ret = hooks.set( elem, value, name ) ) !== undefined ) {
					return ret;
				}

				elem.setAttribute( name, value + "" );
				return value;
			}

			if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
				return ret;
			}

			ret = jQuery.find.attr( elem, name );

			// Non-existent attributes return null, we normalize to undefined
			return ret == null ? undefined : ret;
		},

		attrHooks: {
			type: {
				set: function( elem, value ) {
					if ( !support.radioValue && value === "radio" &&
						nodeName( elem, "input" ) ) {
						var val = elem.value;
						elem.setAttribute( "type", value );
						if ( val ) {
							elem.value = val;
						}
						return value;
					}
				}
			}
		},

		removeAttr: function( elem, value ) {
			var name,
				i = 0,

				// Attribute names can contain non-HTML whitespace characters
				// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
				attrNames = value && value.match( rnothtmlwhite );

			if ( attrNames && elem.nodeType === 1 ) {
				while ( ( name = attrNames[ i++ ] ) ) {
					elem.removeAttribute( name );
				}
			}
		}
	} );

	// Hooks for boolean attributes
	boolHook = {
		set: function( elem, value, name ) {
			if ( value === false ) {

				// Remove boolean attributes when set to false
				jQuery.removeAttr( elem, name );
			} else {
				elem.setAttribute( name, name );
			}
			return name;
		}
	};

	jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
		var getter = attrHandle[ name ] || jQuery.find.attr;

		attrHandle[ name ] = function( elem, name, isXML ) {
			var ret, handle,
				lowercaseName = name.toLowerCase();

			if ( !isXML ) {

				// Avoid an infinite loop by temporarily removing this function from the getter
				handle = attrHandle[ lowercaseName ];
				attrHandle[ lowercaseName ] = ret;
				ret = getter( elem, name, isXML ) != null ?
					lowercaseName :
					null;
				attrHandle[ lowercaseName ] = handle;
			}
			return ret;
		};
	} );




	var rfocusable = /^(?:input|select|textarea|button)$/i,
		rclickable = /^(?:a|area)$/i;

	jQuery.fn.extend( {
		prop: function( name, value ) {
			return access( this, jQuery.prop, name, value, arguments.length > 1 );
		},

		removeProp: function( name ) {
			return this.each( function() {
				delete this[ jQuery.propFix[ name ] || name ];
			} );
		}
	} );

	jQuery.extend( {
		prop: function( elem, name, value ) {
			var ret, hooks,
				nType = elem.nodeType;

			// Don't get/set properties on text, comment and attribute nodes
			if ( nType === 3 || nType === 8 || nType === 2 ) {
				return;
			}

			if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {

				// Fix name and attach hooks
				name = jQuery.propFix[ name ] || name;
				hooks = jQuery.propHooks[ name ];
			}

			if ( value !== undefined ) {
				if ( hooks && "set" in hooks &&
					( ret = hooks.set( elem, value, name ) ) !== undefined ) {
					return ret;
				}

				return ( elem[ name ] = value );
			}

			if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
				return ret;
			}

			return elem[ name ];
		},

		propHooks: {
			tabIndex: {
				get: function( elem ) {

					// Support: IE <=9 - 11 only
					// elem.tabIndex doesn't always return the
					// correct value when it hasn't been explicitly set
					// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
					// Use proper attribute retrieval(#12072)
					var tabindex = jQuery.find.attr( elem, "tabindex" );

					if ( tabindex ) {
						return parseInt( tabindex, 10 );
					}

					if (
						rfocusable.test( elem.nodeName ) ||
						rclickable.test( elem.nodeName ) &&
						elem.href
					) {
						return 0;
					}

					return -1;
				}
			}
		},

		propFix: {
			"for": "htmlFor",
			"class": "className"
		}
	} );

	// Support: IE <=11 only
	// Accessing the selectedIndex property
	// forces the browser to respect setting selected
	// on the option
	// The getter ensures a default option is selected
	// when in an optgroup
	// eslint rule "no-unused-expressions" is disabled for this code
	// since it considers such accessions noop
	if ( !support.optSelected ) {
		jQuery.propHooks.selected = {
			get: function( elem ) {

				/* eslint no-unused-expressions: "off" */

				var parent = elem.parentNode;
				if ( parent && parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
				return null;
			},
			set: function( elem ) {

				/* eslint no-unused-expressions: "off" */

				var parent = elem.parentNode;
				if ( parent ) {
					parent.selectedIndex;

					if ( parent.parentNode ) {
						parent.parentNode.selectedIndex;
					}
				}
			}
		};
	}

	jQuery.each( [
		"tabIndex",
		"readOnly",
		"maxLength",
		"cellSpacing",
		"cellPadding",
		"rowSpan",
		"colSpan",
		"useMap",
		"frameBorder",
		"contentEditable"
	], function() {
		jQuery.propFix[ this.toLowerCase() ] = this;
	} );




		// Strip and collapse whitespace according to HTML spec
		// https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace
		function stripAndCollapse( value ) {
			var tokens = value.match( rnothtmlwhite ) || [];
			return tokens.join( " " );
		}


	function getClass( elem ) {
		return elem.getAttribute && elem.getAttribute( "class" ) || "";
	}

	function classesToArray( value ) {
		if ( Array.isArray( value ) ) {
			return value;
		}
		if ( typeof value === "string" ) {
			return value.match( rnothtmlwhite ) || [];
		}
		return [];
	}

	jQuery.fn.extend( {
		addClass: function( value ) {
			var classes, elem, cur, curValue, clazz, j, finalValue,
				i = 0;

			if ( isFunction( value ) ) {
				return this.each( function( j ) {
					jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
				} );
			}

			classes = classesToArray( value );

			if ( classes.length ) {
				while ( ( elem = this[ i++ ] ) ) {
					curValue = getClass( elem );
					cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

					if ( cur ) {
						j = 0;
						while ( ( clazz = classes[ j++ ] ) ) {
							if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
								cur += clazz + " ";
							}
						}

						// Only assign if different to avoid unneeded rendering.
						finalValue = stripAndCollapse( cur );
						if ( curValue !== finalValue ) {
							elem.setAttribute( "class", finalValue );
						}
					}
				}
			}

			return this;
		},

		removeClass: function( value ) {
			var classes, elem, cur, curValue, clazz, j, finalValue,
				i = 0;

			if ( isFunction( value ) ) {
				return this.each( function( j ) {
					jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
				} );
			}

			if ( !arguments.length ) {
				return this.attr( "class", "" );
			}

			classes = classesToArray( value );

			if ( classes.length ) {
				while ( ( elem = this[ i++ ] ) ) {
					curValue = getClass( elem );

					// This expression is here for better compressibility (see addClass)
					cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

					if ( cur ) {
						j = 0;
						while ( ( clazz = classes[ j++ ] ) ) {

							// Remove *all* instances
							while ( cur.indexOf( " " + clazz + " " ) > -1 ) {
								cur = cur.replace( " " + clazz + " ", " " );
							}
						}

						// Only assign if different to avoid unneeded rendering.
						finalValue = stripAndCollapse( cur );
						if ( curValue !== finalValue ) {
							elem.setAttribute( "class", finalValue );
						}
					}
				}
			}

			return this;
		},

		toggleClass: function( value, stateVal ) {
			var type = typeof value,
				isValidValue = type === "string" || Array.isArray( value );

			if ( typeof stateVal === "boolean" && isValidValue ) {
				return stateVal ? this.addClass( value ) : this.removeClass( value );
			}

			if ( isFunction( value ) ) {
				return this.each( function( i ) {
					jQuery( this ).toggleClass(
						value.call( this, i, getClass( this ), stateVal ),
						stateVal
					);
				} );
			}

			return this.each( function() {
				var className, i, self, classNames;

				if ( isValidValue ) {

					// Toggle individual class names
					i = 0;
					self = jQuery( this );
					classNames = classesToArray( value );

					while ( ( className = classNames[ i++ ] ) ) {

						// Check each className given, space separated list
						if ( self.hasClass( className ) ) {
							self.removeClass( className );
						} else {
							self.addClass( className );
						}
					}

				// Toggle whole class name
				} else if ( value === undefined || type === "boolean" ) {
					className = getClass( this );
					if ( className ) {

						// Store className if set
						dataPriv.set( this, "__className__", className );
					}

					// If the element has a class name or if we're passed `false`,
					// then remove the whole classname (if there was one, the above saved it).
					// Otherwise bring back whatever was previously saved (if anything),
					// falling back to the empty string if nothing was stored.
					if ( this.setAttribute ) {
						this.setAttribute( "class",
							className || value === false ?
							"" :
							dataPriv.get( this, "__className__" ) || ""
						);
					}
				}
			} );
		},

		hasClass: function( selector ) {
			var className, elem,
				i = 0;

			className = " " + selector + " ";
			while ( ( elem = this[ i++ ] ) ) {
				if ( elem.nodeType === 1 &&
					( " " + stripAndCollapse( getClass( elem ) ) + " " ).indexOf( className ) > -1 ) {
						return true;
				}
			}

			return false;
		}
	} );




	var rreturn = /\r/g;

	jQuery.fn.extend( {
		val: function( value ) {
			var hooks, ret, valueIsFunction,
				elem = this[ 0 ];

			if ( !arguments.length ) {
				if ( elem ) {
					hooks = jQuery.valHooks[ elem.type ] ||
						jQuery.valHooks[ elem.nodeName.toLowerCase() ];

					if ( hooks &&
						"get" in hooks &&
						( ret = hooks.get( elem, "value" ) ) !== undefined
					) {
						return ret;
					}

					ret = elem.value;

					// Handle most common string cases
					if ( typeof ret === "string" ) {
						return ret.replace( rreturn, "" );
					}

					// Handle cases where value is null/undef or number
					return ret == null ? "" : ret;
				}

				return;
			}

			valueIsFunction = isFunction( value );

			return this.each( function( i ) {
				var val;

				if ( this.nodeType !== 1 ) {
					return;
				}

				if ( valueIsFunction ) {
					val = value.call( this, i, jQuery( this ).val() );
				} else {
					val = value;
				}

				// Treat null/undefined as ""; convert numbers to string
				if ( val == null ) {
					val = "";

				} else if ( typeof val === "number" ) {
					val += "";

				} else if ( Array.isArray( val ) ) {
					val = jQuery.map( val, function( value ) {
						return value == null ? "" : value + "";
					} );
				}

				hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

				// If set returns undefined, fall back to normal setting
				if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
					this.value = val;
				}
			} );
		}
	} );

	jQuery.extend( {
		valHooks: {
			option: {
				get: function( elem ) {

					var val = jQuery.find.attr( elem, "value" );
					return val != null ?
						val :

						// Support: IE <=10 - 11 only
						// option.text throws exceptions (#14686, #14858)
						// Strip and collapse whitespace
						// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
						stripAndCollapse( jQuery.text( elem ) );
				}
			},
			select: {
				get: function( elem ) {
					var value, option, i,
						options = elem.options,
						index = elem.selectedIndex,
						one = elem.type === "select-one",
						values = one ? null : [],
						max = one ? index + 1 : options.length;

					if ( index < 0 ) {
						i = max;

					} else {
						i = one ? index : 0;
					}

					// Loop through all the selected options
					for ( ; i < max; i++ ) {
						option = options[ i ];

						// Support: IE <=9 only
						// IE8-9 doesn't update selected after form reset (#2551)
						if ( ( option.selected || i === index ) &&

								// Don't return options that are disabled or in a disabled optgroup
								!option.disabled &&
								( !option.parentNode.disabled ||
									!nodeName( option.parentNode, "optgroup" ) ) ) {

							// Get the specific value for the option
							value = jQuery( option ).val();

							// We don't need an array for one selects
							if ( one ) {
								return value;
							}

							// Multi-Selects return an array
							values.push( value );
						}
					}

					return values;
				},

				set: function( elem, value ) {
					var optionSet, option,
						options = elem.options,
						values = jQuery.makeArray( value ),
						i = options.length;

					while ( i-- ) {
						option = options[ i ];

						/* eslint-disable no-cond-assign */

						if ( option.selected =
							jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1
						) {
							optionSet = true;
						}

						/* eslint-enable no-cond-assign */
					}

					// Force browsers to behave consistently when non-matching value is set
					if ( !optionSet ) {
						elem.selectedIndex = -1;
					}
					return values;
				}
			}
		}
	} );

	// Radios and checkboxes getter/setter
	jQuery.each( [ "radio", "checkbox" ], function() {
		jQuery.valHooks[ this ] = {
			set: function( elem, value ) {
				if ( Array.isArray( value ) ) {
					return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
				}
			}
		};
		if ( !support.checkOn ) {
			jQuery.valHooks[ this ].get = function( elem ) {
				return elem.getAttribute( "value" ) === null ? "on" : elem.value;
			};
		}
	} );




	// Return jQuery for attributes-only inclusion


	support.focusin = "onfocusin" in window;


	var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
		stopPropagationCallback = function( e ) {
			e.stopPropagation();
		};

	jQuery.extend( jQuery.event, {

		trigger: function( event, data, elem, onlyHandlers ) {

			var i, cur, tmp, bubbleType, ontype, handle, special, lastElement,
				eventPath = [ elem || document ],
				type = hasOwn.call( event, "type" ) ? event.type : event,
				namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];

			cur = lastElement = tmp = elem = elem || document;

			// Don't do events on text and comment nodes
			if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
				return;
			}

			// focus/blur morphs to focusin/out; ensure we're not firing them right now
			if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
				return;
			}

			if ( type.indexOf( "." ) > -1 ) {

				// Namespaced trigger; create a regexp to match event type in handle()
				namespaces = type.split( "." );
				type = namespaces.shift();
				namespaces.sort();
			}
			ontype = type.indexOf( ":" ) < 0 && "on" + type;

			// Caller can pass in a jQuery.Event object, Object, or just an event type string
			event = event[ jQuery.expando ] ?
				event :
				new jQuery.Event( type, typeof event === "object" && event );

			// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
			event.isTrigger = onlyHandlers ? 2 : 3;
			event.namespace = namespaces.join( "." );
			event.rnamespace = event.namespace ?
				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
				null;

			// Clean up the event in case it is being reused
			event.result = undefined;
			if ( !event.target ) {
				event.target = elem;
			}

			// Clone any incoming data and prepend the event, creating the handler arg list
			data = data == null ?
				[ event ] :
				jQuery.makeArray( data, [ event ] );

			// Allow special events to draw outside the lines
			special = jQuery.event.special[ type ] || {};
			if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
				return;
			}

			// Determine event propagation path in advance, per W3C events spec (#9951)
			// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
			if ( !onlyHandlers && !special.noBubble && !isWindow( elem ) ) {

				bubbleType = special.delegateType || type;
				if ( !rfocusMorph.test( bubbleType + type ) ) {
					cur = cur.parentNode;
				}
				for ( ; cur; cur = cur.parentNode ) {
					eventPath.push( cur );
					tmp = cur;
				}

				// Only add window if we got to document (e.g., not plain obj or detached DOM)
				if ( tmp === ( elem.ownerDocument || document ) ) {
					eventPath.push( tmp.defaultView || tmp.parentWindow || window );
				}
			}

			// Fire handlers on the event path
			i = 0;
			while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {
				lastElement = cur;
				event.type = i > 1 ?
					bubbleType :
					special.bindType || type;

				// jQuery handler
				handle = ( dataPriv.get( cur, "events" ) || {} )[ event.type ] &&
					dataPriv.get( cur, "handle" );
				if ( handle ) {
					handle.apply( cur, data );
				}

				// Native handler
				handle = ontype && cur[ ontype ];
				if ( handle && handle.apply && acceptData( cur ) ) {
					event.result = handle.apply( cur, data );
					if ( event.result === false ) {
						event.preventDefault();
					}
				}
			}
			event.type = type;

			// If nobody prevented the default action, do it now
			if ( !onlyHandlers && !event.isDefaultPrevented() ) {

				if ( ( !special._default ||
					special._default.apply( eventPath.pop(), data ) === false ) &&
					acceptData( elem ) ) {

					// Call a native DOM method on the target with the same name as the event.
					// Don't do default actions on window, that's where global variables be (#6170)
					if ( ontype && isFunction( elem[ type ] ) && !isWindow( elem ) ) {

						// Don't re-trigger an onFOO event when we call its FOO() method
						tmp = elem[ ontype ];

						if ( tmp ) {
							elem[ ontype ] = null;
						}

						// Prevent re-triggering of the same event, since we already bubbled it above
						jQuery.event.triggered = type;

						if ( event.isPropagationStopped() ) {
							lastElement.addEventListener( type, stopPropagationCallback );
						}

						elem[ type ]();

						if ( event.isPropagationStopped() ) {
							lastElement.removeEventListener( type, stopPropagationCallback );
						}

						jQuery.event.triggered = undefined;

						if ( tmp ) {
							elem[ ontype ] = tmp;
						}
					}
				}
			}

			return event.result;
		},

		// Piggyback on a donor event to simulate a different one
		// Used only for `focus(in | out)` events
		simulate: function( type, elem, event ) {
			var e = jQuery.extend(
				new jQuery.Event(),
				event,
				{
					type: type,
					isSimulated: true
				}
			);

			jQuery.event.trigger( e, null, elem );
		}

	} );

	jQuery.fn.extend( {

		trigger: function( type, data ) {
			return this.each( function() {
				jQuery.event.trigger( type, data, this );
			} );
		},
		triggerHandler: function( type, data ) {
			var elem = this[ 0 ];
			if ( elem ) {
				return jQuery.event.trigger( type, data, elem, true );
			}
		}
	} );


	// Support: Firefox <=44
	// Firefox doesn't have focus(in | out) events
	// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
	//
	// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
	// focus(in | out) events fire after focus & blur events,
	// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
	// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857
	if ( !support.focusin ) {
		jQuery.each( { focus: "focusin", blur: "focusout" }, function( orig, fix ) {

			// Attach a single capturing handler on the document while someone wants focusin/focusout
			var handler = function( event ) {
				jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );
			};

			jQuery.event.special[ fix ] = {
				setup: function() {
					var doc = this.ownerDocument || this,
						attaches = dataPriv.access( doc, fix );

					if ( !attaches ) {
						doc.addEventListener( orig, handler, true );
					}
					dataPriv.access( doc, fix, ( attaches || 0 ) + 1 );
				},
				teardown: function() {
					var doc = this.ownerDocument || this,
						attaches = dataPriv.access( doc, fix ) - 1;

					if ( !attaches ) {
						doc.removeEventListener( orig, handler, true );
						dataPriv.remove( doc, fix );

					} else {
						dataPriv.access( doc, fix, attaches );
					}
				}
			};
		} );
	}
	var location = window.location;

	var nonce = Date.now();

	var rquery = ( /\?/ );



	// Cross-browser xml parsing
	jQuery.parseXML = function( data ) {
		var xml;
		if ( !data || typeof data !== "string" ) {
			return null;
		}

		// Support: IE 9 - 11 only
		// IE throws on parseFromString with invalid input.
		try {
			xml = ( new window.DOMParser() ).parseFromString( data, "text/xml" );
		} catch ( e ) {
			xml = undefined;
		}

		if ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {
			jQuery.error( "Invalid XML: " + data );
		}
		return xml;
	};


	var
		rbracket = /\[\]$/,
		rCRLF = /\r?\n/g,
		rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
		rsubmittable = /^(?:input|select|textarea|keygen)/i;

	function buildParams( prefix, obj, traditional, add ) {
		var name;

		if ( Array.isArray( obj ) ) {

			// Serialize array item.
			jQuery.each( obj, function( i, v ) {
				if ( traditional || rbracket.test( prefix ) ) {

					// Treat each array item as a scalar.
					add( prefix, v );

				} else {

					// Item is non-scalar (array or object), encode its numeric index.
					buildParams(
						prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
						v,
						traditional,
						add
					);
				}
			} );

		} else if ( !traditional && toType( obj ) === "object" ) {

			// Serialize object item.
			for ( name in obj ) {
				buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
			}

		} else {

			// Serialize scalar item.
			add( prefix, obj );
		}
	}

	// Serialize an array of form elements or a set of
	// key/values into a query string
	jQuery.param = function( a, traditional ) {
		var prefix,
			s = [],
			add = function( key, valueOrFunction ) {

				// If value is a function, invoke it and use its return value
				var value = isFunction( valueOrFunction ) ?
					valueOrFunction() :
					valueOrFunction;

				s[ s.length ] = encodeURIComponent( key ) + "=" +
					encodeURIComponent( value == null ? "" : value );
			};

		if ( a == null ) {
			return "";
		}

		// If an array was passed in, assume that it is an array of form elements.
		if ( Array.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {

			// Serialize the form elements
			jQuery.each( a, function() {
				add( this.name, this.value );
			} );

		} else {

			// If traditional, encode the "old" way (the way 1.3.2 or older
			// did it), otherwise encode params recursively.
			for ( prefix in a ) {
				buildParams( prefix, a[ prefix ], traditional, add );
			}
		}

		// Return the resulting serialization
		return s.join( "&" );
	};

	jQuery.fn.extend( {
		serialize: function() {
			return jQuery.param( this.serializeArray() );
		},
		serializeArray: function() {
			return this.map( function() {

				// Can add propHook for "elements" to filter or add form elements
				var elements = jQuery.prop( this, "elements" );
				return elements ? jQuery.makeArray( elements ) : this;
			} )
			.filter( function() {
				var type = this.type;

				// Use .is( ":disabled" ) so that fieldset[disabled] works
				return this.name && !jQuery( this ).is( ":disabled" ) &&
					rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
					( this.checked || !rcheckableType.test( type ) );
			} )
			.map( function( i, elem ) {
				var val = jQuery( this ).val();

				if ( val == null ) {
					return null;
				}

				if ( Array.isArray( val ) ) {
					return jQuery.map( val, function( val ) {
						return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
					} );
				}

				return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
			} ).get();
		}
	} );


	var
		r20 = /%20/g,
		rhash = /#.*$/,
		rantiCache = /([?&])_=[^&]*/,
		rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,

		// #7653, #8125, #8152: local protocol detection
		rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
		rnoContent = /^(?:GET|HEAD)$/,
		rprotocol = /^\/\//,

		/* Prefilters
		 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
		 * 2) These are called:
		 *    - BEFORE asking for a transport
		 *    - AFTER param serialization (s.data is a string if s.processData is true)
		 * 3) key is the dataType
		 * 4) the catchall symbol "*" can be used
		 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
		 */
		prefilters = {},

		/* Transports bindings
		 * 1) key is the dataType
		 * 2) the catchall symbol "*" can be used
		 * 3) selection will start with transport dataType and THEN go to "*" if needed
		 */
		transports = {},

		// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
		allTypes = "*/".concat( "*" ),

		// Anchor tag for parsing the document origin
		originAnchor = document.createElement( "a" );
		originAnchor.href = location.href;

	// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
	function addToPrefiltersOrTransports( structure ) {

		// dataTypeExpression is optional and defaults to "*"
		return function( dataTypeExpression, func ) {

			if ( typeof dataTypeExpression !== "string" ) {
				func = dataTypeExpression;
				dataTypeExpression = "*";
			}

			var dataType,
				i = 0,
				dataTypes = dataTypeExpression.toLowerCase().match( rnothtmlwhite ) || [];

			if ( isFunction( func ) ) {

				// For each dataType in the dataTypeExpression
				while ( ( dataType = dataTypes[ i++ ] ) ) {

					// Prepend if requested
					if ( dataType[ 0 ] === "+" ) {
						dataType = dataType.slice( 1 ) || "*";
						( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );

					// Otherwise append
					} else {
						( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
					}
				}
			}
		};
	}

	// Base inspection function for prefilters and transports
	function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

		var inspected = {},
			seekingTransport = ( structure === transports );

		function inspect( dataType ) {
			var selected;
			inspected[ dataType ] = true;
			jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
				var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
				if ( typeof dataTypeOrTransport === "string" &&
					!seekingTransport && !inspected[ dataTypeOrTransport ] ) {

					options.dataTypes.unshift( dataTypeOrTransport );
					inspect( dataTypeOrTransport );
					return false;
				} else if ( seekingTransport ) {
					return !( selected = dataTypeOrTransport );
				}
			} );
			return selected;
		}

		return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
	}

	// A special extend for ajax options
	// that takes "flat" options (not to be deep extended)
	// Fixes #9887
	function ajaxExtend( target, src ) {
		var key, deep,
			flatOptions = jQuery.ajaxSettings.flatOptions || {};

		for ( key in src ) {
			if ( src[ key ] !== undefined ) {
				( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
			}
		}
		if ( deep ) {
			jQuery.extend( true, target, deep );
		}

		return target;
	}

	/* Handles responses to an ajax request:
	 * - finds the right dataType (mediates between content-type and expected dataType)
	 * - returns the corresponding response
	 */
	function ajaxHandleResponses( s, jqXHR, responses ) {

		var ct, type, finalDataType, firstDataType,
			contents = s.contents,
			dataTypes = s.dataTypes;

		// Remove auto dataType and get content-type in the process
		while ( dataTypes[ 0 ] === "*" ) {
			dataTypes.shift();
			if ( ct === undefined ) {
				ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
			}
		}

		// Check if we're dealing with a known content-type
		if ( ct ) {
			for ( type in contents ) {
				if ( contents[ type ] && contents[ type ].test( ct ) ) {
					dataTypes.unshift( type );
					break;
				}
			}
		}

		// Check to see if we have a response for the expected dataType
		if ( dataTypes[ 0 ] in responses ) {
			finalDataType = dataTypes[ 0 ];
		} else {

			// Try convertible dataTypes
			for ( type in responses ) {
				if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
					finalDataType = type;
					break;
				}
				if ( !firstDataType ) {
					firstDataType = type;
				}
			}

			// Or just use first one
			finalDataType = finalDataType || firstDataType;
		}

		// If we found a dataType
		// We add the dataType to the list if needed
		// and return the corresponding response
		if ( finalDataType ) {
			if ( finalDataType !== dataTypes[ 0 ] ) {
				dataTypes.unshift( finalDataType );
			}
			return responses[ finalDataType ];
		}
	}

	/* Chain conversions given the request and the original response
	 * Also sets the responseXXX fields on the jqXHR instance
	 */
	function ajaxConvert( s, response, jqXHR, isSuccess ) {
		var conv2, current, conv, tmp, prev,
			converters = {},

			// Work with a copy of dataTypes in case we need to modify it for conversion
			dataTypes = s.dataTypes.slice();

		// Create converters map with lowercased keys
		if ( dataTypes[ 1 ] ) {
			for ( conv in s.converters ) {
				converters[ conv.toLowerCase() ] = s.converters[ conv ];
			}
		}

		current = dataTypes.shift();

		// Convert to each sequential dataType
		while ( current ) {

			if ( s.responseFields[ current ] ) {
				jqXHR[ s.responseFields[ current ] ] = response;
			}

			// Apply the dataFilter if provided
			if ( !prev && isSuccess && s.dataFilter ) {
				response = s.dataFilter( response, s.dataType );
			}

			prev = current;
			current = dataTypes.shift();

			if ( current ) {

				// There's only work to do if current dataType is non-auto
				if ( current === "*" ) {

					current = prev;

				// Convert response if prev dataType is non-auto and differs from current
				} else if ( prev !== "*" && prev !== current ) {

					// Seek a direct converter
					conv = converters[ prev + " " + current ] || converters[ "* " + current ];

					// If none found, seek a pair
					if ( !conv ) {
						for ( conv2 in converters ) {

							// If conv2 outputs current
							tmp = conv2.split( " " );
							if ( tmp[ 1 ] === current ) {

								// If prev can be converted to accepted input
								conv = converters[ prev + " " + tmp[ 0 ] ] ||
									converters[ "* " + tmp[ 0 ] ];
								if ( conv ) {

									// Condense equivalence converters
									if ( conv === true ) {
										conv = converters[ conv2 ];

									// Otherwise, insert the intermediate dataType
									} else if ( converters[ conv2 ] !== true ) {
										current = tmp[ 0 ];
										dataTypes.unshift( tmp[ 1 ] );
									}
									break;
								}
							}
						}
					}

					// Apply converter (if not an equivalence)
					if ( conv !== true ) {

						// Unless errors are allowed to bubble, catch and return them
						if ( conv && s.throws ) {
							response = conv( response );
						} else {
							try {
								response = conv( response );
							} catch ( e ) {
								return {
									state: "parsererror",
									error: conv ? e : "No conversion from " + prev + " to " + current
								};
							}
						}
					}
				}
			}
		}

		return { state: "success", data: response };
	}

	jQuery.extend( {

		// Counter for holding the number of active queries
		active: 0,

		// Last-Modified header cache for next request
		lastModified: {},
		etag: {},

		ajaxSettings: {
			url: location.href,
			type: "GET",
			isLocal: rlocalProtocol.test( location.protocol ),
			global: true,
			processData: true,
			async: true,
			contentType: "application/x-www-form-urlencoded; charset=UTF-8",

			/*
			timeout: 0,
			data: null,
			dataType: null,
			username: null,
			password: null,
			cache: null,
			throws: false,
			traditional: false,
			headers: {},
			*/

			accepts: {
				"*": allTypes,
				text: "text/plain",
				html: "text/html",
				xml: "application/xml, text/xml",
				json: "application/json, text/javascript"
			},

			contents: {
				xml: /\bxml\b/,
				html: /\bhtml/,
				json: /\bjson\b/
			},

			responseFields: {
				xml: "responseXML",
				text: "responseText",
				json: "responseJSON"
			},

			// Data converters
			// Keys separate source (or catchall "*") and destination types with a single space
			converters: {

				// Convert anything to text
				"* text": String,

				// Text to html (true = no transformation)
				"text html": true,

				// Evaluate text as a json expression
				"text json": JSON.parse,

				// Parse text as xml
				"text xml": jQuery.parseXML
			},

			// For options that shouldn't be deep extended:
			// you can add your own custom options here if
			// and when you create one that shouldn't be
			// deep extended (see ajaxExtend)
			flatOptions: {
				url: true,
				context: true
			}
		},

		// Creates a full fledged settings object into target
		// with both ajaxSettings and settings fields.
		// If target is omitted, writes into ajaxSettings.
		ajaxSetup: function( target, settings ) {
			return settings ?

				// Building a settings object
				ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

				// Extending ajaxSettings
				ajaxExtend( jQuery.ajaxSettings, target );
		},

		ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
		ajaxTransport: addToPrefiltersOrTransports( transports ),

		// Main method
		ajax: function( url, options ) {

			// If url is an object, simulate pre-1.5 signature
			if ( typeof url === "object" ) {
				options = url;
				url = undefined;
			}

			// Force options to be an object
			options = options || {};

			var transport,

				// URL without anti-cache param
				cacheURL,

				// Response headers
				responseHeadersString,
				responseHeaders,

				// timeout handle
				timeoutTimer,

				// Url cleanup var
				urlAnchor,

				// Request state (becomes false upon send and true upon completion)
				completed,

				// To know if global events are to be dispatched
				fireGlobals,

				// Loop variable
				i,

				// uncached part of the url
				uncached,

				// Create the final options object
				s = jQuery.ajaxSetup( {}, options ),

				// Callbacks context
				callbackContext = s.context || s,

				// Context for global events is callbackContext if it is a DOM node or jQuery collection
				globalEventContext = s.context &&
					( callbackContext.nodeType || callbackContext.jquery ) ?
						jQuery( callbackContext ) :
						jQuery.event,

				// Deferreds
				deferred = jQuery.Deferred(),
				completeDeferred = jQuery.Callbacks( "once memory" ),

				// Status-dependent callbacks
				statusCode = s.statusCode || {},

				// Headers (they are sent all at once)
				requestHeaders = {},
				requestHeadersNames = {},

				// Default abort message
				strAbort = "canceled",

				// Fake xhr
				jqXHR = {
					readyState: 0,

					// Builds headers hashtable if needed
					getResponseHeader: function( key ) {
						var match;
						if ( completed ) {
							if ( !responseHeaders ) {
								responseHeaders = {};
								while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
									responseHeaders[ match[ 1 ].toLowerCase() + " " ] =
										( responseHeaders[ match[ 1 ].toLowerCase() + " " ] || [] )
											.concat( match[ 2 ] );
								}
							}
							match = responseHeaders[ key.toLowerCase() + " " ];
						}
						return match == null ? null : match.join( ", " );
					},

					// Raw string
					getAllResponseHeaders: function() {
						return completed ? responseHeadersString : null;
					},

					// Caches the header
					setRequestHeader: function( name, value ) {
						if ( completed == null ) {
							name = requestHeadersNames[ name.toLowerCase() ] =
								requestHeadersNames[ name.toLowerCase() ] || name;
							requestHeaders[ name ] = value;
						}
						return this;
					},

					// Overrides response content-type header
					overrideMimeType: function( type ) {
						if ( completed == null ) {
							s.mimeType = type;
						}
						return this;
					},

					// Status-dependent callbacks
					statusCode: function( map ) {
						var code;
						if ( map ) {
							if ( completed ) {

								// Execute the appropriate callbacks
								jqXHR.always( map[ jqXHR.status ] );
							} else {

								// Lazy-add the new callbacks in a way that preserves old ones
								for ( code in map ) {
									statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
								}
							}
						}
						return this;
					},

					// Cancel the request
					abort: function( statusText ) {
						var finalText = statusText || strAbort;
						if ( transport ) {
							transport.abort( finalText );
						}
						done( 0, finalText );
						return this;
					}
				};

			// Attach deferreds
			deferred.promise( jqXHR );

			// Add protocol if not provided (prefilters might expect it)
			// Handle falsy url in the settings object (#10093: consistency with old signature)
			// We also use the url parameter if available
			s.url = ( ( url || s.url || location.href ) + "" )
				.replace( rprotocol, location.protocol + "//" );

			// Alias method option to type as per ticket #12004
			s.type = options.method || options.type || s.method || s.type;

			// Extract dataTypes list
			s.dataTypes = ( s.dataType || "*" ).toLowerCase().match( rnothtmlwhite ) || [ "" ];

			// A cross-domain request is in order when the origin doesn't match the current origin.
			if ( s.crossDomain == null ) {
				urlAnchor = document.createElement( "a" );

				// Support: IE <=8 - 11, Edge 12 - 15
				// IE throws exception on accessing the href property if url is malformed,
				// e.g. http://example.com:80x/
				try {
					urlAnchor.href = s.url;

					// Support: IE <=8 - 11 only
					// Anchor's host property isn't correctly set when s.url is relative
					urlAnchor.href = urlAnchor.href;
					s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==
						urlAnchor.protocol + "//" + urlAnchor.host;
				} catch ( e ) {

					// If there is an error parsing the URL, assume it is crossDomain,
					// it can be rejected by the transport if it is invalid
					s.crossDomain = true;
				}
			}

			// Convert data if not already a string
			if ( s.data && s.processData && typeof s.data !== "string" ) {
				s.data = jQuery.param( s.data, s.traditional );
			}

			// Apply prefilters
			inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

			// If request was aborted inside a prefilter, stop there
			if ( completed ) {
				return jqXHR;
			}

			// We can fire global events as of now if asked to
			// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
			fireGlobals = jQuery.event && s.global;

			// Watch for a new set of requests
			if ( fireGlobals && jQuery.active++ === 0 ) {
				jQuery.event.trigger( "ajaxStart" );
			}

			// Uppercase the type
			s.type = s.type.toUpperCase();

			// Determine if request has content
			s.hasContent = !rnoContent.test( s.type );

			// Save the URL in case we're toying with the If-Modified-Since
			// and/or If-None-Match header later on
			// Remove hash to simplify url manipulation
			cacheURL = s.url.replace( rhash, "" );

			// More options handling for requests with no content
			if ( !s.hasContent ) {

				// Remember the hash so we can put it back
				uncached = s.url.slice( cacheURL.length );

				// If data is available and should be processed, append data to url
				if ( s.data && ( s.processData || typeof s.data === "string" ) ) {
					cacheURL += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data;

					// #9682: remove data so that it's not used in an eventual retry
					delete s.data;
				}

				// Add or update anti-cache param if needed
				if ( s.cache === false ) {
					cacheURL = cacheURL.replace( rantiCache, "$1" );
					uncached = ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + ( nonce++ ) + uncached;
				}

				// Put hash and anti-cache on the URL that will be requested (gh-1732)
				s.url = cacheURL + uncached;

			// Change '%20' to '+' if this is encoded form body content (gh-2658)
			} else if ( s.data && s.processData &&
				( s.contentType || "" ).indexOf( "application/x-www-form-urlencoded" ) === 0 ) {
				s.data = s.data.replace( r20, "+" );
			}

			// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
			if ( s.ifModified ) {
				if ( jQuery.lastModified[ cacheURL ] ) {
					jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
				}
				if ( jQuery.etag[ cacheURL ] ) {
					jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
				}
			}

			// Set the correct header, if data is being sent
			if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
				jqXHR.setRequestHeader( "Content-Type", s.contentType );
			}

			// Set the Accepts header for the server, depending on the dataType
			jqXHR.setRequestHeader(
				"Accept",
				s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
					s.accepts[ s.dataTypes[ 0 ] ] +
						( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
					s.accepts[ "*" ]
			);

			// Check for headers option
			for ( i in s.headers ) {
				jqXHR.setRequestHeader( i, s.headers[ i ] );
			}

			// Allow custom headers/mimetypes and early abort
			if ( s.beforeSend &&
				( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {

				// Abort if not done already and return
				return jqXHR.abort();
			}

			// Aborting is no longer a cancellation
			strAbort = "abort";

			// Install callbacks on deferreds
			completeDeferred.add( s.complete );
			jqXHR.done( s.success );
			jqXHR.fail( s.error );

			// Get transport
			transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

			// If no transport, we auto-abort
			if ( !transport ) {
				done( -1, "No Transport" );
			} else {
				jqXHR.readyState = 1;

				// Send global event
				if ( fireGlobals ) {
					globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
				}

				// If request was aborted inside ajaxSend, stop there
				if ( completed ) {
					return jqXHR;
				}

				// Timeout
				if ( s.async && s.timeout > 0 ) {
					timeoutTimer = window.setTimeout( function() {
						jqXHR.abort( "timeout" );
					}, s.timeout );
				}

				try {
					completed = false;
					transport.send( requestHeaders, done );
				} catch ( e ) {

					// Rethrow post-completion exceptions
					if ( completed ) {
						throw e;
					}

					// Propagate others as results
					done( -1, e );
				}
			}

			// Callback for when everything is done
			function done( status, nativeStatusText, responses, headers ) {
				var isSuccess, success, error, response, modified,
					statusText = nativeStatusText;

				// Ignore repeat invocations
				if ( completed ) {
					return;
				}

				completed = true;

				// Clear timeout if it exists
				if ( timeoutTimer ) {
					window.clearTimeout( timeoutTimer );
				}

				// Dereference transport for early garbage collection
				// (no matter how long the jqXHR object will be used)
				transport = undefined;

				// Cache response headers
				responseHeadersString = headers || "";

				// Set readyState
				jqXHR.readyState = status > 0 ? 4 : 0;

				// Determine if successful
				isSuccess = status >= 200 && status < 300 || status === 304;

				// Get response data
				if ( responses ) {
					response = ajaxHandleResponses( s, jqXHR, responses );
				}

				// Convert no matter what (that way responseXXX fields are always set)
				response = ajaxConvert( s, response, jqXHR, isSuccess );

				// If successful, handle type chaining
				if ( isSuccess ) {

					// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
					if ( s.ifModified ) {
						modified = jqXHR.getResponseHeader( "Last-Modified" );
						if ( modified ) {
							jQuery.lastModified[ cacheURL ] = modified;
						}
						modified = jqXHR.getResponseHeader( "etag" );
						if ( modified ) {
							jQuery.etag[ cacheURL ] = modified;
						}
					}

					// if no content
					if ( status === 204 || s.type === "HEAD" ) {
						statusText = "nocontent";

					// if not modified
					} else if ( status === 304 ) {
						statusText = "notmodified";

					// If we have data, let's convert it
					} else {
						statusText = response.state;
						success = response.data;
						error = response.error;
						isSuccess = !error;
					}
				} else {

					// Extract error from statusText and normalize for non-aborts
					error = statusText;
					if ( status || !statusText ) {
						statusText = "error";
						if ( status < 0 ) {
							status = 0;
						}
					}
				}

				// Set data for the fake xhr object
				jqXHR.status = status;
				jqXHR.statusText = ( nativeStatusText || statusText ) + "";

				// Success/Error
				if ( isSuccess ) {
					deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
				} else {
					deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
				}

				// Status-dependent callbacks
				jqXHR.statusCode( statusCode );
				statusCode = undefined;

				if ( fireGlobals ) {
					globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
						[ jqXHR, s, isSuccess ? success : error ] );
				}

				// Complete
				completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

				if ( fireGlobals ) {
					globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );

					// Handle the global AJAX counter
					if ( !( --jQuery.active ) ) {
						jQuery.event.trigger( "ajaxStop" );
					}
				}
			}

			return jqXHR;
		},

		getJSON: function( url, data, callback ) {
			return jQuery.get( url, data, callback, "json" );
		},

		getScript: function( url, callback ) {
			return jQuery.get( url, undefined, callback, "script" );
		}
	} );

	jQuery.each( [ "get", "post" ], function( i, method ) {
		jQuery[ method ] = function( url, data, callback, type ) {

			// Shift arguments if data argument was omitted
			if ( isFunction( data ) ) {
				type = type || callback;
				callback = data;
				data = undefined;
			}

			// The url can be an options object (which then must have .url)
			return jQuery.ajax( jQuery.extend( {
				url: url,
				type: method,
				dataType: type,
				data: data,
				success: callback
			}, jQuery.isPlainObject( url ) && url ) );
		};
	} );


	jQuery._evalUrl = function( url, options ) {
		return jQuery.ajax( {
			url: url,

			// Make this explicit, since user can override this through ajaxSetup (#11264)
			type: "GET",
			dataType: "script",
			cache: true,
			async: false,
			global: false,

			// Only evaluate the response if it is successful (gh-4126)
			// dataFilter is not invoked for failure responses, so using it instead
			// of the default converter is kludgy but it works.
			converters: {
				"text script": function() {}
			},
			dataFilter: function( response ) {
				jQuery.globalEval( response, options );
			}
		} );
	};


	jQuery.fn.extend( {
		wrapAll: function( html ) {
			var wrap;

			if ( this[ 0 ] ) {
				if ( isFunction( html ) ) {
					html = html.call( this[ 0 ] );
				}

				// The elements to wrap the target around
				wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

				if ( this[ 0 ].parentNode ) {
					wrap.insertBefore( this[ 0 ] );
				}

				wrap.map( function() {
					var elem = this;

					while ( elem.firstElementChild ) {
						elem = elem.firstElementChild;
					}

					return elem;
				} ).append( this );
			}

			return this;
		},

		wrapInner: function( html ) {
			if ( isFunction( html ) ) {
				return this.each( function( i ) {
					jQuery( this ).wrapInner( html.call( this, i ) );
				} );
			}

			return this.each( function() {
				var self = jQuery( this ),
					contents = self.contents();

				if ( contents.length ) {
					contents.wrapAll( html );

				} else {
					self.append( html );
				}
			} );
		},

		wrap: function( html ) {
			var htmlIsFunction = isFunction( html );

			return this.each( function( i ) {
				jQuery( this ).wrapAll( htmlIsFunction ? html.call( this, i ) : html );
			} );
		},

		unwrap: function( selector ) {
			this.parent( selector ).not( "body" ).each( function() {
				jQuery( this ).replaceWith( this.childNodes );
			} );
			return this;
		}
	} );


	jQuery.expr.pseudos.hidden = function( elem ) {
		return !jQuery.expr.pseudos.visible( elem );
	};
	jQuery.expr.pseudos.visible = function( elem ) {
		return !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );
	};




	jQuery.ajaxSettings.xhr = function() {
		try {
			return new window.XMLHttpRequest();
		} catch ( e ) {}
	};

	var xhrSuccessStatus = {

			// File protocol always yields status code 0, assume 200
			0: 200,

			// Support: IE <=9 only
			// #1450: sometimes IE returns 1223 when it should be 204
			1223: 204
		},
		xhrSupported = jQuery.ajaxSettings.xhr();

	support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
	support.ajax = xhrSupported = !!xhrSupported;

	jQuery.ajaxTransport( function( options ) {
		var callback, errorCallback;

		// Cross domain only allowed if supported through XMLHttpRequest
		if ( support.cors || xhrSupported && !options.crossDomain ) {
			return {
				send: function( headers, complete ) {
					var i,
						xhr = options.xhr();

					xhr.open(
						options.type,
						options.url,
						options.async,
						options.username,
						options.password
					);

					// Apply custom fields if provided
					if ( options.xhrFields ) {
						for ( i in options.xhrFields ) {
							xhr[ i ] = options.xhrFields[ i ];
						}
					}

					// Override mime type if needed
					if ( options.mimeType && xhr.overrideMimeType ) {
						xhr.overrideMimeType( options.mimeType );
					}

					// X-Requested-With header
					// For cross-domain requests, seeing as conditions for a preflight are
					// akin to a jigsaw puzzle, we simply never set it to be sure.
					// (it can always be set on a per-request basis or even using ajaxSetup)
					// For same-domain requests, won't change header if already provided.
					if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
						headers[ "X-Requested-With" ] = "XMLHttpRequest";
					}

					// Set headers
					for ( i in headers ) {
						xhr.setRequestHeader( i, headers[ i ] );
					}

					// Callback
					callback = function( type ) {
						return function() {
							if ( callback ) {
								callback = errorCallback = xhr.onload =
									xhr.onerror = xhr.onabort = xhr.ontimeout =
										xhr.onreadystatechange = null;

								if ( type === "abort" ) {
									xhr.abort();
								} else if ( type === "error" ) {

									// Support: IE <=9 only
									// On a manual native abort, IE9 throws
									// errors on any property access that is not readyState
									if ( typeof xhr.status !== "number" ) {
										complete( 0, "error" );
									} else {
										complete(

											// File: protocol always yields status 0; see #8605, #14207
											xhr.status,
											xhr.statusText
										);
									}
								} else {
									complete(
										xhrSuccessStatus[ xhr.status ] || xhr.status,
										xhr.statusText,

										// Support: IE <=9 only
										// IE9 has no XHR2 but throws on binary (trac-11426)
										// For XHR2 non-text, let the caller handle it (gh-2498)
										( xhr.responseType || "text" ) !== "text"  ||
										typeof xhr.responseText !== "string" ?
											{ binary: xhr.response } :
											{ text: xhr.responseText },
										xhr.getAllResponseHeaders()
									);
								}
							}
						};
					};

					// Listen to events
					xhr.onload = callback();
					errorCallback = xhr.onerror = xhr.ontimeout = callback( "error" );

					// Support: IE 9 only
					// Use onreadystatechange to replace onabort
					// to handle uncaught aborts
					if ( xhr.onabort !== undefined ) {
						xhr.onabort = errorCallback;
					} else {
						xhr.onreadystatechange = function() {

							// Check readyState before timeout as it changes
							if ( xhr.readyState === 4 ) {

								// Allow onerror to be called first,
								// but that will not handle a native abort
								// Also, save errorCallback to a variable
								// as xhr.onerror cannot be accessed
								window.setTimeout( function() {
									if ( callback ) {
										errorCallback();
									}
								} );
							}
						};
					}

					// Create the abort callback
					callback = callback( "abort" );

					try {

						// Do send the request (this may raise an exception)
						xhr.send( options.hasContent && options.data || null );
					} catch ( e ) {

						// #14683: Only rethrow if this hasn't been notified as an error yet
						if ( callback ) {
							throw e;
						}
					}
				},

				abort: function() {
					if ( callback ) {
						callback();
					}
				}
			};
		}
	} );




	// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
	jQuery.ajaxPrefilter( function( s ) {
		if ( s.crossDomain ) {
			s.contents.script = false;
		}
	} );

	// Install script dataType
	jQuery.ajaxSetup( {
		accepts: {
			script: "text/javascript, application/javascript, " +
				"application/ecmascript, application/x-ecmascript"
		},
		contents: {
			script: /\b(?:java|ecma)script\b/
		},
		converters: {
			"text script": function( text ) {
				jQuery.globalEval( text );
				return text;
			}
		}
	} );

	// Handle cache's special case and crossDomain
	jQuery.ajaxPrefilter( "script", function( s ) {
		if ( s.cache === undefined ) {
			s.cache = false;
		}
		if ( s.crossDomain ) {
			s.type = "GET";
		}
	} );

	// Bind script tag hack transport
	jQuery.ajaxTransport( "script", function( s ) {

		// This transport only deals with cross domain or forced-by-attrs requests
		if ( s.crossDomain || s.scriptAttrs ) {
			var script, callback;
			return {
				send: function( _, complete ) {
					script = jQuery( "<script>" )
						.attr( s.scriptAttrs || {} )
						.prop( { charset: s.scriptCharset, src: s.url } )
						.on( "load error", callback = function( evt ) {
							script.remove();
							callback = null;
							if ( evt ) {
								complete( evt.type === "error" ? 404 : 200, evt.type );
							}
						} );

					// Use native DOM manipulation to avoid our domManip AJAX trickery
					document.head.appendChild( script[ 0 ] );
				},
				abort: function() {
					if ( callback ) {
						callback();
					}
				}
			};
		}
	} );




	var oldCallbacks = [],
		rjsonp = /(=)\?(?=&|$)|\?\?/;

	// Default jsonp settings
	jQuery.ajaxSetup( {
		jsonp: "callback",
		jsonpCallback: function() {
			var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
			this[ callback ] = true;
			return callback;
		}
	} );

	// Detect, normalize options and install callbacks for jsonp requests
	jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

		var callbackName, overwritten, responseContainer,
			jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
				"url" :
				typeof s.data === "string" &&
					( s.contentType || "" )
						.indexOf( "application/x-www-form-urlencoded" ) === 0 &&
					rjsonp.test( s.data ) && "data"
			);

		// Handle iff the expected data type is "jsonp" or we have a parameter to set
		if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

			// Get callback name, remembering preexisting value associated with it
			callbackName = s.jsonpCallback = isFunction( s.jsonpCallback ) ?
				s.jsonpCallback() :
				s.jsonpCallback;

			// Insert callback into url or form data
			if ( jsonProp ) {
				s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
			} else if ( s.jsonp !== false ) {
				s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
			}

			// Use data converter to retrieve json after script execution
			s.converters[ "script json" ] = function() {
				if ( !responseContainer ) {
					jQuery.error( callbackName + " was not called" );
				}
				return responseContainer[ 0 ];
			};

			// Force json dataType
			s.dataTypes[ 0 ] = "json";

			// Install callback
			overwritten = window[ callbackName ];
			window[ callbackName ] = function() {
				responseContainer = arguments;
			};

			// Clean-up function (fires after converters)
			jqXHR.always( function() {

				// If previous value didn't exist - remove it
				if ( overwritten === undefined ) {
					jQuery( window ).removeProp( callbackName );

				// Otherwise restore preexisting value
				} else {
					window[ callbackName ] = overwritten;
				}

				// Save back as free
				if ( s[ callbackName ] ) {

					// Make sure that re-using the options doesn't screw things around
					s.jsonpCallback = originalSettings.jsonpCallback;

					// Save the callback name for future use
					oldCallbacks.push( callbackName );
				}

				// Call if it was a function and we have a response
				if ( responseContainer && isFunction( overwritten ) ) {
					overwritten( responseContainer[ 0 ] );
				}

				responseContainer = overwritten = undefined;
			} );

			// Delegate to script
			return "script";
		}
	} );




	// Support: Safari 8 only
	// In Safari 8 documents created via document.implementation.createHTMLDocument
	// collapse sibling forms: the second one becomes a child of the first one.
	// Because of that, this security measure has to be disabled in Safari 8.
	// https://bugs.webkit.org/show_bug.cgi?id=137337
	support.createHTMLDocument = ( function() {
		var body = document.implementation.createHTMLDocument( "" ).body;
		body.innerHTML = "<form></form><form></form>";
		return body.childNodes.length === 2;
	} )();


	// Argument "data" should be string of html
	// context (optional): If specified, the fragment will be created in this context,
	// defaults to document
	// keepScripts (optional): If true, will include scripts passed in the html string
	jQuery.parseHTML = function( data, context, keepScripts ) {
		if ( typeof data !== "string" ) {
			return [];
		}
		if ( typeof context === "boolean" ) {
			keepScripts = context;
			context = false;
		}

		var base, parsed, scripts;

		if ( !context ) {

			// Stop scripts or inline event handlers from being executed immediately
			// by using document.implementation
			if ( support.createHTMLDocument ) {
				context = document.implementation.createHTMLDocument( "" );

				// Set the base href for the created document
				// so any parsed elements with URLs
				// are based on the document's URL (gh-2965)
				base = context.createElement( "base" );
				base.href = document.location.href;
				context.head.appendChild( base );
			} else {
				context = document;
			}
		}

		parsed = rsingleTag.exec( data );
		scripts = !keepScripts && [];

		// Single tag
		if ( parsed ) {
			return [ context.createElement( parsed[ 1 ] ) ];
		}

		parsed = buildFragment( [ data ], context, scripts );

		if ( scripts && scripts.length ) {
			jQuery( scripts ).remove();
		}

		return jQuery.merge( [], parsed.childNodes );
	};


	/**
	 * Load a url into a page
	 */
	jQuery.fn.load = function( url, params, callback ) {
		var selector, type, response,
			self = this,
			off = url.indexOf( " " );

		if ( off > -1 ) {
			selector = stripAndCollapse( url.slice( off ) );
			url = url.slice( 0, off );
		}

		// If it's a function
		if ( isFunction( params ) ) {

			// We assume that it's the callback
			callback = params;
			params = undefined;

		// Otherwise, build a param string
		} else if ( params && typeof params === "object" ) {
			type = "POST";
		}

		// If we have elements to modify, make the request
		if ( self.length > 0 ) {
			jQuery.ajax( {
				url: url,

				// If "type" variable is undefined, then "GET" method will be used.
				// Make value of this field explicit since
				// user can override it through ajaxSetup method
				type: type || "GET",
				dataType: "html",
				data: params
			} ).done( function( responseText ) {

				// Save response for use in complete callback
				response = arguments;

				self.html( selector ?

					// If a selector was specified, locate the right elements in a dummy div
					// Exclude scripts to avoid IE 'Permission Denied' errors
					jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :

					// Otherwise use the full result
					responseText );

			// If the request succeeds, this function gets "data", "status", "jqXHR"
			// but they are ignored because response was set above.
			// If it fails, this function gets "jqXHR", "status", "error"
			} ).always( callback && function( jqXHR, status ) {
				self.each( function() {
					callback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );
				} );
			} );
		}

		return this;
	};




	// Attach a bunch of functions for handling common AJAX events
	jQuery.each( [
		"ajaxStart",
		"ajaxStop",
		"ajaxComplete",
		"ajaxError",
		"ajaxSuccess",
		"ajaxSend"
	], function( i, type ) {
		jQuery.fn[ type ] = function( fn ) {
			return this.on( type, fn );
		};
	} );




	jQuery.expr.pseudos.animated = function( elem ) {
		return jQuery.grep( jQuery.timers, function( fn ) {
			return elem === fn.elem;
		} ).length;
	};




	jQuery.offset = {
		setOffset: function( elem, options, i ) {
			var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
				position = jQuery.css( elem, "position" ),
				curElem = jQuery( elem ),
				props = {};

			// Set position first, in-case top/left are set even on static elem
			if ( position === "static" ) {
				elem.style.position = "relative";
			}

			curOffset = curElem.offset();
			curCSSTop = jQuery.css( elem, "top" );
			curCSSLeft = jQuery.css( elem, "left" );
			calculatePosition = ( position === "absolute" || position === "fixed" ) &&
				( curCSSTop + curCSSLeft ).indexOf( "auto" ) > -1;

			// Need to be able to calculate position if either
			// top or left is auto and position is either absolute or fixed
			if ( calculatePosition ) {
				curPosition = curElem.position();
				curTop = curPosition.top;
				curLeft = curPosition.left;

			} else {
				curTop = parseFloat( curCSSTop ) || 0;
				curLeft = parseFloat( curCSSLeft ) || 0;
			}

			if ( isFunction( options ) ) {

				// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
				options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
			}

			if ( options.top != null ) {
				props.top = ( options.top - curOffset.top ) + curTop;
			}
			if ( options.left != null ) {
				props.left = ( options.left - curOffset.left ) + curLeft;
			}

			if ( "using" in options ) {
				options.using.call( elem, props );

			} else {
				curElem.css( props );
			}
		}
	};

	jQuery.fn.extend( {

		// offset() relates an element's border box to the document origin
		offset: function( options ) {

			// Preserve chaining for setter
			if ( arguments.length ) {
				return options === undefined ?
					this :
					this.each( function( i ) {
						jQuery.offset.setOffset( this, options, i );
					} );
			}

			var rect, win,
				elem = this[ 0 ];

			if ( !elem ) {
				return;
			}

			// Return zeros for disconnected and hidden (display: none) elements (gh-2310)
			// Support: IE <=11 only
			// Running getBoundingClientRect on a
			// disconnected node in IE throws an error
			if ( !elem.getClientRects().length ) {
				return { top: 0, left: 0 };
			}

			// Get document-relative position by adding viewport scroll to viewport-relative gBCR
			rect = elem.getBoundingClientRect();
			win = elem.ownerDocument.defaultView;
			return {
				top: rect.top + win.pageYOffset,
				left: rect.left + win.pageXOffset
			};
		},

		// position() relates an element's margin box to its offset parent's padding box
		// This corresponds to the behavior of CSS absolute positioning
		position: function() {
			if ( !this[ 0 ] ) {
				return;
			}

			var offsetParent, offset, doc,
				elem = this[ 0 ],
				parentOffset = { top: 0, left: 0 };

			// position:fixed elements are offset from the viewport, which itself always has zero offset
			if ( jQuery.css( elem, "position" ) === "fixed" ) {

				// Assume position:fixed implies availability of getBoundingClientRect
				offset = elem.getBoundingClientRect();

			} else {
				offset = this.offset();

				// Account for the *real* offset parent, which can be the document or its root element
				// when a statically positioned element is identified
				doc = elem.ownerDocument;
				offsetParent = elem.offsetParent || doc.documentElement;
				while ( offsetParent &&
					( offsetParent === doc.body || offsetParent === doc.documentElement ) &&
					jQuery.css( offsetParent, "position" ) === "static" ) {

					offsetParent = offsetParent.parentNode;
				}
				if ( offsetParent && offsetParent !== elem && offsetParent.nodeType === 1 ) {

					// Incorporate borders into its offset, since they are outside its content origin
					parentOffset = jQuery( offsetParent ).offset();
					parentOffset.top += jQuery.css( offsetParent, "borderTopWidth", true );
					parentOffset.left += jQuery.css( offsetParent, "borderLeftWidth", true );
				}
			}

			// Subtract parent offsets and element margins
			return {
				top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
				left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
			};
		},

		// This method will return documentElement in the following cases:
		// 1) For the element inside the iframe without offsetParent, this method will return
		//    documentElement of the parent window
		// 2) For the hidden or detached element
		// 3) For body or html element, i.e. in case of the html node - it will return itself
		//
		// but those exceptions were never presented as a real life use-cases
		// and might be considered as more preferable results.
		//
		// This logic, however, is not guaranteed and can change at any point in the future
		offsetParent: function() {
			return this.map( function() {
				var offsetParent = this.offsetParent;

				while ( offsetParent && jQuery.css( offsetParent, "position" ) === "static" ) {
					offsetParent = offsetParent.offsetParent;
				}

				return offsetParent || documentElement;
			} );
		}
	} );

	// Create scrollLeft and scrollTop methods
	jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
		var top = "pageYOffset" === prop;

		jQuery.fn[ method ] = function( val ) {
			return access( this, function( elem, method, val ) {

				// Coalesce documents and windows
				var win;
				if ( isWindow( elem ) ) {
					win = elem;
				} else if ( elem.nodeType === 9 ) {
					win = elem.defaultView;
				}

				if ( val === undefined ) {
					return win ? win[ prop ] : elem[ method ];
				}

				if ( win ) {
					win.scrollTo(
						!top ? val : win.pageXOffset,
						top ? val : win.pageYOffset
					);

				} else {
					elem[ method ] = val;
				}
			}, method, val, arguments.length );
		};
	} );

	// Support: Safari <=7 - 9.1, Chrome <=37 - 49
	// Add the top/left cssHooks using jQuery.fn.position
	// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
	// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
	// getComputedStyle returns percent when specified for top/left/bottom/right;
	// rather than make the css module depend on the offset module, just check for it here
	jQuery.each( [ "top", "left" ], function( i, prop ) {
		jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
			function( elem, computed ) {
				if ( computed ) {
					computed = curCSS( elem, prop );

					// If curCSS returns percentage, fallback to offset
					return rnumnonpx.test( computed ) ?
						jQuery( elem ).position()[ prop ] + "px" :
						computed;
				}
			}
		);
	} );


	// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
	jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
		jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name },
			function( defaultExtra, funcName ) {

			// Margin is only for outerHeight, outerWidth
			jQuery.fn[ funcName ] = function( margin, value ) {
				var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
					extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

				return access( this, function( elem, type, value ) {
					var doc;

					if ( isWindow( elem ) ) {

						// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
						return funcName.indexOf( "outer" ) === 0 ?
							elem[ "inner" + name ] :
							elem.document.documentElement[ "client" + name ];
					}

					// Get document width or height
					if ( elem.nodeType === 9 ) {
						doc = elem.documentElement;

						// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
						// whichever is greatest
						return Math.max(
							elem.body[ "scroll" + name ], doc[ "scroll" + name ],
							elem.body[ "offset" + name ], doc[ "offset" + name ],
							doc[ "client" + name ]
						);
					}

					return value === undefined ?

						// Get width or height on the element, requesting but not forcing parseFloat
						jQuery.css( elem, type, extra ) :

						// Set width or height on the element
						jQuery.style( elem, type, value, extra );
				}, type, chainable ? margin : undefined, chainable );
			};
		} );
	} );


	jQuery.each( ( "blur focus focusin focusout resize scroll click dblclick " +
		"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
		"change select submit keydown keypress keyup contextmenu" ).split( " " ),
		function( i, name ) {

		// Handle event binding
		jQuery.fn[ name ] = function( data, fn ) {
			return arguments.length > 0 ?
				this.on( name, null, data, fn ) :
				this.trigger( name );
		};
	} );

	jQuery.fn.extend( {
		hover: function( fnOver, fnOut ) {
			return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
		}
	} );




	jQuery.fn.extend( {

		bind: function( types, data, fn ) {
			return this.on( types, null, data, fn );
		},
		unbind: function( types, fn ) {
			return this.off( types, null, fn );
		},

		delegate: function( selector, types, data, fn ) {
			return this.on( types, selector, data, fn );
		},
		undelegate: function( selector, types, fn ) {

			// ( namespace ) or ( selector, types [, fn] )
			return arguments.length === 1 ?
				this.off( selector, "**" ) :
				this.off( types, selector || "**", fn );
		}
	} );

	// Bind a function to a context, optionally partially applying any
	// arguments.
	// jQuery.proxy is deprecated to promote standards (specifically Function#bind)
	// However, it is not slated for removal any time soon
	jQuery.proxy = function( fn, context ) {
		var tmp, args, proxy;

		if ( typeof context === "string" ) {
			tmp = fn[ context ];
			context = fn;
			fn = tmp;
		}

		// Quick check to determine if target is callable, in the spec
		// this throws a TypeError, but we will just return undefined.
		if ( !isFunction( fn ) ) {
			return undefined;
		}

		// Simulated bind
		args = slice.call( arguments, 2 );
		proxy = function() {
			return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
		};

		// Set the guid of unique handler to the same of original handler, so it can be removed
		proxy.guid = fn.guid = fn.guid || jQuery.guid++;

		return proxy;
	};

	jQuery.holdReady = function( hold ) {
		if ( hold ) {
			jQuery.readyWait++;
		} else {
			jQuery.ready( true );
		}
	};
	jQuery.isArray = Array.isArray;
	jQuery.parseJSON = JSON.parse;
	jQuery.nodeName = nodeName;
	jQuery.isFunction = isFunction;
	jQuery.isWindow = isWindow;
	jQuery.camelCase = camelCase;
	jQuery.type = toType;

	jQuery.now = Date.now;

	jQuery.isNumeric = function( obj ) {

		// As of jQuery 3.0, isNumeric is limited to
		// strings and numbers (primitives or objects)
		// that can be coerced to finite numbers (gh-2662)
		var type = jQuery.type( obj );
		return ( type === "number" || type === "string" ) &&

			// parseFloat NaNs numeric-cast false positives ("")
			// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
			// subtraction forces infinities to NaN
			!isNaN( obj - parseFloat( obj ) );
	};




	// Register as a named AMD module, since jQuery can be concatenated with other
	// files that may use define, but not via a proper concatenation script that
	// understands anonymous AMD modules. A named AMD is safest and most robust
	// way to register. Lowercase jquery is used because AMD module names are
	// derived from file names, and jQuery is normally delivered in a lowercase
	// file name. Do this after creating the global so that if an AMD module wants
	// to call noConflict to hide this version of jQuery, it will work.

	// Note that for maximum portability, libraries that are not jQuery should
	// declare themselves as anonymous modules, and avoid setting a global if an
	// AMD loader is present. jQuery is a special case. For more information, see
	// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

	if ( true ) {
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
			return jQuery;
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	}




	var

		// Map over jQuery in case of overwrite
		_jQuery = window.jQuery,

		// Map over the $ in case of overwrite
		_$ = window.$;

	jQuery.noConflict = function( deep ) {
		if ( window.$ === jQuery ) {
			window.$ = _$;
		}

		if ( deep && window.jQuery === jQuery ) {
			window.jQuery = _jQuery;
		}

		return jQuery;
	};

	// Expose jQuery and $ identifiers, even in AMD
	// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
	// and CommonJS for browser emulators (#13566)
	if ( !noGlobal ) {
		window.jQuery = window.$ = jQuery;
	}




	return jQuery;
	} );


/***/ }),
/* 293 */
/***/ (function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_293__;

/***/ }),
/* 294 */
/***/ (function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_294__;

/***/ }),
/* 295 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(setImmediate) {/**
	 * Copyright (c) 2016-2020, The Cytoscape Consortium.
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy of
	 * this software and associated documentation files (the “Software”), to deal in
	 * the Software without restriction, including without limitation the rights to
	 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
	 * of the Software, and to permit persons to whom the Software is furnished to do
	 * so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in all
	 * copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
	 * SOFTWARE.
	 */

	'use strict';

	function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

	var util = _interopDefault(__webpack_require__(299));
	var Heap = _interopDefault(__webpack_require__(300));

	function _typeof(obj) {
	  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
	    _typeof = function (obj) {
	      return typeof obj;
	    };
	  } else {
	    _typeof = function (obj) {
	      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
	    };
	  }

	  return _typeof(obj);
	}

	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}

	function _defineProperties(target, props) {
	  for (var i = 0; i < props.length; i++) {
	    var descriptor = props[i];
	    descriptor.enumerable = descriptor.enumerable || false;
	    descriptor.configurable = true;
	    if ("value" in descriptor) descriptor.writable = true;
	    Object.defineProperty(target, descriptor.key, descriptor);
	  }
	}

	function _createClass(Constructor, protoProps, staticProps) {
	  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
	  if (staticProps) _defineProperties(Constructor, staticProps);
	  return Constructor;
	}

	function _defineProperty(obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	  } else {
	    obj[key] = value;
	  }

	  return obj;
	}

	function _slicedToArray(arr, i) {
	  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
	}

	function _arrayWithHoles(arr) {
	  if (Array.isArray(arr)) return arr;
	}

	function _iterableToArrayLimit(arr, i) {
	  var _arr = [];
	  var _n = true;
	  var _d = false;
	  var _e = undefined;

	  try {
	    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
	      _arr.push(_s.value);

	      if (i && _arr.length === i) break;
	    }
	  } catch (err) {
	    _d = true;
	    _e = err;
	  } finally {
	    try {
	      if (!_n && _i["return"] != null) _i["return"]();
	    } finally {
	      if (_d) throw _e;
	    }
	  }

	  return _arr;
	}

	function _nonIterableRest() {
	  throw new TypeError("Invalid attempt to destructure non-iterable instance");
	}

	var window$1 = typeof window === 'undefined' ? null : window; // eslint-disable-line no-undef

	var navigator = window$1 ? window$1.navigator : null;
	var document$1 = window$1 ? window$1.document : null;

	var typeofstr = _typeof('');

	var typeofobj = _typeof({});

	var typeoffn = _typeof(function () {});

	var typeofhtmlele = typeof HTMLElement === "undefined" ? "undefined" : _typeof(HTMLElement);

	var instanceStr = function instanceStr(obj) {
	  return obj && obj.instanceString && fn(obj.instanceString) ? obj.instanceString() : null;
	};

	var string = function string(obj) {
	  return obj != null && _typeof(obj) == typeofstr;
	};
	var fn = function fn(obj) {
	  return obj != null && _typeof(obj) === typeoffn;
	};
	var array = function array(obj) {
	  return Array.isArray ? Array.isArray(obj) : obj != null && obj instanceof Array;
	};
	var plainObject = function plainObject(obj) {
	  return obj != null && _typeof(obj) === typeofobj && !array(obj) && obj.constructor === Object;
	};
	var object = function object(obj) {
	  return obj != null && _typeof(obj) === typeofobj;
	};
	var number = function number(obj) {
	  return obj != null && _typeof(obj) === _typeof(1) && !isNaN(obj);
	};
	var integer = function integer(obj) {
	  return number(obj) && Math.floor(obj) === obj;
	};
	var htmlElement = function htmlElement(obj) {
	  if ('undefined' === typeofhtmlele) {
	    return undefined;
	  } else {
	    return null != obj && obj instanceof HTMLElement;
	  }
	};
	var elementOrCollection = function elementOrCollection(obj) {
	  return element(obj) || collection(obj);
	};
	var element = function element(obj) {
	  return instanceStr(obj) === 'collection' && obj._private.single;
	};
	var collection = function collection(obj) {
	  return instanceStr(obj) === 'collection' && !obj._private.single;
	};
	var core = function core(obj) {
	  return instanceStr(obj) === 'core';
	};
	var stylesheet = function stylesheet(obj) {
	  return instanceStr(obj) === 'stylesheet';
	};
	var event = function event(obj) {
	  return instanceStr(obj) === 'event';
	};
	var emptyString = function emptyString(obj) {
	  if (obj === undefined || obj === null) {
	    // null is empty
	    return true;
	  } else if (obj === '' || obj.match(/^\s+$/)) {
	    return true; // empty string is empty
	  }

	  return false; // otherwise, we don't know what we've got
	};
	var domElement = function domElement(obj) {
	  if (typeof HTMLElement === 'undefined') {
	    return false; // we're not in a browser so it doesn't matter
	  } else {
	    return obj instanceof HTMLElement;
	  }
	};
	var boundingBox = function boundingBox(obj) {
	  return plainObject(obj) && number(obj.x1) && number(obj.x2) && number(obj.y1) && number(obj.y2);
	};
	var promise = function promise(obj) {
	  return object(obj) && fn(obj.then);
	};
	var ms = function ms() {
	  return navigator && navigator.userAgent.match(/msie|trident|edge/i);
	}; // probably a better way to detect this...

	var memoize = function memoize(fn, keyFn) {
	  if (!keyFn) {
	    keyFn = function keyFn() {
	      if (arguments.length === 1) {
	        return arguments[0];
	      } else if (arguments.length === 0) {
	        return 'undefined';
	      }

	      var args = [];

	      for (var i = 0; i < arguments.length; i++) {
	        args.push(arguments[i]);
	      }

	      return args.join('$');
	    };
	  }

	  var memoizedFn = function memoizedFn() {
	    var self = this;
	    var args = arguments;
	    var ret;
	    var k = keyFn.apply(self, args);
	    var cache = memoizedFn.cache;

	    if (!(ret = cache[k])) {
	      ret = cache[k] = fn.apply(self, args);
	    }

	    return ret;
	  };

	  memoizedFn.cache = {};
	  return memoizedFn;
	};

	var camel2dash = memoize(function (str) {
	  return str.replace(/([A-Z])/g, function (v) {
	    return '-' + v.toLowerCase();
	  });
	});
	var dash2camel = memoize(function (str) {
	  return str.replace(/(-\w)/g, function (v) {
	    return v[1].toUpperCase();
	  });
	});
	var prependCamel = memoize(function (prefix, str) {
	  return prefix + str[0].toUpperCase() + str.substring(1);
	}, function (prefix, str) {
	  return prefix + '$' + str;
	});
	var capitalize = function capitalize(str) {
	  if (emptyString(str)) {
	    return str;
	  }

	  return str.charAt(0).toUpperCase() + str.substring(1);
	};

	var number$1 = '(?:[-+]?(?:(?:\\d+|\\d*\\.\\d+)(?:[Ee][+-]?\\d+)?))';
	var rgba = 'rgb[a]?\\((' + number$1 + '[%]?)\\s*,\\s*(' + number$1 + '[%]?)\\s*,\\s*(' + number$1 + '[%]?)(?:\\s*,\\s*(' + number$1 + '))?\\)';
	var rgbaNoBackRefs = 'rgb[a]?\\((?:' + number$1 + '[%]?)\\s*,\\s*(?:' + number$1 + '[%]?)\\s*,\\s*(?:' + number$1 + '[%]?)(?:\\s*,\\s*(?:' + number$1 + '))?\\)';
	var hsla = 'hsl[a]?\\((' + number$1 + ')\\s*,\\s*(' + number$1 + '[%])\\s*,\\s*(' + number$1 + '[%])(?:\\s*,\\s*(' + number$1 + '))?\\)';
	var hslaNoBackRefs = 'hsl[a]?\\((?:' + number$1 + ')\\s*,\\s*(?:' + number$1 + '[%])\\s*,\\s*(?:' + number$1 + '[%])(?:\\s*,\\s*(?:' + number$1 + '))?\\)';
	var hex3 = '\\#[0-9a-fA-F]{3}';
	var hex6 = '\\#[0-9a-fA-F]{6}';

	var ascending = function ascending(a, b) {
	  if (a < b) {
	    return -1;
	  } else if (a > b) {
	    return 1;
	  } else {
	    return 0;
	  }
	};
	var descending = function descending(a, b) {
	  return -1 * ascending(a, b);
	};

	var extend = Object.assign != null ? Object.assign.bind(Object) : function (tgt) {
	  var args = arguments;

	  for (var i = 1; i < args.length; i++) {
	    var obj = args[i];

	    if (obj == null) {
	      continue;
	    }

	    var keys = Object.keys(obj);

	    for (var j = 0; j < keys.length; j++) {
	      var k = keys[j];
	      tgt[k] = obj[k];
	    }
	  }

	  return tgt;
	};

	var hex2tuple = function hex2tuple(hex) {
	  if (!(hex.length === 4 || hex.length === 7) || hex[0] !== '#') {
	    return;
	  }

	  var shortHex = hex.length === 4;
	  var r, g, b;
	  var base = 16;

	  if (shortHex) {
	    r = parseInt(hex[1] + hex[1], base);
	    g = parseInt(hex[2] + hex[2], base);
	    b = parseInt(hex[3] + hex[3], base);
	  } else {
	    r = parseInt(hex[1] + hex[2], base);
	    g = parseInt(hex[3] + hex[4], base);
	    b = parseInt(hex[5] + hex[6], base);
	  }

	  return [r, g, b];
	}; // get [r, g, b, a] from hsl(0, 0, 0) or hsla(0, 0, 0, 0)

	var hsl2tuple = function hsl2tuple(hsl) {
	  var ret;
	  var h, s, l, a, r, g, b;

	  function hue2rgb(p, q, t) {
	    if (t < 0) t += 1;
	    if (t > 1) t -= 1;
	    if (t < 1 / 6) return p + (q - p) * 6 * t;
	    if (t < 1 / 2) return q;
	    if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;
	    return p;
	  }

	  var m = new RegExp('^' + hsla + '$').exec(hsl);

	  if (m) {
	    // get hue
	    h = parseInt(m[1]);

	    if (h < 0) {
	      h = (360 - -1 * h % 360) % 360;
	    } else if (h > 360) {
	      h = h % 360;
	    }

	    h /= 360; // normalise on [0, 1]

	    s = parseFloat(m[2]);

	    if (s < 0 || s > 100) {
	      return;
	    } // saturation is [0, 100]


	    s = s / 100; // normalise on [0, 1]

	    l = parseFloat(m[3]);

	    if (l < 0 || l > 100) {
	      return;
	    } // lightness is [0, 100]


	    l = l / 100; // normalise on [0, 1]

	    a = m[4];

	    if (a !== undefined) {
	      a = parseFloat(a);

	      if (a < 0 || a > 1) {
	        return;
	      } // alpha is [0, 1]

	    } // now, convert to rgb
	    // code from http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript


	    if (s === 0) {
	      r = g = b = Math.round(l * 255); // achromatic
	    } else {
	      var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
	      var p = 2 * l - q;
	      r = Math.round(255 * hue2rgb(p, q, h + 1 / 3));
	      g = Math.round(255 * hue2rgb(p, q, h));
	      b = Math.round(255 * hue2rgb(p, q, h - 1 / 3));
	    }

	    ret = [r, g, b, a];
	  }

	  return ret;
	}; // get [r, g, b, a] from rgb(0, 0, 0) or rgba(0, 0, 0, 0)

	var rgb2tuple = function rgb2tuple(rgb) {
	  var ret;
	  var m = new RegExp('^' + rgba + '$').exec(rgb);

	  if (m) {
	    ret = [];
	    var isPct = [];

	    for (var i = 1; i <= 3; i++) {
	      var channel = m[i];

	      if (channel[channel.length - 1] === '%') {
	        isPct[i] = true;
	      }

	      channel = parseFloat(channel);

	      if (isPct[i]) {
	        channel = channel / 100 * 255; // normalise to [0, 255]
	      }

	      if (channel < 0 || channel > 255) {
	        return;
	      } // invalid channel value


	      ret.push(Math.floor(channel));
	    }

	    var atLeastOneIsPct = isPct[1] || isPct[2] || isPct[3];
	    var allArePct = isPct[1] && isPct[2] && isPct[3];

	    if (atLeastOneIsPct && !allArePct) {
	      return;
	    } // must all be percent values if one is


	    var alpha = m[4];

	    if (alpha !== undefined) {
	      alpha = parseFloat(alpha);

	      if (alpha < 0 || alpha > 1) {
	        return;
	      } // invalid alpha value


	      ret.push(alpha);
	    }
	  }

	  return ret;
	};
	var colorname2tuple = function colorname2tuple(color) {
	  return colors[color.toLowerCase()];
	};
	var color2tuple = function color2tuple(color) {
	  return (array(color) ? color : null) || colorname2tuple(color) || hex2tuple(color) || rgb2tuple(color) || hsl2tuple(color);
	};
	var colors = {
	  // special colour names
	  transparent: [0, 0, 0, 0],
	  // NB alpha === 0
	  // regular colours
	  aliceblue: [240, 248, 255],
	  antiquewhite: [250, 235, 215],
	  aqua: [0, 255, 255],
	  aquamarine: [127, 255, 212],
	  azure: [240, 255, 255],
	  beige: [245, 245, 220],
	  bisque: [255, 228, 196],
	  black: [0, 0, 0],
	  blanchedalmond: [255, 235, 205],
	  blue: [0, 0, 255],
	  blueviolet: [138, 43, 226],
	  brown: [165, 42, 42],
	  burlywood: [222, 184, 135],
	  cadetblue: [95, 158, 160],
	  chartreuse: [127, 255, 0],
	  chocolate: [210, 105, 30],
	  coral: [255, 127, 80],
	  cornflowerblue: [100, 149, 237],
	  cornsilk: [255, 248, 220],
	  crimson: [220, 20, 60],
	  cyan: [0, 255, 255],
	  darkblue: [0, 0, 139],
	  darkcyan: [0, 139, 139],
	  darkgoldenrod: [184, 134, 11],
	  darkgray: [169, 169, 169],
	  darkgreen: [0, 100, 0],
	  darkgrey: [169, 169, 169],
	  darkkhaki: [189, 183, 107],
	  darkmagenta: [139, 0, 139],
	  darkolivegreen: [85, 107, 47],
	  darkorange: [255, 140, 0],
	  darkorchid: [153, 50, 204],
	  darkred: [139, 0, 0],
	  darksalmon: [233, 150, 122],
	  darkseagreen: [143, 188, 143],
	  darkslateblue: [72, 61, 139],
	  darkslategray: [47, 79, 79],
	  darkslategrey: [47, 79, 79],
	  darkturquoise: [0, 206, 209],
	  darkviolet: [148, 0, 211],
	  deeppink: [255, 20, 147],
	  deepskyblue: [0, 191, 255],
	  dimgray: [105, 105, 105],
	  dimgrey: [105, 105, 105],
	  dodgerblue: [30, 144, 255],
	  firebrick: [178, 34, 34],
	  floralwhite: [255, 250, 240],
	  forestgreen: [34, 139, 34],
	  fuchsia: [255, 0, 255],
	  gainsboro: [220, 220, 220],
	  ghostwhite: [248, 248, 255],
	  gold: [255, 215, 0],
	  goldenrod: [218, 165, 32],
	  gray: [128, 128, 128],
	  grey: [128, 128, 128],
	  green: [0, 128, 0],
	  greenyellow: [173, 255, 47],
	  honeydew: [240, 255, 240],
	  hotpink: [255, 105, 180],
	  indianred: [205, 92, 92],
	  indigo: [75, 0, 130],
	  ivory: [255, 255, 240],
	  khaki: [240, 230, 140],
	  lavender: [230, 230, 250],
	  lavenderblush: [255, 240, 245],
	  lawngreen: [124, 252, 0],
	  lemonchiffon: [255, 250, 205],
	  lightblue: [173, 216, 230],
	  lightcoral: [240, 128, 128],
	  lightcyan: [224, 255, 255],
	  lightgoldenrodyellow: [250, 250, 210],
	  lightgray: [211, 211, 211],
	  lightgreen: [144, 238, 144],
	  lightgrey: [211, 211, 211],
	  lightpink: [255, 182, 193],
	  lightsalmon: [255, 160, 122],
	  lightseagreen: [32, 178, 170],
	  lightskyblue: [135, 206, 250],
	  lightslategray: [119, 136, 153],
	  lightslategrey: [119, 136, 153],
	  lightsteelblue: [176, 196, 222],
	  lightyellow: [255, 255, 224],
	  lime: [0, 255, 0],
	  limegreen: [50, 205, 50],
	  linen: [250, 240, 230],
	  magenta: [255, 0, 255],
	  maroon: [128, 0, 0],
	  mediumaquamarine: [102, 205, 170],
	  mediumblue: [0, 0, 205],
	  mediumorchid: [186, 85, 211],
	  mediumpurple: [147, 112, 219],
	  mediumseagreen: [60, 179, 113],
	  mediumslateblue: [123, 104, 238],
	  mediumspringgreen: [0, 250, 154],
	  mediumturquoise: [72, 209, 204],
	  mediumvioletred: [199, 21, 133],
	  midnightblue: [25, 25, 112],
	  mintcream: [245, 255, 250],
	  mistyrose: [255, 228, 225],
	  moccasin: [255, 228, 181],
	  navajowhite: [255, 222, 173],
	  navy: [0, 0, 128],
	  oldlace: [253, 245, 230],
	  olive: [128, 128, 0],
	  olivedrab: [107, 142, 35],
	  orange: [255, 165, 0],
	  orangered: [255, 69, 0],
	  orchid: [218, 112, 214],
	  palegoldenrod: [238, 232, 170],
	  palegreen: [152, 251, 152],
	  paleturquoise: [175, 238, 238],
	  palevioletred: [219, 112, 147],
	  papayawhip: [255, 239, 213],
	  peachpuff: [255, 218, 185],
	  peru: [205, 133, 63],
	  pink: [255, 192, 203],
	  plum: [221, 160, 221],
	  powderblue: [176, 224, 230],
	  purple: [128, 0, 128],
	  red: [255, 0, 0],
	  rosybrown: [188, 143, 143],
	  royalblue: [65, 105, 225],
	  saddlebrown: [139, 69, 19],
	  salmon: [250, 128, 114],
	  sandybrown: [244, 164, 96],
	  seagreen: [46, 139, 87],
	  seashell: [255, 245, 238],
	  sienna: [160, 82, 45],
	  silver: [192, 192, 192],
	  skyblue: [135, 206, 235],
	  slateblue: [106, 90, 205],
	  slategray: [112, 128, 144],
	  slategrey: [112, 128, 144],
	  snow: [255, 250, 250],
	  springgreen: [0, 255, 127],
	  steelblue: [70, 130, 180],
	  tan: [210, 180, 140],
	  teal: [0, 128, 128],
	  thistle: [216, 191, 216],
	  tomato: [255, 99, 71],
	  turquoise: [64, 224, 208],
	  violet: [238, 130, 238],
	  wheat: [245, 222, 179],
	  white: [255, 255, 255],
	  whitesmoke: [245, 245, 245],
	  yellow: [255, 255, 0],
	  yellowgreen: [154, 205, 50]
	};

	var setMap = function setMap(options) {
	  var obj = options.map;
	  var keys = options.keys;
	  var l = keys.length;

	  for (var i = 0; i < l; i++) {
	    var key = keys[i];

	    if (plainObject(key)) {
	      throw Error('Tried to set map with object key');
	    }

	    if (i < keys.length - 1) {
	      // extend the map if necessary
	      if (obj[key] == null) {
	        obj[key] = {};
	      }

	      obj = obj[key];
	    } else {
	      // set the value
	      obj[key] = options.value;
	    }
	  }
	}; // gets the value in a map even if it's not built in places

	var getMap = function getMap(options) {
	  var obj = options.map;
	  var keys = options.keys;
	  var l = keys.length;

	  for (var i = 0; i < l; i++) {
	    var key = keys[i];

	    if (plainObject(key)) {
	      throw Error('Tried to get map with object key');
	    }

	    obj = obj[key];

	    if (obj == null) {
	      return obj;
	    }
	  }

	  return obj;
	}; // deletes the entry in the map

	var performance = window$1 ? window$1.performance : null;
	var pnow = performance && performance.now ? function () {
	  return performance.now();
	} : function () {
	  return Date.now();
	};

	var raf = function () {
	  if (window$1) {
	    if (window$1.requestAnimationFrame) {
	      return function (fn) {
	        window$1.requestAnimationFrame(fn);
	      };
	    } else if (window$1.mozRequestAnimationFrame) {
	      return function (fn) {
	        window$1.mozRequestAnimationFrame(fn);
	      };
	    } else if (window$1.webkitRequestAnimationFrame) {
	      return function (fn) {
	        window$1.webkitRequestAnimationFrame(fn);
	      };
	    } else if (window$1.msRequestAnimationFrame) {
	      return function (fn) {
	        window$1.msRequestAnimationFrame(fn);
	      };
	    }
	  }

	  return function (fn) {
	    if (fn) {
	      setTimeout(function () {
	        fn(pnow());
	      }, 1000 / 60);
	    }
	  };
	}();

	var requestAnimationFrame = function requestAnimationFrame(fn) {
	  return raf(fn);
	};
	var performanceNow = pnow;

	var DEFAULT_SEED = 5381;
	var hashIterableInts = function hashIterableInts(iterator) {
	  var seed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_SEED;
	  // djb2/string-hash
	  var hash = seed;
	  var entry;

	  for (;;) {
	    entry = iterator.next();

	    if (entry.done) {
	      break;
	    }

	    hash = (hash << 5) + hash + entry.value | 0;
	  }

	  return hash;
	};
	var hashInt = function hashInt(num) {
	  var seed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_SEED;
	  // djb2/string-hash
	  return (seed << 5) + seed + num | 0;
	};
	var hashIntsArray = function hashIntsArray(ints, seed) {
	  var entry = {
	    value: 0,
	    done: false
	  };
	  var i = 0;
	  var length = ints.length;
	  var iterator = {
	    next: function next() {
	      if (i < length) {
	        entry.value = ints[i++];
	      } else {
	        entry.done = true;
	      }

	      return entry;
	    }
	  };
	  return hashIterableInts(iterator, seed);
	};
	var hashString = function hashString(str, seed) {
	  var entry = {
	    value: 0,
	    done: false
	  };
	  var i = 0;
	  var length = str.length;
	  var iterator = {
	    next: function next() {
	      if (i < length) {
	        entry.value = str.charCodeAt(i++);
	      } else {
	        entry.done = true;
	      }

	      return entry;
	    }
	  };
	  return hashIterableInts(iterator, seed);
	};
	var hashStrings = function hashStrings() {
	  return hashStringsArray(arguments);
	};
	var hashStringsArray = function hashStringsArray(strs) {
	  var hash;

	  for (var i = 0; i < strs.length; i++) {
	    var str = strs[i];

	    if (i === 0) {
	      hash = hashString(str);
	    } else {
	      hash = hashString(str, hash);
	    }
	  }

	  return hash;
	};

	/*global console */
	var warningsEnabled = true;
	var warnSupported = console.warn != null; // eslint-disable-line no-console

	var traceSupported = console.trace != null; // eslint-disable-line no-console

	var MAX_INT = Number.MAX_SAFE_INTEGER || 9007199254740991;
	var trueify = function trueify() {
	  return true;
	};
	var falsify = function falsify() {
	  return false;
	};
	var zeroify = function zeroify() {
	  return 0;
	};
	var noop = function noop() {};
	var error = function error(msg) {
	  throw new Error(msg);
	};
	var warnings = function warnings(enabled) {
	  if (enabled !== undefined) {
	    warningsEnabled = !!enabled;
	  } else {
	    return warningsEnabled;
	  }
	};
	var warn = function warn(msg) {
	  /* eslint-disable no-console */
	  if (!warnings()) {
	    return;
	  }

	  if (warnSupported) {
	    console.warn(msg);
	  } else {
	    console.log(msg);

	    if (traceSupported) {
	      console.trace();
	    }
	  }
	};
	/* eslint-enable */

	var clone = function clone(obj) {
	  return extend({}, obj);
	}; // gets a shallow copy of the argument

	var copy = function copy(obj) {
	  if (obj == null) {
	    return obj;
	  }

	  if (array(obj)) {
	    return obj.slice();
	  } else if (plainObject(obj)) {
	    return clone(obj);
	  } else {
	    return obj;
	  }
	};
	var copyArray = function copyArray(arr) {
	  return arr.slice();
	};
	var uuid = function uuid(a, b
	/* placeholders */
	) {
	  for ( // loop :)
	  b = a = ''; // b - result , a - numeric letiable
	  a++ < 36; //
	  b += a * 51 & 52 // if "a" is not 9 or 14 or 19 or 24
	  ? //  return a random number or 4
	  (a ^ 15 // if "a" is not 15
	  ? // genetate a random number from 0 to 15
	  8 ^ Math.random() * (a ^ 20 ? 16 : 4) // unless "a" is 20, in which case a random number from 8 to 11
	  : 4 //  otherwise 4
	  ).toString(16) : '-' //  in other cases (if "a" is 9,14,19,24) insert "-"
	  ) {
	  }

	  return b;
	};
	var _staticEmptyObject = {};
	var staticEmptyObject = function staticEmptyObject() {
	  return _staticEmptyObject;
	};
	var defaults = function defaults(_defaults) {
	  var keys = Object.keys(_defaults);
	  return function (opts) {
	    var filledOpts = {};

	    for (var i = 0; i < keys.length; i++) {
	      var key = keys[i];
	      var optVal = opts == null ? undefined : opts[key];
	      filledOpts[key] = optVal === undefined ? _defaults[key] : optVal;
	    }

	    return filledOpts;
	  };
	};
	var removeFromArray = function removeFromArray(arr, ele, manyCopies) {
	  for (var i = arr.length; i >= 0; i--) {
	    if (arr[i] === ele) {
	      arr.splice(i, 1);

	      if (!manyCopies) {
	        break;
	      }
	    }
	  }
	};
	var clearArray = function clearArray(arr) {
	  arr.splice(0, arr.length);
	};
	var push = function push(arr, otherArr) {
	  for (var i = 0; i < otherArr.length; i++) {
	    var el = otherArr[i];
	    arr.push(el);
	  }
	};
	var getPrefixedProperty = function getPrefixedProperty(obj, propName, prefix) {
	  if (prefix) {
	    propName = prependCamel(prefix, propName); // e.g. (labelWidth, source) => sourceLabelWidth
	  }

	  return obj[propName];
	};
	var setPrefixedProperty = function setPrefixedProperty(obj, propName, prefix, value) {
	  if (prefix) {
	    propName = prependCamel(prefix, propName); // e.g. (labelWidth, source) => sourceLabelWidth
	  }

	  obj[propName] = value;
	};

	/* global Map */
	var ObjectMap =
	/*#__PURE__*/
	function () {
	  function ObjectMap() {
	    _classCallCheck(this, ObjectMap);

	    this._obj = {};
	  }

	  _createClass(ObjectMap, [{
	    key: "set",
	    value: function set(key, val) {
	      this._obj[key] = val;
	      return this;
	    }
	  }, {
	    key: "delete",
	    value: function _delete(key) {
	      this._obj[key] = undefined;
	      return this;
	    }
	  }, {
	    key: "clear",
	    value: function clear() {
	      this._obj = {};
	    }
	  }, {
	    key: "has",
	    value: function has(key) {
	      return this._obj[key] !== undefined;
	    }
	  }, {
	    key: "get",
	    value: function get(key) {
	      return this._obj[key];
	    }
	  }]);

	  return ObjectMap;
	}();

	var Map$1 = typeof Map !== 'undefined' ? Map : ObjectMap;

	/* global Set */
	var undef =  "undefined" ;

	var ObjectSet =
	/*#__PURE__*/
	function () {
	  function ObjectSet(arrayOrObjectSet) {
	    _classCallCheck(this, ObjectSet);

	    this._obj = Object.create(null);
	    this.size = 0;

	    if (arrayOrObjectSet != null) {
	      var arr;

	      if (arrayOrObjectSet.instanceString != null && arrayOrObjectSet.instanceString() === this.instanceString()) {
	        arr = arrayOrObjectSet.toArray();
	      } else {
	        arr = arrayOrObjectSet;
	      }

	      for (var i = 0; i < arr.length; i++) {
	        this.add(arr[i]);
	      }
	    }
	  }

	  _createClass(ObjectSet, [{
	    key: "instanceString",
	    value: function instanceString() {
	      return 'set';
	    }
	  }, {
	    key: "add",
	    value: function add(val) {
	      var o = this._obj;

	      if (o[val] !== 1) {
	        o[val] = 1;
	        this.size++;
	      }
	    }
	  }, {
	    key: "delete",
	    value: function _delete(val) {
	      var o = this._obj;

	      if (o[val] === 1) {
	        o[val] = 0;
	        this.size--;
	      }
	    }
	  }, {
	    key: "clear",
	    value: function clear() {
	      this._obj = Object.create(null);
	    }
	  }, {
	    key: "has",
	    value: function has(val) {
	      return this._obj[val] === 1;
	    }
	  }, {
	    key: "toArray",
	    value: function toArray() {
	      var _this = this;

	      return Object.keys(this._obj).filter(function (key) {
	        return _this.has(key);
	      });
	    }
	  }, {
	    key: "forEach",
	    value: function forEach(callback, thisArg) {
	      return this.toArray().forEach(callback, thisArg);
	    }
	  }]);

	  return ObjectSet;
	}();

	var Set$1 = (typeof Set === "undefined" ? "undefined" : _typeof(Set)) !== undef ? Set : ObjectSet;

	var Element = function Element(cy, params, restore) {
	  restore = restore === undefined || restore ? true : false;

	  if (cy === undefined || params === undefined || !core(cy)) {
	    error('An element must have a core reference and parameters set');
	    return;
	  }

	  var group = params.group; // try to automatically infer the group if unspecified

	  if (group == null) {
	    if (params.data && params.data.source != null && params.data.target != null) {
	      group = 'edges';
	    } else {
	      group = 'nodes';
	    }
	  } // validate group


	  if (group !== 'nodes' && group !== 'edges') {
	    error('An element must be of type `nodes` or `edges`; you specified `' + group + '`');
	    return;
	  } // make the element array-like, just like a collection


	  this.length = 1;
	  this[0] = this; // NOTE: when something is added here, add also to ele.json()

	  var _p = this._private = {
	    cy: cy,
	    single: true,
	    // indicates this is an element
	    data: params.data || {},
	    // data object
	    position: params.position || {
	      x: 0,
	      y: 0
	    },
	    // (x, y) position pair
	    autoWidth: undefined,
	    // width and height of nodes calculated by the renderer when set to special 'auto' value
	    autoHeight: undefined,
	    autoPadding: undefined,
	    compoundBoundsClean: false,
	    // whether the compound dimensions need to be recalculated the next time dimensions are read
	    listeners: [],
	    // array of bound listeners
	    group: group,
	    // string; 'nodes' or 'edges'
	    style: {},
	    // properties as set by the style
	    rstyle: {},
	    // properties for style sent from the renderer to the core
	    styleCxts: [],
	    // applied style contexts from the styler
	    styleKeys: {},
	    // per-group keys of style property values
	    removed: true,
	    // whether it's inside the vis; true if removed (set true here since we call restore)
	    selected: params.selected ? true : false,
	    // whether it's selected
	    selectable: params.selectable === undefined ? true : params.selectable ? true : false,
	    // whether it's selectable
	    locked: params.locked ? true : false,
	    // whether the element is locked (cannot be moved)
	    grabbed: false,
	    // whether the element is grabbed by the mouse; renderer sets this privately
	    grabbable: params.grabbable === undefined ? true : params.grabbable ? true : false,
	    // whether the element can be grabbed
	    pannable: params.pannable === undefined ? group === 'edges' ? true : false : params.pannable ? true : false,
	    // whether the element has passthrough panning enabled
	    active: false,
	    // whether the element is active from user interaction
	    classes: new Set$1(),
	    // map ( className => true )
	    animation: {
	      // object for currently-running animations
	      current: [],
	      queue: []
	    },
	    rscratch: {},
	    // object in which the renderer can store information
	    scratch: params.scratch || {},
	    // scratch objects
	    edges: [],
	    // array of connected edges
	    children: [],
	    // array of children
	    parent: null,
	    // parent ref
	    traversalCache: {},
	    // cache of output of traversal functions
	    backgrounding: false,
	    // whether background images are loading
	    bbCache: null,
	    // cache of the current bounding box
	    bbCacheShift: {
	      x: 0,
	      y: 0
	    },
	    // shift applied to cached bb to be applied on next get
	    bodyBounds: null,
	    // bounds cache of element body, w/o overlay
	    overlayBounds: null,
	    // bounds cache of element body, including overlay
	    labelBounds: {
	      // bounds cache of labels
	      all: null,
	      source: null,
	      target: null,
	      main: null
	    },
	    arrowBounds: {
	      // bounds cache of edge arrows
	      source: null,
	      target: null,
	      'mid-source': null,
	      'mid-target': null
	    }
	  };

	  if (_p.position.x == null) {
	    _p.position.x = 0;
	  }

	  if (_p.position.y == null) {
	    _p.position.y = 0;
	  } // renderedPosition overrides if specified


	  if (params.renderedPosition) {
	    var rpos = params.renderedPosition;
	    var pan = cy.pan();
	    var zoom = cy.zoom();
	    _p.position = {
	      x: (rpos.x - pan.x) / zoom,
	      y: (rpos.y - pan.y) / zoom
	    };
	  }

	  var classes = [];

	  if (array(params.classes)) {
	    classes = params.classes;
	  } else if (string(params.classes)) {
	    classes = params.classes.split(/\s+/);
	  }

	  for (var i = 0, l = classes.length; i < l; i++) {
	    var cls = classes[i];

	    if (!cls || cls === '') {
	      continue;
	    }

	    _p.classes.add(cls);
	  }

	  this.createEmitter();
	  var bypass = params.style || params.css;

	  if (bypass) {
	    warn('Setting a `style` bypass at element creation is deprecated');
	    this.style(bypass);
	  }

	  if (restore === undefined || restore) {
	    this.restore();
	  }
	};

	var defineSearch = function defineSearch(params) {
	  params = {
	    bfs: params.bfs || !params.dfs,
	    dfs: params.dfs || !params.bfs
	  }; // from pseudocode on wikipedia

	  return function searchFn(roots, fn$1, directed) {
	    var options;

	    if (plainObject(roots) && !elementOrCollection(roots)) {
	      options = roots;
	      roots = options.roots || options.root;
	      fn$1 = options.visit;
	      directed = options.directed;
	    }

	    directed = arguments.length === 2 && !fn(fn$1) ? fn$1 : directed;
	    fn$1 = fn(fn$1) ? fn$1 : function () {};
	    var cy = this._private.cy;
	    var v = roots = string(roots) ? this.filter(roots) : roots;
	    var Q = [];
	    var connectedNodes = [];
	    var connectedBy = {};
	    var id2depth = {};
	    var V = {};
	    var j = 0;
	    var found;

	    var _this$byGroup = this.byGroup(),
	        nodes = _this$byGroup.nodes,
	        edges = _this$byGroup.edges; // enqueue v


	    for (var i = 0; i < v.length; i++) {
	      var vi = v[i];
	      var viId = vi.id();

	      if (vi.isNode()) {
	        Q.unshift(vi);

	        if (params.bfs) {
	          V[viId] = true;
	          connectedNodes.push(vi);
	        }

	        id2depth[viId] = 0;
	      }
	    }

	    var _loop2 = function _loop2() {
	      var v = params.bfs ? Q.shift() : Q.pop();
	      var vId = v.id();

	      if (params.dfs) {
	        if (V[vId]) {
	          return "continue";
	        }

	        V[vId] = true;
	        connectedNodes.push(v);
	      }

	      var depth = id2depth[vId];
	      var prevEdge = connectedBy[vId];
	      var src = prevEdge != null ? prevEdge.source() : null;
	      var tgt = prevEdge != null ? prevEdge.target() : null;
	      var prevNode = prevEdge == null ? undefined : v.same(src) ? tgt[0] : src[0];
	      var ret = void 0;
	      ret = fn$1(v, prevEdge, prevNode, j++, depth);

	      if (ret === true) {
	        found = v;
	        return "break";
	      }

	      if (ret === false) {
	        return "break";
	      }

	      var vwEdges = v.connectedEdges().filter(function (e) {
	        return (!directed || e.source().same(v)) && edges.has(e);
	      });

	      for (var _i2 = 0; _i2 < vwEdges.length; _i2++) {
	        var e = vwEdges[_i2];
	        var w = e.connectedNodes().filter(function (n) {
	          return !n.same(v) && nodes.has(n);
	        });
	        var wId = w.id();

	        if (w.length !== 0 && !V[wId]) {
	          w = w[0];
	          Q.push(w);

	          if (params.bfs) {
	            V[wId] = true;
	            connectedNodes.push(w);
	          }

	          connectedBy[wId] = e;
	          id2depth[wId] = id2depth[vId] + 1;
	        }
	      }
	    };

	    _loop: while (Q.length !== 0) {
	      var _ret = _loop2();

	      switch (_ret) {
	        case "continue":
	          continue;

	        case "break":
	          break _loop;
	      }
	    }

	    var connectedEles = cy.collection();

	    for (var _i = 0; _i < connectedNodes.length; _i++) {
	      var node = connectedNodes[_i];
	      var edge = connectedBy[node.id()];

	      if (edge != null) {
	        connectedEles.merge(edge);
	      }

	      connectedEles.merge(node);
	    }

	    return {
	      path: cy.collection(connectedEles),
	      found: cy.collection(found)
	    };
	  };
	}; // search, spanning trees, etc


	var elesfn = {
	  breadthFirstSearch: defineSearch({
	    bfs: true
	  }),
	  depthFirstSearch: defineSearch({
	    dfs: true
	  })
	}; // nice, short mathemathical alias

	elesfn.bfs = elesfn.breadthFirstSearch;
	elesfn.dfs = elesfn.depthFirstSearch;

	var dijkstraDefaults = defaults({
	  root: null,
	  weight: function weight(edge) {
	    return 1;
	  },
	  directed: false
	});
	var elesfn$1 = {
	  dijkstra: function dijkstra(options) {
	    if (!plainObject(options)) {
	      var args = arguments;
	      options = {
	        root: args[0],
	        weight: args[1],
	        directed: args[2]
	      };
	    }

	    var _dijkstraDefaults = dijkstraDefaults(options),
	        root = _dijkstraDefaults.root,
	        weight = _dijkstraDefaults.weight,
	        directed = _dijkstraDefaults.directed;

	    var eles = this;
	    var weightFn = weight;
	    var source = string(root) ? this.filter(root)[0] : root[0];
	    var dist = {};
	    var prev = {};
	    var knownDist = {};

	    var _this$byGroup = this.byGroup(),
	        nodes = _this$byGroup.nodes,
	        edges = _this$byGroup.edges;

	    edges.unmergeBy(function (ele) {
	      return ele.isLoop();
	    });

	    var getDist = function getDist(node) {
	      return dist[node.id()];
	    };

	    var setDist = function setDist(node, d) {
	      dist[node.id()] = d;
	      Q.updateItem(node);
	    };

	    var Q = new Heap(function (a, b) {
	      return getDist(a) - getDist(b);
	    });

	    for (var i = 0; i < nodes.length; i++) {
	      var node = nodes[i];
	      dist[node.id()] = node.same(source) ? 0 : Infinity;
	      Q.push(node);
	    }

	    var distBetween = function distBetween(u, v) {
	      var uvs = (directed ? u.edgesTo(v) : u.edgesWith(v)).intersect(edges);
	      var smallestDistance = Infinity;
	      var smallestEdge;

	      for (var _i = 0; _i < uvs.length; _i++) {
	        var edge = uvs[_i];

	        var _weight = weightFn(edge);

	        if (_weight < smallestDistance || !smallestEdge) {
	          smallestDistance = _weight;
	          smallestEdge = edge;
	        }
	      }

	      return {
	        edge: smallestEdge,
	        dist: smallestDistance
	      };
	    };

	    while (Q.size() > 0) {
	      var u = Q.pop();
	      var smalletsDist = getDist(u);
	      var uid = u.id();
	      knownDist[uid] = smalletsDist;

	      if (smalletsDist === Infinity) {
	        continue;
	      }

	      var neighbors = u.neighborhood().intersect(nodes);

	      for (var _i2 = 0; _i2 < neighbors.length; _i2++) {
	        var v = neighbors[_i2];
	        var vid = v.id();
	        var vDist = distBetween(u, v);
	        var alt = smalletsDist + vDist.dist;

	        if (alt < getDist(v)) {
	          setDist(v, alt);
	          prev[vid] = {
	            node: u,
	            edge: vDist.edge
	          };
	        }
	      } // for

	    } // while


	    return {
	      distanceTo: function distanceTo(node) {
	        var target = string(node) ? nodes.filter(node)[0] : node[0];
	        return knownDist[target.id()];
	      },
	      pathTo: function pathTo(node) {
	        var target = string(node) ? nodes.filter(node)[0] : node[0];
	        var S = [];
	        var u = target;
	        var uid = u.id();

	        if (target.length > 0) {
	          S.unshift(target);

	          while (prev[uid]) {
	            var p = prev[uid];
	            S.unshift(p.edge);
	            S.unshift(p.node);
	            u = p.node;
	            uid = u.id();
	          }
	        }

	        return eles.spawn(S);
	      }
	    };
	  }
	};

	var elesfn$2 = {
	  // kruskal's algorithm (finds min spanning tree, assuming undirected graph)
	  // implemented from pseudocode from wikipedia
	  kruskal: function kruskal(weightFn) {
	    weightFn = weightFn || function (edge) {
	      return 1;
	    };

	    var _this$byGroup = this.byGroup(),
	        nodes = _this$byGroup.nodes,
	        edges = _this$byGroup.edges;

	    var numNodes = nodes.length;
	    var forest = new Array(numNodes);
	    var A = nodes; // assumes byGroup() creates new collections that can be safely mutated

	    var findSetIndex = function findSetIndex(ele) {
	      for (var i = 0; i < forest.length; i++) {
	        var eles = forest[i];

	        if (eles.has(ele)) {
	          return i;
	        }
	      }
	    }; // start with one forest per node


	    for (var i = 0; i < numNodes; i++) {
	      forest[i] = this.spawn(nodes[i]);
	    }

	    var S = edges.sort(function (a, b) {
	      return weightFn(a) - weightFn(b);
	    });

	    for (var _i = 0; _i < S.length; _i++) {
	      var edge = S[_i];
	      var u = edge.source()[0];
	      var v = edge.target()[0];
	      var setUIndex = findSetIndex(u);
	      var setVIndex = findSetIndex(v);
	      var setU = forest[setUIndex];
	      var setV = forest[setVIndex];

	      if (setUIndex !== setVIndex) {
	        A.merge(edge); // combine forests for u and v

	        setU.merge(setV);
	        forest.splice(setVIndex, 1);
	      }
	    }

	    return A;
	  }
	};

	var aStarDefaults = defaults({
	  root: null,
	  goal: null,
	  weight: function weight(edge) {
	    return 1;
	  },
	  heuristic: function heuristic(edge) {
	    return 0;
	  },
	  directed: false
	});
	var elesfn$3 = {
	  // Implemented from pseudocode from wikipedia
	  aStar: function aStar(options) {
	    var cy = this.cy();

	    var _aStarDefaults = aStarDefaults(options),
	        root = _aStarDefaults.root,
	        goal = _aStarDefaults.goal,
	        heuristic = _aStarDefaults.heuristic,
	        directed = _aStarDefaults.directed,
	        weight = _aStarDefaults.weight;

	    root = cy.collection(root)[0];
	    goal = cy.collection(goal)[0];
	    var sid = root.id();
	    var tid = goal.id();
	    var gScore = {};
	    var fScore = {};
	    var closedSetIds = {};
	    var openSet = new Heap(function (a, b) {
	      return fScore[a.id()] - fScore[b.id()];
	    });
	    var openSetIds = new Set$1();
	    var cameFrom = {};
	    var cameFromEdge = {};

	    var addToOpenSet = function addToOpenSet(ele, id) {
	      openSet.push(ele);
	      openSetIds.add(id);
	    };

	    var cMin, cMinId;

	    var popFromOpenSet = function popFromOpenSet() {
	      cMin = openSet.pop();
	      cMinId = cMin.id();
	      openSetIds["delete"](cMinId);
	    };

	    var isInOpenSet = function isInOpenSet(id) {
	      return openSetIds.has(id);
	    };

	    addToOpenSet(root, sid);
	    gScore[sid] = 0;
	    fScore[sid] = heuristic(root); // Counter

	    var steps = 0; // Main loop

	    while (openSet.size() > 0) {
	      popFromOpenSet();
	      steps++; // If we've found our goal, then we are done

	      if (cMinId === tid) {
	        var path = [];
	        var pathNode = goal;
	        var pathNodeId = tid;
	        var pathEdge = cameFromEdge[pathNodeId];

	        for (;;) {
	          path.unshift(pathNode);

	          if (pathEdge != null) {
	            path.unshift(pathEdge);
	          }

	          pathNode = cameFrom[pathNodeId];

	          if (pathNode == null) {
	            break;
	          }

	          pathNodeId = pathNode.id();
	          pathEdge = cameFromEdge[pathNodeId];
	        }

	        return {
	          found: true,
	          distance: gScore[cMinId],
	          path: this.spawn(path),
	          steps: steps
	        };
	      } // Add cMin to processed nodes


	      closedSetIds[cMinId] = true; // Update scores for neighbors of cMin
	      // Take into account if graph is directed or not

	      var vwEdges = cMin._private.edges;

	      for (var i = 0; i < vwEdges.length; i++) {
	        var e = vwEdges[i]; // edge must be in set of calling eles

	        if (!this.hasElementWithId(e.id())) {
	          continue;
	        } // cMin must be the source of edge if directed


	        if (directed && e.data('source') !== cMinId) {
	          continue;
	        }

	        var wSrc = e.source();
	        var wTgt = e.target();
	        var w = wSrc.id() !== cMinId ? wSrc : wTgt;
	        var wid = w.id(); // node must be in set of calling eles

	        if (!this.hasElementWithId(wid)) {
	          continue;
	        } // if node is in closedSet, ignore it


	        if (closedSetIds[wid]) {
	          continue;
	        } // New tentative score for node w


	        var tempScore = gScore[cMinId] + weight(e); // Update gScore for node w if:
	        //   w not present in openSet
	        // OR
	        //   tentative gScore is less than previous value
	        // w not in openSet

	        if (!isInOpenSet(wid)) {
	          gScore[wid] = tempScore;
	          fScore[wid] = tempScore + heuristic(w);
	          addToOpenSet(w, wid);
	          cameFrom[wid] = cMin;
	          cameFromEdge[wid] = e;
	          continue;
	        } // w already in openSet, but with greater gScore


	        if (tempScore < gScore[wid]) {
	          gScore[wid] = tempScore;
	          fScore[wid] = tempScore + heuristic(w);
	          cameFrom[wid] = cMin;
	        }
	      } // End of neighbors update

	    } // End of main loop
	    // If we've reached here, then we've not reached our goal


	    return {
	      found: false,
	      distance: undefined,
	      path: undefined,
	      steps: steps
	    };
	  }
	}; // elesfn

	var floydWarshallDefaults = defaults({
	  weight: function weight(edge) {
	    return 1;
	  },
	  directed: false
	});
	var elesfn$4 = {
	  // Implemented from pseudocode from wikipedia
	  floydWarshall: function floydWarshall(options) {
	    var cy = this.cy();

	    var _floydWarshallDefault = floydWarshallDefaults(options),
	        weight = _floydWarshallDefault.weight,
	        directed = _floydWarshallDefault.directed;

	    var weightFn = weight;

	    var _this$byGroup = this.byGroup(),
	        nodes = _this$byGroup.nodes,
	        edges = _this$byGroup.edges;

	    var N = nodes.length;
	    var Nsq = N * N;

	    var indexOf = function indexOf(node) {
	      return nodes.indexOf(node);
	    };

	    var atIndex = function atIndex(i) {
	      return nodes[i];
	    }; // Initialize distance matrix


	    var dist = new Array(Nsq);

	    for (var n = 0; n < Nsq; n++) {
	      var j = n % N;
	      var i = (n - j) / N;

	      if (i === j) {
	        dist[n] = 0;
	      } else {
	        dist[n] = Infinity;
	      }
	    } // Initialize matrix used for path reconstruction
	    // Initialize distance matrix


	    var next = new Array(Nsq);
	    var edgeNext = new Array(Nsq); // Process edges

	    for (var _i = 0; _i < edges.length; _i++) {
	      var edge = edges[_i];
	      var src = edge.source()[0];
	      var tgt = edge.target()[0];

	      if (src === tgt) {
	        continue;
	      } // exclude loops


	      var s = indexOf(src);
	      var t = indexOf(tgt);
	      var st = s * N + t; // source to target index

	      var _weight = weightFn(edge); // Check if already process another edge between same 2 nodes


	      if (dist[st] > _weight) {
	        dist[st] = _weight;
	        next[st] = t;
	        edgeNext[st] = edge;
	      } // If undirected graph, process 'reversed' edge


	      if (!directed) {
	        var ts = t * N + s; // target to source index

	        if (!directed && dist[ts] > _weight) {
	          dist[ts] = _weight;
	          next[ts] = s;
	          edgeNext[ts] = edge;
	        }
	      }
	    } // Main loop


	    for (var k = 0; k < N; k++) {
	      for (var _i2 = 0; _i2 < N; _i2++) {
	        var ik = _i2 * N + k;

	        for (var _j = 0; _j < N; _j++) {
	          var ij = _i2 * N + _j;
	          var kj = k * N + _j;

	          if (dist[ik] + dist[kj] < dist[ij]) {
	            dist[ij] = dist[ik] + dist[kj];
	            next[ij] = next[ik];
	          }
	        }
	      }
	    }

	    var getArgEle = function getArgEle(ele) {
	      return (string(ele) ? cy.filter(ele) : ele)[0];
	    };

	    var indexOfArgEle = function indexOfArgEle(ele) {
	      return indexOf(getArgEle(ele));
	    };

	    var res = {
	      distance: function distance(from, to) {
	        var i = indexOfArgEle(from);
	        var j = indexOfArgEle(to);
	        return dist[i * N + j];
	      },
	      path: function path(from, to) {
	        var i = indexOfArgEle(from);
	        var j = indexOfArgEle(to);
	        var fromNode = atIndex(i);

	        if (i === j) {
	          return fromNode.collection();
	        }

	        if (next[i * N + j] == null) {
	          return cy.collection();
	        }

	        var path = cy.collection();
	        var prev = i;
	        var edge;
	        path.merge(fromNode);

	        while (i !== j) {
	          prev = i;
	          i = next[i * N + j];
	          edge = edgeNext[prev * N + i];
	          path.merge(edge);
	          path.merge(atIndex(i));
	        }

	        return path;
	      }
	    };
	    return res;
	  } // floydWarshall

	}; // elesfn

	var bellmanFordDefaults = defaults({
	  weight: function weight(edge) {
	    return 1;
	  },
	  directed: false,
	  root: null
	});
	var elesfn$5 = {
	  // Implemented from pseudocode from wikipedia
	  bellmanFord: function bellmanFord(options) {
	    var _this = this;

	    var _bellmanFordDefaults = bellmanFordDefaults(options),
	        weight = _bellmanFordDefaults.weight,
	        directed = _bellmanFordDefaults.directed,
	        root = _bellmanFordDefaults.root;

	    var weightFn = weight;
	    var eles = this;
	    var cy = this.cy();

	    var _this$byGroup = this.byGroup(),
	        edges = _this$byGroup.edges,
	        nodes = _this$byGroup.nodes;

	    var numNodes = nodes.length;
	    var infoMap = new Map$1();
	    var hasNegativeWeightCycle = false;
	    var negativeWeightCycles = [];
	    root = cy.collection(root)[0]; // in case selector passed

	    edges.unmergeBy(function (edge) {
	      return edge.isLoop();
	    });
	    var numEdges = edges.length;

	    var getInfo = function getInfo(node) {
	      var obj = infoMap.get(node.id());

	      if (!obj) {
	        obj = {};
	        infoMap.set(node.id(), obj);
	      }

	      return obj;
	    };

	    var getNodeFromTo = function getNodeFromTo(to) {
	      return (string(to) ? cy.$(to) : to)[0];
	    };

	    var distanceTo = function distanceTo(to) {
	      return getInfo(getNodeFromTo(to)).dist;
	    };

	    var pathTo = function pathTo(to) {
	      var thisStart = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : root;
	      var end = getNodeFromTo(to);
	      var path = [];
	      var node = end;

	      for (;;) {
	        if (node == null) {
	          return _this.spawn();
	        }

	        var _getInfo = getInfo(node),
	            edge = _getInfo.edge,
	            pred = _getInfo.pred;

	        path.unshift(node[0]);

	        if (node.same(thisStart) && path.length > 0) {
	          break;
	        }

	        if (edge != null) {
	          path.unshift(edge);
	        }

	        node = pred;
	      }

	      return eles.spawn(path);
	    }; // Initializations { dist, pred, edge }


	    for (var i = 0; i < numNodes; i++) {
	      var node = nodes[i];
	      var info = getInfo(node);

	      if (node.same(root)) {
	        info.dist = 0;
	      } else {
	        info.dist = Infinity;
	      }

	      info.pred = null;
	      info.edge = null;
	    } // Edges relaxation


	    var replacedEdge = false;

	    var checkForEdgeReplacement = function checkForEdgeReplacement(node1, node2, edge, info1, info2, weight) {
	      var dist = info1.dist + weight;

	      if (dist < info2.dist && !edge.same(info1.edge)) {
	        info2.dist = dist;
	        info2.pred = node1;
	        info2.edge = edge;
	        replacedEdge = true;
	      }
	    };

	    for (var _i = 1; _i < numNodes; _i++) {
	      replacedEdge = false;

	      for (var e = 0; e < numEdges; e++) {
	        var edge = edges[e];
	        var src = edge.source();
	        var tgt = edge.target();

	        var _weight = weightFn(edge);

	        var srcInfo = getInfo(src);
	        var tgtInfo = getInfo(tgt);
	        checkForEdgeReplacement(src, tgt, edge, srcInfo, tgtInfo, _weight); // If undirected graph, we need to take into account the 'reverse' edge

	        if (!directed) {
	          checkForEdgeReplacement(tgt, src, edge, tgtInfo, srcInfo, _weight);
	        }
	      }

	      if (!replacedEdge) {
	        break;
	      }
	    }

	    if (replacedEdge) {
	      // Check for negative weight cycles
	      for (var _e = 0; _e < numEdges; _e++) {
	        var _edge = edges[_e];

	        var _src = _edge.source();

	        var _tgt = _edge.target();

	        var _weight2 = weightFn(_edge);

	        var srcDist = getInfo(_src).dist;
	        var tgtDist = getInfo(_tgt).dist;

	        if (srcDist + _weight2 < tgtDist || !directed && tgtDist + _weight2 < srcDist) {
	          warn('Graph contains a negative weight cycle for Bellman-Ford');
	          hasNegativeWeightCycle = true;
	          break;
	        }
	      }
	    }

	    return {
	      distanceTo: distanceTo,
	      pathTo: pathTo,
	      hasNegativeWeightCycle: hasNegativeWeightCycle,
	      negativeWeightCycles: negativeWeightCycles
	    };
	  } // bellmanFord

	}; // elesfn

	var sqrt2 = Math.sqrt(2); // Function which colapses 2 (meta) nodes into one
	// Updates the remaining edge lists
	// Receives as a paramater the edge which causes the collapse

	var collapse = function collapse(edgeIndex, nodeMap, remainingEdges) {
	  if (remainingEdges.length === 0) {
	    error("Karger-Stein must be run on a connected (sub)graph");
	  }

	  var edgeInfo = remainingEdges[edgeIndex];
	  var sourceIn = edgeInfo[1];
	  var targetIn = edgeInfo[2];
	  var partition1 = nodeMap[sourceIn];
	  var partition2 = nodeMap[targetIn];
	  var newEdges = remainingEdges; // re-use array
	  // Delete all edges between partition1 and partition2

	  for (var i = newEdges.length - 1; i >= 0; i--) {
	    var edge = newEdges[i];
	    var src = edge[1];
	    var tgt = edge[2];

	    if (nodeMap[src] === partition1 && nodeMap[tgt] === partition2 || nodeMap[src] === partition2 && nodeMap[tgt] === partition1) {
	      newEdges.splice(i, 1);
	    }
	  } // All edges pointing to partition2 should now point to partition1


	  for (var _i = 0; _i < newEdges.length; _i++) {
	    var _edge = newEdges[_i];

	    if (_edge[1] === partition2) {
	      // Check source
	      newEdges[_i] = _edge.slice(); // copy

	      newEdges[_i][1] = partition1;
	    } else if (_edge[2] === partition2) {
	      // Check target
	      newEdges[_i] = _edge.slice(); // copy

	      newEdges[_i][2] = partition1;
	    }
	  } // Move all nodes from partition2 to partition1


	  for (var _i2 = 0; _i2 < nodeMap.length; _i2++) {
	    if (nodeMap[_i2] === partition2) {
	      nodeMap[_i2] = partition1;
	    }
	  }

	  return newEdges;
	}; // Contracts a graph until we reach a certain number of meta nodes


	var contractUntil = function contractUntil(metaNodeMap, remainingEdges, size, sizeLimit) {
	  while (size > sizeLimit) {
	    // Choose an edge randomly
	    var edgeIndex = Math.floor(Math.random() * remainingEdges.length); // Collapse graph based on edge

	    remainingEdges = collapse(edgeIndex, metaNodeMap, remainingEdges);
	    size--;
	  }

	  return remainingEdges;
	};

	var elesfn$6 = {
	  // Computes the minimum cut of an undirected graph
	  // Returns the correct answer with high probability
	  kargerStein: function kargerStein() {
	    var _this = this;

	    var _this$byGroup = this.byGroup(),
	        nodes = _this$byGroup.nodes,
	        edges = _this$byGroup.edges;

	    edges.unmergeBy(function (edge) {
	      return edge.isLoop();
	    });
	    var numNodes = nodes.length;
	    var numEdges = edges.length;
	    var numIter = Math.ceil(Math.pow(Math.log(numNodes) / Math.LN2, 2));
	    var stopSize = Math.floor(numNodes / sqrt2);

	    if (numNodes < 2) {
	      error('At least 2 nodes are required for Karger-Stein algorithm');
	      return undefined;
	    } // Now store edge destination as indexes
	    // Format for each edge (edge index, source node index, target node index)


	    var edgeIndexes = [];

	    for (var i = 0; i < numEdges; i++) {
	      var e = edges[i];
	      edgeIndexes.push([i, nodes.indexOf(e.source()), nodes.indexOf(e.target())]);
	    } // We will store the best cut found here


	    var minCutSize = Infinity;
	    var minCutEdgeIndexes = [];
	    var minCutNodeMap = new Array(numNodes); // Initial meta node partition

	    var metaNodeMap = new Array(numNodes);
	    var metaNodeMap2 = new Array(numNodes);

	    var copyNodesMap = function copyNodesMap(from, to) {
	      for (var _i3 = 0; _i3 < numNodes; _i3++) {
	        to[_i3] = from[_i3];
	      }
	    }; // Main loop


	    for (var iter = 0; iter <= numIter; iter++) {
	      // Reset meta node partition
	      for (var _i4 = 0; _i4 < numNodes; _i4++) {
	        metaNodeMap[_i4] = _i4;
	      } // Contract until stop point (stopSize nodes)


	      var edgesState = contractUntil(metaNodeMap, edgeIndexes.slice(), numNodes, stopSize);
	      var edgesState2 = edgesState.slice(); // copy
	      // Create a copy of the colapsed nodes state

	      copyNodesMap(metaNodeMap, metaNodeMap2); // Run 2 iterations starting in the stop state

	      var res1 = contractUntil(metaNodeMap, edgesState, stopSize, 2);
	      var res2 = contractUntil(metaNodeMap2, edgesState2, stopSize, 2); // Is any of the 2 results the best cut so far?

	      if (res1.length <= res2.length && res1.length < minCutSize) {
	        minCutSize = res1.length;
	        minCutEdgeIndexes = res1;
	        copyNodesMap(metaNodeMap, minCutNodeMap);
	      } else if (res2.length <= res1.length && res2.length < minCutSize) {
	        minCutSize = res2.length;
	        minCutEdgeIndexes = res2;
	        copyNodesMap(metaNodeMap2, minCutNodeMap);
	      }
	    } // end of main loop
	    // Construct result


	    var cut = this.spawn(minCutEdgeIndexes.map(function (e) {
	      return edges[e[0]];
	    }));
	    var partition1 = this.spawn();
	    var partition2 = this.spawn(); // traverse metaNodeMap for best cut

	    var witnessNodePartition = minCutNodeMap[0];

	    for (var _i5 = 0; _i5 < minCutNodeMap.length; _i5++) {
	      var partitionId = minCutNodeMap[_i5];
	      var node = nodes[_i5];

	      if (partitionId === witnessNodePartition) {
	        partition1.merge(node);
	      } else {
	        partition2.merge(node);
	      }
	    } // construct components corresponding to each disjoint subset of nodes


	    var constructComponent = function constructComponent(subset) {
	      var component = _this.spawn();

	      subset.forEach(function (node) {
	        component.merge(node);
	        node.connectedEdges().forEach(function (edge) {
	          // ensure edge is within calling collection and edge is not in cut
	          if (_this.contains(edge) && !cut.contains(edge)) {
	            component.merge(edge);
	          }
	        });
	      });
	      return component;
	    };

	    var components = [constructComponent(partition1), constructComponent(partition2)];
	    var ret = {
	      cut: cut,
	      components: components,
	      // n.b. partitions are included to be compatible with the old api spec
	      // (could be removed in a future major version)
	      partition1: partition1,
	      partition2: partition2
	    };
	    return ret;
	  }
	}; // elesfn

	var copyPosition = function copyPosition(p) {
	  return {
	    x: p.x,
	    y: p.y
	  };
	};
	var modelToRenderedPosition = function modelToRenderedPosition(p, zoom, pan) {
	  return {
	    x: p.x * zoom + pan.x,
	    y: p.y * zoom + pan.y
	  };
	};
	var renderedToModelPosition = function renderedToModelPosition(p, zoom, pan) {
	  return {
	    x: (p.x - pan.x) / zoom,
	    y: (p.y - pan.y) / zoom
	  };
	};
	var array2point = function array2point(arr) {
	  return {
	    x: arr[0],
	    y: arr[1]
	  };
	};
	var min = function min(arr) {
	  var begin = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
	  var end = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : arr.length;
	  var min = Infinity;

	  for (var i = begin; i < end; i++) {
	    var val = arr[i];

	    if (isFinite(val)) {
	      min = Math.min(val, min);
	    }
	  }

	  return min;
	};
	var max = function max(arr) {
	  var begin = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
	  var end = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : arr.length;
	  var max = -Infinity;

	  for (var i = begin; i < end; i++) {
	    var val = arr[i];

	    if (isFinite(val)) {
	      max = Math.max(val, max);
	    }
	  }

	  return max;
	};
	var mean = function mean(arr) {
	  var begin = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
	  var end = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : arr.length;
	  var total = 0;
	  var n = 0;

	  for (var i = begin; i < end; i++) {
	    var val = arr[i];

	    if (isFinite(val)) {
	      total += val;
	      n++;
	    }
	  }

	  return total / n;
	};
	var median = function median(arr) {
	  var begin = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
	  var end = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : arr.length;
	  var copy = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
	  var sort = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;
	  var includeHoles = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;

	  if (copy) {
	    arr = arr.slice(begin, end);
	  } else {
	    if (end < arr.length) {
	      arr.splice(end, arr.length - end);
	    }

	    if (begin > 0) {
	      arr.splice(0, begin);
	    }
	  } // all non finite (e.g. Infinity, NaN) elements must be -Infinity so they go to the start


	  var off = 0; // offset from non-finite values

	  for (var i = arr.length - 1; i >= 0; i--) {
	    var v = arr[i];

	    if (includeHoles) {
	      if (!isFinite(v)) {
	        arr[i] = -Infinity;
	        off++;
	      }
	    } else {
	      // just remove it if we don't want to consider holes
	      arr.splice(i, 1);
	    }
	  }

	  if (sort) {
	    arr.sort(function (a, b) {
	      return a - b;
	    }); // requires copy = true if you don't want to change the orig
	  }

	  var len = arr.length;
	  var mid = Math.floor(len / 2);

	  if (len % 2 !== 0) {
	    return arr[mid + 1 + off];
	  } else {
	    return (arr[mid - 1 + off] + arr[mid + off]) / 2;
	  }
	};
	var deg2rad = function deg2rad(deg) {
	  return Math.PI * deg / 180;
	};
	var getAngleFromDisp = function getAngleFromDisp(dispX, dispY) {
	  return Math.atan2(dispY, dispX) - Math.PI / 2;
	};
	var log2 = Math.log2 || function (n) {
	  return Math.log(n) / Math.log(2);
	};
	var signum = function signum(x) {
	  if (x > 0) {
	    return 1;
	  } else if (x < 0) {
	    return -1;
	  } else {
	    return 0;
	  }
	};
	var dist = function dist(p1, p2) {
	  return Math.sqrt(sqdist(p1, p2));
	};
	var sqdist = function sqdist(p1, p2) {
	  var dx = p2.x - p1.x;
	  var dy = p2.y - p1.y;
	  return dx * dx + dy * dy;
	};
	var inPlaceSumNormalize = function inPlaceSumNormalize(v) {
	  var length = v.length; // First, get sum of all elements

	  var total = 0;

	  for (var i = 0; i < length; i++) {
	    total += v[i];
	  } // Now, divide each by the sum of all elements


	  for (var _i = 0; _i < length; _i++) {
	    v[_i] = v[_i] / total;
	  }

	  return v;
	};

	var qbezierAt = function qbezierAt(p0, p1, p2, t) {
	  return (1 - t) * (1 - t) * p0 + 2 * (1 - t) * t * p1 + t * t * p2;
	};
	var qbezierPtAt = function qbezierPtAt(p0, p1, p2, t) {
	  return {
	    x: qbezierAt(p0.x, p1.x, p2.x, t),
	    y: qbezierAt(p0.y, p1.y, p2.y, t)
	  };
	};
	var lineAt = function lineAt(p0, p1, t, d) {
	  var vec = {
	    x: p1.x - p0.x,
	    y: p1.y - p0.y
	  };
	  var vecDist = dist(p0, p1);
	  var normVec = {
	    x: vec.x / vecDist,
	    y: vec.y / vecDist
	  };
	  t = t == null ? 0 : t;
	  d = d != null ? d : t * vecDist;
	  return {
	    x: p0.x + normVec.x * d,
	    y: p0.y + normVec.y * d
	  };
	};
	var bound = function bound(min, val, max) {
	  return Math.max(min, Math.min(max, val));
	}; // makes a full bb (x1, y1, x2, y2, w, h) from implicit params

	var makeBoundingBox = function makeBoundingBox(bb) {
	  if (bb == null) {
	    return {
	      x1: Infinity,
	      y1: Infinity,
	      x2: -Infinity,
	      y2: -Infinity,
	      w: 0,
	      h: 0
	    };
	  } else if (bb.x1 != null && bb.y1 != null) {
	    if (bb.x2 != null && bb.y2 != null && bb.x2 >= bb.x1 && bb.y2 >= bb.y1) {
	      return {
	        x1: bb.x1,
	        y1: bb.y1,
	        x2: bb.x2,
	        y2: bb.y2,
	        w: bb.x2 - bb.x1,
	        h: bb.y2 - bb.y1
	      };
	    } else if (bb.w != null && bb.h != null && bb.w >= 0 && bb.h >= 0) {
	      return {
	        x1: bb.x1,
	        y1: bb.y1,
	        x2: bb.x1 + bb.w,
	        y2: bb.y1 + bb.h,
	        w: bb.w,
	        h: bb.h
	      };
	    }
	  }
	};
	var copyBoundingBox = function copyBoundingBox(bb) {
	  return {
	    x1: bb.x1,
	    x2: bb.x2,
	    w: bb.w,
	    y1: bb.y1,
	    y2: bb.y2,
	    h: bb.h
	  };
	};
	var clearBoundingBox = function clearBoundingBox(bb) {
	  bb.x1 = Infinity;
	  bb.y1 = Infinity;
	  bb.x2 = -Infinity;
	  bb.y2 = -Infinity;
	  bb.w = 0;
	  bb.h = 0;
	};
	var updateBoundingBox = function updateBoundingBox(bb1, bb2) {
	  // update bb1 with bb2 bounds
	  bb1.x1 = Math.min(bb1.x1, bb2.x1);
	  bb1.x2 = Math.max(bb1.x2, bb2.x2);
	  bb1.w = bb1.x2 - bb1.x1;
	  bb1.y1 = Math.min(bb1.y1, bb2.y1);
	  bb1.y2 = Math.max(bb1.y2, bb2.y2);
	  bb1.h = bb1.y2 - bb1.y1;
	};
	var expandBoundingBoxByPoint = function expandBoundingBoxByPoint(bb, x, y) {
	  bb.x1 = Math.min(bb.x1, x);
	  bb.x2 = Math.max(bb.x2, x);
	  bb.w = bb.x2 - bb.x1;
	  bb.y1 = Math.min(bb.y1, y);
	  bb.y2 = Math.max(bb.y2, y);
	  bb.h = bb.y2 - bb.y1;
	};
	var expandBoundingBox = function expandBoundingBox(bb) {
	  var padding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
	  bb.x1 -= padding;
	  bb.x2 += padding;
	  bb.y1 -= padding;
	  bb.y2 += padding;
	  bb.w = bb.x2 - bb.x1;
	  bb.h = bb.y2 - bb.y1;
	  return bb;
	};
	var expandBoundingBoxSides = function expandBoundingBoxSides(bb) {
	  var padding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [0];
	  var top, right, bottom, left;

	  if (padding.length === 1) {
	    top = right = bottom = left = padding[0];
	  } else if (padding.length === 2) {
	    top = bottom = padding[0];
	    left = right = padding[1];
	  } else if (padding.length === 4) {
	    var _padding = _slicedToArray(padding, 4);

	    top = _padding[0];
	    right = _padding[1];
	    bottom = _padding[2];
	    left = _padding[3];
	  }

	  bb.x1 -= left;
	  bb.x2 += right;
	  bb.y1 -= top;
	  bb.y2 += bottom;
	  bb.w = bb.x2 - bb.x1;
	  bb.h = bb.y2 - bb.y1;
	  return bb;
	};

	var assignBoundingBox = function assignBoundingBox(bb1, bb2) {
	  bb1.x1 = bb2.x1;
	  bb1.y1 = bb2.y1;
	  bb1.x2 = bb2.x2;
	  bb1.y2 = bb2.y2;
	  bb1.w = bb1.x2 - bb1.x1;
	  bb1.h = bb1.y2 - bb1.y1;
	};
	var assignShiftToBoundingBox = function assignShiftToBoundingBox(bb, delta) {
	  bb.x1 += delta.x;
	  bb.x2 += delta.x;
	  bb.y1 += delta.y;
	  bb.y2 += delta.y;
	};
	var boundingBoxesIntersect = function boundingBoxesIntersect(bb1, bb2) {
	  // case: one bb to right of other
	  if (bb1.x1 > bb2.x2) {
	    return false;
	  }

	  if (bb2.x1 > bb1.x2) {
	    return false;
	  } // case: one bb to left of other


	  if (bb1.x2 < bb2.x1) {
	    return false;
	  }

	  if (bb2.x2 < bb1.x1) {
	    return false;
	  } // case: one bb above other


	  if (bb1.y2 < bb2.y1) {
	    return false;
	  }

	  if (bb2.y2 < bb1.y1) {
	    return false;
	  } // case: one bb below other


	  if (bb1.y1 > bb2.y2) {
	    return false;
	  }

	  if (bb2.y1 > bb1.y2) {
	    return false;
	  } // otherwise, must have some overlap


	  return true;
	};
	var inBoundingBox = function inBoundingBox(bb, x, y) {
	  return bb.x1 <= x && x <= bb.x2 && bb.y1 <= y && y <= bb.y2;
	};
	var pointInBoundingBox = function pointInBoundingBox(bb, pt) {
	  return inBoundingBox(bb, pt.x, pt.y);
	};
	var boundingBoxInBoundingBox = function boundingBoxInBoundingBox(bb1, bb2) {
	  return inBoundingBox(bb1, bb2.x1, bb2.y1) && inBoundingBox(bb1, bb2.x2, bb2.y2);
	};
	var roundRectangleIntersectLine = function roundRectangleIntersectLine(x, y, nodeX, nodeY, width, height, padding) {
	  var cornerRadius = getRoundRectangleRadius(width, height);
	  var halfWidth = width / 2;
	  var halfHeight = height / 2; // Check intersections with straight line segments

	  var straightLineIntersections; // Top segment, left to right

	  {
	    var topStartX = nodeX - halfWidth + cornerRadius - padding;
	    var topStartY = nodeY - halfHeight - padding;
	    var topEndX = nodeX + halfWidth - cornerRadius + padding;
	    var topEndY = topStartY;
	    straightLineIntersections = finiteLinesIntersect(x, y, nodeX, nodeY, topStartX, topStartY, topEndX, topEndY, false);

	    if (straightLineIntersections.length > 0) {
	      return straightLineIntersections;
	    }
	  } // Right segment, top to bottom

	  {
	    var rightStartX = nodeX + halfWidth + padding;
	    var rightStartY = nodeY - halfHeight + cornerRadius - padding;
	    var rightEndX = rightStartX;
	    var rightEndY = nodeY + halfHeight - cornerRadius + padding;
	    straightLineIntersections = finiteLinesIntersect(x, y, nodeX, nodeY, rightStartX, rightStartY, rightEndX, rightEndY, false);

	    if (straightLineIntersections.length > 0) {
	      return straightLineIntersections;
	    }
	  } // Bottom segment, left to right

	  {
	    var bottomStartX = nodeX - halfWidth + cornerRadius - padding;
	    var bottomStartY = nodeY + halfHeight + padding;
	    var bottomEndX = nodeX + halfWidth - cornerRadius + padding;
	    var bottomEndY = bottomStartY;
	    straightLineIntersections = finiteLinesIntersect(x, y, nodeX, nodeY, bottomStartX, bottomStartY, bottomEndX, bottomEndY, false);

	    if (straightLineIntersections.length > 0) {
	      return straightLineIntersections;
	    }
	  } // Left segment, top to bottom

	  {
	    var leftStartX = nodeX - halfWidth - padding;
	    var leftStartY = nodeY - halfHeight + cornerRadius - padding;
	    var leftEndX = leftStartX;
	    var leftEndY = nodeY + halfHeight - cornerRadius + padding;
	    straightLineIntersections = finiteLinesIntersect(x, y, nodeX, nodeY, leftStartX, leftStartY, leftEndX, leftEndY, false);

	    if (straightLineIntersections.length > 0) {
	      return straightLineIntersections;
	    }
	  } // Check intersections with arc segments

	  var arcIntersections; // Top Left

	  {
	    var topLeftCenterX = nodeX - halfWidth + cornerRadius;
	    var topLeftCenterY = nodeY - halfHeight + cornerRadius;
	    arcIntersections = intersectLineCircle(x, y, nodeX, nodeY, topLeftCenterX, topLeftCenterY, cornerRadius + padding); // Ensure the intersection is on the desired quarter of the circle

	    if (arcIntersections.length > 0 && arcIntersections[0] <= topLeftCenterX && arcIntersections[1] <= topLeftCenterY) {
	      return [arcIntersections[0], arcIntersections[1]];
	    }
	  } // Top Right

	  {
	    var topRightCenterX = nodeX + halfWidth - cornerRadius;
	    var topRightCenterY = nodeY - halfHeight + cornerRadius;
	    arcIntersections = intersectLineCircle(x, y, nodeX, nodeY, topRightCenterX, topRightCenterY, cornerRadius + padding); // Ensure the intersection is on the desired quarter of the circle

	    if (arcIntersections.length > 0 && arcIntersections[0] >= topRightCenterX && arcIntersections[1] <= topRightCenterY) {
	      return [arcIntersections[0], arcIntersections[1]];
	    }
	  } // Bottom Right

	  {
	    var bottomRightCenterX = nodeX + halfWidth - cornerRadius;
	    var bottomRightCenterY = nodeY + halfHeight - cornerRadius;
	    arcIntersections = intersectLineCircle(x, y, nodeX, nodeY, bottomRightCenterX, bottomRightCenterY, cornerRadius + padding); // Ensure the intersection is on the desired quarter of the circle

	    if (arcIntersections.length > 0 && arcIntersections[0] >= bottomRightCenterX && arcIntersections[1] >= bottomRightCenterY) {
	      return [arcIntersections[0], arcIntersections[1]];
	    }
	  } // Bottom Left

	  {
	    var bottomLeftCenterX = nodeX - halfWidth + cornerRadius;
	    var bottomLeftCenterY = nodeY + halfHeight - cornerRadius;
	    arcIntersections = intersectLineCircle(x, y, nodeX, nodeY, bottomLeftCenterX, bottomLeftCenterY, cornerRadius + padding); // Ensure the intersection is on the desired quarter of the circle

	    if (arcIntersections.length > 0 && arcIntersections[0] <= bottomLeftCenterX && arcIntersections[1] >= bottomLeftCenterY) {
	      return [arcIntersections[0], arcIntersections[1]];
	    }
	  }
	  return []; // if nothing
	};
	var inLineVicinity = function inLineVicinity(x, y, lx1, ly1, lx2, ly2, tolerance) {
	  var t = tolerance;
	  var x1 = Math.min(lx1, lx2);
	  var x2 = Math.max(lx1, lx2);
	  var y1 = Math.min(ly1, ly2);
	  var y2 = Math.max(ly1, ly2);
	  return x1 - t <= x && x <= x2 + t && y1 - t <= y && y <= y2 + t;
	};
	var inBezierVicinity = function inBezierVicinity(x, y, x1, y1, x2, y2, x3, y3, tolerance) {
	  var bb = {
	    x1: Math.min(x1, x3, x2) - tolerance,
	    x2: Math.max(x1, x3, x2) + tolerance,
	    y1: Math.min(y1, y3, y2) - tolerance,
	    y2: Math.max(y1, y3, y2) + tolerance
	  }; // if outside the rough bounding box for the bezier, then it can't be a hit

	  if (x < bb.x1 || x > bb.x2 || y < bb.y1 || y > bb.y2) {
	    // console.log('bezier out of rough bb')
	    return false;
	  } else {
	    // console.log('do more expensive check');
	    return true;
	  }
	};
	var solveQuadratic = function solveQuadratic(a, b, c, val) {
	  c -= val;
	  var r = b * b - 4 * a * c;

	  if (r < 0) {
	    return [];
	  }

	  var sqrtR = Math.sqrt(r);
	  var denom = 2 * a;
	  var root1 = (-b + sqrtR) / denom;
	  var root2 = (-b - sqrtR) / denom;
	  return [root1, root2];
	};
	var solveCubic = function solveCubic(a, b, c, d, result) {
	  // Solves a cubic function, returns root in form [r1, i1, r2, i2, r3, i3], where
	  // r is the real component, i is the imaginary component
	  // An implementation of the Cardano method from the year 1545
	  // http://en.wikipedia.org/wiki/Cubic_function#The_nature_of_the_roots
	  var epsilon = 0.00001; // avoid division by zero while keeping the overall expression close in value

	  if (a === 0) {
	    a = epsilon;
	  }

	  b /= a;
	  c /= a;
	  d /= a;
	  var discriminant, q, r, dum1, s, t, term1, r13;
	  q = (3.0 * c - b * b) / 9.0;
	  r = -(27.0 * d) + b * (9.0 * c - 2.0 * (b * b));
	  r /= 54.0;
	  discriminant = q * q * q + r * r;
	  result[1] = 0;
	  term1 = b / 3.0;

	  if (discriminant > 0) {
	    s = r + Math.sqrt(discriminant);
	    s = s < 0 ? -Math.pow(-s, 1.0 / 3.0) : Math.pow(s, 1.0 / 3.0);
	    t = r - Math.sqrt(discriminant);
	    t = t < 0 ? -Math.pow(-t, 1.0 / 3.0) : Math.pow(t, 1.0 / 3.0);
	    result[0] = -term1 + s + t;
	    term1 += (s + t) / 2.0;
	    result[4] = result[2] = -term1;
	    term1 = Math.sqrt(3.0) * (-t + s) / 2;
	    result[3] = term1;
	    result[5] = -term1;
	    return;
	  }

	  result[5] = result[3] = 0;

	  if (discriminant === 0) {
	    r13 = r < 0 ? -Math.pow(-r, 1.0 / 3.0) : Math.pow(r, 1.0 / 3.0);
	    result[0] = -term1 + 2.0 * r13;
	    result[4] = result[2] = -(r13 + term1);
	    return;
	  }

	  q = -q;
	  dum1 = q * q * q;
	  dum1 = Math.acos(r / Math.sqrt(dum1));
	  r13 = 2.0 * Math.sqrt(q);
	  result[0] = -term1 + r13 * Math.cos(dum1 / 3.0);
	  result[2] = -term1 + r13 * Math.cos((dum1 + 2.0 * Math.PI) / 3.0);
	  result[4] = -term1 + r13 * Math.cos((dum1 + 4.0 * Math.PI) / 3.0);
	  return;
	};
	var sqdistToQuadraticBezier = function sqdistToQuadraticBezier(x, y, x1, y1, x2, y2, x3, y3) {
	  // Find minimum distance by using the minimum of the distance
	  // function between the given point and the curve
	  // This gives the coefficients of the resulting cubic equation
	  // whose roots tell us where a possible minimum is
	  // (Coefficients are divided by 4)
	  var a = 1.0 * x1 * x1 - 4 * x1 * x2 + 2 * x1 * x3 + 4 * x2 * x2 - 4 * x2 * x3 + x3 * x3 + y1 * y1 - 4 * y1 * y2 + 2 * y1 * y3 + 4 * y2 * y2 - 4 * y2 * y3 + y3 * y3;
	  var b = 1.0 * 9 * x1 * x2 - 3 * x1 * x1 - 3 * x1 * x3 - 6 * x2 * x2 + 3 * x2 * x3 + 9 * y1 * y2 - 3 * y1 * y1 - 3 * y1 * y3 - 6 * y2 * y2 + 3 * y2 * y3;
	  var c = 1.0 * 3 * x1 * x1 - 6 * x1 * x2 + x1 * x3 - x1 * x + 2 * x2 * x2 + 2 * x2 * x - x3 * x + 3 * y1 * y1 - 6 * y1 * y2 + y1 * y3 - y1 * y + 2 * y2 * y2 + 2 * y2 * y - y3 * y;
	  var d = 1.0 * x1 * x2 - x1 * x1 + x1 * x - x2 * x + y1 * y2 - y1 * y1 + y1 * y - y2 * y; // debug("coefficients: " + a / a + ", " + b / a + ", " + c / a + ", " + d / a);

	  var roots = []; // Use the cubic solving algorithm

	  solveCubic(a, b, c, d, roots);
	  var zeroThreshold = 0.0000001;
	  var params = [];

	  for (var index = 0; index < 6; index += 2) {
	    if (Math.abs(roots[index + 1]) < zeroThreshold && roots[index] >= 0 && roots[index] <= 1.0) {
	      params.push(roots[index]);
	    }
	  }

	  params.push(1.0);
	  params.push(0.0);
	  var minDistanceSquared = -1;
	  var curX, curY, distSquared;

	  for (var i = 0; i < params.length; i++) {
	    curX = Math.pow(1.0 - params[i], 2.0) * x1 + 2.0 * (1 - params[i]) * params[i] * x2 + params[i] * params[i] * x3;
	    curY = Math.pow(1 - params[i], 2.0) * y1 + 2 * (1.0 - params[i]) * params[i] * y2 + params[i] * params[i] * y3;
	    distSquared = Math.pow(curX - x, 2) + Math.pow(curY - y, 2); // debug('distance for param ' + params[i] + ": " + Math.sqrt(distSquared));

	    if (minDistanceSquared >= 0) {
	      if (distSquared < minDistanceSquared) {
	        minDistanceSquared = distSquared;
	      }
	    } else {
	      minDistanceSquared = distSquared;
	    }
	  }

	  return minDistanceSquared;
	};
	var sqdistToFiniteLine = function sqdistToFiniteLine(x, y, x1, y1, x2, y2) {
	  var offset = [x - x1, y - y1];
	  var line = [x2 - x1, y2 - y1];
	  var lineSq = line[0] * line[0] + line[1] * line[1];
	  var hypSq = offset[0] * offset[0] + offset[1] * offset[1];
	  var dotProduct = offset[0] * line[0] + offset[1] * line[1];
	  var adjSq = dotProduct * dotProduct / lineSq;

	  if (dotProduct < 0) {
	    return hypSq;
	  }

	  if (adjSq > lineSq) {
	    return (x - x2) * (x - x2) + (y - y2) * (y - y2);
	  }

	  return hypSq - adjSq;
	};
	var pointInsidePolygonPoints = function pointInsidePolygonPoints(x, y, points) {
	  var x1, y1, x2, y2;
	  var y3; // Intersect with vertical line through (x, y)

	  var up = 0; // let down = 0;

	  for (var i = 0; i < points.length / 2; i++) {
	    x1 = points[i * 2];
	    y1 = points[i * 2 + 1];

	    if (i + 1 < points.length / 2) {
	      x2 = points[(i + 1) * 2];
	      y2 = points[(i + 1) * 2 + 1];
	    } else {
	      x2 = points[(i + 1 - points.length / 2) * 2];
	      y2 = points[(i + 1 - points.length / 2) * 2 + 1];
	    }

	    if (x1 == x && x2 == x) ; else if (x1 >= x && x >= x2 || x1 <= x && x <= x2) {
	      y3 = (x - x1) / (x2 - x1) * (y2 - y1) + y1;

	      if (y3 > y) {
	        up++;
	      } // if( y3 < y ){
	      // down++;
	      // }

	    } else {
	      continue;
	    }
	  }

	  if (up % 2 === 0) {
	    return false;
	  } else {
	    return true;
	  }
	};
	var pointInsidePolygon = function pointInsidePolygon(x, y, basePoints, centerX, centerY, width, height, direction, padding) {
	  var transformedPoints = new Array(basePoints.length); // Gives negative angle

	  var angle;

	  if (direction[0] != null) {
	    angle = Math.atan(direction[1] / direction[0]);

	    if (direction[0] < 0) {
	      angle = angle + Math.PI / 2;
	    } else {
	      angle = -angle - Math.PI / 2;
	    }
	  } else {
	    angle = direction;
	  }

	  var cos = Math.cos(-angle);
	  var sin = Math.sin(-angle); //    console.log("base: " + basePoints);

	  for (var i = 0; i < transformedPoints.length / 2; i++) {
	    transformedPoints[i * 2] = width / 2 * (basePoints[i * 2] * cos - basePoints[i * 2 + 1] * sin);
	    transformedPoints[i * 2 + 1] = height / 2 * (basePoints[i * 2 + 1] * cos + basePoints[i * 2] * sin);
	    transformedPoints[i * 2] += centerX;
	    transformedPoints[i * 2 + 1] += centerY;
	  }

	  var points;

	  if (padding > 0) {
	    var expandedLineSet = expandPolygon(transformedPoints, -padding);
	    points = joinLines(expandedLineSet);
	  } else {
	    points = transformedPoints;
	  }

	  return pointInsidePolygonPoints(x, y, points);
	};
	var pointInsideRoundPolygon = function pointInsideRoundPolygon(x, y, basePoints, centerX, centerY, width, height) {
	  var cutPolygonPoints = new Array(basePoints.length);
	  var halfW = width / 2;
	  var halfH = height / 2;
	  var cornerRadius = getRoundPolygonRadius(width, height);
	  var squaredCornerRadius = cornerRadius * cornerRadius;

	  for (var i = 0; i < basePoints.length / 4; i++) {
	    var sourceUv = void 0,
	        destUv = void 0;

	    if (i === 0) {
	      sourceUv = basePoints.length - 2;
	    } else {
	      sourceUv = i * 4 - 2;
	    }

	    destUv = i * 4 + 2;
	    var px = centerX + halfW * basePoints[i * 4];
	    var py = centerY + halfH * basePoints[i * 4 + 1];
	    var cosTheta = -basePoints[sourceUv] * basePoints[destUv] - basePoints[sourceUv + 1] * basePoints[destUv + 1];
	    var offset = cornerRadius / Math.tan(Math.acos(cosTheta) / 2);
	    var cp0x = px - offset * basePoints[sourceUv];
	    var cp0y = py - offset * basePoints[sourceUv + 1];
	    var cp1x = px + offset * basePoints[destUv];
	    var cp1y = py + offset * basePoints[destUv + 1];
	    cutPolygonPoints[i * 4] = cp0x;
	    cutPolygonPoints[i * 4 + 1] = cp0y;
	    cutPolygonPoints[i * 4 + 2] = cp1x;
	    cutPolygonPoints[i * 4 + 3] = cp1y;
	    var orthx = basePoints[sourceUv + 1];
	    var orthy = -basePoints[sourceUv];
	    var cosAlpha = orthx * basePoints[destUv] + orthy * basePoints[destUv + 1];

	    if (cosAlpha < 0) {
	      orthx *= -1;
	      orthy *= -1;
	    }

	    var cx = cp0x + orthx * cornerRadius;
	    var cy = cp0y + orthy * cornerRadius;
	    var squaredDistance = Math.pow(cx - x, 2) + Math.pow(cy - y, 2);

	    if (squaredDistance <= squaredCornerRadius) {
	      return true;
	    }
	  }

	  return pointInsidePolygonPoints(x, y, cutPolygonPoints);
	};
	var joinLines = function joinLines(lineSet) {
	  var vertices = new Array(lineSet.length / 2);
	  var currentLineStartX, currentLineStartY, currentLineEndX, currentLineEndY;
	  var nextLineStartX, nextLineStartY, nextLineEndX, nextLineEndY;

	  for (var i = 0; i < lineSet.length / 4; i++) {
	    currentLineStartX = lineSet[i * 4];
	    currentLineStartY = lineSet[i * 4 + 1];
	    currentLineEndX = lineSet[i * 4 + 2];
	    currentLineEndY = lineSet[i * 4 + 3];

	    if (i < lineSet.length / 4 - 1) {
	      nextLineStartX = lineSet[(i + 1) * 4];
	      nextLineStartY = lineSet[(i + 1) * 4 + 1];
	      nextLineEndX = lineSet[(i + 1) * 4 + 2];
	      nextLineEndY = lineSet[(i + 1) * 4 + 3];
	    } else {
	      nextLineStartX = lineSet[0];
	      nextLineStartY = lineSet[1];
	      nextLineEndX = lineSet[2];
	      nextLineEndY = lineSet[3];
	    }

	    var intersection = finiteLinesIntersect(currentLineStartX, currentLineStartY, currentLineEndX, currentLineEndY, nextLineStartX, nextLineStartY, nextLineEndX, nextLineEndY, true);
	    vertices[i * 2] = intersection[0];
	    vertices[i * 2 + 1] = intersection[1];
	  }

	  return vertices;
	};
	var expandPolygon = function expandPolygon(points, pad) {
	  var expandedLineSet = new Array(points.length * 2);
	  var currentPointX, currentPointY, nextPointX, nextPointY;

	  for (var i = 0; i < points.length / 2; i++) {
	    currentPointX = points[i * 2];
	    currentPointY = points[i * 2 + 1];

	    if (i < points.length / 2 - 1) {
	      nextPointX = points[(i + 1) * 2];
	      nextPointY = points[(i + 1) * 2 + 1];
	    } else {
	      nextPointX = points[0];
	      nextPointY = points[1];
	    } // Current line: [currentPointX, currentPointY] to [nextPointX, nextPointY]
	    // Assume CCW polygon winding


	    var offsetX = nextPointY - currentPointY;
	    var offsetY = -(nextPointX - currentPointX); // Normalize

	    var offsetLength = Math.sqrt(offsetX * offsetX + offsetY * offsetY);
	    var normalizedOffsetX = offsetX / offsetLength;
	    var normalizedOffsetY = offsetY / offsetLength;
	    expandedLineSet[i * 4] = currentPointX + normalizedOffsetX * pad;
	    expandedLineSet[i * 4 + 1] = currentPointY + normalizedOffsetY * pad;
	    expandedLineSet[i * 4 + 2] = nextPointX + normalizedOffsetX * pad;
	    expandedLineSet[i * 4 + 3] = nextPointY + normalizedOffsetY * pad;
	  }

	  return expandedLineSet;
	};
	var intersectLineEllipse = function intersectLineEllipse(x, y, centerX, centerY, ellipseWradius, ellipseHradius) {
	  var dispX = centerX - x;
	  var dispY = centerY - y;
	  dispX /= ellipseWradius;
	  dispY /= ellipseHradius;
	  var len = Math.sqrt(dispX * dispX + dispY * dispY);
	  var newLength = len - 1;

	  if (newLength < 0) {
	    return [];
	  }

	  var lenProportion = newLength / len;
	  return [(centerX - x) * lenProportion + x, (centerY - y) * lenProportion + y];
	};
	var checkInEllipse = function checkInEllipse(x, y, width, height, centerX, centerY, padding) {
	  x -= centerX;
	  y -= centerY;
	  x /= width / 2 + padding;
	  y /= height / 2 + padding;
	  return x * x + y * y <= 1;
	}; // Returns intersections of increasing distance from line's start point

	var intersectLineCircle = function intersectLineCircle(x1, y1, x2, y2, centerX, centerY, radius) {
	  // Calculate d, direction vector of line
	  var d = [x2 - x1, y2 - y1]; // Direction vector of line

	  var f = [x1 - centerX, y1 - centerY];
	  var a = d[0] * d[0] + d[1] * d[1];
	  var b = 2 * (f[0] * d[0] + f[1] * d[1]);
	  var c = f[0] * f[0] + f[1] * f[1] - radius * radius;
	  var discriminant = b * b - 4 * a * c;

	  if (discriminant < 0) {
	    return [];
	  }

	  var t1 = (-b + Math.sqrt(discriminant)) / (2 * a);
	  var t2 = (-b - Math.sqrt(discriminant)) / (2 * a);
	  var tMin = Math.min(t1, t2);
	  var tMax = Math.max(t1, t2);
	  var inRangeParams = [];

	  if (tMin >= 0 && tMin <= 1) {
	    inRangeParams.push(tMin);
	  }

	  if (tMax >= 0 && tMax <= 1) {
	    inRangeParams.push(tMax);
	  }

	  if (inRangeParams.length === 0) {
	    return [];
	  }

	  var nearIntersectionX = inRangeParams[0] * d[0] + x1;
	  var nearIntersectionY = inRangeParams[0] * d[1] + y1;

	  if (inRangeParams.length > 1) {
	    if (inRangeParams[0] == inRangeParams[1]) {
	      return [nearIntersectionX, nearIntersectionY];
	    } else {
	      var farIntersectionX = inRangeParams[1] * d[0] + x1;
	      var farIntersectionY = inRangeParams[1] * d[1] + y1;
	      return [nearIntersectionX, nearIntersectionY, farIntersectionX, farIntersectionY];
	    }
	  } else {
	    return [nearIntersectionX, nearIntersectionY];
	  }
	};
	var midOfThree = function midOfThree(a, b, c) {
	  if (b <= a && a <= c || c <= a && a <= b) {
	    return a;
	  } else if (a <= b && b <= c || c <= b && b <= a) {
	    return b;
	  } else {
	    return c;
	  }
	}; // (x1,y1)=>(x2,y2) intersect with (x3,y3)=>(x4,y4)

	var finiteLinesIntersect = function finiteLinesIntersect(x1, y1, x2, y2, x3, y3, x4, y4, infiniteLines) {
	  var dx13 = x1 - x3;
	  var dx21 = x2 - x1;
	  var dx43 = x4 - x3;
	  var dy13 = y1 - y3;
	  var dy21 = y2 - y1;
	  var dy43 = y4 - y3;
	  var ua_t = dx43 * dy13 - dy43 * dx13;
	  var ub_t = dx21 * dy13 - dy21 * dx13;
	  var u_b = dy43 * dx21 - dx43 * dy21;

	  if (u_b !== 0) {
	    var ua = ua_t / u_b;
	    var ub = ub_t / u_b;
	    var flptThreshold = 0.001;

	    var _min = 0 - flptThreshold;

	    var _max = 1 + flptThreshold;

	    if (_min <= ua && ua <= _max && _min <= ub && ub <= _max) {
	      return [x1 + ua * dx21, y1 + ua * dy21];
	    } else {
	      if (!infiniteLines) {
	        return [];
	      } else {
	        return [x1 + ua * dx21, y1 + ua * dy21];
	      }
	    }
	  } else {
	    if (ua_t === 0 || ub_t === 0) {
	      // Parallel, coincident lines. Check if overlap
	      // Check endpoint of second line
	      if (midOfThree(x1, x2, x4) === x4) {
	        return [x4, y4];
	      } // Check start point of second line


	      if (midOfThree(x1, x2, x3) === x3) {
	        return [x3, y3];
	      } // Endpoint of first line


	      if (midOfThree(x3, x4, x2) === x2) {
	        return [x2, y2];
	      }

	      return [];
	    } else {
	      // Parallel, non-coincident
	      return [];
	    }
	  }
	}; // math.polygonIntersectLine( x, y, basePoints, centerX, centerY, width, height, padding )
	// intersect a node polygon (pts transformed)
	//
	// math.polygonIntersectLine( x, y, basePoints, centerX, centerY )
	// intersect the points (no transform)

	var polygonIntersectLine = function polygonIntersectLine(x, y, basePoints, centerX, centerY, width, height, padding) {
	  var intersections = [];
	  var intersection;
	  var transformedPoints = new Array(basePoints.length);
	  var doTransform = true;

	  if (width == null) {
	    doTransform = false;
	  }

	  var points;

	  if (doTransform) {
	    for (var i = 0; i < transformedPoints.length / 2; i++) {
	      transformedPoints[i * 2] = basePoints[i * 2] * width + centerX;
	      transformedPoints[i * 2 + 1] = basePoints[i * 2 + 1] * height + centerY;
	    }

	    if (padding > 0) {
	      var expandedLineSet = expandPolygon(transformedPoints, -padding);
	      points = joinLines(expandedLineSet);
	    } else {
	      points = transformedPoints;
	    }
	  } else {
	    points = basePoints;
	  }

	  var currentX, currentY, nextX, nextY;

	  for (var _i2 = 0; _i2 < points.length / 2; _i2++) {
	    currentX = points[_i2 * 2];
	    currentY = points[_i2 * 2 + 1];

	    if (_i2 < points.length / 2 - 1) {
	      nextX = points[(_i2 + 1) * 2];
	      nextY = points[(_i2 + 1) * 2 + 1];
	    } else {
	      nextX = points[0];
	      nextY = points[1];
	    }

	    intersection = finiteLinesIntersect(x, y, centerX, centerY, currentX, currentY, nextX, nextY);

	    if (intersection.length !== 0) {
	      intersections.push(intersection[0], intersection[1]);
	    }
	  }

	  return intersections;
	};
	var roundPolygonIntersectLine = function roundPolygonIntersectLine(x, y, basePoints, centerX, centerY, width, height, padding) {
	  var intersections = [];
	  var intersection;
	  var lines = new Array(basePoints.length);
	  var halfW = width / 2;
	  var halfH = height / 2;
	  var cornerRadius = getRoundPolygonRadius(width, height);

	  for (var i = 0; i < basePoints.length / 4; i++) {
	    var sourceUv = void 0,
	        destUv = void 0;

	    if (i === 0) {
	      sourceUv = basePoints.length - 2;
	    } else {
	      sourceUv = i * 4 - 2;
	    }

	    destUv = i * 4 + 2;
	    var px = centerX + halfW * basePoints[i * 4];
	    var py = centerY + halfH * basePoints[i * 4 + 1];
	    var cosTheta = -basePoints[sourceUv] * basePoints[destUv] - basePoints[sourceUv + 1] * basePoints[destUv + 1];
	    var offset = cornerRadius / Math.tan(Math.acos(cosTheta) / 2);
	    var cp0x = px - offset * basePoints[sourceUv];
	    var cp0y = py - offset * basePoints[sourceUv + 1];
	    var cp1x = px + offset * basePoints[destUv];
	    var cp1y = py + offset * basePoints[destUv + 1];

	    if (i === 0) {
	      lines[basePoints.length - 2] = cp0x;
	      lines[basePoints.length - 1] = cp0y;
	    } else {
	      lines[i * 4 - 2] = cp0x;
	      lines[i * 4 - 1] = cp0y;
	    }

	    lines[i * 4] = cp1x;
	    lines[i * 4 + 1] = cp1y;
	    var orthx = basePoints[sourceUv + 1];
	    var orthy = -basePoints[sourceUv];
	    var cosAlpha = orthx * basePoints[destUv] + orthy * basePoints[destUv + 1];

	    if (cosAlpha < 0) {
	      orthx *= -1;
	      orthy *= -1;
	    }

	    var cx = cp0x + orthx * cornerRadius;
	    var cy = cp0y + orthy * cornerRadius;
	    intersection = intersectLineCircle(x, y, centerX, centerY, cx, cy, cornerRadius);

	    if (intersection.length !== 0) {
	      intersections.push(intersection[0], intersection[1]);
	    }
	  }

	  for (var _i3 = 0; _i3 < lines.length / 4; _i3++) {
	    intersection = finiteLinesIntersect(x, y, centerX, centerY, lines[_i3 * 4], lines[_i3 * 4 + 1], lines[_i3 * 4 + 2], lines[_i3 * 4 + 3], false);

	    if (intersection.length !== 0) {
	      intersections.push(intersection[0], intersection[1]);
	    }
	  }

	  if (intersections.length > 2) {
	    var lowestIntersection = [intersections[0], intersections[1]];
	    var lowestSquaredDistance = Math.pow(lowestIntersection[0] - x, 2) + Math.pow(lowestIntersection[1] - y, 2);

	    for (var _i4 = 1; _i4 < intersections.length / 2; _i4++) {
	      var squaredDistance = Math.pow(intersections[_i4 * 2] - x, 2) + Math.pow(intersections[_i4 * 2 + 1] - y, 2);

	      if (squaredDistance <= lowestSquaredDistance) {
	        lowestIntersection[0] = intersections[_i4 * 2];
	        lowestIntersection[1] = intersections[_i4 * 2 + 1];
	        lowestSquaredDistance = squaredDistance;
	      }
	    }

	    return lowestIntersection;
	  }

	  return intersections;
	};
	var shortenIntersection = function shortenIntersection(intersection, offset, amount) {
	  var disp = [intersection[0] - offset[0], intersection[1] - offset[1]];
	  var length = Math.sqrt(disp[0] * disp[0] + disp[1] * disp[1]);
	  var lenRatio = (length - amount) / length;

	  if (lenRatio < 0) {
	    lenRatio = 0.00001;
	  }

	  return [offset[0] + lenRatio * disp[0], offset[1] + lenRatio * disp[1]];
	};
	var generateUnitNgonPointsFitToSquare = function generateUnitNgonPointsFitToSquare(sides, rotationRadians) {
	  var points = generateUnitNgonPoints(sides, rotationRadians);
	  points = fitPolygonToSquare(points);
	  return points;
	};
	var fitPolygonToSquare = function fitPolygonToSquare(points) {
	  var x, y;
	  var sides = points.length / 2;
	  var minX = Infinity,
	      minY = Infinity,
	      maxX = -Infinity,
	      maxY = -Infinity;

	  for (var i = 0; i < sides; i++) {
	    x = points[2 * i];
	    y = points[2 * i + 1];
	    minX = Math.min(minX, x);
	    maxX = Math.max(maxX, x);
	    minY = Math.min(minY, y);
	    maxY = Math.max(maxY, y);
	  } // stretch factors


	  var sx = 2 / (maxX - minX);
	  var sy = 2 / (maxY - minY);

	  for (var _i5 = 0; _i5 < sides; _i5++) {
	    x = points[2 * _i5] = points[2 * _i5] * sx;
	    y = points[2 * _i5 + 1] = points[2 * _i5 + 1] * sy;
	    minX = Math.min(minX, x);
	    maxX = Math.max(maxX, x);
	    minY = Math.min(minY, y);
	    maxY = Math.max(maxY, y);
	  }

	  if (minY < -1) {
	    for (var _i6 = 0; _i6 < sides; _i6++) {
	      y = points[2 * _i6 + 1] = points[2 * _i6 + 1] + (-1 - minY);
	    }
	  }

	  return points;
	};
	var generateUnitNgonPoints = function generateUnitNgonPoints(sides, rotationRadians) {
	  var increment = 1.0 / sides * 2 * Math.PI;
	  var startAngle = sides % 2 === 0 ? Math.PI / 2.0 + increment / 2.0 : Math.PI / 2.0;
	  startAngle += rotationRadians;
	  var points = new Array(sides * 2);
	  var currentAngle;

	  for (var i = 0; i < sides; i++) {
	    currentAngle = i * increment + startAngle;
	    points[2 * i] = Math.cos(currentAngle); // x

	    points[2 * i + 1] = Math.sin(-currentAngle); // y
	  }

	  return points;
	}; // Set the default radius, unless half of width or height is smaller than default

	var getRoundRectangleRadius = function getRoundRectangleRadius(width, height) {
	  return Math.min(width / 4, height / 4, 8);
	}; // Set the default radius

	var getRoundPolygonRadius = function getRoundPolygonRadius(width, height) {
	  return Math.min(width / 10, height / 10, 8);
	};
	var getCutRectangleCornerLength = function getCutRectangleCornerLength() {
	  return 8;
	};
	var bezierPtsToQuadCoeff = function bezierPtsToQuadCoeff(p0, p1, p2) {
	  return [p0 - 2 * p1 + p2, 2 * (p1 - p0), p0];
	}; // get curve width, height, and control point position offsets as a percentage of node height / width

	var getBarrelCurveConstants = function getBarrelCurveConstants(width, height) {
	  return {
	    heightOffset: Math.min(15, 0.05 * height),
	    widthOffset: Math.min(100, 0.25 * width),
	    ctrlPtOffsetPct: 0.05
	  };
	};

	var pageRankDefaults = defaults({
	  dampingFactor: 0.8,
	  precision: 0.000001,
	  iterations: 200,
	  weight: function weight(edge) {
	    return 1;
	  }
	});
	var elesfn$7 = {
	  pageRank: function pageRank(options) {
	    var _pageRankDefaults = pageRankDefaults(options),
	        dampingFactor = _pageRankDefaults.dampingFactor,
	        precision = _pageRankDefaults.precision,
	        iterations = _pageRankDefaults.iterations,
	        weight = _pageRankDefaults.weight;

	    var cy = this._private.cy;

	    var _this$byGroup = this.byGroup(),
	        nodes = _this$byGroup.nodes,
	        edges = _this$byGroup.edges;

	    var numNodes = nodes.length;
	    var numNodesSqd = numNodes * numNodes;
	    var numEdges = edges.length; // Construct transposed adjacency matrix
	    // First lets have a zeroed matrix of the right size
	    // We'll also keep track of the sum of each column

	    var matrix = new Array(numNodesSqd);
	    var columnSum = new Array(numNodes);
	    var additionalProb = (1 - dampingFactor) / numNodes; // Create null matrix

	    for (var i = 0; i < numNodes; i++) {
	      for (var j = 0; j < numNodes; j++) {
	        var n = i * numNodes + j;
	        matrix[n] = 0;
	      }

	      columnSum[i] = 0;
	    } // Now, process edges


	    for (var _i = 0; _i < numEdges; _i++) {
	      var edge = edges[_i];
	      var srcId = edge.data('source');
	      var tgtId = edge.data('target'); // Don't include loops in the matrix

	      if (srcId === tgtId) {
	        continue;
	      }

	      var s = nodes.indexOfId(srcId);
	      var t = nodes.indexOfId(tgtId);
	      var w = weight(edge);

	      var _n = t * numNodes + s; // Update matrix


	      matrix[_n] += w; // Update column sum

	      columnSum[s] += w;
	    } // Add additional probability based on damping factor
	    // Also, take into account columns that have sum = 0


	    var p = 1.0 / numNodes + additionalProb; // Shorthand
	    // Traverse matrix, column by column

	    for (var _j = 0; _j < numNodes; _j++) {
	      if (columnSum[_j] === 0) {
	        // No 'links' out from node jth, assume equal probability for each possible node
	        for (var _i2 = 0; _i2 < numNodes; _i2++) {
	          var _n2 = _i2 * numNodes + _j;

	          matrix[_n2] = p;
	        }
	      } else {
	        // Node jth has outgoing link, compute normalized probabilities
	        for (var _i3 = 0; _i3 < numNodes; _i3++) {
	          var _n3 = _i3 * numNodes + _j;

	          matrix[_n3] = matrix[_n3] / columnSum[_j] + additionalProb;
	        }
	      }
	    } // Compute dominant eigenvector using power method


	    var eigenvector = new Array(numNodes);
	    var temp = new Array(numNodes);
	    var previous; // Start with a vector of all 1's
	    // Also, initialize a null vector which will be used as shorthand

	    for (var _i4 = 0; _i4 < numNodes; _i4++) {
	      eigenvector[_i4] = 1;
	    }

	    for (var iter = 0; iter < iterations; iter++) {
	      // Temp array with all 0's
	      for (var _i5 = 0; _i5 < numNodes; _i5++) {
	        temp[_i5] = 0;
	      } // Multiply matrix with previous result


	      for (var _i6 = 0; _i6 < numNodes; _i6++) {
	        for (var _j2 = 0; _j2 < numNodes; _j2++) {
	          var _n4 = _i6 * numNodes + _j2;

	          temp[_i6] += matrix[_n4] * eigenvector[_j2];
	        }
	      }

	      inPlaceSumNormalize(temp);
	      previous = eigenvector;
	      eigenvector = temp;
	      temp = previous;
	      var diff = 0; // Compute difference (squared module) of both vectors

	      for (var _i7 = 0; _i7 < numNodes; _i7++) {
	        var delta = previous[_i7] - eigenvector[_i7];
	        diff += delta * delta;
	      } // If difference is less than the desired threshold, stop iterating


	      if (diff < precision) {
	        break;
	      }
	    } // Construct result


	    var res = {
	      rank: function rank(node) {
	        node = cy.collection(node)[0];
	        return eigenvector[nodes.indexOf(node)];
	      }
	    };
	    return res;
	  } // pageRank

	}; // elesfn

	var defaults$1 = defaults({
	  root: null,
	  weight: function weight(edge) {
	    return 1;
	  },
	  directed: false,
	  alpha: 0
	});
	var elesfn$8 = {
	  degreeCentralityNormalized: function degreeCentralityNormalized(options) {
	    options = defaults$1(options);
	    var cy = this.cy();
	    var nodes = this.nodes();
	    var numNodes = nodes.length;

	    if (!options.directed) {
	      var degrees = {};
	      var maxDegree = 0;

	      for (var i = 0; i < numNodes; i++) {
	        var node = nodes[i]; // add current node to the current options object and call degreeCentrality

	        options.root = node;
	        var currDegree = this.degreeCentrality(options);

	        if (maxDegree < currDegree.degree) {
	          maxDegree = currDegree.degree;
	        }

	        degrees[node.id()] = currDegree.degree;
	      }

	      return {
	        degree: function degree(node) {
	          if (maxDegree === 0) {
	            return 0;
	          }

	          if (string(node)) {
	            // from is a selector string
	            node = cy.filter(node);
	          }

	          return degrees[node.id()] / maxDegree;
	        }
	      };
	    } else {
	      var indegrees = {};
	      var outdegrees = {};
	      var maxIndegree = 0;
	      var maxOutdegree = 0;

	      for (var _i = 0; _i < numNodes; _i++) {
	        var _node = nodes[_i];

	        var id = _node.id(); // add current node to the current options object and call degreeCentrality


	        options.root = _node;

	        var _currDegree = this.degreeCentrality(options);

	        if (maxIndegree < _currDegree.indegree) maxIndegree = _currDegree.indegree;
	        if (maxOutdegree < _currDegree.outdegree) maxOutdegree = _currDegree.outdegree;
	        indegrees[id] = _currDegree.indegree;
	        outdegrees[id] = _currDegree.outdegree;
	      }

	      return {
	        indegree: function indegree(node) {
	          if (maxIndegree == 0) {
	            return 0;
	          }

	          if (string(node)) {
	            // from is a selector string
	            node = cy.filter(node);
	          }

	          return indegrees[node.id()] / maxIndegree;
	        },
	        outdegree: function outdegree(node) {
	          if (maxOutdegree === 0) {
	            return 0;
	          }

	          if (string(node)) {
	            // from is a selector string
	            node = cy.filter(node);
	          }

	          return outdegrees[node.id()] / maxOutdegree;
	        }
	      };
	    }
	  },
	  // degreeCentralityNormalized
	  // Implemented from the algorithm in Opsahl's paper
	  // "Node centrality in weighted networks: Generalizing degree and shortest paths"
	  // check the heading 2 "Degree"
	  degreeCentrality: function degreeCentrality(options) {
	    options = defaults$1(options);
	    var cy = this.cy();
	    var callingEles = this;
	    var _options = options,
	        root = _options.root,
	        weight = _options.weight,
	        directed = _options.directed,
	        alpha = _options.alpha;
	    root = cy.collection(root)[0];

	    if (!directed) {
	      var connEdges = root.connectedEdges().intersection(callingEles);
	      var k = connEdges.length;
	      var s = 0; // Now, sum edge weights

	      for (var i = 0; i < connEdges.length; i++) {
	        s += weight(connEdges[i]);
	      }

	      return {
	        degree: Math.pow(k, 1 - alpha) * Math.pow(s, alpha)
	      };
	    } else {
	      var edges = root.connectedEdges();
	      var incoming = edges.filter(function (edge) {
	        return edge.target().same(root) && callingEles.has(edge);
	      });
	      var outgoing = edges.filter(function (edge) {
	        return edge.source().same(root) && callingEles.has(edge);
	      });
	      var k_in = incoming.length;
	      var k_out = outgoing.length;
	      var s_in = 0;
	      var s_out = 0; // Now, sum incoming edge weights

	      for (var _i2 = 0; _i2 < incoming.length; _i2++) {
	        s_in += weight(incoming[_i2]);
	      } // Now, sum outgoing edge weights


	      for (var _i3 = 0; _i3 < outgoing.length; _i3++) {
	        s_out += weight(outgoing[_i3]);
	      }

	      return {
	        indegree: Math.pow(k_in, 1 - alpha) * Math.pow(s_in, alpha),
	        outdegree: Math.pow(k_out, 1 - alpha) * Math.pow(s_out, alpha)
	      };
	    }
	  } // degreeCentrality

	}; // elesfn
	// nice, short mathemathical alias

	elesfn$8.dc = elesfn$8.degreeCentrality;
	elesfn$8.dcn = elesfn$8.degreeCentralityNormalised = elesfn$8.degreeCentralityNormalized;

	var defaults$2 = defaults({
	  harmonic: true,
	  weight: function weight() {
	    return 1;
	  },
	  directed: false,
	  root: null
	});
	var elesfn$9 = {
	  closenessCentralityNormalized: function closenessCentralityNormalized(options) {
	    var _defaults = defaults$2(options),
	        harmonic = _defaults.harmonic,
	        weight = _defaults.weight,
	        directed = _defaults.directed;

	    var cy = this.cy();
	    var closenesses = {};
	    var maxCloseness = 0;
	    var nodes = this.nodes();
	    var fw = this.floydWarshall({
	      weight: weight,
	      directed: directed
	    }); // Compute closeness for every node and find the maximum closeness

	    for (var i = 0; i < nodes.length; i++) {
	      var currCloseness = 0;
	      var node_i = nodes[i];

	      for (var j = 0; j < nodes.length; j++) {
	        if (i !== j) {
	          var d = fw.distance(node_i, nodes[j]);

	          if (harmonic) {
	            currCloseness += 1 / d;
	          } else {
	            currCloseness += d;
	          }
	        }
	      }

	      if (!harmonic) {
	        currCloseness = 1 / currCloseness;
	      }

	      if (maxCloseness < currCloseness) {
	        maxCloseness = currCloseness;
	      }

	      closenesses[node_i.id()] = currCloseness;
	    }

	    return {
	      closeness: function closeness(node) {
	        if (maxCloseness == 0) {
	          return 0;
	        }

	        if (string(node)) {
	          // from is a selector string
	          node = cy.filter(node)[0].id();
	        } else {
	          // from is a node
	          node = node.id();
	        }

	        return closenesses[node] / maxCloseness;
	      }
	    };
	  },
	  // Implemented from pseudocode from wikipedia
	  closenessCentrality: function closenessCentrality(options) {
	    var _defaults2 = defaults$2(options),
	        root = _defaults2.root,
	        weight = _defaults2.weight,
	        directed = _defaults2.directed,
	        harmonic = _defaults2.harmonic;

	    root = this.filter(root)[0]; // we need distance from this node to every other node

	    var dijkstra = this.dijkstra({
	      root: root,
	      weight: weight,
	      directed: directed
	    });
	    var totalDistance = 0;
	    var nodes = this.nodes();

	    for (var i = 0; i < nodes.length; i++) {
	      var n = nodes[i];

	      if (!n.same(root)) {
	        var d = dijkstra.distanceTo(n);

	        if (harmonic) {
	          totalDistance += 1 / d;
	        } else {
	          totalDistance += d;
	        }
	      }
	    }

	    return harmonic ? totalDistance : 1 / totalDistance;
	  } // closenessCentrality

	}; // elesfn
	// nice, short mathemathical alias

	elesfn$9.cc = elesfn$9.closenessCentrality;
	elesfn$9.ccn = elesfn$9.closenessCentralityNormalised = elesfn$9.closenessCentralityNormalized;

	var defaults$3 = defaults({
	  weight: null,
	  directed: false
	});
	var elesfn$a = {
	  // Implemented from the algorithm in the paper "On Variants of Shortest-Path Betweenness Centrality and their Generic Computation" by Ulrik Brandes
	  betweennessCentrality: function betweennessCentrality(options) {
	    var _defaults = defaults$3(options),
	        directed = _defaults.directed,
	        weight = _defaults.weight;

	    var weighted = weight != null;
	    var cy = this.cy(); // starting

	    var V = this.nodes();
	    var A = {};
	    var _C = {};
	    var max = 0;
	    var C = {
	      set: function set(key, val) {
	        _C[key] = val;

	        if (val > max) {
	          max = val;
	        }
	      },
	      get: function get(key) {
	        return _C[key];
	      }
	    }; // A contains the neighborhoods of every node

	    for (var i = 0; i < V.length; i++) {
	      var v = V[i];
	      var vid = v.id();

	      if (directed) {
	        A[vid] = v.outgoers().nodes(); // get outgoers of every node
	      } else {
	        A[vid] = v.openNeighborhood().nodes(); // get neighbors of every node
	      }

	      C.set(vid, 0);
	    }

	    var _loop = function _loop(s) {
	      var sid = V[s].id();
	      var S = []; // stack

	      var P = {};
	      var g = {};
	      var d = {};
	      var Q = new Heap(function (a, b) {
	        return d[a] - d[b];
	      }); // queue
	      // init dictionaries

	      for (var _i = 0; _i < V.length; _i++) {
	        var _vid = V[_i].id();

	        P[_vid] = [];
	        g[_vid] = 0;
	        d[_vid] = Infinity;
	      }

	      g[sid] = 1; // sigma

	      d[sid] = 0; // distance to s

	      Q.push(sid);

	      while (!Q.empty()) {
	        var _v = Q.pop();

	        S.push(_v);

	        if (weighted) {
	          for (var j = 0; j < A[_v].length; j++) {
	            var w = A[_v][j];
	            var vEle = cy.getElementById(_v);
	            var edge = void 0;

	            if (vEle.edgesTo(w).length > 0) {
	              edge = vEle.edgesTo(w)[0];
	            } else {
	              edge = w.edgesTo(vEle)[0];
	            }

	            var edgeWeight = weight(edge);
	            w = w.id();

	            if (d[w] > d[_v] + edgeWeight) {
	              d[w] = d[_v] + edgeWeight;

	              if (Q.nodes.indexOf(w) < 0) {
	                //if w is not in Q
	                Q.push(w);
	              } else {
	                // update position if w is in Q
	                Q.updateItem(w);
	              }

	              g[w] = 0;
	              P[w] = [];
	            }

	            if (d[w] == d[_v] + edgeWeight) {
	              g[w] = g[w] + g[_v];
	              P[w].push(_v);
	            }
	          }
	        } else {
	          for (var _j = 0; _j < A[_v].length; _j++) {
	            var _w = A[_v][_j].id();

	            if (d[_w] == Infinity) {
	              Q.push(_w);
	              d[_w] = d[_v] + 1;
	            }

	            if (d[_w] == d[_v] + 1) {
	              g[_w] = g[_w] + g[_v];

	              P[_w].push(_v);
	            }
	          }
	        }
	      }

	      var e = {};

	      for (var _i2 = 0; _i2 < V.length; _i2++) {
	        e[V[_i2].id()] = 0;
	      }

	      while (S.length > 0) {
	        var _w2 = S.pop();

	        for (var _j2 = 0; _j2 < P[_w2].length; _j2++) {
	          var _v2 = P[_w2][_j2];
	          e[_v2] = e[_v2] + g[_v2] / g[_w2] * (1 + e[_w2]);

	          if (_w2 != V[s].id()) {
	            C.set(_w2, C.get(_w2) + e[_w2]);
	          }
	        }
	      }
	    };

	    for (var s = 0; s < V.length; s++) {
	      _loop(s);
	    }

	    var ret = {
	      betweenness: function betweenness(node) {
	        var id = cy.collection(node).id();
	        return C.get(id);
	      },
	      betweennessNormalized: function betweennessNormalized(node) {
	        if (max == 0) {
	          return 0;
	        }

	        var id = cy.collection(node).id();
	        return C.get(id) / max;
	      }
	    }; // alias

	    ret.betweennessNormalised = ret.betweennessNormalized;
	    return ret;
	  } // betweennessCentrality

	}; // elesfn
	// nice, short mathemathical alias

	elesfn$a.bc = elesfn$a.betweennessCentrality;

	// Implemented by Zoe Xi @zoexi for GSOC 2016
	/* eslint-disable no-unused-vars */

	var defaults$4 = defaults({
	  expandFactor: 2,
	  // affects time of computation and cluster granularity to some extent: M * M
	  inflateFactor: 2,
	  // affects cluster granularity (the greater the value, the more clusters): M(i,j) / E(j)
	  multFactor: 1,
	  // optional self loops for each node. Use a neutral value to improve cluster computations.
	  maxIterations: 20,
	  // maximum number of iterations of the MCL algorithm in a single run
	  attributes: [// attributes/features used to group nodes, ie. similarity values between nodes
	  function (edge) {
	    return 1;
	  }]
	});
	/* eslint-enable */

	var setOptions = function setOptions(options) {
	  return defaults$4(options);
	};
	/* eslint-enable */


	var getSimilarity = function getSimilarity(edge, attributes) {
	  var total = 0;

	  for (var i = 0; i < attributes.length; i++) {
	    total += attributes[i](edge);
	  }

	  return total;
	};

	var addLoops = function addLoops(M, n, val) {
	  for (var i = 0; i < n; i++) {
	    M[i * n + i] = val;
	  }
	};

	var normalize = function normalize(M, n) {
	  var sum;

	  for (var col = 0; col < n; col++) {
	    sum = 0;

	    for (var row = 0; row < n; row++) {
	      sum += M[row * n + col];
	    }

	    for (var _row = 0; _row < n; _row++) {
	      M[_row * n + col] = M[_row * n + col] / sum;
	    }
	  }
	}; // TODO: blocked matrix multiplication?


	var mmult = function mmult(A, B, n) {
	  var C = new Array(n * n);

	  for (var i = 0; i < n; i++) {
	    for (var j = 0; j < n; j++) {
	      C[i * n + j] = 0;
	    }

	    for (var k = 0; k < n; k++) {
	      for (var _j = 0; _j < n; _j++) {
	        C[i * n + _j] += A[i * n + k] * B[k * n + _j];
	      }
	    }
	  }

	  return C;
	};

	var expand = function expand(M, n, expandFactor
	/** power **/
	) {
	  var _M = M.slice(0);

	  for (var p = 1; p < expandFactor; p++) {
	    M = mmult(M, _M, n);
	  }

	  return M;
	};

	var inflate = function inflate(M, n, inflateFactor
	/** r **/
	) {
	  var _M = new Array(n * n); // M(i,j) ^ inflatePower


	  for (var i = 0; i < n * n; i++) {
	    _M[i] = Math.pow(M[i], inflateFactor);
	  }

	  normalize(_M, n);
	  return _M;
	};

	var hasConverged = function hasConverged(M, _M, n2, roundFactor) {
	  // Check that both matrices have the same elements (i,j)
	  for (var i = 0; i < n2; i++) {
	    var v1 = Math.round(M[i] * Math.pow(10, roundFactor)) / Math.pow(10, roundFactor); // truncate to 'roundFactor' decimal places

	    var v2 = Math.round(_M[i] * Math.pow(10, roundFactor)) / Math.pow(10, roundFactor);

	    if (v1 !== v2) {
	      return false;
	    }
	  }

	  return true;
	};

	var assign = function assign(M, n, nodes, cy) {
	  var clusters = [];

	  for (var i = 0; i < n; i++) {
	    var cluster = [];

	    for (var j = 0; j < n; j++) {
	      // Row-wise attractors and elements that they attract belong in same cluster
	      if (Math.round(M[i * n + j] * 1000) / 1000 > 0) {
	        cluster.push(nodes[j]);
	      }
	    }

	    if (cluster.length !== 0) {
	      clusters.push(cy.collection(cluster));
	    }
	  }

	  return clusters;
	};

	var isDuplicate = function isDuplicate(c1, c2) {
	  for (var i = 0; i < c1.length; i++) {
	    if (!c2[i] || c1[i].id() !== c2[i].id()) {
	      return false;
	    }
	  }

	  return true;
	};

	var removeDuplicates = function removeDuplicates(clusters) {
	  for (var i = 0; i < clusters.length; i++) {
	    for (var j = 0; j < clusters.length; j++) {
	      if (i != j && isDuplicate(clusters[i], clusters[j])) {
	        clusters.splice(j, 1);
	      }
	    }
	  }

	  return clusters;
	};

	var markovClustering = function markovClustering(options) {
	  var nodes = this.nodes();
	  var edges = this.edges();
	  var cy = this.cy(); // Set parameters of algorithm:

	  var opts = setOptions(options); // Map each node to its position in node array

	  var id2position = {};

	  for (var i = 0; i < nodes.length; i++) {
	    id2position[nodes[i].id()] = i;
	  } // Generate stochastic matrix M from input graph G (should be symmetric/undirected)


	  var n = nodes.length,
	      n2 = n * n;

	  var M = new Array(n2),
	      _M;

	  for (var _i = 0; _i < n2; _i++) {
	    M[_i] = 0;
	  }

	  for (var e = 0; e < edges.length; e++) {
	    var edge = edges[e];
	    var _i2 = id2position[edge.source().id()];
	    var j = id2position[edge.target().id()];
	    var sim = getSimilarity(edge, opts.attributes);
	    M[_i2 * n + j] += sim; // G should be symmetric and undirected

	    M[j * n + _i2] += sim;
	  } // Begin Markov cluster algorithm
	  // Step 1: Add self loops to each node, ie. add multFactor to matrix diagonal


	  addLoops(M, n, opts.multFactor); // Step 2: M = normalize( M );

	  normalize(M, n);
	  var isStillMoving = true;
	  var iterations = 0;

	  while (isStillMoving && iterations < opts.maxIterations) {
	    isStillMoving = false; // Step 3:

	    _M = expand(M, n, opts.expandFactor); // Step 4:

	    M = inflate(_M, n, opts.inflateFactor); // Step 5: check to see if ~steady state has been reached

	    if (!hasConverged(M, _M, n2, 4)) {
	      isStillMoving = true;
	    }

	    iterations++;
	  } // Build clusters from matrix


	  var clusters = assign(M, n, nodes, cy); // Remove duplicate clusters due to symmetry of graph and M matrix

	  clusters = removeDuplicates(clusters);
	  return clusters;
	};

	var markovClustering$1 = {
	  markovClustering: markovClustering,
	  mcl: markovClustering
	};

	// Common distance metrics for clustering algorithms

	var identity = function identity(x) {
	  return x;
	};

	var absDiff = function absDiff(p, q) {
	  return Math.abs(q - p);
	};

	var addAbsDiff = function addAbsDiff(total, p, q) {
	  return total + absDiff(p, q);
	};

	var addSquaredDiff = function addSquaredDiff(total, p, q) {
	  return total + Math.pow(q - p, 2);
	};

	var sqrt = function sqrt(x) {
	  return Math.sqrt(x);
	};

	var maxAbsDiff = function maxAbsDiff(currentMax, p, q) {
	  return Math.max(currentMax, absDiff(p, q));
	};

	var getDistance = function getDistance(length, getP, getQ, init, visit) {
	  var post = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : identity;
	  var ret = init;
	  var p, q;

	  for (var dim = 0; dim < length; dim++) {
	    p = getP(dim);
	    q = getQ(dim);
	    ret = visit(ret, p, q);
	  }

	  return post(ret);
	};

	var distances = {
	  euclidean: function euclidean(length, getP, getQ) {
	    if (length >= 2) {
	      return getDistance(length, getP, getQ, 0, addSquaredDiff, sqrt);
	    } else {
	      // for single attr case, more efficient to avoid sqrt
	      return getDistance(length, getP, getQ, 0, addAbsDiff);
	    }
	  },
	  squaredEuclidean: function squaredEuclidean(length, getP, getQ) {
	    return getDistance(length, getP, getQ, 0, addSquaredDiff);
	  },
	  manhattan: function manhattan(length, getP, getQ) {
	    return getDistance(length, getP, getQ, 0, addAbsDiff);
	  },
	  max: function max(length, getP, getQ) {
	    return getDistance(length, getP, getQ, -Infinity, maxAbsDiff);
	  }
	}; // in case the user accidentally doesn't use camel case

	distances['squared-euclidean'] = distances['squaredEuclidean'];
	distances['squaredeuclidean'] = distances['squaredEuclidean'];
	function clusteringDistance (method, length, getP, getQ, nodeP, nodeQ) {
	  var impl;

	  if (fn(method)) {
	    impl = method;
	  } else {
	    impl = distances[method] || distances.euclidean;
	  }

	  if (length === 0 && fn(method)) {
	    return impl(nodeP, nodeQ);
	  } else {
	    return impl(length, getP, getQ, nodeP, nodeQ);
	  }
	}

	var defaults$5 = defaults({
	  k: 2,
	  m: 2,
	  sensitivityThreshold: 0.0001,
	  distance: 'euclidean',
	  maxIterations: 10,
	  attributes: [],
	  testMode: false,
	  testCentroids: null
	});

	var setOptions$1 = function setOptions(options) {
	  return defaults$5(options);
	};
	/* eslint-enable */


	var getDist = function getDist(type, node, centroid, attributes, mode) {
	  var noNodeP = mode !== 'kMedoids';
	  var getP = noNodeP ? function (i) {
	    return centroid[i];
	  } : function (i) {
	    return attributes[i](centroid);
	  };

	  var getQ = function getQ(i) {
	    return attributes[i](node);
	  };

	  var nodeP = centroid;
	  var nodeQ = node;
	  return clusteringDistance(type, attributes.length, getP, getQ, nodeP, nodeQ);
	};

	var randomCentroids = function randomCentroids(nodes, k, attributes) {
	  var ndim = attributes.length;
	  var min = new Array(ndim);
	  var max = new Array(ndim);
	  var centroids = new Array(k);
	  var centroid = null; // Find min, max values for each attribute dimension

	  for (var i = 0; i < ndim; i++) {
	    min[i] = nodes.min(attributes[i]).value;
	    max[i] = nodes.max(attributes[i]).value;
	  } // Build k centroids, each represented as an n-dim feature vector


	  for (var c = 0; c < k; c++) {
	    centroid = [];

	    for (var _i = 0; _i < ndim; _i++) {
	      centroid[_i] = Math.random() * (max[_i] - min[_i]) + min[_i]; // random initial value
	    }

	    centroids[c] = centroid;
	  }

	  return centroids;
	};

	var classify = function classify(node, centroids, distance, attributes, type) {
	  var min = Infinity;
	  var index = 0;

	  for (var i = 0; i < centroids.length; i++) {
	    var dist = getDist(distance, node, centroids[i], attributes, type);

	    if (dist < min) {
	      min = dist;
	      index = i;
	    }
	  }

	  return index;
	};

	var buildCluster = function buildCluster(centroid, nodes, assignment) {
	  var cluster = [];
	  var node = null;

	  for (var n = 0; n < nodes.length; n++) {
	    node = nodes[n];

	    if (assignment[node.id()] === centroid) {
	      //console.log("Node " + node.id() + " is associated with medoid #: " + m);
	      cluster.push(node);
	    }
	  }

	  return cluster;
	};

	var haveValuesConverged = function haveValuesConverged(v1, v2, sensitivityThreshold) {
	  return Math.abs(v2 - v1) <= sensitivityThreshold;
	};

	var haveMatricesConverged = function haveMatricesConverged(v1, v2, sensitivityThreshold) {
	  for (var i = 0; i < v1.length; i++) {
	    for (var j = 0; j < v1[i].length; j++) {
	      var diff = Math.abs(v1[i][j] - v2[i][j]);

	      if (diff > sensitivityThreshold) {
	        return false;
	      }
	    }
	  }

	  return true;
	};

	var seenBefore = function seenBefore(node, medoids, n) {
	  for (var i = 0; i < n; i++) {
	    if (node === medoids[i]) return true;
	  }

	  return false;
	};

	var randomMedoids = function randomMedoids(nodes, k) {
	  var medoids = new Array(k); // For small data sets, the probability of medoid conflict is greater,
	  // so we need to check to see if we've already seen or chose this node before.

	  if (nodes.length < 50) {
	    // Randomly select k medoids from the n nodes
	    for (var i = 0; i < k; i++) {
	      var node = nodes[Math.floor(Math.random() * nodes.length)]; // If we've already chosen this node to be a medoid, don't choose it again (for small data sets).
	      // Instead choose a different random node.

	      while (seenBefore(node, medoids, i)) {
	        node = nodes[Math.floor(Math.random() * nodes.length)];
	      }

	      medoids[i] = node;
	    }
	  } else {
	    // Relatively large data set, so pretty safe to not check and just select random nodes
	    for (var _i2 = 0; _i2 < k; _i2++) {
	      medoids[_i2] = nodes[Math.floor(Math.random() * nodes.length)];
	    }
	  }

	  return medoids;
	};

	var findCost = function findCost(potentialNewMedoid, cluster, attributes) {
	  var cost = 0;

	  for (var n = 0; n < cluster.length; n++) {
	    cost += getDist('manhattan', cluster[n], potentialNewMedoid, attributes, 'kMedoids');
	  }

	  return cost;
	};

	var kMeans = function kMeans(options) {
	  var cy = this.cy();
	  var nodes = this.nodes();
	  var node = null; // Set parameters of algorithm: # of clusters, distance metric, etc.

	  var opts = setOptions$1(options); // Begin k-means algorithm

	  var clusters = new Array(opts.k);
	  var assignment = {};
	  var centroids; // Step 1: Initialize centroid positions

	  if (opts.testMode) {
	    if (typeof opts.testCentroids === 'number') {
	      centroids = randomCentroids(nodes, opts.k, opts.attributes);
	    } else if (_typeof(opts.testCentroids) === 'object') {
	      centroids = opts.testCentroids;
	    } else {
	      centroids = randomCentroids(nodes, opts.k, opts.attributes);
	    }
	  } else {
	    centroids = randomCentroids(nodes, opts.k, opts.attributes);
	  }

	  var isStillMoving = true;
	  var iterations = 0;

	  while (isStillMoving && iterations < opts.maxIterations) {
	    // Step 2: Assign nodes to the nearest centroid
	    for (var n = 0; n < nodes.length; n++) {
	      node = nodes[n]; // Determine which cluster this node belongs to: node id => cluster #

	      assignment[node.id()] = classify(node, centroids, opts.distance, opts.attributes, 'kMeans');
	    } // Step 3: For each of the k clusters, update its centroid


	    isStillMoving = false;

	    for (var c = 0; c < opts.k; c++) {
	      // Get all nodes that belong to this cluster
	      var cluster = buildCluster(c, nodes, assignment);

	      if (cluster.length === 0) {
	        // If cluster is empty, break out early & move to next cluster
	        continue;
	      } // Update centroids by calculating avg of all nodes within the cluster.


	      var ndim = opts.attributes.length;
	      var centroid = centroids[c]; // [ dim_1, dim_2, dim_3, ... , dim_n ]

	      var newCentroid = new Array(ndim);
	      var sum = new Array(ndim);

	      for (var d = 0; d < ndim; d++) {
	        sum[d] = 0.0;

	        for (var i = 0; i < cluster.length; i++) {
	          node = cluster[i];
	          sum[d] += opts.attributes[d](node);
	        }

	        newCentroid[d] = sum[d] / cluster.length; // Check to see if algorithm has converged, i.e. when centroids no longer change

	        if (!haveValuesConverged(newCentroid[d], centroid[d], opts.sensitivityThreshold)) {
	          isStillMoving = true;
	        }
	      }

	      centroids[c] = newCentroid;
	      clusters[c] = cy.collection(cluster);
	    }

	    iterations++;
	  }

	  return clusters;
	};

	var kMedoids = function kMedoids(options) {
	  var cy = this.cy();
	  var nodes = this.nodes();
	  var node = null;
	  var opts = setOptions$1(options); // Begin k-medoids algorithm

	  var clusters = new Array(opts.k);
	  var medoids;
	  var assignment = {};
	  var curCost;
	  var minCosts = new Array(opts.k); // minimum cost configuration for each cluster
	  // Step 1: Initialize k medoids

	  if (opts.testMode) {
	    if (typeof opts.testCentroids === 'number') ; else if (_typeof(opts.testCentroids) === 'object') {
	      medoids = opts.testCentroids;
	    } else {
	      medoids = randomMedoids(nodes, opts.k);
	    }
	  } else {
	    medoids = randomMedoids(nodes, opts.k);
	  }

	  var isStillMoving = true;
	  var iterations = 0;

	  while (isStillMoving && iterations < opts.maxIterations) {
	    // Step 2: Assign nodes to the nearest medoid
	    for (var n = 0; n < nodes.length; n++) {
	      node = nodes[n]; // Determine which cluster this node belongs to: node id => cluster #

	      assignment[node.id()] = classify(node, medoids, opts.distance, opts.attributes, 'kMedoids');
	    }

	    isStillMoving = false; // Step 3: For each medoid m, and for each node assciated with mediod m,
	    // select the node with the lowest configuration cost as new medoid.

	    for (var m = 0; m < medoids.length; m++) {
	      // Get all nodes that belong to this medoid
	      var cluster = buildCluster(m, nodes, assignment);

	      if (cluster.length === 0) {
	        // If cluster is empty, break out early & move to next cluster
	        continue;
	      }

	      minCosts[m] = findCost(medoids[m], cluster, opts.attributes); // original cost
	      // Select different medoid if its configuration has the lowest cost

	      for (var _n = 0; _n < cluster.length; _n++) {
	        curCost = findCost(cluster[_n], cluster, opts.attributes);

	        if (curCost < minCosts[m]) {
	          minCosts[m] = curCost;
	          medoids[m] = cluster[_n];
	          isStillMoving = true;
	        }
	      }

	      clusters[m] = cy.collection(cluster);
	    }

	    iterations++;
	  }

	  return clusters;
	};

	var updateCentroids = function updateCentroids(centroids, nodes, U, weight, opts) {
	  var numerator, denominator;

	  for (var n = 0; n < nodes.length; n++) {
	    for (var c = 0; c < centroids.length; c++) {
	      weight[n][c] = Math.pow(U[n][c], opts.m);
	    }
	  }

	  for (var _c = 0; _c < centroids.length; _c++) {
	    for (var dim = 0; dim < opts.attributes.length; dim++) {
	      numerator = 0;
	      denominator = 0;

	      for (var _n2 = 0; _n2 < nodes.length; _n2++) {
	        numerator += weight[_n2][_c] * opts.attributes[dim](nodes[_n2]);
	        denominator += weight[_n2][_c];
	      }

	      centroids[_c][dim] = numerator / denominator;
	    }
	  }
	};

	var updateMembership = function updateMembership(U, _U, centroids, nodes, opts) {
	  // Save previous step
	  for (var i = 0; i < U.length; i++) {
	    _U[i] = U[i].slice();
	  }

	  var sum, numerator, denominator;
	  var pow = 2 / (opts.m - 1);

	  for (var c = 0; c < centroids.length; c++) {
	    for (var n = 0; n < nodes.length; n++) {
	      sum = 0;

	      for (var k = 0; k < centroids.length; k++) {
	        // against all other centroids
	        numerator = getDist(opts.distance, nodes[n], centroids[c], opts.attributes, 'cmeans');
	        denominator = getDist(opts.distance, nodes[n], centroids[k], opts.attributes, 'cmeans');
	        sum += Math.pow(numerator / denominator, pow);
	      }

	      U[n][c] = 1 / sum;
	    }
	  }
	};

	var assign$1 = function assign(nodes, U, opts, cy) {
	  var clusters = new Array(opts.k);

	  for (var c = 0; c < clusters.length; c++) {
	    clusters[c] = [];
	  }

	  var max;
	  var index;

	  for (var n = 0; n < U.length; n++) {
	    // for each node (U is N x C matrix)
	    max = -Infinity;
	    index = -1; // Determine which cluster the node is most likely to belong in

	    for (var _c2 = 0; _c2 < U[0].length; _c2++) {
	      if (U[n][_c2] > max) {
	        max = U[n][_c2];
	        index = _c2;
	      }
	    }

	    clusters[index].push(nodes[n]);
	  } // Turn every array into a collection of nodes


	  for (var _c3 = 0; _c3 < clusters.length; _c3++) {
	    clusters[_c3] = cy.collection(clusters[_c3]);
	  }

	  return clusters;
	};

	var fuzzyCMeans = function fuzzyCMeans(options) {
	  var cy = this.cy();
	  var nodes = this.nodes();
	  var opts = setOptions$1(options); // Begin fuzzy c-means algorithm

	  var clusters;
	  var centroids;
	  var U;

	  var _U;

	  var weight; // Step 1: Initialize letiables.

	  _U = new Array(nodes.length);

	  for (var i = 0; i < nodes.length; i++) {
	    // N x C matrix
	    _U[i] = new Array(opts.k);
	  }

	  U = new Array(nodes.length);

	  for (var _i3 = 0; _i3 < nodes.length; _i3++) {
	    // N x C matrix
	    U[_i3] = new Array(opts.k);
	  }

	  for (var _i4 = 0; _i4 < nodes.length; _i4++) {
	    var total = 0;

	    for (var j = 0; j < opts.k; j++) {
	      U[_i4][j] = Math.random();
	      total += U[_i4][j];
	    }

	    for (var _j = 0; _j < opts.k; _j++) {
	      U[_i4][_j] = U[_i4][_j] / total;
	    }
	  }

	  centroids = new Array(opts.k);

	  for (var _i5 = 0; _i5 < opts.k; _i5++) {
	    centroids[_i5] = new Array(opts.attributes.length);
	  }

	  weight = new Array(nodes.length);

	  for (var _i6 = 0; _i6 < nodes.length; _i6++) {
	    // N x C matrix
	    weight[_i6] = new Array(opts.k);
	  } // end init FCM


	  var isStillMoving = true;
	  var iterations = 0;

	  while (isStillMoving && iterations < opts.maxIterations) {
	    isStillMoving = false; // Step 2: Calculate the centroids for each step.

	    updateCentroids(centroids, nodes, U, weight, opts); // Step 3: Update the partition matrix U.

	    updateMembership(U, _U, centroids, nodes, opts); // Step 4: Check for convergence.

	    if (!haveMatricesConverged(U, _U, opts.sensitivityThreshold)) {
	      isStillMoving = true;
	    }

	    iterations++;
	  } // Assign nodes to clusters with highest probability.


	  clusters = assign$1(nodes, U, opts, cy);
	  return {
	    clusters: clusters,
	    degreeOfMembership: U
	  };
	};

	var kClustering = {
	  kMeans: kMeans,
	  kMedoids: kMedoids,
	  fuzzyCMeans: fuzzyCMeans,
	  fcm: fuzzyCMeans
	};

	// Implemented by Zoe Xi @zoexi for GSOC 2016
	var defaults$6 = defaults({
	  distance: 'euclidean',
	  // distance metric to compare nodes
	  linkage: 'min',
	  // linkage criterion : how to determine the distance between clusters of nodes
	  mode: 'threshold',
	  // mode:'threshold' => clusters must be threshold distance apart
	  threshold: Infinity,
	  // the distance threshold
	  // mode:'dendrogram' => the nodes are organised as leaves in a tree (siblings are close), merging makes clusters
	  addDendrogram: false,
	  // whether to add the dendrogram to the graph for viz
	  dendrogramDepth: 0,
	  // depth at which dendrogram branches are merged into the returned clusters
	  attributes: [] // array of attr functions

	});
	var linkageAliases = {
	  'single': 'min',
	  'complete': 'max'
	};

	var setOptions$2 = function setOptions(options) {
	  var opts = defaults$6(options);
	  var preferredAlias = linkageAliases[opts.linkage];

	  if (preferredAlias != null) {
	    opts.linkage = preferredAlias;
	  }

	  return opts;
	};

	var mergeClosest = function mergeClosest(clusters, index, dists, mins, opts) {
	  // Find two closest clusters from cached mins
	  var minKey = 0;
	  var min = Infinity;
	  var dist;
	  var attrs = opts.attributes;

	  var getDist = function getDist(n1, n2) {
	    return clusteringDistance(opts.distance, attrs.length, function (i) {
	      return attrs[i](n1);
	    }, function (i) {
	      return attrs[i](n2);
	    }, n1, n2);
	  };

	  for (var i = 0; i < clusters.length; i++) {
	    var key = clusters[i].key;
	    var _dist = dists[key][mins[key]];

	    if (_dist < min) {
	      minKey = key;
	      min = _dist;
	    }
	  }

	  if (opts.mode === 'threshold' && min >= opts.threshold || opts.mode === 'dendrogram' && clusters.length === 1) {
	    return false;
	  }

	  var c1 = index[minKey];
	  var c2 = index[mins[minKey]];
	  var merged; // Merge two closest clusters

	  if (opts.mode === 'dendrogram') {
	    merged = {
	      left: c1,
	      right: c2,
	      key: c1.key
	    };
	  } else {
	    merged = {
	      value: c1.value.concat(c2.value),
	      key: c1.key
	    };
	  }

	  clusters[c1.index] = merged;
	  clusters.splice(c2.index, 1);
	  index[c1.key] = merged; // Update distances with new merged cluster

	  for (var _i = 0; _i < clusters.length; _i++) {
	    var cur = clusters[_i];

	    if (c1.key === cur.key) {
	      dist = Infinity;
	    } else if (opts.linkage === 'min') {
	      dist = dists[c1.key][cur.key];

	      if (dists[c1.key][cur.key] > dists[c2.key][cur.key]) {
	        dist = dists[c2.key][cur.key];
	      }
	    } else if (opts.linkage === 'max') {
	      dist = dists[c1.key][cur.key];

	      if (dists[c1.key][cur.key] < dists[c2.key][cur.key]) {
	        dist = dists[c2.key][cur.key];
	      }
	    } else if (opts.linkage === 'mean') {
	      dist = (dists[c1.key][cur.key] * c1.size + dists[c2.key][cur.key] * c2.size) / (c1.size + c2.size);
	    } else {
	      if (opts.mode === 'dendrogram') dist = getDist(cur.value, c1.value);else dist = getDist(cur.value[0], c1.value[0]);
	    }

	    dists[c1.key][cur.key] = dists[cur.key][c1.key] = dist; // distance matrix is symmetric
	  } // Update cached mins


	  for (var _i2 = 0; _i2 < clusters.length; _i2++) {
	    var key1 = clusters[_i2].key;

	    if (mins[key1] === c1.key || mins[key1] === c2.key) {
	      var _min = key1;

	      for (var j = 0; j < clusters.length; j++) {
	        var key2 = clusters[j].key;

	        if (dists[key1][key2] < dists[key1][_min]) {
	          _min = key2;
	        }
	      }

	      mins[key1] = _min;
	    }

	    clusters[_i2].index = _i2;
	  } // Clean up meta data used for clustering


	  c1.key = c2.key = c1.index = c2.index = null;
	  return true;
	};

	var getAllChildren = function getAllChildren(root, arr, cy) {
	  if (!root) return;

	  if (root.value) {
	    arr.push(root.value);
	  } else {
	    if (root.left) getAllChildren(root.left, arr);
	    if (root.right) getAllChildren(root.right, arr);
	  }
	};

	var buildDendrogram = function buildDendrogram(root, cy) {
	  if (!root) return '';

	  if (root.left && root.right) {
	    var leftStr = buildDendrogram(root.left, cy);
	    var rightStr = buildDendrogram(root.right, cy);
	    var node = cy.add({
	      group: 'nodes',
	      data: {
	        id: leftStr + ',' + rightStr
	      }
	    });
	    cy.add({
	      group: 'edges',
	      data: {
	        source: leftStr,
	        target: node.id()
	      }
	    });
	    cy.add({
	      group: 'edges',
	      data: {
	        source: rightStr,
	        target: node.id()
	      }
	    });
	    return node.id();
	  } else if (root.value) {
	    return root.value.id();
	  }
	};

	var buildClustersFromTree = function buildClustersFromTree(root, k, cy) {
	  if (!root) return [];
	  var left = [],
	      right = [],
	      leaves = [];

	  if (k === 0) {
	    // don't cut tree, simply return all nodes as 1 single cluster
	    if (root.left) getAllChildren(root.left, left);
	    if (root.right) getAllChildren(root.right, right);
	    leaves = left.concat(right);
	    return [cy.collection(leaves)];
	  } else if (k === 1) {
	    // cut at root
	    if (root.value) {
	      // leaf node
	      return [cy.collection(root.value)];
	    } else {
	      if (root.left) getAllChildren(root.left, left);
	      if (root.right) getAllChildren(root.right, right);
	      return [cy.collection(left), cy.collection(right)];
	    }
	  } else {
	    if (root.value) {
	      return [cy.collection(root.value)];
	    } else {
	      if (root.left) left = buildClustersFromTree(root.left, k - 1, cy);
	      if (root.right) right = buildClustersFromTree(root.right, k - 1, cy);
	      return left.concat(right);
	    }
	  }
	};
	/* eslint-enable */


	var hierarchicalClustering = function hierarchicalClustering(options) {
	  var cy = this.cy();
	  var nodes = this.nodes(); // Set parameters of algorithm: linkage type, distance metric, etc.

	  var opts = setOptions$2(options);
	  var attrs = opts.attributes;

	  var getDist = function getDist(n1, n2) {
	    return clusteringDistance(opts.distance, attrs.length, function (i) {
	      return attrs[i](n1);
	    }, function (i) {
	      return attrs[i](n2);
	    }, n1, n2);
	  }; // Begin hierarchical algorithm


	  var clusters = [];
	  var dists = []; // distances between each pair of clusters

	  var mins = []; // closest cluster for each cluster

	  var index = []; // hash of all clusters by key
	  // In agglomerative (bottom-up) clustering, each node starts as its own cluster

	  for (var n = 0; n < nodes.length; n++) {
	    var cluster = {
	      value: opts.mode === 'dendrogram' ? nodes[n] : [nodes[n]],
	      key: n,
	      index: n
	    };
	    clusters[n] = cluster;
	    index[n] = cluster;
	    dists[n] = [];
	    mins[n] = 0;
	  } // Calculate the distance between each pair of clusters


	  for (var i = 0; i < clusters.length; i++) {
	    for (var j = 0; j <= i; j++) {
	      var dist = void 0;

	      if (opts.mode === 'dendrogram') {
	        // modes store cluster values differently
	        dist = i === j ? Infinity : getDist(clusters[i].value, clusters[j].value);
	      } else {
	        dist = i === j ? Infinity : getDist(clusters[i].value[0], clusters[j].value[0]);
	      }

	      dists[i][j] = dist;
	      dists[j][i] = dist;

	      if (dist < dists[i][mins[i]]) {
	        mins[i] = j; // Cache mins: closest cluster to cluster i is cluster j
	      }
	    }
	  } // Find the closest pair of clusters and merge them into a single cluster.
	  // Update distances between new cluster and each of the old clusters, and loop until threshold reached.


	  var merged = mergeClosest(clusters, index, dists, mins, opts);

	  while (merged) {
	    merged = mergeClosest(clusters, index, dists, mins, opts);
	  }

	  var retClusters; // Dendrogram mode builds the hierarchy and adds intermediary nodes + edges
	  // in addition to returning the clusters.

	  if (opts.mode === 'dendrogram') {
	    retClusters = buildClustersFromTree(clusters[0], opts.dendrogramDepth, cy);
	    if (opts.addDendrogram) buildDendrogram(clusters[0], cy);
	  } else {
	    // Regular mode simply returns the clusters
	    retClusters = new Array(clusters.length);
	    clusters.forEach(function (cluster, i) {
	      // Clean up meta data used for clustering
	      cluster.key = cluster.index = null;
	      retClusters[i] = cy.collection(cluster.value);
	    });
	  }

	  return retClusters;
	};

	var hierarchicalClustering$1 = {
	  hierarchicalClustering: hierarchicalClustering,
	  hca: hierarchicalClustering
	};

	// Implemented by Zoe Xi @zoexi for GSOC 2016
	var defaults$7 = defaults({
	  distance: 'euclidean',
	  // distance metric to compare attributes between two nodes
	  preference: 'median',
	  // suitability of a data point to serve as an exemplar
	  damping: 0.8,
	  // damping factor between [0.5, 1)
	  maxIterations: 1000,
	  // max number of iterations to run
	  minIterations: 100,
	  // min number of iterations to run in order for clustering to stop
	  attributes: [// functions to quantify the similarity between any two points
	    // e.g. node => node.data('weight')
	  ]
	});

	var setOptions$3 = function setOptions(options) {
	  var dmp = options.damping;
	  var pref = options.preference;

	  if (!(0.5 <= dmp && dmp < 1)) {
	    error("Damping must range on [0.5, 1).  Got: ".concat(dmp));
	  }

	  var validPrefs = ['median', 'mean', 'min', 'max'];

	  if (!(validPrefs.some(function (v) {
	    return v === pref;
	  }) || number(pref))) {
	    error("Preference must be one of [".concat(validPrefs.map(function (p) {
	      return "'".concat(p, "'");
	    }).join(', '), "] or a number.  Got: ").concat(pref));
	  }

	  return defaults$7(options);
	};
	/* eslint-enable */


	var getSimilarity$1 = function getSimilarity(type, n1, n2, attributes) {
	  var attr = function attr(n, i) {
	    return attributes[i](n);
	  }; // nb negative because similarity should have an inverse relationship to distance


	  return -clusteringDistance(type, attributes.length, function (i) {
	    return attr(n1, i);
	  }, function (i) {
	    return attr(n2, i);
	  }, n1, n2);
	};

	var getPreference = function getPreference(S, preference) {
	  // larger preference = greater # of clusters
	  var p = null;

	  if (preference === 'median') {
	    p = median(S);
	  } else if (preference === 'mean') {
	    p = mean(S);
	  } else if (preference === 'min') {
	    p = min(S);
	  } else if (preference === 'max') {
	    p = max(S);
	  } else {
	    // Custom preference number, as set by user
	    p = preference;
	  }

	  return p;
	};

	var findExemplars = function findExemplars(n, R, A) {
	  var indices = [];

	  for (var i = 0; i < n; i++) {
	    if (R[i * n + i] + A[i * n + i] > 0) {
	      indices.push(i);
	    }
	  }

	  return indices;
	};

	var assignClusters = function assignClusters(n, S, exemplars) {
	  var clusters = [];

	  for (var i = 0; i < n; i++) {
	    var index = -1;
	    var max = -Infinity;

	    for (var ei = 0; ei < exemplars.length; ei++) {
	      var e = exemplars[ei];

	      if (S[i * n + e] > max) {
	        index = e;
	        max = S[i * n + e];
	      }
	    }

	    if (index > 0) {
	      clusters.push(index);
	    }
	  }

	  for (var _ei = 0; _ei < exemplars.length; _ei++) {
	    clusters[exemplars[_ei]] = exemplars[_ei];
	  }

	  return clusters;
	};

	var assign$2 = function assign(n, S, exemplars) {
	  var clusters = assignClusters(n, S, exemplars);

	  for (var ei = 0; ei < exemplars.length; ei++) {
	    var ii = [];

	    for (var c = 0; c < clusters.length; c++) {
	      if (clusters[c] === exemplars[ei]) {
	        ii.push(c);
	      }
	    }

	    var maxI = -1;
	    var maxSum = -Infinity;

	    for (var i = 0; i < ii.length; i++) {
	      var sum = 0;

	      for (var j = 0; j < ii.length; j++) {
	        sum += S[ii[j] * n + ii[i]];
	      }

	      if (sum > maxSum) {
	        maxI = i;
	        maxSum = sum;
	      }
	    }

	    exemplars[ei] = ii[maxI];
	  }

	  clusters = assignClusters(n, S, exemplars);
	  return clusters;
	};

	var affinityPropagation = function affinityPropagation(options) {
	  var cy = this.cy();
	  var nodes = this.nodes();
	  var opts = setOptions$3(options); // Map each node to its position in node array

	  var id2position = {};

	  for (var i = 0; i < nodes.length; i++) {
	    id2position[nodes[i].id()] = i;
	  } // Begin affinity propagation algorithm


	  var n; // number of data points

	  var n2; // size of matrices

	  var S; // similarity matrix (1D array)

	  var p; // preference/suitability of a data point to serve as an exemplar

	  var R; // responsibility matrix (1D array)

	  var A; // availability matrix (1D array)

	  n = nodes.length;
	  n2 = n * n; // Initialize and build S similarity matrix

	  S = new Array(n2);

	  for (var _i = 0; _i < n2; _i++) {
	    S[_i] = -Infinity; // for cases where two data points shouldn't be linked together
	  }

	  for (var _i2 = 0; _i2 < n; _i2++) {
	    for (var j = 0; j < n; j++) {
	      if (_i2 !== j) {
	        S[_i2 * n + j] = getSimilarity$1(opts.distance, nodes[_i2], nodes[j], opts.attributes);
	      }
	    }
	  } // Place preferences on the diagonal of S


	  p = getPreference(S, opts.preference);

	  for (var _i3 = 0; _i3 < n; _i3++) {
	    S[_i3 * n + _i3] = p;
	  } // Initialize R responsibility matrix


	  R = new Array(n2);

	  for (var _i4 = 0; _i4 < n2; _i4++) {
	    R[_i4] = 0.0;
	  } // Initialize A availability matrix


	  A = new Array(n2);

	  for (var _i5 = 0; _i5 < n2; _i5++) {
	    A[_i5] = 0.0;
	  }

	  var old = new Array(n);
	  var Rp = new Array(n);
	  var se = new Array(n);

	  for (var _i6 = 0; _i6 < n; _i6++) {
	    old[_i6] = 0.0;
	    Rp[_i6] = 0.0;
	    se[_i6] = 0;
	  }

	  var e = new Array(n * opts.minIterations);

	  for (var _i7 = 0; _i7 < e.length; _i7++) {
	    e[_i7] = 0;
	  }

	  var iter;

	  for (iter = 0; iter < opts.maxIterations; iter++) {
	    // main algorithmic loop
	    // Update R responsibility matrix
	    for (var _i8 = 0; _i8 < n; _i8++) {
	      var max = -Infinity,
	          max2 = -Infinity,
	          maxI = -1,
	          AS = 0.0;

	      for (var _j = 0; _j < n; _j++) {
	        old[_j] = R[_i8 * n + _j];
	        AS = A[_i8 * n + _j] + S[_i8 * n + _j];

	        if (AS >= max) {
	          max2 = max;
	          max = AS;
	          maxI = _j;
	        } else if (AS > max2) {
	          max2 = AS;
	        }
	      }

	      for (var _j2 = 0; _j2 < n; _j2++) {
	        R[_i8 * n + _j2] = (1 - opts.damping) * (S[_i8 * n + _j2] - max) + opts.damping * old[_j2];
	      }

	      R[_i8 * n + maxI] = (1 - opts.damping) * (S[_i8 * n + maxI] - max2) + opts.damping * old[maxI];
	    } // Update A availability matrix


	    for (var _i9 = 0; _i9 < n; _i9++) {
	      var sum = 0;

	      for (var _j3 = 0; _j3 < n; _j3++) {
	        old[_j3] = A[_j3 * n + _i9];
	        Rp[_j3] = Math.max(0, R[_j3 * n + _i9]);
	        sum += Rp[_j3];
	      }

	      sum -= Rp[_i9];
	      Rp[_i9] = R[_i9 * n + _i9];
	      sum += Rp[_i9];

	      for (var _j4 = 0; _j4 < n; _j4++) {
	        A[_j4 * n + _i9] = (1 - opts.damping) * Math.min(0, sum - Rp[_j4]) + opts.damping * old[_j4];
	      }

	      A[_i9 * n + _i9] = (1 - opts.damping) * (sum - Rp[_i9]) + opts.damping * old[_i9];
	    } // Check for convergence


	    var K = 0;

	    for (var _i10 = 0; _i10 < n; _i10++) {
	      var E = A[_i10 * n + _i10] + R[_i10 * n + _i10] > 0 ? 1 : 0;
	      e[iter % opts.minIterations * n + _i10] = E;
	      K += E;
	    }

	    if (K > 0 && (iter >= opts.minIterations - 1 || iter == opts.maxIterations - 1)) {
	      var _sum = 0;

	      for (var _i11 = 0; _i11 < n; _i11++) {
	        se[_i11] = 0;

	        for (var _j5 = 0; _j5 < opts.minIterations; _j5++) {
	          se[_i11] += e[_j5 * n + _i11];
	        }

	        if (se[_i11] === 0 || se[_i11] === opts.minIterations) {
	          _sum++;
	        }
	      }

	      if (_sum === n) {
	        // then we have convergence
	        break;
	      }
	    }
	  } // Identify exemplars (cluster centers)


	  var exemplarsIndices = findExemplars(n, R, A); // Assign nodes to clusters

	  var clusterIndices = assign$2(n, S, exemplarsIndices);
	  var clusters = {};

	  for (var c = 0; c < exemplarsIndices.length; c++) {
	    clusters[exemplarsIndices[c]] = [];
	  }

	  for (var _i12 = 0; _i12 < nodes.length; _i12++) {
	    var pos = id2position[nodes[_i12].id()];

	    var clusterIndex = clusterIndices[pos];

	    if (clusterIndex != null) {
	      // the node may have not been assigned a cluster if no valid attributes were specified
	      clusters[clusterIndex].push(nodes[_i12]);
	    }
	  }

	  var retClusters = new Array(exemplarsIndices.length);

	  for (var _c = 0; _c < exemplarsIndices.length; _c++) {
	    retClusters[_c] = cy.collection(clusters[exemplarsIndices[_c]]);
	  }

	  return retClusters;
	};

	var affinityPropagation$1 = {
	  affinityPropagation: affinityPropagation,
	  ap: affinityPropagation
	};

	var hierholzerDefaults = defaults({
	  root: undefined,
	  directed: false
	});
	var elesfn$b = {
	  hierholzer: function hierholzer(options) {
	    if (!plainObject(options)) {
	      var args = arguments;
	      options = {
	        root: args[0],
	        directed: args[1]
	      };
	    }

	    var _hierholzerDefaults = hierholzerDefaults(options),
	        root = _hierholzerDefaults.root,
	        directed = _hierholzerDefaults.directed;

	    var eles = this;
	    var dflag = false;
	    var oddIn;
	    var oddOut;
	    var startVertex;
	    if (root) startVertex = string(root) ? this.filter(root)[0].id() : root[0].id();
	    var nodes = {};
	    var edges = {};

	    if (directed) {
	      eles.forEach(function (ele) {
	        var id = ele.id();

	        if (ele.isNode()) {
	          var ind = ele.indegree(true);
	          var outd = ele.outdegree(true);
	          var d1 = ind - outd;
	          var d2 = outd - ind;

	          if (d1 == 1) {
	            if (oddIn) dflag = true;else oddIn = id;
	          } else if (d2 == 1) {
	            if (oddOut) dflag = true;else oddOut = id;
	          } else if (d2 > 1 || d1 > 1) {
	            dflag = true;
	          }

	          nodes[id] = [];
	          ele.outgoers().forEach(function (e) {
	            if (e.isEdge()) nodes[id].push(e.id());
	          });
	        } else {
	          edges[id] = [undefined, ele.target().id()];
	        }
	      });
	    } else {
	      eles.forEach(function (ele) {
	        var id = ele.id();

	        if (ele.isNode()) {
	          var d = ele.degree(true);

	          if (d % 2) {
	            if (!oddIn) oddIn = id;else if (!oddOut) oddOut = id;else dflag = true;
	          }

	          nodes[id] = [];
	          ele.connectedEdges().forEach(function (e) {
	            return nodes[id].push(e.id());
	          });
	        } else {
	          edges[id] = [ele.source().id(), ele.target().id()];
	        }
	      });
	    }

	    var result = {
	      found: false,
	      trail: undefined
	    };
	    if (dflag) return result;else if (oddOut && oddIn) {
	      if (directed) {
	        if (startVertex && oddOut != startVertex) {
	          return result;
	        }

	        startVertex = oddOut;
	      } else {
	        if (startVertex && oddOut != startVertex && oddIn != startVertex) {
	          return result;
	        } else if (!startVertex) {
	          startVertex = oddOut;
	        }
	      }
	    } else {
	      if (!startVertex) startVertex = eles[0].id();
	    }

	    var walk = function walk(v) {
	      var currentNode = v;
	      var subtour = [v];
	      var adj, adjTail, adjHead;

	      while (nodes[currentNode].length) {
	        adj = nodes[currentNode].shift();
	        adjTail = edges[adj][0];
	        adjHead = edges[adj][1];

	        if (currentNode != adjHead) {
	          nodes[adjHead] = nodes[adjHead].filter(function (e) {
	            return e != adj;
	          });
	          currentNode = adjHead;
	        } else if (!directed && currentNode != adjTail) {
	          nodes[adjTail] = nodes[adjTail].filter(function (e) {
	            return e != adj;
	          });
	          currentNode = adjTail;
	        }

	        subtour.unshift(adj);
	        subtour.unshift(currentNode);
	      }

	      return subtour;
	    };

	    var trail = [];
	    var subtour = [];
	    subtour = walk(startVertex);

	    while (subtour.length != 1) {
	      if (nodes[subtour[0]].length == 0) {
	        trail.unshift(eles.getElementById(subtour.shift()));
	        trail.unshift(eles.getElementById(subtour.shift()));
	      } else {
	        subtour = walk(subtour.shift()).concat(subtour);
	      }
	    }

	    trail.unshift(eles.getElementById(subtour.shift())); // final node

	    for (var d in nodes) {
	      if (nodes[d].length) {
	        return result;
	      }
	    }

	    result.found = true;
	    result.trail = this.spawn(trail);
	    return result;
	  }
	};

	var hopcroftTarjanBiconnected = function hopcroftTarjanBiconnected() {
	  var eles = this;
	  var nodes = {};
	  var id = 0;
	  var edgeCount = 0;
	  var components = [];
	  var stack = [];
	  var visitedEdges = {};

	  var buildComponent = function buildComponent(x, y) {
	    var i = stack.length - 1;
	    var cutset = [];
	    var component = eles.spawn();

	    while (stack[i].x != x || stack[i].y != y) {
	      cutset.push(stack.pop().edge);
	      i--;
	    }

	    cutset.push(stack.pop().edge);
	    cutset.forEach(function (edge) {
	      var connectedNodes = edge.connectedNodes().intersection(eles);
	      component.merge(edge);
	      connectedNodes.forEach(function (node) {
	        var nodeId = node.id();
	        var connectedEdges = node.connectedEdges().intersection(eles);
	        component.merge(node);

	        if (!nodes[nodeId].cutVertex) {
	          component.merge(connectedEdges);
	        } else {
	          component.merge(connectedEdges.filter(function (edge) {
	            return edge.isLoop();
	          }));
	        }
	      });
	    });
	    components.push(component);
	  };

	  var biconnectedSearch = function biconnectedSearch(root, currentNode, parent) {
	    if (root === parent) edgeCount += 1;
	    nodes[currentNode] = {
	      id: id,
	      low: id++,
	      cutVertex: false
	    };
	    var edges = eles.getElementById(currentNode).connectedEdges().intersection(eles);

	    if (edges.size() === 0) {
	      components.push(eles.spawn(eles.getElementById(currentNode)));
	    } else {
	      var sourceId, targetId, otherNodeId, edgeId;
	      edges.forEach(function (edge) {
	        sourceId = edge.source().id();
	        targetId = edge.target().id();
	        otherNodeId = sourceId === currentNode ? targetId : sourceId;

	        if (otherNodeId !== parent) {
	          edgeId = edge.id();

	          if (!visitedEdges[edgeId]) {
	            visitedEdges[edgeId] = true;
	            stack.push({
	              x: currentNode,
	              y: otherNodeId,
	              edge: edge
	            });
	          }

	          if (!(otherNodeId in nodes)) {
	            biconnectedSearch(root, otherNodeId, currentNode);
	            nodes[currentNode].low = Math.min(nodes[currentNode].low, nodes[otherNodeId].low);

	            if (nodes[currentNode].id <= nodes[otherNodeId].low) {
	              nodes[currentNode].cutVertex = true;
	              buildComponent(currentNode, otherNodeId);
	            }
	          } else {
	            nodes[currentNode].low = Math.min(nodes[currentNode].low, nodes[otherNodeId].id);
	          }
	        }
	      });
	    }
	  };

	  eles.forEach(function (ele) {
	    if (ele.isNode()) {
	      var nodeId = ele.id();

	      if (!(nodeId in nodes)) {
	        edgeCount = 0;
	        biconnectedSearch(nodeId, nodeId);
	        nodes[nodeId].cutVertex = edgeCount > 1;
	      }
	    }
	  });
	  var cutVertices = Object.keys(nodes).filter(function (id) {
	    return nodes[id].cutVertex;
	  }).map(function (id) {
	    return eles.getElementById(id);
	  });
	  return {
	    cut: eles.spawn(cutVertices),
	    components: components
	  };
	};

	var hopcroftTarjanBiconnected$1 = {
	  hopcroftTarjanBiconnected: hopcroftTarjanBiconnected,
	  htbc: hopcroftTarjanBiconnected,
	  htb: hopcroftTarjanBiconnected,
	  hopcroftTarjanBiconnectedComponents: hopcroftTarjanBiconnected
	};

	var tarjanStronglyConnected = function tarjanStronglyConnected() {
	  var eles = this;
	  var nodes = {};
	  var index = 0;
	  var components = [];
	  var stack = [];
	  var cut = eles.spawn(eles);

	  var stronglyConnectedSearch = function stronglyConnectedSearch(sourceNodeId) {
	    stack.push(sourceNodeId);
	    nodes[sourceNodeId] = {
	      index: index,
	      low: index++,
	      explored: false
	    };
	    var connectedEdges = eles.getElementById(sourceNodeId).connectedEdges().intersection(eles);
	    connectedEdges.forEach(function (edge) {
	      var targetNodeId = edge.target().id();

	      if (targetNodeId !== sourceNodeId) {
	        if (!(targetNodeId in nodes)) {
	          stronglyConnectedSearch(targetNodeId);
	        }

	        if (!nodes[targetNodeId].explored) {
	          nodes[sourceNodeId].low = Math.min(nodes[sourceNodeId].low, nodes[targetNodeId].low);
	        }
	      }
	    });

	    if (nodes[sourceNodeId].index === nodes[sourceNodeId].low) {
	      var componentNodes = eles.spawn();

	      for (;;) {
	        var nodeId = stack.pop();
	        componentNodes.merge(eles.getElementById(nodeId));
	        nodes[nodeId].low = nodes[sourceNodeId].index;
	        nodes[nodeId].explored = true;

	        if (nodeId === sourceNodeId) {
	          break;
	        }
	      }

	      var componentEdges = componentNodes.edgesWith(componentNodes);
	      var component = componentNodes.merge(componentEdges);
	      components.push(component);
	      cut = cut.difference(component);
	    }
	  };

	  eles.forEach(function (ele) {
	    if (ele.isNode()) {
	      var nodeId = ele.id();

	      if (!(nodeId in nodes)) {
	        stronglyConnectedSearch(nodeId);
	      }
	    }
	  });
	  return {
	    cut: cut,
	    components: components
	  };
	};

	var tarjanStronglyConnected$1 = {
	  tarjanStronglyConnected: tarjanStronglyConnected,
	  tsc: tarjanStronglyConnected,
	  tscc: tarjanStronglyConnected,
	  tarjanStronglyConnectedComponents: tarjanStronglyConnected
	};

	var elesfn$c = {};
	[elesfn, elesfn$1, elesfn$2, elesfn$3, elesfn$4, elesfn$5, elesfn$6, elesfn$7, elesfn$8, elesfn$9, elesfn$a, markovClustering$1, kClustering, hierarchicalClustering$1, affinityPropagation$1, elesfn$b, hopcroftTarjanBiconnected$1, tarjanStronglyConnected$1].forEach(function (props) {
	  extend(elesfn$c, props);
	});

	/*!
	Embeddable Minimum Strictly-Compliant Promises/A+ 1.1.1 Thenable
	Copyright (c) 2013-2014 Ralf S. Engelschall (http://engelschall.com)
	Licensed under The MIT License (http://opensource.org/licenses/MIT)
	*/

	/*  promise states [Promises/A+ 2.1]  */
	var STATE_PENDING = 0;
	/*  [Promises/A+ 2.1.1]  */

	var STATE_FULFILLED = 1;
	/*  [Promises/A+ 2.1.2]  */

	var STATE_REJECTED = 2;
	/*  [Promises/A+ 2.1.3]  */

	/*  promise object constructor  */

	var api = function api(executor) {
	  /*  optionally support non-constructor/plain-function call  */
	  if (!(this instanceof api)) return new api(executor);
	  /*  initialize object  */

	  this.id = 'Thenable/1.0.7';
	  this.state = STATE_PENDING;
	  /*  initial state  */

	  this.fulfillValue = undefined;
	  /*  initial value  */

	  /*  [Promises/A+ 1.3, 2.1.2.2]  */

	  this.rejectReason = undefined;
	  /*  initial reason */

	  /*  [Promises/A+ 1.5, 2.1.3.2]  */

	  this.onFulfilled = [];
	  /*  initial handlers  */

	  this.onRejected = [];
	  /*  initial handlers  */

	  /*  provide optional information-hiding proxy  */

	  this.proxy = {
	    then: this.then.bind(this)
	  };
	  /*  support optional executor function  */

	  if (typeof executor === 'function') executor.call(this, this.fulfill.bind(this), this.reject.bind(this));
	};
	/*  promise API methods  */


	api.prototype = {
	  /*  promise resolving methods  */
	  fulfill: function fulfill(value) {
	    return deliver(this, STATE_FULFILLED, 'fulfillValue', value);
	  },
	  reject: function reject(value) {
	    return deliver(this, STATE_REJECTED, 'rejectReason', value);
	  },

	  /*  "The then Method" [Promises/A+ 1.1, 1.2, 2.2]  */
	  then: function then(onFulfilled, onRejected) {
	    var curr = this;
	    var next = new api();
	    /*  [Promises/A+ 2.2.7]  */

	    curr.onFulfilled.push(resolver(onFulfilled, next, 'fulfill'));
	    /*  [Promises/A+ 2.2.2/2.2.6]  */

	    curr.onRejected.push(resolver(onRejected, next, 'reject'));
	    /*  [Promises/A+ 2.2.3/2.2.6]  */

	    execute(curr);
	    return next.proxy;
	    /*  [Promises/A+ 2.2.7, 3.3]  */
	  }
	};
	/*  deliver an action  */

	var deliver = function deliver(curr, state, name, value) {
	  if (curr.state === STATE_PENDING) {
	    curr.state = state;
	    /*  [Promises/A+ 2.1.2.1, 2.1.3.1]  */

	    curr[name] = value;
	    /*  [Promises/A+ 2.1.2.2, 2.1.3.2]  */

	    execute(curr);
	  }

	  return curr;
	};
	/*  execute all handlers  */


	var execute = function execute(curr) {
	  if (curr.state === STATE_FULFILLED) execute_handlers(curr, 'onFulfilled', curr.fulfillValue);else if (curr.state === STATE_REJECTED) execute_handlers(curr, 'onRejected', curr.rejectReason);
	};
	/*  execute particular set of handlers  */


	var execute_handlers = function execute_handlers(curr, name, value) {
	  /* global setImmediate: true */

	  /* global setTimeout: true */

	  /*  short-circuit processing  */
	  if (curr[name].length === 0) return;
	  /*  iterate over all handlers, exactly once  */

	  var handlers = curr[name];
	  curr[name] = [];
	  /*  [Promises/A+ 2.2.2.3, 2.2.3.3]  */

	  var func = function func() {
	    for (var i = 0; i < handlers.length; i++) {
	      handlers[i](value);
	    }
	    /*  [Promises/A+ 2.2.5]  */

	  };
	  /*  execute procedure asynchronously  */

	  /*  [Promises/A+ 2.2.4, 3.1]  */


	  if (typeof setImmediate === 'function') setImmediate(func);else setTimeout(func, 0);
	};
	/*  generate a resolver function  */


	var resolver = function resolver(cb, next, method) {
	  return function (value) {
	    if (typeof cb !== 'function')
	      /*  [Promises/A+ 2.2.1, 2.2.7.3, 2.2.7.4]  */
	      next[method].call(next, value);
	      /*  [Promises/A+ 2.2.7.3, 2.2.7.4]  */
	    else {
	        var result;

	        try {
	          result = cb(value);
	        }
	        /*  [Promises/A+ 2.2.2.1, 2.2.3.1, 2.2.5, 3.2]  */
	        catch (e) {
	          next.reject(e);
	          /*  [Promises/A+ 2.2.7.2]  */

	          return;
	        }

	        resolve(next, result);
	        /*  [Promises/A+ 2.2.7.1]  */
	      }
	  };
	};
	/*  "Promise Resolution Procedure"  */

	/*  [Promises/A+ 2.3]  */


	var resolve = function resolve(promise, x) {
	  /*  sanity check arguments  */

	  /*  [Promises/A+ 2.3.1]  */
	  if (promise === x || promise.proxy === x) {
	    promise.reject(new TypeError('cannot resolve promise with itself'));
	    return;
	  }
	  /*  surgically check for a "then" method
	    (mainly to just call the "getter" of "then" only once)  */


	  var then;

	  if (_typeof(x) === 'object' && x !== null || typeof x === 'function') {
	    try {
	      then = x.then;
	    }
	    /*  [Promises/A+ 2.3.3.1, 3.5]  */
	    catch (e) {
	      promise.reject(e);
	      /*  [Promises/A+ 2.3.3.2]  */

	      return;
	    }
	  }
	  /*  handle own Thenables    [Promises/A+ 2.3.2]
	    and similar "thenables" [Promises/A+ 2.3.3]  */


	  if (typeof then === 'function') {
	    var resolved = false;

	    try {
	      /*  call retrieved "then" method */

	      /*  [Promises/A+ 2.3.3.3]  */
	      then.call(x,
	      /*  resolvePromise  */

	      /*  [Promises/A+ 2.3.3.3.1]  */
	      function (y) {
	        if (resolved) return;
	        resolved = true;
	        /*  [Promises/A+ 2.3.3.3.3]  */

	        if (y === x)
	          /*  [Promises/A+ 3.6]  */
	          promise.reject(new TypeError('circular thenable chain'));else resolve(promise, y);
	      },
	      /*  rejectPromise  */

	      /*  [Promises/A+ 2.3.3.3.2]  */
	      function (r) {
	        if (resolved) return;
	        resolved = true;
	        /*  [Promises/A+ 2.3.3.3.3]  */

	        promise.reject(r);
	      });
	    } catch (e) {
	      if (!resolved)
	        /*  [Promises/A+ 2.3.3.3.3]  */
	        promise.reject(e);
	      /*  [Promises/A+ 2.3.3.3.4]  */
	    }

	    return;
	  }
	  /*  handle other values  */


	  promise.fulfill(x);
	  /*  [Promises/A+ 2.3.4, 2.3.3.4]  */
	}; // so we always have Promise.all()


	api.all = function (ps) {
	  return new api(function (resolveAll, rejectAll) {
	    var vals = new Array(ps.length);
	    var doneCount = 0;

	    var fulfill = function fulfill(i, val) {
	      vals[i] = val;
	      doneCount++;

	      if (doneCount === ps.length) {
	        resolveAll(vals);
	      }
	    };

	    for (var i = 0; i < ps.length; i++) {
	      (function (i) {
	        var p = ps[i];
	        var isPromise = p != null && p.then != null;

	        if (isPromise) {
	          p.then(function (val) {
	            fulfill(i, val);
	          }, function (err) {
	            rejectAll(err);
	          });
	        } else {
	          var val = p;
	          fulfill(i, val);
	        }
	      })(i);
	    }
	  });
	};

	api.resolve = function (val) {
	  return new api(function (resolve, reject) {
	    resolve(val);
	  });
	};

	api.reject = function (val) {
	  return new api(function (resolve, reject) {
	    reject(val);
	  });
	};

	var Promise$1 = typeof Promise !== 'undefined' ? Promise : api; // eslint-disable-line no-undef

	var Animation = function Animation(target, opts, opts2) {
	  var isCore = core(target);
	  var isEle = !isCore;

	  var _p = this._private = extend({
	    duration: 1000
	  }, opts, opts2);

	  _p.target = target;
	  _p.style = _p.style || _p.css;
	  _p.started = false;
	  _p.playing = false;
	  _p.hooked = false;
	  _p.applying = false;
	  _p.progress = 0;
	  _p.completes = [];
	  _p.frames = [];

	  if (_p.complete && fn(_p.complete)) {
	    _p.completes.push(_p.complete);
	  }

	  if (isEle) {
	    var pos = target.position();
	    _p.startPosition = _p.startPosition || {
	      x: pos.x,
	      y: pos.y
	    };
	    _p.startStyle = _p.startStyle || target.cy().style().getAnimationStartStyle(target, _p.style);
	  }

	  if (isCore) {
	    var pan = target.pan();
	    _p.startPan = {
	      x: pan.x,
	      y: pan.y
	    };
	    _p.startZoom = target.zoom();
	  } // for future timeline/animations impl


	  this.length = 1;
	  this[0] = this;
	};

	var anifn = Animation.prototype;
	extend(anifn, {
	  instanceString: function instanceString() {
	    return 'animation';
	  },
	  hook: function hook() {
	    var _p = this._private;

	    if (!_p.hooked) {
	      // add to target's animation queue
	      var q;
	      var tAni = _p.target._private.animation;

	      if (_p.queue) {
	        q = tAni.queue;
	      } else {
	        q = tAni.current;
	      }

	      q.push(this); // add to the animation loop pool

	      if (elementOrCollection(_p.target)) {
	        _p.target.cy().addToAnimationPool(_p.target);
	      }

	      _p.hooked = true;
	    }

	    return this;
	  },
	  play: function play() {
	    var _p = this._private; // autorewind

	    if (_p.progress === 1) {
	      _p.progress = 0;
	    }

	    _p.playing = true;
	    _p.started = false; // needs to be started by animation loop

	    _p.stopped = false;
	    this.hook(); // the animation loop will start the animation...

	    return this;
	  },
	  playing: function playing() {
	    return this._private.playing;
	  },
	  apply: function apply() {
	    var _p = this._private;
	    _p.applying = true;
	    _p.started = false; // needs to be started by animation loop

	    _p.stopped = false;
	    this.hook(); // the animation loop will apply the animation at this progress

	    return this;
	  },
	  applying: function applying() {
	    return this._private.applying;
	  },
	  pause: function pause() {
	    var _p = this._private;
	    _p.playing = false;
	    _p.started = false;
	    return this;
	  },
	  stop: function stop() {
	    var _p = this._private;
	    _p.playing = false;
	    _p.started = false;
	    _p.stopped = true; // to be removed from animation queues

	    return this;
	  },
	  rewind: function rewind() {
	    return this.progress(0);
	  },
	  fastforward: function fastforward() {
	    return this.progress(1);
	  },
	  time: function time(t) {
	    var _p = this._private;

	    if (t === undefined) {
	      return _p.progress * _p.duration;
	    } else {
	      return this.progress(t / _p.duration);
	    }
	  },
	  progress: function progress(p) {
	    var _p = this._private;
	    var wasPlaying = _p.playing;

	    if (p === undefined) {
	      return _p.progress;
	    } else {
	      if (wasPlaying) {
	        this.pause();
	      }

	      _p.progress = p;
	      _p.started = false;

	      if (wasPlaying) {
	        this.play();
	      }
	    }

	    return this;
	  },
	  completed: function completed() {
	    return this._private.progress === 1;
	  },
	  reverse: function reverse() {
	    var _p = this._private;
	    var wasPlaying = _p.playing;

	    if (wasPlaying) {
	      this.pause();
	    }

	    _p.progress = 1 - _p.progress;
	    _p.started = false;

	    var swap = function swap(a, b) {
	      var _pa = _p[a];

	      if (_pa == null) {
	        return;
	      }

	      _p[a] = _p[b];
	      _p[b] = _pa;
	    };

	    swap('zoom', 'startZoom');
	    swap('pan', 'startPan');
	    swap('position', 'startPosition'); // swap styles

	    if (_p.style) {
	      for (var i = 0; i < _p.style.length; i++) {
	        var prop = _p.style[i];
	        var name = prop.name;
	        var startStyleProp = _p.startStyle[name];
	        _p.startStyle[name] = prop;
	        _p.style[i] = startStyleProp;
	      }
	    }

	    if (wasPlaying) {
	      this.play();
	    }

	    return this;
	  },
	  promise: function promise(type) {
	    var _p = this._private;
	    var arr;

	    switch (type) {
	      case 'frame':
	        arr = _p.frames;
	        break;

	      default:
	      case 'complete':
	      case 'completed':
	        arr = _p.completes;
	    }

	    return new Promise$1(function (resolve, reject) {
	      arr.push(function () {
	        resolve();
	      });
	    });
	  }
	});
	anifn.complete = anifn.completed;
	anifn.run = anifn.play;
	anifn.running = anifn.playing;

	var define = {
	  animated: function animated() {
	    return function animatedImpl() {
	      var self = this;
	      var selfIsArrayLike = self.length !== undefined;
	      var all = selfIsArrayLike ? self : [self]; // put in array if not array-like

	      var cy = this._private.cy || this;

	      if (!cy.styleEnabled()) {
	        return false;
	      }

	      var ele = all[0];

	      if (ele) {
	        return ele._private.animation.current.length > 0;
	      }
	    };
	  },
	  // animated
	  clearQueue: function clearQueue() {
	    return function clearQueueImpl() {
	      var self = this;
	      var selfIsArrayLike = self.length !== undefined;
	      var all = selfIsArrayLike ? self : [self]; // put in array if not array-like

	      var cy = this._private.cy || this;

	      if (!cy.styleEnabled()) {
	        return this;
	      }

	      for (var i = 0; i < all.length; i++) {
	        var ele = all[i];
	        ele._private.animation.queue = [];
	      }

	      return this;
	    };
	  },
	  // clearQueue
	  delay: function delay() {
	    return function delayImpl(time, complete) {
	      var cy = this._private.cy || this;

	      if (!cy.styleEnabled()) {
	        return this;
	      }

	      return this.animate({
	        delay: time,
	        duration: time,
	        complete: complete
	      });
	    };
	  },
	  // delay
	  delayAnimation: function delayAnimation() {
	    return function delayAnimationImpl(time, complete) {
	      var cy = this._private.cy || this;

	      if (!cy.styleEnabled()) {
	        return this;
	      }

	      return this.animation({
	        delay: time,
	        duration: time,
	        complete: complete
	      });
	    };
	  },
	  // delay
	  animation: function animation() {
	    return function animationImpl(properties, params) {
	      var self = this;
	      var selfIsArrayLike = self.length !== undefined;
	      var all = selfIsArrayLike ? self : [self]; // put in array if not array-like

	      var cy = this._private.cy || this;
	      var isCore = !selfIsArrayLike;
	      var isEles = !isCore;

	      if (!cy.styleEnabled()) {
	        return this;
	      }

	      var style = cy.style();
	      properties = extend({}, properties, params);
	      var propertiesEmpty = Object.keys(properties).length === 0;

	      if (propertiesEmpty) {
	        return new Animation(all[0], properties); // nothing to animate
	      }

	      if (properties.duration === undefined) {
	        properties.duration = 400;
	      }

	      switch (properties.duration) {
	        case 'slow':
	          properties.duration = 600;
	          break;

	        case 'fast':
	          properties.duration = 200;
	          break;
	      }

	      if (isEles) {
	        properties.style = style.getPropsList(properties.style || properties.css);
	        properties.css = undefined;
	      }

	      if (isEles && properties.renderedPosition != null) {
	        var rpos = properties.renderedPosition;
	        var pan = cy.pan();
	        var zoom = cy.zoom();
	        properties.position = renderedToModelPosition(rpos, zoom, pan);
	      } // override pan w/ panBy if set


	      if (isCore && properties.panBy != null) {
	        var panBy = properties.panBy;
	        var cyPan = cy.pan();
	        properties.pan = {
	          x: cyPan.x + panBy.x,
	          y: cyPan.y + panBy.y
	        };
	      } // override pan w/ center if set


	      var center = properties.center || properties.centre;

	      if (isCore && center != null) {
	        var centerPan = cy.getCenterPan(center.eles, properties.zoom);

	        if (centerPan != null) {
	          properties.pan = centerPan;
	        }
	      } // override pan & zoom w/ fit if set


	      if (isCore && properties.fit != null) {
	        var fit = properties.fit;
	        var fitVp = cy.getFitViewport(fit.eles || fit.boundingBox, fit.padding);

	        if (fitVp != null) {
	          properties.pan = fitVp.pan;
	          properties.zoom = fitVp.zoom;
	        }
	      } // override zoom (& potentially pan) w/ zoom obj if set


	      if (isCore && plainObject(properties.zoom)) {
	        var vp = cy.getZoomedViewport(properties.zoom);

	        if (vp != null) {
	          if (vp.zoomed) {
	            properties.zoom = vp.zoom;
	          }

	          if (vp.panned) {
	            properties.pan = vp.pan;
	          }
	        } else {
	          properties.zoom = null; // an inavalid zoom (e.g. no delta) gets automatically destroyed
	        }
	      }

	      return new Animation(all[0], properties);
	    };
	  },
	  // animate
	  animate: function animate() {
	    return function animateImpl(properties, params) {
	      var self = this;
	      var selfIsArrayLike = self.length !== undefined;
	      var all = selfIsArrayLike ? self : [self]; // put in array if not array-like

	      var cy = this._private.cy || this;

	      if (!cy.styleEnabled()) {
	        return this;
	      }

	      if (params) {
	        properties = extend({}, properties, params);
	      } // manually hook and run the animation


	      for (var i = 0; i < all.length; i++) {
	        var ele = all[i];
	        var queue = ele.animated() && (properties.queue === undefined || properties.queue);
	        var ani = ele.animation(properties, queue ? {
	          queue: true
	        } : undefined);
	        ani.play();
	      }

	      return this; // chaining
	    };
	  },
	  // animate
	  stop: function stop() {
	    return function stopImpl(clearQueue, jumpToEnd) {
	      var self = this;
	      var selfIsArrayLike = self.length !== undefined;
	      var all = selfIsArrayLike ? self : [self]; // put in array if not array-like

	      var cy = this._private.cy || this;

	      if (!cy.styleEnabled()) {
	        return this;
	      }

	      for (var i = 0; i < all.length; i++) {
	        var ele = all[i];
	        var _p = ele._private;
	        var anis = _p.animation.current;

	        for (var j = 0; j < anis.length; j++) {
	          var ani = anis[j];
	          var ani_p = ani._private;

	          if (jumpToEnd) {
	            // next iteration of the animation loop, the animation
	            // will go straight to the end and be removed
	            ani_p.duration = 0;
	          }
	        } // clear the queue of future animations


	        if (clearQueue) {
	          _p.animation.queue = [];
	        }

	        if (!jumpToEnd) {
	          _p.animation.current = [];
	        }
	      } // we have to notify (the animation loop doesn't do it for us on `stop`)


	      cy.notify('draw');
	      return this;
	    };
	  } // stop

	}; // define

	var define$1 = {
	  // access data field
	  data: function data(params) {
	    var defaults = {
	      field: 'data',
	      bindingEvent: 'data',
	      allowBinding: false,
	      allowSetting: false,
	      allowGetting: false,
	      settingEvent: 'data',
	      settingTriggersEvent: false,
	      triggerFnName: 'trigger',
	      immutableKeys: {},
	      // key => true if immutable
	      updateStyle: false,
	      beforeGet: function beforeGet(self) {},
	      beforeSet: function beforeSet(self, obj) {},
	      onSet: function onSet(self) {},
	      canSet: function canSet(self) {
	        return true;
	      }
	    };
	    params = extend({}, defaults, params);
	    return function dataImpl(name, value) {
	      var p = params;
	      var self = this;
	      var selfIsArrayLike = self.length !== undefined;
	      var all = selfIsArrayLike ? self : [self]; // put in array if not array-like

	      var single = selfIsArrayLike ? self[0] : self; // .data('foo', ...)

	      if (string(name)) {
	        // set or get property
	        // .data('foo')
	        if (p.allowGetting && value === undefined) {
	          // get
	          var ret;

	          if (single) {
	            p.beforeGet(single);
	            ret = single._private[p.field][name];
	          }

	          return ret; // .data('foo', 'bar')
	        } else if (p.allowSetting && value !== undefined) {
	          // set
	          var valid = !p.immutableKeys[name];

	          if (valid) {
	            var change = _defineProperty({}, name, value);

	            p.beforeSet(self, change);

	            for (var i = 0, l = all.length; i < l; i++) {
	              var ele = all[i];

	              if (p.canSet(ele)) {
	                ele._private[p.field][name] = value;
	              }
	            } // update mappers if asked


	            if (p.updateStyle) {
	              self.updateStyle();
	            } // call onSet callback


	            p.onSet(self);

	            if (p.settingTriggersEvent) {
	              self[p.triggerFnName](p.settingEvent);
	            }
	          }
	        } // .data({ 'foo': 'bar' })

	      } else if (p.allowSetting && plainObject(name)) {
	        // extend
	        var obj = name;
	        var k, v;
	        var keys = Object.keys(obj);
	        p.beforeSet(self, obj);

	        for (var _i = 0; _i < keys.length; _i++) {
	          k = keys[_i];
	          v = obj[k];

	          var _valid = !p.immutableKeys[k];

	          if (_valid) {
	            for (var j = 0; j < all.length; j++) {
	              var _ele = all[j];

	              if (p.canSet(_ele)) {
	                _ele._private[p.field][k] = v;
	              }
	            }
	          }
	        } // update mappers if asked


	        if (p.updateStyle) {
	          self.updateStyle();
	        } // call onSet callback


	        p.onSet(self);

	        if (p.settingTriggersEvent) {
	          self[p.triggerFnName](p.settingEvent);
	        } // .data(function(){ ... })

	      } else if (p.allowBinding && fn(name)) {
	        // bind to event
	        var fn$1 = name;
	        self.on(p.bindingEvent, fn$1); // .data()
	      } else if (p.allowGetting && name === undefined) {
	        // get whole object
	        var _ret;

	        if (single) {
	          p.beforeGet(single);
	          _ret = single._private[p.field];
	        }

	        return _ret;
	      }

	      return self; // maintain chainability
	    }; // function
	  },
	  // data
	  // remove data field
	  removeData: function removeData(params) {
	    var defaults = {
	      field: 'data',
	      event: 'data',
	      triggerFnName: 'trigger',
	      triggerEvent: false,
	      immutableKeys: {} // key => true if immutable

	    };
	    params = extend({}, defaults, params);
	    return function removeDataImpl(names) {
	      var p = params;
	      var self = this;
	      var selfIsArrayLike = self.length !== undefined;
	      var all = selfIsArrayLike ? self : [self]; // put in array if not array-like
	      // .removeData('foo bar')

	      if (string(names)) {
	        // then get the list of keys, and delete them
	        var keys = names.split(/\s+/);
	        var l = keys.length;

	        for (var i = 0; i < l; i++) {
	          // delete each non-empty key
	          var key = keys[i];

	          if (emptyString(key)) {
	            continue;
	          }

	          var valid = !p.immutableKeys[key]; // not valid if immutable

	          if (valid) {
	            for (var i_a = 0, l_a = all.length; i_a < l_a; i_a++) {
	              all[i_a]._private[p.field][key] = undefined;
	            }
	          }
	        }

	        if (p.triggerEvent) {
	          self[p.triggerFnName](p.event);
	        } // .removeData()

	      } else if (names === undefined) {
	        // then delete all keys
	        for (var _i_a = 0, _l_a = all.length; _i_a < _l_a; _i_a++) {
	          var _privateFields = all[_i_a]._private[p.field];

	          var _keys = Object.keys(_privateFields);

	          for (var _i2 = 0; _i2 < _keys.length; _i2++) {
	            var _key = _keys[_i2];
	            var validKeyToDelete = !p.immutableKeys[_key];

	            if (validKeyToDelete) {
	              _privateFields[_key] = undefined;
	            }
	          }
	        }

	        if (p.triggerEvent) {
	          self[p.triggerFnName](p.event);
	        }
	      }

	      return self; // maintain chaining
	    }; // function
	  } // removeData

	}; // define

	var define$2 = {
	  eventAliasesOn: function eventAliasesOn(proto) {
	    var p = proto;
	    p.addListener = p.listen = p.bind = p.on;
	    p.unlisten = p.unbind = p.off = p.removeListener;
	    p.trigger = p.emit; // this is just a wrapper alias of .on()

	    p.pon = p.promiseOn = function (events, selector) {
	      var self = this;
	      var args = Array.prototype.slice.call(arguments, 0);
	      return new Promise$1(function (resolve, reject) {
	        var callback = function callback(e) {
	          self.off.apply(self, offArgs);
	          resolve(e);
	        };

	        var onArgs = args.concat([callback]);
	        var offArgs = onArgs.concat([]);
	        self.on.apply(self, onArgs);
	      });
	    };
	  }
	}; // define

	// use this module to cherry pick functions into your prototype
	var define$3 = {};
	[define, define$1, define$2].forEach(function (m) {
	  extend(define$3, m);
	});

	var elesfn$d = {
	  animate: define$3.animate(),
	  animation: define$3.animation(),
	  animated: define$3.animated(),
	  clearQueue: define$3.clearQueue(),
	  delay: define$3.delay(),
	  delayAnimation: define$3.delayAnimation(),
	  stop: define$3.stop()
	};

	var elesfn$e = {
	  classes: function classes(_classes) {
	    var self = this;

	    if (_classes === undefined) {
	      var ret = [];

	      self[0]._private.classes.forEach(function (cls) {
	        return ret.push(cls);
	      });

	      return ret;
	    } else if (!array(_classes)) {
	      // extract classes from string
	      _classes = (_classes || '').match(/\S+/g) || [];
	    }

	    var changed = [];
	    var classesSet = new Set$1(_classes); // check and update each ele

	    for (var j = 0; j < self.length; j++) {
	      var ele = self[j];
	      var _p = ele._private;
	      var eleClasses = _p.classes;
	      var changedEle = false; // check if ele has all of the passed classes

	      for (var i = 0; i < _classes.length; i++) {
	        var cls = _classes[i];
	        var eleHasClass = eleClasses.has(cls);

	        if (!eleHasClass) {
	          changedEle = true;
	          break;
	        }
	      } // check if ele has classes outside of those passed


	      if (!changedEle) {
	        changedEle = eleClasses.size !== _classes.length;
	      }

	      if (changedEle) {
	        _p.classes = classesSet;
	        changed.push(ele);
	      }
	    } // trigger update style on those eles that had class changes


	    if (changed.length > 0) {
	      this.spawn(changed).updateStyle().emit('class');
	    }

	    return self;
	  },
	  addClass: function addClass(classes) {
	    return this.toggleClass(classes, true);
	  },
	  hasClass: function hasClass(className) {
	    var ele = this[0];
	    return ele != null && ele._private.classes.has(className);
	  },
	  toggleClass: function toggleClass(classes, toggle) {
	    if (!array(classes)) {
	      // extract classes from string
	      classes = classes.match(/\S+/g) || [];
	    }

	    var self = this;
	    var toggleUndefd = toggle === undefined;
	    var changed = []; // eles who had classes changed

	    for (var i = 0, il = self.length; i < il; i++) {
	      var ele = self[i];
	      var eleClasses = ele._private.classes;
	      var changedEle = false;

	      for (var j = 0; j < classes.length; j++) {
	        var cls = classes[j];
	        var hasClass = eleClasses.has(cls);
	        var changedNow = false;

	        if (toggle || toggleUndefd && !hasClass) {
	          eleClasses.add(cls);
	          changedNow = true;
	        } else if (!toggle || toggleUndefd && hasClass) {
	          eleClasses["delete"](cls);
	          changedNow = true;
	        }

	        if (!changedEle && changedNow) {
	          changed.push(ele);
	          changedEle = true;
	        }
	      } // for j classes

	    } // for i eles
	    // trigger update style on those eles that had class changes


	    if (changed.length > 0) {
	      this.spawn(changed).updateStyle().emit('class');
	    }

	    return self;
	  },
	  removeClass: function removeClass(classes) {
	    return this.toggleClass(classes, false);
	  },
	  flashClass: function flashClass(classes, duration) {
	    var self = this;

	    if (duration == null) {
	      duration = 250;
	    } else if (duration === 0) {
	      return self; // nothing to do really
	    }

	    self.addClass(classes);
	    setTimeout(function () {
	      self.removeClass(classes);
	    }, duration);
	    return self;
	  }
	};
	elesfn$e.className = elesfn$e.classNames = elesfn$e.classes;

	var tokens = {
	  metaChar: '[\\!\\"\\#\\$\\%\\&\\\'\\(\\)\\*\\+\\,\\.\\/\\:\\;\\<\\=\\>\\?\\@\\[\\]\\^\\`\\{\\|\\}\\~]',
	  // chars we need to escape in let names, etc
	  comparatorOp: '=|\\!=|>|>=|<|<=|\\$=|\\^=|\\*=',
	  // binary comparison op (used in data selectors)
	  boolOp: '\\?|\\!|\\^',
	  // boolean (unary) operators (used in data selectors)
	  string: '"(?:\\\\"|[^"])*"' + '|' + "'(?:\\\\'|[^'])*'",
	  // string literals (used in data selectors) -- doublequotes | singlequotes
	  number: number$1,
	  // number literal (used in data selectors) --- e.g. 0.1234, 1234, 12e123
	  meta: 'degree|indegree|outdegree',
	  // allowed metadata fields (i.e. allowed functions to use from Collection)
	  separator: '\\s*,\\s*',
	  // queries are separated by commas, e.g. edge[foo = 'bar'], node.someClass
	  descendant: '\\s+',
	  child: '\\s+>\\s+',
	  subject: '\\$',
	  group: 'node|edge|\\*',
	  directedEdge: '\\s+->\\s+',
	  undirectedEdge: '\\s+<->\\s+'
	};
	tokens.variable = '(?:[\\w-]|(?:\\\\' + tokens.metaChar + '))+'; // a variable name

	tokens.value = tokens.string + '|' + tokens.number; // a value literal, either a string or number

	tokens.className = tokens.variable; // a class name (follows variable conventions)

	tokens.id = tokens.variable; // an element id (follows variable conventions)

	(function () {
	  var ops, op, i; // add @ variants to comparatorOp

	  ops = tokens.comparatorOp.split('|');

	  for (i = 0; i < ops.length; i++) {
	    op = ops[i];
	    tokens.comparatorOp += '|@' + op;
	  } // add ! variants to comparatorOp


	  ops = tokens.comparatorOp.split('|');

	  for (i = 0; i < ops.length; i++) {
	    op = ops[i];

	    if (op.indexOf('!') >= 0) {
	      continue;
	    } // skip ops that explicitly contain !


	    if (op === '=') {
	      continue;
	    } // skip = b/c != is explicitly defined


	    tokens.comparatorOp += '|\\!' + op;
	  }
	})();

	/**
	 * Make a new query object
	 *
	 * @prop type {Type} The type enum (int) of the query
	 * @prop checks List of checks to make against an ele to test for a match
	 */
	var newQuery = function newQuery() {
	  return {
	    checks: []
	  };
	};

	/**
	 * A check type enum-like object.  Uses integer values for fast match() lookup.
	 * The ordering does not matter as long as the ints are unique.
	 */
	var Type = {
	  /** E.g. node */
	  GROUP: 0,

	  /** A collection of elements */
	  COLLECTION: 1,

	  /** A filter(ele) function */
	  FILTER: 2,

	  /** E.g. [foo > 1] */
	  DATA_COMPARE: 3,

	  /** E.g. [foo] */
	  DATA_EXIST: 4,

	  /** E.g. [?foo] */
	  DATA_BOOL: 5,

	  /** E.g. [[degree > 2]] */
	  META_COMPARE: 6,

	  /** E.g. :selected */
	  STATE: 7,

	  /** E.g. #foo */
	  ID: 8,

	  /** E.g. .foo */
	  CLASS: 9,

	  /** E.g. #foo <-> #bar */
	  UNDIRECTED_EDGE: 10,

	  /** E.g. #foo -> #bar */
	  DIRECTED_EDGE: 11,

	  /** E.g. $#foo -> #bar */
	  NODE_SOURCE: 12,

	  /** E.g. #foo -> $#bar */
	  NODE_TARGET: 13,

	  /** E.g. $#foo <-> #bar */
	  NODE_NEIGHBOR: 14,

	  /** E.g. #foo > #bar */
	  CHILD: 15,

	  /** E.g. #foo #bar */
	  DESCENDANT: 16,

	  /** E.g. $#foo > #bar */
	  PARENT: 17,

	  /** E.g. $#foo #bar */
	  ANCESTOR: 18,

	  /** E.g. #foo > $bar > #baz */
	  COMPOUND_SPLIT: 19,

	  /** Always matches, useful placeholder for subject in `COMPOUND_SPLIT` */
	  TRUE: 20
	};

	var stateSelectors = [{
	  selector: ':selected',
	  matches: function matches(ele) {
	    return ele.selected();
	  }
	}, {
	  selector: ':unselected',
	  matches: function matches(ele) {
	    return !ele.selected();
	  }
	}, {
	  selector: ':selectable',
	  matches: function matches(ele) {
	    return ele.selectable();
	  }
	}, {
	  selector: ':unselectable',
	  matches: function matches(ele) {
	    return !ele.selectable();
	  }
	}, {
	  selector: ':locked',
	  matches: function matches(ele) {
	    return ele.locked();
	  }
	}, {
	  selector: ':unlocked',
	  matches: function matches(ele) {
	    return !ele.locked();
	  }
	}, {
	  selector: ':visible',
	  matches: function matches(ele) {
	    return ele.visible();
	  }
	}, {
	  selector: ':hidden',
	  matches: function matches(ele) {
	    return !ele.visible();
	  }
	}, {
	  selector: ':transparent',
	  matches: function matches(ele) {
	    return ele.transparent();
	  }
	}, {
	  selector: ':grabbed',
	  matches: function matches(ele) {
	    return ele.grabbed();
	  }
	}, {
	  selector: ':free',
	  matches: function matches(ele) {
	    return !ele.grabbed();
	  }
	}, {
	  selector: ':removed',
	  matches: function matches(ele) {
	    return ele.removed();
	  }
	}, {
	  selector: ':inside',
	  matches: function matches(ele) {
	    return !ele.removed();
	  }
	}, {
	  selector: ':grabbable',
	  matches: function matches(ele) {
	    return ele.grabbable();
	  }
	}, {
	  selector: ':ungrabbable',
	  matches: function matches(ele) {
	    return !ele.grabbable();
	  }
	}, {
	  selector: ':animated',
	  matches: function matches(ele) {
	    return ele.animated();
	  }
	}, {
	  selector: ':unanimated',
	  matches: function matches(ele) {
	    return !ele.animated();
	  }
	}, {
	  selector: ':parent',
	  matches: function matches(ele) {
	    return ele.isParent();
	  }
	}, {
	  selector: ':childless',
	  matches: function matches(ele) {
	    return ele.isChildless();
	  }
	}, {
	  selector: ':child',
	  matches: function matches(ele) {
	    return ele.isChild();
	  }
	}, {
	  selector: ':orphan',
	  matches: function matches(ele) {
	    return ele.isOrphan();
	  }
	}, {
	  selector: ':nonorphan',
	  matches: function matches(ele) {
	    return ele.isChild();
	  }
	}, {
	  selector: ':compound',
	  matches: function matches(ele) {
	    if (ele.isNode()) {
	      return ele.isParent();
	    } else {
	      return ele.source().isParent() || ele.target().isParent();
	    }
	  }
	}, {
	  selector: ':loop',
	  matches: function matches(ele) {
	    return ele.isLoop();
	  }
	}, {
	  selector: ':simple',
	  matches: function matches(ele) {
	    return ele.isSimple();
	  }
	}, {
	  selector: ':active',
	  matches: function matches(ele) {
	    return ele.active();
	  }
	}, {
	  selector: ':inactive',
	  matches: function matches(ele) {
	    return !ele.active();
	  }
	}, {
	  selector: ':backgrounding',
	  matches: function matches(ele) {
	    return ele.backgrounding();
	  }
	}, {
	  selector: ':nonbackgrounding',
	  matches: function matches(ele) {
	    return !ele.backgrounding();
	  }
	}].sort(function (a, b) {
	  // n.b. selectors that are starting substrings of others must have the longer ones first
	  return descending(a.selector, b.selector);
	});

	var lookup = function () {
	  var selToFn = {};
	  var s;

	  for (var i = 0; i < stateSelectors.length; i++) {
	    s = stateSelectors[i];
	    selToFn[s.selector] = s.matches;
	  }

	  return selToFn;
	}();

	var stateSelectorMatches = function stateSelectorMatches(sel, ele) {
	  return lookup[sel](ele);
	};
	var stateSelectorRegex = '(' + stateSelectors.map(function (s) {
	  return s.selector;
	}).join('|') + ')';

	// so that values get compared properly in Selector.filter()

	var cleanMetaChars = function cleanMetaChars(str) {
	  return str.replace(new RegExp('\\\\(' + tokens.metaChar + ')', 'g'), function (match, $1) {
	    return $1;
	  });
	};

	var replaceLastQuery = function replaceLastQuery(selector, examiningQuery, replacementQuery) {
	  selector[selector.length - 1] = replacementQuery;
	}; // NOTE: add new expression syntax here to have it recognised by the parser;
	// - a query contains all adjacent (i.e. no separator in between) expressions;
	// - the current query is stored in selector[i]
	// - you need to check the query objects in match() for it actually filter properly, but that's pretty straight forward


	var exprs = [{
	  name: 'group',
	  // just used for identifying when debugging
	  query: true,
	  regex: '(' + tokens.group + ')',
	  populate: function populate(selector, query, _ref) {
	    var _ref2 = _slicedToArray(_ref, 1),
	        group = _ref2[0];

	    query.checks.push({
	      type: Type.GROUP,
	      value: group === '*' ? group : group + 's'
	    });
	  }
	}, {
	  name: 'state',
	  query: true,
	  regex: stateSelectorRegex,
	  populate: function populate(selector, query, _ref3) {
	    var _ref4 = _slicedToArray(_ref3, 1),
	        state = _ref4[0];

	    query.checks.push({
	      type: Type.STATE,
	      value: state
	    });
	  }
	}, {
	  name: 'id',
	  query: true,
	  regex: '\\#(' + tokens.id + ')',
	  populate: function populate(selector, query, _ref5) {
	    var _ref6 = _slicedToArray(_ref5, 1),
	        id = _ref6[0];

	    query.checks.push({
	      type: Type.ID,
	      value: cleanMetaChars(id)
	    });
	  }
	}, {
	  name: 'className',
	  query: true,
	  regex: '\\.(' + tokens.className + ')',
	  populate: function populate(selector, query, _ref7) {
	    var _ref8 = _slicedToArray(_ref7, 1),
	        className = _ref8[0];

	    query.checks.push({
	      type: Type.CLASS,
	      value: cleanMetaChars(className)
	    });
	  }
	}, {
	  name: 'dataExists',
	  query: true,
	  regex: '\\[\\s*(' + tokens.variable + ')\\s*\\]',
	  populate: function populate(selector, query, _ref9) {
	    var _ref10 = _slicedToArray(_ref9, 1),
	        variable = _ref10[0];

	    query.checks.push({
	      type: Type.DATA_EXIST,
	      field: cleanMetaChars(variable)
	    });
	  }
	}, {
	  name: 'dataCompare',
	  query: true,
	  regex: '\\[\\s*(' + tokens.variable + ')\\s*(' + tokens.comparatorOp + ')\\s*(' + tokens.value + ')\\s*\\]',
	  populate: function populate(selector, query, _ref11) {
	    var _ref12 = _slicedToArray(_ref11, 3),
	        variable = _ref12[0],
	        comparatorOp = _ref12[1],
	        value = _ref12[2];

	    var valueIsString = new RegExp('^' + tokens.string + '$').exec(value) != null;

	    if (valueIsString) {
	      value = value.substring(1, value.length - 1);
	    } else {
	      value = parseFloat(value);
	    }

	    query.checks.push({
	      type: Type.DATA_COMPARE,
	      field: cleanMetaChars(variable),
	      operator: comparatorOp,
	      value: value
	    });
	  }
	}, {
	  name: 'dataBool',
	  query: true,
	  regex: '\\[\\s*(' + tokens.boolOp + ')\\s*(' + tokens.variable + ')\\s*\\]',
	  populate: function populate(selector, query, _ref13) {
	    var _ref14 = _slicedToArray(_ref13, 2),
	        boolOp = _ref14[0],
	        variable = _ref14[1];

	    query.checks.push({
	      type: Type.DATA_BOOL,
	      field: cleanMetaChars(variable),
	      operator: boolOp
	    });
	  }
	}, {
	  name: 'metaCompare',
	  query: true,
	  regex: '\\[\\[\\s*(' + tokens.meta + ')\\s*(' + tokens.comparatorOp + ')\\s*(' + tokens.number + ')\\s*\\]\\]',
	  populate: function populate(selector, query, _ref15) {
	    var _ref16 = _slicedToArray(_ref15, 3),
	        meta = _ref16[0],
	        comparatorOp = _ref16[1],
	        number = _ref16[2];

	    query.checks.push({
	      type: Type.META_COMPARE,
	      field: cleanMetaChars(meta),
	      operator: comparatorOp,
	      value: parseFloat(number)
	    });
	  }
	}, {
	  name: 'nextQuery',
	  separator: true,
	  regex: tokens.separator,
	  populate: function populate(selector, query) {
	    var currentSubject = selector.currentSubject;
	    var edgeCount = selector.edgeCount;
	    var compoundCount = selector.compoundCount;
	    var lastQ = selector[selector.length - 1];

	    if (currentSubject != null) {
	      lastQ.subject = currentSubject;
	      selector.currentSubject = null;
	    }

	    lastQ.edgeCount = edgeCount;
	    lastQ.compoundCount = compoundCount;
	    selector.edgeCount = 0;
	    selector.compoundCount = 0; // go on to next query

	    var nextQuery = selector[selector.length++] = newQuery();
	    return nextQuery; // this is the new query to be filled by the following exprs
	  }
	}, {
	  name: 'directedEdge',
	  separator: true,
	  regex: tokens.directedEdge,
	  populate: function populate(selector, query) {
	    if (selector.currentSubject == null) {
	      // undirected edge
	      var edgeQuery = newQuery();
	      var source = query;
	      var target = newQuery();
	      edgeQuery.checks.push({
	        type: Type.DIRECTED_EDGE,
	        source: source,
	        target: target
	      }); // the query in the selector should be the edge rather than the source

	      replaceLastQuery(selector, query, edgeQuery);
	      selector.edgeCount++; // we're now populating the target query with expressions that follow

	      return target;
	    } else {
	      // source/target
	      var srcTgtQ = newQuery();
	      var _source = query;

	      var _target = newQuery();

	      srcTgtQ.checks.push({
	        type: Type.NODE_SOURCE,
	        source: _source,
	        target: _target
	      }); // the query in the selector should be the neighbourhood rather than the node

	      replaceLastQuery(selector, query, srcTgtQ);
	      selector.edgeCount++;
	      return _target; // now populating the target with the following expressions
	    }
	  }
	}, {
	  name: 'undirectedEdge',
	  separator: true,
	  regex: tokens.undirectedEdge,
	  populate: function populate(selector, query) {
	    if (selector.currentSubject == null) {
	      // undirected edge
	      var edgeQuery = newQuery();
	      var source = query;
	      var target = newQuery();
	      edgeQuery.checks.push({
	        type: Type.UNDIRECTED_EDGE,
	        nodes: [source, target]
	      }); // the query in the selector should be the edge rather than the source

	      replaceLastQuery(selector, query, edgeQuery);
	      selector.edgeCount++; // we're now populating the target query with expressions that follow

	      return target;
	    } else {
	      // neighbourhood
	      var nhoodQ = newQuery();
	      var node = query;
	      var neighbor = newQuery();
	      nhoodQ.checks.push({
	        type: Type.NODE_NEIGHBOR,
	        node: node,
	        neighbor: neighbor
	      }); // the query in the selector should be the neighbourhood rather than the node

	      replaceLastQuery(selector, query, nhoodQ);
	      return neighbor; // now populating the neighbor with following expressions
	    }
	  }
	}, {
	  name: 'child',
	  separator: true,
	  regex: tokens.child,
	  populate: function populate(selector, query) {
	    if (selector.currentSubject == null) {
	      // default: child query
	      var parentChildQuery = newQuery();
	      var child = newQuery();
	      var parent = selector[selector.length - 1];
	      parentChildQuery.checks.push({
	        type: Type.CHILD,
	        parent: parent,
	        child: child
	      }); // the query in the selector should be the '>' itself

	      replaceLastQuery(selector, query, parentChildQuery);
	      selector.compoundCount++; // we're now populating the child query with expressions that follow

	      return child;
	    } else if (selector.currentSubject === query) {
	      // compound split query
	      var compound = newQuery();
	      var left = selector[selector.length - 1];
	      var right = newQuery();
	      var subject = newQuery();

	      var _child = newQuery();

	      var _parent = newQuery(); // set up the root compound q


	      compound.checks.push({
	        type: Type.COMPOUND_SPLIT,
	        left: left,
	        right: right,
	        subject: subject
	      }); // populate the subject and replace the q at the old spot (within left) with TRUE

	      subject.checks = query.checks; // take the checks from the left

	      query.checks = [{
	        type: Type.TRUE
	      }]; // checks under left refs the subject implicitly
	      // set up the right q

	      _parent.checks.push({
	        type: Type.TRUE
	      }); // parent implicitly refs the subject


	      right.checks.push({
	        type: Type.PARENT,
	        // type is swapped on right side queries
	        parent: _parent,
	        child: _child // empty for now

	      });
	      replaceLastQuery(selector, left, compound); // update the ref since we moved things around for `query`

	      selector.currentSubject = subject;
	      selector.compoundCount++;
	      return _child; // now populating the right side's child
	    } else {
	      // parent query
	      // info for parent query
	      var _parent2 = newQuery();

	      var _child2 = newQuery();

	      var pcQChecks = [{
	        type: Type.PARENT,
	        parent: _parent2,
	        child: _child2
	      }]; // the parent-child query takes the place of the query previously being populated

	      _parent2.checks = query.checks; // the previous query contains the checks for the parent

	      query.checks = pcQChecks; // pc query takes over

	      selector.compoundCount++;
	      return _child2; // we're now populating the child
	    }
	  }
	}, {
	  name: 'descendant',
	  separator: true,
	  regex: tokens.descendant,
	  populate: function populate(selector, query) {
	    if (selector.currentSubject == null) {
	      // default: descendant query
	      var ancChQuery = newQuery();
	      var descendant = newQuery();
	      var ancestor = selector[selector.length - 1];
	      ancChQuery.checks.push({
	        type: Type.DESCENDANT,
	        ancestor: ancestor,
	        descendant: descendant
	      }); // the query in the selector should be the '>' itself

	      replaceLastQuery(selector, query, ancChQuery);
	      selector.compoundCount++; // we're now populating the descendant query with expressions that follow

	      return descendant;
	    } else if (selector.currentSubject === query) {
	      // compound split query
	      var compound = newQuery();
	      var left = selector[selector.length - 1];
	      var right = newQuery();
	      var subject = newQuery();

	      var _descendant = newQuery();

	      var _ancestor = newQuery(); // set up the root compound q


	      compound.checks.push({
	        type: Type.COMPOUND_SPLIT,
	        left: left,
	        right: right,
	        subject: subject
	      }); // populate the subject and replace the q at the old spot (within left) with TRUE

	      subject.checks = query.checks; // take the checks from the left

	      query.checks = [{
	        type: Type.TRUE
	      }]; // checks under left refs the subject implicitly
	      // set up the right q

	      _ancestor.checks.push({
	        type: Type.TRUE
	      }); // ancestor implicitly refs the subject


	      right.checks.push({
	        type: Type.ANCESTOR,
	        // type is swapped on right side queries
	        ancestor: _ancestor,
	        descendant: _descendant // empty for now

	      });
	      replaceLastQuery(selector, left, compound); // update the ref since we moved things around for `query`

	      selector.currentSubject = subject;
	      selector.compoundCount++;
	      return _descendant; // now populating the right side's descendant
	    } else {
	      // ancestor query
	      // info for parent query
	      var _ancestor2 = newQuery();

	      var _descendant2 = newQuery();

	      var adQChecks = [{
	        type: Type.ANCESTOR,
	        ancestor: _ancestor2,
	        descendant: _descendant2
	      }]; // the parent-child query takes the place of the query previously being populated

	      _ancestor2.checks = query.checks; // the previous query contains the checks for the parent

	      query.checks = adQChecks; // pc query takes over

	      selector.compoundCount++;
	      return _descendant2; // we're now populating the child
	    }
	  }
	}, {
	  name: 'subject',
	  modifier: true,
	  regex: tokens.subject,
	  populate: function populate(selector, query) {
	    if (selector.currentSubject != null && selector.currentSubject !== query) {
	      warn('Redefinition of subject in selector `' + selector.toString() + '`');
	      return false;
	    }

	    selector.currentSubject = query;
	    var topQ = selector[selector.length - 1];
	    var topChk = topQ.checks[0];
	    var topType = topChk == null ? null : topChk.type;

	    if (topType === Type.DIRECTED_EDGE) {
	      // directed edge with subject on the target
	      // change to target node check
	      topChk.type = Type.NODE_TARGET;
	    } else if (topType === Type.UNDIRECTED_EDGE) {
	      // undirected edge with subject on the second node
	      // change to neighbor check
	      topChk.type = Type.NODE_NEIGHBOR;
	      topChk.node = topChk.nodes[1]; // second node is subject

	      topChk.neighbor = topChk.nodes[0]; // clean up unused fields for new type

	      topChk.nodes = null;
	    }
	  }
	}];
	exprs.forEach(function (e) {
	  return e.regexObj = new RegExp('^' + e.regex);
	});

	/**
	 * Of all the expressions, find the first match in the remaining text.
	 * @param {string} remaining The remaining text to parse
	 * @returns The matched expression and the newly remaining text `{ expr, match, name, remaining }`
	 */

	var consumeExpr = function consumeExpr(remaining) {
	  var expr;
	  var match;
	  var name;

	  for (var j = 0; j < exprs.length; j++) {
	    var e = exprs[j];
	    var n = e.name;
	    var m = remaining.match(e.regexObj);

	    if (m != null) {
	      match = m;
	      expr = e;
	      name = n;
	      var consumed = m[0];
	      remaining = remaining.substring(consumed.length);
	      break; // we've consumed one expr, so we can return now
	    }
	  }

	  return {
	    expr: expr,
	    match: match,
	    name: name,
	    remaining: remaining
	  };
	};
	/**
	 * Consume all the leading whitespace
	 * @param {string} remaining The text to consume
	 * @returns The text with the leading whitespace removed
	 */


	var consumeWhitespace = function consumeWhitespace(remaining) {
	  var match = remaining.match(/^\s+/);

	  if (match) {
	    var consumed = match[0];
	    remaining = remaining.substring(consumed.length);
	  }

	  return remaining;
	};
	/**
	 * Parse the string and store the parsed representation in the Selector.
	 * @param {string} selector The selector string
	 * @returns `true` if the selector was successfully parsed, `false` otherwise
	 */


	var parse = function parse(selector) {
	  var self = this;
	  var remaining = self.inputText = selector;
	  var currentQuery = self[0] = newQuery();
	  self.length = 1;
	  remaining = consumeWhitespace(remaining); // get rid of leading whitespace

	  for (;;) {
	    var exprInfo = consumeExpr(remaining);

	    if (exprInfo.expr == null) {
	      warn('The selector `' + selector + '`is invalid');
	      return false;
	    } else {
	      var args = exprInfo.match.slice(1); // let the token populate the selector object in currentQuery

	      var ret = exprInfo.expr.populate(self, currentQuery, args);

	      if (ret === false) {
	        return false; // exit if population failed
	      } else if (ret != null) {
	        currentQuery = ret; // change the current query to be filled if the expr specifies
	      }
	    }

	    remaining = exprInfo.remaining; // we're done when there's nothing left to parse

	    if (remaining.match(/^\s*$/)) {
	      break;
	    }
	  }

	  var lastQ = self[self.length - 1];

	  if (self.currentSubject != null) {
	    lastQ.subject = self.currentSubject;
	  }

	  lastQ.edgeCount = self.edgeCount;
	  lastQ.compoundCount = self.compoundCount;

	  for (var i = 0; i < self.length; i++) {
	    var q = self[i]; // in future, this could potentially be allowed if there were operator precedence and detection of invalid combinations

	    if (q.compoundCount > 0 && q.edgeCount > 0) {
	      warn('The selector `' + selector + '` is invalid because it uses both a compound selector and an edge selector');
	      return false;
	    }

	    if (q.edgeCount > 1) {
	      warn('The selector `' + selector + '` is invalid because it uses multiple edge selectors');
	      return false;
	    } else if (q.edgeCount === 1) {
	      warn('The selector `' + selector + '` is deprecated.  Edge selectors do not take effect on changes to source and target nodes after an edge is added, for performance reasons.  Use a class or data selector on edges instead, updating the class or data of an edge when your app detects a change in source or target nodes.');
	    }
	  }

	  return true; // success
	};
	/**
	 * Get the selector represented as a string.  This value uses default formatting,
	 * so things like spacing may differ from the input text passed to the constructor.
	 * @returns {string} The selector string
	 */


	var toString = function toString() {
	  if (this.toStringCache != null) {
	    return this.toStringCache;
	  }

	  var clean = function clean(obj) {
	    if (obj == null) {
	      return '';
	    } else {
	      return obj;
	    }
	  };

	  var cleanVal = function cleanVal(val) {
	    if (string(val)) {
	      return '"' + val + '"';
	    } else {
	      return clean(val);
	    }
	  };

	  var space = function space(val) {
	    return ' ' + val + ' ';
	  };

	  var checkToString = function checkToString(check, subject) {
	    var type = check.type,
	        value = check.value;

	    switch (type) {
	      case Type.GROUP:
	        {
	          var group = clean(value);
	          return group.substring(0, group.length - 1);
	        }

	      case Type.DATA_COMPARE:
	        {
	          var field = check.field,
	              operator = check.operator;
	          return '[' + field + space(clean(operator)) + cleanVal(value) + ']';
	        }

	      case Type.DATA_BOOL:
	        {
	          var _operator = check.operator,
	              _field = check.field;
	          return '[' + clean(_operator) + _field + ']';
	        }

	      case Type.DATA_EXIST:
	        {
	          var _field2 = check.field;
	          return '[' + _field2 + ']';
	        }

	      case Type.META_COMPARE:
	        {
	          var _operator2 = check.operator,
	              _field3 = check.field;
	          return '[[' + _field3 + space(clean(_operator2)) + cleanVal(value) + ']]';
	        }

	      case Type.STATE:
	        {
	          return value;
	        }

	      case Type.ID:
	        {
	          return '#' + value;
	        }

	      case Type.CLASS:
	        {
	          return '.' + value;
	        }

	      case Type.PARENT:
	      case Type.CHILD:
	        {
	          return queryToString(check.parent, subject) + space('>') + queryToString(check.child, subject);
	        }

	      case Type.ANCESTOR:
	      case Type.DESCENDANT:
	        {
	          return queryToString(check.ancestor, subject) + ' ' + queryToString(check.descendant, subject);
	        }

	      case Type.COMPOUND_SPLIT:
	        {
	          var lhs = queryToString(check.left, subject);
	          var sub = queryToString(check.subject, subject);
	          var rhs = queryToString(check.right, subject);
	          return lhs + (lhs.length > 0 ? ' ' : '') + sub + rhs;
	        }

	      case Type.TRUE:
	        {
	          return '';
	        }
	    }
	  };

	  var queryToString = function queryToString(query, subject) {
	    return query.checks.reduce(function (str, chk, i) {
	      return str + (subject === query && i === 0 ? '$' : '') + checkToString(chk, subject);
	    }, '');
	  };

	  var str = '';

	  for (var i = 0; i < this.length; i++) {
	    var query = this[i];
	    str += queryToString(query, query.subject);

	    if (this.length > 1 && i < this.length - 1) {
	      str += ', ';
	    }
	  }

	  this.toStringCache = str;
	  return str;
	};
	var parse$1 = {
	  parse: parse,
	  toString: toString
	};

	var valCmp = function valCmp(fieldVal, operator, value) {
	  var matches;
	  var isFieldStr = string(fieldVal);
	  var isFieldNum = number(fieldVal);
	  var isValStr = string(value);
	  var fieldStr, valStr;
	  var caseInsensitive = false;
	  var notExpr = false;
	  var isIneqCmp = false;

	  if (operator.indexOf('!') >= 0) {
	    operator = operator.replace('!', '');
	    notExpr = true;
	  }

	  if (operator.indexOf('@') >= 0) {
	    operator = operator.replace('@', '');
	    caseInsensitive = true;
	  }

	  if (isFieldStr || isValStr || caseInsensitive) {
	    fieldStr = !isFieldStr && !isFieldNum ? '' : '' + fieldVal;
	    valStr = '' + value;
	  } // if we're doing a case insensitive comparison, then we're using a STRING comparison
	  // even if we're comparing numbers


	  if (caseInsensitive) {
	    fieldVal = fieldStr = fieldStr.toLowerCase();
	    value = valStr = valStr.toLowerCase();
	  }

	  switch (operator) {
	    case '*=':
	      matches = fieldStr.indexOf(valStr) >= 0;
	      break;

	    case '$=':
	      matches = fieldStr.indexOf(valStr, fieldStr.length - valStr.length) >= 0;
	      break;

	    case '^=':
	      matches = fieldStr.indexOf(valStr) === 0;
	      break;

	    case '=':
	      matches = fieldVal === value;
	      break;

	    case '>':
	      isIneqCmp = true;
	      matches = fieldVal > value;
	      break;

	    case '>=':
	      isIneqCmp = true;
	      matches = fieldVal >= value;
	      break;

	    case '<':
	      isIneqCmp = true;
	      matches = fieldVal < value;
	      break;

	    case '<=':
	      isIneqCmp = true;
	      matches = fieldVal <= value;
	      break;

	    default:
	      matches = false;
	      break;
	  } // apply the not op, but null vals for inequalities should always stay non-matching


	  if (notExpr && (fieldVal != null || !isIneqCmp)) {
	    matches = !matches;
	  }

	  return matches;
	};
	var boolCmp = function boolCmp(fieldVal, operator) {
	  switch (operator) {
	    case '?':
	      return fieldVal ? true : false;

	    case '!':
	      return fieldVal ? false : true;

	    case '^':
	      return fieldVal === undefined;
	  }
	};
	var existCmp = function existCmp(fieldVal) {
	  return fieldVal !== undefined;
	};
	var data = function data(ele, field) {
	  return ele.data(field);
	};
	var meta = function meta(ele, field) {
	  return ele[field]();
	};

	/** A lookup of `match(check, ele)` functions by `Type` int */

	var match = [];
	/**
	 * Returns whether the query matches for the element
	 * @param query The `{ type, value, ... }` query object
	 * @param ele The element to compare against
	*/

	var matches = function matches(query, ele) {
	  return query.checks.every(function (chk) {
	    return match[chk.type](chk, ele);
	  });
	};

	match[Type.GROUP] = function (check, ele) {
	  var group = check.value;
	  return group === '*' || group === ele.group();
	};

	match[Type.STATE] = function (check, ele) {
	  var stateSelector = check.value;
	  return stateSelectorMatches(stateSelector, ele);
	};

	match[Type.ID] = function (check, ele) {
	  var id = check.value;
	  return ele.id() === id;
	};

	match[Type.CLASS] = function (check, ele) {
	  var cls = check.value;
	  return ele.hasClass(cls);
	};

	match[Type.META_COMPARE] = function (check, ele) {
	  var field = check.field,
	      operator = check.operator,
	      value = check.value;
	  return valCmp(meta(ele, field), operator, value);
	};

	match[Type.DATA_COMPARE] = function (check, ele) {
	  var field = check.field,
	      operator = check.operator,
	      value = check.value;
	  return valCmp(data(ele, field), operator, value);
	};

	match[Type.DATA_BOOL] = function (check, ele) {
	  var field = check.field,
	      operator = check.operator;
	  return boolCmp(data(ele, field), operator);
	};

	match[Type.DATA_EXIST] = function (check, ele) {
	  var field = check.field,
	      operator = check.operator;
	  return existCmp(data(ele, field));
	};

	match[Type.UNDIRECTED_EDGE] = function (check, ele) {
	  var qA = check.nodes[0];
	  var qB = check.nodes[1];
	  var src = ele.source();
	  var tgt = ele.target();
	  return matches(qA, src) && matches(qB, tgt) || matches(qB, src) && matches(qA, tgt);
	};

	match[Type.NODE_NEIGHBOR] = function (check, ele) {
	  return matches(check.node, ele) && ele.neighborhood().some(function (n) {
	    return n.isNode() && matches(check.neighbor, n);
	  });
	};

	match[Type.DIRECTED_EDGE] = function (check, ele) {
	  return matches(check.source, ele.source()) && matches(check.target, ele.target());
	};

	match[Type.NODE_SOURCE] = function (check, ele) {
	  return matches(check.source, ele) && ele.outgoers().some(function (n) {
	    return n.isNode() && matches(check.target, n);
	  });
	};

	match[Type.NODE_TARGET] = function (check, ele) {
	  return matches(check.target, ele) && ele.incomers().some(function (n) {
	    return n.isNode() && matches(check.source, n);
	  });
	};

	match[Type.CHILD] = function (check, ele) {
	  return matches(check.child, ele) && matches(check.parent, ele.parent());
	};

	match[Type.PARENT] = function (check, ele) {
	  return matches(check.parent, ele) && ele.children().some(function (c) {
	    return matches(check.child, c);
	  });
	};

	match[Type.DESCENDANT] = function (check, ele) {
	  return matches(check.descendant, ele) && ele.ancestors().some(function (a) {
	    return matches(check.ancestor, a);
	  });
	};

	match[Type.ANCESTOR] = function (check, ele) {
	  return matches(check.ancestor, ele) && ele.descendants().some(function (d) {
	    return matches(check.descendant, d);
	  });
	};

	match[Type.COMPOUND_SPLIT] = function (check, ele) {
	  return matches(check.subject, ele) && matches(check.left, ele) && matches(check.right, ele);
	};

	match[Type.TRUE] = function () {
	  return true;
	};

	match[Type.COLLECTION] = function (check, ele) {
	  var collection = check.value;
	  return collection.has(ele);
	};

	match[Type.FILTER] = function (check, ele) {
	  var filter = check.value;
	  return filter(ele);
	};

	var filter = function filter(collection) {
	  var self = this; // for 1 id #foo queries, just get the element

	  if (self.length === 1 && self[0].checks.length === 1 && self[0].checks[0].type === Type.ID) {
	    return collection.getElementById(self[0].checks[0].value).collection();
	  }

	  var selectorFunction = function selectorFunction(element) {
	    for (var j = 0; j < self.length; j++) {
	      var query = self[j];

	      if (matches(query, element)) {
	        return true;
	      }
	    }

	    return false;
	  };

	  if (self.text() == null) {
	    selectorFunction = function selectorFunction() {
	      return true;
	    };
	  }

	  return collection.filter(selectorFunction);
	}; // filter
	// does selector match a single element?


	var matches$1 = function matches$1(ele) {
	  var self = this;

	  for (var j = 0; j < self.length; j++) {
	    var query = self[j];

	    if (matches(query, ele)) {
	      return true;
	    }
	  }

	  return false;
	}; // matches


	var matching = {
	  matches: matches$1,
	  filter: filter
	};

	var Selector = function Selector(selector) {
	  this.inputText = selector;
	  this.currentSubject = null;
	  this.compoundCount = 0;
	  this.edgeCount = 0;
	  this.length = 0;

	  if (selector == null || string(selector) && selector.match(/^\s*$/)) ; else if (elementOrCollection(selector)) {
	    this.addQuery({
	      checks: [{
	        type: Type.COLLECTION,
	        value: selector.collection()
	      }]
	    });
	  } else if (fn(selector)) {
	    this.addQuery({
	      checks: [{
	        type: Type.FILTER,
	        value: selector
	      }]
	    });
	  } else if (string(selector)) {
	    if (!this.parse(selector)) {
	      this.invalid = true;
	    }
	  } else {
	    error('A selector must be created from a string; found ');
	  }
	};

	var selfn = Selector.prototype;
	[parse$1, matching].forEach(function (p) {
	  return extend(selfn, p);
	});

	selfn.text = function () {
	  return this.inputText;
	};

	selfn.size = function () {
	  return this.length;
	};

	selfn.eq = function (i) {
	  return this[i];
	};

	selfn.sameText = function (otherSel) {
	  return !this.invalid && !otherSel.invalid && this.text() === otherSel.text();
	};

	selfn.addQuery = function (q) {
	  this[this.length++] = q;
	};

	selfn.selector = selfn.toString;

	var elesfn$f = {
	  allAre: function allAre(selector) {
	    var selObj = new Selector(selector);
	    return this.every(function (ele) {
	      return selObj.matches(ele);
	    });
	  },
	  is: function is(selector) {
	    var selObj = new Selector(selector);
	    return this.some(function (ele) {
	      return selObj.matches(ele);
	    });
	  },
	  some: function some(fn, thisArg) {
	    for (var i = 0; i < this.length; i++) {
	      var ret = !thisArg ? fn(this[i], i, this) : fn.apply(thisArg, [this[i], i, this]);

	      if (ret) {
	        return true;
	      }
	    }

	    return false;
	  },
	  every: function every(fn, thisArg) {
	    for (var i = 0; i < this.length; i++) {
	      var ret = !thisArg ? fn(this[i], i, this) : fn.apply(thisArg, [this[i], i, this]);

	      if (!ret) {
	        return false;
	      }
	    }

	    return true;
	  },
	  same: function same(collection) {
	    // cheap collection ref check
	    if (this === collection) {
	      return true;
	    }

	    collection = this.cy().collection(collection);
	    var thisLength = this.length;
	    var collectionLength = collection.length; // cheap length check

	    if (thisLength !== collectionLength) {
	      return false;
	    } // cheap element ref check


	    if (thisLength === 1) {
	      return this[0] === collection[0];
	    }

	    return this.every(function (ele) {
	      return collection.hasElementWithId(ele.id());
	    });
	  },
	  anySame: function anySame(collection) {
	    collection = this.cy().collection(collection);
	    return this.some(function (ele) {
	      return collection.hasElementWithId(ele.id());
	    });
	  },
	  allAreNeighbors: function allAreNeighbors(collection) {
	    collection = this.cy().collection(collection);
	    var nhood = this.neighborhood();
	    return collection.every(function (ele) {
	      return nhood.hasElementWithId(ele.id());
	    });
	  },
	  contains: function contains(collection) {
	    collection = this.cy().collection(collection);
	    var self = this;
	    return collection.every(function (ele) {
	      return self.hasElementWithId(ele.id());
	    });
	  }
	};
	elesfn$f.allAreNeighbours = elesfn$f.allAreNeighbors;
	elesfn$f.has = elesfn$f.contains;
	elesfn$f.equal = elesfn$f.equals = elesfn$f.same;

	var cache = function cache(fn, name) {
	  return function traversalCache(arg1, arg2, arg3, arg4) {
	    var selectorOrEles = arg1;
	    var eles = this;
	    var key;

	    if (selectorOrEles == null) {
	      key = '';
	    } else if (elementOrCollection(selectorOrEles) && selectorOrEles.length === 1) {
	      key = selectorOrEles.id();
	    }

	    if (eles.length === 1 && key) {
	      var _p = eles[0]._private;
	      var tch = _p.traversalCache = _p.traversalCache || {};
	      var ch = tch[name] = tch[name] || [];
	      var hash = hashString(key);
	      var cacheHit = ch[hash];

	      if (cacheHit) {
	        return cacheHit;
	      } else {
	        return ch[hash] = fn.call(eles, arg1, arg2, arg3, arg4);
	      }
	    } else {
	      return fn.call(eles, arg1, arg2, arg3, arg4);
	    }
	  };
	};

	var elesfn$g = {
	  parent: function parent(selector) {
	    var parents = []; // optimisation for single ele call

	    if (this.length === 1) {
	      var parent = this[0]._private.parent;

	      if (parent) {
	        return parent;
	      }
	    }

	    for (var i = 0; i < this.length; i++) {
	      var ele = this[i];
	      var _parent = ele._private.parent;

	      if (_parent) {
	        parents.push(_parent);
	      }
	    }

	    return this.spawn(parents, {
	      unique: true
	    }).filter(selector);
	  },
	  parents: function parents(selector) {
	    var parents = [];
	    var eles = this.parent();

	    while (eles.nonempty()) {
	      for (var i = 0; i < eles.length; i++) {
	        var ele = eles[i];
	        parents.push(ele);
	      }

	      eles = eles.parent();
	    }

	    return this.spawn(parents, {
	      unique: true
	    }).filter(selector);
	  },
	  commonAncestors: function commonAncestors(selector) {
	    var ancestors;

	    for (var i = 0; i < this.length; i++) {
	      var ele = this[i];
	      var parents = ele.parents();
	      ancestors = ancestors || parents;
	      ancestors = ancestors.intersect(parents); // current list must be common with current ele parents set
	    }

	    return ancestors.filter(selector);
	  },
	  orphans: function orphans(selector) {
	    return this.stdFilter(function (ele) {
	      return ele.isOrphan();
	    }).filter(selector);
	  },
	  nonorphans: function nonorphans(selector) {
	    return this.stdFilter(function (ele) {
	      return ele.isChild();
	    }).filter(selector);
	  },
	  children: cache(function (selector) {
	    var children = [];

	    for (var i = 0; i < this.length; i++) {
	      var ele = this[i];
	      var eleChildren = ele._private.children;

	      for (var j = 0; j < eleChildren.length; j++) {
	        children.push(eleChildren[j]);
	      }
	    }

	    return this.spawn(children, {
	      unique: true
	    }).filter(selector);
	  }, 'children'),
	  siblings: function siblings(selector) {
	    return this.parent().children().not(this).filter(selector);
	  },
	  isParent: function isParent() {
	    var ele = this[0];

	    if (ele) {
	      return ele.isNode() && ele._private.children.length !== 0;
	    }
	  },
	  isChildless: function isChildless() {
	    var ele = this[0];

	    if (ele) {
	      return ele.isNode() && ele._private.children.length === 0;
	    }
	  },
	  isChild: function isChild() {
	    var ele = this[0];

	    if (ele) {
	      return ele.isNode() && ele._private.parent != null;
	    }
	  },
	  isOrphan: function isOrphan() {
	    var ele = this[0];

	    if (ele) {
	      return ele.isNode() && ele._private.parent == null;
	    }
	  },
	  descendants: function descendants(selector) {
	    var elements = [];

	    function add(eles) {
	      for (var i = 0; i < eles.length; i++) {
	        var ele = eles[i];
	        elements.push(ele);

	        if (ele.children().nonempty()) {
	          add(ele.children());
	        }
	      }
	    }

	    add(this.children());
	    return this.spawn(elements, {
	      unique: true
	    }).filter(selector);
	  }
	};

	function forEachCompound(eles, fn, includeSelf, recursiveStep) {
	  var q = [];
	  var did = new Set$1();
	  var cy = eles.cy();
	  var hasCompounds = cy.hasCompoundNodes();

	  for (var i = 0; i < eles.length; i++) {
	    var ele = eles[i];

	    if (includeSelf) {
	      q.push(ele);
	    } else if (hasCompounds) {
	      recursiveStep(q, did, ele);
	    }
	  }

	  while (q.length > 0) {
	    var _ele = q.shift();

	    fn(_ele);
	    did.add(_ele.id());

	    if (hasCompounds) {
	      recursiveStep(q, did, _ele);
	    }
	  }

	  return eles;
	}

	function addChildren(q, did, ele) {
	  if (ele.isParent()) {
	    var children = ele._private.children;

	    for (var i = 0; i < children.length; i++) {
	      var child = children[i];

	      if (!did.has(child.id())) {
	        q.push(child);
	      }
	    }
	  }
	} // very efficient version of eles.add( eles.descendants() ).forEach()
	// for internal use


	elesfn$g.forEachDown = function (fn) {
	  var includeSelf = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
	  return forEachCompound(this, fn, includeSelf, addChildren);
	};

	function addParent(q, did, ele) {
	  if (ele.isChild()) {
	    var parent = ele._private.parent;

	    if (!did.has(parent.id())) {
	      q.push(parent);
	    }
	  }
	}

	elesfn$g.forEachUp = function (fn) {
	  var includeSelf = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
	  return forEachCompound(this, fn, includeSelf, addParent);
	};

	function addParentAndChildren(q, did, ele) {
	  addParent(q, did, ele);
	  addChildren(q, did, ele);
	}

	elesfn$g.forEachUpAndDown = function (fn) {
	  var includeSelf = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
	  return forEachCompound(this, fn, includeSelf, addParentAndChildren);
	}; // aliases


	elesfn$g.ancestors = elesfn$g.parents;

	var fn$1, elesfn$h;
	fn$1 = elesfn$h = {
	  data: define$3.data({
	    field: 'data',
	    bindingEvent: 'data',
	    allowBinding: true,
	    allowSetting: true,
	    settingEvent: 'data',
	    settingTriggersEvent: true,
	    triggerFnName: 'trigger',
	    allowGetting: true,
	    immutableKeys: {
	      'id': true,
	      'source': true,
	      'target': true,
	      'parent': true
	    },
	    updateStyle: true
	  }),
	  removeData: define$3.removeData({
	    field: 'data',
	    event: 'data',
	    triggerFnName: 'trigger',
	    triggerEvent: true,
	    immutableKeys: {
	      'id': true,
	      'source': true,
	      'target': true,
	      'parent': true
	    },
	    updateStyle: true
	  }),
	  scratch: define$3.data({
	    field: 'scratch',
	    bindingEvent: 'scratch',
	    allowBinding: true,
	    allowSetting: true,
	    settingEvent: 'scratch',
	    settingTriggersEvent: true,
	    triggerFnName: 'trigger',
	    allowGetting: true,
	    updateStyle: true
	  }),
	  removeScratch: define$3.removeData({
	    field: 'scratch',
	    event: 'scratch',
	    triggerFnName: 'trigger',
	    triggerEvent: true,
	    updateStyle: true
	  }),
	  rscratch: define$3.data({
	    field: 'rscratch',
	    allowBinding: false,
	    allowSetting: true,
	    settingTriggersEvent: false,
	    allowGetting: true
	  }),
	  removeRscratch: define$3.removeData({
	    field: 'rscratch',
	    triggerEvent: false
	  }),
	  id: function id() {
	    var ele = this[0];

	    if (ele) {
	      return ele._private.data.id;
	    }
	  }
	}; // aliases

	fn$1.attr = fn$1.data;
	fn$1.removeAttr = fn$1.removeData;
	var data$1 = elesfn$h;

	var elesfn$i = {};

	function defineDegreeFunction(callback) {
	  return function (includeLoops) {
	    var self = this;

	    if (includeLoops === undefined) {
	      includeLoops = true;
	    }

	    if (self.length === 0) {
	      return;
	    }

	    if (self.isNode() && !self.removed()) {
	      var degree = 0;
	      var node = self[0];
	      var connectedEdges = node._private.edges;

	      for (var i = 0; i < connectedEdges.length; i++) {
	        var edge = connectedEdges[i];

	        if (!includeLoops && edge.isLoop()) {
	          continue;
	        }

	        degree += callback(node, edge);
	      }

	      return degree;
	    } else {
	      return;
	    }
	  };
	}

	extend(elesfn$i, {
	  degree: defineDegreeFunction(function (node, edge) {
	    if (edge.source().same(edge.target())) {
	      return 2;
	    } else {
	      return 1;
	    }
	  }),
	  indegree: defineDegreeFunction(function (node, edge) {
	    if (edge.target().same(node)) {
	      return 1;
	    } else {
	      return 0;
	    }
	  }),
	  outdegree: defineDegreeFunction(function (node, edge) {
	    if (edge.source().same(node)) {
	      return 1;
	    } else {
	      return 0;
	    }
	  })
	});

	function defineDegreeBoundsFunction(degreeFn, callback) {
	  return function (includeLoops) {
	    var ret;
	    var nodes = this.nodes();

	    for (var i = 0; i < nodes.length; i++) {
	      var ele = nodes[i];
	      var degree = ele[degreeFn](includeLoops);

	      if (degree !== undefined && (ret === undefined || callback(degree, ret))) {
	        ret = degree;
	      }
	    }

	    return ret;
	  };
	}

	extend(elesfn$i, {
	  minDegree: defineDegreeBoundsFunction('degree', function (degree, min) {
	    return degree < min;
	  }),
	  maxDegree: defineDegreeBoundsFunction('degree', function (degree, max) {
	    return degree > max;
	  }),
	  minIndegree: defineDegreeBoundsFunction('indegree', function (degree, min) {
	    return degree < min;
	  }),
	  maxIndegree: defineDegreeBoundsFunction('indegree', function (degree, max) {
	    return degree > max;
	  }),
	  minOutdegree: defineDegreeBoundsFunction('outdegree', function (degree, min) {
	    return degree < min;
	  }),
	  maxOutdegree: defineDegreeBoundsFunction('outdegree', function (degree, max) {
	    return degree > max;
	  })
	});
	extend(elesfn$i, {
	  totalDegree: function totalDegree(includeLoops) {
	    var total = 0;
	    var nodes = this.nodes();

	    for (var i = 0; i < nodes.length; i++) {
	      total += nodes[i].degree(includeLoops);
	    }

	    return total;
	  }
	});

	var fn$2, elesfn$j;

	var beforePositionSet = function beforePositionSet(eles, newPos, silent) {
	  for (var i = 0; i < eles.length; i++) {
	    var ele = eles[i];

	    if (!ele.locked()) {
	      var oldPos = ele._private.position;
	      var delta = {
	        x: newPos.x != null ? newPos.x - oldPos.x : 0,
	        y: newPos.y != null ? newPos.y - oldPos.y : 0
	      };

	      if (ele.isParent() && !(delta.x === 0 && delta.y === 0)) {
	        ele.children().shift(delta, silent);
	      }

	      ele.shiftCachedBoundingBox(delta);
	    }
	  }
	};

	var positionDef = {
	  field: 'position',
	  bindingEvent: 'position',
	  allowBinding: true,
	  allowSetting: true,
	  settingEvent: 'position',
	  settingTriggersEvent: true,
	  triggerFnName: 'emitAndNotify',
	  allowGetting: true,
	  validKeys: ['x', 'y'],
	  beforeGet: function beforeGet(ele) {
	    ele.updateCompoundBounds();
	  },
	  beforeSet: function beforeSet(eles, newPos) {
	    beforePositionSet(eles, newPos, false);
	  },
	  onSet: function onSet(eles) {
	    eles.dirtyCompoundBoundsCache();
	  },
	  canSet: function canSet(ele) {
	    return !ele.locked();
	  }
	};
	fn$2 = elesfn$j = {
	  position: define$3.data(positionDef),
	  // position but no notification to renderer
	  silentPosition: define$3.data(extend({}, positionDef, {
	    allowBinding: false,
	    allowSetting: true,
	    settingTriggersEvent: false,
	    allowGetting: false,
	    beforeSet: function beforeSet(eles, newPos) {
	      beforePositionSet(eles, newPos, true);
	    }
	  })),
	  positions: function positions(pos, silent) {
	    if (plainObject(pos)) {
	      if (silent) {
	        this.silentPosition(pos);
	      } else {
	        this.position(pos);
	      }
	    } else if (fn(pos)) {
	      var _fn = pos;
	      var cy = this.cy();
	      cy.startBatch();

	      for (var i = 0; i < this.length; i++) {
	        var ele = this[i];

	        var _pos = void 0;

	        if (_pos = _fn(ele, i)) {
	          if (silent) {
	            ele.silentPosition(_pos);
	          } else {
	            ele.position(_pos);
	          }
	        }
	      }

	      cy.endBatch();
	    }

	    return this; // chaining
	  },
	  silentPositions: function silentPositions(pos) {
	    return this.positions(pos, true);
	  },
	  shift: function shift(dim, val, silent) {
	    var delta;

	    if (plainObject(dim)) {
	      delta = {
	        x: number(dim.x) ? dim.x : 0,
	        y: number(dim.y) ? dim.y : 0
	      };
	      silent = val;
	    } else if (string(dim) && number(val)) {
	      delta = {
	        x: 0,
	        y: 0
	      };
	      delta[dim] = val;
	    }

	    if (delta != null) {
	      var cy = this.cy();
	      cy.startBatch();

	      for (var i = 0; i < this.length; i++) {
	        var ele = this[i];
	        var pos = ele.position();
	        var newPos = {
	          x: pos.x + delta.x,
	          y: pos.y + delta.y
	        };

	        if (silent) {
	          ele.silentPosition(newPos);
	        } else {
	          ele.position(newPos);
	        }
	      }

	      cy.endBatch();
	    }

	    return this;
	  },
	  silentShift: function silentShift(dim, val) {
	    if (plainObject(dim)) {
	      this.shift(dim, true);
	    } else if (string(dim) && number(val)) {
	      this.shift(dim, val, true);
	    }

	    return this;
	  },
	  // get/set the rendered (i.e. on screen) positon of the element
	  renderedPosition: function renderedPosition(dim, val) {
	    var ele = this[0];
	    var cy = this.cy();
	    var zoom = cy.zoom();
	    var pan = cy.pan();
	    var rpos = plainObject(dim) ? dim : undefined;
	    var setting = rpos !== undefined || val !== undefined && string(dim);

	    if (ele && ele.isNode()) {
	      // must have an element and must be a node to return position
	      if (setting) {
	        for (var i = 0; i < this.length; i++) {
	          var _ele = this[i];

	          if (val !== undefined) {
	            // set one dimension
	            _ele.position(dim, (val - pan[dim]) / zoom);
	          } else if (rpos !== undefined) {
	            // set whole position
	            _ele.position(renderedToModelPosition(rpos, zoom, pan));
	          }
	        }
	      } else {
	        // getting
	        var pos = ele.position();
	        rpos = modelToRenderedPosition(pos, zoom, pan);

	        if (dim === undefined) {
	          // then return the whole rendered position
	          return rpos;
	        } else {
	          // then return the specified dimension
	          return rpos[dim];
	        }
	      }
	    } else if (!setting) {
	      return undefined; // for empty collection case
	    }

	    return this; // chaining
	  },
	  // get/set the position relative to the parent
	  relativePosition: function relativePosition(dim, val) {
	    var ele = this[0];
	    var cy = this.cy();
	    var ppos = plainObject(dim) ? dim : undefined;
	    var setting = ppos !== undefined || val !== undefined && string(dim);
	    var hasCompoundNodes = cy.hasCompoundNodes();

	    if (ele && ele.isNode()) {
	      // must have an element and must be a node to return position
	      if (setting) {
	        for (var i = 0; i < this.length; i++) {
	          var _ele2 = this[i];
	          var parent = hasCompoundNodes ? _ele2.parent() : null;
	          var hasParent = parent && parent.length > 0;
	          var relativeToParent = hasParent;

	          if (hasParent) {
	            parent = parent[0];
	          }

	          var origin = relativeToParent ? parent.position() : {
	            x: 0,
	            y: 0
	          };

	          if (val !== undefined) {
	            // set one dimension
	            _ele2.position(dim, val + origin[dim]);
	          } else if (ppos !== undefined) {
	            // set whole position
	            _ele2.position({
	              x: ppos.x + origin.x,
	              y: ppos.y + origin.y
	            });
	          }
	        }
	      } else {
	        // getting
	        var pos = ele.position();

	        var _parent = hasCompoundNodes ? ele.parent() : null;

	        var _hasParent = _parent && _parent.length > 0;

	        var _relativeToParent = _hasParent;

	        if (_hasParent) {
	          _parent = _parent[0];
	        }

	        var _origin = _relativeToParent ? _parent.position() : {
	          x: 0,
	          y: 0
	        };

	        ppos = {
	          x: pos.x - _origin.x,
	          y: pos.y - _origin.y
	        };

	        if (dim === undefined) {
	          // then return the whole rendered position
	          return ppos;
	        } else {
	          // then return the specified dimension
	          return ppos[dim];
	        }
	      }
	    } else if (!setting) {
	      return undefined; // for empty collection case
	    }

	    return this; // chaining
	  }
	}; // aliases

	fn$2.modelPosition = fn$2.point = fn$2.position;
	fn$2.modelPositions = fn$2.points = fn$2.positions;
	fn$2.renderedPoint = fn$2.renderedPosition;
	fn$2.relativePoint = fn$2.relativePosition;
	var position = elesfn$j;

	var fn$3, elesfn$k;
	fn$3 = elesfn$k = {};

	elesfn$k.renderedBoundingBox = function (options) {
	  var bb = this.boundingBox(options);
	  var cy = this.cy();
	  var zoom = cy.zoom();
	  var pan = cy.pan();
	  var x1 = bb.x1 * zoom + pan.x;
	  var x2 = bb.x2 * zoom + pan.x;
	  var y1 = bb.y1 * zoom + pan.y;
	  var y2 = bb.y2 * zoom + pan.y;
	  return {
	    x1: x1,
	    x2: x2,
	    y1: y1,
	    y2: y2,
	    w: x2 - x1,
	    h: y2 - y1
	  };
	};

	elesfn$k.dirtyCompoundBoundsCache = function () {
	  var cy = this.cy();

	  if (!cy.styleEnabled() || !cy.hasCompoundNodes()) {
	    return this;
	  }

	  this.forEachUp(function (ele) {
	    if (ele.isParent()) {
	      var _p = ele._private;
	      _p.compoundBoundsClean = false;
	      _p.bbCache = null;
	      ele.emitAndNotify('bounds');
	    }
	  });
	  return this;
	};

	elesfn$k.updateCompoundBounds = function () {
	  var force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
	  var cy = this.cy(); // not possible to do on non-compound graphs or with the style disabled

	  if (!cy.styleEnabled() || !cy.hasCompoundNodes()) {
	    return this;
	  } // save cycles when batching -- but bounds will be stale (or not exist yet)


	  if (!force && cy.batching()) {
	    return this;
	  }

	  function update(parent) {
	    if (!parent.isParent()) {
	      return;
	    }

	    var _p = parent._private;
	    var children = parent.children();
	    var includeLabels = parent.pstyle('compound-sizing-wrt-labels').value === 'include';
	    var min = {
	      width: {
	        val: parent.pstyle('min-width').pfValue,
	        left: parent.pstyle('min-width-bias-left'),
	        right: parent.pstyle('min-width-bias-right')
	      },
	      height: {
	        val: parent.pstyle('min-height').pfValue,
	        top: parent.pstyle('min-height-bias-top'),
	        bottom: parent.pstyle('min-height-bias-bottom')
	      }
	    };
	    var bb = children.boundingBox({
	      includeLabels: includeLabels,
	      includeOverlays: false,
	      // updating the compound bounds happens outside of the regular
	      // cache cycle (i.e. before fired events)
	      useCache: false
	    });
	    var pos = _p.position; // if children take up zero area then keep position and fall back on stylesheet w/h

	    if (bb.w === 0 || bb.h === 0) {
	      bb = {
	        w: parent.pstyle('width').pfValue,
	        h: parent.pstyle('height').pfValue
	      };
	      bb.x1 = pos.x - bb.w / 2;
	      bb.x2 = pos.x + bb.w / 2;
	      bb.y1 = pos.y - bb.h / 2;
	      bb.y2 = pos.y + bb.h / 2;
	    }

	    function computeBiasValues(propDiff, propBias, propBiasComplement) {
	      var biasDiff = 0;
	      var biasComplementDiff = 0;
	      var biasTotal = propBias + propBiasComplement;

	      if (propDiff > 0 && biasTotal > 0) {
	        biasDiff = propBias / biasTotal * propDiff;
	        biasComplementDiff = propBiasComplement / biasTotal * propDiff;
	      }

	      return {
	        biasDiff: biasDiff,
	        biasComplementDiff: biasComplementDiff
	      };
	    }

	    function computePaddingValues(width, height, paddingObject, relativeTo) {
	      // Assuming percentage is number from 0 to 1
	      if (paddingObject.units === '%') {
	        switch (relativeTo) {
	          case 'width':
	            return width > 0 ? paddingObject.pfValue * width : 0;

	          case 'height':
	            return height > 0 ? paddingObject.pfValue * height : 0;

	          case 'average':
	            return width > 0 && height > 0 ? paddingObject.pfValue * (width + height) / 2 : 0;

	          case 'min':
	            return width > 0 && height > 0 ? width > height ? paddingObject.pfValue * height : paddingObject.pfValue * width : 0;

	          case 'max':
	            return width > 0 && height > 0 ? width > height ? paddingObject.pfValue * width : paddingObject.pfValue * height : 0;

	          default:
	            return 0;
	        }
	      } else if (paddingObject.units === 'px') {
	        return paddingObject.pfValue;
	      } else {
	        return 0;
	      }
	    }

	    var leftVal = min.width.left.value;

	    if (min.width.left.units === 'px' && min.width.val > 0) {
	      leftVal = leftVal * 100 / min.width.val;
	    }

	    var rightVal = min.width.right.value;

	    if (min.width.right.units === 'px' && min.width.val > 0) {
	      rightVal = rightVal * 100 / min.width.val;
	    }

	    var topVal = min.height.top.value;

	    if (min.height.top.units === 'px' && min.height.val > 0) {
	      topVal = topVal * 100 / min.height.val;
	    }

	    var bottomVal = min.height.bottom.value;

	    if (min.height.bottom.units === 'px' && min.height.val > 0) {
	      bottomVal = bottomVal * 100 / min.height.val;
	    }

	    var widthBiasDiffs = computeBiasValues(min.width.val - bb.w, leftVal, rightVal);
	    var diffLeft = widthBiasDiffs.biasDiff;
	    var diffRight = widthBiasDiffs.biasComplementDiff;
	    var heightBiasDiffs = computeBiasValues(min.height.val - bb.h, topVal, bottomVal);
	    var diffTop = heightBiasDiffs.biasDiff;
	    var diffBottom = heightBiasDiffs.biasComplementDiff;
	    _p.autoPadding = computePaddingValues(bb.w, bb.h, parent.pstyle('padding'), parent.pstyle('padding-relative-to').value);
	    _p.autoWidth = Math.max(bb.w, min.width.val);
	    pos.x = (-diffLeft + bb.x1 + bb.x2 + diffRight) / 2;
	    _p.autoHeight = Math.max(bb.h, min.height.val);
	    pos.y = (-diffTop + bb.y1 + bb.y2 + diffBottom) / 2;
	  }

	  for (var i = 0; i < this.length; i++) {
	    var ele = this[i];
	    var _p = ele._private;

	    if (!_p.compoundBoundsClean) {
	      update(ele);

	      if (!cy.batching()) {
	        _p.compoundBoundsClean = true;
	      }
	    }
	  }

	  return this;
	};

	var noninf = function noninf(x) {
	  if (x === Infinity || x === -Infinity) {
	    return 0;
	  }

	  return x;
	};

	var updateBounds = function updateBounds(b, x1, y1, x2, y2) {
	  // don't update with zero area boxes
	  if (x2 - x1 === 0 || y2 - y1 === 0) {
	    return;
	  } // don't update with null dim


	  if (x1 == null || y1 == null || x2 == null || y2 == null) {
	    return;
	  }

	  b.x1 = x1 < b.x1 ? x1 : b.x1;
	  b.x2 = x2 > b.x2 ? x2 : b.x2;
	  b.y1 = y1 < b.y1 ? y1 : b.y1;
	  b.y2 = y2 > b.y2 ? y2 : b.y2;
	  b.w = b.x2 - b.x1;
	  b.h = b.y2 - b.y1;
	};

	var updateBoundsFromBox = function updateBoundsFromBox(b, b2) {
	  if (b2 == null) {
	    return b;
	  }

	  return updateBounds(b, b2.x1, b2.y1, b2.x2, b2.y2);
	};

	var prefixedProperty = function prefixedProperty(obj, field, prefix) {
	  return getPrefixedProperty(obj, field, prefix);
	};

	var updateBoundsFromArrow = function updateBoundsFromArrow(bounds, ele, prefix) {
	  if (ele.cy().headless()) {
	    return;
	  }

	  var _p = ele._private;
	  var rstyle = _p.rstyle;
	  var halfArW = rstyle.arrowWidth / 2;
	  var arrowType = ele.pstyle(prefix + '-arrow-shape').value;
	  var x;
	  var y;

	  if (arrowType !== 'none') {
	    if (prefix === 'source') {
	      x = rstyle.srcX;
	      y = rstyle.srcY;
	    } else if (prefix === 'target') {
	      x = rstyle.tgtX;
	      y = rstyle.tgtY;
	    } else {
	      x = rstyle.midX;
	      y = rstyle.midY;
	    } // always store the individual arrow bounds


	    var bbs = _p.arrowBounds = _p.arrowBounds || {};
	    var bb = bbs[prefix] = bbs[prefix] || {};
	    bb.x1 = x - halfArW;
	    bb.y1 = y - halfArW;
	    bb.x2 = x + halfArW;
	    bb.y2 = y + halfArW;
	    bb.w = bb.x2 - bb.x1;
	    bb.h = bb.y2 - bb.y1;
	    expandBoundingBox(bb, 1);
	    updateBounds(bounds, bb.x1, bb.y1, bb.x2, bb.y2);
	  }
	};

	var updateBoundsFromLabel = function updateBoundsFromLabel(bounds, ele, prefix) {
	  if (ele.cy().headless()) {
	    return;
	  }

	  var prefixDash;

	  if (prefix) {
	    prefixDash = prefix + '-';
	  } else {
	    prefixDash = '';
	  }

	  var _p = ele._private;
	  var rstyle = _p.rstyle;
	  var label = ele.pstyle(prefixDash + 'label').strValue;

	  if (label) {
	    var halign = ele.pstyle('text-halign');
	    var valign = ele.pstyle('text-valign');
	    var labelWidth = prefixedProperty(rstyle, 'labelWidth', prefix);
	    var labelHeight = prefixedProperty(rstyle, 'labelHeight', prefix);
	    var labelX = prefixedProperty(rstyle, 'labelX', prefix);
	    var labelY = prefixedProperty(rstyle, 'labelY', prefix);
	    var marginX = ele.pstyle(prefixDash + 'text-margin-x').pfValue;
	    var marginY = ele.pstyle(prefixDash + 'text-margin-y').pfValue;
	    var isEdge = ele.isEdge();
	    var rotation = ele.pstyle(prefixDash + 'text-rotation');
	    var outlineWidth = ele.pstyle('text-outline-width').pfValue;
	    var borderWidth = ele.pstyle('text-border-width').pfValue;
	    var halfBorderWidth = borderWidth / 2;
	    var padding = ele.pstyle('text-background-padding').pfValue;
	    var lh = labelHeight;
	    var lw = labelWidth;
	    var lw_2 = lw / 2;
	    var lh_2 = lh / 2;
	    var lx1, lx2, ly1, ly2;

	    if (isEdge) {
	      lx1 = labelX - lw_2;
	      lx2 = labelX + lw_2;
	      ly1 = labelY - lh_2;
	      ly2 = labelY + lh_2;
	    } else {
	      switch (halign.value) {
	        case 'left':
	          lx1 = labelX - lw;
	          lx2 = labelX;
	          break;

	        case 'center':
	          lx1 = labelX - lw_2;
	          lx2 = labelX + lw_2;
	          break;

	        case 'right':
	          lx1 = labelX;
	          lx2 = labelX + lw;
	          break;
	      }

	      switch (valign.value) {
	        case 'top':
	          ly1 = labelY - lh;
	          ly2 = labelY;
	          break;

	        case 'center':
	          ly1 = labelY - lh_2;
	          ly2 = labelY + lh_2;
	          break;

	        case 'bottom':
	          ly1 = labelY;
	          ly2 = labelY + lh;
	          break;
	      }
	    } // shift by margin and expand by outline and border


	    lx1 += marginX - Math.max(outlineWidth, halfBorderWidth) - padding;
	    lx2 += marginX + Math.max(outlineWidth, halfBorderWidth) + padding;
	    ly1 += marginY - Math.max(outlineWidth, halfBorderWidth) - padding;
	    ly2 += marginY + Math.max(outlineWidth, halfBorderWidth) + padding; // always store the unrotated label bounds separately

	    var bbPrefix = prefix || 'main';
	    var bbs = _p.labelBounds;
	    var bb = bbs[bbPrefix] = bbs[bbPrefix] || {};
	    bb.x1 = lx1;
	    bb.y1 = ly1;
	    bb.x2 = lx2;
	    bb.y2 = ly2;
	    bb.w = lx2 - lx1;
	    bb.h = ly2 - ly1;
	    expandBoundingBox(bb, 1); // expand to work around browser dimension inaccuracies

	    var isAutorotate = isEdge && rotation.strValue === 'autorotate';
	    var isPfValue = rotation.pfValue != null && rotation.pfValue !== 0;

	    if (isAutorotate || isPfValue) {
	      var theta = isAutorotate ? prefixedProperty(_p.rstyle, 'labelAngle', prefix) : rotation.pfValue;
	      var cos = Math.cos(theta);
	      var sin = Math.sin(theta); // rotation point (default value for center-center)

	      var xo = (lx1 + lx2) / 2;
	      var yo = (ly1 + ly2) / 2;

	      if (!isEdge) {
	        switch (halign.value) {
	          case 'left':
	            xo = lx2;
	            break;

	          case 'right':
	            xo = lx1;
	            break;
	        }

	        switch (valign.value) {
	          case 'top':
	            yo = ly2;
	            break;

	          case 'bottom':
	            yo = ly1;
	            break;
	        }
	      }

	      var rotate = function rotate(x, y) {
	        x = x - xo;
	        y = y - yo;
	        return {
	          x: x * cos - y * sin + xo,
	          y: x * sin + y * cos + yo
	        };
	      };

	      var px1y1 = rotate(lx1, ly1);
	      var px1y2 = rotate(lx1, ly2);
	      var px2y1 = rotate(lx2, ly1);
	      var px2y2 = rotate(lx2, ly2);
	      lx1 = Math.min(px1y1.x, px1y2.x, px2y1.x, px2y2.x);
	      lx2 = Math.max(px1y1.x, px1y2.x, px2y1.x, px2y2.x);
	      ly1 = Math.min(px1y1.y, px1y2.y, px2y1.y, px2y2.y);
	      ly2 = Math.max(px1y1.y, px1y2.y, px2y1.y, px2y2.y);
	    }

	    var bbPrefixRot = bbPrefix + 'Rot';
	    var bbRot = bbs[bbPrefixRot] = bbs[bbPrefixRot] || {};
	    bbRot.x1 = lx1;
	    bbRot.y1 = ly1;
	    bbRot.x2 = lx2;
	    bbRot.y2 = ly2;
	    bbRot.w = lx2 - lx1;
	    bbRot.h = ly2 - ly1;
	    updateBounds(bounds, lx1, ly1, lx2, ly2);
	    updateBounds(_p.labelBounds.all, lx1, ly1, lx2, ly2);
	  }

	  return bounds;
	}; // get the bounding box of the elements (in raw model position)


	var boundingBoxImpl = function boundingBoxImpl(ele, options) {
	  var cy = ele._private.cy;
	  var styleEnabled = cy.styleEnabled();
	  var headless = cy.headless();
	  var bounds = makeBoundingBox();
	  var _p = ele._private;
	  var isNode = ele.isNode();
	  var isEdge = ele.isEdge();
	  var ex1, ex2, ey1, ey2; // extrema of body / lines

	  var x, y; // node pos

	  var rstyle = _p.rstyle;
	  var manualExpansion = isNode && styleEnabled ? ele.pstyle('bounds-expansion').pfValue : [0]; // must use `display` prop only, as reading `compound.width()` causes recursion
	  // (other factors like width values will be considered later in this function anyway)

	  var isDisplayed = function isDisplayed(ele) {
	    return ele.pstyle('display').value !== 'none';
	  };

	  var displayed = !styleEnabled || isDisplayed(ele) // must take into account connected nodes b/c of implicit edge hiding on display:none node
	  && (!isEdge || isDisplayed(ele.source()) && isDisplayed(ele.target()));

	  if (displayed) {
	    // displayed suffices, since we will find zero area eles anyway
	    var overlayOpacity = 0;
	    var overlayPadding = 0;

	    if (styleEnabled && options.includeOverlays) {
	      overlayOpacity = ele.pstyle('overlay-opacity').value;

	      if (overlayOpacity !== 0) {
	        overlayPadding = ele.pstyle('overlay-padding').value;
	      }
	    }

	    var w = 0;
	    var wHalf = 0;

	    if (styleEnabled) {
	      w = ele.pstyle('width').pfValue;
	      wHalf = w / 2;
	    }

	    if (isNode && options.includeNodes) {
	      var pos = ele.position();
	      x = pos.x;
	      y = pos.y;

	      var _w = ele.outerWidth();

	      var halfW = _w / 2;
	      var h = ele.outerHeight();
	      var halfH = h / 2; // handle node dimensions
	      /////////////////////////

	      ex1 = x - halfW;
	      ex2 = x + halfW;
	      ey1 = y - halfH;
	      ey2 = y + halfH;
	      updateBounds(bounds, ex1, ey1, ex2, ey2);
	    } else if (isEdge && options.includeEdges) {
	      if (styleEnabled && !headless) {
	        var curveStyle = ele.pstyle('curve-style').strValue; // handle edge dimensions (rough box estimate)
	        //////////////////////////////////////////////

	        ex1 = Math.min(rstyle.srcX, rstyle.midX, rstyle.tgtX);
	        ex2 = Math.max(rstyle.srcX, rstyle.midX, rstyle.tgtX);
	        ey1 = Math.min(rstyle.srcY, rstyle.midY, rstyle.tgtY);
	        ey2 = Math.max(rstyle.srcY, rstyle.midY, rstyle.tgtY); // take into account edge width

	        ex1 -= wHalf;
	        ex2 += wHalf;
	        ey1 -= wHalf;
	        ey2 += wHalf;
	        updateBounds(bounds, ex1, ey1, ex2, ey2); // precise edges
	        ////////////////

	        if (curveStyle === 'haystack') {
	          var hpts = rstyle.haystackPts;

	          if (hpts && hpts.length === 2) {
	            ex1 = hpts[0].x;
	            ey1 = hpts[0].y;
	            ex2 = hpts[1].x;
	            ey2 = hpts[1].y;

	            if (ex1 > ex2) {
	              var temp = ex1;
	              ex1 = ex2;
	              ex2 = temp;
	            }

	            if (ey1 > ey2) {
	              var _temp = ey1;
	              ey1 = ey2;
	              ey2 = _temp;
	            }

	            updateBounds(bounds, ex1 - wHalf, ey1 - wHalf, ex2 + wHalf, ey2 + wHalf);
	          }
	        } else if (curveStyle === 'bezier' || curveStyle === 'unbundled-bezier' || curveStyle === 'segments' || curveStyle === 'taxi') {
	          var pts;

	          switch (curveStyle) {
	            case 'bezier':
	            case 'unbundled-bezier':
	              pts = rstyle.bezierPts;
	              break;

	            case 'segments':
	            case 'taxi':
	              pts = rstyle.linePts;
	              break;
	          }

	          if (pts != null) {
	            for (var j = 0; j < pts.length; j++) {
	              var pt = pts[j];
	              ex1 = pt.x - wHalf;
	              ex2 = pt.x + wHalf;
	              ey1 = pt.y - wHalf;
	              ey2 = pt.y + wHalf;
	              updateBounds(bounds, ex1, ey1, ex2, ey2);
	            }
	          }
	        } // bezier-like or segment-like edge

	      } else {
	        // headless or style disabled
	        // fallback on source and target positions
	        //////////////////////////////////////////
	        var n1 = ele.source();
	        var n1pos = n1.position();
	        var n2 = ele.target();
	        var n2pos = n2.position();
	        ex1 = n1pos.x;
	        ex2 = n2pos.x;
	        ey1 = n1pos.y;
	        ey2 = n2pos.y;

	        if (ex1 > ex2) {
	          var _temp2 = ex1;
	          ex1 = ex2;
	          ex2 = _temp2;
	        }

	        if (ey1 > ey2) {
	          var _temp3 = ey1;
	          ey1 = ey2;
	          ey2 = _temp3;
	        } // take into account edge width


	        ex1 -= wHalf;
	        ex2 += wHalf;
	        ey1 -= wHalf;
	        ey2 += wHalf;
	        updateBounds(bounds, ex1, ey1, ex2, ey2);
	      } // headless or style disabled

	    } // edges
	    // handle edge arrow size
	    /////////////////////////


	    if (styleEnabled && options.includeEdges && isEdge) {
	      updateBoundsFromArrow(bounds, ele, 'mid-source');
	      updateBoundsFromArrow(bounds, ele, 'mid-target');
	      updateBoundsFromArrow(bounds, ele, 'source');
	      updateBoundsFromArrow(bounds, ele, 'target');
	    } // ghost
	    ////////


	    if (styleEnabled) {
	      var ghost = ele.pstyle('ghost').value === 'yes';

	      if (ghost) {
	        var gx = ele.pstyle('ghost-offset-x').pfValue;
	        var gy = ele.pstyle('ghost-offset-y').pfValue;
	        updateBounds(bounds, bounds.x1 + gx, bounds.y1 + gy, bounds.x2 + gx, bounds.y2 + gy);
	      }
	    } // always store the body bounds separately from the labels


	    var bbBody = _p.bodyBounds = _p.bodyBounds || {};
	    assignBoundingBox(bbBody, bounds);
	    expandBoundingBoxSides(bbBody, manualExpansion);
	    expandBoundingBox(bbBody, 1); // expand to work around browser dimension inaccuracies
	    // overlay
	    //////////

	    if (styleEnabled) {
	      ex1 = bounds.x1;
	      ex2 = bounds.x2;
	      ey1 = bounds.y1;
	      ey2 = bounds.y2;
	      updateBounds(bounds, ex1 - overlayPadding, ey1 - overlayPadding, ex2 + overlayPadding, ey2 + overlayPadding);
	    } // always store the body bounds separately from the labels


	    var bbOverlay = _p.overlayBounds = _p.overlayBounds || {};
	    assignBoundingBox(bbOverlay, bounds);
	    expandBoundingBoxSides(bbOverlay, manualExpansion);
	    expandBoundingBox(bbOverlay, 1); // expand to work around browser dimension inaccuracies
	    // handle label dimensions
	    //////////////////////////

	    var bbLabels = _p.labelBounds = _p.labelBounds || {};

	    if (bbLabels.all != null) {
	      clearBoundingBox(bbLabels.all);
	    } else {
	      bbLabels.all = makeBoundingBox();
	    }

	    if (styleEnabled && options.includeLabels) {
	      if (options.includeMainLabels) {
	        updateBoundsFromLabel(bounds, ele, null);
	      }

	      if (isEdge) {
	        if (options.includeSourceLabels) {
	          updateBoundsFromLabel(bounds, ele, 'source');
	        }

	        if (options.includeTargetLabels) {
	          updateBoundsFromLabel(bounds, ele, 'target');
	        }
	      }
	    } // style enabled for labels

	  } // if displayed


	  bounds.x1 = noninf(bounds.x1);
	  bounds.y1 = noninf(bounds.y1);
	  bounds.x2 = noninf(bounds.x2);
	  bounds.y2 = noninf(bounds.y2);
	  bounds.w = noninf(bounds.x2 - bounds.x1);
	  bounds.h = noninf(bounds.y2 - bounds.y1);

	  if (bounds.w > 0 && bounds.h > 0 && displayed) {
	    expandBoundingBoxSides(bounds, manualExpansion); // expand bounds by 1 because antialiasing can increase the visual/effective size by 1 on all sides

	    expandBoundingBox(bounds, 1);
	  }

	  return bounds;
	};

	var getKey = function getKey(opts) {
	  var i = 0;

	  var tf = function tf(val) {
	    return (val ? 1 : 0) << i++;
	  };

	  var key = 0;
	  key += tf(opts.incudeNodes);
	  key += tf(opts.includeEdges);
	  key += tf(opts.includeLabels);
	  key += tf(opts.includeMainLabels);
	  key += tf(opts.includeSourceLabels);
	  key += tf(opts.includeTargetLabels);
	  key += tf(opts.includeOverlays);
	  return key;
	};

	var getBoundingBoxPosKey = function getBoundingBoxPosKey(ele) {
	  if (ele.isEdge()) {
	    var p1 = ele.source().position();
	    var p2 = ele.target().position();

	    var r = function r(x) {
	      return Math.round(x);
	    };

	    return hashIntsArray([r(p1.x), r(p1.y), r(p2.x), r(p2.y)]);
	  } else {
	    return 0;
	  }
	};

	var cachedBoundingBoxImpl = function cachedBoundingBoxImpl(ele, opts) {
	  var _p = ele._private;
	  var bb;
	  var isEdge = ele.isEdge();
	  var key = opts == null ? defBbOptsKey : getKey(opts);
	  var usingDefOpts = key === defBbOptsKey;
	  var currPosKey = getBoundingBoxPosKey(ele);
	  var isPosKeySame = _p.bbCachePosKey === currPosKey;
	  var useCache = opts.useCache && isPosKeySame;

	  var isDirty = function isDirty(ele) {
	    return ele._private.bbCache == null;
	  };

	  var needRecalc = !useCache || isDirty(ele) || isEdge && isDirty(ele.source()) || isDirty(ele.target());

	  if (needRecalc) {
	    if (!isPosKeySame) {
	      ele.recalculateRenderedStyle();
	    }

	    bb = boundingBoxImpl(ele, defBbOpts);
	    _p.bbCache = bb;
	    _p.bbCacheShift.x = _p.bbCacheShift.y = 0;
	    _p.bbCachePosKey = currPosKey;
	  } else {
	    bb = _p.bbCache;
	  }

	  if (!needRecalc && (_p.bbCacheShift.x !== 0 || _p.bbCacheShift.y !== 0)) {
	    var shift = assignShiftToBoundingBox;
	    var delta = _p.bbCacheShift;

	    var safeShift = function safeShift(bb, delta) {
	      if (bb != null) {
	        shift(bb, delta);
	      }
	    };

	    shift(bb, delta);
	    var bodyBounds = _p.bodyBounds,
	        overlayBounds = _p.overlayBounds,
	        labelBounds = _p.labelBounds,
	        arrowBounds = _p.arrowBounds;
	    safeShift(bodyBounds, delta);
	    safeShift(overlayBounds, delta);

	    if (arrowBounds != null) {
	      safeShift(arrowBounds.source, delta);
	      safeShift(arrowBounds.target, delta);
	      safeShift(arrowBounds['mid-source'], delta);
	      safeShift(arrowBounds['mid-target'], delta);
	    }

	    if (labelBounds != null) {
	      safeShift(labelBounds.main, delta);
	      safeShift(labelBounds.all, delta);
	      safeShift(labelBounds.source, delta);
	      safeShift(labelBounds.target, delta);
	    }
	  } // always reset the shift, because we either applied the shift or cleared it by doing a fresh recalc


	  _p.bbCacheShift.x = _p.bbCacheShift.y = 0; // not using def opts => need to build up bb from combination of sub bbs

	  if (!usingDefOpts) {
	    var isNode = ele.isNode();
	    bb = makeBoundingBox();

	    if (opts.includeNodes && isNode || opts.includeEdges && !isNode) {
	      if (opts.includeOverlays) {
	        updateBoundsFromBox(bb, _p.overlayBounds);
	      } else {
	        updateBoundsFromBox(bb, _p.bodyBounds);
	      }
	    }

	    if (opts.includeLabels) {
	      if (opts.includeMainLabels && (!isEdge || opts.includeSourceLabels && opts.includeTargetLabels)) {
	        updateBoundsFromBox(bb, _p.labelBounds.all);
	      } else {
	        if (opts.includeMainLabels) {
	          updateBoundsFromBox(bb, _p.labelBounds.mainRot);
	        }

	        if (opts.includeSourceLabels) {
	          updateBoundsFromBox(bb, _p.labelBounds.sourceRot);
	        }

	        if (opts.includeTargetLabels) {
	          updateBoundsFromBox(bb, _p.labelBounds.targetRot);
	        }
	      }
	    }

	    bb.w = bb.x2 - bb.x1;
	    bb.h = bb.y2 - bb.y1;
	  }

	  return bb;
	};

	var defBbOpts = {
	  includeNodes: true,
	  includeEdges: true,
	  includeLabels: true,
	  includeMainLabels: true,
	  includeSourceLabels: true,
	  includeTargetLabels: true,
	  includeOverlays: true,
	  useCache: true
	};
	var defBbOptsKey = getKey(defBbOpts);
	var filledBbOpts = defaults(defBbOpts);

	elesfn$k.boundingBox = function (options) {
	  var bounds; // the main usecase is ele.boundingBox() for a single element with no/def options
	  // specified s.t. the cache is used, so check for this case to make it faster by
	  // avoiding the overhead of the rest of the function

	  if (this.length === 1 && this[0]._private.bbCache != null && (options === undefined || options.useCache === undefined || options.useCache === true)) {
	    if (options === undefined) {
	      options = defBbOpts;
	    } else {
	      options = filledBbOpts(options);
	    }

	    bounds = cachedBoundingBoxImpl(this[0], options);
	  } else {
	    bounds = makeBoundingBox();
	    options = options || defBbOpts;
	    var opts = filledBbOpts(options);
	    var eles = this;
	    var cy = eles.cy();
	    var styleEnabled = cy.styleEnabled();

	    if (styleEnabled) {
	      for (var i = 0; i < eles.length; i++) {
	        var ele = eles[i];
	        var _p = ele._private;
	        var currPosKey = getBoundingBoxPosKey(ele);
	        var isPosKeySame = _p.bbCachePosKey === currPosKey;
	        var useCache = opts.useCache && isPosKeySame;
	        ele.recalculateRenderedStyle(useCache);
	      }
	    }

	    this.updateCompoundBounds();

	    for (var _i = 0; _i < eles.length; _i++) {
	      var _ele = eles[_i];
	      updateBoundsFromBox(bounds, cachedBoundingBoxImpl(_ele, opts));
	    }
	  }

	  bounds.x1 = noninf(bounds.x1);
	  bounds.y1 = noninf(bounds.y1);
	  bounds.x2 = noninf(bounds.x2);
	  bounds.y2 = noninf(bounds.y2);
	  bounds.w = noninf(bounds.x2 - bounds.x1);
	  bounds.h = noninf(bounds.y2 - bounds.y1);
	  return bounds;
	};

	elesfn$k.dirtyBoundingBoxCache = function () {
	  for (var i = 0; i < this.length; i++) {
	    var _p = this[i]._private;
	    _p.bbCache = null;
	    _p.bbCacheShift.x = _p.bbCacheShift.y = 0;
	    _p.bbCachePosKey = null;
	    _p.bodyBounds = null;
	    _p.overlayBounds = null;
	    _p.labelBounds.all = null;
	    _p.labelBounds.source = null;
	    _p.labelBounds.target = null;
	    _p.labelBounds.main = null;
	    _p.labelBounds.sourceRot = null;
	    _p.labelBounds.targetRot = null;
	    _p.labelBounds.mainRot = null;
	    _p.arrowBounds.source = null;
	    _p.arrowBounds.target = null;
	    _p.arrowBounds['mid-source'] = null;
	    _p.arrowBounds['mid-target'] = null;
	  }

	  this.emitAndNotify('bounds');
	  return this;
	};

	elesfn$k.shiftCachedBoundingBox = function (delta) {
	  for (var i = 0; i < this.length; i++) {
	    var ele = this[i];
	    var _p = ele._private;
	    var bb = _p.bbCache;

	    if (bb != null) {
	      _p.bbCacheShift.x += delta.x;
	      _p.bbCacheShift.y += delta.y;
	    }
	  }

	  this.emitAndNotify('bounds');
	  return this;
	}; // private helper to get bounding box for custom node positions
	// - good for perf in certain cases but currently requires dirtying the rendered style
	// - would be better to not modify the nodes but the nodes are read directly everywhere in the renderer...
	// - try to use for only things like discrete layouts where the node position would change anyway


	elesfn$k.boundingBoxAt = function (fn) {
	  var nodes = this.nodes();
	  var cy = this.cy();
	  var hasCompoundNodes = cy.hasCompoundNodes();

	  if (hasCompoundNodes) {
	    nodes = nodes.filter(function (node) {
	      return !node.isParent();
	    });
	  }

	  if (plainObject(fn)) {
	    var obj = fn;

	    fn = function fn() {
	      return obj;
	    };
	  }

	  var storeOldPos = function storeOldPos(node, i) {
	    return node._private.bbAtOldPos = fn(node, i);
	  };

	  var getOldPos = function getOldPos(node) {
	    return node._private.bbAtOldPos;
	  };

	  cy.startBatch();
	  nodes.forEach(storeOldPos).silentPositions(fn);

	  if (hasCompoundNodes) {
	    this.updateCompoundBounds(true); // force update b/c we're inside a batch cycle
	  }

	  var bb = copyBoundingBox(this.boundingBox({
	    useCache: false
	  }));
	  nodes.silentPositions(getOldPos);
	  cy.endBatch();
	  return bb;
	};

	fn$3.boundingbox = fn$3.bb = fn$3.boundingBox;
	fn$3.renderedBoundingbox = fn$3.renderedBoundingBox;
	var bounds = elesfn$k;

	var fn$4, elesfn$l;
	fn$4 = elesfn$l = {};

	var defineDimFns = function defineDimFns(opts) {
	  opts.uppercaseName = capitalize(opts.name);
	  opts.autoName = 'auto' + opts.uppercaseName;
	  opts.labelName = 'label' + opts.uppercaseName;
	  opts.outerName = 'outer' + opts.uppercaseName;
	  opts.uppercaseOuterName = capitalize(opts.outerName);

	  fn$4[opts.name] = function dimImpl() {
	    var ele = this[0];
	    var _p = ele._private;
	    var cy = _p.cy;
	    var styleEnabled = cy._private.styleEnabled;

	    if (ele) {
	      if (styleEnabled) {
	        if (ele.isParent()) {
	          ele.updateCompoundBounds();
	          return _p[opts.autoName] || 0;
	        }

	        var d = ele.pstyle(opts.name);

	        switch (d.strValue) {
	          case 'label':
	            ele.recalculateRenderedStyle();
	            return _p.rstyle[opts.labelName] || 0;

	          default:
	            return d.pfValue;
	        }
	      } else {
	        return 1;
	      }
	    }
	  };

	  fn$4['outer' + opts.uppercaseName] = function outerDimImpl() {
	    var ele = this[0];
	    var _p = ele._private;
	    var cy = _p.cy;
	    var styleEnabled = cy._private.styleEnabled;

	    if (ele) {
	      if (styleEnabled) {
	        var dim = ele[opts.name]();
	        var border = ele.pstyle('border-width').pfValue; // n.b. 1/2 each side

	        var padding = 2 * ele.padding();
	        return dim + border + padding;
	      } else {
	        return 1;
	      }
	    }
	  };

	  fn$4['rendered' + opts.uppercaseName] = function renderedDimImpl() {
	    var ele = this[0];

	    if (ele) {
	      var d = ele[opts.name]();
	      return d * this.cy().zoom();
	    }
	  };

	  fn$4['rendered' + opts.uppercaseOuterName] = function renderedOuterDimImpl() {
	    var ele = this[0];

	    if (ele) {
	      var od = ele[opts.outerName]();
	      return od * this.cy().zoom();
	    }
	  };
	};

	defineDimFns({
	  name: 'width'
	});
	defineDimFns({
	  name: 'height'
	});

	elesfn$l.padding = function () {
	  var ele = this[0];
	  var _p = ele._private;

	  if (ele.isParent()) {
	    ele.updateCompoundBounds();

	    if (_p.autoPadding !== undefined) {
	      return _p.autoPadding;
	    } else {
	      return ele.pstyle('padding').pfValue;
	    }
	  } else {
	    return ele.pstyle('padding').pfValue;
	  }
	};

	elesfn$l.paddedHeight = function () {
	  var ele = this[0];
	  return ele.height() + 2 * ele.padding();
	};

	elesfn$l.paddedWidth = function () {
	  var ele = this[0];
	  return ele.width() + 2 * ele.padding();
	};

	var widthHeight = elesfn$l;

	var ifEdge = function ifEdge(ele, getValue) {
	  if (ele.isEdge()) {
	    return getValue(ele);
	  }
	};

	var ifEdgeRenderedPosition = function ifEdgeRenderedPosition(ele, getPoint) {
	  if (ele.isEdge()) {
	    var cy = ele.cy();
	    return modelToRenderedPosition(getPoint(ele), cy.zoom(), cy.pan());
	  }
	};

	var ifEdgeRenderedPositions = function ifEdgeRenderedPositions(ele, getPoints) {
	  if (ele.isEdge()) {
	    var cy = ele.cy();
	    var pan = cy.pan();
	    var zoom = cy.zoom();
	    return getPoints(ele).map(function (p) {
	      return modelToRenderedPosition(p, zoom, pan);
	    });
	  }
	};

	var controlPoints = function controlPoints(ele) {
	  return ele.renderer().getControlPoints(ele);
	};

	var segmentPoints = function segmentPoints(ele) {
	  return ele.renderer().getSegmentPoints(ele);
	};

	var sourceEndpoint = function sourceEndpoint(ele) {
	  return ele.renderer().getSourceEndpoint(ele);
	};

	var targetEndpoint = function targetEndpoint(ele) {
	  return ele.renderer().getTargetEndpoint(ele);
	};

	var midpoint = function midpoint(ele) {
	  return ele.renderer().getEdgeMidpoint(ele);
	};

	var pts = {
	  controlPoints: {
	    get: controlPoints,
	    mult: true
	  },
	  segmentPoints: {
	    get: segmentPoints,
	    mult: true
	  },
	  sourceEndpoint: {
	    get: sourceEndpoint
	  },
	  targetEndpoint: {
	    get: targetEndpoint
	  },
	  midpoint: {
	    get: midpoint
	  }
	};

	var renderedName = function renderedName(name) {
	  return 'rendered' + name[0].toUpperCase() + name.substr(1);
	};

	var edgePoints = Object.keys(pts).reduce(function (obj, name) {
	  var spec = pts[name];
	  var rName = renderedName(name);

	  obj[name] = function () {
	    return ifEdge(this, spec.get);
	  };

	  if (spec.mult) {
	    obj[rName] = function () {
	      return ifEdgeRenderedPositions(this, spec.get);
	    };
	  } else {
	    obj[rName] = function () {
	      return ifEdgeRenderedPosition(this, spec.get);
	    };
	  }

	  return obj;
	}, {});

	var dimensions = extend({}, position, bounds, widthHeight, edgePoints);

	/*!
	Event object based on jQuery events, MIT license

	https://jquery.org/license/
	https://tldrlegal.com/license/mit-license
	https://github.com/jquery/jquery/blob/master/src/event.js
	*/
	var Event = function Event(src, props) {
	  this.recycle(src, props);
	};

	function returnFalse() {
	  return false;
	}

	function returnTrue() {
	  return true;
	} // http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html


	Event.prototype = {
	  instanceString: function instanceString() {
	    return 'event';
	  },
	  recycle: function recycle(src, props) {
	    this.isImmediatePropagationStopped = this.isPropagationStopped = this.isDefaultPrevented = returnFalse;

	    if (src != null && src.preventDefault) {
	      // Browser Event object
	      this.type = src.type; // Events bubbling up the document may have been marked as prevented
	      // by a handler lower down the tree; reflect the correct value.

	      this.isDefaultPrevented = src.defaultPrevented ? returnTrue : returnFalse;
	    } else if (src != null && src.type) {
	      // Plain object containing all event details
	      props = src;
	    } else {
	      // Event string
	      this.type = src;
	    } // Put explicitly provided properties onto the event object


	    if (props != null) {
	      // more efficient to manually copy fields we use
	      this.originalEvent = props.originalEvent;
	      this.type = props.type != null ? props.type : this.type;
	      this.cy = props.cy;
	      this.target = props.target;
	      this.position = props.position;
	      this.renderedPosition = props.renderedPosition;
	      this.namespace = props.namespace;
	      this.layout = props.layout;
	    }

	    if (this.cy != null && this.position != null && this.renderedPosition == null) {
	      // create a rendered position based on the passed position
	      var pos = this.position;
	      var zoom = this.cy.zoom();
	      var pan = this.cy.pan();
	      this.renderedPosition = {
	        x: pos.x * zoom + pan.x,
	        y: pos.y * zoom + pan.y
	      };
	    } // Create a timestamp if incoming event doesn't have one


	    this.timeStamp = src && src.timeStamp || Date.now();
	  },
	  preventDefault: function preventDefault() {
	    this.isDefaultPrevented = returnTrue;
	    var e = this.originalEvent;

	    if (!e) {
	      return;
	    } // if preventDefault exists run it on the original event


	    if (e.preventDefault) {
	      e.preventDefault();
	    }
	  },
	  stopPropagation: function stopPropagation() {
	    this.isPropagationStopped = returnTrue;
	    var e = this.originalEvent;

	    if (!e) {
	      return;
	    } // if stopPropagation exists run it on the original event


	    if (e.stopPropagation) {
	      e.stopPropagation();
	    }
	  },
	  stopImmediatePropagation: function stopImmediatePropagation() {
	    this.isImmediatePropagationStopped = returnTrue;
	    this.stopPropagation();
	  },
	  isDefaultPrevented: returnFalse,
	  isPropagationStopped: returnFalse,
	  isImmediatePropagationStopped: returnFalse
	};

	var eventRegex = /^([^.]+)(\.(?:[^.]+))?$/; // regex for matching event strings (e.g. "click.namespace")

	var universalNamespace = '.*'; // matches as if no namespace specified and prevents users from unbinding accidentally

	var defaults$8 = {
	  qualifierCompare: function qualifierCompare(q1, q2) {
	    return q1 === q2;
	  },
	  eventMatches: function eventMatches()
	  /*context, listener, eventObj*/
	  {
	    return true;
	  },
	  addEventFields: function addEventFields()
	  /*context, evt*/
	  {},
	  callbackContext: function callbackContext(context
	  /*, listener, eventObj*/
	  ) {
	    return context;
	  },
	  beforeEmit: function beforeEmit()
	  /* context, listener, eventObj */
	  {},
	  afterEmit: function afterEmit()
	  /* context, listener, eventObj */
	  {},
	  bubble: function bubble()
	  /*context*/
	  {
	    return false;
	  },
	  parent: function parent()
	  /*context*/
	  {
	    return null;
	  },
	  context: null
	};
	var defaultsKeys = Object.keys(defaults$8);
	var emptyOpts = {};

	function Emitter() {
	  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : emptyOpts;
	  var context = arguments.length > 1 ? arguments[1] : undefined;

	  // micro-optimisation vs Object.assign() -- reduces Element instantiation time
	  for (var i = 0; i < defaultsKeys.length; i++) {
	    var key = defaultsKeys[i];
	    this[key] = opts[key] || defaults$8[key];
	  }

	  this.context = context || this.context;
	  this.listeners = [];
	  this.emitting = 0;
	}

	var p = Emitter.prototype;

	var forEachEvent = function forEachEvent(self, handler, events, qualifier, callback, conf, confOverrides) {
	  if (fn(qualifier)) {
	    callback = qualifier;
	    qualifier = null;
	  }

	  if (confOverrides) {
	    if (conf == null) {
	      conf = confOverrides;
	    } else {
	      conf = extend({}, conf, confOverrides);
	    }
	  }

	  var eventList = array(events) ? events : events.split(/\s+/);

	  for (var i = 0; i < eventList.length; i++) {
	    var evt = eventList[i];

	    if (emptyString(evt)) {
	      continue;
	    }

	    var match = evt.match(eventRegex); // type[.namespace]

	    if (match) {
	      var type = match[1];
	      var namespace = match[2] ? match[2] : null;
	      var ret = handler(self, evt, type, namespace, qualifier, callback, conf);

	      if (ret === false) {
	        break;
	      } // allow exiting early

	    }
	  }
	};

	var makeEventObj = function makeEventObj(self, obj) {
	  self.addEventFields(self.context, obj);
	  return new Event(obj.type, obj);
	};

	var forEachEventObj = function forEachEventObj(self, handler, events) {
	  if (event(events)) {
	    handler(self, events);
	    return;
	  } else if (plainObject(events)) {
	    handler(self, makeEventObj(self, events));
	    return;
	  }

	  var eventList = array(events) ? events : events.split(/\s+/);

	  for (var i = 0; i < eventList.length; i++) {
	    var evt = eventList[i];

	    if (emptyString(evt)) {
	      continue;
	    }

	    var match = evt.match(eventRegex); // type[.namespace]

	    if (match) {
	      var type = match[1];
	      var namespace = match[2] ? match[2] : null;
	      var eventObj = makeEventObj(self, {
	        type: type,
	        namespace: namespace,
	        target: self.context
	      });
	      handler(self, eventObj);
	    }
	  }
	};

	p.on = p.addListener = function (events, qualifier, callback, conf, confOverrides) {
	  forEachEvent(this, function (self, event, type, namespace, qualifier, callback, conf) {
	    if (fn(callback)) {
	      self.listeners.push({
	        event: event,
	        // full event string
	        callback: callback,
	        // callback to run
	        type: type,
	        // the event type (e.g. 'click')
	        namespace: namespace,
	        // the event namespace (e.g. ".foo")
	        qualifier: qualifier,
	        // a restriction on whether to match this emitter
	        conf: conf // additional configuration

	      });
	    }
	  }, events, qualifier, callback, conf, confOverrides);
	  return this;
	};

	p.one = function (events, qualifier, callback, conf) {
	  return this.on(events, qualifier, callback, conf, {
	    one: true
	  });
	};

	p.removeListener = p.off = function (events, qualifier, callback, conf) {
	  var _this = this;

	  if (this.emitting !== 0) {
	    this.listeners = copyArray(this.listeners);
	  }

	  var listeners = this.listeners;

	  var _loop = function _loop(i) {
	    var listener = listeners[i];
	    forEachEvent(_this, function (self, event, type, namespace, qualifier, callback
	    /*, conf*/
	    ) {
	      if ((listener.type === type || events === '*') && (!namespace && listener.namespace !== '.*' || listener.namespace === namespace) && (!qualifier || self.qualifierCompare(listener.qualifier, qualifier)) && (!callback || listener.callback === callback)) {
	        listeners.splice(i, 1);
	        return false;
	      }
	    }, events, qualifier, callback, conf);
	  };

	  for (var i = listeners.length - 1; i >= 0; i--) {
	    _loop(i);
	  }

	  return this;
	};

	p.removeAllListeners = function () {
	  return this.removeListener('*');
	};

	p.emit = p.trigger = function (events, extraParams, manualCallback) {
	  var listeners = this.listeners;
	  var numListenersBeforeEmit = listeners.length;
	  this.emitting++;

	  if (!array(extraParams)) {
	    extraParams = [extraParams];
	  }

	  forEachEventObj(this, function (self, eventObj) {
	    if (manualCallback != null) {
	      listeners = [{
	        event: eventObj.event,
	        type: eventObj.type,
	        namespace: eventObj.namespace,
	        callback: manualCallback
	      }];
	      numListenersBeforeEmit = listeners.length;
	    }

	    var _loop2 = function _loop2(i) {
	      var listener = listeners[i];

	      if (listener.type === eventObj.type && (!listener.namespace || listener.namespace === eventObj.namespace || listener.namespace === universalNamespace) && self.eventMatches(self.context, listener, eventObj)) {
	        var args = [eventObj];

	        if (extraParams != null) {
	          push(args, extraParams);
	        }

	        self.beforeEmit(self.context, listener, eventObj);

	        if (listener.conf && listener.conf.one) {
	          self.listeners = self.listeners.filter(function (l) {
	            return l !== listener;
	          });
	        }

	        var context = self.callbackContext(self.context, listener, eventObj);
	        var ret = listener.callback.apply(context, args);
	        self.afterEmit(self.context, listener, eventObj);

	        if (ret === false) {
	          eventObj.stopPropagation();
	          eventObj.preventDefault();
	        }
	      } // if listener matches

	    };

	    for (var i = 0; i < numListenersBeforeEmit; i++) {
	      _loop2(i);
	    } // for listener


	    if (self.bubble(self.context) && !eventObj.isPropagationStopped()) {
	      self.parent(self.context).emit(eventObj, extraParams);
	    }
	  }, events);
	  this.emitting--;
	  return this;
	};

	var emitterOptions = {
	  qualifierCompare: function qualifierCompare(selector1, selector2) {
	    if (selector1 == null || selector2 == null) {
	      return selector1 == null && selector2 == null;
	    } else {
	      return selector1.sameText(selector2);
	    }
	  },
	  eventMatches: function eventMatches(ele, listener, eventObj) {
	    var selector = listener.qualifier;

	    if (selector != null) {
	      return ele !== eventObj.target && element(eventObj.target) && selector.matches(eventObj.target);
	    }

	    return true;
	  },
	  addEventFields: function addEventFields(ele, evt) {
	    evt.cy = ele.cy();
	    evt.target = ele;
	  },
	  callbackContext: function callbackContext(ele, listener, eventObj) {
	    return listener.qualifier != null ? eventObj.target : ele;
	  },
	  beforeEmit: function beforeEmit(context, listener
	  /*, eventObj*/
	  ) {
	    if (listener.conf && listener.conf.once) {
	      listener.conf.onceCollection.removeListener(listener.event, listener.qualifier, listener.callback);
	    }
	  },
	  bubble: function bubble() {
	    return true;
	  },
	  parent: function parent(ele) {
	    return ele.isChild() ? ele.parent() : ele.cy();
	  }
	};

	var argSelector = function argSelector(arg) {
	  if (string(arg)) {
	    return new Selector(arg);
	  } else {
	    return arg;
	  }
	};

	var elesfn$m = {
	  createEmitter: function createEmitter() {
	    for (var i = 0; i < this.length; i++) {
	      var ele = this[i];
	      var _p = ele._private;

	      if (!_p.emitter) {
	        _p.emitter = new Emitter(emitterOptions, ele);
	      }
	    }

	    return this;
	  },
	  emitter: function emitter() {
	    return this._private.emitter;
	  },
	  on: function on(events, selector, callback) {
	    var argSel = argSelector(selector);

	    for (var i = 0; i < this.length; i++) {
	      var ele = this[i];
	      ele.emitter().on(events, argSel, callback);
	    }

	    return this;
	  },
	  removeListener: function removeListener(events, selector, callback) {
	    var argSel = argSelector(selector);

	    for (var i = 0; i < this.length; i++) {
	      var ele = this[i];
	      ele.emitter().removeListener(events, argSel, callback);
	    }

	    return this;
	  },
	  removeAllListeners: function removeAllListeners() {
	    for (var i = 0; i < this.length; i++) {
	      var ele = this[i];
	      ele.emitter().removeAllListeners();
	    }

	    return this;
	  },
	  one: function one(events, selector, callback) {
	    var argSel = argSelector(selector);

	    for (var i = 0; i < this.length; i++) {
	      var ele = this[i];
	      ele.emitter().one(events, argSel, callback);
	    }

	    return this;
	  },
	  once: function once(events, selector, callback) {
	    var argSel = argSelector(selector);

	    for (var i = 0; i < this.length; i++) {
	      var ele = this[i];
	      ele.emitter().on(events, argSel, callback, {
	        once: true,
	        onceCollection: this
	      });
	    }
	  },
	  emit: function emit(events, extraParams) {
	    for (var i = 0; i < this.length; i++) {
	      var ele = this[i];
	      ele.emitter().emit(events, extraParams);
	    }

	    return this;
	  },
	  emitAndNotify: function emitAndNotify(event, extraParams) {
	    // for internal use only
	    if (this.length === 0) {
	      return;
	    } // empty collections don't need to notify anything
	    // notify renderer


	    this.cy().notify(event, this);
	    this.emit(event, extraParams);
	    return this;
	  }
	};
	define$3.eventAliasesOn(elesfn$m);

	var elesfn$n = {
	  nodes: function nodes(selector) {
	    return this.filter(function (ele) {
	      return ele.isNode();
	    }).filter(selector);
	  },
	  edges: function edges(selector) {
	    return this.filter(function (ele) {
	      return ele.isEdge();
	    }).filter(selector);
	  },
	  // internal helper to get nodes and edges as separate collections with single iteration over elements
	  byGroup: function byGroup() {
	    var nodes = this.spawn();
	    var edges = this.spawn();

	    for (var i = 0; i < this.length; i++) {
	      var ele = this[i];

	      if (ele.isNode()) {
	        nodes.merge(ele);
	      } else {
	        edges.merge(ele);
	      }
	    }

	    return {
	      nodes: nodes,
	      edges: edges
	    };
	  },
	  filter: function filter(_filter, thisArg) {
	    if (_filter === undefined) {
	      // check this first b/c it's the most common/performant case
	      return this;
	    } else if (string(_filter) || elementOrCollection(_filter)) {
	      return new Selector(_filter).filter(this);
	    } else if (fn(_filter)) {
	      var filterEles = this.spawn();
	      var eles = this;

	      for (var i = 0; i < eles.length; i++) {
	        var ele = eles[i];
	        var include = thisArg ? _filter.apply(thisArg, [ele, i, eles]) : _filter(ele, i, eles);

	        if (include) {
	          filterEles.merge(ele);
	        }
	      }

	      return filterEles;
	    }

	    return this.spawn(); // if not handled by above, give 'em an empty collection
	  },
	  not: function not(toRemove) {
	    if (!toRemove) {
	      return this;
	    } else {
	      if (string(toRemove)) {
	        toRemove = this.filter(toRemove);
	      }

	      var elements = [];
	      var rMap = toRemove._private.map;

	      for (var i = 0; i < this.length; i++) {
	        var element = this[i];
	        var remove = rMap.has(element.id());

	        if (!remove) {
	          elements.push(element);
	        }
	      }

	      return this.spawn(elements);
	    }
	  },
	  absoluteComplement: function absoluteComplement() {
	    var cy = this.cy();
	    return cy.mutableElements().not(this);
	  },
	  intersect: function intersect(other) {
	    // if a selector is specified, then filter by it instead
	    if (string(other)) {
	      var selector = other;
	      return this.filter(selector);
	    }

	    var elements = [];
	    var col1 = this;
	    var col2 = other;
	    var col1Smaller = this.length < other.length;
	    var map2 = col1Smaller ? col2._private.map : col1._private.map;
	    var col = col1Smaller ? col1 : col2;

	    for (var i = 0; i < col.length; i++) {
	      var id = col[i]._private.data.id;
	      var entry = map2.get(id);

	      if (entry) {
	        elements.push(entry.ele);
	      }
	    }

	    return this.spawn(elements);
	  },
	  xor: function xor(other) {
	    var cy = this._private.cy;

	    if (string(other)) {
	      other = cy.$(other);
	    }

	    var elements = [];
	    var col1 = this;
	    var col2 = other;

	    var add = function add(col, other) {
	      for (var i = 0; i < col.length; i++) {
	        var ele = col[i];
	        var id = ele._private.data.id;
	        var inOther = other.hasElementWithId(id);

	        if (!inOther) {
	          elements.push(ele);
	        }
	      }
	    };

	    add(col1, col2);
	    add(col2, col1);
	    return this.spawn(elements);
	  },
	  diff: function diff(other) {
	    var cy = this._private.cy;

	    if (string(other)) {
	      other = cy.$(other);
	    }

	    var left = [];
	    var right = [];
	    var both = [];
	    var col1 = this;
	    var col2 = other;

	    var add = function add(col, other, retEles) {
	      for (var i = 0; i < col.length; i++) {
	        var ele = col[i];
	        var id = ele._private.data.id;
	        var inOther = other.hasElementWithId(id);

	        if (inOther) {
	          both.push(ele);
	        } else {
	          retEles.push(ele);
	        }
	      }
	    };

	    add(col1, col2, left);
	    add(col2, col1, right);
	    return {
	      left: this.spawn(left, {
	        unique: true
	      }),
	      right: this.spawn(right, {
	        unique: true
	      }),
	      both: this.spawn(both, {
	        unique: true
	      })
	    };
	  },
	  add: function add(toAdd) {
	    var cy = this._private.cy;

	    if (!toAdd) {
	      return this;
	    }

	    if (string(toAdd)) {
	      var selector = toAdd;
	      toAdd = cy.mutableElements().filter(selector);
	    }

	    var elements = [];

	    for (var i = 0; i < this.length; i++) {
	      elements.push(this[i]);
	    }

	    var map = this._private.map;

	    for (var _i = 0; _i < toAdd.length; _i++) {
	      var add = !map.has(toAdd[_i].id());

	      if (add) {
	        elements.push(toAdd[_i]);
	      }
	    }

	    return this.spawn(elements);
	  },
	  // in place merge on calling collection
	  merge: function merge(toAdd) {
	    var _p = this._private;
	    var cy = _p.cy;

	    if (!toAdd) {
	      return this;
	    }

	    if (toAdd && string(toAdd)) {
	      var selector = toAdd;
	      toAdd = cy.mutableElements().filter(selector);
	    }

	    var map = _p.map;

	    for (var i = 0; i < toAdd.length; i++) {
	      var toAddEle = toAdd[i];
	      var id = toAddEle._private.data.id;
	      var add = !map.has(id);

	      if (add) {
	        var index = this.length++;
	        this[index] = toAddEle;
	        map.set(id, {
	          ele: toAddEle,
	          index: index
	        });
	      } else {
	        // replace
	        var _index = map.get(id).index;
	        this[_index] = toAddEle;
	        map.set(id, {
	          ele: toAddEle,
	          index: _index
	        });
	      }
	    }

	    return this; // chaining
	  },
	  unmergeAt: function unmergeAt(i) {
	    var ele = this[i];
	    var id = ele.id();
	    var _p = this._private;
	    var map = _p.map; // remove ele

	    this[i] = undefined;
	    map["delete"](id);
	    var unmergedLastEle = i === this.length - 1; // replace empty spot with last ele in collection

	    if (this.length > 1 && !unmergedLastEle) {
	      var lastEleI = this.length - 1;
	      var lastEle = this[lastEleI];
	      var lastEleId = lastEle._private.data.id;
	      this[lastEleI] = undefined;
	      this[i] = lastEle;
	      map.set(lastEleId, {
	        ele: lastEle,
	        index: i
	      });
	    } // the collection is now 1 ele smaller


	    this.length--;
	    return this;
	  },
	  // remove single ele in place in calling collection
	  unmergeOne: function unmergeOne(ele) {
	    ele = ele[0];
	    var _p = this._private;
	    var id = ele._private.data.id;
	    var map = _p.map;
	    var entry = map.get(id);

	    if (!entry) {
	      return this; // no need to remove
	    }

	    var i = entry.index;
	    this.unmergeAt(i);
	    return this;
	  },
	  // remove eles in place on calling collection
	  unmerge: function unmerge(toRemove) {
	    var cy = this._private.cy;

	    if (!toRemove) {
	      return this;
	    }

	    if (toRemove && string(toRemove)) {
	      var selector = toRemove;
	      toRemove = cy.mutableElements().filter(selector);
	    }

	    for (var i = 0; i < toRemove.length; i++) {
	      this.unmergeOne(toRemove[i]);
	    }

	    return this; // chaining
	  },
	  unmergeBy: function unmergeBy(toRmFn) {
	    for (var i = this.length - 1; i >= 0; i--) {
	      var ele = this[i];

	      if (toRmFn(ele)) {
	        this.unmergeAt(i);
	      }
	    }

	    return this;
	  },
	  map: function map(mapFn, thisArg) {
	    var arr = [];
	    var eles = this;

	    for (var i = 0; i < eles.length; i++) {
	      var ele = eles[i];
	      var ret = thisArg ? mapFn.apply(thisArg, [ele, i, eles]) : mapFn(ele, i, eles);
	      arr.push(ret);
	    }

	    return arr;
	  },
	  reduce: function reduce(fn, initialValue) {
	    var val = initialValue;
	    var eles = this;

	    for (var i = 0; i < eles.length; i++) {
	      val = fn(val, eles[i], i, eles);
	    }

	    return val;
	  },
	  max: function max(valFn, thisArg) {
	    var max = -Infinity;
	    var maxEle;
	    var eles = this;

	    for (var i = 0; i < eles.length; i++) {
	      var ele = eles[i];
	      var val = thisArg ? valFn.apply(thisArg, [ele, i, eles]) : valFn(ele, i, eles);

	      if (val > max) {
	        max = val;
	        maxEle = ele;
	      }
	    }

	    return {
	      value: max,
	      ele: maxEle
	    };
	  },
	  min: function min(valFn, thisArg) {
	    var min = Infinity;
	    var minEle;
	    var eles = this;

	    for (var i = 0; i < eles.length; i++) {
	      var ele = eles[i];
	      var val = thisArg ? valFn.apply(thisArg, [ele, i, eles]) : valFn(ele, i, eles);

	      if (val < min) {
	        min = val;
	        minEle = ele;
	      }
	    }

	    return {
	      value: min,
	      ele: minEle
	    };
	  }
	}; // aliases

	var fn$5 = elesfn$n;
	fn$5['u'] = fn$5['|'] = fn$5['+'] = fn$5.union = fn$5.or = fn$5.add;
	fn$5['\\'] = fn$5['!'] = fn$5['-'] = fn$5.difference = fn$5.relativeComplement = fn$5.subtract = fn$5.not;
	fn$5['n'] = fn$5['&'] = fn$5['.'] = fn$5.and = fn$5.intersection = fn$5.intersect;
	fn$5['^'] = fn$5['(+)'] = fn$5['(-)'] = fn$5.symmetricDifference = fn$5.symdiff = fn$5.xor;
	fn$5.fnFilter = fn$5.filterFn = fn$5.stdFilter = fn$5.filter;
	fn$5.complement = fn$5.abscomp = fn$5.absoluteComplement;

	var elesfn$o = {
	  isNode: function isNode() {
	    return this.group() === 'nodes';
	  },
	  isEdge: function isEdge() {
	    return this.group() === 'edges';
	  },
	  isLoop: function isLoop() {
	    return this.isEdge() && this.source()[0] === this.target()[0];
	  },
	  isSimple: function isSimple() {
	    return this.isEdge() && this.source()[0] !== this.target()[0];
	  },
	  group: function group() {
	    var ele = this[0];

	    if (ele) {
	      return ele._private.group;
	    }
	  }
	};

	/**
	 *  Elements are drawn in a specific order based on compound depth (low to high), the element type (nodes above edges),
	 *  and z-index (low to high).  These styles affect how this applies:
	 *
	 *  z-compound-depth: May be `bottom | orphan | auto | top`.  The first drawn is `bottom`, then `orphan` which is the
	 *      same depth as the root of the compound graph, followed by the default value `auto` which draws in order from
	 *      root to leaves of the compound graph.  The last drawn is `top`.
	 *  z-index-compare: May be `auto | manual`.  The default value is `auto` which always draws edges under nodes.
	 *      `manual` ignores this convention and draws based on the `z-index` value setting.
	 *  z-index: An integer value that affects the relative draw order of elements.  In general, an element with a higher
	 *      `z-index` will be drawn on top of an element with a lower `z-index`.
	 */

	var zIndexSort = function zIndexSort(a, b) {
	  var cy = a.cy();
	  var hasCompoundNodes = cy.hasCompoundNodes();

	  function getDepth(ele) {
	    var style = ele.pstyle('z-compound-depth');

	    if (style.value === 'auto') {
	      return hasCompoundNodes ? ele.zDepth() : 0;
	    } else if (style.value === 'bottom') {
	      return -1;
	    } else if (style.value === 'top') {
	      return MAX_INT;
	    } // 'orphan'


	    return 0;
	  }

	  var depthDiff = getDepth(a) - getDepth(b);

	  if (depthDiff !== 0) {
	    return depthDiff;
	  }

	  function getEleDepth(ele) {
	    var style = ele.pstyle('z-index-compare');

	    if (style.value === 'auto') {
	      return ele.isNode() ? 1 : 0;
	    } // 'manual'


	    return 0;
	  }

	  var eleDiff = getEleDepth(a) - getEleDepth(b);

	  if (eleDiff !== 0) {
	    return eleDiff;
	  }

	  var zDiff = a.pstyle('z-index').value - b.pstyle('z-index').value;

	  if (zDiff !== 0) {
	    return zDiff;
	  } // compare indices in the core (order added to graph w/ last on top)


	  return a.poolIndex() - b.poolIndex();
	};

	var elesfn$p = {
	  forEach: function forEach(fn$1, thisArg) {
	    if (fn(fn$1)) {
	      var N = this.length;

	      for (var i = 0; i < N; i++) {
	        var ele = this[i];
	        var ret = thisArg ? fn$1.apply(thisArg, [ele, i, this]) : fn$1(ele, i, this);

	        if (ret === false) {
	          break;
	        } // exit each early on return false

	      }
	    }

	    return this;
	  },
	  toArray: function toArray() {
	    var array = [];

	    for (var i = 0; i < this.length; i++) {
	      array.push(this[i]);
	    }

	    return array;
	  },
	  slice: function slice(start, end) {
	    var array = [];
	    var thisSize = this.length;

	    if (end == null) {
	      end = thisSize;
	    }

	    if (start == null) {
	      start = 0;
	    }

	    if (start < 0) {
	      start = thisSize + start;
	    }

	    if (end < 0) {
	      end = thisSize + end;
	    }

	    for (var i = start; i >= 0 && i < end && i < thisSize; i++) {
	      array.push(this[i]);
	    }

	    return this.spawn(array);
	  },
	  size: function size() {
	    return this.length;
	  },
	  eq: function eq(i) {
	    return this[i] || this.spawn();
	  },
	  first: function first() {
	    return this[0] || this.spawn();
	  },
	  last: function last() {
	    return this[this.length - 1] || this.spawn();
	  },
	  empty: function empty() {
	    return this.length === 0;
	  },
	  nonempty: function nonempty() {
	    return !this.empty();
	  },
	  sort: function sort(sortFn) {
	    if (!fn(sortFn)) {
	      return this;
	    }

	    var sorted = this.toArray().sort(sortFn);
	    return this.spawn(sorted);
	  },
	  sortByZIndex: function sortByZIndex() {
	    return this.sort(zIndexSort);
	  },
	  zDepth: function zDepth() {
	    var ele = this[0];

	    if (!ele) {
	      return undefined;
	    } // let cy = ele.cy();


	    var _p = ele._private;
	    var group = _p.group;

	    if (group === 'nodes') {
	      var depth = _p.data.parent ? ele.parents().size() : 0;

	      if (!ele.isParent()) {
	        return MAX_INT - 1; // childless nodes always on top
	      }

	      return depth;
	    } else {
	      var src = _p.source;
	      var tgt = _p.target;
	      var srcDepth = src.zDepth();
	      var tgtDepth = tgt.zDepth();
	      return Math.max(srcDepth, tgtDepth, 0); // depth of deepest parent
	    }
	  }
	};
	elesfn$p.each = elesfn$p.forEach;

	var defineSymbolIterator = function defineSymbolIterator() {
	  var typeofUndef =  "undefined" ;
	  var isIteratorSupported = (typeof Symbol === "undefined" ? "undefined" : _typeof(Symbol)) != typeofUndef && _typeof(Symbol.iterator) != typeofUndef; // eslint-disable-line no-undef

	  if (isIteratorSupported) {
	    elesfn$p[Symbol.iterator] = function () {
	      var _this = this;

	      // eslint-disable-line no-undef
	      var entry = {
	        value: undefined,
	        done: false
	      };
	      var i = 0;
	      var length = this.length;
	      return _defineProperty({
	        next: function next() {
	          if (i < length) {
	            entry.value = _this[i++];
	          } else {
	            entry.value = undefined;
	            entry.done = true;
	          }

	          return entry;
	        }
	      }, Symbol.iterator, function () {
	        // eslint-disable-line no-undef
	        return this;
	      });
	    };
	  }
	};

	defineSymbolIterator();

	var getLayoutDimensionOptions = defaults({
	  nodeDimensionsIncludeLabels: false
	});
	var elesfn$q = {
	  // Calculates and returns node dimensions { x, y } based on options given
	  layoutDimensions: function layoutDimensions(options) {
	    options = getLayoutDimensionOptions(options);
	    var dims;

	    if (!this.takesUpSpace()) {
	      dims = {
	        w: 0,
	        h: 0
	      };
	    } else if (options.nodeDimensionsIncludeLabels) {
	      var bbDim = this.boundingBox();
	      dims = {
	        w: bbDim.w,
	        h: bbDim.h
	      };
	    } else {
	      dims = {
	        w: this.outerWidth(),
	        h: this.outerHeight()
	      };
	    } // sanitise the dimensions for external layouts (avoid division by zero)


	    if (dims.w === 0 || dims.h === 0) {
	      dims.w = dims.h = 1;
	    }

	    return dims;
	  },
	  // using standard layout options, apply position function (w/ or w/o animation)
	  layoutPositions: function layoutPositions(layout, options, fn) {
	    var nodes = this.nodes();
	    var cy = this.cy();
	    var layoutEles = options.eles; // nodes & edges

	    var getMemoizeKey = function getMemoizeKey(node) {
	      return node.id();
	    };

	    var fnMem = memoize(fn, getMemoizeKey); // memoized version of position function

	    layout.emit({
	      type: 'layoutstart',
	      layout: layout
	    });
	    layout.animations = [];

	    var calculateSpacing = function calculateSpacing(spacing, nodesBb, pos) {
	      var center = {
	        x: nodesBb.x1 + nodesBb.w / 2,
	        y: nodesBb.y1 + nodesBb.h / 2
	      };
	      var spacingVector = {
	        // scale from center of bounding box (not necessarily 0,0)
	        x: (pos.x - center.x) * spacing,
	        y: (pos.y - center.y) * spacing
	      };
	      return {
	        x: center.x + spacingVector.x,
	        y: center.y + spacingVector.y
	      };
	    };

	    var useSpacingFactor = options.spacingFactor && options.spacingFactor !== 1;

	    var spacingBb = function spacingBb() {
	      if (!useSpacingFactor) {
	        return null;
	      }

	      var bb = makeBoundingBox();

	      for (var i = 0; i < nodes.length; i++) {
	        var node = nodes[i];
	        var pos = fnMem(node, i);
	        expandBoundingBoxByPoint(bb, pos.x, pos.y);
	      }

	      return bb;
	    };

	    var bb = spacingBb();
	    var getFinalPos = memoize(function (node, i) {
	      var newPos = fnMem(node, i);

	      if (useSpacingFactor) {
	        var spacing = Math.abs(options.spacingFactor);
	        newPos = calculateSpacing(spacing, bb, newPos);
	      }

	      if (options.transform != null) {
	        newPos = options.transform(node, newPos);
	      }

	      return newPos;
	    }, getMemoizeKey);

	    if (options.animate) {
	      for (var i = 0; i < nodes.length; i++) {
	        var node = nodes[i];
	        var newPos = getFinalPos(node, i);
	        var animateNode = options.animateFilter == null || options.animateFilter(node, i);

	        if (animateNode) {
	          var ani = node.animation({
	            position: newPos,
	            duration: options.animationDuration,
	            easing: options.animationEasing
	          });
	          layout.animations.push(ani);
	        } else {
	          node.position(newPos);
	        }
	      }

	      if (options.fit) {
	        var fitAni = cy.animation({
	          fit: {
	            boundingBox: layoutEles.boundingBoxAt(getFinalPos),
	            padding: options.padding
	          },
	          duration: options.animationDuration,
	          easing: options.animationEasing
	        });
	        layout.animations.push(fitAni);
	      } else if (options.zoom !== undefined && options.pan !== undefined) {
	        var zoomPanAni = cy.animation({
	          zoom: options.zoom,
	          pan: options.pan,
	          duration: options.animationDuration,
	          easing: options.animationEasing
	        });
	        layout.animations.push(zoomPanAni);
	      }

	      layout.animations.forEach(function (ani) {
	        return ani.play();
	      });
	      layout.one('layoutready', options.ready);
	      layout.emit({
	        type: 'layoutready',
	        layout: layout
	      });
	      Promise$1.all(layout.animations.map(function (ani) {
	        return ani.promise();
	      })).then(function () {
	        layout.one('layoutstop', options.stop);
	        layout.emit({
	          type: 'layoutstop',
	          layout: layout
	        });
	      });
	    } else {
	      nodes.positions(getFinalPos);

	      if (options.fit) {
	        cy.fit(options.eles, options.padding);
	      }

	      if (options.zoom != null) {
	        cy.zoom(options.zoom);
	      }

	      if (options.pan) {
	        cy.pan(options.pan);
	      }

	      layout.one('layoutready', options.ready);
	      layout.emit({
	        type: 'layoutready',
	        layout: layout
	      });
	      layout.one('layoutstop', options.stop);
	      layout.emit({
	        type: 'layoutstop',
	        layout: layout
	      });
	    }

	    return this; // chaining
	  },
	  layout: function layout(options) {
	    var cy = this.cy();
	    return cy.makeLayout(extend({}, options, {
	      eles: this
	    }));
	  }
	}; // aliases:

	elesfn$q.createLayout = elesfn$q.makeLayout = elesfn$q.layout;

	function styleCache(key, fn, ele) {
	  var _p = ele._private;
	  var cache = _p.styleCache = _p.styleCache || [];
	  var val;

	  if ((val = cache[key]) != null) {
	    return val;
	  } else {
	    val = cache[key] = fn(ele);
	    return val;
	  }
	}

	function cacheStyleFunction(key, fn) {
	  key = hashString(key);
	  return function cachedStyleFunction(ele) {
	    return styleCache(key, fn, ele);
	  };
	}

	function cachePrototypeStyleFunction(key, fn) {
	  key = hashString(key);

	  var selfFn = function selfFn(ele) {
	    return fn.call(ele);
	  };

	  return function cachedPrototypeStyleFunction() {
	    var ele = this[0];

	    if (ele) {
	      return styleCache(key, selfFn, ele);
	    }
	  };
	}

	var elesfn$r = {
	  recalculateRenderedStyle: function recalculateRenderedStyle(useCache) {
	    var cy = this.cy();
	    var renderer = cy.renderer();
	    var styleEnabled = cy.styleEnabled();

	    if (renderer && styleEnabled) {
	      renderer.recalculateRenderedStyle(this, useCache);
	    }

	    return this;
	  },
	  dirtyStyleCache: function dirtyStyleCache() {
	    var cy = this.cy();

	    var dirty = function dirty(ele) {
	      return ele._private.styleCache = null;
	    };

	    if (cy.hasCompoundNodes()) {
	      var eles;
	      eles = this.spawnSelf().merge(this.descendants()).merge(this.parents());
	      eles.merge(eles.connectedEdges());
	      eles.forEach(dirty);
	    } else {
	      this.forEach(function (ele) {
	        dirty(ele);
	        ele.connectedEdges().forEach(dirty);
	      });
	    }

	    return this;
	  },
	  // fully updates (recalculates) the style for the elements
	  updateStyle: function updateStyle(notifyRenderer) {
	    var cy = this._private.cy;

	    if (!cy.styleEnabled()) {
	      return this;
	    }

	    if (cy.batching()) {
	      var bEles = cy._private.batchStyleEles;
	      bEles.merge(this);
	      return this; // chaining and exit early when batching
	    }

	    var hasCompounds = cy.hasCompoundNodes();
	    var style = cy.style();
	    var updatedEles = this;
	    notifyRenderer = notifyRenderer || notifyRenderer === undefined ? true : false;

	    if (hasCompounds) {
	      // then add everything up and down for compound selector checks
	      updatedEles = this.spawnSelf().merge(this.descendants()).merge(this.parents());
	    }

	    var changedEles = style.apply(updatedEles);

	    if (notifyRenderer) {
	      changedEles.emitAndNotify('style'); // let renderer know we changed style
	    } else {
	      changedEles.emit('style'); // just fire the event
	    }

	    return this; // chaining
	  },
	  // get the internal parsed style object for the specified property
	  parsedStyle: function parsedStyle(property) {
	    var includeNonDefault = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
	    var ele = this[0];
	    var cy = ele.cy();

	    if (!cy.styleEnabled()) {
	      return;
	    }

	    if (ele) {
	      var overriddenStyle = ele._private.style[property];

	      if (overriddenStyle != null) {
	        return overriddenStyle;
	      } else if (includeNonDefault) {
	        return cy.style().getDefaultProperty(property);
	      } else {
	        return null;
	      }
	    }
	  },
	  numericStyle: function numericStyle(property) {
	    var ele = this[0];

	    if (!ele.cy().styleEnabled()) {
	      return;
	    }

	    if (ele) {
	      var pstyle = ele.pstyle(property);
	      return pstyle.pfValue !== undefined ? pstyle.pfValue : pstyle.value;
	    }
	  },
	  numericStyleUnits: function numericStyleUnits(property) {
	    var ele = this[0];

	    if (!ele.cy().styleEnabled()) {
	      return;
	    }

	    if (ele) {
	      return ele.pstyle(property).units;
	    }
	  },
	  // get the specified css property as a rendered value (i.e. on-screen value)
	  // or get the whole rendered style if no property specified (NB doesn't allow setting)
	  renderedStyle: function renderedStyle(property) {
	    var cy = this.cy();

	    if (!cy.styleEnabled()) {
	      return this;
	    }

	    var ele = this[0];

	    if (ele) {
	      return cy.style().getRenderedStyle(ele, property);
	    }
	  },
	  // read the calculated css style of the element or override the style (via a bypass)
	  style: function style(name, value) {
	    var cy = this.cy();

	    if (!cy.styleEnabled()) {
	      return this;
	    }

	    var updateTransitions = false;
	    var style = cy.style();

	    if (plainObject(name)) {
	      // then extend the bypass
	      var props = name;
	      style.applyBypass(this, props, updateTransitions);
	      this.emitAndNotify('style'); // let the renderer know we've updated style
	    } else if (string(name)) {
	      if (value === undefined) {
	        // then get the property from the style
	        var ele = this[0];

	        if (ele) {
	          return style.getStylePropertyValue(ele, name);
	        } else {
	          // empty collection => can't get any value
	          return;
	        }
	      } else {
	        // then set the bypass with the property value
	        style.applyBypass(this, name, value, updateTransitions);
	        this.emitAndNotify('style'); // let the renderer know we've updated style
	      }
	    } else if (name === undefined) {
	      var _ele = this[0];

	      if (_ele) {
	        return style.getRawStyle(_ele);
	      } else {
	        // empty collection => can't get any value
	        return;
	      }
	    }

	    return this; // chaining
	  },
	  removeStyle: function removeStyle(names) {
	    var cy = this.cy();

	    if (!cy.styleEnabled()) {
	      return this;
	    }

	    var updateTransitions = false;
	    var style = cy.style();
	    var eles = this;

	    if (names === undefined) {
	      for (var i = 0; i < eles.length; i++) {
	        var ele = eles[i];
	        style.removeAllBypasses(ele, updateTransitions);
	      }
	    } else {
	      names = names.split(/\s+/);

	      for (var _i = 0; _i < eles.length; _i++) {
	        var _ele2 = eles[_i];
	        style.removeBypasses(_ele2, names, updateTransitions);
	      }
	    }

	    this.emitAndNotify('style'); // let the renderer know we've updated style

	    return this; // chaining
	  },
	  show: function show() {
	    this.css('display', 'element');
	    return this; // chaining
	  },
	  hide: function hide() {
	    this.css('display', 'none');
	    return this; // chaining
	  },
	  effectiveOpacity: function effectiveOpacity() {
	    var cy = this.cy();

	    if (!cy.styleEnabled()) {
	      return 1;
	    }

	    var hasCompoundNodes = cy.hasCompoundNodes();
	    var ele = this[0];

	    if (ele) {
	      var _p = ele._private;
	      var parentOpacity = ele.pstyle('opacity').value;

	      if (!hasCompoundNodes) {
	        return parentOpacity;
	      }

	      var parents = !_p.data.parent ? null : ele.parents();

	      if (parents) {
	        for (var i = 0; i < parents.length; i++) {
	          var parent = parents[i];
	          var opacity = parent.pstyle('opacity').value;
	          parentOpacity = opacity * parentOpacity;
	        }
	      }

	      return parentOpacity;
	    }
	  },
	  transparent: function transparent() {
	    var cy = this.cy();

	    if (!cy.styleEnabled()) {
	      return false;
	    }

	    var ele = this[0];
	    var hasCompoundNodes = ele.cy().hasCompoundNodes();

	    if (ele) {
	      if (!hasCompoundNodes) {
	        return ele.pstyle('opacity').value === 0;
	      } else {
	        return ele.effectiveOpacity() === 0;
	      }
	    }
	  },
	  backgrounding: function backgrounding() {
	    var cy = this.cy();

	    if (!cy.styleEnabled()) {
	      return false;
	    }

	    var ele = this[0];
	    return ele._private.backgrounding ? true : false;
	  }
	};

	function checkCompound(ele, parentOk) {
	  var _p = ele._private;
	  var parents = _p.data.parent ? ele.parents() : null;

	  if (parents) {
	    for (var i = 0; i < parents.length; i++) {
	      var parent = parents[i];

	      if (!parentOk(parent)) {
	        return false;
	      }
	    }
	  }

	  return true;
	}

	function defineDerivedStateFunction(specs) {
	  var ok = specs.ok;
	  var edgeOkViaNode = specs.edgeOkViaNode || specs.ok;
	  var parentOk = specs.parentOk || specs.ok;
	  return function () {
	    var cy = this.cy();

	    if (!cy.styleEnabled()) {
	      return true;
	    }

	    var ele = this[0];
	    var hasCompoundNodes = cy.hasCompoundNodes();

	    if (ele) {
	      var _p = ele._private;

	      if (!ok(ele)) {
	        return false;
	      }

	      if (ele.isNode()) {
	        return !hasCompoundNodes || checkCompound(ele, parentOk);
	      } else {
	        var src = _p.source;
	        var tgt = _p.target;
	        return edgeOkViaNode(src) && (!hasCompoundNodes || checkCompound(src, edgeOkViaNode)) && (src === tgt || edgeOkViaNode(tgt) && (!hasCompoundNodes || checkCompound(tgt, edgeOkViaNode)));
	      }
	    }
	  };
	}

	var eleTakesUpSpace = cacheStyleFunction('eleTakesUpSpace', function (ele) {
	  return ele.pstyle('display').value === 'element' && ele.width() !== 0 && (ele.isNode() ? ele.height() !== 0 : true);
	});
	elesfn$r.takesUpSpace = cachePrototypeStyleFunction('takesUpSpace', defineDerivedStateFunction({
	  ok: eleTakesUpSpace
	}));
	var eleInteractive = cacheStyleFunction('eleInteractive', function (ele) {
	  return ele.pstyle('events').value === 'yes' && ele.pstyle('visibility').value === 'visible' && eleTakesUpSpace(ele);
	});
	var parentInteractive = cacheStyleFunction('parentInteractive', function (parent) {
	  return parent.pstyle('visibility').value === 'visible' && eleTakesUpSpace(parent);
	});
	elesfn$r.interactive = cachePrototypeStyleFunction('interactive', defineDerivedStateFunction({
	  ok: eleInteractive,
	  parentOk: parentInteractive,
	  edgeOkViaNode: eleTakesUpSpace
	}));

	elesfn$r.noninteractive = function () {
	  var ele = this[0];

	  if (ele) {
	    return !ele.interactive();
	  }
	};

	var eleVisible = cacheStyleFunction('eleVisible', function (ele) {
	  return ele.pstyle('visibility').value === 'visible' && ele.pstyle('opacity').pfValue !== 0 && eleTakesUpSpace(ele);
	});
	var edgeVisibleViaNode = eleTakesUpSpace;
	elesfn$r.visible = cachePrototypeStyleFunction('visible', defineDerivedStateFunction({
	  ok: eleVisible,
	  edgeOkViaNode: edgeVisibleViaNode
	}));

	elesfn$r.hidden = function () {
	  var ele = this[0];

	  if (ele) {
	    return !ele.visible();
	  }
	};

	elesfn$r.isBundledBezier = cachePrototypeStyleFunction('isBundledBezier', function () {
	  if (!this.cy().styleEnabled()) {
	    return false;
	  }

	  return !this.removed() && this.pstyle('curve-style').value === 'bezier' && this.takesUpSpace();
	});
	elesfn$r.bypass = elesfn$r.css = elesfn$r.style;
	elesfn$r.renderedCss = elesfn$r.renderedStyle;
	elesfn$r.removeBypass = elesfn$r.removeCss = elesfn$r.removeStyle;
	elesfn$r.pstyle = elesfn$r.parsedStyle;

	var elesfn$s = {};

	function defineSwitchFunction(params) {
	  return function () {
	    var args = arguments;
	    var changedEles = []; // e.g. cy.nodes().select( data, handler )

	    if (args.length === 2) {
	      var data = args[0];
	      var handler = args[1];
	      this.on(params.event, data, handler);
	    } // e.g. cy.nodes().select( handler )
	    else if (args.length === 1 && fn(args[0])) {
	        var _handler = args[0];
	        this.on(params.event, _handler);
	      } // e.g. cy.nodes().select()
	      // e.g. (private) cy.nodes().select(['tapselect'])
	      else if (args.length === 0 || args.length === 1 && array(args[0])) {
	          var addlEvents = args.length === 1 ? args[0] : null;

	          for (var i = 0; i < this.length; i++) {
	            var ele = this[i];
	            var able = !params.ableField || ele._private[params.ableField];
	            var changed = ele._private[params.field] != params.value;

	            if (params.overrideAble) {
	              var overrideAble = params.overrideAble(ele);

	              if (overrideAble !== undefined) {
	                able = overrideAble;

	                if (!overrideAble) {
	                  return this;
	                } // to save cycles assume not able for all on override

	              }
	            }

	            if (able) {
	              ele._private[params.field] = params.value;

	              if (changed) {
	                changedEles.push(ele);
	              }
	            }
	          }

	          var changedColl = this.spawn(changedEles);
	          changedColl.updateStyle(); // change of state => possible change of style

	          changedColl.emit(params.event);

	          if (addlEvents) {
	            changedColl.emit(addlEvents);
	          }
	        }

	    return this;
	  };
	}

	function defineSwitchSet(params) {
	  elesfn$s[params.field] = function () {
	    var ele = this[0];

	    if (ele) {
	      if (params.overrideField) {
	        var val = params.overrideField(ele);

	        if (val !== undefined) {
	          return val;
	        }
	      }

	      return ele._private[params.field];
	    }
	  };

	  elesfn$s[params.on] = defineSwitchFunction({
	    event: params.on,
	    field: params.field,
	    ableField: params.ableField,
	    overrideAble: params.overrideAble,
	    value: true
	  });
	  elesfn$s[params.off] = defineSwitchFunction({
	    event: params.off,
	    field: params.field,
	    ableField: params.ableField,
	    overrideAble: params.overrideAble,
	    value: false
	  });
	}

	defineSwitchSet({
	  field: 'locked',
	  overrideField: function overrideField(ele) {
	    return ele.cy().autolock() ? true : undefined;
	  },
	  on: 'lock',
	  off: 'unlock'
	});
	defineSwitchSet({
	  field: 'grabbable',
	  overrideField: function overrideField(ele) {
	    return ele.cy().autoungrabify() || ele.pannable() ? false : undefined;
	  },
	  on: 'grabify',
	  off: 'ungrabify'
	});
	defineSwitchSet({
	  field: 'selected',
	  ableField: 'selectable',
	  overrideAble: function overrideAble(ele) {
	    return ele.cy().autounselectify() ? false : undefined;
	  },
	  on: 'select',
	  off: 'unselect'
	});
	defineSwitchSet({
	  field: 'selectable',
	  overrideField: function overrideField(ele) {
	    return ele.cy().autounselectify() ? false : undefined;
	  },
	  on: 'selectify',
	  off: 'unselectify'
	});
	elesfn$s.deselect = elesfn$s.unselect;

	elesfn$s.grabbed = function () {
	  var ele = this[0];

	  if (ele) {
	    return ele._private.grabbed;
	  }
	};

	defineSwitchSet({
	  field: 'active',
	  on: 'activate',
	  off: 'unactivate'
	});
	defineSwitchSet({
	  field: 'pannable',
	  on: 'panify',
	  off: 'unpanify'
	});

	elesfn$s.inactive = function () {
	  var ele = this[0];

	  if (ele) {
	    return !ele._private.active;
	  }
	};

	var elesfn$t = {}; // DAG functions
	////////////////

	var defineDagExtremity = function defineDagExtremity(params) {
	  return function dagExtremityImpl(selector) {
	    var eles = this;
	    var ret = [];

	    for (var i = 0; i < eles.length; i++) {
	      var ele = eles[i];

	      if (!ele.isNode()) {
	        continue;
	      }

	      var disqualified = false;
	      var edges = ele.connectedEdges();

	      for (var j = 0; j < edges.length; j++) {
	        var edge = edges[j];
	        var src = edge.source();
	        var tgt = edge.target();

	        if (params.noIncomingEdges && tgt === ele && src !== ele || params.noOutgoingEdges && src === ele && tgt !== ele) {
	          disqualified = true;
	          break;
	        }
	      }

	      if (!disqualified) {
	        ret.push(ele);
	      }
	    }

	    return this.spawn(ret, {
	      unique: true
	    }).filter(selector);
	  };
	};

	var defineDagOneHop = function defineDagOneHop(params) {
	  return function (selector) {
	    var eles = this;
	    var oEles = [];

	    for (var i = 0; i < eles.length; i++) {
	      var ele = eles[i];

	      if (!ele.isNode()) {
	        continue;
	      }

	      var edges = ele.connectedEdges();

	      for (var j = 0; j < edges.length; j++) {
	        var edge = edges[j];
	        var src = edge.source();
	        var tgt = edge.target();

	        if (params.outgoing && src === ele) {
	          oEles.push(edge);
	          oEles.push(tgt);
	        } else if (params.incoming && tgt === ele) {
	          oEles.push(edge);
	          oEles.push(src);
	        }
	      }
	    }

	    return this.spawn(oEles, {
	      unique: true
	    }).filter(selector);
	  };
	};

	var defineDagAllHops = function defineDagAllHops(params) {
	  return function (selector) {
	    var eles = this;
	    var sEles = [];
	    var sElesIds = {};

	    for (;;) {
	      var next = params.outgoing ? eles.outgoers() : eles.incomers();

	      if (next.length === 0) {
	        break;
	      } // done if none left


	      var newNext = false;

	      for (var i = 0; i < next.length; i++) {
	        var n = next[i];
	        var nid = n.id();

	        if (!sElesIds[nid]) {
	          sElesIds[nid] = true;
	          sEles.push(n);
	          newNext = true;
	        }
	      }

	      if (!newNext) {
	        break;
	      } // done if touched all outgoers already


	      eles = next;
	    }

	    return this.spawn(sEles, {
	      unique: true
	    }).filter(selector);
	  };
	};

	elesfn$t.clearTraversalCache = function () {
	  for (var i = 0; i < this.length; i++) {
	    this[i]._private.traversalCache = null;
	  }
	};

	extend(elesfn$t, {
	  // get the root nodes in the DAG
	  roots: defineDagExtremity({
	    noIncomingEdges: true
	  }),
	  // get the leaf nodes in the DAG
	  leaves: defineDagExtremity({
	    noOutgoingEdges: true
	  }),
	  // normally called children in graph theory
	  // these nodes =edges=> outgoing nodes
	  outgoers: cache(defineDagOneHop({
	    outgoing: true
	  }), 'outgoers'),
	  // aka DAG descendants
	  successors: defineDagAllHops({
	    outgoing: true
	  }),
	  // normally called parents in graph theory
	  // these nodes <=edges= incoming nodes
	  incomers: cache(defineDagOneHop({
	    incoming: true
	  }), 'incomers'),
	  // aka DAG ancestors
	  predecessors: defineDagAllHops({
	    incoming: true
	  })
	}); // Neighbourhood functions
	//////////////////////////

	extend(elesfn$t, {
	  neighborhood: cache(function (selector) {
	    var elements = [];
	    var nodes = this.nodes();

	    for (var i = 0; i < nodes.length; i++) {
	      // for all nodes
	      var node = nodes[i];
	      var connectedEdges = node.connectedEdges(); // for each connected edge, add the edge and the other node

	      for (var j = 0; j < connectedEdges.length; j++) {
	        var edge = connectedEdges[j];
	        var src = edge.source();
	        var tgt = edge.target();
	        var otherNode = node === src ? tgt : src; // need check in case of loop

	        if (otherNode.length > 0) {
	          elements.push(otherNode[0]); // add node 1 hop away
	        } // add connected edge


	        elements.push(edge[0]);
	      }
	    }

	    return this.spawn(elements, {
	      unique: true
	    }).filter(selector);
	  }, 'neighborhood'),
	  closedNeighborhood: function closedNeighborhood(selector) {
	    return this.neighborhood().add(this).filter(selector);
	  },
	  openNeighborhood: function openNeighborhood(selector) {
	    return this.neighborhood(selector);
	  }
	}); // aliases

	elesfn$t.neighbourhood = elesfn$t.neighborhood;
	elesfn$t.closedNeighbourhood = elesfn$t.closedNeighborhood;
	elesfn$t.openNeighbourhood = elesfn$t.openNeighborhood; // Edge functions
	/////////////////

	extend(elesfn$t, {
	  source: cache(function sourceImpl(selector) {
	    var ele = this[0];
	    var src;

	    if (ele) {
	      src = ele._private.source || ele.cy().collection();
	    }

	    return src && selector ? src.filter(selector) : src;
	  }, 'source'),
	  target: cache(function targetImpl(selector) {
	    var ele = this[0];
	    var tgt;

	    if (ele) {
	      tgt = ele._private.target || ele.cy().collection();
	    }

	    return tgt && selector ? tgt.filter(selector) : tgt;
	  }, 'target'),
	  sources: defineSourceFunction({
	    attr: 'source'
	  }),
	  targets: defineSourceFunction({
	    attr: 'target'
	  })
	});

	function defineSourceFunction(params) {
	  return function sourceImpl(selector) {
	    var sources = [];

	    for (var i = 0; i < this.length; i++) {
	      var ele = this[i];
	      var src = ele._private[params.attr];

	      if (src) {
	        sources.push(src);
	      }
	    }

	    return this.spawn(sources, {
	      unique: true
	    }).filter(selector);
	  };
	}

	extend(elesfn$t, {
	  edgesWith: cache(defineEdgesWithFunction(), 'edgesWith'),
	  edgesTo: cache(defineEdgesWithFunction({
	    thisIsSrc: true
	  }), 'edgesTo')
	});

	function defineEdgesWithFunction(params) {
	  return function edgesWithImpl(otherNodes) {
	    var elements = [];
	    var cy = this._private.cy;
	    var p = params || {}; // get elements if a selector is specified

	    if (string(otherNodes)) {
	      otherNodes = cy.$(otherNodes);
	    }

	    for (var h = 0; h < otherNodes.length; h++) {
	      var edges = otherNodes[h]._private.edges;

	      for (var i = 0; i < edges.length; i++) {
	        var edge = edges[i];
	        var edgeData = edge._private.data;
	        var thisToOther = this.hasElementWithId(edgeData.source) && otherNodes.hasElementWithId(edgeData.target);
	        var otherToThis = otherNodes.hasElementWithId(edgeData.source) && this.hasElementWithId(edgeData.target);
	        var edgeConnectsThisAndOther = thisToOther || otherToThis;

	        if (!edgeConnectsThisAndOther) {
	          continue;
	        }

	        if (p.thisIsSrc || p.thisIsTgt) {
	          if (p.thisIsSrc && !thisToOther) {
	            continue;
	          }

	          if (p.thisIsTgt && !otherToThis) {
	            continue;
	          }
	        }

	        elements.push(edge);
	      }
	    }

	    return this.spawn(elements, {
	      unique: true
	    });
	  };
	}

	extend(elesfn$t, {
	  connectedEdges: cache(function (selector) {
	    var retEles = [];
	    var eles = this;

	    for (var i = 0; i < eles.length; i++) {
	      var node = eles[i];

	      if (!node.isNode()) {
	        continue;
	      }

	      var edges = node._private.edges;

	      for (var j = 0; j < edges.length; j++) {
	        var edge = edges[j];
	        retEles.push(edge);
	      }
	    }

	    return this.spawn(retEles, {
	      unique: true
	    }).filter(selector);
	  }, 'connectedEdges'),
	  connectedNodes: cache(function (selector) {
	    var retEles = [];
	    var eles = this;

	    for (var i = 0; i < eles.length; i++) {
	      var edge = eles[i];

	      if (!edge.isEdge()) {
	        continue;
	      }

	      retEles.push(edge.source()[0]);
	      retEles.push(edge.target()[0]);
	    }

	    return this.spawn(retEles, {
	      unique: true
	    }).filter(selector);
	  }, 'connectedNodes'),
	  parallelEdges: cache(defineParallelEdgesFunction(), 'parallelEdges'),
	  codirectedEdges: cache(defineParallelEdgesFunction({
	    codirected: true
	  }), 'codirectedEdges')
	});

	function defineParallelEdgesFunction(params) {
	  var defaults = {
	    codirected: false
	  };
	  params = extend({}, defaults, params);
	  return function parallelEdgesImpl(selector) {
	    // micro-optimised for renderer
	    var elements = [];
	    var edges = this.edges();
	    var p = params; // look at all the edges in the collection

	    for (var i = 0; i < edges.length; i++) {
	      var edge1 = edges[i];
	      var edge1_p = edge1._private;
	      var src1 = edge1_p.source;
	      var srcid1 = src1._private.data.id;
	      var tgtid1 = edge1_p.data.target;
	      var srcEdges1 = src1._private.edges; // look at edges connected to the src node of this edge

	      for (var j = 0; j < srcEdges1.length; j++) {
	        var edge2 = srcEdges1[j];
	        var edge2data = edge2._private.data;
	        var tgtid2 = edge2data.target;
	        var srcid2 = edge2data.source;
	        var codirected = tgtid2 === tgtid1 && srcid2 === srcid1;
	        var oppdirected = srcid1 === tgtid2 && tgtid1 === srcid2;

	        if (p.codirected && codirected || !p.codirected && (codirected || oppdirected)) {
	          elements.push(edge2);
	        }
	      }
	    }

	    return this.spawn(elements, {
	      unique: true
	    }).filter(selector);
	  };
	} // Misc functions
	/////////////////


	extend(elesfn$t, {
	  components: function components(root) {
	    var self = this;
	    var cy = self.cy();
	    var visited = cy.collection();
	    var unvisited = root == null ? self.nodes() : root.nodes();
	    var components = [];

	    if (root != null && unvisited.empty()) {
	      // root may contain only edges
	      unvisited = root.sources(); // doesn't matter which node to use (undirected), so just use the source sides
	    }

	    var visitInComponent = function visitInComponent(node, component) {
	      visited.merge(node);
	      unvisited.unmerge(node);
	      component.merge(node);
	    };

	    if (unvisited.empty()) {
	      return self.spawn();
	    }

	    var _loop = function _loop() {
	      // each iteration yields a component
	      var cmpt = cy.collection();
	      components.push(cmpt);
	      var root = unvisited[0];
	      visitInComponent(root, cmpt);
	      self.bfs({
	        directed: false,
	        roots: root,
	        visit: function visit(v) {
	          return visitInComponent(v, cmpt);
	        }
	      });
	      cmpt.forEach(function (node) {
	        node.connectedEdges().forEach(function (e) {
	          // connectedEdges() usually cached
	          if (self.has(e) && cmpt.has(e.source()) && cmpt.has(e.target())) {
	            // has() is cheap
	            cmpt.merge(e); // forEach() only considers nodes -- sets N at call time
	          }
	        });
	      });
	    };

	    do {
	      _loop();
	    } while (unvisited.length > 0);

	    return components;
	  },
	  component: function component() {
	    var ele = this[0];
	    return ele.cy().mutableElements().components(ele)[0];
	  }
	});
	elesfn$t.componentsOf = elesfn$t.components;

	var idFactory = {
	  generate: function generate(cy, element, tryThisId) {
	    var id = tryThisId != null ? tryThisId : uuid();

	    while (cy.hasElementWithId(id)) {
	      id = uuid();
	    }

	    return id;
	  }
	}; // represents a set of nodes, edges, or both together

	var Collection = function Collection(cy, elements, options) {
	  if (cy === undefined || !core(cy)) {
	    error('A collection must have a reference to the core');
	    return;
	  }

	  var map = new Map$1();
	  var createdElements = false;

	  if (!elements) {
	    elements = [];
	  } else if (elements.length > 0 && plainObject(elements[0]) && !element(elements[0])) {
	    createdElements = true; // make elements from json and restore all at once later

	    var eles = [];
	    var elesIds = new Set$1();

	    for (var i = 0, l = elements.length; i < l; i++) {
	      var json = elements[i];

	      if (json.data == null) {
	        json.data = {};
	      }

	      var _data = json.data; // make sure newly created elements have valid ids

	      if (_data.id == null) {
	        _data.id = idFactory.generate(cy, json);
	      } else if (cy.hasElementWithId(_data.id) || elesIds.has(_data.id)) {
	        continue; // can't create element if prior id already exists
	      }

	      var ele = new Element(cy, json, false);
	      eles.push(ele);
	      elesIds.add(_data.id);
	    }

	    elements = eles;
	  }

	  this.length = 0;

	  for (var _i = 0, _l = elements.length; _i < _l; _i++) {
	    var element$1 = elements[_i][0]; // [0] in case elements is an array of collections, rather than array of elements

	    if (element$1 == null) {
	      continue;
	    }

	    var id = element$1._private.data.id;

	    if (options == null || options.unique && !map.has(id)) {
	      map.set(id, {
	        index: this.length,
	        ele: element$1
	      });
	      this[this.length] = element$1;
	      this.length++;
	    }
	  }

	  this._private = {
	    cy: cy,
	    map: map
	  }; // restore the elements if we created them from json

	  if (createdElements) {
	    this.restore();
	  }
	}; // Functions
	////////////////////////////////////////////////////////////////////////////////////////////////////
	// keep the prototypes in sync (an element has the same functions as a collection)
	// and use elefn and elesfn as shorthands to the prototypes


	var elesfn$u = Element.prototype = Collection.prototype;

	elesfn$u.instanceString = function () {
	  return 'collection';
	};

	elesfn$u.spawn = function (cy, eles, opts) {
	  if (!core(cy)) {
	    // cy is optional
	    opts = eles;
	    eles = cy;
	    cy = this.cy();
	  }

	  return new Collection(cy, eles, opts);
	};

	elesfn$u.spawnSelf = function () {
	  return this.spawn(this);
	};

	elesfn$u.cy = function () {
	  return this._private.cy;
	};

	elesfn$u.renderer = function () {
	  return this._private.cy.renderer();
	};

	elesfn$u.element = function () {
	  return this[0];
	};

	elesfn$u.collection = function () {
	  if (collection(this)) {
	    return this;
	  } else {
	    // an element
	    return new Collection(this._private.cy, [this]);
	  }
	};

	elesfn$u.unique = function () {
	  return new Collection(this._private.cy, this, {
	    unique: true
	  });
	};

	elesfn$u.hasElementWithId = function (id) {
	  id = '' + id; // id must be string

	  return this._private.map.has(id);
	};

	elesfn$u.getElementById = function (id) {
	  id = '' + id; // id must be string

	  var cy = this._private.cy;

	  var entry = this._private.map.get(id);

	  return entry ? entry.ele : new Collection(cy); // get ele or empty collection
	};

	elesfn$u.$id = elesfn$u.getElementById;

	elesfn$u.poolIndex = function () {
	  var cy = this._private.cy;
	  var eles = cy._private.elements;
	  var id = this[0]._private.data.id;
	  return eles._private.map.get(id).index;
	};

	elesfn$u.indexOf = function (ele) {
	  var id = ele[0]._private.data.id;
	  return this._private.map.get(id).index;
	};

	elesfn$u.indexOfId = function (id) {
	  id = '' + id; // id must be string

	  return this._private.map.get(id).index;
	};

	elesfn$u.json = function (obj) {
	  var ele = this.element();
	  var cy = this.cy();

	  if (ele == null && obj) {
	    return this;
	  } // can't set to no eles


	  if (ele == null) {
	    return undefined;
	  } // can't get from no eles


	  var p = ele._private;

	  if (plainObject(obj)) {
	    // set
	    cy.startBatch();

	    if (obj.data) {
	      ele.data(obj.data);
	      var _data2 = p.data;

	      if (ele.isEdge()) {
	        // source and target are immutable via data()
	        var move = false;
	        var spec = {};
	        var src = obj.data.source;
	        var tgt = obj.data.target;

	        if (src != null && src != _data2.source) {
	          spec.source = '' + src; // id must be string

	          move = true;
	        }

	        if (tgt != null && tgt != _data2.target) {
	          spec.target = '' + tgt; // id must be string

	          move = true;
	        }

	        if (move) {
	          ele = ele.move(spec);
	        }
	      } else {
	        // parent is immutable via data()
	        var parent = obj.data.parent;

	        if ((parent != null || _data2.parent != null) && parent != _data2.parent) {
	          if (parent === undefined) {
	            // can't set undefined imperatively, so use null
	            parent = null;
	          }

	          if (parent != null) {
	            parent = '' + parent; // id must be string
	          }

	          ele = ele.move({
	            parent: parent
	          });
	        }
	      }
	    }

	    if (obj.position) {
	      ele.position(obj.position);
	    } // ignore group -- immutable


	    var checkSwitch = function checkSwitch(k, trueFnName, falseFnName) {
	      var obj_k = obj[k];

	      if (obj_k != null && obj_k !== p[k]) {
	        if (obj_k) {
	          ele[trueFnName]();
	        } else {
	          ele[falseFnName]();
	        }
	      }
	    };

	    checkSwitch('removed', 'remove', 'restore');
	    checkSwitch('selected', 'select', 'unselect');
	    checkSwitch('selectable', 'selectify', 'unselectify');
	    checkSwitch('locked', 'lock', 'unlock');
	    checkSwitch('grabbable', 'grabify', 'ungrabify');
	    checkSwitch('pannable', 'panify', 'unpanify');

	    if (obj.classes != null) {
	      ele.classes(obj.classes);
	    }

	    cy.endBatch();
	    return this;
	  } else if (obj === undefined) {
	    // get
	    var json = {
	      data: copy(p.data),
	      position: copy(p.position),
	      group: p.group,
	      removed: p.removed,
	      selected: p.selected,
	      selectable: p.selectable,
	      locked: p.locked,
	      grabbable: p.grabbable,
	      pannable: p.pannable,
	      classes: null
	    };
	    json.classes = '';
	    var i = 0;
	    p.classes.forEach(function (cls) {
	      return json.classes += i++ === 0 ? cls : ' ' + cls;
	    });
	    return json;
	  }
	};

	elesfn$u.jsons = function () {
	  var jsons = [];

	  for (var i = 0; i < this.length; i++) {
	    var ele = this[i];
	    var json = ele.json();
	    jsons.push(json);
	  }

	  return jsons;
	};

	elesfn$u.clone = function () {
	  var cy = this.cy();
	  var elesArr = [];

	  for (var i = 0; i < this.length; i++) {
	    var ele = this[i];
	    var json = ele.json();
	    var clone = new Element(cy, json, false); // NB no restore

	    elesArr.push(clone);
	  }

	  return new Collection(cy, elesArr);
	};

	elesfn$u.copy = elesfn$u.clone;

	elesfn$u.restore = function () {
	  var notifyRenderer = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
	  var addToPool = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
	  var self = this;
	  var cy = self.cy();
	  var cy_p = cy._private; // create arrays of nodes and edges, since we need to
	  // restore the nodes first

	  var nodes = [];
	  var edges = [];
	  var elements;

	  for (var _i2 = 0, l = self.length; _i2 < l; _i2++) {
	    var ele = self[_i2];

	    if (addToPool && !ele.removed()) {
	      // don't need to handle this ele
	      continue;
	    } // keep nodes first in the array and edges after


	    if (ele.isNode()) {
	      // put to front of array if node
	      nodes.push(ele);
	    } else {
	      // put to end of array if edge
	      edges.push(ele);
	    }
	  }

	  elements = nodes.concat(edges);
	  var i;

	  var removeFromElements = function removeFromElements() {
	    elements.splice(i, 1);
	    i--;
	  }; // now, restore each element


	  for (i = 0; i < elements.length; i++) {
	    var _ele = elements[i];
	    var _private = _ele._private;
	    var _data3 = _private.data; // the traversal cache should start fresh when ele is added

	    _ele.clearTraversalCache(); // set id and validate


	    if (!addToPool && !_private.removed) ; else if (_data3.id === undefined) {
	      _data3.id = idFactory.generate(cy, _ele);
	    } else if (number(_data3.id)) {
	      _data3.id = '' + _data3.id; // now it's a string
	    } else if (emptyString(_data3.id) || !string(_data3.id)) {
	      error('Can not create element with invalid string ID `' + _data3.id + '`'); // can't create element if it has empty string as id or non-string id

	      removeFromElements();
	      continue;
	    } else if (cy.hasElementWithId(_data3.id)) {
	      error('Can not create second element with ID `' + _data3.id + '`'); // can't create element if one already has that id

	      removeFromElements();
	      continue;
	    }

	    var id = _data3.id; // id is finalised, now let's keep a ref

	    if (_ele.isNode()) {
	      // extra checks for nodes
	      var pos = _private.position; // make sure the nodes have a defined position

	      if (pos.x == null) {
	        pos.x = 0;
	      }

	      if (pos.y == null) {
	        pos.y = 0;
	      }
	    }

	    if (_ele.isEdge()) {
	      // extra checks for edges
	      var edge = _ele;
	      var fields = ['source', 'target'];
	      var fieldsLength = fields.length;
	      var badSourceOrTarget = false;

	      for (var j = 0; j < fieldsLength; j++) {
	        var field = fields[j];
	        var val = _data3[field];

	        if (number(val)) {
	          val = _data3[field] = '' + _data3[field]; // now string
	        }

	        if (val == null || val === '') {
	          // can't create if source or target is not defined properly
	          error('Can not create edge `' + id + '` with unspecified ' + field);
	          badSourceOrTarget = true;
	        } else if (!cy.hasElementWithId(val)) {
	          // can't create edge if one of its nodes doesn't exist
	          error('Can not create edge `' + id + '` with nonexistant ' + field + ' `' + val + '`');
	          badSourceOrTarget = true;
	        }
	      }

	      if (badSourceOrTarget) {
	        removeFromElements();
	        continue;
	      } // can't create this


	      var src = cy.getElementById(_data3.source);
	      var tgt = cy.getElementById(_data3.target); // only one edge in node if loop

	      if (src.same(tgt)) {
	        src._private.edges.push(edge);
	      } else {
	        src._private.edges.push(edge);

	        tgt._private.edges.push(edge);
	      }

	      edge._private.source = src;
	      edge._private.target = tgt;
	    } // if is edge
	    // create mock ids / indexes maps for element so it can be used like collections


	    _private.map = new Map$1();

	    _private.map.set(id, {
	      ele: _ele,
	      index: 0
	    });

	    _private.removed = false;

	    if (addToPool) {
	      cy.addToPool(_ele);
	    }
	  } // for each element
	  // do compound node sanity checks


	  for (var _i3 = 0; _i3 < nodes.length; _i3++) {
	    // each node
	    var node = nodes[_i3];
	    var _data4 = node._private.data;

	    if (number(_data4.parent)) {
	      // then automake string
	      _data4.parent = '' + _data4.parent;
	    }

	    var parentId = _data4.parent;
	    var specifiedParent = parentId != null;

	    if (specifiedParent) {
	      var parent = cy.getElementById(parentId);

	      if (parent.empty()) {
	        // non-existant parent; just remove it
	        _data4.parent = undefined;
	      } else {
	        var selfAsParent = false;
	        var ancestor = parent;

	        while (!ancestor.empty()) {
	          if (node.same(ancestor)) {
	            // mark self as parent and remove from data
	            selfAsParent = true;
	            _data4.parent = undefined; // remove parent reference
	            // exit or we loop forever

	            break;
	          }

	          ancestor = ancestor.parent();
	        }

	        if (!selfAsParent) {
	          // connect with children
	          parent[0]._private.children.push(node);

	          node._private.parent = parent[0]; // let the core know we have a compound graph

	          cy_p.hasCompoundNodes = true;
	        }
	      } // else

	    } // if specified parent

	  } // for each node


	  if (elements.length > 0) {
	    var restored = new Collection(cy, elements);

	    for (var _i4 = 0; _i4 < restored.length; _i4++) {
	      var _ele2 = restored[_i4];

	      if (_ele2.isNode()) {
	        continue;
	      } // adding an edge invalidates the traversal caches for the parallel edges


	      _ele2.parallelEdges().clearTraversalCache(); // adding an edge invalidates the traversal cache for the connected nodes


	      _ele2.source().clearTraversalCache();

	      _ele2.target().clearTraversalCache();
	    }

	    var toUpdateStyle;

	    if (cy_p.hasCompoundNodes) {
	      toUpdateStyle = cy.collection().merge(restored).merge(restored.connectedNodes()).merge(restored.parent());
	    } else {
	      toUpdateStyle = restored;
	    }

	    toUpdateStyle.dirtyCompoundBoundsCache().dirtyBoundingBoxCache().updateStyle(notifyRenderer);

	    if (notifyRenderer) {
	      restored.emitAndNotify('add');
	    } else if (addToPool) {
	      restored.emit('add');
	    }
	  }

	  return self; // chainability
	};

	elesfn$u.removed = function () {
	  var ele = this[0];
	  return ele && ele._private.removed;
	};

	elesfn$u.inside = function () {
	  var ele = this[0];
	  return ele && !ele._private.removed;
	};

	elesfn$u.remove = function () {
	  var notifyRenderer = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
	  var removeFromPool = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
	  var self = this;
	  var elesToRemove = [];
	  var elesToRemoveIds = {};
	  var cy = self._private.cy; // add connected edges

	  function addConnectedEdges(node) {
	    var edges = node._private.edges;

	    for (var i = 0; i < edges.length; i++) {
	      add(edges[i]);
	    }
	  } // add descendant nodes


	  function addChildren(node) {
	    var children = node._private.children;

	    for (var i = 0; i < children.length; i++) {
	      add(children[i]);
	    }
	  }

	  function add(ele) {
	    var alreadyAdded = elesToRemoveIds[ele.id()];

	    if (removeFromPool && ele.removed() || alreadyAdded) {
	      return;
	    } else {
	      elesToRemoveIds[ele.id()] = true;
	    }

	    if (ele.isNode()) {
	      elesToRemove.push(ele); // nodes are removed last

	      addConnectedEdges(ele);
	      addChildren(ele);
	    } else {
	      elesToRemove.unshift(ele); // edges are removed first
	    }
	  } // make the list of elements to remove
	  // (may be removing more than specified due to connected edges etc)


	  for (var i = 0, l = self.length; i < l; i++) {
	    var ele = self[i];
	    add(ele);
	  }

	  function removeEdgeRef(node, edge) {
	    var connectedEdges = node._private.edges;
	    removeFromArray(connectedEdges, edge); // removing an edges invalidates the traversal cache for its nodes

	    node.clearTraversalCache();
	  }

	  function removeParallelRef(pllEdge) {
	    // removing an edge invalidates the traversal caches for the parallel edges
	    pllEdge.clearTraversalCache();
	  }

	  var alteredParents = [];
	  alteredParents.ids = {};

	  function removeChildRef(parent, ele) {
	    ele = ele[0];
	    parent = parent[0];
	    var children = parent._private.children;
	    var pid = parent.id();
	    removeFromArray(children, ele); // remove parent => child ref

	    ele._private.parent = null; // remove child => parent ref

	    if (!alteredParents.ids[pid]) {
	      alteredParents.ids[pid] = true;
	      alteredParents.push(parent);
	    }
	  }

	  self.dirtyCompoundBoundsCache();

	  if (removeFromPool) {
	    cy.removeFromPool(elesToRemove); // remove from core pool
	  }

	  for (var _i5 = 0; _i5 < elesToRemove.length; _i5++) {
	    var _ele3 = elesToRemove[_i5];

	    if (_ele3.isEdge()) {
	      // remove references to this edge in its connected nodes
	      var src = _ele3.source()[0];

	      var tgt = _ele3.target()[0];

	      removeEdgeRef(src, _ele3);
	      removeEdgeRef(tgt, _ele3);

	      var pllEdges = _ele3.parallelEdges();

	      for (var j = 0; j < pllEdges.length; j++) {
	        var pllEdge = pllEdges[j];
	        removeParallelRef(pllEdge);

	        if (pllEdge.isBundledBezier()) {
	          pllEdge.dirtyBoundingBoxCache();
	        }
	      }
	    } else {
	      // remove reference to parent
	      var parent = _ele3.parent();

	      if (parent.length !== 0) {
	        removeChildRef(parent, _ele3);
	      }
	    }

	    if (removeFromPool) {
	      // mark as removed
	      _ele3._private.removed = true;
	    }
	  } // check to see if we have a compound graph or not


	  var elesStillInside = cy._private.elements;
	  cy._private.hasCompoundNodes = false;

	  for (var _i6 = 0; _i6 < elesStillInside.length; _i6++) {
	    var _ele4 = elesStillInside[_i6];

	    if (_ele4.isParent()) {
	      cy._private.hasCompoundNodes = true;
	      break;
	    }
	  }

	  var removedElements = new Collection(this.cy(), elesToRemove);

	  if (removedElements.size() > 0) {
	    // must manually notify since trigger won't do this automatically once removed
	    if (notifyRenderer) {
	      removedElements.emitAndNotify('remove');
	    } else if (removeFromPool) {
	      removedElements.emit('remove');
	    }
	  } // the parents who were modified by the removal need their style updated


	  for (var _i7 = 0; _i7 < alteredParents.length; _i7++) {
	    var _ele5 = alteredParents[_i7];

	    if (!removeFromPool || !_ele5.removed()) {
	      _ele5.updateStyle();
	    }
	  }

	  return removedElements;
	};

	elesfn$u.move = function (struct) {
	  var cy = this._private.cy;
	  var eles = this; // just clean up refs, caches, etc. in the same way as when removing and then restoring
	  // (our calls to remove/restore do not remove from the graph or make events)

	  var notifyRenderer = false;
	  var modifyPool = false;

	  var toString = function toString(id) {
	    return id == null ? id : '' + id;
	  }; // id must be string


	  if (struct.source !== undefined || struct.target !== undefined) {
	    var srcId = toString(struct.source);
	    var tgtId = toString(struct.target);
	    var srcExists = srcId != null && cy.hasElementWithId(srcId);
	    var tgtExists = tgtId != null && cy.hasElementWithId(tgtId);

	    if (srcExists || tgtExists) {
	      cy.batch(function () {
	        // avoid duplicate style updates
	        eles.remove(notifyRenderer, modifyPool); // clean up refs etc.

	        eles.emitAndNotify('moveout');

	        for (var i = 0; i < eles.length; i++) {
	          var ele = eles[i];
	          var _data5 = ele._private.data;

	          if (ele.isEdge()) {
	            if (srcExists) {
	              _data5.source = srcId;
	            }

	            if (tgtExists) {
	              _data5.target = tgtId;
	            }
	          }
	        }

	        eles.restore(notifyRenderer, modifyPool); // make new refs, style, etc.
	      });
	      eles.emitAndNotify('move');
	    }
	  } else if (struct.parent !== undefined) {
	    // move node to new parent
	    var parentId = toString(struct.parent);
	    var parentExists = parentId === null || cy.hasElementWithId(parentId);

	    if (parentExists) {
	      var pidToAssign = parentId === null ? undefined : parentId;
	      cy.batch(function () {
	        // avoid duplicate style updates
	        var updated = eles.remove(notifyRenderer, modifyPool); // clean up refs etc.

	        updated.emitAndNotify('moveout');

	        for (var i = 0; i < eles.length; i++) {
	          var ele = eles[i];
	          var _data6 = ele._private.data;

	          if (ele.isNode()) {
	            _data6.parent = pidToAssign;
	          }
	        }

	        updated.restore(notifyRenderer, modifyPool); // make new refs, style, etc.
	      });
	      eles.emitAndNotify('move');
	    }
	  }

	  return this;
	};

	[elesfn$c, elesfn$d, elesfn$e, elesfn$f, elesfn$g, data$1, elesfn$i, dimensions, elesfn$m, elesfn$n, elesfn$o, elesfn$p, elesfn$q, elesfn$r, elesfn$s, elesfn$t].forEach(function (props) {
	  extend(elesfn$u, props);
	});

	var corefn = {
	  add: function add(opts) {
	    var elements;
	    var cy = this; // add the elements

	    if (elementOrCollection(opts)) {
	      var eles = opts;

	      if (eles._private.cy === cy) {
	        // same instance => just restore
	        elements = eles.restore();
	      } else {
	        // otherwise, copy from json
	        var jsons = [];

	        for (var i = 0; i < eles.length; i++) {
	          var ele = eles[i];
	          jsons.push(ele.json());
	        }

	        elements = new Collection(cy, jsons);
	      }
	    } // specify an array of options
	    else if (array(opts)) {
	        var _jsons = opts;
	        elements = new Collection(cy, _jsons);
	      } // specify via opts.nodes and opts.edges
	      else if (plainObject(opts) && (array(opts.nodes) || array(opts.edges))) {
	          var elesByGroup = opts;
	          var _jsons2 = [];
	          var grs = ['nodes', 'edges'];

	          for (var _i = 0, il = grs.length; _i < il; _i++) {
	            var group = grs[_i];
	            var elesArray = elesByGroup[group];

	            if (array(elesArray)) {
	              for (var j = 0, jl = elesArray.length; j < jl; j++) {
	                var json = extend({
	                  group: group
	                }, elesArray[j]);

	                _jsons2.push(json);
	              }
	            }
	          }

	          elements = new Collection(cy, _jsons2);
	        } // specify options for one element
	        else {
	            var _json = opts;
	            elements = new Element(cy, _json).collection();
	          }

	    return elements;
	  },
	  remove: function remove(collection) {
	    if (elementOrCollection(collection)) ; else if (string(collection)) {
	      var selector = collection;
	      collection = this.$(selector);
	    }

	    return collection.remove();
	  }
	};

	/* global Float32Array */

	/*! Bezier curve function generator. Copyright Gaetan Renaudeau. MIT License: http://en.wikipedia.org/wiki/MIT_License */
	function generateCubicBezier(mX1, mY1, mX2, mY2) {
	  var NEWTON_ITERATIONS = 4,
	      NEWTON_MIN_SLOPE = 0.001,
	      SUBDIVISION_PRECISION = 0.0000001,
	      SUBDIVISION_MAX_ITERATIONS = 10,
	      kSplineTableSize = 11,
	      kSampleStepSize = 1.0 / (kSplineTableSize - 1.0),
	      float32ArraySupported = typeof Float32Array !== 'undefined';
	  /* Must contain four arguments. */

	  if (arguments.length !== 4) {
	    return false;
	  }
	  /* Arguments must be numbers. */


	  for (var i = 0; i < 4; ++i) {
	    if (typeof arguments[i] !== "number" || isNaN(arguments[i]) || !isFinite(arguments[i])) {
	      return false;
	    }
	  }
	  /* X values must be in the [0, 1] range. */


	  mX1 = Math.min(mX1, 1);
	  mX2 = Math.min(mX2, 1);
	  mX1 = Math.max(mX1, 0);
	  mX2 = Math.max(mX2, 0);
	  var mSampleValues = float32ArraySupported ? new Float32Array(kSplineTableSize) : new Array(kSplineTableSize);

	  function A(aA1, aA2) {
	    return 1.0 - 3.0 * aA2 + 3.0 * aA1;
	  }

	  function B(aA1, aA2) {
	    return 3.0 * aA2 - 6.0 * aA1;
	  }

	  function C(aA1) {
	    return 3.0 * aA1;
	  }

	  function calcBezier(aT, aA1, aA2) {
	    return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT;
	  }

	  function getSlope(aT, aA1, aA2) {
	    return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1);
	  }

	  function newtonRaphsonIterate(aX, aGuessT) {
	    for (var _i = 0; _i < NEWTON_ITERATIONS; ++_i) {
	      var currentSlope = getSlope(aGuessT, mX1, mX2);

	      if (currentSlope === 0.0) {
	        return aGuessT;
	      }

	      var currentX = calcBezier(aGuessT, mX1, mX2) - aX;
	      aGuessT -= currentX / currentSlope;
	    }

	    return aGuessT;
	  }

	  function calcSampleValues() {
	    for (var _i2 = 0; _i2 < kSplineTableSize; ++_i2) {
	      mSampleValues[_i2] = calcBezier(_i2 * kSampleStepSize, mX1, mX2);
	    }
	  }

	  function binarySubdivide(aX, aA, aB) {
	    var currentX,
	        currentT,
	        i = 0;

	    do {
	      currentT = aA + (aB - aA) / 2.0;
	      currentX = calcBezier(currentT, mX1, mX2) - aX;

	      if (currentX > 0.0) {
	        aB = currentT;
	      } else {
	        aA = currentT;
	      }
	    } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);

	    return currentT;
	  }

	  function getTForX(aX) {
	    var intervalStart = 0.0,
	        currentSample = 1,
	        lastSample = kSplineTableSize - 1;

	    for (; currentSample !== lastSample && mSampleValues[currentSample] <= aX; ++currentSample) {
	      intervalStart += kSampleStepSize;
	    }

	    --currentSample;
	    var dist = (aX - mSampleValues[currentSample]) / (mSampleValues[currentSample + 1] - mSampleValues[currentSample]),
	        guessForT = intervalStart + dist * kSampleStepSize,
	        initialSlope = getSlope(guessForT, mX1, mX2);

	    if (initialSlope >= NEWTON_MIN_SLOPE) {
	      return newtonRaphsonIterate(aX, guessForT);
	    } else if (initialSlope === 0.0) {
	      return guessForT;
	    } else {
	      return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize);
	    }
	  }

	  var _precomputed = false;

	  function precompute() {
	    _precomputed = true;

	    if (mX1 !== mY1 || mX2 !== mY2) {
	      calcSampleValues();
	    }
	  }

	  var f = function f(aX) {
	    if (!_precomputed) {
	      precompute();
	    }

	    if (mX1 === mY1 && mX2 === mY2) {
	      return aX;
	    }

	    if (aX === 0) {
	      return 0;
	    }

	    if (aX === 1) {
	      return 1;
	    }

	    return calcBezier(getTForX(aX), mY1, mY2);
	  };

	  f.getControlPoints = function () {
	    return [{
	      x: mX1,
	      y: mY1
	    }, {
	      x: mX2,
	      y: mY2
	    }];
	  };

	  var str = "generateBezier(" + [mX1, mY1, mX2, mY2] + ")";

	  f.toString = function () {
	    return str;
	  };

	  return f;
	}

	/*! Runge-Kutta spring physics function generator. Adapted from Framer.js, copyright Koen Bok. MIT License: http://en.wikipedia.org/wiki/MIT_License */

	/* Given a tension, friction, and duration, a simulation at 60FPS will first run without a defined duration in order to calculate the full path. A second pass
	   then adjusts the time delta -- using the relation between actual time and duration -- to calculate the path for the duration-constrained animation. */
	var generateSpringRK4 = function () {
	  function springAccelerationForState(state) {
	    return -state.tension * state.x - state.friction * state.v;
	  }

	  function springEvaluateStateWithDerivative(initialState, dt, derivative) {
	    var state = {
	      x: initialState.x + derivative.dx * dt,
	      v: initialState.v + derivative.dv * dt,
	      tension: initialState.tension,
	      friction: initialState.friction
	    };
	    return {
	      dx: state.v,
	      dv: springAccelerationForState(state)
	    };
	  }

	  function springIntegrateState(state, dt) {
	    var a = {
	      dx: state.v,
	      dv: springAccelerationForState(state)
	    },
	        b = springEvaluateStateWithDerivative(state, dt * 0.5, a),
	        c = springEvaluateStateWithDerivative(state, dt * 0.5, b),
	        d = springEvaluateStateWithDerivative(state, dt, c),
	        dxdt = 1.0 / 6.0 * (a.dx + 2.0 * (b.dx + c.dx) + d.dx),
	        dvdt = 1.0 / 6.0 * (a.dv + 2.0 * (b.dv + c.dv) + d.dv);
	    state.x = state.x + dxdt * dt;
	    state.v = state.v + dvdt * dt;
	    return state;
	  }

	  return function springRK4Factory(tension, friction, duration) {
	    var initState = {
	      x: -1,
	      v: 0,
	      tension: null,
	      friction: null
	    },
	        path = [0],
	        time_lapsed = 0,
	        tolerance = 1 / 10000,
	        DT = 16 / 1000,
	        have_duration,
	        dt,
	        last_state;
	    tension = parseFloat(tension) || 500;
	    friction = parseFloat(friction) || 20;
	    duration = duration || null;
	    initState.tension = tension;
	    initState.friction = friction;
	    have_duration = duration !== null;
	    /* Calculate the actual time it takes for this animation to complete with the provided conditions. */

	    if (have_duration) {
	      /* Run the simulation without a duration. */
	      time_lapsed = springRK4Factory(tension, friction);
	      /* Compute the adjusted time delta. */

	      dt = time_lapsed / duration * DT;
	    } else {
	      dt = DT;
	    }

	    for (;;) {
	      /* Next/step function .*/
	      last_state = springIntegrateState(last_state || initState, dt);
	      /* Store the position. */

	      path.push(1 + last_state.x);
	      time_lapsed += 16;
	      /* If the change threshold is reached, break. */

	      if (!(Math.abs(last_state.x) > tolerance && Math.abs(last_state.v) > tolerance)) {
	        break;
	      }
	    }
	    /* If duration is not defined, return the actual time required for completing this animation. Otherwise, return a closure that holds the
	       computed path and returns a snapshot of the position according to a given percentComplete. */


	    return !have_duration ? time_lapsed : function (percentComplete) {
	      return path[percentComplete * (path.length - 1) | 0];
	    };
	  };
	}();

	var cubicBezier = function cubicBezier(t1, p1, t2, p2) {
	  var bezier = generateCubicBezier(t1, p1, t2, p2);
	  return function (start, end, percent) {
	    return start + (end - start) * bezier(percent);
	  };
	};

	var easings = {
	  'linear': function linear(start, end, percent) {
	    return start + (end - start) * percent;
	  },
	  // default easings
	  'ease': cubicBezier(0.25, 0.1, 0.25, 1),
	  'ease-in': cubicBezier(0.42, 0, 1, 1),
	  'ease-out': cubicBezier(0, 0, 0.58, 1),
	  'ease-in-out': cubicBezier(0.42, 0, 0.58, 1),
	  // sine
	  'ease-in-sine': cubicBezier(0.47, 0, 0.745, 0.715),
	  'ease-out-sine': cubicBezier(0.39, 0.575, 0.565, 1),
	  'ease-in-out-sine': cubicBezier(0.445, 0.05, 0.55, 0.95),
	  // quad
	  'ease-in-quad': cubicBezier(0.55, 0.085, 0.68, 0.53),
	  'ease-out-quad': cubicBezier(0.25, 0.46, 0.45, 0.94),
	  'ease-in-out-quad': cubicBezier(0.455, 0.03, 0.515, 0.955),
	  // cubic
	  'ease-in-cubic': cubicBezier(0.55, 0.055, 0.675, 0.19),
	  'ease-out-cubic': cubicBezier(0.215, 0.61, 0.355, 1),
	  'ease-in-out-cubic': cubicBezier(0.645, 0.045, 0.355, 1),
	  // quart
	  'ease-in-quart': cubicBezier(0.895, 0.03, 0.685, 0.22),
	  'ease-out-quart': cubicBezier(0.165, 0.84, 0.44, 1),
	  'ease-in-out-quart': cubicBezier(0.77, 0, 0.175, 1),
	  // quint
	  'ease-in-quint': cubicBezier(0.755, 0.05, 0.855, 0.06),
	  'ease-out-quint': cubicBezier(0.23, 1, 0.32, 1),
	  'ease-in-out-quint': cubicBezier(0.86, 0, 0.07, 1),
	  // expo
	  'ease-in-expo': cubicBezier(0.95, 0.05, 0.795, 0.035),
	  'ease-out-expo': cubicBezier(0.19, 1, 0.22, 1),
	  'ease-in-out-expo': cubicBezier(1, 0, 0, 1),
	  // circ
	  'ease-in-circ': cubicBezier(0.6, 0.04, 0.98, 0.335),
	  'ease-out-circ': cubicBezier(0.075, 0.82, 0.165, 1),
	  'ease-in-out-circ': cubicBezier(0.785, 0.135, 0.15, 0.86),
	  // user param easings...
	  'spring': function spring(tension, friction, duration) {
	    if (duration === 0) {
	      // can't get a spring w/ duration 0
	      return easings.linear; // duration 0 => jump to end so impl doesn't matter
	    }

	    var spring = generateSpringRK4(tension, friction, duration);
	    return function (start, end, percent) {
	      return start + (end - start) * spring(percent);
	    };
	  },
	  'cubic-bezier': cubicBezier
	};

	function getEasedValue(type, start, end, percent, easingFn) {
	  if (percent === 1) {
	    return end;
	  }

	  if (start === end) {
	    return end;
	  }

	  var val = easingFn(start, end, percent);

	  if (type == null) {
	    return val;
	  }

	  if (type.roundValue || type.color) {
	    val = Math.round(val);
	  }

	  if (type.min !== undefined) {
	    val = Math.max(val, type.min);
	  }

	  if (type.max !== undefined) {
	    val = Math.min(val, type.max);
	  }

	  return val;
	}

	function getValue(prop, spec) {
	  if (prop.pfValue != null || prop.value != null) {
	    if (prop.pfValue != null && (spec == null || spec.type.units !== '%')) {
	      return prop.pfValue;
	    } else {
	      return prop.value;
	    }
	  } else {
	    return prop;
	  }
	}

	function ease(startProp, endProp, percent, easingFn, propSpec) {
	  var type = propSpec != null ? propSpec.type : null;

	  if (percent < 0) {
	    percent = 0;
	  } else if (percent > 1) {
	    percent = 1;
	  }

	  var start = getValue(startProp, propSpec);
	  var end = getValue(endProp, propSpec);

	  if (number(start) && number(end)) {
	    return getEasedValue(type, start, end, percent, easingFn);
	  } else if (array(start) && array(end)) {
	    var easedArr = [];

	    for (var i = 0; i < end.length; i++) {
	      var si = start[i];
	      var ei = end[i];

	      if (si != null && ei != null) {
	        var val = getEasedValue(type, si, ei, percent, easingFn);
	        easedArr.push(val);
	      } else {
	        easedArr.push(ei);
	      }
	    }

	    return easedArr;
	  }

	  return undefined;
	}

	function step(self, ani, now, isCore) {
	  var isEles = !isCore;
	  var _p = self._private;
	  var ani_p = ani._private;
	  var pEasing = ani_p.easing;
	  var startTime = ani_p.startTime;
	  var cy = isCore ? self : self.cy();
	  var style = cy.style();

	  if (!ani_p.easingImpl) {
	    if (pEasing == null) {
	      // use default
	      ani_p.easingImpl = easings['linear'];
	    } else {
	      // then define w/ name
	      var easingVals;

	      if (string(pEasing)) {
	        var easingProp = style.parse('transition-timing-function', pEasing);
	        easingVals = easingProp.value;
	      } else {
	        // then assume preparsed array
	        easingVals = pEasing;
	      }

	      var name, args;

	      if (string(easingVals)) {
	        name = easingVals;
	        args = [];
	      } else {
	        name = easingVals[1];
	        args = easingVals.slice(2).map(function (n) {
	          return +n;
	        });
	      }

	      if (args.length > 0) {
	        // create with args
	        if (name === 'spring') {
	          args.push(ani_p.duration); // need duration to generate spring
	        }

	        ani_p.easingImpl = easings[name].apply(null, args);
	      } else {
	        // static impl by name
	        ani_p.easingImpl = easings[name];
	      }
	    }
	  }

	  var easing = ani_p.easingImpl;
	  var percent;

	  if (ani_p.duration === 0) {
	    percent = 1;
	  } else {
	    percent = (now - startTime) / ani_p.duration;
	  }

	  if (ani_p.applying) {
	    percent = ani_p.progress;
	  }

	  if (percent < 0) {
	    percent = 0;
	  } else if (percent > 1) {
	    percent = 1;
	  }

	  if (ani_p.delay == null) {
	    // then update
	    var startPos = ani_p.startPosition;
	    var endPos = ani_p.position;

	    if (endPos && isEles && !self.locked()) {
	      var newPos = {};

	      if (valid(startPos.x, endPos.x)) {
	        newPos.x = ease(startPos.x, endPos.x, percent, easing);
	      }

	      if (valid(startPos.y, endPos.y)) {
	        newPos.y = ease(startPos.y, endPos.y, percent, easing);
	      }

	      self.position(newPos);
	    }

	    var startPan = ani_p.startPan;
	    var endPan = ani_p.pan;
	    var pan = _p.pan;
	    var animatingPan = endPan != null && isCore;

	    if (animatingPan) {
	      if (valid(startPan.x, endPan.x)) {
	        pan.x = ease(startPan.x, endPan.x, percent, easing);
	      }

	      if (valid(startPan.y, endPan.y)) {
	        pan.y = ease(startPan.y, endPan.y, percent, easing);
	      }

	      self.emit('pan');
	    }

	    var startZoom = ani_p.startZoom;
	    var endZoom = ani_p.zoom;
	    var animatingZoom = endZoom != null && isCore;

	    if (animatingZoom) {
	      if (valid(startZoom, endZoom)) {
	        _p.zoom = bound(_p.minZoom, ease(startZoom, endZoom, percent, easing), _p.maxZoom);
	      }

	      self.emit('zoom');
	    }

	    if (animatingPan || animatingZoom) {
	      self.emit('viewport');
	    }

	    var props = ani_p.style;

	    if (props && props.length > 0 && isEles) {
	      for (var i = 0; i < props.length; i++) {
	        var prop = props[i];
	        var _name = prop.name;
	        var end = prop;
	        var start = ani_p.startStyle[_name];
	        var propSpec = style.properties[start.name];
	        var easedVal = ease(start, end, percent, easing, propSpec);
	        style.overrideBypass(self, _name, easedVal);
	      } // for props


	      self.emit('style');
	    } // if

	  }

	  ani_p.progress = percent;
	  return percent;
	}

	function valid(start, end) {
	  if (start == null || end == null) {
	    return false;
	  }

	  if (number(start) && number(end)) {
	    return true;
	  } else if (start && end) {
	    return true;
	  }

	  return false;
	}

	function startAnimation(self, ani, now, isCore) {
	  var ani_p = ani._private;
	  ani_p.started = true;
	  ani_p.startTime = now - ani_p.progress * ani_p.duration;
	}

	function stepAll(now, cy) {
	  var eles = cy._private.aniEles;
	  var doneEles = [];

	  function stepOne(ele, isCore) {
	    var _p = ele._private;
	    var current = _p.animation.current;
	    var queue = _p.animation.queue;
	    var ranAnis = false; // cancel all animations on display:none ele

	    if (!isCore && ele.pstyle('display').value === 'none') {
	      // put all current and queue animations in this tick's current list
	      // and empty the lists for the element
	      current = current.splice(0, current.length).concat(queue.splice(0, queue.length)); // stop all animations

	      for (var i = 0; i < current.length; i++) {
	        current[i].stop();
	      }
	    } // if nothing currently animating, get something from the queue


	    if (current.length === 0) {
	      var next = queue.shift();

	      if (next) {
	        current.push(next);
	      }
	    }

	    var callbacks = function callbacks(_callbacks) {
	      for (var j = _callbacks.length - 1; j >= 0; j--) {
	        var cb = _callbacks[j];
	        cb();
	      }

	      _callbacks.splice(0, _callbacks.length);
	    }; // step and remove if done


	    for (var _i = current.length - 1; _i >= 0; _i--) {
	      var ani = current[_i];
	      var ani_p = ani._private;

	      if (ani_p.stopped) {
	        current.splice(_i, 1);
	        ani_p.hooked = false;
	        ani_p.playing = false;
	        ani_p.started = false;
	        callbacks(ani_p.frames);
	        continue;
	      }

	      if (!ani_p.playing && !ani_p.applying) {
	        continue;
	      } // an apply() while playing shouldn't do anything


	      if (ani_p.playing && ani_p.applying) {
	        ani_p.applying = false;
	      }

	      if (!ani_p.started) {
	        startAnimation(ele, ani, now);
	      }

	      step(ele, ani, now, isCore);

	      if (ani_p.applying) {
	        ani_p.applying = false;
	      }

	      callbacks(ani_p.frames);

	      if (ani_p.step != null) {
	        ani_p.step(now);
	      }

	      if (ani.completed()) {
	        current.splice(_i, 1);
	        ani_p.hooked = false;
	        ani_p.playing = false;
	        ani_p.started = false;
	        callbacks(ani_p.completes);
	      }

	      ranAnis = true;
	    }

	    if (!isCore && current.length === 0 && queue.length === 0) {
	      doneEles.push(ele);
	    }

	    return ranAnis;
	  } // stepElement
	  // handle all eles


	  var ranEleAni = false;

	  for (var e = 0; e < eles.length; e++) {
	    var ele = eles[e];
	    var handledThisEle = stepOne(ele);
	    ranEleAni = ranEleAni || handledThisEle;
	  } // each element


	  var ranCoreAni = stepOne(cy, true); // notify renderer

	  if (ranEleAni || ranCoreAni) {
	    if (eles.length > 0) {
	      cy.notify('draw', eles);
	    } else {
	      cy.notify('draw');
	    }
	  } // remove elements from list of currently animating if its queues are empty


	  eles.unmerge(doneEles);
	  cy.emit('step');
	} // stepAll

	var corefn$1 = {
	  // pull in animation functions
	  animate: define$3.animate(),
	  animation: define$3.animation(),
	  animated: define$3.animated(),
	  clearQueue: define$3.clearQueue(),
	  delay: define$3.delay(),
	  delayAnimation: define$3.delayAnimation(),
	  stop: define$3.stop(),
	  addToAnimationPool: function addToAnimationPool(eles) {
	    var cy = this;

	    if (!cy.styleEnabled()) {
	      return;
	    } // save cycles when no style used


	    cy._private.aniEles.merge(eles);
	  },
	  stopAnimationLoop: function stopAnimationLoop() {
	    this._private.animationsRunning = false;
	  },
	  startAnimationLoop: function startAnimationLoop() {
	    var cy = this;
	    cy._private.animationsRunning = true;

	    if (!cy.styleEnabled()) {
	      return;
	    } // save cycles when no style used
	    // NB the animation loop will exec in headless environments if style enabled
	    // and explicit cy.destroy() is necessary to stop the loop


	    function headlessStep() {
	      if (!cy._private.animationsRunning) {
	        return;
	      }

	      requestAnimationFrame(function animationStep(now) {
	        stepAll(now, cy);
	        headlessStep();
	      });
	    }

	    var renderer = cy.renderer();

	    if (renderer && renderer.beforeRender) {
	      // let the renderer schedule animations
	      renderer.beforeRender(function rendererAnimationStep(willDraw, now) {
	        stepAll(now, cy);
	      }, renderer.beforeRenderPriorities.animations);
	    } else {
	      // manage the animation loop ourselves
	      headlessStep(); // first call
	    }
	  }
	};

	var emitterOptions$1 = {
	  qualifierCompare: function qualifierCompare(selector1, selector2) {
	    if (selector1 == null || selector2 == null) {
	      return selector1 == null && selector2 == null;
	    } else {
	      return selector1.sameText(selector2);
	    }
	  },
	  eventMatches: function eventMatches(cy, listener, eventObj) {
	    var selector = listener.qualifier;

	    if (selector != null) {
	      return cy !== eventObj.target && element(eventObj.target) && selector.matches(eventObj.target);
	    }

	    return true;
	  },
	  addEventFields: function addEventFields(cy, evt) {
	    evt.cy = cy;
	    evt.target = cy;
	  },
	  callbackContext: function callbackContext(cy, listener, eventObj) {
	    return listener.qualifier != null ? eventObj.target : cy;
	  }
	};

	var argSelector$1 = function argSelector(arg) {
	  if (string(arg)) {
	    return new Selector(arg);
	  } else {
	    return arg;
	  }
	};

	var elesfn$v = {
	  createEmitter: function createEmitter() {
	    var _p = this._private;

	    if (!_p.emitter) {
	      _p.emitter = new Emitter(emitterOptions$1, this);
	    }

	    return this;
	  },
	  emitter: function emitter() {
	    return this._private.emitter;
	  },
	  on: function on(events, selector, callback) {
	    this.emitter().on(events, argSelector$1(selector), callback);
	    return this;
	  },
	  removeListener: function removeListener(events, selector, callback) {
	    this.emitter().removeListener(events, argSelector$1(selector), callback);
	    return this;
	  },
	  removeAllListeners: function removeAllListeners() {
	    this.emitter().removeAllListeners();
	    return this;
	  },
	  one: function one(events, selector, callback) {
	    this.emitter().one(events, argSelector$1(selector), callback);
	    return this;
	  },
	  once: function once(events, selector, callback) {
	    this.emitter().one(events, argSelector$1(selector), callback);
	    return this;
	  },
	  emit: function emit(events, extraParams) {
	    this.emitter().emit(events, extraParams);
	    return this;
	  },
	  emitAndNotify: function emitAndNotify(event, eles) {
	    this.emit(event);
	    this.notify(event, eles);
	    return this;
	  }
	};
	define$3.eventAliasesOn(elesfn$v);

	var corefn$2 = {
	  png: function png(options) {
	    var renderer = this._private.renderer;
	    options = options || {};
	    return renderer.png(options);
	  },
	  jpg: function jpg(options) {
	    var renderer = this._private.renderer;
	    options = options || {};
	    options.bg = options.bg || '#fff';
	    return renderer.jpg(options);
	  }
	};
	corefn$2.jpeg = corefn$2.jpg;

	var corefn$3 = {
	  layout: function layout(options) {
	    var cy = this;

	    if (options == null) {
	      error('Layout options must be specified to make a layout');
	      return;
	    }

	    if (options.name == null) {
	      error('A `name` must be specified to make a layout');
	      return;
	    }

	    var name = options.name;
	    var Layout = cy.extension('layout', name);

	    if (Layout == null) {
	      error('No such layout `' + name + '` found.  Did you forget to import it and `cytoscape.use()` it?');
	      return;
	    }

	    var eles;

	    if (string(options.eles)) {
	      eles = cy.$(options.eles);
	    } else {
	      eles = options.eles != null ? options.eles : cy.$();
	    }

	    var layout = new Layout(extend({}, options, {
	      cy: cy,
	      eles: eles
	    }));
	    return layout;
	  }
	};
	corefn$3.createLayout = corefn$3.makeLayout = corefn$3.layout;

	var corefn$4 = {
	  notify: function notify(eventName, eventEles) {
	    var _p = this._private;

	    if (this.batching()) {
	      _p.batchNotifications = _p.batchNotifications || {};
	      var eles = _p.batchNotifications[eventName] = _p.batchNotifications[eventName] || this.collection();

	      if (eventEles != null) {
	        eles.merge(eventEles);
	      }

	      return; // notifications are disabled during batching
	    }

	    if (!_p.notificationsEnabled) {
	      return;
	    } // exit on disabled


	    var renderer = this.renderer(); // exit if destroy() called on core or renderer in between frames #1499 #1528

	    if (this.destroyed() || !renderer) {
	      return;
	    }

	    renderer.notify(eventName, eventEles);
	  },
	  notifications: function notifications(bool) {
	    var p = this._private;

	    if (bool === undefined) {
	      return p.notificationsEnabled;
	    } else {
	      p.notificationsEnabled = bool ? true : false;
	    }

	    return this;
	  },
	  noNotifications: function noNotifications(callback) {
	    this.notifications(false);
	    callback();
	    this.notifications(true);
	  },
	  batching: function batching() {
	    return this._private.batchCount > 0;
	  },
	  startBatch: function startBatch() {
	    var _p = this._private;

	    if (_p.batchCount == null) {
	      _p.batchCount = 0;
	    }

	    if (_p.batchCount === 0) {
	      _p.batchStyleEles = this.collection();
	      _p.batchNotifications = {};
	    }

	    _p.batchCount++;
	    return this;
	  },
	  endBatch: function endBatch() {
	    var _p = this._private;

	    if (_p.batchCount === 0) {
	      return this;
	    }

	    _p.batchCount--;

	    if (_p.batchCount === 0) {
	      // update style for dirty eles
	      _p.batchStyleEles.updateStyle();

	      var renderer = this.renderer(); // notify the renderer of queued eles and event types

	      Object.keys(_p.batchNotifications).forEach(function (eventName) {
	        var eles = _p.batchNotifications[eventName];

	        if (eles.empty()) {
	          renderer.notify(eventName);
	        } else {
	          renderer.notify(eventName, eles);
	        }
	      });
	    }

	    return this;
	  },
	  batch: function batch(callback) {
	    this.startBatch();
	    callback();
	    this.endBatch();
	    return this;
	  },
	  // for backwards compatibility
	  batchData: function batchData(map) {
	    var cy = this;
	    return this.batch(function () {
	      var ids = Object.keys(map);

	      for (var i = 0; i < ids.length; i++) {
	        var id = ids[i];
	        var data = map[id];
	        var ele = cy.getElementById(id);
	        ele.data(data);
	      }
	    });
	  }
	};

	var rendererDefaults = defaults({
	  hideEdgesOnViewport: false,
	  textureOnViewport: false,
	  motionBlur: false,
	  motionBlurOpacity: 0.05,
	  pixelRatio: undefined,
	  desktopTapThreshold: 4,
	  touchTapThreshold: 8,
	  wheelSensitivity: 1,
	  debug: false,
	  showFps: false
	});
	var corefn$5 = {
	  renderTo: function renderTo(context, zoom, pan, pxRatio) {
	    var r = this._private.renderer;
	    r.renderTo(context, zoom, pan, pxRatio);
	    return this;
	  },
	  renderer: function renderer() {
	    return this._private.renderer;
	  },
	  forceRender: function forceRender() {
	    this.notify('draw');
	    return this;
	  },
	  resize: function resize() {
	    this.invalidateSize();
	    this.emitAndNotify('resize');
	    return this;
	  },
	  initRenderer: function initRenderer(options) {
	    var cy = this;
	    var RendererProto = cy.extension('renderer', options.name);

	    if (RendererProto == null) {
	      error("Can not initialise: No such renderer `".concat(options.name, "` found. Did you forget to import it and `cytoscape.use()` it?"));
	      return;
	    }

	    if (options.wheelSensitivity !== undefined) {
	      warn("You have set a custom wheel sensitivity.  This will make your app zoom unnaturally when using mainstream mice.  You should change this value from the default only if you can guarantee that all your users will use the same hardware and OS configuration as your current machine.");
	    }

	    var rOpts = rendererDefaults(options);
	    rOpts.cy = cy;
	    cy._private.renderer = new RendererProto(rOpts);
	    this.notify('init');
	  },
	  destroyRenderer: function destroyRenderer() {
	    var cy = this;
	    cy.notify('destroy'); // destroy the renderer

	    var domEle = cy.container();

	    if (domEle) {
	      domEle._cyreg = null;

	      while (domEle.childNodes.length > 0) {
	        domEle.removeChild(domEle.childNodes[0]);
	      }
	    }

	    cy._private.renderer = null; // to be extra safe, remove the ref

	    cy.mutableElements().forEach(function (ele) {
	      var _p = ele._private;
	      _p.rscratch = {};
	      _p.rstyle = {};
	      _p.animation.current = [];
	      _p.animation.queue = [];
	    });
	  },
	  onRender: function onRender(fn) {
	    return this.on('render', fn);
	  },
	  offRender: function offRender(fn) {
	    return this.off('render', fn);
	  }
	};
	corefn$5.invalidateDimensions = corefn$5.resize;

	var corefn$6 = {
	  // get a collection
	  // - empty collection on no args
	  // - collection of elements in the graph on selector arg
	  // - guarantee a returned collection when elements or collection specified
	  collection: function collection(eles, opts) {
	    if (string(eles)) {
	      return this.$(eles);
	    } else if (elementOrCollection(eles)) {
	      return eles.collection();
	    } else if (array(eles)) {
	      return new Collection(this, eles, opts);
	    }

	    return new Collection(this);
	  },
	  nodes: function nodes(selector) {
	    var nodes = this.$(function (ele) {
	      return ele.isNode();
	    });

	    if (selector) {
	      return nodes.filter(selector);
	    }

	    return nodes;
	  },
	  edges: function edges(selector) {
	    var edges = this.$(function (ele) {
	      return ele.isEdge();
	    });

	    if (selector) {
	      return edges.filter(selector);
	    }

	    return edges;
	  },
	  // search the graph like jQuery
	  $: function $(selector) {
	    var eles = this._private.elements;

	    if (selector) {
	      return eles.filter(selector);
	    } else {
	      return eles.spawnSelf();
	    }
	  },
	  mutableElements: function mutableElements() {
	    return this._private.elements;
	  }
	}; // aliases

	corefn$6.elements = corefn$6.filter = corefn$6.$;

	var styfn = {}; // keys for style blocks, e.g. ttfftt

	var TRUE = 't';
	var FALSE = 'f'; // (potentially expensive calculation)
	// apply the style to the element based on
	// - its bypass
	// - what selectors match it

	styfn.apply = function (eles) {
	  var self = this;
	  var _p = self._private;
	  var cy = _p.cy;
	  var updatedEles = cy.collection();

	  if (_p.newStyle) {
	    // clear style caches
	    _p.contextStyles = {};
	    _p.propDiffs = {};
	    self.cleanElements(eles, true);
	  }

	  for (var ie = 0; ie < eles.length; ie++) {
	    var ele = eles[ie];
	    var cxtMeta = self.getContextMeta(ele);

	    if (cxtMeta.empty) {
	      continue;
	    }

	    var cxtStyle = self.getContextStyle(cxtMeta);
	    var app = self.applyContextStyle(cxtMeta, cxtStyle, ele);

	    if (!_p.newStyle) {
	      self.updateTransitions(ele, app.diffProps);
	    }

	    var hintsDiff = self.updateStyleHints(ele);

	    if (hintsDiff) {
	      updatedEles.merge(ele);
	    }
	  } // for elements


	  _p.newStyle = false;
	  return updatedEles;
	};

	styfn.getPropertiesDiff = function (oldCxtKey, newCxtKey) {
	  var self = this;
	  var cache = self._private.propDiffs = self._private.propDiffs || {};
	  var dualCxtKey = oldCxtKey + '-' + newCxtKey;
	  var cachedVal = cache[dualCxtKey];

	  if (cachedVal) {
	    return cachedVal;
	  }

	  var diffProps = [];
	  var addedProp = {};

	  for (var i = 0; i < self.length; i++) {
	    var cxt = self[i];
	    var oldHasCxt = oldCxtKey[i] === TRUE;
	    var newHasCxt = newCxtKey[i] === TRUE;
	    var cxtHasDiffed = oldHasCxt !== newHasCxt;
	    var cxtHasMappedProps = cxt.mappedProperties.length > 0;

	    if (cxtHasDiffed || newHasCxt && cxtHasMappedProps) {
	      var props = void 0;

	      if (cxtHasDiffed && cxtHasMappedProps) {
	        props = cxt.properties; // suffices b/c mappedProperties is a subset of properties
	      } else if (cxtHasDiffed) {
	        props = cxt.properties; // need to check them all
	      } else if (cxtHasMappedProps) {
	        props = cxt.mappedProperties; // only need to check mapped
	      }

	      for (var j = 0; j < props.length; j++) {
	        var prop = props[j];
	        var name = prop.name; // if a later context overrides this property, then the fact that this context has switched/diffed doesn't matter
	        // (semi expensive check since it makes this function O(n^2) on context length, but worth it since overall result
	        // is cached)

	        var laterCxtOverrides = false;

	        for (var k = i + 1; k < self.length; k++) {
	          var laterCxt = self[k];
	          var hasLaterCxt = newCxtKey[k] === TRUE;

	          if (!hasLaterCxt) {
	            continue;
	          } // can't override unless the context is active


	          laterCxtOverrides = laterCxt.properties[prop.name] != null;

	          if (laterCxtOverrides) {
	            break;
	          } // exit early as long as one later context overrides

	        }

	        if (!addedProp[name] && !laterCxtOverrides) {
	          addedProp[name] = true;
	          diffProps.push(name);
	        }
	      } // for props

	    } // if

	  } // for contexts


	  cache[dualCxtKey] = diffProps;
	  return diffProps;
	};

	styfn.getContextMeta = function (ele) {
	  var self = this;
	  var cxtKey = '';
	  var diffProps;
	  var prevKey = ele._private.styleCxtKey || '';

	  if (self._private.newStyle) {
	    prevKey = ''; // since we need to apply all style if a fresh stylesheet
	  } // get the cxt key


	  for (var i = 0; i < self.length; i++) {
	    var context = self[i];
	    var contextSelectorMatches = context.selector && context.selector.matches(ele); // NB: context.selector may be null for 'core'

	    if (contextSelectorMatches) {
	      cxtKey += TRUE;
	    } else {
	      cxtKey += FALSE;
	    }
	  } // for context


	  diffProps = self.getPropertiesDiff(prevKey, cxtKey);
	  ele._private.styleCxtKey = cxtKey;
	  return {
	    key: cxtKey,
	    diffPropNames: diffProps,
	    empty: diffProps.length === 0
	  };
	}; // gets a computed ele style object based on matched contexts


	styfn.getContextStyle = function (cxtMeta) {
	  var cxtKey = cxtMeta.key;
	  var self = this;
	  var cxtStyles = this._private.contextStyles = this._private.contextStyles || {}; // if already computed style, returned cached copy

	  if (cxtStyles[cxtKey]) {
	    return cxtStyles[cxtKey];
	  }

	  var style = {
	    _private: {
	      key: cxtKey
	    }
	  };

	  for (var i = 0; i < self.length; i++) {
	    var cxt = self[i];
	    var hasCxt = cxtKey[i] === TRUE;

	    if (!hasCxt) {
	      continue;
	    }

	    for (var j = 0; j < cxt.properties.length; j++) {
	      var prop = cxt.properties[j];
	      style[prop.name] = prop;
	    }
	  }

	  cxtStyles[cxtKey] = style;
	  return style;
	};

	styfn.applyContextStyle = function (cxtMeta, cxtStyle, ele) {
	  var self = this;
	  var diffProps = cxtMeta.diffPropNames;
	  var retDiffProps = {};
	  var types = self.types;

	  for (var i = 0; i < diffProps.length; i++) {
	    var diffPropName = diffProps[i];
	    var cxtProp = cxtStyle[diffPropName];
	    var eleProp = ele.pstyle(diffPropName);

	    if (!cxtProp) {
	      // no context prop means delete
	      if (!eleProp) {
	        continue; // no existing prop means nothing needs to be removed
	        // nb affects initial application on mapped values like control-point-distances
	      } else if (eleProp.bypass) {
	        cxtProp = {
	          name: diffPropName,
	          deleteBypassed: true
	        };
	      } else {
	        cxtProp = {
	          name: diffPropName,
	          "delete": true
	        };
	      }
	    } // save cycles when the context prop doesn't need to be applied


	    if (eleProp === cxtProp) {
	      continue;
	    } // save cycles when a mapped context prop doesn't need to be applied


	    if (cxtProp.mapped === types.fn // context prop is function mapper
	    && eleProp != null // some props can be null even by default (e.g. a prop that overrides another one)
	    && eleProp.mapping != null // ele prop is a concrete value from from a mapper
	    && eleProp.mapping.value === cxtProp.value // the current prop on the ele is a flat prop value for the function mapper
	    ) {
	        // NB don't write to cxtProp, as it's shared among eles (stored in stylesheet)
	        var mapping = eleProp.mapping; // can write to mapping, as it's a per-ele copy

	        var fnValue = mapping.fnValue = cxtProp.value(ele); // temporarily cache the value in case of a miss

	        if (fnValue === mapping.prevFnValue) {
	          continue;
	        }
	      }

	    var retDiffProp = retDiffProps[diffPropName] = {
	      prev: eleProp
	    };
	    self.applyParsedProperty(ele, cxtProp);
	    retDiffProp.next = ele.pstyle(diffPropName);

	    if (retDiffProp.next && retDiffProp.next.bypass) {
	      retDiffProp.next = retDiffProp.next.bypassed;
	    }
	  }

	  return {
	    diffProps: retDiffProps
	  };
	};

	styfn.updateStyleHints = function (ele) {
	  var _p = ele._private;
	  var self = this;
	  var propNames = self.propertyGroupNames;
	  var propGrKeys = self.propertyGroupKeys;

	  var propHash = function propHash(ele, propNames, seedKey) {
	    return self.getPropertiesHash(ele, propNames, seedKey);
	  };

	  var oldStyleKey = _p.styleKey;

	  if (ele.removed()) {
	    return false;
	  }

	  var isNode = _p.group === 'nodes'; // get the style key hashes per prop group
	  // but lazily -- only use non-default prop values to reduce the number of hashes
	  //

	  var overriddenStyles = ele._private.style;
	  propNames = Object.keys(overriddenStyles);

	  for (var i = 0; i < propGrKeys.length; i++) {
	    var grKey = propGrKeys[i];
	    _p.styleKeys[grKey] = 0;
	  }

	  var updateGrKey = function updateGrKey(val, grKey) {
	    return _p.styleKeys[grKey] = hashInt(val, _p.styleKeys[grKey]);
	  };

	  var updateGrKeyWStr = function updateGrKeyWStr(strVal, grKey) {
	    for (var j = 0; j < strVal.length; j++) {
	      updateGrKey(strVal.charCodeAt(j), grKey);
	    }
	  }; // - hashing works on 32 bit ints b/c we use bitwise ops
	  // - small numbers get cut off (e.g. 0.123 is seen as 0 by the hashing function)
	  // - raise up small numbers so more significant digits are seen by hashing
	  // - make small numbers larger than a normal value to avoid collisions
	  // - works in practice and it's relatively cheap


	  var N = 2000000000;

	  var cleanNum = function cleanNum(val) {
	    return -128 < val && val < 128 && Math.floor(val) !== val ? N - (val * 1024 | 0) : val;
	  };

	  for (var _i = 0; _i < propNames.length; _i++) {
	    var name = propNames[_i];
	    var parsedProp = overriddenStyles[name];

	    if (parsedProp == null) {
	      continue;
	    }

	    var propInfo = this.properties[name];
	    var type = propInfo.type;
	    var _grKey = propInfo.groupKey;
	    var normalizedNumberVal = void 0;

	    if (propInfo.hashOverride != null) {
	      normalizedNumberVal = propInfo.hashOverride(ele, parsedProp);
	    } else if (parsedProp.pfValue != null) {
	      normalizedNumberVal = parsedProp.pfValue;
	    } // might not be a number if it allows enums


	    var numberVal = propInfo.enums == null ? parsedProp.value : null;
	    var haveNormNum = normalizedNumberVal != null;
	    var haveUnitedNum = numberVal != null;
	    var haveNum = haveNormNum || haveUnitedNum;
	    var units = parsedProp.units; // numbers are cheaper to hash than strings
	    // 1 hash op vs n hash ops (for length n string)

	    if (type.number && haveNum) {
	      var v = haveNormNum ? normalizedNumberVal : numberVal;

	      if (type.multiple) {
	        for (var _i2 = 0; _i2 < v.length; _i2++) {
	          updateGrKey(cleanNum(v[_i2]), _grKey);
	        }
	      } else {
	        updateGrKey(cleanNum(v), _grKey);
	      }

	      if (!haveNormNum && units != null) {
	        updateGrKeyWStr(units, _grKey);
	      }
	    } else {
	      updateGrKeyWStr(parsedProp.strValue, _grKey);
	    }
	  } // overall style key
	  //


	  var hash = 0;

	  for (var _i3 = 0; _i3 < propGrKeys.length; _i3++) {
	    var _grKey2 = propGrKeys[_i3];
	    var grHash = _p.styleKeys[_grKey2];
	    hash = hashInt(grHash, hash);
	  }

	  _p.styleKey = hash; // label dims
	  //

	  var labelDimsKey = _p.labelDimsKey = _p.styleKeys.labelDimensions;
	  _p.labelKey = propHash(ele, ['label'], labelDimsKey);
	  _p.labelStyleKey = hashInt(_p.styleKeys.commonLabel, _p.labelKey);

	  if (!isNode) {
	    _p.sourceLabelKey = propHash(ele, ['source-label'], labelDimsKey);
	    _p.sourceLabelStyleKey = hashInt(_p.styleKeys.commonLabel, _p.sourceLabelKey);
	    _p.targetLabelKey = propHash(ele, ['target-label'], labelDimsKey);
	    _p.targetLabelStyleKey = hashInt(_p.styleKeys.commonLabel, _p.targetLabelKey);
	  } // node
	  //


	  if (isNode) {
	    var _p$styleKeys = _p.styleKeys,
	        nodeBody = _p$styleKeys.nodeBody,
	        nodeBorder = _p$styleKeys.nodeBorder,
	        backgroundImage = _p$styleKeys.backgroundImage,
	        compound = _p$styleKeys.compound,
	        pie = _p$styleKeys.pie;
	    _p.nodeKey = hashIntsArray([nodeBorder, backgroundImage, compound, pie], nodeBody);
	    _p.hasPie = pie != 0;
	  }

	  return oldStyleKey !== _p.styleKey;
	};

	styfn.clearStyleHints = function (ele) {
	  var _p = ele._private;
	  _p.styleKeys = {};
	  _p.styleKey = null;
	  _p.labelKey = null;
	  _p.labelStyleKey = null;
	  _p.sourceLabelKey = null;
	  _p.sourceLabelStyleKey = null;
	  _p.targetLabelKey = null;
	  _p.targetLabelStyleKey = null;
	  _p.nodeKey = null;
	  _p.hasPie = null;
	}; // apply a property to the style (for internal use)
	// returns whether application was successful
	//
	// now, this function flattens the property, and here's how:
	//
	// for parsedProp:{ bypass: true, deleteBypass: true }
	// no property is generated, instead the bypass property in the
	// element's style is replaced by what's pointed to by the `bypassed`
	// field in the bypass property (i.e. restoring the property the
	// bypass was overriding)
	//
	// for parsedProp:{ mapped: truthy }
	// the generated flattenedProp:{ mapping: prop }
	//
	// for parsedProp:{ bypass: true }
	// the generated flattenedProp:{ bypassed: parsedProp }


	styfn.applyParsedProperty = function (ele, parsedProp) {
	  var self = this;
	  var prop = parsedProp;
	  var style = ele._private.style;
	  var flatProp;
	  var types = self.types;
	  var type = self.properties[prop.name].type;
	  var propIsBypass = prop.bypass;
	  var origProp = style[prop.name];
	  var origPropIsBypass = origProp && origProp.bypass;
	  var _p = ele._private;
	  var flatPropMapping = 'mapping';

	  var getVal = function getVal(p) {
	    if (p == null) {
	      return null;
	    } else if (p.pfValue != null) {
	      return p.pfValue;
	    } else {
	      return p.value;
	    }
	  };

	  var checkTriggers = function checkTriggers() {
	    var fromVal = getVal(origProp);
	    var toVal = getVal(prop);
	    self.checkTriggers(ele, prop.name, fromVal, toVal);
	  }; // edge sanity checks to prevent the client from making serious mistakes


	  if (parsedProp.name === 'curve-style' && ele.isEdge() && ( // loops must be bundled beziers
	  parsedProp.value !== 'bezier' && ele.isLoop() || // edges connected to compound nodes can not be haystacks
	  parsedProp.value === 'haystack' && (ele.source().isParent() || ele.target().isParent()))) {
	    prop = parsedProp = this.parse(parsedProp.name, 'bezier', propIsBypass);
	  }

	  if (prop["delete"]) {
	    // delete the property and use the default value on falsey value
	    style[prop.name] = undefined;
	    checkTriggers();
	    return true;
	  }

	  if (prop.deleteBypassed) {
	    // delete the property that the
	    if (!origProp) {
	      checkTriggers();
	      return true; // can't delete if no prop
	    } else if (origProp.bypass) {
	      // delete bypassed
	      origProp.bypassed = undefined;
	      checkTriggers();
	      return true;
	    } else {
	      return false; // we're unsuccessful deleting the bypassed
	    }
	  } // check if we need to delete the current bypass


	  if (prop.deleteBypass) {
	    // then this property is just here to indicate we need to delete
	    if (!origProp) {
	      checkTriggers();
	      return true; // property is already not defined
	    } else if (origProp.bypass) {
	      // then replace the bypass property with the original
	      // because the bypassed property was already applied (and therefore parsed), we can just replace it (no reapplying necessary)
	      style[prop.name] = origProp.bypassed;
	      checkTriggers();
	      return true;
	    } else {
	      return false; // we're unsuccessful deleting the bypass
	    }
	  }

	  var printMappingErr = function printMappingErr() {
	    warn('Do not assign mappings to elements without corresponding data (i.e. ele `' + ele.id() + '` has no mapping for property `' + prop.name + '` with data field `' + prop.field + '`); try a `[' + prop.field + ']` selector to limit scope to elements with `' + prop.field + '` defined');
	  }; // put the property in the style objects


	  switch (prop.mapped) {
	    // flatten the property if mapped
	    case types.mapData:
	      {
	        // flatten the field (e.g. data.foo.bar)
	        var fields = prop.field.split('.');
	        var fieldVal = _p.data;

	        for (var i = 0; i < fields.length && fieldVal; i++) {
	          var field = fields[i];
	          fieldVal = fieldVal[field];
	        }

	        if (fieldVal == null) {
	          printMappingErr();
	          return false;
	        }

	        var percent;

	        if (!number(fieldVal)) {
	          // then don't apply and fall back on the existing style
	          warn('Do not use continuous mappers without specifying numeric data (i.e. `' + prop.field + ': ' + fieldVal + '` for `' + ele.id() + '` is non-numeric)');
	          return false;
	        } else {
	          var fieldWidth = prop.fieldMax - prop.fieldMin;

	          if (fieldWidth === 0) {
	            // safety check -- not strictly necessary as no props of zero range should be passed here
	            percent = 0;
	          } else {
	            percent = (fieldVal - prop.fieldMin) / fieldWidth;
	          }
	        } // make sure to bound percent value


	        if (percent < 0) {
	          percent = 0;
	        } else if (percent > 1) {
	          percent = 1;
	        }

	        if (type.color) {
	          var r1 = prop.valueMin[0];
	          var r2 = prop.valueMax[0];
	          var g1 = prop.valueMin[1];
	          var g2 = prop.valueMax[1];
	          var b1 = prop.valueMin[2];
	          var b2 = prop.valueMax[2];
	          var a1 = prop.valueMin[3] == null ? 1 : prop.valueMin[3];
	          var a2 = prop.valueMax[3] == null ? 1 : prop.valueMax[3];
	          var clr = [Math.round(r1 + (r2 - r1) * percent), Math.round(g1 + (g2 - g1) * percent), Math.round(b1 + (b2 - b1) * percent), Math.round(a1 + (a2 - a1) * percent)];
	          flatProp = {
	            // colours are simple, so just create the flat property instead of expensive string parsing
	            bypass: prop.bypass,
	            // we're a bypass if the mapping property is a bypass
	            name: prop.name,
	            value: clr,
	            strValue: 'rgb(' + clr[0] + ', ' + clr[1] + ', ' + clr[2] + ')'
	          };
	        } else if (type.number) {
	          var calcValue = prop.valueMin + (prop.valueMax - prop.valueMin) * percent;
	          flatProp = this.parse(prop.name, calcValue, prop.bypass, flatPropMapping);
	        } else {
	          return false; // can only map to colours and numbers
	        }

	        if (!flatProp) {
	          // if we can't flatten the property, then don't apply the property and fall back on the existing style
	          printMappingErr();
	          return false;
	        }

	        flatProp.mapping = prop; // keep a reference to the mapping

	        prop = flatProp; // the flattened (mapped) property is the one we want

	        break;
	      }
	    // direct mapping

	    case types.data:
	      {
	        // flatten the field (e.g. data.foo.bar)
	        var _fields = prop.field.split('.');

	        var _fieldVal = _p.data;

	        for (var _i4 = 0; _i4 < _fields.length && _fieldVal; _i4++) {
	          var _field = _fields[_i4];
	          _fieldVal = _fieldVal[_field];
	        }

	        if (_fieldVal != null) {
	          flatProp = this.parse(prop.name, _fieldVal, prop.bypass, flatPropMapping);
	        }

	        if (!flatProp) {
	          // if we can't flatten the property, then don't apply and fall back on the existing style
	          printMappingErr();
	          return false;
	        }

	        flatProp.mapping = prop; // keep a reference to the mapping

	        prop = flatProp; // the flattened (mapped) property is the one we want

	        break;
	      }

	    case types.fn:
	      {
	        var fn = prop.value;
	        var fnRetVal = prop.fnValue != null ? prop.fnValue : fn(ele); // check for cached value before calling function

	        prop.prevFnValue = fnRetVal;

	        if (fnRetVal == null) {
	          warn('Custom function mappers may not return null (i.e. `' + prop.name + '` for ele `' + ele.id() + '` is null)');
	          return false;
	        }

	        flatProp = this.parse(prop.name, fnRetVal, prop.bypass, flatPropMapping);

	        if (!flatProp) {
	          warn('Custom function mappers may not return invalid values for the property type (i.e. `' + prop.name + '` for ele `' + ele.id() + '` is invalid)');
	          return false;
	        }

	        flatProp.mapping = copy(prop); // keep a reference to the mapping

	        prop = flatProp; // the flattened (mapped) property is the one we want

	        break;
	      }

	    case undefined:
	      break;
	    // just set the property

	    default:
	      return false;
	    // not a valid mapping
	  } // if the property is a bypass property, then link the resultant property to the original one


	  if (propIsBypass) {
	    if (origPropIsBypass) {
	      // then this bypass overrides the existing one
	      prop.bypassed = origProp.bypassed; // steal bypassed prop from old bypass
	    } else {
	      // then link the orig prop to the new bypass
	      prop.bypassed = origProp;
	    }

	    style[prop.name] = prop; // and set
	  } else {
	    // prop is not bypass
	    if (origPropIsBypass) {
	      // then keep the orig prop (since it's a bypass) and link to the new prop
	      origProp.bypassed = prop;
	    } else {
	      // then just replace the old prop with the new one
	      style[prop.name] = prop;
	    }
	  }

	  checkTriggers();
	  return true;
	};

	styfn.cleanElements = function (eles, keepBypasses) {
	  for (var i = 0; i < eles.length; i++) {
	    var ele = eles[i];
	    this.clearStyleHints(ele);
	    ele.dirtyCompoundBoundsCache();
	    ele.dirtyBoundingBoxCache();

	    if (!keepBypasses) {
	      ele._private.style = {};
	    } else {
	      var style = ele._private.style;
	      var propNames = Object.keys(style);

	      for (var j = 0; j < propNames.length; j++) {
	        var propName = propNames[j];
	        var eleProp = style[propName];

	        if (eleProp != null) {
	          if (eleProp.bypass) {
	            eleProp.bypassed = null;
	          } else {
	            style[propName] = null;
	          }
	        }
	      }
	    }
	  }
	}; // updates the visual style for all elements (useful for manual style modification after init)


	styfn.update = function () {
	  var cy = this._private.cy;
	  var eles = cy.mutableElements();
	  eles.updateStyle();
	}; // diffProps : { name => { prev, next } }


	styfn.updateTransitions = function (ele, diffProps) {
	  var self = this;
	  var _p = ele._private;
	  var props = ele.pstyle('transition-property').value;
	  var duration = ele.pstyle('transition-duration').pfValue;
	  var delay = ele.pstyle('transition-delay').pfValue;

	  if (props.length > 0 && duration > 0) {
	    var style = {}; // build up the style to animate towards

	    var anyPrev = false;

	    for (var i = 0; i < props.length; i++) {
	      var prop = props[i];
	      var styProp = ele.pstyle(prop);
	      var diffProp = diffProps[prop];

	      if (!diffProp) {
	        continue;
	      }

	      var prevProp = diffProp.prev;
	      var fromProp = prevProp;
	      var toProp = diffProp.next != null ? diffProp.next : styProp;
	      var diff = false;
	      var initVal = void 0;
	      var initDt = 0.000001; // delta time % value for initVal (allows animating out of init zero opacity)

	      if (!fromProp) {
	        continue;
	      } // consider px values


	      if (number(fromProp.pfValue) && number(toProp.pfValue)) {
	        diff = toProp.pfValue - fromProp.pfValue; // nonzero is truthy

	        initVal = fromProp.pfValue + initDt * diff; // consider numerical values
	      } else if (number(fromProp.value) && number(toProp.value)) {
	        diff = toProp.value - fromProp.value; // nonzero is truthy

	        initVal = fromProp.value + initDt * diff; // consider colour values
	      } else if (array(fromProp.value) && array(toProp.value)) {
	        diff = fromProp.value[0] !== toProp.value[0] || fromProp.value[1] !== toProp.value[1] || fromProp.value[2] !== toProp.value[2];
	        initVal = fromProp.strValue;
	      } // the previous value is good for an animation only if it's different


	      if (diff) {
	        style[prop] = toProp.strValue; // to val

	        this.applyBypass(ele, prop, initVal); // from val

	        anyPrev = true;
	      }
	    } // end if props allow ani
	    // can't transition if there's nothing previous to transition from


	    if (!anyPrev) {
	      return;
	    }

	    _p.transitioning = true;
	    new Promise$1(function (resolve) {
	      if (delay > 0) {
	        ele.delayAnimation(delay).play().promise().then(resolve);
	      } else {
	        resolve();
	      }
	    }).then(function () {
	      return ele.animation({
	        style: style,
	        duration: duration,
	        easing: ele.pstyle('transition-timing-function').value,
	        queue: false
	      }).play().promise();
	    }).then(function () {
	      // if( !isBypass ){
	      self.removeBypasses(ele, props);
	      ele.emitAndNotify('style'); // }

	      _p.transitioning = false;
	    });
	  } else if (_p.transitioning) {
	    this.removeBypasses(ele, props);
	    ele.emitAndNotify('style');
	    _p.transitioning = false;
	  }
	};

	styfn.checkTrigger = function (ele, name, fromValue, toValue, getTrigger, onTrigger) {
	  var prop = this.properties[name];
	  var triggerCheck = getTrigger(prop);

	  if (triggerCheck != null && triggerCheck(fromValue, toValue)) {
	    onTrigger(prop);
	  }
	};

	styfn.checkZOrderTrigger = function (ele, name, fromValue, toValue) {
	  var _this = this;

	  this.checkTrigger(ele, name, fromValue, toValue, function (prop) {
	    return prop.triggersZOrder;
	  }, function () {
	    _this._private.cy.notify('zorder', ele);
	  });
	};

	styfn.checkBoundsTrigger = function (ele, name, fromValue, toValue) {
	  this.checkTrigger(ele, name, fromValue, toValue, function (prop) {
	    return prop.triggersBounds;
	  }, function (prop) {
	    ele.dirtyCompoundBoundsCache();
	    ele.dirtyBoundingBoxCache(); // if the prop change makes the bb of pll bezier edges invalid,
	    // then dirty the pll edge bb cache as well

	    if ( // only for beziers -- so performance of other edges isn't affected
	    (ele.pstyle('curve-style').value === 'bezier' // already a bezier
	    // was just now changed to or from a bezier:
	    || name === 'curve-style' && (fromValue === 'bezier' || toValue === 'bezier')) && prop.triggersBoundsOfParallelBeziers) {
	      ele.parallelEdges().forEach(function (pllEdge) {
	        if (pllEdge.isBundledBezier()) {
	          pllEdge.dirtyBoundingBoxCache();
	        }
	      });
	    }
	  });
	};

	styfn.checkTriggers = function (ele, name, fromValue, toValue) {
	  ele.dirtyStyleCache();
	  this.checkZOrderTrigger(ele, name, fromValue, toValue);
	  this.checkBoundsTrigger(ele, name, fromValue, toValue);
	};

	var styfn$1 = {}; // bypasses are applied to an existing style on an element, and just tacked on temporarily
	// returns true iff application was successful for at least 1 specified property

	styfn$1.applyBypass = function (eles, name, value, updateTransitions) {
	  var self = this;
	  var props = [];
	  var isBypass = true; // put all the properties (can specify one or many) in an array after parsing them

	  if (name === '*' || name === '**') {
	    // apply to all property names
	    if (value !== undefined) {
	      for (var i = 0; i < self.properties.length; i++) {
	        var prop = self.properties[i];
	        var _name = prop.name;
	        var parsedProp = this.parse(_name, value, true);

	        if (parsedProp) {
	          props.push(parsedProp);
	        }
	      }
	    }
	  } else if (string(name)) {
	    // then parse the single property
	    var _parsedProp = this.parse(name, value, true);

	    if (_parsedProp) {
	      props.push(_parsedProp);
	    }
	  } else if (plainObject(name)) {
	    // then parse each property
	    var specifiedProps = name;
	    updateTransitions = value;
	    var names = Object.keys(specifiedProps);

	    for (var _i = 0; _i < names.length; _i++) {
	      var _name2 = names[_i];
	      var _value = specifiedProps[_name2];

	      if (_value === undefined) {
	        // try camel case name too
	        _value = specifiedProps[dash2camel(_name2)];
	      }

	      if (_value !== undefined) {
	        var _parsedProp2 = this.parse(_name2, _value, true);

	        if (_parsedProp2) {
	          props.push(_parsedProp2);
	        }
	      }
	    }
	  } else {
	    // can't do anything without well defined properties
	    return false;
	  } // we've failed if there are no valid properties


	  if (props.length === 0) {
	    return false;
	  } // now, apply the bypass properties on the elements


	  var ret = false; // return true if at least one succesful bypass applied

	  for (var _i2 = 0; _i2 < eles.length; _i2++) {
	    // for each ele
	    var ele = eles[_i2];
	    var diffProps = {};
	    var diffProp = void 0;

	    for (var j = 0; j < props.length; j++) {
	      // for each prop
	      var _prop = props[j];

	      if (updateTransitions) {
	        var prevProp = ele.pstyle(_prop.name);
	        diffProp = diffProps[_prop.name] = {
	          prev: prevProp
	        };
	      }

	      ret = this.applyParsedProperty(ele, _prop) || ret;

	      if (updateTransitions) {
	        diffProp.next = ele.pstyle(_prop.name);
	      }
	    } // for props


	    if (ret) {
	      this.updateStyleHints(ele);
	    }

	    if (updateTransitions) {
	      this.updateTransitions(ele, diffProps, isBypass);
	    }
	  } // for eles


	  return ret;
	}; // only useful in specific cases like animation


	styfn$1.overrideBypass = function (eles, name, value) {
	  name = camel2dash(name);

	  for (var i = 0; i < eles.length; i++) {
	    var ele = eles[i];
	    var prop = ele._private.style[name];
	    var type = this.properties[name].type;
	    var isColor = type.color;
	    var isMulti = type.mutiple;
	    var oldValue = !prop ? null : prop.pfValue != null ? prop.pfValue : prop.value;

	    if (!prop || !prop.bypass) {
	      // need a bypass if one doesn't exist
	      this.applyBypass(ele, name, value);
	    } else {
	      prop.value = value;

	      if (prop.pfValue != null) {
	        prop.pfValue = value;
	      }

	      if (isColor) {
	        prop.strValue = 'rgb(' + value.join(',') + ')';
	      } else if (isMulti) {
	        prop.strValue = value.join(' ');
	      } else {
	        prop.strValue = '' + value;
	      }

	      this.updateStyleHints(ele);
	    }

	    this.checkTriggers(ele, name, oldValue, value);
	  }
	};

	styfn$1.removeAllBypasses = function (eles, updateTransitions) {
	  return this.removeBypasses(eles, this.propertyNames, updateTransitions);
	};

	styfn$1.removeBypasses = function (eles, props, updateTransitions) {
	  var isBypass = true;

	  for (var j = 0; j < eles.length; j++) {
	    var ele = eles[j];
	    var diffProps = {};

	    for (var i = 0; i < props.length; i++) {
	      var name = props[i];
	      var prop = this.properties[name];
	      var prevProp = ele.pstyle(prop.name);

	      if (!prevProp || !prevProp.bypass) {
	        // if a bypass doesn't exist for the prop, nothing needs to be removed
	        continue;
	      }

	      var value = ''; // empty => remove bypass

	      var parsedProp = this.parse(name, value, true);
	      var diffProp = diffProps[prop.name] = {
	        prev: prevProp
	      };
	      this.applyParsedProperty(ele, parsedProp);
	      diffProp.next = ele.pstyle(prop.name);
	    } // for props


	    this.updateStyleHints(ele);

	    if (updateTransitions) {
	      this.updateTransitions(ele, diffProps, isBypass);
	    }
	  } // for eles

	};

	var styfn$2 = {}; // gets what an em size corresponds to in pixels relative to a dom element

	styfn$2.getEmSizeInPixels = function () {
	  var px = this.containerCss('font-size');

	  if (px != null) {
	    return parseFloat(px);
	  } else {
	    return 1; // for headless
	  }
	}; // gets css property from the core container


	styfn$2.containerCss = function (propName) {
	  var cy = this._private.cy;
	  var domElement = cy.container();

	  if (window$1 && domElement && window$1.getComputedStyle) {
	    return window$1.getComputedStyle(domElement).getPropertyValue(propName);
	  }
	};

	var styfn$3 = {}; // gets the rendered style for an element

	styfn$3.getRenderedStyle = function (ele, prop) {
	  if (prop) {
	    return this.getStylePropertyValue(ele, prop, true);
	  } else {
	    return this.getRawStyle(ele, true);
	  }
	}; // gets the raw style for an element


	styfn$3.getRawStyle = function (ele, isRenderedVal) {
	  var self = this;
	  ele = ele[0]; // insure it's an element

	  if (ele) {
	    var rstyle = {};

	    for (var i = 0; i < self.properties.length; i++) {
	      var prop = self.properties[i];
	      var val = self.getStylePropertyValue(ele, prop.name, isRenderedVal);

	      if (val != null) {
	        rstyle[prop.name] = val;
	        rstyle[dash2camel(prop.name)] = val;
	      }
	    }

	    return rstyle;
	  }
	};

	styfn$3.getIndexedStyle = function (ele, property, subproperty, index) {
	  var pstyle = ele.pstyle(property)[subproperty][index];
	  return pstyle != null ? pstyle : ele.cy().style().getDefaultProperty(property)[subproperty][0];
	};

	styfn$3.getStylePropertyValue = function (ele, propName, isRenderedVal) {
	  var self = this;
	  ele = ele[0]; // insure it's an element

	  if (ele) {
	    var prop = self.properties[propName];

	    if (prop.alias) {
	      prop = prop.pointsTo;
	    }

	    var type = prop.type;
	    var styleProp = ele.pstyle(prop.name);

	    if (styleProp) {
	      var value = styleProp.value,
	          units = styleProp.units,
	          strValue = styleProp.strValue;

	      if (isRenderedVal && type.number && value != null && number(value)) {
	        var zoom = ele.cy().zoom();

	        var getRenderedValue = function getRenderedValue(val) {
	          return val * zoom;
	        };

	        var getValueStringWithUnits = function getValueStringWithUnits(val, units) {
	          return getRenderedValue(val) + units;
	        };

	        var isArrayValue = array(value);
	        var haveUnits = isArrayValue ? units.every(function (u) {
	          return u != null;
	        }) : units != null;

	        if (haveUnits) {
	          if (isArrayValue) {
	            return value.map(function (v, i) {
	              return getValueStringWithUnits(v, units[i]);
	            }).join(' ');
	          } else {
	            return getValueStringWithUnits(value, units);
	          }
	        } else {
	          if (isArrayValue) {
	            return value.map(function (v) {
	              return string(v) ? v : '' + getRenderedValue(v);
	            }).join(' ');
	          } else {
	            return '' + getRenderedValue(value);
	          }
	        }
	      } else if (strValue != null) {
	        return strValue;
	      }
	    }

	    return null;
	  }
	};

	styfn$3.getAnimationStartStyle = function (ele, aniProps) {
	  var rstyle = {};

	  for (var i = 0; i < aniProps.length; i++) {
	    var aniProp = aniProps[i];
	    var name = aniProp.name;
	    var styleProp = ele.pstyle(name);

	    if (styleProp !== undefined) {
	      // then make a prop of it
	      if (plainObject(styleProp)) {
	        styleProp = this.parse(name, styleProp.strValue);
	      } else {
	        styleProp = this.parse(name, styleProp);
	      }
	    }

	    if (styleProp) {
	      rstyle[name] = styleProp;
	    }
	  }

	  return rstyle;
	};

	styfn$3.getPropsList = function (propsObj) {
	  var self = this;
	  var rstyle = [];
	  var style = propsObj;
	  var props = self.properties;

	  if (style) {
	    var names = Object.keys(style);

	    for (var i = 0; i < names.length; i++) {
	      var name = names[i];
	      var val = style[name];
	      var prop = props[name] || props[camel2dash(name)];
	      var styleProp = this.parse(prop.name, val);

	      if (styleProp) {
	        rstyle.push(styleProp);
	      }
	    }
	  }

	  return rstyle;
	};

	styfn$3.getNonDefaultPropertiesHash = function (ele, propNames, seed) {
	  var hash = seed;
	  var name, val, strVal, chVal;
	  var i, j;

	  for (i = 0; i < propNames.length; i++) {
	    name = propNames[i];
	    val = ele.pstyle(name, false);

	    if (val == null) {
	      continue;
	    } else if (val.pfValue != null) {
	      hash = hashInt(chVal, hash);
	    } else {
	      strVal = val.strValue;

	      for (j = 0; j < strVal.length; j++) {
	        chVal = strVal.charCodeAt(j);
	        hash = hashInt(chVal, hash);
	      }
	    }
	  }

	  return hash;
	};

	styfn$3.getPropertiesHash = styfn$3.getNonDefaultPropertiesHash;

	var styfn$4 = {};

	styfn$4.appendFromJson = function (json) {
	  var style = this;

	  for (var i = 0; i < json.length; i++) {
	    var context = json[i];
	    var selector = context.selector;
	    var props = context.style || context.css;
	    var names = Object.keys(props);
	    style.selector(selector); // apply selector

	    for (var j = 0; j < names.length; j++) {
	      var name = names[j];
	      var value = props[name];
	      style.css(name, value); // apply property
	    }
	  }

	  return style;
	}; // accessible cy.style() function


	styfn$4.fromJson = function (json) {
	  var style = this;
	  style.resetToDefault();
	  style.appendFromJson(json);
	  return style;
	}; // get json from cy.style() api


	styfn$4.json = function () {
	  var json = [];

	  for (var i = this.defaultLength; i < this.length; i++) {
	    var cxt = this[i];
	    var selector = cxt.selector;
	    var props = cxt.properties;
	    var css = {};

	    for (var j = 0; j < props.length; j++) {
	      var prop = props[j];
	      css[prop.name] = prop.strValue;
	    }

	    json.push({
	      selector: !selector ? 'core' : selector.toString(),
	      style: css
	    });
	  }

	  return json;
	};

	var styfn$5 = {};

	styfn$5.appendFromString = function (string) {
	  var self = this;
	  var style = this;
	  var remaining = '' + string;
	  var selAndBlockStr;
	  var blockRem;
	  var propAndValStr; // remove comments from the style string

	  remaining = remaining.replace(/[/][*](\s|.)+?[*][/]/g, '');

	  function removeSelAndBlockFromRemaining() {
	    // remove the parsed selector and block from the remaining text to parse
	    if (remaining.length > selAndBlockStr.length) {
	      remaining = remaining.substr(selAndBlockStr.length);
	    } else {
	      remaining = '';
	    }
	  }

	  function removePropAndValFromRem() {
	    // remove the parsed property and value from the remaining block text to parse
	    if (blockRem.length > propAndValStr.length) {
	      blockRem = blockRem.substr(propAndValStr.length);
	    } else {
	      blockRem = '';
	    }
	  }

	  for (;;) {
	    var nothingLeftToParse = remaining.match(/^\s*$/);

	    if (nothingLeftToParse) {
	      break;
	    }

	    var selAndBlock = remaining.match(/^\s*((?:.|\s)+?)\s*\{((?:.|\s)+?)\}/);

	    if (!selAndBlock) {
	      warn('Halting stylesheet parsing: String stylesheet contains more to parse but no selector and block found in: ' + remaining);
	      break;
	    }

	    selAndBlockStr = selAndBlock[0]; // parse the selector

	    var selectorStr = selAndBlock[1];

	    if (selectorStr !== 'core') {
	      var selector = new Selector(selectorStr);

	      if (selector.invalid) {
	        warn('Skipping parsing of block: Invalid selector found in string stylesheet: ' + selectorStr); // skip this selector and block

	        removeSelAndBlockFromRemaining();
	        continue;
	      }
	    } // parse the block of properties and values


	    var blockStr = selAndBlock[2];
	    var invalidBlock = false;
	    blockRem = blockStr;
	    var props = [];

	    for (;;) {
	      var _nothingLeftToParse = blockRem.match(/^\s*$/);

	      if (_nothingLeftToParse) {
	        break;
	      }

	      var propAndVal = blockRem.match(/^\s*(.+?)\s*:\s*(.+?)\s*;/);

	      if (!propAndVal) {
	        warn('Skipping parsing of block: Invalid formatting of style property and value definitions found in:' + blockStr);
	        invalidBlock = true;
	        break;
	      }

	      propAndValStr = propAndVal[0];
	      var propStr = propAndVal[1];
	      var valStr = propAndVal[2];
	      var prop = self.properties[propStr];

	      if (!prop) {
	        warn('Skipping property: Invalid property name in: ' + propAndValStr); // skip this property in the block

	        removePropAndValFromRem();
	        continue;
	      }

	      var parsedProp = style.parse(propStr, valStr);

	      if (!parsedProp) {
	        warn('Skipping property: Invalid property definition in: ' + propAndValStr); // skip this property in the block

	        removePropAndValFromRem();
	        continue;
	      }

	      props.push({
	        name: propStr,
	        val: valStr
	      });
	      removePropAndValFromRem();
	    }

	    if (invalidBlock) {
	      removeSelAndBlockFromRemaining();
	      break;
	    } // put the parsed block in the style


	    style.selector(selectorStr);

	    for (var i = 0; i < props.length; i++) {
	      var _prop = props[i];
	      style.css(_prop.name, _prop.val);
	    }

	    removeSelAndBlockFromRemaining();
	  }

	  return style;
	};

	styfn$5.fromString = function (string) {
	  var style = this;
	  style.resetToDefault();
	  style.appendFromString(string);
	  return style;
	};

	var styfn$6 = {};

	(function () {
	  var number = number$1;
	  var rgba = rgbaNoBackRefs;
	  var hsla = hslaNoBackRefs;
	  var hex3$1 = hex3;
	  var hex6$1 = hex6;

	  var data = function data(prefix) {
	    return '^' + prefix + '\\s*\\(\\s*([\\w\\.]+)\\s*\\)$';
	  };

	  var mapData = function mapData(prefix) {
	    var mapArg = number + '|\\w+|' + rgba + '|' + hsla + '|' + hex3$1 + '|' + hex6$1;
	    return '^' + prefix + '\\s*\\(([\\w\\.]+)\\s*\\,\\s*(' + number + ')\\s*\\,\\s*(' + number + ')\\s*,\\s*(' + mapArg + ')\\s*\\,\\s*(' + mapArg + ')\\)$';
	  };

	  var urlRegexes = ['^url\\s*\\(\\s*[\'"]?(.+?)[\'"]?\\s*\\)$', '^(none)$', '^(.+)$']; // each visual style property has a type and needs to be validated according to it

	  styfn$6.types = {
	    time: {
	      number: true,
	      min: 0,
	      units: 's|ms',
	      implicitUnits: 'ms'
	    },
	    percent: {
	      number: true,
	      min: 0,
	      max: 100,
	      units: '%',
	      implicitUnits: '%'
	    },
	    percentages: {
	      number: true,
	      min: 0,
	      max: 100,
	      units: '%',
	      implicitUnits: '%',
	      multiple: true
	    },
	    zeroOneNumber: {
	      number: true,
	      min: 0,
	      max: 1,
	      unitless: true
	    },
	    zeroOneNumbers: {
	      number: true,
	      min: 0,
	      max: 1,
	      unitless: true,
	      multiple: true
	    },
	    nOneOneNumber: {
	      number: true,
	      min: -1,
	      max: 1,
	      unitless: true
	    },
	    nonNegativeInt: {
	      number: true,
	      min: 0,
	      integer: true,
	      unitless: true
	    },
	    position: {
	      enums: ['parent', 'origin']
	    },
	    nodeSize: {
	      number: true,
	      min: 0,
	      enums: ['label']
	    },
	    number: {
	      number: true,
	      unitless: true
	    },
	    numbers: {
	      number: true,
	      unitless: true,
	      multiple: true
	    },
	    positiveNumber: {
	      number: true,
	      unitless: true,
	      min: 0,
	      strictMin: true
	    },
	    size: {
	      number: true,
	      min: 0
	    },
	    bidirectionalSize: {
	      number: true
	    },
	    // allows negative
	    bidirectionalSizeMaybePercent: {
	      number: true,
	      allowPercent: true
	    },
	    // allows negative
	    bidirectionalSizes: {
	      number: true,
	      multiple: true
	    },
	    // allows negative
	    sizeMaybePercent: {
	      number: true,
	      min: 0,
	      allowPercent: true
	    },
	    axisDirection: {
	      enums: ['horizontal', 'leftward', 'rightward', 'vertical', 'upward', 'downward', 'auto']
	    },
	    paddingRelativeTo: {
	      enums: ['width', 'height', 'average', 'min', 'max']
	    },
	    bgWH: {
	      number: true,
	      min: 0,
	      allowPercent: true,
	      enums: ['auto'],
	      multiple: true
	    },
	    bgPos: {
	      number: true,
	      allowPercent: true,
	      multiple: true
	    },
	    bgRelativeTo: {
	      enums: ['inner', 'include-padding'],
	      multiple: true
	    },
	    bgRepeat: {
	      enums: ['repeat', 'repeat-x', 'repeat-y', 'no-repeat'],
	      multiple: true
	    },
	    bgFit: {
	      enums: ['none', 'contain', 'cover'],
	      multiple: true
	    },
	    bgCrossOrigin: {
	      enums: ['anonymous', 'use-credentials'],
	      multiple: true
	    },
	    bgClip: {
	      enums: ['none', 'node'],
	      multiple: true
	    },
	    color: {
	      color: true
	    },
	    colors: {
	      color: true,
	      multiple: true
	    },
	    fill: {
	      enums: ['solid', 'linear-gradient', 'radial-gradient']
	    },
	    bool: {
	      enums: ['yes', 'no']
	    },
	    lineStyle: {
	      enums: ['solid', 'dotted', 'dashed']
	    },
	    lineCap: {
	      enums: ['butt', 'round', 'square']
	    },
	    borderStyle: {
	      enums: ['solid', 'dotted', 'dashed', 'double']
	    },
	    curveStyle: {
	      enums: ['bezier', 'unbundled-bezier', 'haystack', 'segments', 'straight', 'taxi']
	    },
	    fontFamily: {
	      regex: '^([\\w- \\"]+(?:\\s*,\\s*[\\w- \\"]+)*)$'
	    },
	    fontStyle: {
	      enums: ['italic', 'normal', 'oblique']
	    },
	    fontWeight: {
	      enums: ['normal', 'bold', 'bolder', 'lighter', '100', '200', '300', '400', '500', '600', '800', '900', 100, 200, 300, 400, 500, 600, 700, 800, 900]
	    },
	    textDecoration: {
	      enums: ['none', 'underline', 'overline', 'line-through']
	    },
	    textTransform: {
	      enums: ['none', 'uppercase', 'lowercase']
	    },
	    textWrap: {
	      enums: ['none', 'wrap', 'ellipsis']
	    },
	    textOverflowWrap: {
	      enums: ['whitespace', 'anywhere']
	    },
	    textBackgroundShape: {
	      enums: ['rectangle', 'roundrectangle', 'round-rectangle']
	    },
	    nodeShape: {
	      enums: ['rectangle', 'roundrectangle', 'round-rectangle', 'cutrectangle', 'cut-rectangle', 'bottomroundrectangle', 'bottom-round-rectangle', 'barrel', 'ellipse', 'triangle', 'round-triangle', 'square', 'pentagon', 'round-pentagon', 'hexagon', 'round-hexagon', 'concavehexagon', 'concave-hexagon', 'heptagon', 'round-heptagon', 'octagon', 'round-octagon', 'tag', 'round-tag', 'star', 'diamond', 'round-diamond', 'vee', 'rhomboid', 'polygon']
	    },
	    compoundIncludeLabels: {
	      enums: ['include', 'exclude']
	    },
	    arrowShape: {
	      enums: ['tee', 'triangle', 'triangle-tee', 'triangle-cross', 'triangle-backcurve', 'vee', 'square', 'circle', 'diamond', 'chevron', 'none']
	    },
	    arrowFill: {
	      enums: ['filled', 'hollow']
	    },
	    display: {
	      enums: ['element', 'none']
	    },
	    visibility: {
	      enums: ['hidden', 'visible']
	    },
	    zCompoundDepth: {
	      enums: ['bottom', 'orphan', 'auto', 'top']
	    },
	    zIndexCompare: {
	      enums: ['auto', 'manual']
	    },
	    valign: {
	      enums: ['top', 'center', 'bottom']
	    },
	    halign: {
	      enums: ['left', 'center', 'right']
	    },
	    justification: {
	      enums: ['left', 'center', 'right', 'auto']
	    },
	    text: {
	      string: true
	    },
	    data: {
	      mapping: true,
	      regex: data('data')
	    },
	    layoutData: {
	      mapping: true,
	      regex: data('layoutData')
	    },
	    scratch: {
	      mapping: true,
	      regex: data('scratch')
	    },
	    mapData: {
	      mapping: true,
	      regex: mapData('mapData')
	    },
	    mapLayoutData: {
	      mapping: true,
	      regex: mapData('mapLayoutData')
	    },
	    mapScratch: {
	      mapping: true,
	      regex: mapData('mapScratch')
	    },
	    fn: {
	      mapping: true,
	      fn: true
	    },
	    url: {
	      regexes: urlRegexes,
	      singleRegexMatchValue: true
	    },
	    urls: {
	      regexes: urlRegexes,
	      singleRegexMatchValue: true,
	      multiple: true
	    },
	    propList: {
	      propList: true
	    },
	    angle: {
	      number: true,
	      units: 'deg|rad',
	      implicitUnits: 'rad'
	    },
	    textRotation: {
	      number: true,
	      units: 'deg|rad',
	      implicitUnits: 'rad',
	      enums: ['none', 'autorotate']
	    },
	    polygonPointList: {
	      number: true,
	      multiple: true,
	      evenMultiple: true,
	      min: -1,
	      max: 1,
	      unitless: true
	    },
	    edgeDistances: {
	      enums: ['intersection', 'node-position']
	    },
	    edgeEndpoint: {
	      number: true,
	      multiple: true,
	      units: '%|px|em|deg|rad',
	      implicitUnits: 'px',
	      enums: ['inside-to-node', 'outside-to-node', 'outside-to-node-or-label', 'outside-to-line', 'outside-to-line-or-label'],
	      singleEnum: true,
	      validate: function validate(valArr, unitsArr) {
	        switch (valArr.length) {
	          case 2:
	            // can be % or px only
	            return unitsArr[0] !== 'deg' && unitsArr[0] !== 'rad' && unitsArr[1] !== 'deg' && unitsArr[1] !== 'rad';

	          case 1:
	            // can be enum, deg, or rad only
	            return string(valArr[0]) || unitsArr[0] === 'deg' || unitsArr[0] === 'rad';

	          default:
	            return false;
	        }
	      }
	    },
	    easing: {
	      regexes: ['^(spring)\\s*\\(\\s*(' + number + ')\\s*,\\s*(' + number + ')\\s*\\)$', '^(cubic-bezier)\\s*\\(\\s*(' + number + ')\\s*,\\s*(' + number + ')\\s*,\\s*(' + number + ')\\s*,\\s*(' + number + ')\\s*\\)$'],
	      enums: ['linear', 'ease', 'ease-in', 'ease-out', 'ease-in-out', 'ease-in-sine', 'ease-out-sine', 'ease-in-out-sine', 'ease-in-quad', 'ease-out-quad', 'ease-in-out-quad', 'ease-in-cubic', 'ease-out-cubic', 'ease-in-out-cubic', 'ease-in-quart', 'ease-out-quart', 'ease-in-out-quart', 'ease-in-quint', 'ease-out-quint', 'ease-in-out-quint', 'ease-in-expo', 'ease-out-expo', 'ease-in-out-expo', 'ease-in-circ', 'ease-out-circ', 'ease-in-out-circ']
	    },
	    gradientDirection: {
	      enums: ['to-bottom', 'to-top', 'to-left', 'to-right', 'to-bottom-right', 'to-bottom-left', 'to-top-right', 'to-top-left', 'to-right-bottom', 'to-left-bottom', 'to-right-top', 'to-left-top']
	    },
	    boundsExpansion: {
	      number: true,
	      multiple: true,
	      min: 0,
	      validate: function validate(valArr) {
	        var length = valArr.length;
	        return length === 1 || length === 2 || length === 4;
	      }
	    }
	  };
	  var diff = {
	    zeroNonZero: function zeroNonZero(val1, val2) {
	      if ((val1 == null || val2 == null) && val1 !== val2) {
	        return true; // null cases could represent any value
	      }

	      if (val1 == 0 && val2 != 0) {
	        return true;
	      } else if (val1 != 0 && val2 == 0) {
	        return true;
	      } else {
	        return false;
	      }
	    },
	    any: function any(val1, val2) {
	      return val1 != val2;
	    }
	  }; // define visual style properties
	  //
	  // - n.b. adding a new group of props may require updates to updateStyleHints()
	  // - adding new props to an existing group gets handled automatically

	  var t = styfn$6.types;
	  var mainLabel = [{
	    name: 'label',
	    type: t.text,
	    triggersBounds: diff.any
	  }, {
	    name: 'text-rotation',
	    type: t.textRotation,
	    triggersBounds: diff.any
	  }, {
	    name: 'text-margin-x',
	    type: t.bidirectionalSize,
	    triggersBounds: diff.any
	  }, {
	    name: 'text-margin-y',
	    type: t.bidirectionalSize,
	    triggersBounds: diff.any
	  }];
	  var sourceLabel = [{
	    name: 'source-label',
	    type: t.text,
	    triggersBounds: diff.any
	  }, {
	    name: 'source-text-rotation',
	    type: t.textRotation,
	    triggersBounds: diff.any
	  }, {
	    name: 'source-text-margin-x',
	    type: t.bidirectionalSize,
	    triggersBounds: diff.any
	  }, {
	    name: 'source-text-margin-y',
	    type: t.bidirectionalSize,
	    triggersBounds: diff.any
	  }, {
	    name: 'source-text-offset',
	    type: t.size,
	    triggersBounds: diff.any
	  }];
	  var targetLabel = [{
	    name: 'target-label',
	    type: t.text,
	    triggersBounds: diff.any
	  }, {
	    name: 'target-text-rotation',
	    type: t.textRotation,
	    triggersBounds: diff.any
	  }, {
	    name: 'target-text-margin-x',
	    type: t.bidirectionalSize,
	    triggersBounds: diff.any
	  }, {
	    name: 'target-text-margin-y',
	    type: t.bidirectionalSize,
	    triggersBounds: diff.any
	  }, {
	    name: 'target-text-offset',
	    type: t.size,
	    triggersBounds: diff.any
	  }];
	  var labelDimensions = [{
	    name: 'font-family',
	    type: t.fontFamily,
	    triggersBounds: diff.any
	  }, {
	    name: 'font-style',
	    type: t.fontStyle,
	    triggersBounds: diff.any
	  }, {
	    name: 'font-weight',
	    type: t.fontWeight,
	    triggersBounds: diff.any
	  }, {
	    name: 'font-size',
	    type: t.size,
	    triggersBounds: diff.any
	  }, {
	    name: 'text-transform',
	    type: t.textTransform,
	    triggersBounds: diff.any
	  }, {
	    name: 'text-wrap',
	    type: t.textWrap,
	    triggersBounds: diff.any
	  }, {
	    name: 'text-overflow-wrap',
	    type: t.textOverflowWrap,
	    triggersBounds: diff.any
	  }, {
	    name: 'text-max-width',
	    type: t.size,
	    triggersBounds: diff.any
	  }, {
	    name: 'text-outline-width',
	    type: t.size,
	    triggersBounds: diff.any
	  }, {
	    name: 'line-height',
	    type: t.positiveNumber,
	    triggersBounds: diff.any
	  }];
	  var commonLabel = [{
	    name: 'text-valign',
	    type: t.valign,
	    triggersBounds: diff.any
	  }, {
	    name: 'text-halign',
	    type: t.halign,
	    triggersBounds: diff.any
	  }, {
	    name: 'color',
	    type: t.color
	  }, {
	    name: 'text-outline-color',
	    type: t.color
	  }, {
	    name: 'text-outline-opacity',
	    type: t.zeroOneNumber
	  }, {
	    name: 'text-background-color',
	    type: t.color
	  }, {
	    name: 'text-background-opacity',
	    type: t.zeroOneNumber
	  }, {
	    name: 'text-background-padding',
	    type: t.size,
	    triggersBounds: diff.any
	  }, {
	    name: 'text-border-opacity',
	    type: t.zeroOneNumber
	  }, {
	    name: 'text-border-color',
	    type: t.color
	  }, {
	    name: 'text-border-width',
	    type: t.size,
	    triggersBounds: diff.any
	  }, {
	    name: 'text-border-style',
	    type: t.borderStyle,
	    triggersBounds: diff.any
	  }, {
	    name: 'text-background-shape',
	    type: t.textBackgroundShape,
	    triggersBounds: diff.any
	  }, {
	    name: 'text-justification',
	    type: t.justification
	  }];
	  var behavior = [{
	    name: 'events',
	    type: t.bool
	  }, {
	    name: 'text-events',
	    type: t.bool
	  }];
	  var visibility = [{
	    name: 'display',
	    type: t.display,
	    triggersZOrder: diff.any,
	    triggersBounds: diff.any,
	    triggersBoundsOfParallelBeziers: true
	  }, {
	    name: 'visibility',
	    type: t.visibility,
	    triggersZOrder: diff.any
	  }, {
	    name: 'opacity',
	    type: t.zeroOneNumber,
	    triggersZOrder: diff.zeroNonZero
	  }, {
	    name: 'text-opacity',
	    type: t.zeroOneNumber
	  }, {
	    name: 'min-zoomed-font-size',
	    type: t.size
	  }, {
	    name: 'z-compound-depth',
	    type: t.zCompoundDepth,
	    triggersZOrder: diff.any
	  }, {
	    name: 'z-index-compare',
	    type: t.zIndexCompare,
	    triggersZOrder: diff.any
	  }, {
	    name: 'z-index',
	    type: t.nonNegativeInt,
	    triggersZOrder: diff.any
	  }];
	  var overlay = [{
	    name: 'overlay-padding',
	    type: t.size,
	    triggersBounds: diff.any
	  }, {
	    name: 'overlay-color',
	    type: t.color
	  }, {
	    name: 'overlay-opacity',
	    type: t.zeroOneNumber,
	    triggersBounds: diff.zeroNonZero
	  }];
	  var transition = [{
	    name: 'transition-property',
	    type: t.propList
	  }, {
	    name: 'transition-duration',
	    type: t.time
	  }, {
	    name: 'transition-delay',
	    type: t.time
	  }, {
	    name: 'transition-timing-function',
	    type: t.easing
	  }];

	  var nodeSizeHashOverride = function nodeSizeHashOverride(ele, parsedProp) {
	    if (parsedProp.value === 'label') {
	      return -ele.poolIndex(); // no hash key hits is using label size (hitrate for perf probably low anyway)
	    } else {
	      return parsedProp.pfValue;
	    }
	  };

	  var nodeBody = [{
	    name: 'height',
	    type: t.nodeSize,
	    triggersBounds: diff.any,
	    hashOverride: nodeSizeHashOverride
	  }, {
	    name: 'width',
	    type: t.nodeSize,
	    triggersBounds: diff.any,
	    hashOverride: nodeSizeHashOverride
	  }, {
	    name: 'shape',
	    type: t.nodeShape,
	    triggersBounds: diff.any
	  }, {
	    name: 'shape-polygon-points',
	    type: t.polygonPointList,
	    triggersBounds: diff.any
	  }, {
	    name: 'background-color',
	    type: t.color
	  }, {
	    name: 'background-fill',
	    type: t.fill
	  }, {
	    name: 'background-opacity',
	    type: t.zeroOneNumber
	  }, {
	    name: 'background-blacken',
	    type: t.nOneOneNumber
	  }, {
	    name: 'background-gradient-stop-colors',
	    type: t.colors
	  }, {
	    name: 'background-gradient-stop-positions',
	    type: t.percentages
	  }, {
	    name: 'background-gradient-direction',
	    type: t.gradientDirection
	  }, {
	    name: 'padding',
	    type: t.sizeMaybePercent,
	    triggersBounds: diff.any
	  }, {
	    name: 'padding-relative-to',
	    type: t.paddingRelativeTo,
	    triggersBounds: diff.any
	  }, {
	    name: 'bounds-expansion',
	    type: t.boundsExpansion,
	    triggersBounds: diff.any
	  }];
	  var nodeBorder = [{
	    name: 'border-color',
	    type: t.color
	  }, {
	    name: 'border-opacity',
	    type: t.zeroOneNumber
	  }, {
	    name: 'border-width',
	    type: t.size,
	    triggersBounds: diff.any
	  }, {
	    name: 'border-style',
	    type: t.borderStyle
	  }];
	  var backgroundImage = [{
	    name: 'background-image',
	    type: t.urls
	  }, {
	    name: 'background-image-crossorigin',
	    type: t.bgCrossOrigin
	  }, {
	    name: 'background-image-opacity',
	    type: t.zeroOneNumbers
	  }, {
	    name: 'background-position-x',
	    type: t.bgPos
	  }, {
	    name: 'background-position-y',
	    type: t.bgPos
	  }, {
	    name: 'background-width-relative-to',
	    type: t.bgRelativeTo
	  }, {
	    name: 'background-height-relative-to',
	    type: t.bgRelativeTo
	  }, {
	    name: 'background-repeat',
	    type: t.bgRepeat
	  }, {
	    name: 'background-fit',
	    type: t.bgFit
	  }, {
	    name: 'background-clip',
	    type: t.bgClip
	  }, {
	    name: 'background-width',
	    type: t.bgWH
	  }, {
	    name: 'background-height',
	    type: t.bgWH
	  }, {
	    name: 'background-offset-x',
	    type: t.bgPos
	  }, {
	    name: 'background-offset-y',
	    type: t.bgPos
	  }];
	  var compound = [{
	    name: 'position',
	    type: t.position,
	    triggersBounds: diff.any
	  }, {
	    name: 'compound-sizing-wrt-labels',
	    type: t.compoundIncludeLabels,
	    triggersBounds: diff.any
	  }, {
	    name: 'min-width',
	    type: t.size,
	    triggersBounds: diff.any
	  }, {
	    name: 'min-width-bias-left',
	    type: t.sizeMaybePercent,
	    triggersBounds: diff.any
	  }, {
	    name: 'min-width-bias-right',
	    type: t.sizeMaybePercent,
	    triggersBounds: diff.any
	  }, {
	    name: 'min-height',
	    type: t.size,
	    triggersBounds: diff.any
	  }, {
	    name: 'min-height-bias-top',
	    type: t.sizeMaybePercent,
	    triggersBounds: diff.any
	  }, {
	    name: 'min-height-bias-bottom',
	    type: t.sizeMaybePercent,
	    triggersBounds: diff.any
	  }];
	  var edgeLine = [{
	    name: 'line-style',
	    type: t.lineStyle
	  }, {
	    name: 'line-color',
	    type: t.color
	  }, {
	    name: 'line-fill',
	    type: t.fill
	  }, {
	    name: 'line-cap',
	    type: t.lineCap
	  }, {
	    name: 'line-dash-pattern',
	    type: t.numbers
	  }, {
	    name: 'line-dash-offset',
	    type: t.number
	  }, {
	    name: 'line-gradient-stop-colors',
	    type: t.colors
	  }, {
	    name: 'line-gradient-stop-positions',
	    type: t.percentages
	  }, {
	    name: 'curve-style',
	    type: t.curveStyle,
	    triggersBounds: diff.any,
	    triggersBoundsOfParallelBeziers: true
	  }, {
	    name: 'haystack-radius',
	    type: t.zeroOneNumber,
	    triggersBounds: diff.any
	  }, {
	    name: 'source-endpoint',
	    type: t.edgeEndpoint,
	    triggersBounds: diff.any
	  }, {
	    name: 'target-endpoint',
	    type: t.edgeEndpoint,
	    triggersBounds: diff.any
	  }, {
	    name: 'control-point-step-size',
	    type: t.size,
	    triggersBounds: diff.any
	  }, {
	    name: 'control-point-distances',
	    type: t.bidirectionalSizes,
	    triggersBounds: diff.any
	  }, {
	    name: 'control-point-weights',
	    type: t.numbers,
	    triggersBounds: diff.any
	  }, {
	    name: 'segment-distances',
	    type: t.bidirectionalSizes,
	    triggersBounds: diff.any
	  }, {
	    name: 'segment-weights',
	    type: t.numbers,
	    triggersBounds: diff.any
	  }, {
	    name: 'taxi-turn',
	    type: t.bidirectionalSizeMaybePercent,
	    triggersBounds: diff.any
	  }, {
	    name: 'taxi-turn-min-distance',
	    type: t.size,
	    triggersBounds: diff.any
	  }, {
	    name: 'taxi-direction',
	    type: t.axisDirection,
	    triggersBounds: diff.any
	  }, {
	    name: 'edge-distances',
	    type: t.edgeDistances,
	    triggersBounds: diff.any
	  }, {
	    name: 'arrow-scale',
	    type: t.positiveNumber,
	    triggersBounds: diff.any
	  }, {
	    name: 'loop-direction',
	    type: t.angle,
	    triggersBounds: diff.any
	  }, {
	    name: 'loop-sweep',
	    type: t.angle,
	    triggersBounds: diff.any
	  }, {
	    name: 'source-distance-from-node',
	    type: t.size,
	    triggersBounds: diff.any
	  }, {
	    name: 'target-distance-from-node',
	    type: t.size,
	    triggersBounds: diff.any
	  }];
	  var ghost = [{
	    name: 'ghost',
	    type: t.bool,
	    triggersBounds: diff.any
	  }, {
	    name: 'ghost-offset-x',
	    type: t.bidirectionalSize,
	    triggersBounds: diff.any
	  }, {
	    name: 'ghost-offset-y',
	    type: t.bidirectionalSize,
	    triggersBounds: diff.any
	  }, {
	    name: 'ghost-opacity',
	    type: t.zeroOneNumber
	  }];
	  var core = [{
	    name: 'selection-box-color',
	    type: t.color
	  }, {
	    name: 'selection-box-opacity',
	    type: t.zeroOneNumber
	  }, {
	    name: 'selection-box-border-color',
	    type: t.color
	  }, {
	    name: 'selection-box-border-width',
	    type: t.size
	  }, {
	    name: 'active-bg-color',
	    type: t.color
	  }, {
	    name: 'active-bg-opacity',
	    type: t.zeroOneNumber
	  }, {
	    name: 'active-bg-size',
	    type: t.size
	  }, {
	    name: 'outside-texture-bg-color',
	    type: t.color
	  }, {
	    name: 'outside-texture-bg-opacity',
	    type: t.zeroOneNumber
	  }]; // pie backgrounds for nodes

	  var pie = [];
	  styfn$6.pieBackgroundN = 16; // because the pie properties are numbered, give access to a constant N (for renderer use)

	  pie.push({
	    name: 'pie-size',
	    type: t.sizeMaybePercent
	  });

	  for (var i = 1; i <= styfn$6.pieBackgroundN; i++) {
	    pie.push({
	      name: 'pie-' + i + '-background-color',
	      type: t.color
	    });
	    pie.push({
	      name: 'pie-' + i + '-background-size',
	      type: t.percent
	    });
	    pie.push({
	      name: 'pie-' + i + '-background-opacity',
	      type: t.zeroOneNumber
	    });
	  } // edge arrows


	  var edgeArrow = [];
	  var arrowPrefixes = styfn$6.arrowPrefixes = ['source', 'mid-source', 'target', 'mid-target'];
	  [{
	    name: 'arrow-shape',
	    type: t.arrowShape,
	    triggersBounds: diff.any
	  }, {
	    name: 'arrow-color',
	    type: t.color
	  }, {
	    name: 'arrow-fill',
	    type: t.arrowFill
	  }].forEach(function (prop) {
	    arrowPrefixes.forEach(function (prefix) {
	      var name = prefix + '-' + prop.name;
	      var type = prop.type,
	          triggersBounds = prop.triggersBounds;
	      edgeArrow.push({
	        name: name,
	        type: type,
	        triggersBounds: triggersBounds
	      });
	    });
	  }, {});
	  var props = styfn$6.properties = [].concat(behavior, transition, visibility, overlay, ghost, commonLabel, labelDimensions, mainLabel, sourceLabel, targetLabel, nodeBody, nodeBorder, backgroundImage, pie, compound, edgeLine, edgeArrow, core);
	  var propGroups = styfn$6.propertyGroups = {
	    // common to all eles
	    behavior: behavior,
	    transition: transition,
	    visibility: visibility,
	    overlay: overlay,
	    ghost: ghost,
	    // labels
	    commonLabel: commonLabel,
	    labelDimensions: labelDimensions,
	    mainLabel: mainLabel,
	    sourceLabel: sourceLabel,
	    targetLabel: targetLabel,
	    // node props
	    nodeBody: nodeBody,
	    nodeBorder: nodeBorder,
	    backgroundImage: backgroundImage,
	    pie: pie,
	    compound: compound,
	    // edge props
	    edgeLine: edgeLine,
	    edgeArrow: edgeArrow,
	    core: core
	  };
	  var propGroupNames = styfn$6.propertyGroupNames = {};
	  var propGroupKeys = styfn$6.propertyGroupKeys = Object.keys(propGroups);
	  propGroupKeys.forEach(function (key) {
	    propGroupNames[key] = propGroups[key].map(function (prop) {
	      return prop.name;
	    });
	    propGroups[key].forEach(function (prop) {
	      return prop.groupKey = key;
	    });
	  }); // define aliases

	  var aliases = styfn$6.aliases = [{
	    name: 'content',
	    pointsTo: 'label'
	  }, {
	    name: 'control-point-distance',
	    pointsTo: 'control-point-distances'
	  }, {
	    name: 'control-point-weight',
	    pointsTo: 'control-point-weights'
	  }, {
	    name: 'edge-text-rotation',
	    pointsTo: 'text-rotation'
	  }, {
	    name: 'padding-left',
	    pointsTo: 'padding'
	  }, {
	    name: 'padding-right',
	    pointsTo: 'padding'
	  }, {
	    name: 'padding-top',
	    pointsTo: 'padding'
	  }, {
	    name: 'padding-bottom',
	    pointsTo: 'padding'
	  }]; // list of property names

	  styfn$6.propertyNames = props.map(function (p) {
	    return p.name;
	  }); // allow access of properties by name ( e.g. style.properties.height )

	  for (var _i = 0; _i < props.length; _i++) {
	    var prop = props[_i];
	    props[prop.name] = prop; // allow lookup by name
	  } // map aliases


	  for (var _i2 = 0; _i2 < aliases.length; _i2++) {
	    var alias = aliases[_i2];
	    var pointsToProp = props[alias.pointsTo];
	    var aliasProp = {
	      name: alias.name,
	      alias: true,
	      pointsTo: pointsToProp
	    }; // add alias prop for parsing

	    props.push(aliasProp);
	    props[alias.name] = aliasProp; // allow lookup by name
	  }
	})();

	styfn$6.getDefaultProperty = function (name) {
	  return this.getDefaultProperties()[name];
	};

	styfn$6.getDefaultProperties = function () {
	  var _p = this._private;

	  if (_p.defaultProperties != null) {
	    return _p.defaultProperties;
	  }

	  var rawProps = extend({
	    // core props
	    'selection-box-color': '#ddd',
	    'selection-box-opacity': 0.65,
	    'selection-box-border-color': '#aaa',
	    'selection-box-border-width': 1,
	    'active-bg-color': 'black',
	    'active-bg-opacity': 0.15,
	    'active-bg-size': 30,
	    'outside-texture-bg-color': '#000',
	    'outside-texture-bg-opacity': 0.125,
	    // common node/edge props
	    'events': 'yes',
	    'text-events': 'no',
	    'text-valign': 'top',
	    'text-halign': 'center',
	    'text-justification': 'auto',
	    'line-height': 1,
	    'color': '#000',
	    'text-outline-color': '#000',
	    'text-outline-width': 0,
	    'text-outline-opacity': 1,
	    'text-opacity': 1,
	    'text-decoration': 'none',
	    'text-transform': 'none',
	    'text-wrap': 'none',
	    'text-overflow-wrap': 'whitespace',
	    'text-max-width': 9999,
	    'text-background-color': '#000',
	    'text-background-opacity': 0,
	    'text-background-shape': 'rectangle',
	    'text-background-padding': 0,
	    'text-border-opacity': 0,
	    'text-border-width': 0,
	    'text-border-style': 'solid',
	    'text-border-color': '#000',
	    'font-family': 'Helvetica Neue, Helvetica, sans-serif',
	    'font-style': 'normal',
	    'font-weight': 'normal',
	    'font-size': 16,
	    'min-zoomed-font-size': 0,
	    'text-rotation': 'none',
	    'source-text-rotation': 'none',
	    'target-text-rotation': 'none',
	    'visibility': 'visible',
	    'display': 'element',
	    'opacity': 1,
	    'z-compound-depth': 'auto',
	    'z-index-compare': 'auto',
	    'z-index': 0,
	    'label': '',
	    'text-margin-x': 0,
	    'text-margin-y': 0,
	    'source-label': '',
	    'source-text-offset': 0,
	    'source-text-margin-x': 0,
	    'source-text-margin-y': 0,
	    'target-label': '',
	    'target-text-offset': 0,
	    'target-text-margin-x': 0,
	    'target-text-margin-y': 0,
	    'overlay-opacity': 0,
	    'overlay-color': '#000',
	    'overlay-padding': 10,
	    'transition-property': 'none',
	    'transition-duration': 0,
	    'transition-delay': 0,
	    'transition-timing-function': 'linear',
	    // node props
	    'background-blacken': 0,
	    'background-color': '#999',
	    'background-fill': 'solid',
	    'background-opacity': 1,
	    'background-image': 'none',
	    'background-image-crossorigin': 'anonymous',
	    'background-image-opacity': 1,
	    'background-position-x': '50%',
	    'background-position-y': '50%',
	    'background-offset-x': 0,
	    'background-offset-y': 0,
	    'background-width-relative-to': 'include-padding',
	    'background-height-relative-to': 'include-padding',
	    'background-repeat': 'no-repeat',
	    'background-fit': 'none',
	    'background-clip': 'node',
	    'background-width': 'auto',
	    'background-height': 'auto',
	    'border-color': '#000',
	    'border-opacity': 1,
	    'border-width': 0,
	    'border-style': 'solid',
	    'height': 30,
	    'width': 30,
	    'shape': 'ellipse',
	    'shape-polygon-points': '-1, -1,   1, -1,   1, 1,   -1, 1',
	    'bounds-expansion': 0,
	    // node gradient
	    'background-gradient-direction': 'to-bottom',
	    'background-gradient-stop-colors': '#999',
	    'background-gradient-stop-positions': '0%',
	    // ghost props
	    'ghost': 'no',
	    'ghost-offset-y': 0,
	    'ghost-offset-x': 0,
	    'ghost-opacity': 0,
	    // compound props
	    'padding': 0,
	    'padding-relative-to': 'width',
	    'position': 'origin',
	    'compound-sizing-wrt-labels': 'include',
	    'min-width': 0,
	    'min-width-bias-left': 0,
	    'min-width-bias-right': 0,
	    'min-height': 0,
	    'min-height-bias-top': 0,
	    'min-height-bias-bottom': 0
	  }, {
	    // node pie bg
	    'pie-size': '100%'
	  }, [{
	    name: 'pie-{{i}}-background-color',
	    value: 'black'
	  }, {
	    name: 'pie-{{i}}-background-size',
	    value: '0%'
	  }, {
	    name: 'pie-{{i}}-background-opacity',
	    value: 1
	  }].reduce(function (css, prop) {
	    for (var i = 1; i <= styfn$6.pieBackgroundN; i++) {
	      var name = prop.name.replace('{{i}}', i);
	      var val = prop.value;
	      css[name] = val;
	    }

	    return css;
	  }, {}), {
	    // edge props
	    'line-style': 'solid',
	    'line-color': '#999',
	    'line-fill': 'solid',
	    'line-cap': 'butt',
	    'line-gradient-stop-colors': '#999',
	    'line-gradient-stop-positions': '0%',
	    'control-point-step-size': 40,
	    'control-point-weights': 0.5,
	    'segment-weights': 0.5,
	    'segment-distances': 20,
	    'taxi-turn': '50%',
	    'taxi-turn-min-distance': 10,
	    'taxi-direction': 'auto',
	    'edge-distances': 'intersection',
	    'curve-style': 'haystack',
	    'haystack-radius': 0,
	    'arrow-scale': 1,
	    'loop-direction': '-45deg',
	    'loop-sweep': '-90deg',
	    'source-distance-from-node': 0,
	    'target-distance-from-node': 0,
	    'source-endpoint': 'outside-to-node',
	    'target-endpoint': 'outside-to-node',
	    'line-dash-pattern': [6, 3],
	    'line-dash-offset': 0
	  }, [{
	    name: 'arrow-shape',
	    value: 'none'
	  }, {
	    name: 'arrow-color',
	    value: '#999'
	  }, {
	    name: 'arrow-fill',
	    value: 'filled'
	  }].reduce(function (css, prop) {
	    styfn$6.arrowPrefixes.forEach(function (prefix) {
	      var name = prefix + '-' + prop.name;
	      var val = prop.value;
	      css[name] = val;
	    });
	    return css;
	  }, {}));
	  var parsedProps = {};

	  for (var i = 0; i < this.properties.length; i++) {
	    var prop = this.properties[i];

	    if (prop.pointsTo) {
	      continue;
	    }

	    var name = prop.name;
	    var val = rawProps[name];
	    var parsedProp = this.parse(name, val);
	    parsedProps[name] = parsedProp;
	  }

	  _p.defaultProperties = parsedProps;
	  return _p.defaultProperties;
	};

	styfn$6.addDefaultStylesheet = function () {
	  this.selector(':parent').css({
	    'shape': 'rectangle',
	    'padding': 10,
	    'background-color': '#eee',
	    'border-color': '#ccc',
	    'border-width': 1
	  }).selector('edge').css({
	    'width': 3
	  }).selector(':loop').css({
	    'curve-style': 'bezier'
	  }).selector('edge:compound').css({
	    'curve-style': 'bezier',
	    'source-endpoint': 'outside-to-line',
	    'target-endpoint': 'outside-to-line'
	  }).selector(':selected').css({
	    'background-color': '#0169D9',
	    'line-color': '#0169D9',
	    'source-arrow-color': '#0169D9',
	    'target-arrow-color': '#0169D9',
	    'mid-source-arrow-color': '#0169D9',
	    'mid-target-arrow-color': '#0169D9'
	  }).selector(':parent:selected').css({
	    'background-color': '#CCE1F9',
	    'border-color': '#aec8e5'
	  }).selector(':active').css({
	    'overlay-color': 'black',
	    'overlay-padding': 10,
	    'overlay-opacity': 0.25
	  });
	  this.defaultLength = this.length;
	};

	var styfn$7 = {}; // a caching layer for property parsing

	styfn$7.parse = function (name, value, propIsBypass, propIsFlat) {
	  var self = this; // function values can't be cached in all cases, and there isn't much benefit of caching them anyway

	  if (fn(value)) {
	    return self.parseImplWarn(name, value, propIsBypass, propIsFlat);
	  }

	  var flatKey = propIsFlat === 'mapping' || propIsFlat === true || propIsFlat === false || propIsFlat == null ? 'dontcare' : propIsFlat;
	  var bypassKey = propIsBypass ? 't' : 'f';
	  var valueKey = '' + value;
	  var argHash = hashStrings(name, valueKey, bypassKey, flatKey);
	  var propCache = self.propCache = self.propCache || [];
	  var ret;

	  if (!(ret = propCache[argHash])) {
	    ret = propCache[argHash] = self.parseImplWarn(name, value, propIsBypass, propIsFlat);
	  } // - bypasses can't be shared b/c the value can be changed by animations or otherwise overridden
	  // - mappings can't be shared b/c mappings are per-element


	  if (propIsBypass || propIsFlat === 'mapping') {
	    // need a copy since props are mutated later in their lifecycles
	    ret = copy(ret);

	    if (ret) {
	      ret.value = copy(ret.value); // because it could be an array, e.g. colour
	    }
	  }

	  return ret;
	};

	styfn$7.parseImplWarn = function (name, value, propIsBypass, propIsFlat) {
	  var prop = this.parseImpl(name, value, propIsBypass, propIsFlat);

	  if (!prop && value != null) {
	    warn("The style property `".concat(name, ": ").concat(value, "` is invalid"));
	  }

	  return prop;
	}; // parse a property; return null on invalid; return parsed property otherwise
	// fields :
	// - name : the name of the property
	// - value : the parsed, native-typed value of the property
	// - strValue : a string value that represents the property value in valid css
	// - bypass : true iff the property is a bypass property


	styfn$7.parseImpl = function (name, value, propIsBypass, propIsFlat) {
	  var self = this;
	  name = camel2dash(name); // make sure the property name is in dash form (e.g. 'property-name' not 'propertyName')

	  var property = self.properties[name];
	  var passedValue = value;
	  var types = self.types;

	  if (!property) {
	    return null;
	  } // return null on property of unknown name


	  if (value === undefined) {
	    return null;
	  } // can't assign undefined
	  // the property may be an alias


	  if (property.alias) {
	    property = property.pointsTo;
	    name = property.name;
	  }

	  var valueIsString = string(value);

	  if (valueIsString) {
	    // trim the value to make parsing easier
	    value = value.trim();
	  }

	  var type = property.type;

	  if (!type) {
	    return null;
	  } // no type, no luck
	  // check if bypass is null or empty string (i.e. indication to delete bypass property)


	  if (propIsBypass && (value === '' || value === null)) {
	    return {
	      name: name,
	      value: value,
	      bypass: true,
	      deleteBypass: true
	    };
	  } // check if value is a function used as a mapper


	  if (fn(value)) {
	    return {
	      name: name,
	      value: value,
	      strValue: 'fn',
	      mapped: types.fn,
	      bypass: propIsBypass
	    };
	  } // check if value is mapped


	  var data, mapData;

	  if (!valueIsString || propIsFlat || value.length < 7 || value[1] !== 'a') ; else if (value.length >= 7 && value[0] === 'd' && (data = new RegExp(types.data.regex).exec(value))) {
	    if (propIsBypass) {
	      return false;
	    } // mappers not allowed in bypass


	    var mapped = types.data;
	    return {
	      name: name,
	      value: data,
	      strValue: '' + value,
	      mapped: mapped,
	      field: data[1],
	      bypass: propIsBypass
	    };
	  } else if (value.length >= 10 && value[0] === 'm' && (mapData = new RegExp(types.mapData.regex).exec(value))) {
	    if (propIsBypass) {
	      return false;
	    } // mappers not allowed in bypass


	    if (type.multiple) {
	      return false;
	    } // impossible to map to num


	    var _mapped = types.mapData; // we can map only if the type is a colour or a number

	    if (!(type.color || type.number)) {
	      return false;
	    }

	    var valueMin = this.parse(name, mapData[4]); // parse to validate

	    if (!valueMin || valueMin.mapped) {
	      return false;
	    } // can't be invalid or mapped


	    var valueMax = this.parse(name, mapData[5]); // parse to validate

	    if (!valueMax || valueMax.mapped) {
	      return false;
	    } // can't be invalid or mapped
	    // check if valueMin and valueMax are the same


	    if (valueMin.pfValue === valueMax.pfValue || valueMin.strValue === valueMax.strValue) {
	      warn('`' + name + ': ' + value + '` is not a valid mapper because the output range is zero; converting to `' + name + ': ' + valueMin.strValue + '`');
	      return this.parse(name, valueMin.strValue); // can't make much of a mapper without a range
	    } else if (type.color) {
	      var c1 = valueMin.value;
	      var c2 = valueMax.value;
	      var same = c1[0] === c2[0] // red
	      && c1[1] === c2[1] // green
	      && c1[2] === c2[2] // blue
	      && ( // optional alpha
	      c1[3] === c2[3] // same alpha outright
	      || (c1[3] == null || c1[3] === 1) && ( // full opacity for colour 1?
	      c2[3] == null || c2[3] === 1) // full opacity for colour 2?
	      );

	      if (same) {
	        return false;
	      } // can't make a mapper without a range

	    }

	    return {
	      name: name,
	      value: mapData,
	      strValue: '' + value,
	      mapped: _mapped,
	      field: mapData[1],
	      fieldMin: parseFloat(mapData[2]),
	      // min & max are numeric
	      fieldMax: parseFloat(mapData[3]),
	      valueMin: valueMin.value,
	      valueMax: valueMax.value,
	      bypass: propIsBypass
	    };
	  }

	  if (type.multiple && propIsFlat !== 'multiple') {
	    var vals;

	    if (valueIsString) {
	      vals = value.split(/\s+/);
	    } else if (array(value)) {
	      vals = value;
	    } else {
	      vals = [value];
	    }

	    if (type.evenMultiple && vals.length % 2 !== 0) {
	      return null;
	    }

	    var valArr = [];
	    var unitsArr = [];
	    var pfValArr = [];
	    var strVal = '';
	    var hasEnum = false;

	    for (var i = 0; i < vals.length; i++) {
	      var p = self.parse(name, vals[i], propIsBypass, 'multiple');
	      hasEnum = hasEnum || string(p.value);
	      valArr.push(p.value);
	      pfValArr.push(p.pfValue != null ? p.pfValue : p.value);
	      unitsArr.push(p.units);
	      strVal += (i > 0 ? ' ' : '') + p.strValue;
	    }

	    if (type.validate && !type.validate(valArr, unitsArr)) {
	      return null;
	    }

	    if (type.singleEnum && hasEnum) {
	      if (valArr.length === 1 && string(valArr[0])) {
	        return {
	          name: name,
	          value: valArr[0],
	          strValue: valArr[0],
	          bypass: propIsBypass
	        };
	      } else {
	        return null;
	      }
	    }

	    return {
	      name: name,
	      value: valArr,
	      pfValue: pfValArr,
	      strValue: strVal,
	      bypass: propIsBypass,
	      units: unitsArr
	    };
	  } // several types also allow enums


	  var checkEnums = function checkEnums() {
	    for (var _i = 0; _i < type.enums.length; _i++) {
	      var en = type.enums[_i];

	      if (en === value) {
	        return {
	          name: name,
	          value: value,
	          strValue: '' + value,
	          bypass: propIsBypass
	        };
	      }
	    }

	    return null;
	  }; // check the type and return the appropriate object


	  if (type.number) {
	    var units;
	    var implicitUnits = 'px'; // not set => px

	    if (type.units) {
	      // use specified units if set
	      units = type.units;
	    }

	    if (type.implicitUnits) {
	      implicitUnits = type.implicitUnits;
	    }

	    if (!type.unitless) {
	      if (valueIsString) {
	        var unitsRegex = 'px|em' + (type.allowPercent ? '|\\%' : '');

	        if (units) {
	          unitsRegex = units;
	        } // only allow explicit units if so set


	        var match = value.match('^(' + number$1 + ')(' + unitsRegex + ')?' + '$');

	        if (match) {
	          value = match[1];
	          units = match[2] || implicitUnits;
	        }
	      } else if (!units || type.implicitUnits) {
	        units = implicitUnits; // implicitly px if unspecified
	      }
	    }

	    value = parseFloat(value); // if not a number and enums not allowed, then the value is invalid

	    if (isNaN(value) && type.enums === undefined) {
	      return null;
	    } // check if this number type also accepts special keywords in place of numbers
	    // (i.e. `left`, `auto`, etc)


	    if (isNaN(value) && type.enums !== undefined) {
	      value = passedValue;
	      return checkEnums();
	    } // check if value must be an integer


	    if (type.integer && !integer(value)) {
	      return null;
	    } // check value is within range


	    if (type.min !== undefined && (value < type.min || type.strictMin && value === type.min) || type.max !== undefined && (value > type.max || type.strictMax && value === type.max)) {
	      return null;
	    }

	    var ret = {
	      name: name,
	      value: value,
	      strValue: '' + value + (units ? units : ''),
	      units: units,
	      bypass: propIsBypass
	    }; // normalise value in pixels

	    if (type.unitless || units !== 'px' && units !== 'em') {
	      ret.pfValue = value;
	    } else {
	      ret.pfValue = units === 'px' || !units ? value : this.getEmSizeInPixels() * value;
	    } // normalise value in ms


	    if (units === 'ms' || units === 's') {
	      ret.pfValue = units === 'ms' ? value : 1000 * value;
	    } // normalise value in rad


	    if (units === 'deg' || units === 'rad') {
	      ret.pfValue = units === 'rad' ? value : deg2rad(value);
	    } // normalize value in %


	    if (units === '%') {
	      ret.pfValue = value / 100;
	    }

	    return ret;
	  } else if (type.propList) {
	    var props = [];
	    var propsStr = '' + value;

	    if (propsStr === 'none') ; else {
	      // go over each prop
	      var propsSplit = propsStr.split(/\s*,\s*|\s+/);

	      for (var _i2 = 0; _i2 < propsSplit.length; _i2++) {
	        var propName = propsSplit[_i2].trim();

	        if (self.properties[propName]) {
	          props.push(propName);
	        } else {
	          warn('`' + propName + '` is not a valid property name');
	        }
	      }

	      if (props.length === 0) {
	        return null;
	      }
	    }

	    return {
	      name: name,
	      value: props,
	      strValue: props.length === 0 ? 'none' : props.join(' '),
	      bypass: propIsBypass
	    };
	  } else if (type.color) {
	    var tuple = color2tuple(value);

	    if (!tuple) {
	      return null;
	    }

	    return {
	      name: name,
	      value: tuple,
	      pfValue: tuple,
	      strValue: 'rgb(' + tuple[0] + ',' + tuple[1] + ',' + tuple[2] + ')',
	      // n.b. no spaces b/c of multiple support
	      bypass: propIsBypass
	    };
	  } else if (type.regex || type.regexes) {
	    // first check enums
	    if (type.enums) {
	      var enumProp = checkEnums();

	      if (enumProp) {
	        return enumProp;
	      }
	    }

	    var regexes = type.regexes ? type.regexes : [type.regex];

	    for (var _i3 = 0; _i3 < regexes.length; _i3++) {
	      var regex = new RegExp(regexes[_i3]); // make a regex from the type string

	      var m = regex.exec(value);

	      if (m) {
	        // regex matches
	        return {
	          name: name,
	          value: type.singleRegexMatchValue ? m[1] : m,
	          strValue: '' + value,
	          bypass: propIsBypass
	        };
	      }
	    }

	    return null; // didn't match any
	  } else if (type.string) {
	    // just return
	    return {
	      name: name,
	      value: '' + value,
	      strValue: '' + value,
	      bypass: propIsBypass
	    };
	  } else if (type.enums) {
	    // check enums last because it's a combo type in others
	    return checkEnums();
	  } else {
	    return null; // not a type we can handle
	  }
	};

	var Style = function Style(cy) {
	  if (!(this instanceof Style)) {
	    return new Style(cy);
	  }

	  if (!core(cy)) {
	    error('A style must have a core reference');
	    return;
	  }

	  this._private = {
	    cy: cy,
	    coreStyle: {}
	  };
	  this.length = 0;
	  this.resetToDefault();
	};

	var styfn$8 = Style.prototype;

	styfn$8.instanceString = function () {
	  return 'style';
	}; // remove all contexts


	styfn$8.clear = function () {
	  for (var i = 0; i < this.length; i++) {
	    this[i] = undefined;
	  }

	  this.length = 0;
	  var _p = this._private;
	  _p.newStyle = true;
	  return this; // chaining
	};

	styfn$8.resetToDefault = function () {
	  this.clear();
	  this.addDefaultStylesheet();
	  return this;
	}; // builds a style object for the 'core' selector


	styfn$8.core = function (propName) {
	  return this._private.coreStyle[propName] || this.getDefaultProperty(propName);
	}; // create a new context from the specified selector string and switch to that context


	styfn$8.selector = function (selectorStr) {
	  // 'core' is a special case and does not need a selector
	  var selector = selectorStr === 'core' ? null : new Selector(selectorStr);
	  var i = this.length++; // new context means new index

	  this[i] = {
	    selector: selector,
	    properties: [],
	    mappedProperties: [],
	    index: i
	  };
	  return this; // chaining
	}; // add one or many css rules to the current context


	styfn$8.css = function () {
	  var self = this;
	  var args = arguments;

	  if (args.length === 1) {
	    var map = args[0];

	    for (var i = 0; i < self.properties.length; i++) {
	      var prop = self.properties[i];
	      var mapVal = map[prop.name];

	      if (mapVal === undefined) {
	        mapVal = map[dash2camel(prop.name)];
	      }

	      if (mapVal !== undefined) {
	        this.cssRule(prop.name, mapVal);
	      }
	    }
	  } else if (args.length === 2) {
	    this.cssRule(args[0], args[1]);
	  } // do nothing if args are invalid


	  return this; // chaining
	};

	styfn$8.style = styfn$8.css; // add a single css rule to the current context

	styfn$8.cssRule = function (name, value) {
	  // name-value pair
	  var property = this.parse(name, value); // add property to current context if valid

	  if (property) {
	    var i = this.length - 1;
	    this[i].properties.push(property);
	    this[i].properties[property.name] = property; // allow access by name as well

	    if (property.name.match(/pie-(\d+)-background-size/) && property.value) {
	      this._private.hasPie = true;
	    }

	    if (property.mapped) {
	      this[i].mappedProperties.push(property);
	    } // add to core style if necessary


	    var currentSelectorIsCore = !this[i].selector;

	    if (currentSelectorIsCore) {
	      this._private.coreStyle[property.name] = property;
	    }
	  }

	  return this; // chaining
	};

	styfn$8.append = function (style) {
	  if (stylesheet(style)) {
	    style.appendToStyle(this);
	  } else if (array(style)) {
	    this.appendFromJson(style);
	  } else if (string(style)) {
	    this.appendFromString(style);
	  } // you probably wouldn't want to append a Style, since you'd duplicate the default parts


	  return this;
	}; // static function


	Style.fromJson = function (cy, json) {
	  var style = new Style(cy);
	  style.fromJson(json);
	  return style;
	};

	Style.fromString = function (cy, string) {
	  return new Style(cy).fromString(string);
	};

	[styfn, styfn$1, styfn$2, styfn$3, styfn$4, styfn$5, styfn$6, styfn$7].forEach(function (props) {
	  extend(styfn$8, props);
	});
	Style.types = styfn$8.types;
	Style.properties = styfn$8.properties;
	Style.propertyGroups = styfn$8.propertyGroups;
	Style.propertyGroupNames = styfn$8.propertyGroupNames;
	Style.propertyGroupKeys = styfn$8.propertyGroupKeys;

	var corefn$7 = {
	  style: function style(newStyle) {
	    if (newStyle) {
	      var s = this.setStyle(newStyle);
	      s.update();
	    }

	    return this._private.style;
	  },
	  setStyle: function setStyle(style) {
	    var _p = this._private;

	    if (stylesheet(style)) {
	      _p.style = style.generateStyle(this);
	    } else if (array(style)) {
	      _p.style = Style.fromJson(this, style);
	    } else if (string(style)) {
	      _p.style = Style.fromString(this, style);
	    } else {
	      _p.style = Style(this);
	    }

	    return _p.style;
	  }
	};

	var defaultSelectionType = 'single';
	var corefn$8 = {
	  autolock: function autolock(bool) {
	    if (bool !== undefined) {
	      this._private.autolock = bool ? true : false;
	    } else {
	      return this._private.autolock;
	    }

	    return this; // chaining
	  },
	  autoungrabify: function autoungrabify(bool) {
	    if (bool !== undefined) {
	      this._private.autoungrabify = bool ? true : false;
	    } else {
	      return this._private.autoungrabify;
	    }

	    return this; // chaining
	  },
	  autounselectify: function autounselectify(bool) {
	    if (bool !== undefined) {
	      this._private.autounselectify = bool ? true : false;
	    } else {
	      return this._private.autounselectify;
	    }

	    return this; // chaining
	  },
	  selectionType: function selectionType(selType) {
	    var _p = this._private;

	    if (_p.selectionType == null) {
	      _p.selectionType = defaultSelectionType;
	    }

	    if (selType !== undefined) {
	      if (selType === 'additive' || selType === 'single') {
	        _p.selectionType = selType;
	      }
	    } else {
	      return _p.selectionType;
	    }

	    return this;
	  },
	  panningEnabled: function panningEnabled(bool) {
	    if (bool !== undefined) {
	      this._private.panningEnabled = bool ? true : false;
	    } else {
	      return this._private.panningEnabled;
	    }

	    return this; // chaining
	  },
	  userPanningEnabled: function userPanningEnabled(bool) {
	    if (bool !== undefined) {
	      this._private.userPanningEnabled = bool ? true : false;
	    } else {
	      return this._private.userPanningEnabled;
	    }

	    return this; // chaining
	  },
	  zoomingEnabled: function zoomingEnabled(bool) {
	    if (bool !== undefined) {
	      this._private.zoomingEnabled = bool ? true : false;
	    } else {
	      return this._private.zoomingEnabled;
	    }

	    return this; // chaining
	  },
	  userZoomingEnabled: function userZoomingEnabled(bool) {
	    if (bool !== undefined) {
	      this._private.userZoomingEnabled = bool ? true : false;
	    } else {
	      return this._private.userZoomingEnabled;
	    }

	    return this; // chaining
	  },
	  boxSelectionEnabled: function boxSelectionEnabled(bool) {
	    if (bool !== undefined) {
	      this._private.boxSelectionEnabled = bool ? true : false;
	    } else {
	      return this._private.boxSelectionEnabled;
	    }

	    return this; // chaining
	  },
	  pan: function pan() {
	    var args = arguments;
	    var pan = this._private.pan;
	    var dim, val, dims, x, y;

	    switch (args.length) {
	      case 0:
	        // .pan()
	        return pan;

	      case 1:
	        if (string(args[0])) {
	          // .pan('x')
	          dim = args[0];
	          return pan[dim];
	        } else if (plainObject(args[0])) {
	          // .pan({ x: 0, y: 100 })
	          if (!this._private.panningEnabled) {
	            return this;
	          }

	          dims = args[0];
	          x = dims.x;
	          y = dims.y;

	          if (number(x)) {
	            pan.x = x;
	          }

	          if (number(y)) {
	            pan.y = y;
	          }

	          this.emit('pan viewport');
	        }

	        break;

	      case 2:
	        // .pan('x', 100)
	        if (!this._private.panningEnabled) {
	          return this;
	        }

	        dim = args[0];
	        val = args[1];

	        if ((dim === 'x' || dim === 'y') && number(val)) {
	          pan[dim] = val;
	        }

	        this.emit('pan viewport');
	        break;
	      // invalid
	    }

	    this.notify('viewport');
	    return this; // chaining
	  },
	  panBy: function panBy(arg0, arg1) {
	    var args = arguments;
	    var pan = this._private.pan;
	    var dim, val, dims, x, y;

	    if (!this._private.panningEnabled) {
	      return this;
	    }

	    switch (args.length) {
	      case 1:
	        if (plainObject(arg0)) {
	          // .panBy({ x: 0, y: 100 })
	          dims = args[0];
	          x = dims.x;
	          y = dims.y;

	          if (number(x)) {
	            pan.x += x;
	          }

	          if (number(y)) {
	            pan.y += y;
	          }

	          this.emit('pan viewport');
	        }

	        break;

	      case 2:
	        // .panBy('x', 100)
	        dim = arg0;
	        val = arg1;

	        if ((dim === 'x' || dim === 'y') && number(val)) {
	          pan[dim] += val;
	        }

	        this.emit('pan viewport');
	        break;
	      // invalid
	    }

	    this.notify('viewport');
	    return this; // chaining
	  },
	  fit: function fit(elements, padding) {
	    var viewportState = this.getFitViewport(elements, padding);

	    if (viewportState) {
	      var _p = this._private;
	      _p.zoom = viewportState.zoom;
	      _p.pan = viewportState.pan;
	      this.emit('pan zoom viewport');
	      this.notify('viewport');
	    }

	    return this; // chaining
	  },
	  getFitViewport: function getFitViewport(elements, padding) {
	    if (number(elements) && padding === undefined) {
	      // elements is optional
	      padding = elements;
	      elements = undefined;
	    }

	    if (!this._private.panningEnabled || !this._private.zoomingEnabled) {
	      return;
	    }

	    var bb;

	    if (string(elements)) {
	      var sel = elements;
	      elements = this.$(sel);
	    } else if (boundingBox(elements)) {
	      // assume bb
	      var bbe = elements;
	      bb = {
	        x1: bbe.x1,
	        y1: bbe.y1,
	        x2: bbe.x2,
	        y2: bbe.y2
	      };
	      bb.w = bb.x2 - bb.x1;
	      bb.h = bb.y2 - bb.y1;
	    } else if (!elementOrCollection(elements)) {
	      elements = this.mutableElements();
	    }

	    if (elementOrCollection(elements) && elements.empty()) {
	      return;
	    } // can't fit to nothing


	    bb = bb || elements.boundingBox();
	    var w = this.width();
	    var h = this.height();
	    var zoom;
	    padding = number(padding) ? padding : 0;

	    if (!isNaN(w) && !isNaN(h) && w > 0 && h > 0 && !isNaN(bb.w) && !isNaN(bb.h) && bb.w > 0 && bb.h > 0) {
	      zoom = Math.min((w - 2 * padding) / bb.w, (h - 2 * padding) / bb.h); // crop zoom

	      zoom = zoom > this._private.maxZoom ? this._private.maxZoom : zoom;
	      zoom = zoom < this._private.minZoom ? this._private.minZoom : zoom;
	      var pan = {
	        // now pan to middle
	        x: (w - zoom * (bb.x1 + bb.x2)) / 2,
	        y: (h - zoom * (bb.y1 + bb.y2)) / 2
	      };
	      return {
	        zoom: zoom,
	        pan: pan
	      };
	    }

	    return;
	  },
	  zoomRange: function zoomRange(min, max) {
	    var _p = this._private;

	    if (max == null) {
	      var opts = min;
	      min = opts.min;
	      max = opts.max;
	    }

	    if (number(min) && number(max) && min <= max) {
	      _p.minZoom = min;
	      _p.maxZoom = max;
	    } else if (number(min) && max === undefined && min <= _p.maxZoom) {
	      _p.minZoom = min;
	    } else if (number(max) && min === undefined && max >= _p.minZoom) {
	      _p.maxZoom = max;
	    }

	    return this;
	  },
	  minZoom: function minZoom(zoom) {
	    if (zoom === undefined) {
	      return this._private.minZoom;
	    } else {
	      return this.zoomRange({
	        min: zoom
	      });
	    }
	  },
	  maxZoom: function maxZoom(zoom) {
	    if (zoom === undefined) {
	      return this._private.maxZoom;
	    } else {
	      return this.zoomRange({
	        max: zoom
	      });
	    }
	  },
	  getZoomedViewport: function getZoomedViewport(params) {
	    var _p = this._private;
	    var currentPan = _p.pan;
	    var currentZoom = _p.zoom;
	    var pos; // in rendered px

	    var zoom;
	    var bail = false;

	    if (!_p.zoomingEnabled) {
	      // zooming disabled
	      bail = true;
	    }

	    if (number(params)) {
	      // then set the zoom
	      zoom = params;
	    } else if (plainObject(params)) {
	      // then zoom about a point
	      zoom = params.level;

	      if (params.position != null) {
	        pos = modelToRenderedPosition(params.position, currentZoom, currentPan);
	      } else if (params.renderedPosition != null) {
	        pos = params.renderedPosition;
	      }

	      if (pos != null && !_p.panningEnabled) {
	        // panning disabled
	        bail = true;
	      }
	    } // crop zoom


	    zoom = zoom > _p.maxZoom ? _p.maxZoom : zoom;
	    zoom = zoom < _p.minZoom ? _p.minZoom : zoom; // can't zoom with invalid params

	    if (bail || !number(zoom) || zoom === currentZoom || pos != null && (!number(pos.x) || !number(pos.y))) {
	      return null;
	    }

	    if (pos != null) {
	      // set zoom about position
	      var pan1 = currentPan;
	      var zoom1 = currentZoom;
	      var zoom2 = zoom;
	      var pan2 = {
	        x: -zoom2 / zoom1 * (pos.x - pan1.x) + pos.x,
	        y: -zoom2 / zoom1 * (pos.y - pan1.y) + pos.y
	      };
	      return {
	        zoomed: true,
	        panned: true,
	        zoom: zoom2,
	        pan: pan2
	      };
	    } else {
	      // just set the zoom
	      return {
	        zoomed: true,
	        panned: false,
	        zoom: zoom,
	        pan: currentPan
	      };
	    }
	  },
	  zoom: function zoom(params) {
	    if (params === undefined) {
	      // get
	      return this._private.zoom;
	    } else {
	      // set
	      var vp = this.getZoomedViewport(params);
	      var _p = this._private;

	      if (vp == null || !vp.zoomed) {
	        return this;
	      }

	      _p.zoom = vp.zoom;

	      if (vp.panned) {
	        _p.pan.x = vp.pan.x;
	        _p.pan.y = vp.pan.y;
	      }

	      this.emit('zoom' + (vp.panned ? ' pan' : '') + ' viewport');
	      this.notify('viewport');
	      return this; // chaining
	    }
	  },
	  viewport: function viewport(opts) {
	    var _p = this._private;
	    var zoomDefd = true;
	    var panDefd = true;
	    var events = []; // to trigger

	    var zoomFailed = false;
	    var panFailed = false;

	    if (!opts) {
	      return this;
	    }

	    if (!number(opts.zoom)) {
	      zoomDefd = false;
	    }

	    if (!plainObject(opts.pan)) {
	      panDefd = false;
	    }

	    if (!zoomDefd && !panDefd) {
	      return this;
	    }

	    if (zoomDefd) {
	      var z = opts.zoom;

	      if (z < _p.minZoom || z > _p.maxZoom || !_p.zoomingEnabled) {
	        zoomFailed = true;
	      } else {
	        _p.zoom = z;
	        events.push('zoom');
	      }
	    }

	    if (panDefd && (!zoomFailed || !opts.cancelOnFailedZoom) && _p.panningEnabled) {
	      var p = opts.pan;

	      if (number(p.x)) {
	        _p.pan.x = p.x;
	        panFailed = false;
	      }

	      if (number(p.y)) {
	        _p.pan.y = p.y;
	        panFailed = false;
	      }

	      if (!panFailed) {
	        events.push('pan');
	      }
	    }

	    if (events.length > 0) {
	      events.push('viewport');
	      this.emit(events.join(' '));
	      this.notify('viewport');
	    }

	    return this; // chaining
	  },
	  center: function center(elements) {
	    var pan = this.getCenterPan(elements);

	    if (pan) {
	      this._private.pan = pan;
	      this.emit('pan viewport');
	      this.notify('viewport');
	    }

	    return this; // chaining
	  },
	  getCenterPan: function getCenterPan(elements, zoom) {
	    if (!this._private.panningEnabled) {
	      return;
	    }

	    if (string(elements)) {
	      var selector = elements;
	      elements = this.mutableElements().filter(selector);
	    } else if (!elementOrCollection(elements)) {
	      elements = this.mutableElements();
	    }

	    if (elements.length === 0) {
	      return;
	    } // can't centre pan to nothing


	    var bb = elements.boundingBox();
	    var w = this.width();
	    var h = this.height();
	    zoom = zoom === undefined ? this._private.zoom : zoom;
	    var pan = {
	      // middle
	      x: (w - zoom * (bb.x1 + bb.x2)) / 2,
	      y: (h - zoom * (bb.y1 + bb.y2)) / 2
	    };
	    return pan;
	  },
	  reset: function reset() {
	    if (!this._private.panningEnabled || !this._private.zoomingEnabled) {
	      return this;
	    }

	    this.viewport({
	      pan: {
	        x: 0,
	        y: 0
	      },
	      zoom: 1
	    });
	    return this; // chaining
	  },
	  invalidateSize: function invalidateSize() {
	    this._private.sizeCache = null;
	  },
	  size: function size() {
	    var _p = this._private;
	    var container = _p.container;
	    return _p.sizeCache = _p.sizeCache || (container ? function () {
	      var style = window$1.getComputedStyle(container);

	      var val = function val(name) {
	        return parseFloat(style.getPropertyValue(name));
	      };

	      return {
	        width: container.clientWidth - val('padding-left') - val('padding-right'),
	        height: container.clientHeight - val('padding-top') - val('padding-bottom')
	      };
	    }() : {
	      // fallback if no container (not 0 b/c can be used for dividing etc)
	      width: 1,
	      height: 1
	    });
	  },
	  width: function width() {
	    return this.size().width;
	  },
	  height: function height() {
	    return this.size().height;
	  },
	  extent: function extent() {
	    var pan = this._private.pan;
	    var zoom = this._private.zoom;
	    var rb = this.renderedExtent();
	    var b = {
	      x1: (rb.x1 - pan.x) / zoom,
	      x2: (rb.x2 - pan.x) / zoom,
	      y1: (rb.y1 - pan.y) / zoom,
	      y2: (rb.y2 - pan.y) / zoom
	    };
	    b.w = b.x2 - b.x1;
	    b.h = b.y2 - b.y1;
	    return b;
	  },
	  renderedExtent: function renderedExtent() {
	    var width = this.width();
	    var height = this.height();
	    return {
	      x1: 0,
	      y1: 0,
	      x2: width,
	      y2: height,
	      w: width,
	      h: height
	    };
	  }
	}; // aliases

	corefn$8.centre = corefn$8.center; // backwards compatibility

	corefn$8.autolockNodes = corefn$8.autolock;
	corefn$8.autoungrabifyNodes = corefn$8.autoungrabify;

	var fn$6 = {
	  data: define$3.data({
	    field: 'data',
	    bindingEvent: 'data',
	    allowBinding: true,
	    allowSetting: true,
	    settingEvent: 'data',
	    settingTriggersEvent: true,
	    triggerFnName: 'trigger',
	    allowGetting: true
	  }),
	  removeData: define$3.removeData({
	    field: 'data',
	    event: 'data',
	    triggerFnName: 'trigger',
	    triggerEvent: true
	  }),
	  scratch: define$3.data({
	    field: 'scratch',
	    bindingEvent: 'scratch',
	    allowBinding: true,
	    allowSetting: true,
	    settingEvent: 'scratch',
	    settingTriggersEvent: true,
	    triggerFnName: 'trigger',
	    allowGetting: true
	  }),
	  removeScratch: define$3.removeData({
	    field: 'scratch',
	    event: 'scratch',
	    triggerFnName: 'trigger',
	    triggerEvent: true
	  })
	}; // aliases

	fn$6.attr = fn$6.data;
	fn$6.removeAttr = fn$6.removeData;

	var Core = function Core(opts) {
	  var cy = this;
	  opts = extend({}, opts);
	  var container = opts.container; // allow for passing a wrapped jquery object
	  // e.g. cytoscape({ container: $('#cy') })

	  if (container && !htmlElement(container) && htmlElement(container[0])) {
	    container = container[0];
	  }

	  var reg = container ? container._cyreg : null; // e.g. already registered some info (e.g. readies) via jquery

	  reg = reg || {};

	  if (reg && reg.cy) {
	    reg.cy.destroy();
	    reg = {}; // old instance => replace reg completely
	  }

	  var readies = reg.readies = reg.readies || [];

	  if (container) {
	    container._cyreg = reg;
	  } // make sure container assoc'd reg points to this cy


	  reg.cy = cy;
	  var head = window$1 !== undefined && container !== undefined && !opts.headless;
	  var options = opts;
	  options.layout = extend({
	    name: head ? 'grid' : 'null'
	  }, options.layout);
	  options.renderer = extend({
	    name: head ? 'canvas' : 'null'
	  }, options.renderer);

	  var defVal = function defVal(def, val, altVal) {
	    if (val !== undefined) {
	      return val;
	    } else if (altVal !== undefined) {
	      return altVal;
	    } else {
	      return def;
	    }
	  };

	  var _p = this._private = {
	    container: container,
	    // html dom ele container
	    ready: false,
	    // whether ready has been triggered
	    options: options,
	    // cached options
	    elements: new Collection(this),
	    // elements in the graph
	    listeners: [],
	    // list of listeners
	    aniEles: new Collection(this),
	    // elements being animated
	    data: {},
	    // data for the core
	    scratch: {},
	    // scratch object for core
	    layout: null,
	    renderer: null,
	    destroyed: false,
	    // whether destroy was called
	    notificationsEnabled: true,
	    // whether notifications are sent to the renderer
	    minZoom: 1e-50,
	    maxZoom: 1e50,
	    zoomingEnabled: defVal(true, options.zoomingEnabled),
	    userZoomingEnabled: defVal(true, options.userZoomingEnabled),
	    panningEnabled: defVal(true, options.panningEnabled),
	    userPanningEnabled: defVal(true, options.userPanningEnabled),
	    boxSelectionEnabled: defVal(true, options.boxSelectionEnabled),
	    autolock: defVal(false, options.autolock, options.autolockNodes),
	    autoungrabify: defVal(false, options.autoungrabify, options.autoungrabifyNodes),
	    autounselectify: defVal(false, options.autounselectify),
	    styleEnabled: options.styleEnabled === undefined ? head : options.styleEnabled,
	    zoom: number(options.zoom) ? options.zoom : 1,
	    pan: {
	      x: plainObject(options.pan) && number(options.pan.x) ? options.pan.x : 0,
	      y: plainObject(options.pan) && number(options.pan.y) ? options.pan.y : 0
	    },
	    animation: {
	      // object for currently-running animations
	      current: [],
	      queue: []
	    },
	    hasCompoundNodes: false
	  };

	  this.createEmitter(); // set selection type

	  this.selectionType(options.selectionType); // init zoom bounds

	  this.zoomRange({
	    min: options.minZoom,
	    max: options.maxZoom
	  });

	  var loadExtData = function loadExtData(extData, next) {
	    var anyIsPromise = extData.some(promise);

	    if (anyIsPromise) {
	      return Promise$1.all(extData).then(next); // load all data asynchronously, then exec rest of init
	    } else {
	      next(extData); // exec synchronously for convenience
	    }
	  }; // start with the default stylesheet so we have something before loading an external stylesheet


	  if (_p.styleEnabled) {
	    cy.setStyle([]);
	  } // create the renderer


	  var rendererOptions = extend({}, options, options.renderer); // allow rendering hints in top level options

	  cy.initRenderer(rendererOptions);

	  var setElesAndLayout = function setElesAndLayout(elements, onload, ondone) {
	    cy.notifications(false); // remove old elements

	    var oldEles = cy.mutableElements();

	    if (oldEles.length > 0) {
	      oldEles.remove();
	    }

	    if (elements != null) {
	      if (plainObject(elements) || array(elements)) {
	        cy.add(elements);
	      }
	    }

	    cy.one('layoutready', function (e) {
	      cy.notifications(true);
	      cy.emit(e); // we missed this event by turning notifications off, so pass it on

	      cy.one('load', onload);
	      cy.emitAndNotify('load');
	    }).one('layoutstop', function () {
	      cy.one('done', ondone);
	      cy.emit('done');
	    });
	    var layoutOpts = extend({}, cy._private.options.layout);
	    layoutOpts.eles = cy.elements();
	    cy.layout(layoutOpts).run();
	  };

	  loadExtData([options.style, options.elements], function (thens) {
	    var initStyle = thens[0];
	    var initEles = thens[1]; // init style

	    if (_p.styleEnabled) {
	      cy.style().append(initStyle);
	    } // initial load


	    setElesAndLayout(initEles, function () {
	      // onready
	      cy.startAnimationLoop();
	      _p.ready = true; // if a ready callback is specified as an option, the bind it

	      if (fn(options.ready)) {
	        cy.on('ready', options.ready);
	      } // bind all the ready handlers registered before creating this instance


	      for (var i = 0; i < readies.length; i++) {
	        var fn$1 = readies[i];
	        cy.on('ready', fn$1);
	      }

	      if (reg) {
	        reg.readies = [];
	      } // clear b/c we've bound them all and don't want to keep it around in case a new core uses the same div etc


	      cy.emit('ready');
	    }, options.done);
	  });
	};

	var corefn$9 = Core.prototype; // short alias

	extend(corefn$9, {
	  instanceString: function instanceString() {
	    return 'core';
	  },
	  isReady: function isReady() {
	    return this._private.ready;
	  },
	  destroyed: function destroyed() {
	    return this._private.destroyed;
	  },
	  ready: function ready(fn) {
	    if (this.isReady()) {
	      this.emitter().emit('ready', [], fn); // just calls fn as though triggered via ready event
	    } else {
	      this.on('ready', fn);
	    }

	    return this;
	  },
	  destroy: function destroy() {
	    var cy = this;
	    if (cy.destroyed()) return;
	    cy.stopAnimationLoop();
	    cy.destroyRenderer();
	    this.emit('destroy');
	    cy._private.destroyed = true;
	    return cy;
	  },
	  hasElementWithId: function hasElementWithId(id) {
	    return this._private.elements.hasElementWithId(id);
	  },
	  getElementById: function getElementById(id) {
	    return this._private.elements.getElementById(id);
	  },
	  hasCompoundNodes: function hasCompoundNodes() {
	    return this._private.hasCompoundNodes;
	  },
	  headless: function headless() {
	    return this._private.renderer.isHeadless();
	  },
	  styleEnabled: function styleEnabled() {
	    return this._private.styleEnabled;
	  },
	  addToPool: function addToPool(eles) {
	    this._private.elements.merge(eles);

	    return this; // chaining
	  },
	  removeFromPool: function removeFromPool(eles) {
	    this._private.elements.unmerge(eles);

	    return this;
	  },
	  container: function container() {
	    return this._private.container || null;
	  },
	  mount: function mount(container) {
	    if (container == null) {
	      return;
	    }

	    var cy = this;
	    var _p = cy._private;
	    var options = _p.options;

	    if (!htmlElement(container) && htmlElement(container[0])) {
	      container = container[0];
	    }

	    cy.stopAnimationLoop();
	    cy.destroyRenderer();
	    _p.container = container;
	    _p.styleEnabled = true;
	    cy.invalidateSize();
	    cy.initRenderer(extend({}, options, options.renderer, {
	      // allow custom renderer name to be re-used, otherwise use canvas
	      name: options.renderer.name === 'null' ? 'canvas' : options.renderer.name
	    }));
	    cy.startAnimationLoop();
	    cy.style(options.style);
	    cy.emit('mount');
	    return cy;
	  },
	  unmount: function unmount() {
	    var cy = this;
	    cy.stopAnimationLoop();
	    cy.destroyRenderer();
	    cy.initRenderer({
	      name: 'null'
	    });
	    cy.emit('unmount');
	    return cy;
	  },
	  options: function options() {
	    return copy(this._private.options);
	  },
	  json: function json(obj) {
	    var cy = this;
	    var _p = cy._private;
	    var eles = cy.mutableElements();

	    var getFreshRef = function getFreshRef(ele) {
	      return cy.getElementById(ele.id());
	    };

	    if (plainObject(obj)) {
	      // set
	      cy.startBatch();

	      if (obj.elements) {
	        var idInJson = {};

	        var updateEles = function updateEles(jsons, gr) {
	          var toAdd = [];
	          var toMod = [];

	          for (var i = 0; i < jsons.length; i++) {
	            var json = jsons[i];
	            var id = '' + json.data.id; // id must be string

	            var ele = cy.getElementById(id);
	            idInJson[id] = true;

	            if (ele.length !== 0) {
	              // existing element should be updated
	              toMod.push({
	                ele: ele,
	                json: json
	              });
	            } else {
	              // otherwise should be added
	              if (gr) {
	                json.group = gr;
	                toAdd.push(json);
	              } else {
	                toAdd.push(json);
	              }
	            }
	          }

	          cy.add(toAdd);

	          for (var _i = 0; _i < toMod.length; _i++) {
	            var _toMod$_i = toMod[_i],
	                _ele = _toMod$_i.ele,
	                _json = _toMod$_i.json;

	            _ele.json(_json);
	          }
	        };

	        if (array(obj.elements)) {
	          // elements: []
	          updateEles(obj.elements);
	        } else {
	          // elements: { nodes: [], edges: [] }
	          var grs = ['nodes', 'edges'];

	          for (var i = 0; i < grs.length; i++) {
	            var gr = grs[i];
	            var elements = obj.elements[gr];

	            if (array(elements)) {
	              updateEles(elements, gr);
	            }
	          }
	        }

	        var parentsToRemove = cy.collection();
	        eles.filter(function (ele) {
	          return !idInJson[ele.id()];
	        }).forEach(function (ele) {
	          if (ele.isParent()) {
	            parentsToRemove.merge(ele);
	          } else {
	            ele.remove();
	          }
	        }); // so that children are not removed w/parent

	        parentsToRemove.forEach(function (ele) {
	          return ele.children().move({
	            parent: null
	          });
	        }); // intermediate parents may be moved by prior line, so make sure we remove by fresh refs

	        parentsToRemove.forEach(function (ele) {
	          return getFreshRef(ele).remove();
	        });
	      }

	      if (obj.style) {
	        cy.style(obj.style);
	      }

	      if (obj.zoom != null && obj.zoom !== _p.zoom) {
	        cy.zoom(obj.zoom);
	      }

	      if (obj.pan) {
	        if (obj.pan.x !== _p.pan.x || obj.pan.y !== _p.pan.y) {
	          cy.pan(obj.pan);
	        }
	      }

	      if (obj.data) {
	        cy.data(obj.data);
	      }

	      var fields = ['minZoom', 'maxZoom', 'zoomingEnabled', 'userZoomingEnabled', 'panningEnabled', 'userPanningEnabled', 'boxSelectionEnabled', 'autolock', 'autoungrabify', 'autounselectify'];

	      for (var _i2 = 0; _i2 < fields.length; _i2++) {
	        var f = fields[_i2];

	        if (obj[f] != null) {
	          cy[f](obj[f]);
	        }
	      }

	      cy.endBatch();
	      return this; // chaining
	    } else {
	      // get
	      var flat = !!obj;
	      var json = {};

	      if (flat) {
	        json.elements = this.elements().map(function (ele) {
	          return ele.json();
	        });
	      } else {
	        json.elements = {};
	        eles.forEach(function (ele) {
	          var group = ele.group();

	          if (!json.elements[group]) {
	            json.elements[group] = [];
	          }

	          json.elements[group].push(ele.json());
	        });
	      }

	      if (this._private.styleEnabled) {
	        json.style = cy.style().json();
	      }

	      json.data = copy(cy.data());
	      var options = _p.options;
	      json.zoomingEnabled = _p.zoomingEnabled;
	      json.userZoomingEnabled = _p.userZoomingEnabled;
	      json.zoom = _p.zoom;
	      json.minZoom = _p.minZoom;
	      json.maxZoom = _p.maxZoom;
	      json.panningEnabled = _p.panningEnabled;
	      json.userPanningEnabled = _p.userPanningEnabled;
	      json.pan = copy(_p.pan);
	      json.boxSelectionEnabled = _p.boxSelectionEnabled;
	      json.renderer = copy(options.renderer);
	      json.hideEdgesOnViewport = options.hideEdgesOnViewport;
	      json.textureOnViewport = options.textureOnViewport;
	      json.wheelSensitivity = options.wheelSensitivity;
	      json.motionBlur = options.motionBlur;
	      return json;
	    }
	  }
	});
	corefn$9.$id = corefn$9.getElementById;
	[corefn, corefn$1, elesfn$v, corefn$2, corefn$3, corefn$4, corefn$5, corefn$6, corefn$7, corefn$8, fn$6].forEach(function (props) {
	  extend(corefn$9, props);
	});

	/* eslint-disable no-unused-vars */

	var defaults$9 = {
	  fit: true,
	  // whether to fit the viewport to the graph
	  directed: false,
	  // whether the tree is directed downwards (or edges can point in any direction if false)
	  padding: 30,
	  // padding on fit
	  circle: false,
	  // put depths in concentric circles if true, put depths top down if false
	  grid: false,
	  // whether to create an even grid into which the DAG is placed (circle:false only)
	  spacingFactor: 1.75,
	  // positive spacing factor, larger => more space between nodes (N.B. n/a if causes overlap)
	  boundingBox: undefined,
	  // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }
	  avoidOverlap: true,
	  // prevents node overlap, may overflow boundingBox if not enough space
	  nodeDimensionsIncludeLabels: false,
	  // Excludes the label when calculating node bounding boxes for the layout algorithm
	  roots: undefined,
	  // the roots of the trees
	  maximal: false,
	  // whether to shift nodes down their natural BFS depths in order to avoid upwards edges (DAGS only)
	  animate: false,
	  // whether to transition the node positions
	  animationDuration: 500,
	  // duration of animation in ms if enabled
	  animationEasing: undefined,
	  // easing of animation if enabled,
	  animateFilter: function animateFilter(node, i) {
	    return true;
	  },
	  // a function that determines whether the node should be animated.  All nodes animated by default on animate enabled.  Non-animated nodes are positioned immediately when the layout starts
	  ready: undefined,
	  // callback on layoutready
	  stop: undefined,
	  // callback on layoutstop
	  transform: function transform(node, position) {
	    return position;
	  } // transform a given node position. Useful for changing flow direction in discrete layouts

	};
	/* eslint-enable */

	var getInfo = function getInfo(ele) {
	  return ele.scratch('breadthfirst');
	};

	var setInfo = function setInfo(ele, obj) {
	  return ele.scratch('breadthfirst', obj);
	};

	function BreadthFirstLayout(options) {
	  this.options = extend({}, defaults$9, options);
	}

	BreadthFirstLayout.prototype.run = function () {
	  var params = this.options;
	  var options = params;
	  var cy = params.cy;
	  var eles = options.eles;
	  var nodes = eles.nodes().filter(function (n) {
	    return !n.isParent();
	  });
	  var graph = eles;
	  var directed = options.directed;
	  var maximal = options.maximal || options.maximalAdjustments > 0; // maximalAdjustments for compat. w/ old code

	  var bb = makeBoundingBox(options.boundingBox ? options.boundingBox : {
	    x1: 0,
	    y1: 0,
	    w: cy.width(),
	    h: cy.height()
	  });
	  var roots;

	  if (elementOrCollection(options.roots)) {
	    roots = options.roots;
	  } else if (array(options.roots)) {
	    var rootsArray = [];

	    for (var i = 0; i < options.roots.length; i++) {
	      var id = options.roots[i];
	      var ele = cy.getElementById(id);
	      rootsArray.push(ele);
	    }

	    roots = cy.collection(rootsArray);
	  } else if (string(options.roots)) {
	    roots = cy.$(options.roots);
	  } else {
	    if (directed) {
	      roots = nodes.roots();
	    } else {
	      var components = eles.components();
	      roots = cy.collection();

	      var _loop = function _loop(_i) {
	        var comp = components[_i];
	        var maxDegree = comp.maxDegree(false);
	        var compRoots = comp.filter(function (ele) {
	          return ele.degree(false) === maxDegree;
	        });
	        roots = roots.add(compRoots);
	      };

	      for (var _i = 0; _i < components.length; _i++) {
	        _loop(_i);
	      }
	    }
	  }

	  var depths = [];
	  var foundByBfs = {};

	  var addToDepth = function addToDepth(ele, d) {
	    if (depths[d] == null) {
	      depths[d] = [];
	    }

	    var i = depths[d].length;
	    depths[d].push(ele);
	    setInfo(ele, {
	      index: i,
	      depth: d
	    });
	  };

	  var changeDepth = function changeDepth(ele, newDepth) {
	    var _getInfo = getInfo(ele),
	        depth = _getInfo.depth,
	        index = _getInfo.index;

	    depths[depth][index] = null;
	    addToDepth(ele, newDepth);
	  }; // find the depths of the nodes


	  graph.bfs({
	    roots: roots,
	    directed: options.directed,
	    visit: function visit(node, edge, pNode, i, depth) {
	      var ele = node[0];
	      var id = ele.id();
	      addToDepth(ele, depth);
	      foundByBfs[id] = true;
	    }
	  }); // check for nodes not found by bfs

	  var orphanNodes = [];

	  for (var _i2 = 0; _i2 < nodes.length; _i2++) {
	    var _ele = nodes[_i2];

	    if (foundByBfs[_ele.id()]) {
	      continue;
	    } else {
	      orphanNodes.push(_ele);
	    }
	  } // assign the nodes a depth and index


	  var assignDepthsAt = function assignDepthsAt(i) {
	    var eles = depths[i];

	    for (var j = 0; j < eles.length; j++) {
	      var _ele2 = eles[j];

	      if (_ele2 == null) {
	        eles.splice(j, 1);
	        j--;
	        continue;
	      }

	      setInfo(_ele2, {
	        depth: i,
	        index: j
	      });
	    }
	  };

	  var assignDepths = function assignDepths() {
	    for (var _i3 = 0; _i3 < depths.length; _i3++) {
	      assignDepthsAt(_i3);
	    }
	  };

	  var adjustMaximally = function adjustMaximally(ele, shifted) {
	    var eInfo = getInfo(ele);
	    var incomers = ele.incomers().filter(function (el) {
	      return el.isNode() && eles.has(el);
	    });
	    var maxDepth = -1;
	    var id = ele.id();

	    for (var k = 0; k < incomers.length; k++) {
	      var incmr = incomers[k];
	      var iInfo = getInfo(incmr);
	      maxDepth = Math.max(maxDepth, iInfo.depth);
	    }

	    if (eInfo.depth <= maxDepth) {
	      if (shifted[id]) {
	        return null;
	      }

	      changeDepth(ele, maxDepth + 1);
	      shifted[id] = true;
	      return true;
	    }

	    return false;
	  }; // for the directed case, try to make the edges all go down (i.e. depth i => depth i + 1)


	  if (directed && maximal) {
	    var Q = [];
	    var shifted = {};

	    var enqueue = function enqueue(n) {
	      return Q.push(n);
	    };

	    var dequeue = function dequeue() {
	      return Q.shift();
	    };

	    nodes.forEach(function (n) {
	      return Q.push(n);
	    });

	    while (Q.length > 0) {
	      var _ele3 = dequeue();

	      var didShift = adjustMaximally(_ele3, shifted);

	      if (didShift) {
	        _ele3.outgoers().filter(function (el) {
	          return el.isNode() && eles.has(el);
	        }).forEach(enqueue);
	      } else if (didShift === null) {
	        warn('Detected double maximal shift for node `' + _ele3.id() + '`.  Bailing maximal adjustment due to cycle.  Use `options.maximal: true` only on DAGs.');
	        break; // exit on failure
	      }
	    }
	  }

	  assignDepths(); // clear holes
	  // find min distance we need to leave between nodes

	  var minDistance = 0;

	  if (options.avoidOverlap) {
	    for (var _i4 = 0; _i4 < nodes.length; _i4++) {
	      var n = nodes[_i4];
	      var nbb = n.layoutDimensions(options);
	      var w = nbb.w;
	      var h = nbb.h;
	      minDistance = Math.max(minDistance, w, h);
	    }
	  } // get the weighted percent for an element based on its connectivity to other levels


	  var cachedWeightedPercent = {};

	  var getWeightedPercent = function getWeightedPercent(ele) {
	    if (cachedWeightedPercent[ele.id()]) {
	      return cachedWeightedPercent[ele.id()];
	    }

	    var eleDepth = getInfo(ele).depth;
	    var neighbors = ele.neighborhood();
	    var percent = 0;
	    var samples = 0;

	    for (var _i5 = 0; _i5 < neighbors.length; _i5++) {
	      var neighbor = neighbors[_i5];

	      if (neighbor.isEdge() || neighbor.isParent() || !nodes.has(neighbor)) {
	        continue;
	      }

	      var bf = getInfo(neighbor);
	      var index = bf.index;
	      var depth = bf.depth; // unassigned neighbours shouldn't affect the ordering

	      if (index == null || depth == null) {
	        continue;
	      }

	      var nDepth = depths[depth].length;

	      if (depth < eleDepth) {
	        // only get influenced by elements above
	        percent += index / nDepth;
	        samples++;
	      }
	    }

	    samples = Math.max(1, samples);
	    percent = percent / samples;

	    if (samples === 0) {
	      // put lone nodes at the start
	      percent = 0;
	    }

	    cachedWeightedPercent[ele.id()] = percent;
	    return percent;
	  }; // rearrange the indices in each depth level based on connectivity


	  var sortFn = function sortFn(a, b) {
	    var apct = getWeightedPercent(a);
	    var bpct = getWeightedPercent(b);
	    var diff = apct - bpct;

	    if (diff === 0) {
	      return ascending(a.id(), b.id()); // make sure sort doesn't have don't-care comparisons
	    } else {
	      return diff;
	    }
	  }; // sort each level to make connected nodes closer


	  for (var _i6 = 0; _i6 < depths.length; _i6++) {
	    depths[_i6].sort(sortFn);

	    assignDepthsAt(_i6);
	  } // assign orphan nodes to a new top-level depth


	  var orphanDepth = [];

	  for (var _i7 = 0; _i7 < orphanNodes.length; _i7++) {
	    orphanDepth.push(orphanNodes[_i7]);
	  }

	  depths.unshift(orphanDepth);
	  assignDepths();
	  var biggestDepthSize = 0;

	  for (var _i8 = 0; _i8 < depths.length; _i8++) {
	    biggestDepthSize = Math.max(depths[_i8].length, biggestDepthSize);
	  }

	  var center = {
	    x: bb.x1 + bb.w / 2,
	    y: bb.x1 + bb.h / 2
	  };
	  var maxDepthSize = depths.reduce(function (max, eles) {
	    return Math.max(max, eles.length);
	  }, 0);

	  var getPosition = function getPosition(ele) {
	    var _getInfo2 = getInfo(ele),
	        depth = _getInfo2.depth,
	        index = _getInfo2.index;

	    var depthSize = depths[depth].length;
	    var distanceX = Math.max(bb.w / ((options.grid ? maxDepthSize : depthSize) + 1), minDistance);
	    var distanceY = Math.max(bb.h / (depths.length + 1), minDistance);
	    var radiusStepSize = Math.min(bb.w / 2 / depths.length, bb.h / 2 / depths.length);
	    radiusStepSize = Math.max(radiusStepSize, minDistance);

	    if (!options.circle) {
	      var epos = {
	        x: center.x + (index + 1 - (depthSize + 1) / 2) * distanceX,
	        y: (depth + 1) * distanceY
	      };
	      return epos;
	    } else {
	      var radius = radiusStepSize * depth + radiusStepSize - (depths.length > 0 && depths[0].length <= 3 ? radiusStepSize / 2 : 0);
	      var theta = 2 * Math.PI / depths[depth].length * index;

	      if (depth === 0 && depths[0].length === 1) {
	        radius = 1;
	      }

	      return {
	        x: center.x + radius * Math.cos(theta),
	        y: center.y + radius * Math.sin(theta)
	      };
	    }
	  };

	  nodes.layoutPositions(this, options, getPosition);
	  return this; // chaining
	};

	var defaults$a = {
	  fit: true,
	  // whether to fit the viewport to the graph
	  padding: 30,
	  // the padding on fit
	  boundingBox: undefined,
	  // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }
	  avoidOverlap: true,
	  // prevents node overlap, may overflow boundingBox and radius if not enough space
	  nodeDimensionsIncludeLabels: false,
	  // Excludes the label when calculating node bounding boxes for the layout algorithm
	  spacingFactor: undefined,
	  // Applies a multiplicative factor (>0) to expand or compress the overall area that the nodes take up
	  radius: undefined,
	  // the radius of the circle
	  startAngle: 3 / 2 * Math.PI,
	  // where nodes start in radians
	  sweep: undefined,
	  // how many radians should be between the first and last node (defaults to full circle)
	  clockwise: true,
	  // whether the layout should go clockwise (true) or counterclockwise/anticlockwise (false)
	  sort: undefined,
	  // a sorting function to order the nodes; e.g. function(a, b){ return a.data('weight') - b.data('weight') }
	  animate: false,
	  // whether to transition the node positions
	  animationDuration: 500,
	  // duration of animation in ms if enabled
	  animationEasing: undefined,
	  // easing of animation if enabled
	  animateFilter: function animateFilter(node, i) {
	    return true;
	  },
	  // a function that determines whether the node should be animated.  All nodes animated by default on animate enabled.  Non-animated nodes are positioned immediately when the layout starts
	  ready: undefined,
	  // callback on layoutready
	  stop: undefined,
	  // callback on layoutstop
	  transform: function transform(node, position) {
	    return position;
	  } // transform a given node position. Useful for changing flow direction in discrete layouts 

	};

	function CircleLayout(options) {
	  this.options = extend({}, defaults$a, options);
	}

	CircleLayout.prototype.run = function () {
	  var params = this.options;
	  var options = params;
	  var cy = params.cy;
	  var eles = options.eles;
	  var clockwise = options.counterclockwise !== undefined ? !options.counterclockwise : options.clockwise;
	  var nodes = eles.nodes().not(':parent');

	  if (options.sort) {
	    nodes = nodes.sort(options.sort);
	  }

	  var bb = makeBoundingBox(options.boundingBox ? options.boundingBox : {
	    x1: 0,
	    y1: 0,
	    w: cy.width(),
	    h: cy.height()
	  });
	  var center = {
	    x: bb.x1 + bb.w / 2,
	    y: bb.y1 + bb.h / 2
	  };
	  var sweep = options.sweep === undefined ? 2 * Math.PI - 2 * Math.PI / nodes.length : options.sweep;
	  var dTheta = sweep / Math.max(1, nodes.length - 1);
	  var r;
	  var minDistance = 0;

	  for (var i = 0; i < nodes.length; i++) {
	    var n = nodes[i];
	    var nbb = n.layoutDimensions(options);
	    var w = nbb.w;
	    var h = nbb.h;
	    minDistance = Math.max(minDistance, w, h);
	  }

	  if (number(options.radius)) {
	    r = options.radius;
	  } else if (nodes.length <= 1) {
	    r = 0;
	  } else {
	    r = Math.min(bb.h, bb.w) / 2 - minDistance;
	  } // calculate the radius


	  if (nodes.length > 1 && options.avoidOverlap) {
	    // but only if more than one node (can't overlap)
	    minDistance *= 1.75; // just to have some nice spacing

	    var dcos = Math.cos(dTheta) - Math.cos(0);
	    var dsin = Math.sin(dTheta) - Math.sin(0);
	    var rMin = Math.sqrt(minDistance * minDistance / (dcos * dcos + dsin * dsin)); // s.t. no nodes overlapping

	    r = Math.max(rMin, r);
	  }

	  var getPos = function getPos(ele, i) {
	    var theta = options.startAngle + i * dTheta * (clockwise ? 1 : -1);
	    var rx = r * Math.cos(theta);
	    var ry = r * Math.sin(theta);
	    var pos = {
	      x: center.x + rx,
	      y: center.y + ry
	    };
	    return pos;
	  };

	  nodes.layoutPositions(this, options, getPos);
	  return this; // chaining
	};

	var defaults$b = {
	  fit: true,
	  // whether to fit the viewport to the graph
	  padding: 30,
	  // the padding on fit
	  startAngle: 3 / 2 * Math.PI,
	  // where nodes start in radians
	  sweep: undefined,
	  // how many radians should be between the first and last node (defaults to full circle)
	  clockwise: true,
	  // whether the layout should go clockwise (true) or counterclockwise/anticlockwise (false)
	  equidistant: false,
	  // whether levels have an equal radial distance betwen them, may cause bounding box overflow
	  minNodeSpacing: 10,
	  // min spacing between outside of nodes (used for radius adjustment)
	  boundingBox: undefined,
	  // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }
	  avoidOverlap: true,
	  // prevents node overlap, may overflow boundingBox if not enough space
	  nodeDimensionsIncludeLabels: false,
	  // Excludes the label when calculating node bounding boxes for the layout algorithm
	  height: undefined,
	  // height of layout area (overrides container height)
	  width: undefined,
	  // width of layout area (overrides container width)
	  spacingFactor: undefined,
	  // Applies a multiplicative factor (>0) to expand or compress the overall area that the nodes take up
	  concentric: function concentric(node) {
	    // returns numeric value for each node, placing higher nodes in levels towards the centre
	    return node.degree();
	  },
	  levelWidth: function levelWidth(nodes) {
	    // the letiation of concentric values in each level
	    return nodes.maxDegree() / 4;
	  },
	  animate: false,
	  // whether to transition the node positions
	  animationDuration: 500,
	  // duration of animation in ms if enabled
	  animationEasing: undefined,
	  // easing of animation if enabled
	  animateFilter: function animateFilter(node, i) {
	    return true;
	  },
	  // a function that determines whether the node should be animated.  All nodes animated by default on animate enabled.  Non-animated nodes are positioned immediately when the layout starts
	  ready: undefined,
	  // callback on layoutready
	  stop: undefined,
	  // callback on layoutstop
	  transform: function transform(node, position) {
	    return position;
	  } // transform a given node position. Useful for changing flow direction in discrete layouts

	};

	function ConcentricLayout(options) {
	  this.options = extend({}, defaults$b, options);
	}

	ConcentricLayout.prototype.run = function () {
	  var params = this.options;
	  var options = params;
	  var clockwise = options.counterclockwise !== undefined ? !options.counterclockwise : options.clockwise;
	  var cy = params.cy;
	  var eles = options.eles;
	  var nodes = eles.nodes().not(':parent');
	  var bb = makeBoundingBox(options.boundingBox ? options.boundingBox : {
	    x1: 0,
	    y1: 0,
	    w: cy.width(),
	    h: cy.height()
	  });
	  var center = {
	    x: bb.x1 + bb.w / 2,
	    y: bb.y1 + bb.h / 2
	  };
	  var nodeValues = []; // { node, value }

	  var maxNodeSize = 0;

	  for (var i = 0; i < nodes.length; i++) {
	    var node = nodes[i];
	    var value = void 0; // calculate the node value

	    value = options.concentric(node);
	    nodeValues.push({
	      value: value,
	      node: node
	    }); // for style mapping

	    node._private.scratch.concentric = value;
	  } // in case we used the `concentric` in style


	  nodes.updateStyle(); // calculate max size now based on potentially updated mappers

	  for (var _i = 0; _i < nodes.length; _i++) {
	    var _node = nodes[_i];

	    var nbb = _node.layoutDimensions(options);

	    maxNodeSize = Math.max(maxNodeSize, nbb.w, nbb.h);
	  } // sort node values in descreasing order


	  nodeValues.sort(function (a, b) {
	    return b.value - a.value;
	  });
	  var levelWidth = options.levelWidth(nodes); // put the values into levels

	  var levels = [[]];
	  var currentLevel = levels[0];

	  for (var _i2 = 0; _i2 < nodeValues.length; _i2++) {
	    var val = nodeValues[_i2];

	    if (currentLevel.length > 0) {
	      var diff = Math.abs(currentLevel[0].value - val.value);

	      if (diff >= levelWidth) {
	        currentLevel = [];
	        levels.push(currentLevel);
	      }
	    }

	    currentLevel.push(val);
	  } // create positions from levels


	  var minDist = maxNodeSize + options.minNodeSpacing; // min dist between nodes

	  if (!options.avoidOverlap) {
	    // then strictly constrain to bb
	    var firstLvlHasMulti = levels.length > 0 && levels[0].length > 1;
	    var maxR = Math.min(bb.w, bb.h) / 2 - minDist;
	    var rStep = maxR / (levels.length + firstLvlHasMulti ? 1 : 0);
	    minDist = Math.min(minDist, rStep);
	  } // find the metrics for each level


	  var r = 0;

	  for (var _i3 = 0; _i3 < levels.length; _i3++) {
	    var level = levels[_i3];
	    var sweep = options.sweep === undefined ? 2 * Math.PI - 2 * Math.PI / level.length : options.sweep;
	    var dTheta = level.dTheta = sweep / Math.max(1, level.length - 1); // calculate the radius

	    if (level.length > 1 && options.avoidOverlap) {
	      // but only if more than one node (can't overlap)
	      var dcos = Math.cos(dTheta) - Math.cos(0);
	      var dsin = Math.sin(dTheta) - Math.sin(0);
	      var rMin = Math.sqrt(minDist * minDist / (dcos * dcos + dsin * dsin)); // s.t. no nodes overlapping

	      r = Math.max(rMin, r);
	    }

	    level.r = r;
	    r += minDist;
	  }

	  if (options.equidistant) {
	    var rDeltaMax = 0;
	    var _r = 0;

	    for (var _i4 = 0; _i4 < levels.length; _i4++) {
	      var _level = levels[_i4];
	      var rDelta = _level.r - _r;
	      rDeltaMax = Math.max(rDeltaMax, rDelta);
	    }

	    _r = 0;

	    for (var _i5 = 0; _i5 < levels.length; _i5++) {
	      var _level2 = levels[_i5];

	      if (_i5 === 0) {
	        _r = _level2.r;
	      }

	      _level2.r = _r;
	      _r += rDeltaMax;
	    }
	  } // calculate the node positions


	  var pos = {}; // id => position

	  for (var _i6 = 0; _i6 < levels.length; _i6++) {
	    var _level3 = levels[_i6];
	    var _dTheta = _level3.dTheta;
	    var _r2 = _level3.r;

	    for (var j = 0; j < _level3.length; j++) {
	      var _val = _level3[j];
	      var theta = options.startAngle + (clockwise ? 1 : -1) * _dTheta * j;
	      var p = {
	        x: center.x + _r2 * Math.cos(theta),
	        y: center.y + _r2 * Math.sin(theta)
	      };
	      pos[_val.node.id()] = p;
	    }
	  } // position the nodes


	  nodes.layoutPositions(this, options, function (ele) {
	    var id = ele.id();
	    return pos[id];
	  });
	  return this; // chaining
	};

	/*
	The CoSE layout was written by Gerardo Huck.
	https://www.linkedin.com/in/gerardohuck/

	Based on the following article:
	http://dl.acm.org/citation.cfm?id=1498047

	Modifications tracked on Github.
	*/
	var DEBUG;
	/**
	 * @brief :  default layout options
	 */

	var defaults$c = {
	  // Called on `layoutready`
	  ready: function ready() {},
	  // Called on `layoutstop`
	  stop: function stop() {},
	  // Whether to animate while running the layout
	  // true : Animate continuously as the layout is running
	  // false : Just show the end result
	  // 'end' : Animate with the end result, from the initial positions to the end positions
	  animate: true,
	  // Easing of the animation for animate:'end'
	  animationEasing: undefined,
	  // The duration of the animation for animate:'end'
	  animationDuration: undefined,
	  // A function that determines whether the node should be animated
	  // All nodes animated by default on animate enabled
	  // Non-animated nodes are positioned immediately when the layout starts
	  animateFilter: function animateFilter(node, i) {
	    return true;
	  },
	  // The layout animates only after this many milliseconds for animate:true
	  // (prevents flashing on fast runs)
	  animationThreshold: 250,
	  // Number of iterations between consecutive screen positions update
	  refresh: 20,
	  // Whether to fit the network view after when done
	  fit: true,
	  // Padding on fit
	  padding: 30,
	  // Constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }
	  boundingBox: undefined,
	  // Excludes the label when calculating node bounding boxes for the layout algorithm
	  nodeDimensionsIncludeLabels: false,
	  // Randomize the initial positions of the nodes (true) or use existing positions (false)
	  randomize: false,
	  // Extra spacing between components in non-compound graphs
	  componentSpacing: 40,
	  // Node repulsion (non overlapping) multiplier
	  nodeRepulsion: function nodeRepulsion(node) {
	    return 2048;
	  },
	  // Node repulsion (overlapping) multiplier
	  nodeOverlap: 4,
	  // Ideal edge (non nested) length
	  idealEdgeLength: function idealEdgeLength(edge) {
	    return 32;
	  },
	  // Divisor to compute edge forces
	  edgeElasticity: function edgeElasticity(edge) {
	    return 32;
	  },
	  // Nesting factor (multiplier) to compute ideal edge length for nested edges
	  nestingFactor: 1.2,
	  // Gravity force (constant)
	  gravity: 1,
	  // Maximum number of iterations to perform
	  numIter: 1000,
	  // Initial temperature (maximum node displacement)
	  initialTemp: 1000,
	  // Cooling factor (how the temperature is reduced between consecutive iterations
	  coolingFactor: 0.99,
	  // Lower temperature threshold (below this point the layout will end)
	  minTemp: 1.0
	};
	/**
	 * @brief       : constructor
	 * @arg options : object containing layout options
	 */

	function CoseLayout(options) {
	  this.options = extend({}, defaults$c, options);
	  this.options.layout = this;
	}
	/**
	 * @brief : runs the layout
	 */


	CoseLayout.prototype.run = function () {
	  var options = this.options;
	  var cy = options.cy;
	  var layout = this;
	  layout.stopped = false;

	  if (options.animate === true || options.animate === false) {
	    layout.emit({
	      type: 'layoutstart',
	      layout: layout
	    });
	  } // Set DEBUG - Global variable


	  if (true === options.debug) {
	    DEBUG = true;
	  } else {
	    DEBUG = false;
	  } // Initialize layout info


	  var layoutInfo = createLayoutInfo(cy, layout, options); // Show LayoutInfo contents if debugging

	  if (DEBUG) {
	    printLayoutInfo(layoutInfo);
	  } // If required, randomize node positions


	  if (options.randomize) {
	    randomizePositions(layoutInfo);
	  }

	  var startTime = performanceNow();

	  var refresh = function refresh() {
	    refreshPositions(layoutInfo, cy, options); // Fit the graph if necessary

	    if (true === options.fit) {
	      cy.fit(options.padding);
	    }
	  };

	  var mainLoop = function mainLoop(i) {
	    if (layout.stopped || i >= options.numIter) {
	      // logDebug("Layout manually stopped. Stopping computation in step " + i);
	      return false;
	    } // Do one step in the phisical simulation


	    step$1(layoutInfo, options); // Update temperature

	    layoutInfo.temperature = layoutInfo.temperature * options.coolingFactor; // logDebug("New temperature: " + layoutInfo.temperature);

	    if (layoutInfo.temperature < options.minTemp) {
	      // logDebug("Temperature drop below minimum threshold. Stopping computation in step " + i);
	      return false;
	    }

	    return true;
	  };

	  var done = function done() {
	    if (options.animate === true || options.animate === false) {
	      refresh(); // Layout has finished

	      layout.one('layoutstop', options.stop);
	      layout.emit({
	        type: 'layoutstop',
	        layout: layout
	      });
	    } else {
	      var nodes = options.eles.nodes();
	      var getScaledPos = getScaleInBoundsFn(layoutInfo, options, nodes);
	      nodes.layoutPositions(layout, options, getScaledPos);
	    }
	  };

	  var i = 0;
	  var loopRet = true;

	  if (options.animate === true) {
	    var frame = function frame() {
	      var f = 0;

	      while (loopRet && f < options.refresh) {
	        loopRet = mainLoop(i);
	        i++;
	        f++;
	      }

	      if (!loopRet) {
	        // it's done
	        separateComponents(layoutInfo, options);
	        done();
	      } else {
	        var now = performanceNow();

	        if (now - startTime >= options.animationThreshold) {
	          refresh();
	        }

	        requestAnimationFrame(frame);
	      }
	    };

	    frame();
	  } else {
	    while (loopRet) {
	      loopRet = mainLoop(i);
	      i++;
	    }

	    separateComponents(layoutInfo, options);
	    done();
	  }

	  return this; // chaining
	};
	/**
	 * @brief : called on continuous layouts to stop them before they finish
	 */


	CoseLayout.prototype.stop = function () {
	  this.stopped = true;

	  if (this.thread) {
	    this.thread.stop();
	  }

	  this.emit('layoutstop');
	  return this; // chaining
	};

	CoseLayout.prototype.destroy = function () {
	  if (this.thread) {
	    this.thread.stop();
	  }

	  return this; // chaining
	};
	/**
	 * @brief     : Creates an object which is contains all the data
	 *              used in the layout process
	 * @arg cy    : cytoscape.js object
	 * @return    : layoutInfo object initialized
	 */


	var createLayoutInfo = function createLayoutInfo(cy, layout, options) {
	  // Shortcut
	  var edges = options.eles.edges();
	  var nodes = options.eles.nodes();
	  var layoutInfo = {
	    isCompound: cy.hasCompoundNodes(),
	    layoutNodes: [],
	    idToIndex: {},
	    nodeSize: nodes.size(),
	    graphSet: [],
	    indexToGraph: [],
	    layoutEdges: [],
	    edgeSize: edges.size(),
	    temperature: options.initialTemp,
	    clientWidth: cy.width(),
	    clientHeight: cy.width(),
	    boundingBox: makeBoundingBox(options.boundingBox ? options.boundingBox : {
	      x1: 0,
	      y1: 0,
	      w: cy.width(),
	      h: cy.height()
	    })
	  };
	  var components = options.eles.components();
	  var id2cmptId = {};

	  for (var i = 0; i < components.length; i++) {
	    var component = components[i];

	    for (var j = 0; j < component.length; j++) {
	      var node = component[j];
	      id2cmptId[node.id()] = i;
	    }
	  } // Iterate over all nodes, creating layout nodes


	  for (var i = 0; i < layoutInfo.nodeSize; i++) {
	    var n = nodes[i];
	    var nbb = n.layoutDimensions(options);
	    var tempNode = {};
	    tempNode.isLocked = n.locked();
	    tempNode.id = n.data('id');
	    tempNode.parentId = n.data('parent');
	    tempNode.cmptId = id2cmptId[n.id()];
	    tempNode.children = [];
	    tempNode.positionX = n.position('x');
	    tempNode.positionY = n.position('y');
	    tempNode.offsetX = 0;
	    tempNode.offsetY = 0;
	    tempNode.height = nbb.w;
	    tempNode.width = nbb.h;
	    tempNode.maxX = tempNode.positionX + tempNode.width / 2;
	    tempNode.minX = tempNode.positionX - tempNode.width / 2;
	    tempNode.maxY = tempNode.positionY + tempNode.height / 2;
	    tempNode.minY = tempNode.positionY - tempNode.height / 2;
	    tempNode.padLeft = parseFloat(n.style('padding'));
	    tempNode.padRight = parseFloat(n.style('padding'));
	    tempNode.padTop = parseFloat(n.style('padding'));
	    tempNode.padBottom = parseFloat(n.style('padding')); // forces

	    tempNode.nodeRepulsion = fn(options.nodeRepulsion) ? options.nodeRepulsion(n) : options.nodeRepulsion; // Add new node

	    layoutInfo.layoutNodes.push(tempNode); // Add entry to id-index map

	    layoutInfo.idToIndex[tempNode.id] = i;
	  } // Inline implementation of a queue, used for traversing the graph in BFS order


	  var queue = [];
	  var start = 0; // Points to the start the queue

	  var end = -1; // Points to the end of the queue

	  var tempGraph = []; // Second pass to add child information and
	  // initialize queue for hierarchical traversal

	  for (var i = 0; i < layoutInfo.nodeSize; i++) {
	    var n = layoutInfo.layoutNodes[i];
	    var p_id = n.parentId; // Check if node n has a parent node

	    if (null != p_id) {
	      // Add node Id to parent's list of children
	      layoutInfo.layoutNodes[layoutInfo.idToIndex[p_id]].children.push(n.id);
	    } else {
	      // If a node doesn't have a parent, then it's in the root graph
	      queue[++end] = n.id;
	      tempGraph.push(n.id);
	    }
	  } // Add root graph to graphSet


	  layoutInfo.graphSet.push(tempGraph); // Traverse the graph, level by level,

	  while (start <= end) {
	    // Get the node to visit and remove it from queue
	    var node_id = queue[start++];
	    var node_ix = layoutInfo.idToIndex[node_id];
	    var node = layoutInfo.layoutNodes[node_ix];
	    var children = node.children;

	    if (children.length > 0) {
	      // Add children nodes as a new graph to graph set
	      layoutInfo.graphSet.push(children); // Add children to que queue to be visited

	      for (var i = 0; i < children.length; i++) {
	        queue[++end] = children[i];
	      }
	    }
	  } // Create indexToGraph map


	  for (var i = 0; i < layoutInfo.graphSet.length; i++) {
	    var graph = layoutInfo.graphSet[i];

	    for (var j = 0; j < graph.length; j++) {
	      var index = layoutInfo.idToIndex[graph[j]];
	      layoutInfo.indexToGraph[index] = i;
	    }
	  } // Iterate over all edges, creating Layout Edges


	  for (var i = 0; i < layoutInfo.edgeSize; i++) {
	    var e = edges[i];
	    var tempEdge = {};
	    tempEdge.id = e.data('id');
	    tempEdge.sourceId = e.data('source');
	    tempEdge.targetId = e.data('target'); // Compute ideal length

	    var idealLength = fn(options.idealEdgeLength) ? options.idealEdgeLength(e) : options.idealEdgeLength;
	    var elasticity = fn(options.edgeElasticity) ? options.edgeElasticity(e) : options.edgeElasticity; // Check if it's an inter graph edge

	    var sourceIx = layoutInfo.idToIndex[tempEdge.sourceId];
	    var targetIx = layoutInfo.idToIndex[tempEdge.targetId];
	    var sourceGraph = layoutInfo.indexToGraph[sourceIx];
	    var targetGraph = layoutInfo.indexToGraph[targetIx];

	    if (sourceGraph != targetGraph) {
	      // Find lowest common graph ancestor
	      var lca = findLCA(tempEdge.sourceId, tempEdge.targetId, layoutInfo); // Compute sum of node depths, relative to lca graph

	      var lcaGraph = layoutInfo.graphSet[lca];
	      var depth = 0; // Source depth

	      var tempNode = layoutInfo.layoutNodes[sourceIx];

	      while (-1 === lcaGraph.indexOf(tempNode.id)) {
	        tempNode = layoutInfo.layoutNodes[layoutInfo.idToIndex[tempNode.parentId]];
	        depth++;
	      } // Target depth


	      tempNode = layoutInfo.layoutNodes[targetIx];

	      while (-1 === lcaGraph.indexOf(tempNode.id)) {
	        tempNode = layoutInfo.layoutNodes[layoutInfo.idToIndex[tempNode.parentId]];
	        depth++;
	      } // logDebug('LCA of nodes ' + tempEdge.sourceId + ' and ' + tempEdge.targetId +
	      //  ". Index: " + lca + " Contents: " + lcaGraph.toString() +
	      //  ". Depth: " + depth);
	      // Update idealLength


	      idealLength *= depth * options.nestingFactor;
	    }

	    tempEdge.idealLength = idealLength;
	    tempEdge.elasticity = elasticity;
	    layoutInfo.layoutEdges.push(tempEdge);
	  } // Finally, return layoutInfo object


	  return layoutInfo;
	};
	/**
	 * @brief : This function finds the index of the lowest common
	 *          graph ancestor between 2 nodes in the subtree
	 *          (from the graph hierarchy induced tree) whose
	 *          root is graphIx
	 *
	 * @arg node1: node1's ID
	 * @arg node2: node2's ID
	 * @arg layoutInfo: layoutInfo object
	 *
	 */


	var findLCA = function findLCA(node1, node2, layoutInfo) {
	  // Find their common ancester, starting from the root graph
	  var res = findLCA_aux(node1, node2, 0, layoutInfo);

	  if (2 > res.count) {
	    // If aux function couldn't find the common ancester,
	    // then it is the root graph
	    return 0;
	  } else {
	    return res.graph;
	  }
	};
	/**
	 * @brief          : Auxiliary function used for LCA computation
	 *
	 * @arg node1      : node1's ID
	 * @arg node2      : node2's ID
	 * @arg graphIx    : subgraph index
	 * @arg layoutInfo : layoutInfo object
	 *
	 * @return         : object of the form {count: X, graph: Y}, where:
	 *                   X is the number of ancesters (max: 2) found in
	 *                   graphIx (and it's subgraphs),
	 *                   Y is the graph index of the lowest graph containing
	 *                   all X nodes
	 */


	var findLCA_aux = function findLCA_aux(node1, node2, graphIx, layoutInfo) {
	  var graph = layoutInfo.graphSet[graphIx]; // If both nodes belongs to graphIx

	  if (-1 < graph.indexOf(node1) && -1 < graph.indexOf(node2)) {
	    return {
	      count: 2,
	      graph: graphIx
	    };
	  } // Make recursive calls for all subgraphs


	  var c = 0;

	  for (var i = 0; i < graph.length; i++) {
	    var nodeId = graph[i];
	    var nodeIx = layoutInfo.idToIndex[nodeId];
	    var children = layoutInfo.layoutNodes[nodeIx].children; // If the node has no child, skip it

	    if (0 === children.length) {
	      continue;
	    }

	    var childGraphIx = layoutInfo.indexToGraph[layoutInfo.idToIndex[children[0]]];
	    var result = findLCA_aux(node1, node2, childGraphIx, layoutInfo);

	    if (0 === result.count) {
	      // Neither node1 nor node2 are present in this subgraph
	      continue;
	    } else if (1 === result.count) {
	      // One of (node1, node2) is present in this subgraph
	      c++;

	      if (2 === c) {
	        // We've already found both nodes, no need to keep searching
	        break;
	      }
	    } else {
	      // Both nodes are present in this subgraph
	      return result;
	    }
	  }

	  return {
	    count: c,
	    graph: graphIx
	  };
	};
	/**
	 * @brief: printsLayoutInfo into js console
	 *         Only used for debbuging
	 */


	if (false) {
	  var printLayoutInfo;
	}
	/**
	 * @brief : Randomizes the position of all nodes
	 */


	var randomizePositions = function randomizePositions(layoutInfo, cy) {
	  var width = layoutInfo.clientWidth;
	  var height = layoutInfo.clientHeight;

	  for (var i = 0; i < layoutInfo.nodeSize; i++) {
	    var n = layoutInfo.layoutNodes[i]; // No need to randomize compound nodes or locked nodes

	    if (0 === n.children.length && !n.isLocked) {
	      n.positionX = Math.random() * width;
	      n.positionY = Math.random() * height;
	    }
	  }
	};

	var getScaleInBoundsFn = function getScaleInBoundsFn(layoutInfo, options, nodes) {
	  var bb = layoutInfo.boundingBox;
	  var coseBB = {
	    x1: Infinity,
	    x2: -Infinity,
	    y1: Infinity,
	    y2: -Infinity
	  };

	  if (options.boundingBox) {
	    nodes.forEach(function (node) {
	      var lnode = layoutInfo.layoutNodes[layoutInfo.idToIndex[node.data('id')]];
	      coseBB.x1 = Math.min(coseBB.x1, lnode.positionX);
	      coseBB.x2 = Math.max(coseBB.x2, lnode.positionX);
	      coseBB.y1 = Math.min(coseBB.y1, lnode.positionY);
	      coseBB.y2 = Math.max(coseBB.y2, lnode.positionY);
	    });
	    coseBB.w = coseBB.x2 - coseBB.x1;
	    coseBB.h = coseBB.y2 - coseBB.y1;
	  }

	  return function (ele, i) {
	    var lnode = layoutInfo.layoutNodes[layoutInfo.idToIndex[ele.data('id')]];

	    if (options.boundingBox) {
	      // then add extra bounding box constraint
	      var pctX = (lnode.positionX - coseBB.x1) / coseBB.w;
	      var pctY = (lnode.positionY - coseBB.y1) / coseBB.h;
	      return {
	        x: bb.x1 + pctX * bb.w,
	        y: bb.y1 + pctY * bb.h
	      };
	    } else {
	      return {
	        x: lnode.positionX,
	        y: lnode.positionY
	      };
	    }
	  };
	};
	/**
	 * @brief          : Updates the positions of nodes in the network
	 * @arg layoutInfo : LayoutInfo object
	 * @arg cy         : Cytoscape object
	 * @arg options    : Layout options
	 */


	var refreshPositions = function refreshPositions(layoutInfo, cy, options) {
	  // var s = 'Refreshing positions';
	  // logDebug(s);
	  var layout = options.layout;
	  var nodes = options.eles.nodes();
	  var getScaledPos = getScaleInBoundsFn(layoutInfo, options, nodes);
	  nodes.positions(getScaledPos); // Trigger layoutReady only on first call

	  if (true !== layoutInfo.ready) {
	    // s = 'Triggering layoutready';
	    // logDebug(s);
	    layoutInfo.ready = true;
	    layout.one('layoutready', options.ready);
	    layout.emit({
	      type: 'layoutready',
	      layout: this
	    });
	  }
	};
	/**
	 * @brief : Logs a debug message in JS console, if DEBUG is ON
	 */
	// var logDebug = function(text) {
	//   if (DEBUG) {
	//     console.debug(text);
	//   }
	// };

	/**
	 * @brief          : Performs one iteration of the physical simulation
	 * @arg layoutInfo : LayoutInfo object already initialized
	 * @arg cy         : Cytoscape object
	 * @arg options    : Layout options
	 */


	var step$1 = function step(layoutInfo, options, _step) {
	  // var s = "\n\n###############################";
	  // s += "\nSTEP: " + step;
	  // s += "\n###############################\n";
	  // logDebug(s);
	  // Calculate node repulsions
	  calculateNodeForces(layoutInfo, options); // Calculate edge forces

	  calculateEdgeForces(layoutInfo); // Calculate gravity forces

	  calculateGravityForces(layoutInfo, options); // Propagate forces from parent to child

	  propagateForces(layoutInfo); // Update positions based on calculated forces

	  updatePositions(layoutInfo);
	};
	/**
	 * @brief : Computes the node repulsion forces
	 */


	var calculateNodeForces = function calculateNodeForces(layoutInfo, options) {
	  // Go through each of the graphs in graphSet
	  // Nodes only repel each other if they belong to the same graph
	  // var s = 'calculateNodeForces';
	  // logDebug(s);
	  for (var i = 0; i < layoutInfo.graphSet.length; i++) {
	    var graph = layoutInfo.graphSet[i];
	    var numNodes = graph.length; // s = "Set: " + graph.toString();
	    // logDebug(s);
	    // Now get all the pairs of nodes
	    // Only get each pair once, (A, B) = (B, A)

	    for (var j = 0; j < numNodes; j++) {
	      var node1 = layoutInfo.layoutNodes[layoutInfo.idToIndex[graph[j]]];

	      for (var k = j + 1; k < numNodes; k++) {
	        var node2 = layoutInfo.layoutNodes[layoutInfo.idToIndex[graph[k]]];
	        nodeRepulsion(node1, node2, layoutInfo, options);
	      }
	    }
	  }
	};

	var randomDistance = function randomDistance(max) {
	  return -max + 2 * max * Math.random();
	};
	/**
	 * @brief : Compute the node repulsion forces between a pair of nodes
	 */


	var nodeRepulsion = function nodeRepulsion(node1, node2, layoutInfo, options) {
	  // var s = "Node repulsion. Node1: " + node1.id + " Node2: " + node2.id;
	  var cmptId1 = node1.cmptId;
	  var cmptId2 = node2.cmptId;

	  if (cmptId1 !== cmptId2 && !layoutInfo.isCompound) {
	    return;
	  } // Get direction of line connecting both node centers


	  var directionX = node2.positionX - node1.positionX;
	  var directionY = node2.positionY - node1.positionY;
	  var maxRandDist = 1; // s += "\ndirectionX: " + directionX + ", directionY: " + directionY;
	  // If both centers are the same, apply a random force

	  if (0 === directionX && 0 === directionY) {
	    directionX = randomDistance(maxRandDist);
	    directionY = randomDistance(maxRandDist);
	  }

	  var overlap = nodesOverlap(node1, node2, directionX, directionY);

	  if (overlap > 0) {
	    // s += "\nNodes DO overlap.";
	    // s += "\nOverlap: " + overlap;
	    // If nodes overlap, repulsion force is proportional
	    // to the overlap
	    var force = options.nodeOverlap * overlap; // Compute the module and components of the force vector

	    var distance = Math.sqrt(directionX * directionX + directionY * directionY); // s += "\nDistance: " + distance;

	    var forceX = force * directionX / distance;
	    var forceY = force * directionY / distance;
	  } else {
	    // s += "\nNodes do NOT overlap.";
	    // If there's no overlap, force is inversely proportional
	    // to squared distance
	    // Get clipping points for both nodes
	    var point1 = findClippingPoint(node1, directionX, directionY);
	    var point2 = findClippingPoint(node2, -1 * directionX, -1 * directionY); // Use clipping points to compute distance

	    var distanceX = point2.x - point1.x;
	    var distanceY = point2.y - point1.y;
	    var distanceSqr = distanceX * distanceX + distanceY * distanceY;
	    var distance = Math.sqrt(distanceSqr); // s += "\nDistance: " + distance;
	    // Compute the module and components of the force vector

	    var force = (node1.nodeRepulsion + node2.nodeRepulsion) / distanceSqr;
	    var forceX = force * distanceX / distance;
	    var forceY = force * distanceY / distance;
	  } // Apply force


	  if (!node1.isLocked) {
	    node1.offsetX -= forceX;
	    node1.offsetY -= forceY;
	  }

	  if (!node2.isLocked) {
	    node2.offsetX += forceX;
	    node2.offsetY += forceY;
	  } // s += "\nForceX: " + forceX + " ForceY: " + forceY;
	  // logDebug(s);


	  return;
	};
	/**
	 * @brief  : Determines whether two nodes overlap or not
	 * @return : Amount of overlapping (0 => no overlap)
	 */


	var nodesOverlap = function nodesOverlap(node1, node2, dX, dY) {
	  if (dX > 0) {
	    var overlapX = node1.maxX - node2.minX;
	  } else {
	    var overlapX = node2.maxX - node1.minX;
	  }

	  if (dY > 0) {
	    var overlapY = node1.maxY - node2.minY;
	  } else {
	    var overlapY = node2.maxY - node1.minY;
	  }

	  if (overlapX >= 0 && overlapY >= 0) {
	    return Math.sqrt(overlapX * overlapX + overlapY * overlapY);
	  } else {
	    return 0;
	  }
	};
	/**
	 * @brief : Finds the point in which an edge (direction dX, dY) intersects
	 *          the rectangular bounding box of it's source/target node
	 */


	var findClippingPoint = function findClippingPoint(node, dX, dY) {
	  // Shorcuts
	  var X = node.positionX;
	  var Y = node.positionY;
	  var H = node.height || 1;
	  var W = node.width || 1;
	  var dirSlope = dY / dX;
	  var nodeSlope = H / W; // var s = 'Computing clipping point of node ' + node.id +
	  //   " . Height:  " + H + ", Width: " + W +
	  //   "\nDirection " + dX + ", " + dY;
	  //
	  // Compute intersection

	  var res = {}; // Case: Vertical direction (up)

	  if (0 === dX && 0 < dY) {
	    res.x = X; // s += "\nUp direction";

	    res.y = Y + H / 2;
	    return res;
	  } // Case: Vertical direction (down)


	  if (0 === dX && 0 > dY) {
	    res.x = X;
	    res.y = Y + H / 2; // s += "\nDown direction";

	    return res;
	  } // Case: Intersects the right border


	  if (0 < dX && -1 * nodeSlope <= dirSlope && dirSlope <= nodeSlope) {
	    res.x = X + W / 2;
	    res.y = Y + W * dY / 2 / dX; // s += "\nRightborder";

	    return res;
	  } // Case: Intersects the left border


	  if (0 > dX && -1 * nodeSlope <= dirSlope && dirSlope <= nodeSlope) {
	    res.x = X - W / 2;
	    res.y = Y - W * dY / 2 / dX; // s += "\nLeftborder";

	    return res;
	  } // Case: Intersects the top border


	  if (0 < dY && (dirSlope <= -1 * nodeSlope || dirSlope >= nodeSlope)) {
	    res.x = X + H * dX / 2 / dY;
	    res.y = Y + H / 2; // s += "\nTop border";

	    return res;
	  } // Case: Intersects the bottom border


	  if (0 > dY && (dirSlope <= -1 * nodeSlope || dirSlope >= nodeSlope)) {
	    res.x = X - H * dX / 2 / dY;
	    res.y = Y - H / 2; // s += "\nBottom border";

	    return res;
	  } // s += "\nClipping point found at " + res.x + ", " + res.y;
	  // logDebug(s);


	  return res;
	};
	/**
	 * @brief : Calculates all edge forces
	 */


	var calculateEdgeForces = function calculateEdgeForces(layoutInfo, options) {
	  // Iterate over all edges
	  for (var i = 0; i < layoutInfo.edgeSize; i++) {
	    // Get edge, source & target nodes
	    var edge = layoutInfo.layoutEdges[i];
	    var sourceIx = layoutInfo.idToIndex[edge.sourceId];
	    var source = layoutInfo.layoutNodes[sourceIx];
	    var targetIx = layoutInfo.idToIndex[edge.targetId];
	    var target = layoutInfo.layoutNodes[targetIx]; // Get direction of line connecting both node centers

	    var directionX = target.positionX - source.positionX;
	    var directionY = target.positionY - source.positionY; // If both centers are the same, do nothing.
	    // A random force has already been applied as node repulsion

	    if (0 === directionX && 0 === directionY) {
	      continue;
	    } // Get clipping points for both nodes


	    var point1 = findClippingPoint(source, directionX, directionY);
	    var point2 = findClippingPoint(target, -1 * directionX, -1 * directionY);
	    var lx = point2.x - point1.x;
	    var ly = point2.y - point1.y;
	    var l = Math.sqrt(lx * lx + ly * ly);
	    var force = Math.pow(edge.idealLength - l, 2) / edge.elasticity;

	    if (0 !== l) {
	      var forceX = force * lx / l;
	      var forceY = force * ly / l;
	    } else {
	      var forceX = 0;
	      var forceY = 0;
	    } // Add this force to target and source nodes


	    if (!source.isLocked) {
	      source.offsetX += forceX;
	      source.offsetY += forceY;
	    }

	    if (!target.isLocked) {
	      target.offsetX -= forceX;
	      target.offsetY -= forceY;
	    } // var s = 'Edge force between nodes ' + source.id + ' and ' + target.id;
	    // s += "\nDistance: " + l + " Force: (" + forceX + ", " + forceY + ")";
	    // logDebug(s);

	  }
	};
	/**
	 * @brief : Computes gravity forces for all nodes
	 */


	var calculateGravityForces = function calculateGravityForces(layoutInfo, options) {
	  var distThreshold = 1; // var s = 'calculateGravityForces';
	  // logDebug(s);

	  for (var i = 0; i < layoutInfo.graphSet.length; i++) {
	    var graph = layoutInfo.graphSet[i];
	    var numNodes = graph.length; // s = "Set: " + graph.toString();
	    // logDebug(s);
	    // Compute graph center

	    if (0 === i) {
	      var centerX = layoutInfo.clientHeight / 2;
	      var centerY = layoutInfo.clientWidth / 2;
	    } else {
	      // Get Parent node for this graph, and use its position as center
	      var temp = layoutInfo.layoutNodes[layoutInfo.idToIndex[graph[0]]];
	      var parent = layoutInfo.layoutNodes[layoutInfo.idToIndex[temp.parentId]];
	      var centerX = parent.positionX;
	      var centerY = parent.positionY;
	    } // s = "Center found at: " + centerX + ", " + centerY;
	    // logDebug(s);
	    // Apply force to all nodes in graph


	    for (var j = 0; j < numNodes; j++) {
	      var node = layoutInfo.layoutNodes[layoutInfo.idToIndex[graph[j]]]; // s = "Node: " + node.id;

	      if (node.isLocked) {
	        continue;
	      }

	      var dx = centerX - node.positionX;
	      var dy = centerY - node.positionY;
	      var d = Math.sqrt(dx * dx + dy * dy);

	      if (d > distThreshold) {
	        var fx = options.gravity * dx / d;
	        var fy = options.gravity * dy / d;
	        node.offsetX += fx;
	        node.offsetY += fy; // s += ": Applied force: " + fx + ", " + fy;
	      } // s += ": skypped since it's too close to center";
	        // logDebug(s);

	    }
	  }
	};
	/**
	 * @brief          : This function propagates the existing offsets from
	 *                   parent nodes to its descendents.
	 * @arg layoutInfo : layoutInfo Object
	 * @arg cy         : cytoscape Object
	 * @arg options    : Layout options
	 */


	var propagateForces = function propagateForces(layoutInfo, options) {
	  // Inline implementation of a queue, used for traversing the graph in BFS order
	  var queue = [];
	  var start = 0; // Points to the start the queue

	  var end = -1; // Points to the end of the queue
	  // logDebug('propagateForces');
	  // Start by visiting the nodes in the root graph

	  queue.push.apply(queue, layoutInfo.graphSet[0]);
	  end += layoutInfo.graphSet[0].length; // Traverse the graph, level by level,

	  while (start <= end) {
	    // Get the node to visit and remove it from queue
	    var nodeId = queue[start++];
	    var nodeIndex = layoutInfo.idToIndex[nodeId];
	    var node = layoutInfo.layoutNodes[nodeIndex];
	    var children = node.children; // We only need to process the node if it's compound

	    if (0 < children.length && !node.isLocked) {
	      var offX = node.offsetX;
	      var offY = node.offsetY; // var s = "Propagating offset from parent node : " + node.id +
	      //   ". OffsetX: " + offX + ". OffsetY: " + offY;
	      // s += "\n Children: " + children.toString();
	      // logDebug(s);

	      for (var i = 0; i < children.length; i++) {
	        var childNode = layoutInfo.layoutNodes[layoutInfo.idToIndex[children[i]]]; // Propagate offset

	        childNode.offsetX += offX;
	        childNode.offsetY += offY; // Add children to queue to be visited

	        queue[++end] = children[i];
	      } // Reset parent offsets


	      node.offsetX = 0;
	      node.offsetY = 0;
	    }
	  }
	};
	/**
	 * @brief : Updates the layout model positions, based on
	 *          the accumulated forces
	 */


	var updatePositions = function updatePositions(layoutInfo, options) {
	  // var s = 'Updating positions';
	  // logDebug(s);
	  // Reset boundaries for compound nodes
	  for (var i = 0; i < layoutInfo.nodeSize; i++) {
	    var n = layoutInfo.layoutNodes[i];

	    if (0 < n.children.length) {
	      // logDebug("Resetting boundaries of compound node: " + n.id);
	      n.maxX = undefined;
	      n.minX = undefined;
	      n.maxY = undefined;
	      n.minY = undefined;
	    }
	  }

	  for (var i = 0; i < layoutInfo.nodeSize; i++) {
	    var n = layoutInfo.layoutNodes[i];

	    if (0 < n.children.length || n.isLocked) {
	      // No need to set compound or locked node position
	      // logDebug("Skipping position update of node: " + n.id);
	      continue;
	    } // s = "Node: " + n.id + " Previous position: (" +
	    // n.positionX + ", " + n.positionY + ").";
	    // Limit displacement in order to improve stability


	    var tempForce = limitForce(n.offsetX, n.offsetY, layoutInfo.temperature);
	    n.positionX += tempForce.x;
	    n.positionY += tempForce.y;
	    n.offsetX = 0;
	    n.offsetY = 0;
	    n.minX = n.positionX - n.width;
	    n.maxX = n.positionX + n.width;
	    n.minY = n.positionY - n.height;
	    n.maxY = n.positionY + n.height; // s += " New Position: (" + n.positionX + ", " + n.positionY + ").";
	    // logDebug(s);
	    // Update ancestry boudaries

	    updateAncestryBoundaries(n, layoutInfo);
	  } // Update size, position of compund nodes


	  for (var i = 0; i < layoutInfo.nodeSize; i++) {
	    var n = layoutInfo.layoutNodes[i];

	    if (0 < n.children.length && !n.isLocked) {
	      n.positionX = (n.maxX + n.minX) / 2;
	      n.positionY = (n.maxY + n.minY) / 2;
	      n.width = n.maxX - n.minX;
	      n.height = n.maxY - n.minY; // s = "Updating position, size of compound node " + n.id;
	      // s += "\nPositionX: " + n.positionX + ", PositionY: " + n.positionY;
	      // s += "\nWidth: " + n.width + ", Height: " + n.height;
	      // logDebug(s);
	    }
	  }
	};
	/**
	 * @brief : Limits a force (forceX, forceY) to be not
	 *          greater (in modulo) than max.
	 8          Preserves force direction.
	  */


	var limitForce = function limitForce(forceX, forceY, max) {
	  // var s = "Limiting force: (" + forceX + ", " + forceY + "). Max: " + max;
	  var force = Math.sqrt(forceX * forceX + forceY * forceY);

	  if (force > max) {
	    var res = {
	      x: max * forceX / force,
	      y: max * forceY / force
	    };
	  } else {
	    var res = {
	      x: forceX,
	      y: forceY
	    };
	  } // s += ".\nResult: (" + res.x + ", " + res.y + ")";
	  // logDebug(s);


	  return res;
	};
	/**
	 * @brief : Function used for keeping track of compound node
	 *          sizes, since they should bound all their subnodes.
	 */


	var updateAncestryBoundaries = function updateAncestryBoundaries(node, layoutInfo) {
	  // var s = "Propagating new position/size of node " + node.id;
	  var parentId = node.parentId;

	  if (null == parentId) {
	    // If there's no parent, we are done
	    // s += ". No parent node.";
	    // logDebug(s);
	    return;
	  } // Get Parent Node


	  var p = layoutInfo.layoutNodes[layoutInfo.idToIndex[parentId]];
	  var flag = false; // MaxX

	  if (null == p.maxX || node.maxX + p.padRight > p.maxX) {
	    p.maxX = node.maxX + p.padRight;
	    flag = true; // s += "\nNew maxX for parent node " + p.id + ": " + p.maxX;
	  } // MinX


	  if (null == p.minX || node.minX - p.padLeft < p.minX) {
	    p.minX = node.minX - p.padLeft;
	    flag = true; // s += "\nNew minX for parent node " + p.id + ": " + p.minX;
	  } // MaxY


	  if (null == p.maxY || node.maxY + p.padBottom > p.maxY) {
	    p.maxY = node.maxY + p.padBottom;
	    flag = true; // s += "\nNew maxY for parent node " + p.id + ": " + p.maxY;
	  } // MinY


	  if (null == p.minY || node.minY - p.padTop < p.minY) {
	    p.minY = node.minY - p.padTop;
	    flag = true; // s += "\nNew minY for parent node " + p.id + ": " + p.minY;
	  } // If updated boundaries, propagate changes upward


	  if (flag) {
	    // logDebug(s);
	    return updateAncestryBoundaries(p, layoutInfo);
	  } // s += ". No changes in boundaries/position of parent node " + p.id;
	  // logDebug(s);


	  return;
	};

	var separateComponents = function separateComponents(layoutInfo, options) {
	  var nodes = layoutInfo.layoutNodes;
	  var components = [];

	  for (var i = 0; i < nodes.length; i++) {
	    var node = nodes[i];
	    var cid = node.cmptId;
	    var component = components[cid] = components[cid] || [];
	    component.push(node);
	  }

	  var totalA = 0;

	  for (var i = 0; i < components.length; i++) {
	    var c = components[i];

	    if (!c) {
	      continue;
	    }

	    c.x1 = Infinity;
	    c.x2 = -Infinity;
	    c.y1 = Infinity;
	    c.y2 = -Infinity;

	    for (var j = 0; j < c.length; j++) {
	      var n = c[j];
	      c.x1 = Math.min(c.x1, n.positionX - n.width / 2);
	      c.x2 = Math.max(c.x2, n.positionX + n.width / 2);
	      c.y1 = Math.min(c.y1, n.positionY - n.height / 2);
	      c.y2 = Math.max(c.y2, n.positionY + n.height / 2);
	    }

	    c.w = c.x2 - c.x1;
	    c.h = c.y2 - c.y1;
	    totalA += c.w * c.h;
	  }

	  components.sort(function (c1, c2) {
	    return c2.w * c2.h - c1.w * c1.h;
	  });
	  var x = 0;
	  var y = 0;
	  var usedW = 0;
	  var rowH = 0;
	  var maxRowW = Math.sqrt(totalA) * layoutInfo.clientWidth / layoutInfo.clientHeight;

	  for (var i = 0; i < components.length; i++) {
	    var c = components[i];

	    if (!c) {
	      continue;
	    }

	    for (var j = 0; j < c.length; j++) {
	      var n = c[j];

	      if (!n.isLocked) {
	        n.positionX += x - c.x1;
	        n.positionY += y - c.y1;
	      }
	    }

	    x += c.w + options.componentSpacing;
	    usedW += c.w + options.componentSpacing;
	    rowH = Math.max(rowH, c.h);

	    if (usedW > maxRowW) {
	      y += rowH + options.componentSpacing;
	      x = 0;
	      usedW = 0;
	      rowH = 0;
	    }
	  }
	};

	var defaults$d = {
	  fit: true,
	  // whether to fit the viewport to the graph
	  padding: 30,
	  // padding used on fit
	  boundingBox: undefined,
	  // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }
	  avoidOverlap: true,
	  // prevents node overlap, may overflow boundingBox if not enough space
	  avoidOverlapPadding: 10,
	  // extra spacing around nodes when avoidOverlap: true
	  nodeDimensionsIncludeLabels: false,
	  // Excludes the label when calculating node bounding boxes for the layout algorithm
	  spacingFactor: undefined,
	  // Applies a multiplicative factor (>0) to expand or compress the overall area that the nodes take up
	  condense: false,
	  // uses all available space on false, uses minimal space on true
	  rows: undefined,
	  // force num of rows in the grid
	  cols: undefined,
	  // force num of columns in the grid
	  position: function position(node) {},
	  // returns { row, col } for element
	  sort: undefined,
	  // a sorting function to order the nodes; e.g. function(a, b){ return a.data('weight') - b.data('weight') }
	  animate: false,
	  // whether to transition the node positions
	  animationDuration: 500,
	  // duration of animation in ms if enabled
	  animationEasing: undefined,
	  // easing of animation if enabled
	  animateFilter: function animateFilter(node, i) {
	    return true;
	  },
	  // a function that determines whether the node should be animated.  All nodes animated by default on animate enabled.  Non-animated nodes are positioned immediately when the layout starts
	  ready: undefined,
	  // callback on layoutready
	  stop: undefined,
	  // callback on layoutstop
	  transform: function transform(node, position) {
	    return position;
	  } // transform a given node position. Useful for changing flow direction in discrete layouts 

	};

	function GridLayout(options) {
	  this.options = extend({}, defaults$d, options);
	}

	GridLayout.prototype.run = function () {
	  var params = this.options;
	  var options = params;
	  var cy = params.cy;
	  var eles = options.eles;
	  var nodes = eles.nodes().not(':parent');

	  if (options.sort) {
	    nodes = nodes.sort(options.sort);
	  }

	  var bb = makeBoundingBox(options.boundingBox ? options.boundingBox : {
	    x1: 0,
	    y1: 0,
	    w: cy.width(),
	    h: cy.height()
	  });

	  if (bb.h === 0 || bb.w === 0) {
	    nodes.layoutPositions(this, options, function (ele) {
	      return {
	        x: bb.x1,
	        y: bb.y1
	      };
	    });
	  } else {
	    // width/height * splits^2 = cells where splits is number of times to split width
	    var cells = nodes.size();
	    var splits = Math.sqrt(cells * bb.h / bb.w);
	    var rows = Math.round(splits);
	    var cols = Math.round(bb.w / bb.h * splits);

	    var small = function small(val) {
	      if (val == null) {
	        return Math.min(rows, cols);
	      } else {
	        var min = Math.min(rows, cols);

	        if (min == rows) {
	          rows = val;
	        } else {
	          cols = val;
	        }
	      }
	    };

	    var large = function large(val) {
	      if (val == null) {
	        return Math.max(rows, cols);
	      } else {
	        var max = Math.max(rows, cols);

	        if (max == rows) {
	          rows = val;
	        } else {
	          cols = val;
	        }
	      }
	    };

	    var oRows = options.rows;
	    var oCols = options.cols != null ? options.cols : options.columns; // if rows or columns were set in options, use those values

	    if (oRows != null && oCols != null) {
	      rows = oRows;
	      cols = oCols;
	    } else if (oRows != null && oCols == null) {
	      rows = oRows;
	      cols = Math.ceil(cells / rows);
	    } else if (oRows == null && oCols != null) {
	      cols = oCols;
	      rows = Math.ceil(cells / cols);
	    } // otherwise use the automatic values and adjust accordingly
	    // if rounding was up, see if we can reduce rows or columns
	    else if (cols * rows > cells) {
	        var sm = small();
	        var lg = large(); // reducing the small side takes away the most cells, so try it first

	        if ((sm - 1) * lg >= cells) {
	          small(sm - 1);
	        } else if ((lg - 1) * sm >= cells) {
	          large(lg - 1);
	        }
	      } else {
	        // if rounding was too low, add rows or columns
	        while (cols * rows < cells) {
	          var _sm = small();

	          var _lg = large(); // try to add to larger side first (adds less in multiplication)


	          if ((_lg + 1) * _sm >= cells) {
	            large(_lg + 1);
	          } else {
	            small(_sm + 1);
	          }
	        }
	      }

	    var cellWidth = bb.w / cols;
	    var cellHeight = bb.h / rows;

	    if (options.condense) {
	      cellWidth = 0;
	      cellHeight = 0;
	    }

	    if (options.avoidOverlap) {
	      for (var i = 0; i < nodes.length; i++) {
	        var node = nodes[i];
	        var pos = node._private.position;

	        if (pos.x == null || pos.y == null) {
	          // for bb
	          pos.x = 0;
	          pos.y = 0;
	        }

	        var nbb = node.layoutDimensions(options);
	        var p = options.avoidOverlapPadding;
	        var w = nbb.w + p;
	        var h = nbb.h + p;
	        cellWidth = Math.max(cellWidth, w);
	        cellHeight = Math.max(cellHeight, h);
	      }
	    }

	    var cellUsed = {}; // e.g. 'c-0-2' => true

	    var used = function used(row, col) {
	      return cellUsed['c-' + row + '-' + col] ? true : false;
	    };

	    var use = function use(row, col) {
	      cellUsed['c-' + row + '-' + col] = true;
	    }; // to keep track of current cell position


	    var row = 0;
	    var col = 0;

	    var moveToNextCell = function moveToNextCell() {
	      col++;

	      if (col >= cols) {
	        col = 0;
	        row++;
	      }
	    }; // get a cache of all the manual positions


	    var id2manPos = {};

	    for (var _i = 0; _i < nodes.length; _i++) {
	      var _node = nodes[_i];
	      var rcPos = options.position(_node);

	      if (rcPos && (rcPos.row !== undefined || rcPos.col !== undefined)) {
	        // must have at least row or col def'd
	        var _pos = {
	          row: rcPos.row,
	          col: rcPos.col
	        };

	        if (_pos.col === undefined) {
	          // find unused col
	          _pos.col = 0;

	          while (used(_pos.row, _pos.col)) {
	            _pos.col++;
	          }
	        } else if (_pos.row === undefined) {
	          // find unused row
	          _pos.row = 0;

	          while (used(_pos.row, _pos.col)) {
	            _pos.row++;
	          }
	        }

	        id2manPos[_node.id()] = _pos;
	        use(_pos.row, _pos.col);
	      }
	    }

	    var getPos = function getPos(element, i) {
	      var x, y;

	      if (element.locked() || element.isParent()) {
	        return false;
	      } // see if we have a manual position set


	      var rcPos = id2manPos[element.id()];

	      if (rcPos) {
	        x = rcPos.col * cellWidth + cellWidth / 2 + bb.x1;
	        y = rcPos.row * cellHeight + cellHeight / 2 + bb.y1;
	      } else {
	        // otherwise set automatically
	        while (used(row, col)) {
	          moveToNextCell();
	        }

	        x = col * cellWidth + cellWidth / 2 + bb.x1;
	        y = row * cellHeight + cellHeight / 2 + bb.y1;
	        use(row, col);
	        moveToNextCell();
	      }

	      return {
	        x: x,
	        y: y
	      };
	    };

	    nodes.layoutPositions(this, options, getPos);
	  }

	  return this; // chaining
	};

	var defaults$e = {
	  ready: function ready() {},
	  // on layoutready
	  stop: function stop() {} // on layoutstop

	}; // constructor
	// options : object containing layout options

	function NullLayout(options) {
	  this.options = extend({}, defaults$e, options);
	} // runs the layout


	NullLayout.prototype.run = function () {
	  var options = this.options;
	  var eles = options.eles; // elements to consider in the layout

	  var layout = this; // cy is automatically populated for us in the constructor
	  // (disable eslint for next line as this serves as example layout code to external developers)
	  // eslint-disable-next-line no-unused-vars

	  var cy = options.cy;
	  layout.emit('layoutstart'); // puts all nodes at (0, 0)
	  // n.b. most layouts would use layoutPositions(), instead of positions() and manual events

	  eles.nodes().positions(function () {
	    return {
	      x: 0,
	      y: 0
	    };
	  }); // trigger layoutready when each node has had its position set at least once

	  layout.one('layoutready', options.ready);
	  layout.emit('layoutready'); // trigger layoutstop when the layout stops (e.g. finishes)

	  layout.one('layoutstop', options.stop);
	  layout.emit('layoutstop');
	  return this; // chaining
	}; // called on continuous layouts to stop them before they finish


	NullLayout.prototype.stop = function () {
	  return this; // chaining
	};

	var defaults$f = {
	  positions: undefined,
	  // map of (node id) => (position obj); or function(node){ return somPos; }
	  zoom: undefined,
	  // the zoom level to set (prob want fit = false if set)
	  pan: undefined,
	  // the pan level to set (prob want fit = false if set)
	  fit: true,
	  // whether to fit to viewport
	  padding: 30,
	  // padding on fit
	  animate: false,
	  // whether to transition the node positions
	  animationDuration: 500,
	  // duration of animation in ms if enabled
	  animationEasing: undefined,
	  // easing of animation if enabled
	  animateFilter: function animateFilter(node, i) {
	    return true;
	  },
	  // a function that determines whether the node should be animated.  All nodes animated by default on animate enabled.  Non-animated nodes are positioned immediately when the layout starts
	  ready: undefined,
	  // callback on layoutready
	  stop: undefined,
	  // callback on layoutstop
	  transform: function transform(node, position) {
	    return position;
	  } // transform a given node position. Useful for changing flow direction in discrete layouts

	};

	function PresetLayout(options) {
	  this.options = extend({}, defaults$f, options);
	}

	PresetLayout.prototype.run = function () {
	  var options = this.options;
	  var eles = options.eles;
	  var nodes = eles.nodes();
	  var posIsFn = fn(options.positions);

	  function getPosition(node) {
	    if (options.positions == null) {
	      return copyPosition(node.position());
	    }

	    if (posIsFn) {
	      return options.positions(node);
	    }

	    var pos = options.positions[node._private.data.id];

	    if (pos == null) {
	      return null;
	    }

	    return pos;
	  }

	  nodes.layoutPositions(this, options, function (node, i) {
	    var position = getPosition(node);

	    if (node.locked() || position == null) {
	      return false;
	    }

	    return position;
	  });
	  return this; // chaining
	};

	var defaults$g = {
	  fit: true,
	  // whether to fit to viewport
	  padding: 30,
	  // fit padding
	  boundingBox: undefined,
	  // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }
	  animate: false,
	  // whether to transition the node positions
	  animationDuration: 500,
	  // duration of animation in ms if enabled
	  animationEasing: undefined,
	  // easing of animation if enabled
	  animateFilter: function animateFilter(node, i) {
	    return true;
	  },
	  // a function that determines whether the node should be animated.  All nodes animated by default on animate enabled.  Non-animated nodes are positioned immediately when the layout starts
	  ready: undefined,
	  // callback on layoutready
	  stop: undefined,
	  // callback on layoutstop
	  transform: function transform(node, position) {
	    return position;
	  } // transform a given node position. Useful for changing flow direction in discrete layouts 

	};

	function RandomLayout(options) {
	  this.options = extend({}, defaults$g, options);
	}

	RandomLayout.prototype.run = function () {
	  var options = this.options;
	  var cy = options.cy;
	  var eles = options.eles;
	  var nodes = eles.nodes().not(':parent');
	  var bb = makeBoundingBox(options.boundingBox ? options.boundingBox : {
	    x1: 0,
	    y1: 0,
	    w: cy.width(),
	    h: cy.height()
	  });

	  var getPos = function getPos(node, i) {
	    return {
	      x: bb.x1 + Math.round(Math.random() * bb.w),
	      y: bb.y1 + Math.round(Math.random() * bb.h)
	    };
	  };

	  nodes.layoutPositions(this, options, getPos);
	  return this; // chaining
	};

	var layout = [{
	  name: 'breadthfirst',
	  impl: BreadthFirstLayout
	}, {
	  name: 'circle',
	  impl: CircleLayout
	}, {
	  name: 'concentric',
	  impl: ConcentricLayout
	}, {
	  name: 'cose',
	  impl: CoseLayout
	}, {
	  name: 'grid',
	  impl: GridLayout
	}, {
	  name: 'null',
	  impl: NullLayout
	}, {
	  name: 'preset',
	  impl: PresetLayout
	}, {
	  name: 'random',
	  impl: RandomLayout
	}];

	function NullRenderer(options) {
	  this.options = options;
	  this.notifications = 0; // for testing
	}

	var noop$1 = function noop() {};

	var throwImgErr = function throwImgErr() {
	  throw new Error('A headless instance can not render images');
	};

	NullRenderer.prototype = {
	  recalculateRenderedStyle: noop$1,
	  notify: function notify() {
	    this.notifications++;
	  },
	  init: noop$1,
	  isHeadless: function isHeadless() {
	    return true;
	  },
	  png: throwImgErr,
	  jpg: throwImgErr
	};

	var BRp = {};
	BRp.arrowShapeWidth = 0.3;

	BRp.registerArrowShapes = function () {
	  var arrowShapes = this.arrowShapes = {};
	  var renderer = this; // Contract for arrow shapes:
	  // 0, 0 is arrow tip
	  // (0, 1) is direction towards node
	  // (1, 0) is right
	  //
	  // functional api:
	  // collide: check x, y in shape
	  // roughCollide: called before collide, no false negatives
	  // draw: draw
	  // spacing: dist(arrowTip, nodeBoundary)
	  // gap: dist(edgeTip, nodeBoundary), edgeTip may != arrowTip

	  var bbCollide = function bbCollide(x, y, size, angle, translation, edgeWidth, padding) {
	    var x1 = translation.x - size / 2 - padding;
	    var x2 = translation.x + size / 2 + padding;
	    var y1 = translation.y - size / 2 - padding;
	    var y2 = translation.y + size / 2 + padding;
	    var inside = x1 <= x && x <= x2 && y1 <= y && y <= y2;
	    return inside;
	  };

	  var transform = function transform(x, y, size, angle, translation) {
	    var xRotated = x * Math.cos(angle) - y * Math.sin(angle);
	    var yRotated = x * Math.sin(angle) + y * Math.cos(angle);
	    var xScaled = xRotated * size;
	    var yScaled = yRotated * size;
	    var xTranslated = xScaled + translation.x;
	    var yTranslated = yScaled + translation.y;
	    return {
	      x: xTranslated,
	      y: yTranslated
	    };
	  };

	  var transformPoints = function transformPoints(pts, size, angle, translation) {
	    var retPts = [];

	    for (var i = 0; i < pts.length; i += 2) {
	      var x = pts[i];
	      var y = pts[i + 1];
	      retPts.push(transform(x, y, size, angle, translation));
	    }

	    return retPts;
	  };

	  var pointsToArr = function pointsToArr(pts) {
	    var ret = [];

	    for (var i = 0; i < pts.length; i++) {
	      var p = pts[i];
	      ret.push(p.x, p.y);
	    }

	    return ret;
	  };

	  var standardGap = function standardGap(edge) {
	    return edge.pstyle('width').pfValue * edge.pstyle('arrow-scale').pfValue * 2;
	  };

	  var defineArrowShape = function defineArrowShape(name, defn) {
	    if (string(defn)) {
	      defn = arrowShapes[defn];
	    }

	    arrowShapes[name] = extend({
	      name: name,
	      points: [-0.15, -0.3, 0.15, -0.3, 0.15, 0.3, -0.15, 0.3],
	      collide: function collide(x, y, size, angle, translation, padding) {
	        var points = pointsToArr(transformPoints(this.points, size + 2 * padding, angle, translation));
	        var inside = pointInsidePolygonPoints(x, y, points);
	        return inside;
	      },
	      roughCollide: bbCollide,
	      draw: function draw(context, size, angle, translation) {
	        var points = transformPoints(this.points, size, angle, translation);
	        renderer.arrowShapeImpl('polygon')(context, points);
	      },
	      spacing: function spacing(edge) {
	        return 0;
	      },
	      gap: standardGap
	    }, defn);
	  };

	  defineArrowShape('none', {
	    collide: falsify,
	    roughCollide: falsify,
	    draw: noop,
	    spacing: zeroify,
	    gap: zeroify
	  });
	  defineArrowShape('triangle', {
	    points: [-0.15, -0.3, 0, 0, 0.15, -0.3]
	  });
	  defineArrowShape('arrow', 'triangle');
	  defineArrowShape('triangle-backcurve', {
	    points: arrowShapes['triangle'].points,
	    controlPoint: [0, -0.15],
	    roughCollide: bbCollide,
	    draw: function draw(context, size, angle, translation, edgeWidth) {
	      var ptsTrans = transformPoints(this.points, size, angle, translation);
	      var ctrlPt = this.controlPoint;
	      var ctrlPtTrans = transform(ctrlPt[0], ctrlPt[1], size, angle, translation);
	      renderer.arrowShapeImpl(this.name)(context, ptsTrans, ctrlPtTrans);
	    },
	    gap: function gap(edge) {
	      return standardGap(edge) * 0.8;
	    }
	  });
	  defineArrowShape('triangle-tee', {
	    points: [0, 0, 0.15, -0.3, -0.15, -0.3, 0, 0],
	    pointsTee: [-0.15, -0.4, -0.15, -0.5, 0.15, -0.5, 0.15, -0.4],
	    collide: function collide(x, y, size, angle, translation, edgeWidth, padding) {
	      var triPts = pointsToArr(transformPoints(this.points, size + 2 * padding, angle, translation));
	      var teePts = pointsToArr(transformPoints(this.pointsTee, size + 2 * padding, angle, translation));
	      var inside = pointInsidePolygonPoints(x, y, triPts) || pointInsidePolygonPoints(x, y, teePts);
	      return inside;
	    },
	    draw: function draw(context, size, angle, translation, edgeWidth) {
	      var triPts = transformPoints(this.points, size, angle, translation);
	      var teePts = transformPoints(this.pointsTee, size, angle, translation);
	      renderer.arrowShapeImpl(this.name)(context, triPts, teePts);
	    }
	  });
	  defineArrowShape('triangle-cross', {
	    points: [0, 0, 0.15, -0.3, -0.15, -0.3, 0, 0],
	    baseCrossLinePts: [-0.15, -0.4, // first half of the rectangle
	    -0.15, -0.4, 0.15, -0.4, // second half of the rectangle
	    0.15, -0.4],
	    crossLinePts: function crossLinePts(size, edgeWidth) {
	      // shift points so that the distance between the cross points matches edge width
	      var p = this.baseCrossLinePts.slice();
	      var shiftFactor = edgeWidth / size;
	      var y0 = 3;
	      var y1 = 5;
	      p[y0] = p[y0] - shiftFactor;
	      p[y1] = p[y1] - shiftFactor;
	      return p;
	    },
	    collide: function collide(x, y, size, angle, translation, edgeWidth, padding) {
	      var triPts = pointsToArr(transformPoints(this.points, size + 2 * padding, angle, translation));
	      var teePts = pointsToArr(transformPoints(this.crossLinePts(size, edgeWidth), size + 2 * padding, angle, translation));
	      var inside = pointInsidePolygonPoints(x, y, triPts) || pointInsidePolygonPoints(x, y, teePts);
	      return inside;
	    },
	    draw: function draw(context, size, angle, translation, edgeWidth) {
	      var triPts = transformPoints(this.points, size, angle, translation);
	      var crossLinePts = transformPoints(this.crossLinePts(size, edgeWidth), size, angle, translation);
	      renderer.arrowShapeImpl(this.name)(context, triPts, crossLinePts);
	    }
	  });
	  defineArrowShape('vee', {
	    points: [-0.15, -0.3, 0, 0, 0.15, -0.3, 0, -0.15],
	    gap: function gap(edge) {
	      return standardGap(edge) * 0.525;
	    }
	  });
	  defineArrowShape('circle', {
	    radius: 0.15,
	    collide: function collide(x, y, size, angle, translation, edgeWidth, padding) {
	      var t = translation;
	      var inside = Math.pow(t.x - x, 2) + Math.pow(t.y - y, 2) <= Math.pow((size + 2 * padding) * this.radius, 2);
	      return inside;
	    },
	    draw: function draw(context, size, angle, translation, edgeWidth) {
	      renderer.arrowShapeImpl(this.name)(context, translation.x, translation.y, this.radius * size);
	    },
	    spacing: function spacing(edge) {
	      return renderer.getArrowWidth(edge.pstyle('width').pfValue, edge.pstyle('arrow-scale').value) * this.radius;
	    }
	  });
	  defineArrowShape('tee', {
	    points: [-0.15, 0, -0.15, -0.1, 0.15, -0.1, 0.15, 0],
	    spacing: function spacing(edge) {
	      return 1;
	    },
	    gap: function gap(edge) {
	      return 1;
	    }
	  });
	  defineArrowShape('square', {
	    points: [-0.15, 0.00, 0.15, 0.00, 0.15, -0.3, -0.15, -0.3]
	  });
	  defineArrowShape('diamond', {
	    points: [-0.15, -0.15, 0, -0.3, 0.15, -0.15, 0, 0],
	    gap: function gap(edge) {
	      return edge.pstyle('width').pfValue * edge.pstyle('arrow-scale').value;
	    }
	  });
	  defineArrowShape('chevron', {
	    points: [0, 0, -0.15, -0.15, -0.1, -0.2, 0, -0.1, 0.1, -0.2, 0.15, -0.15],
	    gap: function gap(edge) {
	      return 0.95 * edge.pstyle('width').pfValue * edge.pstyle('arrow-scale').value;
	    }
	  });
	};

	var BRp$1 = {}; // Project mouse

	BRp$1.projectIntoViewport = function (clientX, clientY) {
	  var cy = this.cy;
	  var offsets = this.findContainerClientCoords();
	  var offsetLeft = offsets[0];
	  var offsetTop = offsets[1];
	  var scale = offsets[4];
	  var pan = cy.pan();
	  var zoom = cy.zoom();
	  var x = ((clientX - offsetLeft) / scale - pan.x) / zoom;
	  var y = ((clientY - offsetTop) / scale - pan.y) / zoom;
	  return [x, y];
	};

	BRp$1.findContainerClientCoords = function () {
	  if (this.containerBB) {
	    return this.containerBB;
	  }

	  var container = this.container;
	  var rect = container.getBoundingClientRect();
	  var style = window$1.getComputedStyle(container);

	  var styleValue = function styleValue(name) {
	    return parseFloat(style.getPropertyValue(name));
	  };

	  var padding = {
	    left: styleValue('padding-left'),
	    right: styleValue('padding-right'),
	    top: styleValue('padding-top'),
	    bottom: styleValue('padding-bottom')
	  };
	  var border = {
	    left: styleValue('border-left-width'),
	    right: styleValue('border-right-width'),
	    top: styleValue('border-top-width'),
	    bottom: styleValue('border-bottom-width')
	  };
	  var clientWidth = container.clientWidth;
	  var clientHeight = container.clientHeight;
	  var paddingHor = padding.left + padding.right;
	  var paddingVer = padding.top + padding.bottom;
	  var borderHor = border.left + border.right;
	  var scale = rect.width / (clientWidth + borderHor);
	  var unscaledW = clientWidth - paddingHor;
	  var unscaledH = clientHeight - paddingVer;
	  var left = rect.left + padding.left + border.left;
	  var top = rect.top + padding.top + border.top;
	  return this.containerBB = [left, top, unscaledW, unscaledH, scale];
	};

	BRp$1.invalidateContainerClientCoordsCache = function () {
	  this.containerBB = null;
	};

	BRp$1.findNearestElement = function (x, y, interactiveElementsOnly, isTouch) {
	  return this.findNearestElements(x, y, interactiveElementsOnly, isTouch)[0];
	};

	BRp$1.findNearestElements = function (x, y, interactiveElementsOnly, isTouch) {
	  var self = this;
	  var r = this;
	  var eles = r.getCachedZSortedEles();
	  var near = []; // 1 node max, 1 edge max

	  var zoom = r.cy.zoom();
	  var hasCompounds = r.cy.hasCompoundNodes();
	  var edgeThreshold = (isTouch ? 24 : 8) / zoom;
	  var nodeThreshold = (isTouch ? 8 : 2) / zoom;
	  var labelThreshold = (isTouch ? 8 : 2) / zoom;
	  var minSqDist = Infinity;
	  var nearEdge;
	  var nearNode;

	  if (interactiveElementsOnly) {
	    eles = eles.interactive;
	  }

	  function addEle(ele, sqDist) {
	    if (ele.isNode()) {
	      if (nearNode) {
	        return; // can't replace node
	      } else {
	        nearNode = ele;
	        near.push(ele);
	      }
	    }

	    if (ele.isEdge() && (sqDist == null || sqDist < minSqDist)) {
	      if (nearEdge) {
	        // then replace existing edge
	        // can replace only if same z-index
	        if (nearEdge.pstyle('z-compound-depth').value === ele.pstyle('z-compound-depth').value && nearEdge.pstyle('z-compound-depth').value === ele.pstyle('z-compound-depth').value) {
	          for (var i = 0; i < near.length; i++) {
	            if (near[i].isEdge()) {
	              near[i] = ele;
	              nearEdge = ele;
	              minSqDist = sqDist != null ? sqDist : minSqDist;
	              break;
	            }
	          }
	        }
	      } else {
	        near.push(ele);
	        nearEdge = ele;
	        minSqDist = sqDist != null ? sqDist : minSqDist;
	      }
	    }
	  }

	  function checkNode(node) {
	    var width = node.outerWidth() + 2 * nodeThreshold;
	    var height = node.outerHeight() + 2 * nodeThreshold;
	    var hw = width / 2;
	    var hh = height / 2;
	    var pos = node.position();

	    if (pos.x - hw <= x && x <= pos.x + hw // bb check x
	    && pos.y - hh <= y && y <= pos.y + hh // bb check y
	    ) {
	        var shape = r.nodeShapes[self.getNodeShape(node)];

	        if (shape.checkPoint(x, y, 0, width, height, pos.x, pos.y)) {
	          addEle(node, 0);
	          return true;
	        }
	      }
	  }

	  function checkEdge(edge) {
	    var _p = edge._private;
	    var rs = _p.rscratch;
	    var styleWidth = edge.pstyle('width').pfValue;
	    var scale = edge.pstyle('arrow-scale').value;
	    var width = styleWidth / 2 + edgeThreshold; // more like a distance radius from centre

	    var widthSq = width * width;
	    var width2 = width * 2;
	    var src = _p.source;
	    var tgt = _p.target;
	    var sqDist;

	    if (rs.edgeType === 'segments' || rs.edgeType === 'straight' || rs.edgeType === 'haystack') {
	      var pts = rs.allpts;

	      for (var i = 0; i + 3 < pts.length; i += 2) {
	        if (inLineVicinity(x, y, pts[i], pts[i + 1], pts[i + 2], pts[i + 3], width2) && widthSq > (sqDist = sqdistToFiniteLine(x, y, pts[i], pts[i + 1], pts[i + 2], pts[i + 3]))) {
	          addEle(edge, sqDist);
	          return true;
	        }
	      }
	    } else if (rs.edgeType === 'bezier' || rs.edgeType === 'multibezier' || rs.edgeType === 'self' || rs.edgeType === 'compound') {
	      var pts = rs.allpts;

	      for (var i = 0; i + 5 < rs.allpts.length; i += 4) {
	        if (inBezierVicinity(x, y, pts[i], pts[i + 1], pts[i + 2], pts[i + 3], pts[i + 4], pts[i + 5], width2) && widthSq > (sqDist = sqdistToQuadraticBezier(x, y, pts[i], pts[i + 1], pts[i + 2], pts[i + 3], pts[i + 4], pts[i + 5]))) {
	          addEle(edge, sqDist);
	          return true;
	        }
	      }
	    } // if we're close to the edge but didn't hit it, maybe we hit its arrows


	    var src = src || _p.source;
	    var tgt = tgt || _p.target;
	    var arSize = self.getArrowWidth(styleWidth, scale);
	    var arrows = [{
	      name: 'source',
	      x: rs.arrowStartX,
	      y: rs.arrowStartY,
	      angle: rs.srcArrowAngle
	    }, {
	      name: 'target',
	      x: rs.arrowEndX,
	      y: rs.arrowEndY,
	      angle: rs.tgtArrowAngle
	    }, {
	      name: 'mid-source',
	      x: rs.midX,
	      y: rs.midY,
	      angle: rs.midsrcArrowAngle
	    }, {
	      name: 'mid-target',
	      x: rs.midX,
	      y: rs.midY,
	      angle: rs.midtgtArrowAngle
	    }];

	    for (var i = 0; i < arrows.length; i++) {
	      var ar = arrows[i];
	      var shape = r.arrowShapes[edge.pstyle(ar.name + '-arrow-shape').value];
	      var edgeWidth = edge.pstyle('width').pfValue;

	      if (shape.roughCollide(x, y, arSize, ar.angle, {
	        x: ar.x,
	        y: ar.y
	      }, edgeWidth, edgeThreshold) && shape.collide(x, y, arSize, ar.angle, {
	        x: ar.x,
	        y: ar.y
	      }, edgeWidth, edgeThreshold)) {
	        addEle(edge);
	        return true;
	      }
	    } // for compound graphs, hitting edge may actually want a connected node instead (b/c edge may have greater z-index precedence)


	    if (hasCompounds && near.length > 0) {
	      checkNode(src);
	      checkNode(tgt);
	    }
	  }

	  function preprop(obj, name, pre) {
	    return getPrefixedProperty(obj, name, pre);
	  }

	  function checkLabel(ele, prefix) {
	    var _p = ele._private;
	    var th = labelThreshold;
	    var prefixDash;

	    if (prefix) {
	      prefixDash = prefix + '-';
	    } else {
	      prefixDash = '';
	    }

	    ele.boundingBox();
	    var bb = _p.labelBounds[prefix || 'main'];
	    var text = ele.pstyle(prefixDash + 'label').value;
	    var eventsEnabled = ele.pstyle('text-events').strValue === 'yes';

	    if (!eventsEnabled || !text) {
	      return;
	    }

	    var rstyle = _p.rstyle;
	    var lx = preprop(rstyle, 'labelX', prefix);
	    var ly = preprop(rstyle, 'labelY', prefix);
	    var theta = preprop(_p.rscratch, 'labelAngle', prefix);
	    var lx1 = bb.x1 - th;
	    var lx2 = bb.x2 + th;
	    var ly1 = bb.y1 - th;
	    var ly2 = bb.y2 + th;

	    if (theta) {
	      var cos = Math.cos(theta);
	      var sin = Math.sin(theta);

	      var rotate = function rotate(x, y) {
	        x = x - lx;
	        y = y - ly;
	        return {
	          x: x * cos - y * sin + lx,
	          y: x * sin + y * cos + ly
	        };
	      };

	      var px1y1 = rotate(lx1, ly1);
	      var px1y2 = rotate(lx1, ly2);
	      var px2y1 = rotate(lx2, ly1);
	      var px2y2 = rotate(lx2, ly2);
	      var points = [px1y1.x, px1y1.y, px2y1.x, px2y1.y, px2y2.x, px2y2.y, px1y2.x, px1y2.y];

	      if (pointInsidePolygonPoints(x, y, points)) {
	        addEle(ele);
	        return true;
	      }
	    } else {
	      // do a cheaper bb check
	      if (inBoundingBox(bb, x, y)) {
	        addEle(ele);
	        return true;
	      }
	    }
	  }

	  for (var i = eles.length - 1; i >= 0; i--) {
	    // reverse order for precedence
	    var ele = eles[i];

	    if (ele.isNode()) {
	      checkNode(ele) || checkLabel(ele);
	    } else {
	      // then edge
	      checkEdge(ele) || checkLabel(ele) || checkLabel(ele, 'source') || checkLabel(ele, 'target');
	    }
	  }

	  return near;
	}; // 'Give me everything from this box'


	BRp$1.getAllInBox = function (x1, y1, x2, y2) {
	  var eles = this.getCachedZSortedEles().interactive;
	  var box = [];
	  var x1c = Math.min(x1, x2);
	  var x2c = Math.max(x1, x2);
	  var y1c = Math.min(y1, y2);
	  var y2c = Math.max(y1, y2);
	  x1 = x1c;
	  x2 = x2c;
	  y1 = y1c;
	  y2 = y2c;
	  var boxBb = makeBoundingBox({
	    x1: x1,
	    y1: y1,
	    x2: x2,
	    y2: y2
	  });

	  for (var e = 0; e < eles.length; e++) {
	    var ele = eles[e];

	    if (ele.isNode()) {
	      var node = ele;
	      var nodeBb = node.boundingBox({
	        includeNodes: true,
	        includeEdges: false,
	        includeLabels: false
	      });

	      if (boundingBoxesIntersect(boxBb, nodeBb) && !boundingBoxInBoundingBox(nodeBb, boxBb)) {
	        box.push(node);
	      }
	    } else {
	      var edge = ele;
	      var _p = edge._private;
	      var rs = _p.rscratch;

	      if (rs.startX != null && rs.startY != null && !inBoundingBox(boxBb, rs.startX, rs.startY)) {
	        continue;
	      }

	      if (rs.endX != null && rs.endY != null && !inBoundingBox(boxBb, rs.endX, rs.endY)) {
	        continue;
	      }

	      if (rs.edgeType === 'bezier' || rs.edgeType === 'multibezier' || rs.edgeType === 'self' || rs.edgeType === 'compound' || rs.edgeType === 'segments' || rs.edgeType === 'haystack') {
	        var pts = _p.rstyle.bezierPts || _p.rstyle.linePts || _p.rstyle.haystackPts;
	        var allInside = true;

	        for (var i = 0; i < pts.length; i++) {
	          if (!pointInBoundingBox(boxBb, pts[i])) {
	            allInside = false;
	            break;
	          }
	        }

	        if (allInside) {
	          box.push(edge);
	        }
	      } else if (rs.edgeType === 'haystack' || rs.edgeType === 'straight') {
	        box.push(edge);
	      }
	    }
	  }

	  return box;
	};

	var BRp$2 = {};

	BRp$2.calculateArrowAngles = function (edge) {
	  var rs = edge._private.rscratch;
	  var isHaystack = rs.edgeType === 'haystack';
	  var isBezier = rs.edgeType === 'bezier';
	  var isMultibezier = rs.edgeType === 'multibezier';
	  var isSegments = rs.edgeType === 'segments';
	  var isCompound = rs.edgeType === 'compound';
	  var isSelf = rs.edgeType === 'self'; // Displacement gives direction for arrowhead orientation

	  var dispX, dispY;
	  var startX, startY, endX, endY, midX, midY;

	  if (isHaystack) {
	    startX = rs.haystackPts[0];
	    startY = rs.haystackPts[1];
	    endX = rs.haystackPts[2];
	    endY = rs.haystackPts[3];
	  } else {
	    startX = rs.arrowStartX;
	    startY = rs.arrowStartY;
	    endX = rs.arrowEndX;
	    endY = rs.arrowEndY;
	  }

	  midX = rs.midX;
	  midY = rs.midY; // source
	  //

	  if (isSegments) {
	    dispX = startX - rs.segpts[0];
	    dispY = startY - rs.segpts[1];
	  } else if (isMultibezier || isCompound || isSelf || isBezier) {
	    var pts = rs.allpts;
	    var bX = qbezierAt(pts[0], pts[2], pts[4], 0.1);
	    var bY = qbezierAt(pts[1], pts[3], pts[5], 0.1);
	    dispX = startX - bX;
	    dispY = startY - bY;
	  } else {
	    dispX = startX - midX;
	    dispY = startY - midY;
	  }

	  rs.srcArrowAngle = getAngleFromDisp(dispX, dispY); // mid target
	  //

	  var midX = rs.midX;
	  var midY = rs.midY;

	  if (isHaystack) {
	    midX = (startX + endX) / 2;
	    midY = (startY + endY) / 2;
	  }

	  dispX = endX - startX;
	  dispY = endY - startY;

	  if (isSegments) {
	    var pts = rs.allpts;

	    if (pts.length / 2 % 2 === 0) {
	      var i2 = pts.length / 2;
	      var i1 = i2 - 2;
	      dispX = pts[i2] - pts[i1];
	      dispY = pts[i2 + 1] - pts[i1 + 1];
	    } else {
	      var i2 = pts.length / 2 - 1;
	      var i1 = i2 - 2;
	      var i3 = i2 + 2;
	      dispX = pts[i2] - pts[i1];
	      dispY = pts[i2 + 1] - pts[i1 + 1];
	    }
	  } else if (isMultibezier || isCompound || isSelf) {
	    var pts = rs.allpts;
	    var cpts = rs.ctrlpts;
	    var bp0x, bp0y;
	    var bp1x, bp1y;

	    if (cpts.length / 2 % 2 === 0) {
	      var p0 = pts.length / 2 - 1; // startpt

	      var ic = p0 + 2;
	      var p1 = ic + 2;
	      bp0x = qbezierAt(pts[p0], pts[ic], pts[p1], 0.0);
	      bp0y = qbezierAt(pts[p0 + 1], pts[ic + 1], pts[p1 + 1], 0.0);
	      bp1x = qbezierAt(pts[p0], pts[ic], pts[p1], 0.0001);
	      bp1y = qbezierAt(pts[p0 + 1], pts[ic + 1], pts[p1 + 1], 0.0001);
	    } else {
	      var ic = pts.length / 2 - 1; // ctrpt

	      var p0 = ic - 2; // startpt

	      var p1 = ic + 2; // endpt

	      bp0x = qbezierAt(pts[p0], pts[ic], pts[p1], 0.4999);
	      bp0y = qbezierAt(pts[p0 + 1], pts[ic + 1], pts[p1 + 1], 0.4999);
	      bp1x = qbezierAt(pts[p0], pts[ic], pts[p1], 0.5);
	      bp1y = qbezierAt(pts[p0 + 1], pts[ic + 1], pts[p1 + 1], 0.5);
	    }

	    dispX = bp1x - bp0x;
	    dispY = bp1y - bp0y;
	  }

	  rs.midtgtArrowAngle = getAngleFromDisp(dispX, dispY);
	  rs.midDispX = dispX;
	  rs.midDispY = dispY; // mid source
	  //

	  dispX *= -1;
	  dispY *= -1;

	  if (isSegments) {
	    var pts = rs.allpts;

	    if (pts.length / 2 % 2 === 0) ; else {
	      var i2 = pts.length / 2 - 1;
	      var i3 = i2 + 2;
	      dispX = -(pts[i3] - pts[i2]);
	      dispY = -(pts[i3 + 1] - pts[i2 + 1]);
	    }
	  }

	  rs.midsrcArrowAngle = getAngleFromDisp(dispX, dispY); // target
	  //

	  if (isSegments) {
	    dispX = endX - rs.segpts[rs.segpts.length - 2];
	    dispY = endY - rs.segpts[rs.segpts.length - 1];
	  } else if (isMultibezier || isCompound || isSelf || isBezier) {
	    var pts = rs.allpts;
	    var l = pts.length;
	    var bX = qbezierAt(pts[l - 6], pts[l - 4], pts[l - 2], 0.9);
	    var bY = qbezierAt(pts[l - 5], pts[l - 3], pts[l - 1], 0.9);
	    dispX = endX - bX;
	    dispY = endY - bY;
	  } else {
	    dispX = endX - midX;
	    dispY = endY - midY;
	  }

	  rs.tgtArrowAngle = getAngleFromDisp(dispX, dispY);
	};

	BRp$2.getArrowWidth = BRp$2.getArrowHeight = function (edgeWidth, scale) {
	  var cache = this.arrowWidthCache = this.arrowWidthCache || {};
	  var cachedVal = cache[edgeWidth + ', ' + scale];

	  if (cachedVal) {
	    return cachedVal;
	  }

	  cachedVal = Math.max(Math.pow(edgeWidth * 13.37, 0.9), 29) * scale;
	  cache[edgeWidth + ', ' + scale] = cachedVal;
	  return cachedVal;
	};

	var BRp$3 = {};

	BRp$3.findHaystackPoints = function (edges) {
	  for (var i = 0; i < edges.length; i++) {
	    var edge = edges[i];
	    var _p = edge._private;
	    var rs = _p.rscratch;

	    if (!rs.haystack) {
	      var angle = Math.random() * 2 * Math.PI;
	      rs.source = {
	        x: Math.cos(angle),
	        y: Math.sin(angle)
	      };
	      angle = Math.random() * 2 * Math.PI;
	      rs.target = {
	        x: Math.cos(angle),
	        y: Math.sin(angle)
	      };
	    }

	    var src = _p.source;
	    var tgt = _p.target;
	    var srcPos = src.position();
	    var tgtPos = tgt.position();
	    var srcW = src.width();
	    var tgtW = tgt.width();
	    var srcH = src.height();
	    var tgtH = tgt.height();
	    var radius = edge.pstyle('haystack-radius').value;
	    var halfRadius = radius / 2; // b/c have to half width/height

	    rs.haystackPts = rs.allpts = [rs.source.x * srcW * halfRadius + srcPos.x, rs.source.y * srcH * halfRadius + srcPos.y, rs.target.x * tgtW * halfRadius + tgtPos.x, rs.target.y * tgtH * halfRadius + tgtPos.y];
	    rs.midX = (rs.allpts[0] + rs.allpts[2]) / 2;
	    rs.midY = (rs.allpts[1] + rs.allpts[3]) / 2; // always override as haystack in case set to different type previously

	    rs.edgeType = 'haystack';
	    rs.haystack = true;
	    this.storeEdgeProjections(edge);
	    this.calculateArrowAngles(edge);
	    this.recalculateEdgeLabelProjections(edge);
	    this.calculateLabelAngles(edge);
	  }
	};

	BRp$3.findSegmentsPoints = function (edge, pairInfo) {
	  // Segments (multiple straight lines)
	  var rs = edge._private.rscratch;
	  var posPts = pairInfo.posPts,
	      intersectionPts = pairInfo.intersectionPts,
	      vectorNormInverse = pairInfo.vectorNormInverse;
	  var edgeDistances = edge.pstyle('edge-distances').value;
	  var segmentWs = edge.pstyle('segment-weights');
	  var segmentDs = edge.pstyle('segment-distances');
	  var segmentsN = Math.min(segmentWs.pfValue.length, segmentDs.pfValue.length);
	  rs.edgeType = 'segments';
	  rs.segpts = [];

	  for (var s = 0; s < segmentsN; s++) {
	    var w = segmentWs.pfValue[s];
	    var d = segmentDs.pfValue[s];
	    var w1 = 1 - w;
	    var w2 = w;
	    var midptPts = edgeDistances === 'node-position' ? posPts : intersectionPts;
	    var adjustedMidpt = {
	      x: midptPts.x1 * w1 + midptPts.x2 * w2,
	      y: midptPts.y1 * w1 + midptPts.y2 * w2
	    };
	    rs.segpts.push(adjustedMidpt.x + vectorNormInverse.x * d, adjustedMidpt.y + vectorNormInverse.y * d);
	  }
	};

	BRp$3.findLoopPoints = function (edge, pairInfo, i, edgeIsUnbundled) {
	  // Self-edge
	  var rs = edge._private.rscratch;
	  var dirCounts = pairInfo.dirCounts,
	      srcPos = pairInfo.srcPos;
	  var ctrlptDists = edge.pstyle('control-point-distances');
	  var ctrlptDist = ctrlptDists ? ctrlptDists.pfValue[0] : undefined;
	  var loopDir = edge.pstyle('loop-direction').pfValue;
	  var loopSwp = edge.pstyle('loop-sweep').pfValue;
	  var stepSize = edge.pstyle('control-point-step-size').pfValue;
	  rs.edgeType = 'self';
	  var j = i;
	  var loopDist = stepSize;

	  if (edgeIsUnbundled) {
	    j = 0;
	    loopDist = ctrlptDist;
	  }

	  var loopAngle = loopDir - Math.PI / 2;
	  var outAngle = loopAngle - loopSwp / 2;
	  var inAngle = loopAngle + loopSwp / 2; // increase by step size for overlapping loops, keyed on direction and sweep values

	  var dc = String(loopDir + '_' + loopSwp);
	  j = dirCounts[dc] === undefined ? dirCounts[dc] = 0 : ++dirCounts[dc];
	  rs.ctrlpts = [srcPos.x + Math.cos(outAngle) * 1.4 * loopDist * (j / 3 + 1), srcPos.y + Math.sin(outAngle) * 1.4 * loopDist * (j / 3 + 1), srcPos.x + Math.cos(inAngle) * 1.4 * loopDist * (j / 3 + 1), srcPos.y + Math.sin(inAngle) * 1.4 * loopDist * (j / 3 + 1)];
	};

	BRp$3.findCompoundLoopPoints = function (edge, pairInfo, i, edgeIsUnbundled) {
	  // Compound edge
	  var rs = edge._private.rscratch;
	  rs.edgeType = 'compound';
	  var srcPos = pairInfo.srcPos,
	      tgtPos = pairInfo.tgtPos,
	      srcW = pairInfo.srcW,
	      srcH = pairInfo.srcH,
	      tgtW = pairInfo.tgtW,
	      tgtH = pairInfo.tgtH;
	  var stepSize = edge.pstyle('control-point-step-size').pfValue;
	  var ctrlptDists = edge.pstyle('control-point-distances');
	  var ctrlptDist = ctrlptDists ? ctrlptDists.pfValue[0] : undefined;
	  var j = i;
	  var loopDist = stepSize;

	  if (edgeIsUnbundled) {
	    j = 0;
	    loopDist = ctrlptDist;
	  }

	  var loopW = 50;
	  var loopaPos = {
	    x: srcPos.x - srcW / 2,
	    y: srcPos.y - srcH / 2
	  };
	  var loopbPos = {
	    x: tgtPos.x - tgtW / 2,
	    y: tgtPos.y - tgtH / 2
	  };
	  var loopPos = {
	    x: Math.min(loopaPos.x, loopbPos.x),
	    y: Math.min(loopaPos.y, loopbPos.y)
	  }; // avoids cases with impossible beziers

	  var minCompoundStretch = 0.5;
	  var compoundStretchA = Math.max(minCompoundStretch, Math.log(srcW * 0.01));
	  var compoundStretchB = Math.max(minCompoundStretch, Math.log(tgtW * 0.01));
	  rs.ctrlpts = [loopPos.x, loopPos.y - (1 + Math.pow(loopW, 1.12) / 100) * loopDist * (j / 3 + 1) * compoundStretchA, loopPos.x - (1 + Math.pow(loopW, 1.12) / 100) * loopDist * (j / 3 + 1) * compoundStretchB, loopPos.y];
	};

	BRp$3.findStraightEdgePoints = function (edge) {
	  // Straight edge within bundle
	  edge._private.rscratch.edgeType = 'straight';
	};

	BRp$3.findBezierPoints = function (edge, pairInfo, i, edgeIsUnbundled, edgeIsSwapped) {
	  var rs = edge._private.rscratch;
	  var vectorNormInverse = pairInfo.vectorNormInverse,
	      posPts = pairInfo.posPts,
	      intersectionPts = pairInfo.intersectionPts;
	  var edgeDistances = edge.pstyle('edge-distances').value;
	  var stepSize = edge.pstyle('control-point-step-size').pfValue;
	  var ctrlptDists = edge.pstyle('control-point-distances');
	  var ctrlptWs = edge.pstyle('control-point-weights');
	  var bezierN = ctrlptDists && ctrlptWs ? Math.min(ctrlptDists.value.length, ctrlptWs.value.length) : 1;
	  var ctrlptDist = ctrlptDists ? ctrlptDists.pfValue[0] : undefined;
	  var ctrlptWeight = ctrlptWs.value[0]; // (Multi)bezier

	  var multi = edgeIsUnbundled;
	  rs.edgeType = multi ? 'multibezier' : 'bezier';
	  rs.ctrlpts = [];

	  for (var b = 0; b < bezierN; b++) {
	    var normctrlptDist = (0.5 - pairInfo.eles.length / 2 + i) * stepSize * (edgeIsSwapped ? -1 : 1);
	    var manctrlptDist = void 0;
	    var sign = signum(normctrlptDist);

	    if (multi) {
	      ctrlptDist = ctrlptDists ? ctrlptDists.pfValue[b] : stepSize; // fall back on step size

	      ctrlptWeight = ctrlptWs.value[b];
	    }

	    if (edgeIsUnbundled) {
	      // multi or single unbundled
	      manctrlptDist = ctrlptDist;
	    } else {
	      manctrlptDist = ctrlptDist !== undefined ? sign * ctrlptDist : undefined;
	    }

	    var distanceFromMidpoint = manctrlptDist !== undefined ? manctrlptDist : normctrlptDist;
	    var w1 = 1 - ctrlptWeight;
	    var w2 = ctrlptWeight;
	    var midptPts = edgeDistances === 'node-position' ? posPts : intersectionPts;
	    var adjustedMidpt = {
	      x: midptPts.x1 * w1 + midptPts.x2 * w2,
	      y: midptPts.y1 * w1 + midptPts.y2 * w2
	    };
	    rs.ctrlpts.push(adjustedMidpt.x + vectorNormInverse.x * distanceFromMidpoint, adjustedMidpt.y + vectorNormInverse.y * distanceFromMidpoint);
	  }
	};

	BRp$3.findTaxiPoints = function (edge, pairInfo) {
	  // Taxicab geometry with two turns maximum
	  var rs = edge._private.rscratch;
	  rs.edgeType = 'segments';
	  var VERTICAL = 'vertical';
	  var HORIZONTAL = 'horizontal';
	  var LEFTWARD = 'leftward';
	  var RIGHTWARD = 'rightward';
	  var DOWNWARD = 'downward';
	  var UPWARD = 'upward';
	  var AUTO = 'auto';
	  var posPts = pairInfo.posPts,
	      srcW = pairInfo.srcW,
	      srcH = pairInfo.srcH,
	      tgtW = pairInfo.tgtW,
	      tgtH = pairInfo.tgtH;
	  var edgeDistances = edge.pstyle('edge-distances').value;
	  var dIncludesNodeBody = edgeDistances !== 'node-position';
	  var taxiDir = edge.pstyle('taxi-direction').value;
	  var rawTaxiDir = taxiDir; // unprocessed value

	  var taxiTurn = edge.pstyle('taxi-turn');
	  var turnIsPercent = taxiTurn.units === '%';
	  var taxiTurnPfVal = turnIsPercent && taxiTurn.pfValue < 0 ? 1 + taxiTurn.pfValue : taxiTurn.pfValue;
	  var minD = edge.pstyle('taxi-turn-min-distance').pfValue;
	  var dw = dIncludesNodeBody ? (srcW + tgtW) / 2 : 0;
	  var dh = dIncludesNodeBody ? (srcH + tgtH) / 2 : 0;
	  var pdx = posPts.x2 - posPts.x1;
	  var pdy = posPts.y2 - posPts.y1; // take away the effective w/h from the magnitude of the delta value

	  var subDWH = function subDWH(dxy, dwh) {
	    if (dxy > 0) {
	      return Math.max(dxy - dwh, 0);
	    } else {
	      return Math.min(dxy + dwh, 0);
	    }
	  };

	  var dx = subDWH(pdx, dw);
	  var dy = subDWH(pdy, dh);
	  var isExplicitDir = false;

	  if (taxiDir === AUTO) {
	    taxiDir = Math.abs(dx) > Math.abs(dy) ? HORIZONTAL : VERTICAL;
	  } else if (taxiDir === UPWARD || taxiDir === DOWNWARD) {
	    taxiDir = VERTICAL;
	    isExplicitDir = true;
	  } else if (taxiDir === LEFTWARD || taxiDir === RIGHTWARD) {
	    taxiDir = HORIZONTAL;
	    isExplicitDir = true;
	  }

	  var isVert = taxiDir === VERTICAL;
	  var l = isVert ? dy : dx;
	  var pl = isVert ? pdy : pdx;
	  var sgnL = signum(pl);
	  var forcedDir = false;

	  if (!(isExplicitDir && turnIsPercent) // forcing in this case would cause weird growing in the opposite direction
	  && (rawTaxiDir === DOWNWARD && pl < 0 || rawTaxiDir === UPWARD && pl > 0 || rawTaxiDir === LEFTWARD && pl > 0 || rawTaxiDir === RIGHTWARD && pl < 0)) {
	    sgnL *= -1;
	    l = sgnL * Math.abs(l);
	    forcedDir = true;
	  }

	  var d = turnIsPercent ? taxiTurnPfVal * l : taxiTurnPfVal * sgnL;

	  var getIsTooClose = function getIsTooClose(d) {
	    return Math.abs(d) < minD || Math.abs(d) >= Math.abs(l);
	  };

	  var isTooCloseSrc = getIsTooClose(d);
	  var isTooCloseTgt = getIsTooClose(l - Math.abs(d));
	  var isTooClose = isTooCloseSrc || isTooCloseTgt;

	  if (isTooClose && !forcedDir) {
	    // non-ideal routing
	    if (isVert) {
	      // vertical fallbacks
	      var lShapeInsideSrc = Math.abs(pl) <= srcH / 2;
	      var lShapeInsideTgt = Math.abs(pdx) <= tgtW / 2;

	      if (lShapeInsideSrc) {
	        // horizontal Z-shape (direction not respected)
	        var x = (posPts.x1 + posPts.x2) / 2;
	        var y1 = posPts.y1,
	            y2 = posPts.y2;
	        rs.segpts = [x, y1, x, y2];
	      } else if (lShapeInsideTgt) {
	        // vertical Z-shape (distance not respected)
	        var y = (posPts.y1 + posPts.y2) / 2;
	        var x1 = posPts.x1,
	            x2 = posPts.x2;
	        rs.segpts = [x1, y, x2, y];
	      } else {
	        // L-shape fallback (turn distance not respected, but works well with tree siblings)
	        rs.segpts = [posPts.x1, posPts.y2];
	      }
	    } else {
	      // horizontal fallbacks
	      var _lShapeInsideSrc = Math.abs(pl) <= srcW / 2;

	      var _lShapeInsideTgt = Math.abs(pdy) <= tgtH / 2;

	      if (_lShapeInsideSrc) {
	        // vertical Z-shape (direction not respected)
	        var _y = (posPts.y1 + posPts.y2) / 2;

	        var _x = posPts.x1,
	            _x2 = posPts.x2;
	        rs.segpts = [_x, _y, _x2, _y];
	      } else if (_lShapeInsideTgt) {
	        // horizontal Z-shape (turn distance not respected)
	        var _x3 = (posPts.x1 + posPts.x2) / 2;

	        var _y2 = posPts.y1,
	            _y3 = posPts.y2;
	        rs.segpts = [_x3, _y2, _x3, _y3];
	      } else {
	        // L-shape (turn distance not respected, but works well for tree siblings)
	        rs.segpts = [posPts.x2, posPts.y1];
	      }
	    }
	  } else {
	    // ideal routing
	    if (isVert) {
	      var _y4 = (d < 0 ? posPts.y2 : posPts.y1) + d + (dIncludesNodeBody ? srcH / 2 * sgnL : 0);

	      var _x4 = posPts.x1,
	          _x5 = posPts.x2;
	      rs.segpts = [_x4, _y4, _x5, _y4];
	    } else {
	      // horizontal
	      var _x6 = (d < 0 ? posPts.x2 : posPts.x1) + d + (dIncludesNodeBody ? srcW / 2 * sgnL : 0);

	      var _y5 = posPts.y1,
	          _y6 = posPts.y2;
	      rs.segpts = [_x6, _y5, _x6, _y6];
	    }
	  }
	};

	BRp$3.tryToCorrectInvalidPoints = function (edge, pairInfo) {
	  var rs = edge._private.rscratch; // can only correct beziers for now...

	  if (rs.edgeType === 'bezier') {
	    var srcPos = pairInfo.srcPos,
	        tgtPos = pairInfo.tgtPos,
	        srcW = pairInfo.srcW,
	        srcH = pairInfo.srcH,
	        tgtW = pairInfo.tgtW,
	        tgtH = pairInfo.tgtH,
	        srcShape = pairInfo.srcShape,
	        tgtShape = pairInfo.tgtShape;
	    var badStart = !number(rs.startX) || !number(rs.startY);
	    var badAStart = !number(rs.arrowStartX) || !number(rs.arrowStartY);
	    var badEnd = !number(rs.endX) || !number(rs.endY);
	    var badAEnd = !number(rs.arrowEndX) || !number(rs.arrowEndY);
	    var minCpADistFactor = 3;
	    var arrowW = this.getArrowWidth(edge.pstyle('width').pfValue, edge.pstyle('arrow-scale').value) * this.arrowShapeWidth;
	    var minCpADist = minCpADistFactor * arrowW;
	    var startACpDist = dist({
	      x: rs.ctrlpts[0],
	      y: rs.ctrlpts[1]
	    }, {
	      x: rs.startX,
	      y: rs.startY
	    });
	    var closeStartACp = startACpDist < minCpADist;
	    var endACpDist = dist({
	      x: rs.ctrlpts[0],
	      y: rs.ctrlpts[1]
	    }, {
	      x: rs.endX,
	      y: rs.endY
	    });
	    var closeEndACp = endACpDist < minCpADist;
	    var overlapping = false;

	    if (badStart || badAStart || closeStartACp) {
	      overlapping = true; // project control point along line from src centre to outside the src shape
	      // (otherwise intersection will yield nothing)

	      var cpD = {
	        // delta
	        x: rs.ctrlpts[0] - srcPos.x,
	        y: rs.ctrlpts[1] - srcPos.y
	      };
	      var cpL = Math.sqrt(cpD.x * cpD.x + cpD.y * cpD.y); // length of line

	      var cpM = {
	        // normalised delta
	        x: cpD.x / cpL,
	        y: cpD.y / cpL
	      };
	      var radius = Math.max(srcW, srcH);
	      var cpProj = {
	        // *2 radius guarantees outside shape
	        x: rs.ctrlpts[0] + cpM.x * 2 * radius,
	        y: rs.ctrlpts[1] + cpM.y * 2 * radius
	      };
	      var srcCtrlPtIntn = srcShape.intersectLine(srcPos.x, srcPos.y, srcW, srcH, cpProj.x, cpProj.y, 0);

	      if (closeStartACp) {
	        rs.ctrlpts[0] = rs.ctrlpts[0] + cpM.x * (minCpADist - startACpDist);
	        rs.ctrlpts[1] = rs.ctrlpts[1] + cpM.y * (minCpADist - startACpDist);
	      } else {
	        rs.ctrlpts[0] = srcCtrlPtIntn[0] + cpM.x * minCpADist;
	        rs.ctrlpts[1] = srcCtrlPtIntn[1] + cpM.y * minCpADist;
	      }
	    }

	    if (badEnd || badAEnd || closeEndACp) {
	      overlapping = true; // project control point along line from tgt centre to outside the tgt shape
	      // (otherwise intersection will yield nothing)

	      var _cpD = {
	        // delta
	        x: rs.ctrlpts[0] - tgtPos.x,
	        y: rs.ctrlpts[1] - tgtPos.y
	      };

	      var _cpL = Math.sqrt(_cpD.x * _cpD.x + _cpD.y * _cpD.y); // length of line


	      var _cpM = {
	        // normalised delta
	        x: _cpD.x / _cpL,
	        y: _cpD.y / _cpL
	      };

	      var _radius = Math.max(srcW, srcH);

	      var _cpProj = {
	        // *2 radius guarantees outside shape
	        x: rs.ctrlpts[0] + _cpM.x * 2 * _radius,
	        y: rs.ctrlpts[1] + _cpM.y * 2 * _radius
	      };
	      var tgtCtrlPtIntn = tgtShape.intersectLine(tgtPos.x, tgtPos.y, tgtW, tgtH, _cpProj.x, _cpProj.y, 0);

	      if (closeEndACp) {
	        rs.ctrlpts[0] = rs.ctrlpts[0] + _cpM.x * (minCpADist - endACpDist);
	        rs.ctrlpts[1] = rs.ctrlpts[1] + _cpM.y * (minCpADist - endACpDist);
	      } else {
	        rs.ctrlpts[0] = tgtCtrlPtIntn[0] + _cpM.x * minCpADist;
	        rs.ctrlpts[1] = tgtCtrlPtIntn[1] + _cpM.y * minCpADist;
	      }
	    }

	    if (overlapping) {
	      // recalc endpts
	      this.findEndpoints(edge);
	    }
	  }
	};

	BRp$3.storeAllpts = function (edge) {
	  var rs = edge._private.rscratch;

	  if (rs.edgeType === 'multibezier' || rs.edgeType === 'bezier' || rs.edgeType === 'self' || rs.edgeType === 'compound') {
	    rs.allpts = [];
	    rs.allpts.push(rs.startX, rs.startY);

	    for (var b = 0; b + 1 < rs.ctrlpts.length; b += 2) {
	      // ctrl pt itself
	      rs.allpts.push(rs.ctrlpts[b], rs.ctrlpts[b + 1]); // the midpt between ctrlpts as intermediate destination pts

	      if (b + 3 < rs.ctrlpts.length) {
	        rs.allpts.push((rs.ctrlpts[b] + rs.ctrlpts[b + 2]) / 2, (rs.ctrlpts[b + 1] + rs.ctrlpts[b + 3]) / 2);
	      }
	    }

	    rs.allpts.push(rs.endX, rs.endY);
	    var m, mt;

	    if (rs.ctrlpts.length / 2 % 2 === 0) {
	      m = rs.allpts.length / 2 - 1;
	      rs.midX = rs.allpts[m];
	      rs.midY = rs.allpts[m + 1];
	    } else {
	      m = rs.allpts.length / 2 - 3;
	      mt = 0.5;
	      rs.midX = qbezierAt(rs.allpts[m], rs.allpts[m + 2], rs.allpts[m + 4], mt);
	      rs.midY = qbezierAt(rs.allpts[m + 1], rs.allpts[m + 3], rs.allpts[m + 5], mt);
	    }
	  } else if (rs.edgeType === 'straight') {
	    // need to calc these after endpts
	    rs.allpts = [rs.startX, rs.startY, rs.endX, rs.endY]; // default midpt for labels etc

	    rs.midX = (rs.startX + rs.endX + rs.arrowStartX + rs.arrowEndX) / 4;
	    rs.midY = (rs.startY + rs.endY + rs.arrowStartY + rs.arrowEndY) / 4;
	  } else if (rs.edgeType === 'segments') {
	    rs.allpts = [];
	    rs.allpts.push(rs.startX, rs.startY);
	    rs.allpts.push.apply(rs.allpts, rs.segpts);
	    rs.allpts.push(rs.endX, rs.endY);

	    if (rs.segpts.length % 4 === 0) {
	      var i2 = rs.segpts.length / 2;
	      var i1 = i2 - 2;
	      rs.midX = (rs.segpts[i1] + rs.segpts[i2]) / 2;
	      rs.midY = (rs.segpts[i1 + 1] + rs.segpts[i2 + 1]) / 2;
	    } else {
	      var _i = rs.segpts.length / 2 - 1;

	      rs.midX = rs.segpts[_i];
	      rs.midY = rs.segpts[_i + 1];
	    }
	  }
	};

	BRp$3.checkForInvalidEdgeWarning = function (edge) {
	  var rs = edge[0]._private.rscratch;

	  if (rs.nodesOverlap || number(rs.startX) && number(rs.startY) && number(rs.endX) && number(rs.endY)) {
	    rs.loggedErr = false;
	  } else {
	    if (!rs.loggedErr) {
	      rs.loggedErr = true;
	      warn('Edge `' + edge.id() + '` has invalid endpoints and so it is impossible to draw.  Adjust your edge style (e.g. control points) accordingly or use an alternative edge type.  This is expected behaviour when the source node and the target node overlap.');
	    }
	  }
	};

	BRp$3.findEdgeControlPoints = function (edges) {
	  var _this = this;

	  if (!edges || edges.length === 0) {
	    return;
	  }

	  var r = this;
	  var cy = r.cy;
	  var hasCompounds = cy.hasCompoundNodes();
	  var hashTable = {
	    map: new Map$1(),
	    get: function get(pairId) {
	      var map2 = this.map.get(pairId[0]);

	      if (map2 != null) {
	        return map2.get(pairId[1]);
	      } else {
	        return null;
	      }
	    },
	    set: function set(pairId, val) {
	      var map2 = this.map.get(pairId[0]);

	      if (map2 == null) {
	        map2 = new Map$1();
	        this.map.set(pairId[0], map2);
	      }

	      map2.set(pairId[1], val);
	    }
	  };
	  var pairIds = [];
	  var haystackEdges = []; // create a table of edge (src, tgt) => list of edges between them

	  for (var i = 0; i < edges.length; i++) {
	    var edge = edges[i];
	    var _p = edge._private;
	    var curveStyle = edge.pstyle('curve-style').value; // ignore edges who are not to be displayed
	    // they shouldn't take up space

	    if (edge.removed() || !edge.takesUpSpace()) {
	      continue;
	    }

	    if (curveStyle === 'haystack') {
	      haystackEdges.push(edge);
	      continue;
	    }

	    var edgeIsUnbundled = curveStyle === 'unbundled-bezier' || curveStyle === 'segments' || curveStyle === 'straight' || curveStyle === 'taxi';
	    var edgeIsBezier = curveStyle === 'unbundled-bezier' || curveStyle === 'bezier';
	    var src = _p.source;
	    var tgt = _p.target;
	    var srcIndex = src.poolIndex();
	    var tgtIndex = tgt.poolIndex();
	    var pairId = [srcIndex, tgtIndex].sort();
	    var tableEntry = hashTable.get(pairId);

	    if (tableEntry == null) {
	      tableEntry = {
	        eles: []
	      };
	      hashTable.set(pairId, tableEntry);
	      pairIds.push(pairId);
	    }

	    tableEntry.eles.push(edge);

	    if (edgeIsUnbundled) {
	      tableEntry.hasUnbundled = true;
	    }

	    if (edgeIsBezier) {
	      tableEntry.hasBezier = true;
	    }
	  } // for each pair (src, tgt), create the ctrl pts
	  // Nested for loop is OK; total number of iterations for both loops = edgeCount


	  var _loop = function _loop(p) {
	    var pairId = pairIds[p];
	    var pairInfo = hashTable.get(pairId);
	    var swappedpairInfo = void 0;

	    if (!pairInfo.hasUnbundled) {
	      var pllEdges = pairInfo.eles[0].parallelEdges().filter(function (e) {
	        return e.isBundledBezier();
	      });
	      clearArray(pairInfo.eles);
	      pllEdges.forEach(function (edge) {
	        return pairInfo.eles.push(edge);
	      }); // for each pair id, the edges should be sorted by index

	      pairInfo.eles.sort(function (edge1, edge2) {
	        return edge1.poolIndex() - edge2.poolIndex();
	      });
	    }

	    var firstEdge = pairInfo.eles[0];
	    var src = firstEdge.source();
	    var tgt = firstEdge.target(); // make sure src/tgt distinction is consistent w.r.t. pairId

	    if (src.poolIndex() > tgt.poolIndex()) {
	      var temp = src;
	      src = tgt;
	      tgt = temp;
	    }

	    var srcPos = pairInfo.srcPos = src.position();
	    var tgtPos = pairInfo.tgtPos = tgt.position();
	    var srcW = pairInfo.srcW = src.outerWidth();
	    var srcH = pairInfo.srcH = src.outerHeight();
	    var tgtW = pairInfo.tgtW = tgt.outerWidth();
	    var tgtH = pairInfo.tgtH = tgt.outerHeight();

	    var srcShape = pairInfo.srcShape = r.nodeShapes[_this.getNodeShape(src)];

	    var tgtShape = pairInfo.tgtShape = r.nodeShapes[_this.getNodeShape(tgt)];

	    pairInfo.dirCounts = {
	      'north': 0,
	      'west': 0,
	      'south': 0,
	      'east': 0,
	      'northwest': 0,
	      'southwest': 0,
	      'northeast': 0,
	      'southeast': 0
	    };

	    for (var _i2 = 0; _i2 < pairInfo.eles.length; _i2++) {
	      var _edge = pairInfo.eles[_i2];
	      var rs = _edge[0]._private.rscratch;

	      var _curveStyle = _edge.pstyle('curve-style').value;

	      var _edgeIsUnbundled = _curveStyle === 'unbundled-bezier' || _curveStyle === 'segments' || _curveStyle === 'taxi'; // whether the normalised pair order is the reverse of the edge's src-tgt order


	      var edgeIsSwapped = !src.same(_edge.source());

	      if (!pairInfo.calculatedIntersection && src !== tgt && (pairInfo.hasBezier || pairInfo.hasUnbundled)) {
	        pairInfo.calculatedIntersection = true; // pt outside src shape to calc distance/displacement from src to tgt

	        var srcOutside = srcShape.intersectLine(srcPos.x, srcPos.y, srcW, srcH, tgtPos.x, tgtPos.y, 0);
	        var srcIntn = pairInfo.srcIntn = srcOutside; // pt outside tgt shape to calc distance/displacement from src to tgt

	        var tgtOutside = tgtShape.intersectLine(tgtPos.x, tgtPos.y, tgtW, tgtH, srcPos.x, srcPos.y, 0);
	        var tgtIntn = pairInfo.tgtIntn = tgtOutside;
	        var intersectionPts = pairInfo.intersectionPts = {
	          x1: srcOutside[0],
	          x2: tgtOutside[0],
	          y1: srcOutside[1],
	          y2: tgtOutside[1]
	        };
	        var posPts = pairInfo.posPts = {
	          x1: srcPos.x,
	          x2: tgtPos.x,
	          y1: srcPos.y,
	          y2: tgtPos.y
	        };
	        var dy = tgtOutside[1] - srcOutside[1];
	        var dx = tgtOutside[0] - srcOutside[0];
	        var l = Math.sqrt(dx * dx + dy * dy);
	        var vector = pairInfo.vector = {
	          x: dx,
	          y: dy
	        };
	        var vectorNorm = pairInfo.vectorNorm = {
	          x: vector.x / l,
	          y: vector.y / l
	        };
	        var vectorNormInverse = {
	          x: -vectorNorm.y,
	          y: vectorNorm.x
	        }; // if node shapes overlap, then no ctrl pts to draw

	        pairInfo.nodesOverlap = !number(l) || tgtShape.checkPoint(srcOutside[0], srcOutside[1], 0, tgtW, tgtH, tgtPos.x, tgtPos.y) || srcShape.checkPoint(tgtOutside[0], tgtOutside[1], 0, srcW, srcH, srcPos.x, srcPos.y);
	        pairInfo.vectorNormInverse = vectorNormInverse;
	        swappedpairInfo = {
	          nodesOverlap: pairInfo.nodesOverlap,
	          dirCounts: pairInfo.dirCounts,
	          calculatedIntersection: true,
	          hasBezier: pairInfo.hasBezier,
	          hasUnbundled: pairInfo.hasUnbundled,
	          eles: pairInfo.eles,
	          srcPos: tgtPos,
	          tgtPos: srcPos,
	          srcW: tgtW,
	          srcH: tgtH,
	          tgtW: srcW,
	          tgtH: srcH,
	          srcIntn: tgtIntn,
	          tgtIntn: srcIntn,
	          srcShape: tgtShape,
	          tgtShape: srcShape,
	          posPts: {
	            x1: posPts.x2,
	            y1: posPts.y2,
	            x2: posPts.x1,
	            y2: posPts.y1
	          },
	          intersectionPts: {
	            x1: intersectionPts.x2,
	            y1: intersectionPts.y2,
	            x2: intersectionPts.x1,
	            y2: intersectionPts.y1
	          },
	          vector: {
	            x: -vector.x,
	            y: -vector.y
	          },
	          vectorNorm: {
	            x: -vectorNorm.x,
	            y: -vectorNorm.y
	          },
	          vectorNormInverse: {
	            x: -vectorNormInverse.x,
	            y: -vectorNormInverse.y
	          }
	        };
	      }

	      var passedPairInfo = edgeIsSwapped ? swappedpairInfo : pairInfo;
	      rs.nodesOverlap = passedPairInfo.nodesOverlap;
	      rs.srcIntn = passedPairInfo.srcIntn;
	      rs.tgtIntn = passedPairInfo.tgtIntn;

	      if (hasCompounds && (src.isParent() || src.isChild() || tgt.isParent() || tgt.isChild()) && (src.parents().anySame(tgt) || tgt.parents().anySame(src) || src.same(tgt) && src.isParent())) {
	        _this.findCompoundLoopPoints(_edge, passedPairInfo, _i2, _edgeIsUnbundled);
	      } else if (src === tgt) {
	        _this.findLoopPoints(_edge, passedPairInfo, _i2, _edgeIsUnbundled);
	      } else if (_curveStyle === 'segments') {
	        _this.findSegmentsPoints(_edge, passedPairInfo);
	      } else if (_curveStyle === 'taxi') {
	        _this.findTaxiPoints(_edge, passedPairInfo);
	      } else if (_curveStyle === 'straight' || !_edgeIsUnbundled && pairInfo.eles.length % 2 === 1 && _i2 === Math.floor(pairInfo.eles.length / 2)) {
	        _this.findStraightEdgePoints(_edge);
	      } else {
	        _this.findBezierPoints(_edge, passedPairInfo, _i2, _edgeIsUnbundled, edgeIsSwapped);
	      }

	      _this.findEndpoints(_edge);

	      _this.tryToCorrectInvalidPoints(_edge, passedPairInfo);

	      _this.checkForInvalidEdgeWarning(_edge);

	      _this.storeAllpts(_edge);

	      _this.storeEdgeProjections(_edge);

	      _this.calculateArrowAngles(_edge);

	      _this.recalculateEdgeLabelProjections(_edge);

	      _this.calculateLabelAngles(_edge);
	    } // for pair edges

	  };

	  for (var p = 0; p < pairIds.length; p++) {
	    _loop(p);
	  } // for pair ids
	  // haystacks avoid the expense of pairInfo stuff (intersections etc.)


	  this.findHaystackPoints(haystackEdges);
	};

	function getPts(pts) {
	  var retPts = [];

	  if (pts == null) {
	    return;
	  }

	  for (var i = 0; i < pts.length; i += 2) {
	    var x = pts[i];
	    var y = pts[i + 1];
	    retPts.push({
	      x: x,
	      y: y
	    });
	  }

	  return retPts;
	}

	BRp$3.getSegmentPoints = function (edge) {
	  var rs = edge[0]._private.rscratch;
	  var type = rs.edgeType;

	  if (type === 'segments') {
	    this.recalculateRenderedStyle(edge);
	    return getPts(rs.segpts);
	  }
	};

	BRp$3.getControlPoints = function (edge) {
	  var rs = edge[0]._private.rscratch;
	  var type = rs.edgeType;

	  if (type === 'bezier' || type === 'multibezier' || type === 'self' || type === 'compound') {
	    this.recalculateRenderedStyle(edge);
	    return getPts(rs.ctrlpts);
	  }
	};

	BRp$3.getEdgeMidpoint = function (edge) {
	  var rs = edge[0]._private.rscratch;
	  this.recalculateRenderedStyle(edge);
	  return {
	    x: rs.midX,
	    y: rs.midY
	  };
	};

	var BRp$4 = {};

	BRp$4.manualEndptToPx = function (node, prop) {
	  var r = this;
	  var npos = node.position();
	  var w = node.outerWidth();
	  var h = node.outerHeight();

	  if (prop.value.length === 2) {
	    var p = [prop.pfValue[0], prop.pfValue[1]];

	    if (prop.units[0] === '%') {
	      p[0] = p[0] * w;
	    }

	    if (prop.units[1] === '%') {
	      p[1] = p[1] * h;
	    }

	    p[0] += npos.x;
	    p[1] += npos.y;
	    return p;
	  } else {
	    var angle = prop.pfValue[0];
	    angle = -Math.PI / 2 + angle; // start at 12 o'clock

	    var l = 2 * Math.max(w, h);
	    var _p = [npos.x + Math.cos(angle) * l, npos.y + Math.sin(angle) * l];
	    return r.nodeShapes[this.getNodeShape(node)].intersectLine(npos.x, npos.y, w, h, _p[0], _p[1], 0);
	  }
	};

	BRp$4.findEndpoints = function (edge) {
	  var r = this;
	  var intersect;
	  var source = edge.source()[0];
	  var target = edge.target()[0];
	  var srcPos = source.position();
	  var tgtPos = target.position();
	  var tgtArShape = edge.pstyle('target-arrow-shape').value;
	  var srcArShape = edge.pstyle('source-arrow-shape').value;
	  var tgtDist = edge.pstyle('target-distance-from-node').pfValue;
	  var srcDist = edge.pstyle('source-distance-from-node').pfValue;
	  var curveStyle = edge.pstyle('curve-style').value;
	  var rs = edge._private.rscratch;
	  var et = rs.edgeType;
	  var taxi = curveStyle === 'taxi';
	  var self = et === 'self' || et === 'compound';
	  var bezier = et === 'bezier' || et === 'multibezier' || self;
	  var multi = et !== 'bezier';
	  var lines = et === 'straight' || et === 'segments';
	  var segments = et === 'segments';
	  var hasEndpts = bezier || multi || lines;
	  var overrideEndpts = self || taxi;
	  var srcManEndpt = edge.pstyle('source-endpoint');
	  var srcManEndptVal = overrideEndpts ? 'outside-to-node' : srcManEndpt.value;
	  var tgtManEndpt = edge.pstyle('target-endpoint');
	  var tgtManEndptVal = overrideEndpts ? 'outside-to-node' : tgtManEndpt.value;
	  rs.srcManEndpt = srcManEndpt;
	  rs.tgtManEndpt = tgtManEndpt;
	  var p1; // last known point of edge on target side

	  var p2; // last known point of edge on source side

	  var p1_i; // point to intersect with target shape

	  var p2_i; // point to intersect with source shape

	  if (bezier) {
	    var cpStart = [rs.ctrlpts[0], rs.ctrlpts[1]];
	    var cpEnd = multi ? [rs.ctrlpts[rs.ctrlpts.length - 2], rs.ctrlpts[rs.ctrlpts.length - 1]] : cpStart;
	    p1 = cpEnd;
	    p2 = cpStart;
	  } else if (lines) {
	    var srcArrowFromPt = !segments ? [tgtPos.x, tgtPos.y] : rs.segpts.slice(0, 2);
	    var tgtArrowFromPt = !segments ? [srcPos.x, srcPos.y] : rs.segpts.slice(rs.segpts.length - 2);
	    p1 = tgtArrowFromPt;
	    p2 = srcArrowFromPt;
	  }

	  if (tgtManEndptVal === 'inside-to-node') {
	    intersect = [tgtPos.x, tgtPos.y];
	  } else if (tgtManEndpt.units) {
	    intersect = this.manualEndptToPx(target, tgtManEndpt);
	  } else if (tgtManEndptVal === 'outside-to-line') {
	    intersect = rs.tgtIntn; // use cached value from ctrlpt calc
	  } else {
	    if (tgtManEndptVal === 'outside-to-node' || tgtManEndptVal === 'outside-to-node-or-label') {
	      p1_i = p1;
	    } else if (tgtManEndptVal === 'outside-to-line' || tgtManEndptVal === 'outside-to-line-or-label') {
	      p1_i = [srcPos.x, srcPos.y];
	    }

	    intersect = r.nodeShapes[this.getNodeShape(target)].intersectLine(tgtPos.x, tgtPos.y, target.outerWidth(), target.outerHeight(), p1_i[0], p1_i[1], 0);

	    if (tgtManEndptVal === 'outside-to-node-or-label' || tgtManEndptVal === 'outside-to-line-or-label') {
	      var trs = target._private.rscratch;
	      var lw = trs.labelWidth;
	      var lh = trs.labelHeight;
	      var lx = trs.labelX;
	      var ly = trs.labelY;
	      var lw2 = lw / 2;
	      var lh2 = lh / 2;
	      var va = target.pstyle('text-valign').value;

	      if (va === 'top') {
	        ly -= lh2;
	      } else if (va === 'bottom') {
	        ly += lh2;
	      }

	      var ha = target.pstyle('text-halign').value;

	      if (ha === 'left') {
	        lx -= lw2;
	      } else if (ha === 'right') {
	        lx += lw2;
	      }

	      var labelIntersect = polygonIntersectLine(p1_i[0], p1_i[1], [lx - lw2, ly - lh2, lx + lw2, ly - lh2, lx + lw2, ly + lh2, lx - lw2, ly + lh2], tgtPos.x, tgtPos.y);

	      if (labelIntersect.length > 0) {
	        var refPt = srcPos;
	        var intSqdist = sqdist(refPt, array2point(intersect));
	        var labIntSqdist = sqdist(refPt, array2point(labelIntersect));
	        var minSqDist = intSqdist;

	        if (labIntSqdist < intSqdist) {
	          intersect = labelIntersect;
	          minSqDist = labIntSqdist;
	        }

	        if (labelIntersect.length > 2) {
	          var labInt2SqDist = sqdist(refPt, {
	            x: labelIntersect[2],
	            y: labelIntersect[3]
	          });

	          if (labInt2SqDist < minSqDist) {
	            intersect = [labelIntersect[2], labelIntersect[3]];
	          }
	        }
	      }
	    }
	  }

	  var arrowEnd = shortenIntersection(intersect, p1, r.arrowShapes[tgtArShape].spacing(edge) + tgtDist);
	  var edgeEnd = shortenIntersection(intersect, p1, r.arrowShapes[tgtArShape].gap(edge) + tgtDist);
	  rs.endX = edgeEnd[0];
	  rs.endY = edgeEnd[1];
	  rs.arrowEndX = arrowEnd[0];
	  rs.arrowEndY = arrowEnd[1];

	  if (srcManEndptVal === 'inside-to-node') {
	    intersect = [srcPos.x, srcPos.y];
	  } else if (srcManEndpt.units) {
	    intersect = this.manualEndptToPx(source, srcManEndpt);
	  } else if (srcManEndptVal === 'outside-to-line') {
	    intersect = rs.srcIntn; // use cached value from ctrlpt calc
	  } else {
	    if (srcManEndptVal === 'outside-to-node' || srcManEndptVal === 'outside-to-node-or-label') {
	      p2_i = p2;
	    } else if (srcManEndptVal === 'outside-to-line' || srcManEndptVal === 'outside-to-line-or-label') {
	      p2_i = [tgtPos.x, tgtPos.y];
	    }

	    intersect = r.nodeShapes[this.getNodeShape(source)].intersectLine(srcPos.x, srcPos.y, source.outerWidth(), source.outerHeight(), p2_i[0], p2_i[1], 0);

	    if (srcManEndptVal === 'outside-to-node-or-label' || srcManEndptVal === 'outside-to-line-or-label') {
	      var srs = source._private.rscratch;
	      var _lw = srs.labelWidth;
	      var _lh = srs.labelHeight;
	      var _lx = srs.labelX;
	      var _ly = srs.labelY;

	      var _lw2 = _lw / 2;

	      var _lh2 = _lh / 2;

	      var _va = source.pstyle('text-valign').value;

	      if (_va === 'top') {
	        _ly -= _lh2;
	      } else if (_va === 'bottom') {
	        _ly += _lh2;
	      }

	      var _ha = source.pstyle('text-halign').value;

	      if (_ha === 'left') {
	        _lx -= _lw2;
	      } else if (_ha === 'right') {
	        _lx += _lw2;
	      }

	      var _labelIntersect = polygonIntersectLine(p2_i[0], p2_i[1], [_lx - _lw2, _ly - _lh2, _lx + _lw2, _ly - _lh2, _lx + _lw2, _ly + _lh2, _lx - _lw2, _ly + _lh2], srcPos.x, srcPos.y);

	      if (_labelIntersect.length > 0) {
	        var _refPt = tgtPos;

	        var _intSqdist = sqdist(_refPt, array2point(intersect));

	        var _labIntSqdist = sqdist(_refPt, array2point(_labelIntersect));

	        var _minSqDist = _intSqdist;

	        if (_labIntSqdist < _intSqdist) {
	          intersect = [_labelIntersect[0], _labelIntersect[1]];
	          _minSqDist = _labIntSqdist;
	        }

	        if (_labelIntersect.length > 2) {
	          var _labInt2SqDist = sqdist(_refPt, {
	            x: _labelIntersect[2],
	            y: _labelIntersect[3]
	          });

	          if (_labInt2SqDist < _minSqDist) {
	            intersect = [_labelIntersect[2], _labelIntersect[3]];
	          }
	        }
	      }
	    }
	  }

	  var arrowStart = shortenIntersection(intersect, p2, r.arrowShapes[srcArShape].spacing(edge) + srcDist);
	  var edgeStart = shortenIntersection(intersect, p2, r.arrowShapes[srcArShape].gap(edge) + srcDist);
	  rs.startX = edgeStart[0];
	  rs.startY = edgeStart[1];
	  rs.arrowStartX = arrowStart[0];
	  rs.arrowStartY = arrowStart[1];

	  if (hasEndpts) {
	    if (!number(rs.startX) || !number(rs.startY) || !number(rs.endX) || !number(rs.endY)) {
	      rs.badLine = true;
	    } else {
	      rs.badLine = false;
	    }
	  }
	};

	BRp$4.getSourceEndpoint = function (edge) {
	  var rs = edge[0]._private.rscratch;
	  this.recalculateRenderedStyle(edge);

	  switch (rs.edgeType) {
	    case 'haystack':
	      return {
	        x: rs.haystackPts[0],
	        y: rs.haystackPts[1]
	      };

	    default:
	      return {
	        x: rs.arrowStartX,
	        y: rs.arrowStartY
	      };
	  }
	};

	BRp$4.getTargetEndpoint = function (edge) {
	  var rs = edge[0]._private.rscratch;
	  this.recalculateRenderedStyle(edge);

	  switch (rs.edgeType) {
	    case 'haystack':
	      return {
	        x: rs.haystackPts[2],
	        y: rs.haystackPts[3]
	      };

	    default:
	      return {
	        x: rs.arrowEndX,
	        y: rs.arrowEndY
	      };
	  }
	};

	var BRp$5 = {};

	function pushBezierPts(r, edge, pts) {
	  var qbezierAt$1 = function qbezierAt$1(p1, p2, p3, t) {
	    return qbezierAt(p1, p2, p3, t);
	  };

	  var _p = edge._private;
	  var bpts = _p.rstyle.bezierPts;

	  for (var i = 0; i < r.bezierProjPcts.length; i++) {
	    var p = r.bezierProjPcts[i];
	    bpts.push({
	      x: qbezierAt$1(pts[0], pts[2], pts[4], p),
	      y: qbezierAt$1(pts[1], pts[3], pts[5], p)
	    });
	  }
	}

	BRp$5.storeEdgeProjections = function (edge) {
	  var _p = edge._private;
	  var rs = _p.rscratch;
	  var et = rs.edgeType; // clear the cached points state

	  _p.rstyle.bezierPts = null;
	  _p.rstyle.linePts = null;
	  _p.rstyle.haystackPts = null;

	  if (et === 'multibezier' || et === 'bezier' || et === 'self' || et === 'compound') {
	    _p.rstyle.bezierPts = [];

	    for (var i = 0; i + 5 < rs.allpts.length; i += 4) {
	      pushBezierPts(this, edge, rs.allpts.slice(i, i + 6));
	    }
	  } else if (et === 'segments') {
	    var lpts = _p.rstyle.linePts = [];

	    for (var i = 0; i + 1 < rs.allpts.length; i += 2) {
	      lpts.push({
	        x: rs.allpts[i],
	        y: rs.allpts[i + 1]
	      });
	    }
	  } else if (et === 'haystack') {
	    var hpts = rs.haystackPts;
	    _p.rstyle.haystackPts = [{
	      x: hpts[0],
	      y: hpts[1]
	    }, {
	      x: hpts[2],
	      y: hpts[3]
	    }];
	  }

	  _p.rstyle.arrowWidth = this.getArrowWidth(edge.pstyle('width').pfValue, edge.pstyle('arrow-scale').value) * this.arrowShapeWidth;
	};

	BRp$5.recalculateEdgeProjections = function (edges) {
	  this.findEdgeControlPoints(edges);
	};

	var BRp$6 = {};

	BRp$6.recalculateNodeLabelProjection = function (node) {
	  var content = node.pstyle('label').strValue;

	  if (emptyString(content)) {
	    return;
	  }

	  var textX, textY;
	  var _p = node._private;
	  var nodeWidth = node.width();
	  var nodeHeight = node.height();
	  var padding = node.padding();
	  var nodePos = node.position();
	  var textHalign = node.pstyle('text-halign').strValue;
	  var textValign = node.pstyle('text-valign').strValue;
	  var rs = _p.rscratch;
	  var rstyle = _p.rstyle;

	  switch (textHalign) {
	    case 'left':
	      textX = nodePos.x - nodeWidth / 2 - padding;
	      break;

	    case 'right':
	      textX = nodePos.x + nodeWidth / 2 + padding;
	      break;

	    default:
	      // e.g. center
	      textX = nodePos.x;
	  }

	  switch (textValign) {
	    case 'top':
	      textY = nodePos.y - nodeHeight / 2 - padding;
	      break;

	    case 'bottom':
	      textY = nodePos.y + nodeHeight / 2 + padding;
	      break;

	    default:
	      // e.g. middle
	      textY = nodePos.y;
	  }

	  rs.labelX = textX;
	  rs.labelY = textY;
	  rstyle.labelX = textX;
	  rstyle.labelY = textY;
	  this.applyLabelDimensions(node);
	};

	var lineAngleFromDelta = function lineAngleFromDelta(dx, dy) {
	  var angle = Math.atan(dy / dx);

	  if (dx === 0 && angle < 0) {
	    angle = angle * -1;
	  }

	  return angle;
	};

	var lineAngle = function lineAngle(p0, p1) {
	  var dx = p1.x - p0.x;
	  var dy = p1.y - p0.y;
	  return lineAngleFromDelta(dx, dy);
	};

	var bezierAngle = function bezierAngle(p0, p1, p2, t) {
	  var t0 = bound(0, t - 0.001, 1);
	  var t1 = bound(0, t + 0.001, 1);
	  var lp0 = qbezierPtAt(p0, p1, p2, t0);
	  var lp1 = qbezierPtAt(p0, p1, p2, t1);
	  return lineAngle(lp0, lp1);
	};

	BRp$6.recalculateEdgeLabelProjections = function (edge) {
	  var p;
	  var _p = edge._private;
	  var rs = _p.rscratch;
	  var r = this;
	  var content = {
	    mid: edge.pstyle('label').strValue,
	    source: edge.pstyle('source-label').strValue,
	    target: edge.pstyle('target-label').strValue
	  };

	  if (content.mid || content.source || content.target) ; else {
	      return; // no labels => no calcs
	    } // add center point to style so bounding box calculations can use it
	  //


	  p = {
	    x: rs.midX,
	    y: rs.midY
	  };

	  var setRs = function setRs(propName, prefix, value) {
	    setPrefixedProperty(_p.rscratch, propName, prefix, value);
	    setPrefixedProperty(_p.rstyle, propName, prefix, value);
	  };

	  setRs('labelX', null, p.x);
	  setRs('labelY', null, p.y);
	  var midAngle = lineAngleFromDelta(rs.midDispX, rs.midDispY);
	  setRs('labelAutoAngle', null, midAngle);

	  var createControlPointInfo = function createControlPointInfo() {
	    if (createControlPointInfo.cache) {
	      return createControlPointInfo.cache;
	    } // use cache so only 1x per edge


	    var ctrlpts = []; // store each ctrlpt info init

	    for (var i = 0; i + 5 < rs.allpts.length; i += 4) {
	      var p0 = {
	        x: rs.allpts[i],
	        y: rs.allpts[i + 1]
	      };
	      var p1 = {
	        x: rs.allpts[i + 2],
	        y: rs.allpts[i + 3]
	      }; // ctrlpt

	      var p2 = {
	        x: rs.allpts[i + 4],
	        y: rs.allpts[i + 5]
	      };
	      ctrlpts.push({
	        p0: p0,
	        p1: p1,
	        p2: p2,
	        startDist: 0,
	        length: 0,
	        segments: []
	      });
	    }

	    var bpts = _p.rstyle.bezierPts;
	    var nProjs = r.bezierProjPcts.length;

	    function addSegment(cp, p0, p1, t0, t1) {
	      var length = dist(p0, p1);
	      var prevSegment = cp.segments[cp.segments.length - 1];
	      var segment = {
	        p0: p0,
	        p1: p1,
	        t0: t0,
	        t1: t1,
	        startDist: prevSegment ? prevSegment.startDist + prevSegment.length : 0,
	        length: length
	      };
	      cp.segments.push(segment);
	      cp.length += length;
	    } // update each ctrlpt with segment info


	    for (var _i = 0; _i < ctrlpts.length; _i++) {
	      var cp = ctrlpts[_i];
	      var prevCp = ctrlpts[_i - 1];

	      if (prevCp) {
	        cp.startDist = prevCp.startDist + prevCp.length;
	      }

	      addSegment(cp, cp.p0, bpts[_i * nProjs], 0, r.bezierProjPcts[0]); // first

	      for (var j = 0; j < nProjs - 1; j++) {
	        addSegment(cp, bpts[_i * nProjs + j], bpts[_i * nProjs + j + 1], r.bezierProjPcts[j], r.bezierProjPcts[j + 1]);
	      }

	      addSegment(cp, bpts[_i * nProjs + nProjs - 1], cp.p2, r.bezierProjPcts[nProjs - 1], 1); // last
	    }

	    return createControlPointInfo.cache = ctrlpts;
	  };

	  var calculateEndProjection = function calculateEndProjection(prefix) {
	    var angle;
	    var isSrc = prefix === 'source';

	    if (!content[prefix]) {
	      return;
	    }

	    var offset = edge.pstyle(prefix + '-text-offset').pfValue;

	    switch (rs.edgeType) {
	      case 'self':
	      case 'compound':
	      case 'bezier':
	      case 'multibezier':
	        {
	          var cps = createControlPointInfo();
	          var selected;
	          var startDist = 0;
	          var totalDist = 0; // find the segment we're on

	          for (var i = 0; i < cps.length; i++) {
	            var _cp = cps[isSrc ? i : cps.length - 1 - i];

	            for (var j = 0; j < _cp.segments.length; j++) {
	              var _seg = _cp.segments[isSrc ? j : _cp.segments.length - 1 - j];
	              var lastSeg = i === cps.length - 1 && j === _cp.segments.length - 1;
	              startDist = totalDist;
	              totalDist += _seg.length;

	              if (totalDist >= offset || lastSeg) {
	                selected = {
	                  cp: _cp,
	                  segment: _seg
	                };
	                break;
	              }
	            }

	            if (selected) {
	              break;
	            }
	          }

	          var cp = selected.cp;
	          var seg = selected.segment;
	          var tSegment = (offset - startDist) / seg.length;
	          var segDt = seg.t1 - seg.t0;
	          var t = isSrc ? seg.t0 + segDt * tSegment : seg.t1 - segDt * tSegment;
	          t = bound(0, t, 1);
	          p = qbezierPtAt(cp.p0, cp.p1, cp.p2, t);
	          angle = bezierAngle(cp.p0, cp.p1, cp.p2, t);
	          break;
	        }

	      case 'straight':
	      case 'segments':
	      case 'haystack':
	        {
	          var d = 0,
	              di,
	              d0;
	          var p0, p1;
	          var l = rs.allpts.length;

	          for (var _i2 = 0; _i2 + 3 < l; _i2 += 2) {
	            if (isSrc) {
	              p0 = {
	                x: rs.allpts[_i2],
	                y: rs.allpts[_i2 + 1]
	              };
	              p1 = {
	                x: rs.allpts[_i2 + 2],
	                y: rs.allpts[_i2 + 3]
	              };
	            } else {
	              p0 = {
	                x: rs.allpts[l - 2 - _i2],
	                y: rs.allpts[l - 1 - _i2]
	              };
	              p1 = {
	                x: rs.allpts[l - 4 - _i2],
	                y: rs.allpts[l - 3 - _i2]
	              };
	            }

	            di = dist(p0, p1);
	            d0 = d;
	            d += di;

	            if (d >= offset) {
	              break;
	            }
	          }

	          var pD = offset - d0;

	          var _t = pD / di;

	          _t = bound(0, _t, 1);
	          p = lineAt(p0, p1, _t);
	          angle = lineAngle(p0, p1);
	          break;
	        }
	    }

	    setRs('labelX', prefix, p.x);
	    setRs('labelY', prefix, p.y);
	    setRs('labelAutoAngle', prefix, angle);
	  };

	  calculateEndProjection('source');
	  calculateEndProjection('target');
	  this.applyLabelDimensions(edge);
	};

	BRp$6.applyLabelDimensions = function (ele) {
	  this.applyPrefixedLabelDimensions(ele);

	  if (ele.isEdge()) {
	    this.applyPrefixedLabelDimensions(ele, 'source');
	    this.applyPrefixedLabelDimensions(ele, 'target');
	  }
	};

	BRp$6.applyPrefixedLabelDimensions = function (ele, prefix) {
	  var _p = ele._private;
	  var text = this.getLabelText(ele, prefix);
	  var labelDims = this.calculateLabelDimensions(ele, text);
	  var lineHeight = ele.pstyle('line-height').pfValue;
	  var textWrap = ele.pstyle('text-wrap').strValue;
	  var lines = getPrefixedProperty(_p.rscratch, 'labelWrapCachedLines', prefix) || [];
	  var numLines = textWrap !== 'wrap' ? 1 : Math.max(lines.length, 1);
	  var normPerLineHeight = labelDims.height / numLines;
	  var labelLineHeight = normPerLineHeight * lineHeight;
	  var width = labelDims.width;
	  var height = labelDims.height + (numLines - 1) * (lineHeight - 1) * normPerLineHeight;
	  setPrefixedProperty(_p.rstyle, 'labelWidth', prefix, width);
	  setPrefixedProperty(_p.rscratch, 'labelWidth', prefix, width);
	  setPrefixedProperty(_p.rstyle, 'labelHeight', prefix, height);
	  setPrefixedProperty(_p.rscratch, 'labelHeight', prefix, height);
	  setPrefixedProperty(_p.rscratch, 'labelLineHeight', prefix, labelLineHeight);
	};

	BRp$6.getLabelText = function (ele, prefix) {
	  var _p = ele._private;
	  var pfd = prefix ? prefix + '-' : '';
	  var text = ele.pstyle(pfd + 'label').strValue;
	  var textTransform = ele.pstyle('text-transform').value;

	  var rscratch = function rscratch(propName, value) {
	    if (value) {
	      setPrefixedProperty(_p.rscratch, propName, prefix, value);
	      return value;
	    } else {
	      return getPrefixedProperty(_p.rscratch, propName, prefix);
	    }
	  }; // for empty text, skip all processing


	  if (!text) {
	    return '';
	  }

	  if (textTransform == 'none') ; else if (textTransform == 'uppercase') {
	    text = text.toUpperCase();
	  } else if (textTransform == 'lowercase') {
	    text = text.toLowerCase();
	  }

	  var wrapStyle = ele.pstyle('text-wrap').value;

	  if (wrapStyle === 'wrap') {
	    var labelKey = rscratch('labelKey'); // save recalc if the label is the same as before

	    if (labelKey != null && rscratch('labelWrapKey') === labelKey) {
	      return rscratch('labelWrapCachedText');
	    }

	    var zwsp = "\u200B";
	    var lines = text.split('\n');
	    var maxW = ele.pstyle('text-max-width').pfValue;
	    var overflow = ele.pstyle('text-overflow-wrap').value;
	    var overflowAny = overflow === 'anywhere';
	    var wrappedLines = [];
	    var wordsRegex = /[\s\u200b]+/;
	    var wordSeparator = overflowAny ? '' : ' ';

	    for (var l = 0; l < lines.length; l++) {
	      var line = lines[l];
	      var lineDims = this.calculateLabelDimensions(ele, line);
	      var lineW = lineDims.width;

	      if (overflowAny) {
	        var processedLine = line.split('').join(zwsp);
	        line = processedLine;
	      }

	      if (lineW > maxW) {
	        // line is too long
	        var words = line.split(wordsRegex);
	        var subline = '';

	        for (var w = 0; w < words.length; w++) {
	          var word = words[w];
	          var testLine = subline.length === 0 ? word : subline + wordSeparator + word;
	          var testDims = this.calculateLabelDimensions(ele, testLine);
	          var testW = testDims.width;

	          if (testW <= maxW) {
	            // word fits on current line
	            subline += word + wordSeparator;
	          } else {
	            // word starts new line
	            if (subline) {
	              wrappedLines.push(subline);
	            }

	            subline = word + wordSeparator;
	          }
	        } // if there's remaining text, put it in a wrapped line


	        if (!subline.match(/^[\s\u200b]+$/)) {
	          wrappedLines.push(subline);
	        }
	      } else {
	        // line is already short enough
	        wrappedLines.push(line);
	      }
	    } // for


	    rscratch('labelWrapCachedLines', wrappedLines);
	    text = rscratch('labelWrapCachedText', wrappedLines.join('\n'));
	    rscratch('labelWrapKey', labelKey);
	  } else if (wrapStyle === 'ellipsis') {
	    var _maxW = ele.pstyle('text-max-width').pfValue;
	    var ellipsized = '';
	    var ellipsis = "\u2026";
	    var incLastCh = false;

	    for (var i = 0; i < text.length; i++) {
	      var widthWithNextCh = this.calculateLabelDimensions(ele, ellipsized + text[i] + ellipsis).width;

	      if (widthWithNextCh > _maxW) {
	        break;
	      }

	      ellipsized += text[i];

	      if (i === text.length - 1) {
	        incLastCh = true;
	      }
	    }

	    if (!incLastCh) {
	      ellipsized += ellipsis;
	    }

	    return ellipsized;
	  } // if ellipsize


	  return text;
	};

	BRp$6.getLabelJustification = function (ele) {
	  var justification = ele.pstyle('text-justification').strValue;
	  var textHalign = ele.pstyle('text-halign').strValue;

	  if (justification === 'auto') {
	    if (ele.isNode()) {
	      switch (textHalign) {
	        case 'left':
	          return 'right';

	        case 'right':
	          return 'left';

	        default:
	          return 'center';
	      }
	    } else {
	      return 'center';
	    }
	  } else {
	    return justification;
	  }
	};

	BRp$6.calculateLabelDimensions = function (ele, text) {
	  var r = this;
	  var cacheKey = hashString(text, ele._private.labelDimsKey);
	  var cache = r.labelDimCache || (r.labelDimCache = []);
	  var existingVal = cache[cacheKey];

	  if (existingVal != null) {
	    return existingVal;
	  }

	  var sizeMult = 1; // increase the scale to increase accuracy w.r.t. zoomed text

	  var fStyle = ele.pstyle('font-style').strValue;
	  var size = sizeMult * ele.pstyle('font-size').pfValue + 'px';
	  var family = ele.pstyle('font-family').strValue;
	  var weight = ele.pstyle('font-weight').strValue;
	  var div = this.labelCalcDiv;

	  if (!div) {
	    div = this.labelCalcDiv = document.createElement('div'); // eslint-disable-line no-undef

	    document.body.appendChild(div); // eslint-disable-line no-undef
	  }

	  var ds = div.style; // from ele style

	  ds.fontFamily = family;
	  ds.fontStyle = fStyle;
	  ds.fontSize = size;
	  ds.fontWeight = weight; // forced style

	  ds.position = 'absolute';
	  ds.left = '-9999px';
	  ds.top = '-9999px';
	  ds.zIndex = '-1';
	  ds.visibility = 'hidden';
	  ds.pointerEvents = 'none';
	  ds.padding = '0';
	  ds.lineHeight = '1'; // - newlines must be taken into account for text-wrap:wrap
	  // - since spaces are not collapsed, each space must be taken into account

	  ds.whiteSpace = 'pre'; // put label content in div

	  div.textContent = text;
	  return cache[cacheKey] = {
	    width: Math.ceil(div.clientWidth / sizeMult),
	    height: Math.ceil(div.clientHeight / sizeMult)
	  };
	};

	BRp$6.calculateLabelAngle = function (ele, prefix) {
	  var _p = ele._private;
	  var rs = _p.rscratch;
	  var isEdge = ele.isEdge();
	  var prefixDash = prefix ? prefix + '-' : '';
	  var rot = ele.pstyle(prefixDash + 'text-rotation');
	  var rotStr = rot.strValue;

	  if (rotStr === 'none') {
	    return 0;
	  } else if (isEdge && rotStr === 'autorotate') {
	    return rs.labelAutoAngle;
	  } else if (rotStr === 'autorotate') {
	    return 0;
	  } else {
	    return rot.pfValue;
	  }
	};

	BRp$6.calculateLabelAngles = function (ele) {
	  var r = this;
	  var isEdge = ele.isEdge();
	  var _p = ele._private;
	  var rs = _p.rscratch;
	  rs.labelAngle = r.calculateLabelAngle(ele);

	  if (isEdge) {
	    rs.sourceLabelAngle = r.calculateLabelAngle(ele, 'source');
	    rs.targetLabelAngle = r.calculateLabelAngle(ele, 'target');
	  }
	};

	var BRp$7 = {};
	var TOO_SMALL_CUT_RECT = 28;
	var warnedCutRect = false;

	BRp$7.getNodeShape = function (node) {
	  var r = this;
	  var shape = node.pstyle('shape').value;

	  if (shape === 'cutrectangle' && (node.width() < TOO_SMALL_CUT_RECT || node.height() < TOO_SMALL_CUT_RECT)) {
	    if (!warnedCutRect) {
	      warn('The `cutrectangle` node shape can not be used at small sizes so `rectangle` is used instead');
	      warnedCutRect = true;
	    }

	    return 'rectangle';
	  }

	  if (node.isParent()) {
	    if (shape === 'rectangle' || shape === 'roundrectangle' || shape === 'cutrectangle' || shape === 'barrel') {
	      return shape;
	    } else {
	      return 'rectangle';
	    }
	  }

	  if (shape === 'polygon') {
	    var points = node.pstyle('shape-polygon-points').value;
	    return r.nodeShapes.makePolygon(points).name;
	  }

	  return shape;
	};

	var BRp$8 = {};

	BRp$8.registerCalculationListeners = function () {
	  var cy = this.cy;
	  var elesToUpdate = cy.collection();
	  var r = this;

	  var enqueue = function enqueue(eles) {
	    var dirtyStyleCaches = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
	    elesToUpdate.merge(eles);

	    if (dirtyStyleCaches) {
	      for (var i = 0; i < eles.length; i++) {
	        var ele = eles[i];
	        var _p = ele._private;
	        var rstyle = _p.rstyle;
	        rstyle.clean = false;
	        rstyle.cleanConnected = false;
	      }
	    }
	  };

	  r.binder(cy).on('bounds.* dirty.*', function onDirtyBounds(e) {
	    var ele = e.target;
	    enqueue(ele);
	  }).on('style.* background.*', function onDirtyStyle(e) {
	    var ele = e.target;
	    enqueue(ele, false);
	  });

	  var updateEleCalcs = function updateEleCalcs(willDraw) {
	    if (willDraw) {
	      var fns = r.onUpdateEleCalcsFns;

	      for (var i = 0; i < elesToUpdate.length; i++) {
	        var ele = elesToUpdate[i];
	        var rstyle = ele._private.rstyle;

	        if (ele.isNode() && !rstyle.cleanConnected) {
	          enqueue(ele.connectedEdges());
	          rstyle.cleanConnected = true;
	        }
	      }

	      if (fns) {
	        for (var _i = 0; _i < fns.length; _i++) {
	          var fn = fns[_i];
	          fn(willDraw, elesToUpdate);
	        }
	      }

	      r.recalculateRenderedStyle(elesToUpdate);
	      elesToUpdate = cy.collection();
	    }
	  };

	  r.flushRenderedStyleQueue = function () {
	    updateEleCalcs(true);
	  };

	  r.beforeRender(updateEleCalcs, r.beforeRenderPriorities.eleCalcs);
	};

	BRp$8.onUpdateEleCalcs = function (fn) {
	  var fns = this.onUpdateEleCalcsFns = this.onUpdateEleCalcsFns || [];
	  fns.push(fn);
	};

	BRp$8.recalculateRenderedStyle = function (eles, useCache) {
	  var isCleanConnected = function isCleanConnected(ele) {
	    return ele._private.rstyle.cleanConnected;
	  };

	  var edges = [];
	  var nodes = []; // the renderer can't be used for calcs when destroyed, e.g. ele.boundingBox()

	  if (this.destroyed) {
	    return;
	  } // use cache by default for perf


	  if (useCache === undefined) {
	    useCache = true;
	  }

	  for (var i = 0; i < eles.length; i++) {
	    var ele = eles[i];
	    var _p = ele._private;
	    var rstyle = _p.rstyle; // an edge may be implicitly dirty b/c of one of its connected nodes
	    // (and a request for recalc may come in between frames)

	    if (ele.isEdge() && (!isCleanConnected(ele.source()) || !isCleanConnected(ele.target()))) {
	      rstyle.clean = false;
	    } // only update if dirty and in graph


	    if (useCache && rstyle.clean || ele.removed()) {
	      continue;
	    } // only update if not display: none


	    if (ele.pstyle('display').value === 'none') {
	      continue;
	    }

	    if (_p.group === 'nodes') {
	      nodes.push(ele);
	    } else {
	      // edges
	      edges.push(ele);
	    }

	    rstyle.clean = true;
	  } // update node data from projections


	  for (var _i2 = 0; _i2 < nodes.length; _i2++) {
	    var _ele = nodes[_i2];
	    var _p2 = _ele._private;
	    var _rstyle = _p2.rstyle;

	    var pos = _ele.position();

	    this.recalculateNodeLabelProjection(_ele);
	    _rstyle.nodeX = pos.x;
	    _rstyle.nodeY = pos.y;
	    _rstyle.nodeW = _ele.pstyle('width').pfValue;
	    _rstyle.nodeH = _ele.pstyle('height').pfValue;
	  }

	  this.recalculateEdgeProjections(edges); // update edge data from projections

	  for (var _i3 = 0; _i3 < edges.length; _i3++) {
	    var _ele2 = edges[_i3];
	    var _p3 = _ele2._private;
	    var _rstyle2 = _p3.rstyle;
	    var rs = _p3.rscratch; // update rstyle positions

	    _rstyle2.srcX = rs.arrowStartX;
	    _rstyle2.srcY = rs.arrowStartY;
	    _rstyle2.tgtX = rs.arrowEndX;
	    _rstyle2.tgtY = rs.arrowEndY;
	    _rstyle2.midX = rs.midX;
	    _rstyle2.midY = rs.midY;
	    _rstyle2.labelAngle = rs.labelAngle;
	    _rstyle2.sourceLabelAngle = rs.sourceLabelAngle;
	    _rstyle2.targetLabelAngle = rs.targetLabelAngle;
	  }
	};

	var BRp$9 = {};

	BRp$9.updateCachedGrabbedEles = function () {
	  var eles = this.cachedZSortedEles;

	  if (!eles) {
	    // just let this be recalculated on the next z sort tick
	    return;
	  }

	  eles.drag = [];
	  eles.nondrag = [];
	  var grabTargets = [];

	  for (var i = 0; i < eles.length; i++) {
	    var ele = eles[i];
	    var rs = ele._private.rscratch;

	    if (ele.grabbed() && !ele.isParent()) {
	      grabTargets.push(ele);
	    } else if (rs.inDragLayer) {
	      eles.drag.push(ele);
	    } else {
	      eles.nondrag.push(ele);
	    }
	  } // put the grab target nodes last so it's on top of its neighbourhood


	  for (var i = 0; i < grabTargets.length; i++) {
	    var ele = grabTargets[i];
	    eles.drag.push(ele);
	  }
	};

	BRp$9.invalidateCachedZSortedEles = function () {
	  this.cachedZSortedEles = null;
	};

	BRp$9.getCachedZSortedEles = function (forceRecalc) {
	  if (forceRecalc || !this.cachedZSortedEles) {
	    var eles = this.cy.mutableElements().toArray();
	    eles.sort(zIndexSort);
	    eles.interactive = eles.filter(function (ele) {
	      return ele.interactive();
	    });
	    this.cachedZSortedEles = eles;
	    this.updateCachedGrabbedEles();
	  } else {
	    eles = this.cachedZSortedEles;
	  }

	  return eles;
	};

	var BRp$a = {};
	[BRp$1, BRp$2, BRp$3, BRp$4, BRp$5, BRp$6, BRp$7, BRp$8, BRp$9].forEach(function (props) {
	  extend(BRp$a, props);
	});

	var BRp$b = {};

	BRp$b.getCachedImage = function (url, crossOrigin, onLoad) {
	  var r = this;
	  var imageCache = r.imageCache = r.imageCache || {};
	  var cache = imageCache[url];

	  if (cache) {
	    if (!cache.image.complete) {
	      cache.image.addEventListener('load', onLoad);
	    }

	    return cache.image;
	  } else {
	    cache = imageCache[url] = imageCache[url] || {};
	    var image = cache.image = new Image(); // eslint-disable-line no-undef

	    image.addEventListener('load', onLoad);
	    image.addEventListener('error', function () {
	      image.error = true;
	    }); // #1582 safari doesn't load data uris with crossOrigin properly
	    // https://bugs.webkit.org/show_bug.cgi?id=123978

	    var dataUriPrefix = 'data:';
	    var isDataUri = url.substring(0, dataUriPrefix.length).toLowerCase() === dataUriPrefix;

	    if (!isDataUri) {
	      image.crossOrigin = crossOrigin; // prevent tainted canvas
	    }

	    image.src = url;
	    return image;
	  }
	};

	var BRp$c = {};
	/* global document, window, ResizeObserver, MutationObserver */

	BRp$c.registerBinding = function (target, event, handler, useCapture) {
	  // eslint-disable-line no-unused-vars
	  var args = Array.prototype.slice.apply(arguments, [1]); // copy

	  var b = this.binder(target);
	  return b.on.apply(b, args);
	};

	BRp$c.binder = function (tgt) {
	  var r = this;
	  var tgtIsDom = tgt === window || tgt === document || tgt === document.body || domElement(tgt);

	  if (r.supportsPassiveEvents == null) {
	    // from https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md#feature-detection
	    var supportsPassive = false;

	    try {
	      var opts = Object.defineProperty({}, 'passive', {
	        get: function get() {
	          supportsPassive = true;
	          return true;
	        }
	      });
	      window.addEventListener('test', null, opts);
	    } catch (err) {// not supported
	    }

	    r.supportsPassiveEvents = supportsPassive;
	  }

	  var on = function on(event, handler, useCapture) {
	    var args = Array.prototype.slice.call(arguments);

	    if (tgtIsDom && r.supportsPassiveEvents) {
	      // replace useCapture w/ opts obj
	      args[2] = {
	        capture: useCapture != null ? useCapture : false,
	        passive: false,
	        once: false
	      };
	    }

	    r.bindings.push({
	      target: tgt,
	      args: args
	    });
	    (tgt.addEventListener || tgt.on).apply(tgt, args);
	    return this;
	  };

	  return {
	    on: on,
	    addEventListener: on,
	    addListener: on,
	    bind: on
	  };
	};

	BRp$c.nodeIsDraggable = function (node) {
	  return node && node.isNode() && !node.locked() && node.grabbable();
	};

	BRp$c.nodeIsGrabbable = function (node) {
	  return this.nodeIsDraggable(node) && node.interactive();
	};

	BRp$c.load = function () {
	  var r = this;

	  var isSelected = function isSelected(ele) {
	    return ele.selected();
	  };

	  var triggerEvents = function triggerEvents(target, names, e, position) {
	    if (target == null) {
	      target = r.cy;
	    }

	    for (var i = 0; i < names.length; i++) {
	      var name = names[i];
	      target.emit({
	        originalEvent: e,
	        type: name,
	        position: position
	      });
	    }
	  };

	  var isMultSelKeyDown = function isMultSelKeyDown(e) {
	    return e.shiftKey || e.metaKey || e.ctrlKey; // maybe e.altKey
	  };

	  var allowPanningPassthrough = function allowPanningPassthrough(down, downs) {
	    var allowPassthrough = true;

	    if (r.cy.hasCompoundNodes() && down && down.pannable()) {
	      // a grabbable compound node below the ele => no passthrough panning
	      for (var i = 0; downs && i < downs.length; i++) {
	        var down = downs[i];

	        if (down.isNode() && down.isParent()) {
	          allowPassthrough = false;
	          break;
	        }
	      }
	    } else {
	      allowPassthrough = true;
	    }

	    return allowPassthrough;
	  };

	  var setGrabbed = function setGrabbed(ele) {
	    ele[0]._private.grabbed = true;
	  };

	  var setFreed = function setFreed(ele) {
	    ele[0]._private.grabbed = false;
	  };

	  var setInDragLayer = function setInDragLayer(ele) {
	    ele[0]._private.rscratch.inDragLayer = true;
	  };

	  var setOutDragLayer = function setOutDragLayer(ele) {
	    ele[0]._private.rscratch.inDragLayer = false;
	  };

	  var setGrabTarget = function setGrabTarget(ele) {
	    ele[0]._private.rscratch.isGrabTarget = true;
	  };

	  var removeGrabTarget = function removeGrabTarget(ele) {
	    ele[0]._private.rscratch.isGrabTarget = false;
	  };

	  var addToDragList = function addToDragList(ele, opts) {
	    var list = opts.addToList;
	    var listHasEle = list.has(ele);

	    if (!listHasEle) {
	      list.merge(ele);
	      setGrabbed(ele);
	    }
	  }; // helper function to determine which child nodes and inner edges
	  // of a compound node to be dragged as well as the grabbed and selected nodes


	  var addDescendantsToDrag = function addDescendantsToDrag(node, opts) {
	    if (!node.cy().hasCompoundNodes()) {
	      return;
	    }

	    if (opts.inDragLayer == null && opts.addToList == null) {
	      return;
	    } // nothing to do


	    var innerNodes = node.descendants();

	    if (opts.inDragLayer) {
	      innerNodes.forEach(setInDragLayer);
	      innerNodes.connectedEdges().forEach(setInDragLayer);
	    }

	    if (opts.addToList) {
	      opts.addToList.unmerge(innerNodes);
	    }
	  }; // adds the given nodes and its neighbourhood to the drag layer


	  var addNodesToDrag = function addNodesToDrag(nodes, opts) {
	    opts = opts || {};
	    var hasCompoundNodes = nodes.cy().hasCompoundNodes();

	    if (opts.inDragLayer) {
	      nodes.forEach(setInDragLayer);
	      nodes.neighborhood().stdFilter(function (ele) {
	        return !hasCompoundNodes || ele.isEdge();
	      }).forEach(setInDragLayer);
	    }

	    if (opts.addToList) {
	      nodes.forEach(function (ele) {
	        addToDragList(ele, opts);
	      });
	    }

	    addDescendantsToDrag(nodes, opts); // always add to drag
	    // also add nodes and edges related to the topmost ancestor

	    updateAncestorsInDragLayer(nodes, {
	      inDragLayer: opts.inDragLayer
	    });
	    r.updateCachedGrabbedEles();
	  };

	  var addNodeToDrag = addNodesToDrag;

	  var freeDraggedElements = function freeDraggedElements(grabbedEles) {
	    if (!grabbedEles) {
	      return;
	    } // just go over all elements rather than doing a bunch of (possibly expensive) traversals


	    r.getCachedZSortedEles().forEach(function (ele) {
	      setFreed(ele);
	      setOutDragLayer(ele);
	      removeGrabTarget(ele);
	    });
	    r.updateCachedGrabbedEles();
	  }; // helper function to determine which ancestor nodes and edges should go
	  // to the drag layer (or should be removed from drag layer).


	  var updateAncestorsInDragLayer = function updateAncestorsInDragLayer(node, opts) {
	    if (opts.inDragLayer == null && opts.addToList == null) {
	      return;
	    } // nothing to do


	    if (!node.cy().hasCompoundNodes()) {
	      return;
	    } // find top-level parent


	    var parent = node.ancestors().orphans(); // no parent node: no nodes to add to the drag layer

	    if (parent.same(node)) {
	      return;
	    }

	    var nodes = parent.descendants().spawnSelf().merge(parent).unmerge(node).unmerge(node.descendants());
	    var edges = nodes.connectedEdges();

	    if (opts.inDragLayer) {
	      edges.forEach(setInDragLayer);
	      nodes.forEach(setInDragLayer);
	    }

	    if (opts.addToList) {
	      nodes.forEach(function (ele) {
	        addToDragList(ele, opts);
	      });
	    }
	  };

	  var blurActiveDomElement = function blurActiveDomElement() {
	    if (document.activeElement != null && document.activeElement.blur != null) {
	      document.activeElement.blur();
	    }
	  };

	  var haveMutationsApi = typeof MutationObserver !== 'undefined';
	  var haveResizeObserverApi = typeof ResizeObserver !== 'undefined'; // watch for when the cy container is removed from the dom

	  if (haveMutationsApi) {
	    r.removeObserver = new MutationObserver(function (mutns) {
	      // eslint-disable-line no-undef
	      for (var i = 0; i < mutns.length; i++) {
	        var mutn = mutns[i];
	        var rNodes = mutn.removedNodes;

	        if (rNodes) {
	          for (var j = 0; j < rNodes.length; j++) {
	            var rNode = rNodes[j];

	            if (rNode === r.container) {
	              r.destroy();
	              break;
	            }
	          }
	        }
	      }
	    });

	    if (r.container.parentNode) {
	      r.removeObserver.observe(r.container.parentNode, {
	        childList: true
	      });
	    }
	  } else {
	    r.registerBinding(r.container, 'DOMNodeRemoved', function (e) {
	      // eslint-disable-line no-unused-vars
	      r.destroy();
	    });
	  }

	  var onResize = util(function () {
	    r.cy.resize();
	  }, 100);

	  if (haveMutationsApi) {
	    r.styleObserver = new MutationObserver(onResize); // eslint-disable-line no-undef

	    r.styleObserver.observe(r.container, {
	      attributes: true
	    });
	  } // auto resize


	  r.registerBinding(window, 'resize', onResize); // eslint-disable-line no-undef

	  if (haveResizeObserverApi) {
	    r.resizeObserver = new ResizeObserver(onResize); // eslint-disable-line no-undef

	    r.resizeObserver.observe(r.container);
	  }

	  var forEachUp = function forEachUp(domEle, fn) {
	    while (domEle != null) {
	      fn(domEle);
	      domEle = domEle.parentNode;
	    }
	  };

	  var invalidateCoords = function invalidateCoords() {
	    r.invalidateContainerClientCoordsCache();
	  };

	  forEachUp(r.container, function (domEle) {
	    r.registerBinding(domEle, 'transitionend', invalidateCoords);
	    r.registerBinding(domEle, 'animationend', invalidateCoords);
	    r.registerBinding(domEle, 'scroll', invalidateCoords);
	  }); // stop right click menu from appearing on cy

	  r.registerBinding(r.container, 'contextmenu', function (e) {
	    e.preventDefault();
	  });

	  var inBoxSelection = function inBoxSelection() {
	    return r.selection[4] !== 0;
	  };

	  var eventInContainer = function eventInContainer(e) {
	    // save cycles if mouse events aren't to be captured
	    var containerPageCoords = r.findContainerClientCoords();
	    var x = containerPageCoords[0];
	    var y = containerPageCoords[1];
	    var width = containerPageCoords[2];
	    var height = containerPageCoords[3];
	    var positions = e.touches ? e.touches : [e];
	    var atLeastOnePosInside = false;

	    for (var i = 0; i < positions.length; i++) {
	      var p = positions[i];

	      if (x <= p.clientX && p.clientX <= x + width && y <= p.clientY && p.clientY <= y + height) {
	        atLeastOnePosInside = true;
	        break;
	      }
	    }

	    if (!atLeastOnePosInside) {
	      return false;
	    }

	    var container = r.container;
	    var target = e.target;
	    var tParent = target.parentNode;
	    var containerIsTarget = false;

	    while (tParent) {
	      if (tParent === container) {
	        containerIsTarget = true;
	        break;
	      }

	      tParent = tParent.parentNode;
	    }

	    if (!containerIsTarget) {
	      return false;
	    } // if target is outisde cy container, then this event is not for us


	    return true;
	  }; // Primary key


	  r.registerBinding(r.container, 'mousedown', function mousedownHandler(e) {
	    if (!eventInContainer(e)) {
	      return;
	    }

	    e.preventDefault();
	    blurActiveDomElement();
	    r.hoverData.capture = true;
	    r.hoverData.which = e.which;
	    var cy = r.cy;
	    var gpos = [e.clientX, e.clientY];
	    var pos = r.projectIntoViewport(gpos[0], gpos[1]);
	    var select = r.selection;
	    var nears = r.findNearestElements(pos[0], pos[1], true, false);
	    var near = nears[0];
	    var draggedElements = r.dragData.possibleDragElements;
	    r.hoverData.mdownPos = pos;
	    r.hoverData.mdownGPos = gpos;

	    var checkForTaphold = function checkForTaphold() {
	      r.hoverData.tapholdCancelled = false;
	      clearTimeout(r.hoverData.tapholdTimeout);
	      r.hoverData.tapholdTimeout = setTimeout(function () {
	        if (r.hoverData.tapholdCancelled) {
	          return;
	        } else {
	          var ele = r.hoverData.down;

	          if (ele) {
	            ele.emit({
	              originalEvent: e,
	              type: 'taphold',
	              position: {
	                x: pos[0],
	                y: pos[1]
	              }
	            });
	          } else {
	            cy.emit({
	              originalEvent: e,
	              type: 'taphold',
	              position: {
	                x: pos[0],
	                y: pos[1]
	              }
	            });
	          }
	        }
	      }, r.tapholdDuration);
	    }; // Right click button


	    if (e.which == 3) {
	      r.hoverData.cxtStarted = true;
	      var cxtEvt = {
	        originalEvent: e,
	        type: 'cxttapstart',
	        position: {
	          x: pos[0],
	          y: pos[1]
	        }
	      };

	      if (near) {
	        near.activate();
	        near.emit(cxtEvt);
	        r.hoverData.down = near;
	      } else {
	        cy.emit(cxtEvt);
	      }

	      r.hoverData.downTime = new Date().getTime();
	      r.hoverData.cxtDragged = false; // Primary button
	    } else if (e.which == 1) {
	      if (near) {
	        near.activate();
	      } // Element dragging


	      {
	        // If something is under the cursor and it is draggable, prepare to grab it
	        if (near != null) {
	          if (r.nodeIsGrabbable(near)) {
	            var makeEvent = function makeEvent(type) {
	              return {
	                originalEvent: e,
	                type: type,
	                position: {
	                  x: pos[0],
	                  y: pos[1]
	                }
	              };
	            };

	            var triggerGrab = function triggerGrab(ele) {
	              ele.emit(makeEvent('grab'));
	            };

	            setGrabTarget(near);

	            if (!near.selected()) {
	              draggedElements = r.dragData.possibleDragElements = cy.collection();
	              addNodeToDrag(near, {
	                addToList: draggedElements
	              });
	              near.emit(makeEvent('grabon')).emit(makeEvent('grab'));
	            } else {
	              draggedElements = r.dragData.possibleDragElements = cy.collection();
	              var selectedNodes = cy.$(function (ele) {
	                return ele.isNode() && ele.selected() && r.nodeIsGrabbable(ele);
	              });
	              addNodesToDrag(selectedNodes, {
	                addToList: draggedElements
	              });
	              near.emit(makeEvent('grabon'));
	              selectedNodes.forEach(triggerGrab);
	            }

	            r.redrawHint('eles', true);
	            r.redrawHint('drag', true);
	          }
	        }

	        r.hoverData.down = near;
	        r.hoverData.downs = nears;
	        r.hoverData.downTime = new Date().getTime();
	      }
	      triggerEvents(near, ['mousedown', 'tapstart', 'vmousedown'], e, {
	        x: pos[0],
	        y: pos[1]
	      });

	      if (near == null) {
	        select[4] = 1;
	        r.data.bgActivePosistion = {
	          x: pos[0],
	          y: pos[1]
	        };
	        r.redrawHint('select', true);
	        r.redraw();
	      } else if (near.pannable()) {
	        select[4] = 1; // for future pan
	      }

	      checkForTaphold();
	    } // Initialize selection box coordinates


	    select[0] = select[2] = pos[0];
	    select[1] = select[3] = pos[1];
	  }, false);
	  r.registerBinding(window, 'mousemove', function mousemoveHandler(e) {
	    // eslint-disable-line no-undef
	    var capture = r.hoverData.capture;

	    if (!capture && !eventInContainer(e)) {
	      return;
	    }

	    var preventDefault = false;
	    var cy = r.cy;
	    var zoom = cy.zoom();
	    var gpos = [e.clientX, e.clientY];
	    var pos = r.projectIntoViewport(gpos[0], gpos[1]);
	    var mdownPos = r.hoverData.mdownPos;
	    var mdownGPos = r.hoverData.mdownGPos;
	    var select = r.selection;
	    var near = null;

	    if (!r.hoverData.draggingEles && !r.hoverData.dragging && !r.hoverData.selecting) {
	      near = r.findNearestElement(pos[0], pos[1], true, false);
	    }

	    var last = r.hoverData.last;
	    var down = r.hoverData.down;
	    var disp = [pos[0] - select[2], pos[1] - select[3]];
	    var draggedElements = r.dragData.possibleDragElements;
	    var isOverThresholdDrag;

	    if (mdownGPos) {
	      var dx = gpos[0] - mdownGPos[0];
	      var dx2 = dx * dx;
	      var dy = gpos[1] - mdownGPos[1];
	      var dy2 = dy * dy;
	      var dist2 = dx2 + dy2;
	      r.hoverData.isOverThresholdDrag = isOverThresholdDrag = dist2 >= r.desktopTapThreshold2;
	    }

	    var multSelKeyDown = isMultSelKeyDown(e);

	    if (isOverThresholdDrag) {
	      r.hoverData.tapholdCancelled = true;
	    }

	    var updateDragDelta = function updateDragDelta() {
	      var dragDelta = r.hoverData.dragDelta = r.hoverData.dragDelta || [];

	      if (dragDelta.length === 0) {
	        dragDelta.push(disp[0]);
	        dragDelta.push(disp[1]);
	      } else {
	        dragDelta[0] += disp[0];
	        dragDelta[1] += disp[1];
	      }
	    };

	    preventDefault = true;
	    triggerEvents(near, ['mousemove', 'vmousemove', 'tapdrag'], e, {
	      x: pos[0],
	      y: pos[1]
	    });

	    var goIntoBoxMode = function goIntoBoxMode() {
	      r.data.bgActivePosistion = undefined;

	      if (!r.hoverData.selecting) {
	        cy.emit({
	          originalEvent: e,
	          type: 'boxstart',
	          position: {
	            x: pos[0],
	            y: pos[1]
	          }
	        });
	      }

	      select[4] = 1;
	      r.hoverData.selecting = true;
	      r.redrawHint('select', true);
	      r.redraw();
	    }; // trigger context drag if rmouse down


	    if (r.hoverData.which === 3) {
	      // but only if over threshold
	      if (isOverThresholdDrag) {
	        var cxtEvt = {
	          originalEvent: e,
	          type: 'cxtdrag',
	          position: {
	            x: pos[0],
	            y: pos[1]
	          }
	        };

	        if (down) {
	          down.emit(cxtEvt);
	        } else {
	          cy.emit(cxtEvt);
	        }

	        r.hoverData.cxtDragged = true;

	        if (!r.hoverData.cxtOver || near !== r.hoverData.cxtOver) {
	          if (r.hoverData.cxtOver) {
	            r.hoverData.cxtOver.emit({
	              originalEvent: e,
	              type: 'cxtdragout',
	              position: {
	                x: pos[0],
	                y: pos[1]
	              }
	            });
	          }

	          r.hoverData.cxtOver = near;

	          if (near) {
	            near.emit({
	              originalEvent: e,
	              type: 'cxtdragover',
	              position: {
	                x: pos[0],
	                y: pos[1]
	              }
	            });
	          }
	        }
	      } // Check if we are drag panning the entire graph

	    } else if (r.hoverData.dragging) {
	      preventDefault = true;

	      if (cy.panningEnabled() && cy.userPanningEnabled()) {
	        var deltaP;

	        if (r.hoverData.justStartedPan) {
	          var mdPos = r.hoverData.mdownPos;
	          deltaP = {
	            x: (pos[0] - mdPos[0]) * zoom,
	            y: (pos[1] - mdPos[1]) * zoom
	          };
	          r.hoverData.justStartedPan = false;
	        } else {
	          deltaP = {
	            x: disp[0] * zoom,
	            y: disp[1] * zoom
	          };
	        }

	        cy.panBy(deltaP);
	        r.hoverData.dragged = true;
	      } // Needs reproject due to pan changing viewport


	      pos = r.projectIntoViewport(e.clientX, e.clientY); // Checks primary button down & out of time & mouse not moved much
	    } else if (select[4] == 1 && (down == null || down.pannable())) {
	      if (isOverThresholdDrag) {
	        if (!r.hoverData.dragging && cy.boxSelectionEnabled() && (multSelKeyDown || !cy.panningEnabled() || !cy.userPanningEnabled())) {
	          goIntoBoxMode();
	        } else if (!r.hoverData.selecting && cy.panningEnabled() && cy.userPanningEnabled()) {
	          var allowPassthrough = allowPanningPassthrough(down, r.hoverData.downs);

	          if (allowPassthrough) {
	            r.hoverData.dragging = true;
	            r.hoverData.justStartedPan = true;
	            select[4] = 0;
	            r.data.bgActivePosistion = array2point(mdownPos);
	            r.redrawHint('select', true);
	            r.redraw();
	          }
	        }

	        if (down && down.pannable() && down.active()) {
	          down.unactivate();
	        }
	      }
	    } else {
	      if (down && down.pannable() && down.active()) {
	        down.unactivate();
	      }

	      if ((!down || !down.grabbed()) && near != last) {
	        if (last) {
	          triggerEvents(last, ['mouseout', 'tapdragout'], e, {
	            x: pos[0],
	            y: pos[1]
	          });
	        }

	        if (near) {
	          triggerEvents(near, ['mouseover', 'tapdragover'], e, {
	            x: pos[0],
	            y: pos[1]
	          });
	        }

	        r.hoverData.last = near;
	      }

	      if (down) {
	        if (isOverThresholdDrag) {
	          // then we can take action
	          if (cy.boxSelectionEnabled() && multSelKeyDown) {
	            // then selection overrides
	            if (down && down.grabbed()) {
	              freeDraggedElements(draggedElements);
	              down.emit('freeon');
	              draggedElements.emit('free');

	              if (r.dragData.didDrag) {
	                down.emit('dragfreeon');
	                draggedElements.emit('dragfree');
	              }
	            }

	            goIntoBoxMode();
	          } else if (down && down.grabbed() && r.nodeIsDraggable(down)) {
	            // drag node
	            var justStartedDrag = !r.dragData.didDrag;

	            if (justStartedDrag) {
	              r.redrawHint('eles', true);
	            }

	            r.dragData.didDrag = true; // indicate that we actually did drag the node

	            var toTrigger = cy.collection(); // now, add the elements to the drag layer if not done already

	            if (!r.hoverData.draggingEles) {
	              addNodesToDrag(draggedElements, {
	                inDragLayer: true
	              });
	            }

	            var totalShift = {
	              x: 0,
	              y: 0
	            };

	            if (number(disp[0]) && number(disp[1])) {
	              totalShift.x += disp[0];
	              totalShift.y += disp[1];

	              if (justStartedDrag) {
	                var dragDelta = r.hoverData.dragDelta;

	                if (dragDelta && number(dragDelta[0]) && number(dragDelta[1])) {
	                  totalShift.x += dragDelta[0];
	                  totalShift.y += dragDelta[1];
	                }
	              }
	            }

	            for (var i = 0; i < draggedElements.length; i++) {
	              var dEle = draggedElements[i];

	              if (r.nodeIsDraggable(dEle) && dEle.grabbed()) {
	                toTrigger.merge(dEle);
	              }
	            }

	            r.hoverData.draggingEles = true;
	            toTrigger.silentShift(totalShift).emit('position drag');
	            r.redrawHint('drag', true);
	            r.redraw();
	          }
	        } else {
	          // otherwise save drag delta for when we actually start dragging so the relative grab pos is constant
	          updateDragDelta();
	        }
	      } // prevent the dragging from triggering text selection on the page


	      preventDefault = true;
	    }

	    select[2] = pos[0];
	    select[3] = pos[1];

	    if (preventDefault) {
	      if (e.stopPropagation) e.stopPropagation();
	      if (e.preventDefault) e.preventDefault();
	      return false;
	    }
	  }, false);
	  r.registerBinding(window, 'mouseup', function mouseupHandler(e) {
	    // eslint-disable-line no-undef
	    var capture = r.hoverData.capture;

	    if (!capture) {
	      return;
	    }

	    r.hoverData.capture = false;
	    var cy = r.cy;
	    var pos = r.projectIntoViewport(e.clientX, e.clientY);
	    var select = r.selection;
	    var near = r.findNearestElement(pos[0], pos[1], true, false);
	    var draggedElements = r.dragData.possibleDragElements;
	    var down = r.hoverData.down;
	    var multSelKeyDown = isMultSelKeyDown(e);

	    if (r.data.bgActivePosistion) {
	      r.redrawHint('select', true);
	      r.redraw();
	    }

	    r.hoverData.tapholdCancelled = true;
	    r.data.bgActivePosistion = undefined; // not active bg now

	    if (down) {
	      down.unactivate();
	    }

	    if (r.hoverData.which === 3) {
	      var cxtEvt = {
	        originalEvent: e,
	        type: 'cxttapend',
	        position: {
	          x: pos[0],
	          y: pos[1]
	        }
	      };

	      if (down) {
	        down.emit(cxtEvt);
	      } else {
	        cy.emit(cxtEvt);
	      }

	      if (!r.hoverData.cxtDragged) {
	        var cxtTap = {
	          originalEvent: e,
	          type: 'cxttap',
	          position: {
	            x: pos[0],
	            y: pos[1]
	          }
	        };

	        if (down) {
	          down.emit(cxtTap);
	        } else {
	          cy.emit(cxtTap);
	        }
	      }

	      r.hoverData.cxtDragged = false;
	      r.hoverData.which = null;
	    } else if (r.hoverData.which === 1) {
	      triggerEvents(near, ['mouseup', 'tapend', 'vmouseup'], e, {
	        x: pos[0],
	        y: pos[1]
	      });

	      if (!r.dragData.didDrag // didn't move a node around
	      && !r.hoverData.dragged // didn't pan
	      && !r.hoverData.selecting // not box selection
	      && !r.hoverData.isOverThresholdDrag // didn't move too much
	      ) {
	          triggerEvents(down, ['click', 'tap', 'vclick'], e, {
	            x: pos[0],
	            y: pos[1]
	          });
	        } // Deselect all elements if nothing is currently under the mouse cursor and we aren't dragging something


	      if (down == null && // not mousedown on node
	      !r.dragData.didDrag // didn't move the node around
	      && !r.hoverData.selecting // not box selection
	      && !r.hoverData.dragged // didn't pan
	      && !isMultSelKeyDown(e)) {
	        cy.$(isSelected).unselect(['tapunselect']);

	        if (draggedElements.length > 0) {
	          r.redrawHint('eles', true);
	        }

	        r.dragData.possibleDragElements = draggedElements = cy.collection();
	      } // Single selection


	      if (near == down && !r.dragData.didDrag && !r.hoverData.selecting) {
	        if (near != null && near._private.selectable) {
	          if (r.hoverData.dragging) ; else if (cy.selectionType() === 'additive' || multSelKeyDown) {
	            if (near.selected()) {
	              near.unselect(['tapunselect']);
	            } else {
	              near.select(['tapselect']);
	            }
	          } else {
	            if (!multSelKeyDown) {
	              cy.$(isSelected).unmerge(near).unselect(['tapunselect']);
	              near.select(['tapselect']);
	            }
	          }

	          r.redrawHint('eles', true);
	        }
	      }

	      if (r.hoverData.selecting) {
	        var box = cy.collection(r.getAllInBox(select[0], select[1], select[2], select[3]));
	        r.redrawHint('select', true);

	        if (box.length > 0) {
	          r.redrawHint('eles', true);
	        }

	        cy.emit({
	          type: 'boxend',
	          originalEvent: e,
	          position: {
	            x: pos[0],
	            y: pos[1]
	          }
	        });

	        var eleWouldBeSelected = function eleWouldBeSelected(ele) {
	          return ele.selectable() && !ele.selected();
	        };

	        if (cy.selectionType() === 'additive') {
	          box.emit('box').stdFilter(eleWouldBeSelected).select().emit('boxselect');
	        } else {
	          if (!multSelKeyDown) {
	            cy.$(isSelected).unmerge(box).unselect();
	          }

	          box.emit('box').stdFilter(eleWouldBeSelected).select().emit('boxselect');
	        } // always need redraw in case eles unselectable


	        r.redraw();
	      } // Cancel drag pan


	      if (r.hoverData.dragging) {
	        r.hoverData.dragging = false;
	        r.redrawHint('select', true);
	        r.redrawHint('eles', true);
	        r.redraw();
	      }

	      if (!select[4]) {
	        r.redrawHint('drag', true);
	        r.redrawHint('eles', true);
	        var downWasGrabbed = down && down.grabbed();
	        freeDraggedElements(draggedElements);

	        if (downWasGrabbed) {
	          down.emit('freeon');
	          draggedElements.emit('free');

	          if (r.dragData.didDrag) {
	            down.emit('dragfreeon');
	            draggedElements.emit('dragfree');
	          }
	        }
	      }
	    } // else not right mouse


	    select[4] = 0;
	    r.hoverData.down = null;
	    r.hoverData.cxtStarted = false;
	    r.hoverData.draggingEles = false;
	    r.hoverData.selecting = false;
	    r.hoverData.isOverThresholdDrag = false;
	    r.dragData.didDrag = false;
	    r.hoverData.dragged = false;
	    r.hoverData.dragDelta = [];
	    r.hoverData.mdownPos = null;
	    r.hoverData.mdownGPos = null;
	  }, false);

	  var wheelHandler = function wheelHandler(e) {
	    if (r.scrollingPage) {
	      return;
	    } // while scrolling, ignore wheel-to-zoom


	    var cy = r.cy;
	    var pos = r.projectIntoViewport(e.clientX, e.clientY);
	    var rpos = [pos[0] * cy.zoom() + cy.pan().x, pos[1] * cy.zoom() + cy.pan().y];

	    if (r.hoverData.draggingEles || r.hoverData.dragging || r.hoverData.cxtStarted || inBoxSelection()) {
	      // if pan dragging or cxt dragging, wheel movements make no zoom
	      e.preventDefault();
	      return;
	    }

	    if (cy.panningEnabled() && cy.userPanningEnabled() && cy.zoomingEnabled() && cy.userZoomingEnabled()) {
	      e.preventDefault();
	      r.data.wheelZooming = true;
	      clearTimeout(r.data.wheelTimeout);
	      r.data.wheelTimeout = setTimeout(function () {
	        r.data.wheelZooming = false;
	        r.redrawHint('eles', true);
	        r.redraw();
	      }, 150);
	      var diff;

	      if (e.deltaY != null) {
	        diff = e.deltaY / -250;
	      } else if (e.wheelDeltaY != null) {
	        diff = e.wheelDeltaY / 1000;
	      } else {
	        diff = e.wheelDelta / 1000;
	      }

	      diff = diff * r.wheelSensitivity;
	      var needsWheelFix = e.deltaMode === 1;

	      if (needsWheelFix) {
	        // fixes slow wheel events on ff/linux and ff/windows
	        diff *= 33;
	      }

	      cy.zoom({
	        level: cy.zoom() * Math.pow(10, diff),
	        renderedPosition: {
	          x: rpos[0],
	          y: rpos[1]
	        }
	      });
	    }
	  }; // Functions to help with whether mouse wheel should trigger zooming
	  // --


	  r.registerBinding(r.container, 'wheel', wheelHandler, true); // disable nonstandard wheel events
	  // r.registerBinding(r.container, 'mousewheel', wheelHandler, true);
	  // r.registerBinding(r.container, 'DOMMouseScroll', wheelHandler, true);
	  // r.registerBinding(r.container, 'MozMousePixelScroll', wheelHandler, true); // older firefox

	  r.registerBinding(window, 'scroll', function scrollHandler(e) {
	    // eslint-disable-line no-unused-vars
	    r.scrollingPage = true;
	    clearTimeout(r.scrollingPageTimeout);
	    r.scrollingPageTimeout = setTimeout(function () {
	      r.scrollingPage = false;
	    }, 250);
	  }, true); // Functions to help with handling mouseout/mouseover on the Cytoscape container
	  // Handle mouseout on Cytoscape container

	  r.registerBinding(r.container, 'mouseout', function mouseOutHandler(e) {
	    var pos = r.projectIntoViewport(e.clientX, e.clientY);
	    r.cy.emit({
	      originalEvent: e,
	      type: 'mouseout',
	      position: {
	        x: pos[0],
	        y: pos[1]
	      }
	    });
	  }, false);
	  r.registerBinding(r.container, 'mouseover', function mouseOverHandler(e) {
	    var pos = r.projectIntoViewport(e.clientX, e.clientY);
	    r.cy.emit({
	      originalEvent: e,
	      type: 'mouseover',
	      position: {
	        x: pos[0],
	        y: pos[1]
	      }
	    });
	  }, false);
	  var f1x1, f1y1, f2x1, f2y1; // starting points for pinch-to-zoom

	  var distance1, distance1Sq; // initial distance between finger 1 and finger 2 for pinch-to-zoom

	  var center1, modelCenter1; // center point on start pinch to zoom

	  var offsetLeft, offsetTop;
	  var containerWidth, containerHeight;
	  var twoFingersStartInside;

	  var distance = function distance(x1, y1, x2, y2) {
	    return Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
	  };

	  var distanceSq = function distanceSq(x1, y1, x2, y2) {
	    return (x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1);
	  };

	  var touchstartHandler;
	  r.registerBinding(r.container, 'touchstart', touchstartHandler = function touchstartHandler(e) {
	    if (!eventInContainer(e)) {
	      return;
	    }

	    blurActiveDomElement();
	    r.touchData.capture = true;
	    r.data.bgActivePosistion = undefined;
	    var cy = r.cy;
	    var now = r.touchData.now;
	    var earlier = r.touchData.earlier;

	    if (e.touches[0]) {
	      var pos = r.projectIntoViewport(e.touches[0].clientX, e.touches[0].clientY);
	      now[0] = pos[0];
	      now[1] = pos[1];
	    }

	    if (e.touches[1]) {
	      var pos = r.projectIntoViewport(e.touches[1].clientX, e.touches[1].clientY);
	      now[2] = pos[0];
	      now[3] = pos[1];
	    }

	    if (e.touches[2]) {
	      var pos = r.projectIntoViewport(e.touches[2].clientX, e.touches[2].clientY);
	      now[4] = pos[0];
	      now[5] = pos[1];
	    } // record starting points for pinch-to-zoom


	    if (e.touches[1]) {
	      r.touchData.singleTouchMoved = true;
	      freeDraggedElements(r.dragData.touchDragEles);
	      var offsets = r.findContainerClientCoords();
	      offsetLeft = offsets[0];
	      offsetTop = offsets[1];
	      containerWidth = offsets[2];
	      containerHeight = offsets[3];
	      f1x1 = e.touches[0].clientX - offsetLeft;
	      f1y1 = e.touches[0].clientY - offsetTop;
	      f2x1 = e.touches[1].clientX - offsetLeft;
	      f2y1 = e.touches[1].clientY - offsetTop;
	      twoFingersStartInside = 0 <= f1x1 && f1x1 <= containerWidth && 0 <= f2x1 && f2x1 <= containerWidth && 0 <= f1y1 && f1y1 <= containerHeight && 0 <= f2y1 && f2y1 <= containerHeight;
	      var pan = cy.pan();
	      var zoom = cy.zoom();
	      distance1 = distance(f1x1, f1y1, f2x1, f2y1);
	      distance1Sq = distanceSq(f1x1, f1y1, f2x1, f2y1);
	      center1 = [(f1x1 + f2x1) / 2, (f1y1 + f2y1) / 2];
	      modelCenter1 = [(center1[0] - pan.x) / zoom, (center1[1] - pan.y) / zoom]; // consider context tap

	      var cxtDistThreshold = 200;
	      var cxtDistThresholdSq = cxtDistThreshold * cxtDistThreshold;

	      if (distance1Sq < cxtDistThresholdSq && !e.touches[2]) {
	        var near1 = r.findNearestElement(now[0], now[1], true, true);
	        var near2 = r.findNearestElement(now[2], now[3], true, true);

	        if (near1 && near1.isNode()) {
	          near1.activate().emit({
	            originalEvent: e,
	            type: 'cxttapstart',
	            position: {
	              x: now[0],
	              y: now[1]
	            }
	          });
	          r.touchData.start = near1;
	        } else if (near2 && near2.isNode()) {
	          near2.activate().emit({
	            originalEvent: e,
	            type: 'cxttapstart',
	            position: {
	              x: now[0],
	              y: now[1]
	            }
	          });
	          r.touchData.start = near2;
	        } else {
	          cy.emit({
	            originalEvent: e,
	            type: 'cxttapstart',
	            position: {
	              x: now[0],
	              y: now[1]
	            }
	          });
	        }

	        if (r.touchData.start) {
	          r.touchData.start._private.grabbed = false;
	        }

	        r.touchData.cxt = true;
	        r.touchData.cxtDragged = false;
	        r.data.bgActivePosistion = undefined;
	        r.redraw();
	        return;
	      }
	    }

	    if (e.touches[2]) {
	      // ignore
	      // safari on ios pans the page otherwise (normally you should be able to preventdefault on touchmove...)
	      if (cy.boxSelectionEnabled()) {
	        e.preventDefault();
	      }
	    } else if (e.touches[1]) ; else if (e.touches[0]) {
	      var nears = r.findNearestElements(now[0], now[1], true, true);
	      var near = nears[0];

	      if (near != null) {
	        near.activate();
	        r.touchData.start = near;
	        r.touchData.starts = nears;

	        if (r.nodeIsGrabbable(near)) {
	          var draggedEles = r.dragData.touchDragEles = cy.collection();
	          var selectedNodes = null;
	          r.redrawHint('eles', true);
	          r.redrawHint('drag', true);

	          if (near.selected()) {
	            // reset drag elements, since near will be added again
	            selectedNodes = cy.$(function (ele) {
	              return ele.selected() && r.nodeIsGrabbable(ele);
	            });
	            addNodesToDrag(selectedNodes, {
	              addToList: draggedEles
	            });
	          } else {
	            addNodeToDrag(near, {
	              addToList: draggedEles
	            });
	          }

	          setGrabTarget(near);

	          var makeEvent = function makeEvent(type) {
	            return {
	              originalEvent: e,
	              type: type,
	              position: {
	                x: now[0],
	                y: now[1]
	              }
	            };
	          };

	          near.emit(makeEvent('grabon'));

	          if (selectedNodes) {
	            selectedNodes.forEach(function (n) {
	              n.emit(makeEvent('grab'));
	            });
	          } else {
	            near.emit(makeEvent('grab'));
	          }
	        }
	      }

	      triggerEvents(near, ['touchstart', 'tapstart', 'vmousedown'], e, {
	        x: now[0],
	        y: now[1]
	      });

	      if (near == null) {
	        r.data.bgActivePosistion = {
	          x: pos[0],
	          y: pos[1]
	        };
	        r.redrawHint('select', true);
	        r.redraw();
	      } // Tap, taphold
	      // -----


	      r.touchData.singleTouchMoved = false;
	      r.touchData.singleTouchStartTime = +new Date();
	      clearTimeout(r.touchData.tapholdTimeout);
	      r.touchData.tapholdTimeout = setTimeout(function () {
	        if (r.touchData.singleTouchMoved === false && !r.pinching // if pinching, then taphold unselect shouldn't take effect
	        && !r.touchData.selecting // box selection shouldn't allow taphold through
	        ) {
	            triggerEvents(r.touchData.start, ['taphold'], e, {
	              x: now[0],
	              y: now[1]
	            });
	          }
	      }, r.tapholdDuration);
	    }

	    if (e.touches.length >= 1) {
	      var sPos = r.touchData.startPosition = [];

	      for (var i = 0; i < now.length; i++) {
	        sPos[i] = earlier[i] = now[i];
	      }

	      var touch0 = e.touches[0];
	      r.touchData.startGPosition = [touch0.clientX, touch0.clientY];
	    }
	  }, false);
	  var touchmoveHandler;
	  r.registerBinding(window, 'touchmove', touchmoveHandler = function touchmoveHandler(e) {
	    // eslint-disable-line no-undef
	    var capture = r.touchData.capture;

	    if (!capture && !eventInContainer(e)) {
	      return;
	    }

	    var select = r.selection;
	    var cy = r.cy;
	    var now = r.touchData.now;
	    var earlier = r.touchData.earlier;
	    var zoom = cy.zoom();

	    if (e.touches[0]) {
	      var pos = r.projectIntoViewport(e.touches[0].clientX, e.touches[0].clientY);
	      now[0] = pos[0];
	      now[1] = pos[1];
	    }

	    if (e.touches[1]) {
	      var pos = r.projectIntoViewport(e.touches[1].clientX, e.touches[1].clientY);
	      now[2] = pos[0];
	      now[3] = pos[1];
	    }

	    if (e.touches[2]) {
	      var pos = r.projectIntoViewport(e.touches[2].clientX, e.touches[2].clientY);
	      now[4] = pos[0];
	      now[5] = pos[1];
	    }

	    var startGPos = r.touchData.startGPosition;
	    var isOverThresholdDrag;

	    if (capture && e.touches[0] && startGPos) {
	      var disp = [];

	      for (var j = 0; j < now.length; j++) {
	        disp[j] = now[j] - earlier[j];
	      }

	      var dx = e.touches[0].clientX - startGPos[0];
	      var dx2 = dx * dx;
	      var dy = e.touches[0].clientY - startGPos[1];
	      var dy2 = dy * dy;
	      var dist2 = dx2 + dy2;
	      isOverThresholdDrag = dist2 >= r.touchTapThreshold2;
	    } // context swipe cancelling


	    if (capture && r.touchData.cxt) {
	      e.preventDefault();
	      var f1x2 = e.touches[0].clientX - offsetLeft,
	          f1y2 = e.touches[0].clientY - offsetTop;
	      var f2x2 = e.touches[1].clientX - offsetLeft,
	          f2y2 = e.touches[1].clientY - offsetTop; // var distance2 = distance( f1x2, f1y2, f2x2, f2y2 );

	      var distance2Sq = distanceSq(f1x2, f1y2, f2x2, f2y2);
	      var factorSq = distance2Sq / distance1Sq;
	      var distThreshold = 150;
	      var distThresholdSq = distThreshold * distThreshold;
	      var factorThreshold = 1.5;
	      var factorThresholdSq = factorThreshold * factorThreshold; // cancel ctx gestures if the distance b/t the fingers increases

	      if (factorSq >= factorThresholdSq || distance2Sq >= distThresholdSq) {
	        r.touchData.cxt = false;
	        r.data.bgActivePosistion = undefined;
	        r.redrawHint('select', true);
	        var cxtEvt = {
	          originalEvent: e,
	          type: 'cxttapend',
	          position: {
	            x: now[0],
	            y: now[1]
	          }
	        };

	        if (r.touchData.start) {
	          r.touchData.start.unactivate().emit(cxtEvt);
	          r.touchData.start = null;
	        } else {
	          cy.emit(cxtEvt);
	        }
	      }
	    } // context swipe


	    if (capture && r.touchData.cxt) {
	      var cxtEvt = {
	        originalEvent: e,
	        type: 'cxtdrag',
	        position: {
	          x: now[0],
	          y: now[1]
	        }
	      };
	      r.data.bgActivePosistion = undefined;
	      r.redrawHint('select', true);

	      if (r.touchData.start) {
	        r.touchData.start.emit(cxtEvt);
	      } else {
	        cy.emit(cxtEvt);
	      }

	      if (r.touchData.start) {
	        r.touchData.start._private.grabbed = false;
	      }

	      r.touchData.cxtDragged = true;
	      var near = r.findNearestElement(now[0], now[1], true, true);

	      if (!r.touchData.cxtOver || near !== r.touchData.cxtOver) {
	        if (r.touchData.cxtOver) {
	          r.touchData.cxtOver.emit({
	            originalEvent: e,
	            type: 'cxtdragout',
	            position: {
	              x: now[0],
	              y: now[1]
	            }
	          });
	        }

	        r.touchData.cxtOver = near;

	        if (near) {
	          near.emit({
	            originalEvent: e,
	            type: 'cxtdragover',
	            position: {
	              x: now[0],
	              y: now[1]
	            }
	          });
	        }
	      } // box selection

	    } else if (capture && e.touches[2] && cy.boxSelectionEnabled()) {
	      e.preventDefault();
	      r.data.bgActivePosistion = undefined;
	      this.lastThreeTouch = +new Date();

	      if (!r.touchData.selecting) {
	        cy.emit({
	          originalEvent: e,
	          type: 'boxstart',
	          position: {
	            x: now[0],
	            y: now[1]
	          }
	        });
	      }

	      r.touchData.selecting = true;
	      r.touchData.didSelect = true;
	      select[4] = 1;

	      if (!select || select.length === 0 || select[0] === undefined) {
	        select[0] = (now[0] + now[2] + now[4]) / 3;
	        select[1] = (now[1] + now[3] + now[5]) / 3;
	        select[2] = (now[0] + now[2] + now[4]) / 3 + 1;
	        select[3] = (now[1] + now[3] + now[5]) / 3 + 1;
	      } else {
	        select[2] = (now[0] + now[2] + now[4]) / 3;
	        select[3] = (now[1] + now[3] + now[5]) / 3;
	      }

	      r.redrawHint('select', true);
	      r.redraw(); // pinch to zoom
	    } else if (capture && e.touches[1] && !r.touchData.didSelect // don't allow box selection to degrade to pinch-to-zoom
	    && cy.zoomingEnabled() && cy.panningEnabled() && cy.userZoomingEnabled() && cy.userPanningEnabled()) {
	      // two fingers => pinch to zoom
	      e.preventDefault();
	      r.data.bgActivePosistion = undefined;
	      r.redrawHint('select', true);
	      var draggedEles = r.dragData.touchDragEles;

	      if (draggedEles) {
	        r.redrawHint('drag', true);

	        for (var i = 0; i < draggedEles.length; i++) {
	          var de_p = draggedEles[i]._private;
	          de_p.grabbed = false;
	          de_p.rscratch.inDragLayer = false;
	        }
	      }

	      var _start = r.touchData.start; // (x2, y2) for fingers 1 and 2

	      var f1x2 = e.touches[0].clientX - offsetLeft,
	          f1y2 = e.touches[0].clientY - offsetTop;
	      var f2x2 = e.touches[1].clientX - offsetLeft,
	          f2y2 = e.touches[1].clientY - offsetTop;
	      var distance2 = distance(f1x2, f1y2, f2x2, f2y2); // var distance2Sq = distanceSq( f1x2, f1y2, f2x2, f2y2 );
	      // var factor = Math.sqrt( distance2Sq ) / Math.sqrt( distance1Sq );

	      var factor = distance2 / distance1;

	      if (twoFingersStartInside) {
	        // delta finger1
	        var df1x = f1x2 - f1x1;
	        var df1y = f1y2 - f1y1; // delta finger 2

	        var df2x = f2x2 - f2x1;
	        var df2y = f2y2 - f2y1; // translation is the normalised vector of the two fingers movement
	        // i.e. so pinching cancels out and moving together pans

	        var tx = (df1x + df2x) / 2;
	        var ty = (df1y + df2y) / 2; // now calculate the zoom

	        var zoom1 = cy.zoom();
	        var zoom2 = zoom1 * factor;
	        var pan1 = cy.pan(); // the model center point converted to the current rendered pos

	        var ctrx = modelCenter1[0] * zoom1 + pan1.x;
	        var ctry = modelCenter1[1] * zoom1 + pan1.y;
	        var pan2 = {
	          x: -zoom2 / zoom1 * (ctrx - pan1.x - tx) + ctrx,
	          y: -zoom2 / zoom1 * (ctry - pan1.y - ty) + ctry
	        }; // remove dragged eles

	        if (_start && _start.active()) {
	          var draggedEles = r.dragData.touchDragEles;
	          freeDraggedElements(draggedEles);
	          r.redrawHint('drag', true);
	          r.redrawHint('eles', true);

	          _start.unactivate().emit('freeon');

	          draggedEles.emit('free');

	          if (r.dragData.didDrag) {
	            _start.emit('dragfreeon');

	            draggedEles.emit('dragfree');
	          }
	        }

	        cy.viewport({
	          zoom: zoom2,
	          pan: pan2,
	          cancelOnFailedZoom: true
	        });
	        distance1 = distance2;
	        f1x1 = f1x2;
	        f1y1 = f1y2;
	        f2x1 = f2x2;
	        f2y1 = f2y2;
	        r.pinching = true;
	      } // Re-project


	      if (e.touches[0]) {
	        var pos = r.projectIntoViewport(e.touches[0].clientX, e.touches[0].clientY);
	        now[0] = pos[0];
	        now[1] = pos[1];
	      }

	      if (e.touches[1]) {
	        var pos = r.projectIntoViewport(e.touches[1].clientX, e.touches[1].clientY);
	        now[2] = pos[0];
	        now[3] = pos[1];
	      }

	      if (e.touches[2]) {
	        var pos = r.projectIntoViewport(e.touches[2].clientX, e.touches[2].clientY);
	        now[4] = pos[0];
	        now[5] = pos[1];
	      }
	    } else if (e.touches[0] && !r.touchData.didSelect // don't allow box selection to degrade to single finger events like panning
	    ) {
	        var start = r.touchData.start;
	        var last = r.touchData.last;
	        var near;

	        if (!r.hoverData.draggingEles && !r.swipePanning) {
	          near = r.findNearestElement(now[0], now[1], true, true);
	        }

	        if (capture && start != null) {
	          e.preventDefault();
	        } // dragging nodes


	        if (capture && start != null && r.nodeIsDraggable(start)) {
	          if (isOverThresholdDrag) {
	            // then dragging can happen
	            var draggedEles = r.dragData.touchDragEles;
	            var justStartedDrag = !r.dragData.didDrag;

	            if (justStartedDrag) {
	              addNodesToDrag(draggedEles, {
	                inDragLayer: true
	              });
	            }

	            r.dragData.didDrag = true;
	            var totalShift = {
	              x: 0,
	              y: 0
	            };

	            if (number(disp[0]) && number(disp[1])) {
	              totalShift.x += disp[0];
	              totalShift.y += disp[1];

	              if (justStartedDrag) {
	                r.redrawHint('eles', true);
	                var dragDelta = r.touchData.dragDelta;

	                if (dragDelta && number(dragDelta[0]) && number(dragDelta[1])) {
	                  totalShift.x += dragDelta[0];
	                  totalShift.y += dragDelta[1];
	                }
	              }
	            }

	            r.hoverData.draggingEles = true;
	            draggedEles.silentShift(totalShift).emit('position drag');
	            r.redrawHint('drag', true);

	            if (r.touchData.startPosition[0] == earlier[0] && r.touchData.startPosition[1] == earlier[1]) {
	              r.redrawHint('eles', true);
	            }

	            r.redraw();
	          } else {
	            // otherise keep track of drag delta for later
	            var dragDelta = r.touchData.dragDelta = r.touchData.dragDelta || [];

	            if (dragDelta.length === 0) {
	              dragDelta.push(disp[0]);
	              dragDelta.push(disp[1]);
	            } else {
	              dragDelta[0] += disp[0];
	              dragDelta[1] += disp[1];
	            }
	          }
	        } // touchmove


	        {
	          triggerEvents(start || near, ['touchmove', 'tapdrag', 'vmousemove'], e, {
	            x: now[0],
	            y: now[1]
	          });

	          if ((!start || !start.grabbed()) && near != last) {
	            if (last) {
	              last.emit({
	                originalEvent: e,
	                type: 'tapdragout',
	                position: {
	                  x: now[0],
	                  y: now[1]
	                }
	              });
	            }

	            if (near) {
	              near.emit({
	                originalEvent: e,
	                type: 'tapdragover',
	                position: {
	                  x: now[0],
	                  y: now[1]
	                }
	              });
	            }
	          }

	          r.touchData.last = near;
	        } // check to cancel taphold

	        if (capture) {
	          for (var i = 0; i < now.length; i++) {
	            if (now[i] && r.touchData.startPosition[i] && isOverThresholdDrag) {
	              r.touchData.singleTouchMoved = true;
	            }
	          }
	        } // panning


	        if (capture && (start == null || start.pannable()) && cy.panningEnabled() && cy.userPanningEnabled()) {
	          var allowPassthrough = allowPanningPassthrough(start, r.touchData.starts);

	          if (allowPassthrough) {
	            e.preventDefault();

	            if (!r.data.bgActivePosistion) {
	              r.data.bgActivePosistion = array2point(r.touchData.startPosition);
	            }

	            if (r.swipePanning) {
	              cy.panBy({
	                x: disp[0] * zoom,
	                y: disp[1] * zoom
	              });
	            } else if (isOverThresholdDrag) {
	              r.swipePanning = true;
	              cy.panBy({
	                x: dx * zoom,
	                y: dy * zoom
	              });

	              if (start) {
	                start.unactivate();
	                r.redrawHint('select', true);
	                r.touchData.start = null;
	              }
	            }
	          } // Re-project


	          var pos = r.projectIntoViewport(e.touches[0].clientX, e.touches[0].clientY);
	          now[0] = pos[0];
	          now[1] = pos[1];
	        }
	      }

	    for (var j = 0; j < now.length; j++) {
	      earlier[j] = now[j];
	    } // the active bg indicator should be removed when making a swipe that is neither for dragging nodes or panning


	    if (capture && e.touches.length > 0 && !r.hoverData.draggingEles && !r.swipePanning && r.data.bgActivePosistion != null) {
	      r.data.bgActivePosistion = undefined;
	      r.redrawHint('select', true);
	      r.redraw();
	    }
	  }, false);
	  var touchcancelHandler;
	  r.registerBinding(window, 'touchcancel', touchcancelHandler = function touchcancelHandler(e) {
	    // eslint-disable-line no-unused-vars
	    var start = r.touchData.start;
	    r.touchData.capture = false;

	    if (start) {
	      start.unactivate();
	    }
	  });
	  var touchendHandler;
	  r.registerBinding(window, 'touchend', touchendHandler = function touchendHandler(e) {
	    // eslint-disable-line no-unused-vars
	    var start = r.touchData.start;
	    var capture = r.touchData.capture;

	    if (capture) {
	      if (e.touches.length === 0) {
	        r.touchData.capture = false;
	      }

	      e.preventDefault();
	    } else {
	      return;
	    }

	    var select = r.selection;
	    r.swipePanning = false;
	    r.hoverData.draggingEles = false;
	    var cy = r.cy;
	    var zoom = cy.zoom();
	    var now = r.touchData.now;
	    var earlier = r.touchData.earlier;

	    if (e.touches[0]) {
	      var pos = r.projectIntoViewport(e.touches[0].clientX, e.touches[0].clientY);
	      now[0] = pos[0];
	      now[1] = pos[1];
	    }

	    if (e.touches[1]) {
	      var pos = r.projectIntoViewport(e.touches[1].clientX, e.touches[1].clientY);
	      now[2] = pos[0];
	      now[3] = pos[1];
	    }

	    if (e.touches[2]) {
	      var pos = r.projectIntoViewport(e.touches[2].clientX, e.touches[2].clientY);
	      now[4] = pos[0];
	      now[5] = pos[1];
	    }

	    if (start) {
	      start.unactivate();
	    }

	    var ctxTapend;

	    if (r.touchData.cxt) {
	      ctxTapend = {
	        originalEvent: e,
	        type: 'cxttapend',
	        position: {
	          x: now[0],
	          y: now[1]
	        }
	      };

	      if (start) {
	        start.emit(ctxTapend);
	      } else {
	        cy.emit(ctxTapend);
	      }

	      if (!r.touchData.cxtDragged) {
	        var ctxTap = {
	          originalEvent: e,
	          type: 'cxttap',
	          position: {
	            x: now[0],
	            y: now[1]
	          }
	        };

	        if (start) {
	          start.emit(ctxTap);
	        } else {
	          cy.emit(ctxTap);
	        }
	      }

	      if (r.touchData.start) {
	        r.touchData.start._private.grabbed = false;
	      }

	      r.touchData.cxt = false;
	      r.touchData.start = null;
	      r.redraw();
	      return;
	    } // no more box selection if we don't have three fingers


	    if (!e.touches[2] && cy.boxSelectionEnabled() && r.touchData.selecting) {
	      r.touchData.selecting = false;
	      var box = cy.collection(r.getAllInBox(select[0], select[1], select[2], select[3]));
	      select[0] = undefined;
	      select[1] = undefined;
	      select[2] = undefined;
	      select[3] = undefined;
	      select[4] = 0;
	      r.redrawHint('select', true);
	      cy.emit({
	        type: 'boxend',
	        originalEvent: e,
	        position: {
	          x: now[0],
	          y: now[1]
	        }
	      });

	      var eleWouldBeSelected = function eleWouldBeSelected(ele) {
	        return ele.selectable() && !ele.selected();
	      };

	      box.emit('box').stdFilter(eleWouldBeSelected).select().emit('boxselect');

	      if (box.nonempty()) {
	        r.redrawHint('eles', true);
	      }

	      r.redraw();
	    }

	    if (start != null) {
	      start.unactivate();
	    }

	    if (e.touches[2]) {
	      r.data.bgActivePosistion = undefined;
	      r.redrawHint('select', true);
	    } else if (e.touches[1]) ; else if (e.touches[0]) ; else if (!e.touches[0]) {
	      r.data.bgActivePosistion = undefined;
	      r.redrawHint('select', true);
	      var draggedEles = r.dragData.touchDragEles;

	      if (start != null) {
	        var startWasGrabbed = start._private.grabbed;
	        freeDraggedElements(draggedEles);
	        r.redrawHint('drag', true);
	        r.redrawHint('eles', true);

	        if (startWasGrabbed) {
	          start.emit('freeon');
	          draggedEles.emit('free');

	          if (r.dragData.didDrag) {
	            start.emit('dragfreeon');
	            draggedEles.emit('dragfree');
	          }
	        }

	        triggerEvents(start, ['touchend', 'tapend', 'vmouseup', 'tapdragout'], e, {
	          x: now[0],
	          y: now[1]
	        });
	        start.unactivate();
	        r.touchData.start = null;
	      } else {
	        var near = r.findNearestElement(now[0], now[1], true, true);
	        triggerEvents(near, ['touchend', 'tapend', 'vmouseup', 'tapdragout'], e, {
	          x: now[0],
	          y: now[1]
	        });
	      }

	      var dx = r.touchData.startPosition[0] - now[0];
	      var dx2 = dx * dx;
	      var dy = r.touchData.startPosition[1] - now[1];
	      var dy2 = dy * dy;
	      var dist2 = dx2 + dy2;
	      var rdist2 = dist2 * zoom * zoom; // Tap event, roughly same as mouse click event for touch

	      if (!r.touchData.singleTouchMoved) {
	        if (!start) {
	          cy.$(':selected').unselect(['tapunselect']);
	        }

	        triggerEvents(start, ['tap', 'vclick'], e, {
	          x: now[0],
	          y: now[1]
	        });
	      } // Prepare to select the currently touched node, only if it hasn't been dragged past a certain distance


	      if (start != null && !r.dragData.didDrag // didn't drag nodes around
	      && start._private.selectable && rdist2 < r.touchTapThreshold2 && !r.pinching // pinch to zoom should not affect selection
	      ) {
	          if (cy.selectionType() === 'single') {
	            cy.$(isSelected).unmerge(start).unselect(['tapunselect']);
	            start.select(['tapselect']);
	          } else {
	            if (start.selected()) {
	              start.unselect(['tapunselect']);
	            } else {
	              start.select(['tapselect']);
	            }
	          }

	          r.redrawHint('eles', true);
	        }

	      r.touchData.singleTouchMoved = true;
	    }

	    for (var j = 0; j < now.length; j++) {
	      earlier[j] = now[j];
	    }

	    r.dragData.didDrag = false; // reset for next touchstart

	    if (e.touches.length === 0) {
	      r.touchData.dragDelta = [];
	      r.touchData.startPosition = null;
	      r.touchData.startGPosition = null;
	      r.touchData.didSelect = false;
	    }

	    if (e.touches.length < 2) {
	      if (e.touches.length === 1) {
	        // the old start global pos'n may not be the same finger that remains
	        r.touchData.startGPosition = [e.touches[0].clientX, e.touches[0].clientY];
	      }

	      r.pinching = false;
	      r.redrawHint('eles', true);
	      r.redraw();
	    } //r.redraw();

	  }, false); // fallback compatibility layer for ms pointer events

	  if (typeof TouchEvent === 'undefined') {
	    var pointers = [];

	    var makeTouch = function makeTouch(e) {
	      return {
	        clientX: e.clientX,
	        clientY: e.clientY,
	        force: 1,
	        identifier: e.pointerId,
	        pageX: e.pageX,
	        pageY: e.pageY,
	        radiusX: e.width / 2,
	        radiusY: e.height / 2,
	        screenX: e.screenX,
	        screenY: e.screenY,
	        target: e.target
	      };
	    };

	    var makePointer = function makePointer(e) {
	      return {
	        event: e,
	        touch: makeTouch(e)
	      };
	    };

	    var addPointer = function addPointer(e) {
	      pointers.push(makePointer(e));
	    };

	    var removePointer = function removePointer(e) {
	      for (var i = 0; i < pointers.length; i++) {
	        var p = pointers[i];

	        if (p.event.pointerId === e.pointerId) {
	          pointers.splice(i, 1);
	          return;
	        }
	      }
	    };

	    var updatePointer = function updatePointer(e) {
	      var p = pointers.filter(function (p) {
	        return p.event.pointerId === e.pointerId;
	      })[0];
	      p.event = e;
	      p.touch = makeTouch(e);
	    };

	    var addTouchesToEvent = function addTouchesToEvent(e) {
	      e.touches = pointers.map(function (p) {
	        return p.touch;
	      });
	    };

	    var pointerIsMouse = function pointerIsMouse(e) {
	      return e.pointerType === 'mouse' || e.pointerType === 4;
	    };

	    r.registerBinding(r.container, 'pointerdown', function (e) {
	      if (pointerIsMouse(e)) {
	        return;
	      } // mouse already handled


	      e.preventDefault();
	      addPointer(e);
	      addTouchesToEvent(e);
	      touchstartHandler(e);
	    });
	    r.registerBinding(r.container, 'pointerup', function (e) {
	      if (pointerIsMouse(e)) {
	        return;
	      } // mouse already handled


	      removePointer(e);
	      addTouchesToEvent(e);
	      touchendHandler(e);
	    });
	    r.registerBinding(r.container, 'pointercancel', function (e) {
	      if (pointerIsMouse(e)) {
	        return;
	      } // mouse already handled


	      removePointer(e);
	      addTouchesToEvent(e);
	      touchcancelHandler(e);
	    });
	    r.registerBinding(r.container, 'pointermove', function (e) {
	      if (pointerIsMouse(e)) {
	        return;
	      } // mouse already handled


	      e.preventDefault();
	      updatePointer(e);
	      addTouchesToEvent(e);
	      touchmoveHandler(e);
	    });
	  }
	};

	var BRp$d = {};

	BRp$d.generatePolygon = function (name, points) {
	  return this.nodeShapes[name] = {
	    renderer: this,
	    name: name,
	    points: points,
	    draw: function draw(context, centerX, centerY, width, height) {
	      this.renderer.nodeShapeImpl('polygon', context, centerX, centerY, width, height, this.points);
	    },
	    intersectLine: function intersectLine(nodeX, nodeY, width, height, x, y, padding) {
	      return polygonIntersectLine(x, y, this.points, nodeX, nodeY, width / 2, height / 2, padding);
	    },
	    checkPoint: function checkPoint(x, y, padding, width, height, centerX, centerY) {
	      return pointInsidePolygon(x, y, this.points, centerX, centerY, width, height, [0, -1], padding);
	    }
	  };
	};

	BRp$d.generateEllipse = function () {
	  return this.nodeShapes['ellipse'] = {
	    renderer: this,
	    name: 'ellipse',
	    draw: function draw(context, centerX, centerY, width, height) {
	      this.renderer.nodeShapeImpl(this.name, context, centerX, centerY, width, height);
	    },
	    intersectLine: function intersectLine(nodeX, nodeY, width, height, x, y, padding) {
	      return intersectLineEllipse(x, y, nodeX, nodeY, width / 2 + padding, height / 2 + padding);
	    },
	    checkPoint: function checkPoint(x, y, padding, width, height, centerX, centerY) {
	      return checkInEllipse(x, y, width, height, centerX, centerY, padding);
	    }
	  };
	};

	BRp$d.generateRoundPolygon = function (name, points) {
	  // Pre-compute control points
	  // Since these points depend on the radius length (which in turns depend on the width/height of the node) we will only pre-compute
	  // the unit vectors.
	  // For simplicity the layout will be:
	  // [ p0, UnitVectorP0P1, p1, UniVectorP1P2, ..., pn, UnitVectorPnP0 ]
	  var allPoints = new Array(points.length * 2);

	  for (var i = 0; i < points.length / 2; i++) {
	    var sourceIndex = i * 2;
	    var destIndex = void 0;

	    if (i < points.length / 2 - 1) {
	      destIndex = (i + 1) * 2;
	    } else {
	      destIndex = 0;
	    }

	    allPoints[i * 4] = points[sourceIndex];
	    allPoints[i * 4 + 1] = points[sourceIndex + 1];
	    var xDest = points[destIndex] - points[sourceIndex];
	    var yDest = points[destIndex + 1] - points[sourceIndex + 1];
	    var norm = Math.sqrt(xDest * xDest + yDest * yDest);
	    allPoints[i * 4 + 2] = xDest / norm;
	    allPoints[i * 4 + 3] = yDest / norm;
	  }

	  return this.nodeShapes[name] = {
	    renderer: this,
	    name: name,
	    points: allPoints,
	    draw: function draw(context, centerX, centerY, width, height) {
	      this.renderer.nodeShapeImpl('round-polygon', context, centerX, centerY, width, height, this.points);
	    },
	    intersectLine: function intersectLine(nodeX, nodeY, width, height, x, y, padding) {
	      return roundPolygonIntersectLine(x, y, this.points, nodeX, nodeY, width, height);
	    },
	    checkPoint: function checkPoint(x, y, padding, width, height, centerX, centerY) {
	      return pointInsideRoundPolygon(x, y, this.points, centerX, centerY, width, height);
	    }
	  };
	};

	BRp$d.generateRoundRectangle = function () {
	  return this.nodeShapes['round-rectangle'] = this.nodeShapes['roundrectangle'] = {
	    renderer: this,
	    name: 'round-rectangle',
	    points: generateUnitNgonPointsFitToSquare(4, 0),
	    draw: function draw(context, centerX, centerY, width, height) {
	      this.renderer.nodeShapeImpl(this.name, context, centerX, centerY, width, height);
	    },
	    intersectLine: function intersectLine(nodeX, nodeY, width, height, x, y, padding) {
	      return roundRectangleIntersectLine(x, y, nodeX, nodeY, width, height, padding);
	    },
	    checkPoint: function checkPoint(x, y, padding, width, height, centerX, centerY) {
	      var cornerRadius = getRoundRectangleRadius(width, height);
	      var diam = cornerRadius * 2; // Check hBox

	      if (pointInsidePolygon(x, y, this.points, centerX, centerY, width, height - diam, [0, -1], padding)) {
	        return true;
	      } // Check vBox


	      if (pointInsidePolygon(x, y, this.points, centerX, centerY, width - diam, height, [0, -1], padding)) {
	        return true;
	      } // Check top left quarter circle


	      if (checkInEllipse(x, y, diam, diam, centerX - width / 2 + cornerRadius, centerY - height / 2 + cornerRadius, padding)) {
	        return true;
	      } // Check top right quarter circle


	      if (checkInEllipse(x, y, diam, diam, centerX + width / 2 - cornerRadius, centerY - height / 2 + cornerRadius, padding)) {
	        return true;
	      } // Check bottom right quarter circle


	      if (checkInEllipse(x, y, diam, diam, centerX + width / 2 - cornerRadius, centerY + height / 2 - cornerRadius, padding)) {
	        return true;
	      } // Check bottom left quarter circle


	      if (checkInEllipse(x, y, diam, diam, centerX - width / 2 + cornerRadius, centerY + height / 2 - cornerRadius, padding)) {
	        return true;
	      }

	      return false;
	    }
	  };
	};

	BRp$d.generateCutRectangle = function () {
	  return this.nodeShapes['cut-rectangle'] = this.nodeShapes['cutrectangle'] = {
	    renderer: this,
	    name: 'cut-rectangle',
	    cornerLength: getCutRectangleCornerLength(),
	    points: generateUnitNgonPointsFitToSquare(4, 0),
	    draw: function draw(context, centerX, centerY, width, height) {
	      this.renderer.nodeShapeImpl(this.name, context, centerX, centerY, width, height);
	    },
	    generateCutTrianglePts: function generateCutTrianglePts(width, height, centerX, centerY) {
	      var cl = this.cornerLength;
	      var hh = height / 2;
	      var hw = width / 2;
	      var xBegin = centerX - hw;
	      var xEnd = centerX + hw;
	      var yBegin = centerY - hh;
	      var yEnd = centerY + hh; // points are in clockwise order, inner (imaginary) triangle pt on [4, 5]

	      return {
	        topLeft: [xBegin, yBegin + cl, xBegin + cl, yBegin, xBegin + cl, yBegin + cl],
	        topRight: [xEnd - cl, yBegin, xEnd, yBegin + cl, xEnd - cl, yBegin + cl],
	        bottomRight: [xEnd, yEnd - cl, xEnd - cl, yEnd, xEnd - cl, yEnd - cl],
	        bottomLeft: [xBegin + cl, yEnd, xBegin, yEnd - cl, xBegin + cl, yEnd - cl]
	      };
	    },
	    intersectLine: function intersectLine(nodeX, nodeY, width, height, x, y, padding) {
	      var cPts = this.generateCutTrianglePts(width + 2 * padding, height + 2 * padding, nodeX, nodeY);
	      var pts = [].concat.apply([], [cPts.topLeft.splice(0, 4), cPts.topRight.splice(0, 4), cPts.bottomRight.splice(0, 4), cPts.bottomLeft.splice(0, 4)]);
	      return polygonIntersectLine(x, y, pts, nodeX, nodeY);
	    },
	    checkPoint: function checkPoint(x, y, padding, width, height, centerX, centerY) {
	      // Check hBox
	      if (pointInsidePolygon(x, y, this.points, centerX, centerY, width, height - 2 * this.cornerLength, [0, -1], padding)) {
	        return true;
	      } // Check vBox


	      if (pointInsidePolygon(x, y, this.points, centerX, centerY, width - 2 * this.cornerLength, height, [0, -1], padding)) {
	        return true;
	      }

	      var cutTrianglePts = this.generateCutTrianglePts(width, height, centerX, centerY);
	      return pointInsidePolygonPoints(x, y, cutTrianglePts.topLeft) || pointInsidePolygonPoints(x, y, cutTrianglePts.topRight) || pointInsidePolygonPoints(x, y, cutTrianglePts.bottomRight) || pointInsidePolygonPoints(x, y, cutTrianglePts.bottomLeft);
	    }
	  };
	};

	BRp$d.generateBarrel = function () {
	  return this.nodeShapes['barrel'] = {
	    renderer: this,
	    name: 'barrel',
	    points: generateUnitNgonPointsFitToSquare(4, 0),
	    draw: function draw(context, centerX, centerY, width, height) {
	      this.renderer.nodeShapeImpl(this.name, context, centerX, centerY, width, height);
	    },
	    intersectLine: function intersectLine(nodeX, nodeY, width, height, x, y, padding) {
	      // use two fixed t values for the bezier curve approximation
	      var t0 = 0.15;
	      var t1 = 0.5;
	      var t2 = 0.85;
	      var bPts = this.generateBarrelBezierPts(width + 2 * padding, height + 2 * padding, nodeX, nodeY);

	      var approximateBarrelCurvePts = function approximateBarrelCurvePts(pts) {
	        // approximate curve pts based on the two t values
	        var m0 = qbezierPtAt({
	          x: pts[0],
	          y: pts[1]
	        }, {
	          x: pts[2],
	          y: pts[3]
	        }, {
	          x: pts[4],
	          y: pts[5]
	        }, t0);
	        var m1 = qbezierPtAt({
	          x: pts[0],
	          y: pts[1]
	        }, {
	          x: pts[2],
	          y: pts[3]
	        }, {
	          x: pts[4],
	          y: pts[5]
	        }, t1);
	        var m2 = qbezierPtAt({
	          x: pts[0],
	          y: pts[1]
	        }, {
	          x: pts[2],
	          y: pts[3]
	        }, {
	          x: pts[4],
	          y: pts[5]
	        }, t2);
	        return [pts[0], pts[1], m0.x, m0.y, m1.x, m1.y, m2.x, m2.y, pts[4], pts[5]];
	      };

	      var pts = [].concat(approximateBarrelCurvePts(bPts.topLeft), approximateBarrelCurvePts(bPts.topRight), approximateBarrelCurvePts(bPts.bottomRight), approximateBarrelCurvePts(bPts.bottomLeft));
	      return polygonIntersectLine(x, y, pts, nodeX, nodeY);
	    },
	    generateBarrelBezierPts: function generateBarrelBezierPts(width, height, centerX, centerY) {
	      var hh = height / 2;
	      var hw = width / 2;
	      var xBegin = centerX - hw;
	      var xEnd = centerX + hw;
	      var yBegin = centerY - hh;
	      var yEnd = centerY + hh;
	      var curveConstants = getBarrelCurveConstants(width, height);
	      var hOffset = curveConstants.heightOffset;
	      var wOffset = curveConstants.widthOffset;
	      var ctrlPtXOffset = curveConstants.ctrlPtOffsetPct * width; // points are in clockwise order, inner (imaginary) control pt on [4, 5]

	      var pts = {
	        topLeft: [xBegin, yBegin + hOffset, xBegin + ctrlPtXOffset, yBegin, xBegin + wOffset, yBegin],
	        topRight: [xEnd - wOffset, yBegin, xEnd - ctrlPtXOffset, yBegin, xEnd, yBegin + hOffset],
	        bottomRight: [xEnd, yEnd - hOffset, xEnd - ctrlPtXOffset, yEnd, xEnd - wOffset, yEnd],
	        bottomLeft: [xBegin + wOffset, yEnd, xBegin + ctrlPtXOffset, yEnd, xBegin, yEnd - hOffset]
	      };
	      pts.topLeft.isTop = true;
	      pts.topRight.isTop = true;
	      pts.bottomLeft.isBottom = true;
	      pts.bottomRight.isBottom = true;
	      return pts;
	    },
	    checkPoint: function checkPoint(x, y, padding, width, height, centerX, centerY) {
	      var curveConstants = getBarrelCurveConstants(width, height);
	      var hOffset = curveConstants.heightOffset;
	      var wOffset = curveConstants.widthOffset; // Check hBox

	      if (pointInsidePolygon(x, y, this.points, centerX, centerY, width, height - 2 * hOffset, [0, -1], padding)) {
	        return true;
	      } // Check vBox


	      if (pointInsidePolygon(x, y, this.points, centerX, centerY, width - 2 * wOffset, height, [0, -1], padding)) {
	        return true;
	      }

	      var barrelCurvePts = this.generateBarrelBezierPts(width, height, centerX, centerY);

	      var getCurveT = function getCurveT(x, y, curvePts) {
	        var x0 = curvePts[4];
	        var x1 = curvePts[2];
	        var x2 = curvePts[0];
	        var y0 = curvePts[5]; // var y1 = curvePts[ 3 ];

	        var y2 = curvePts[1];
	        var xMin = Math.min(x0, x2);
	        var xMax = Math.max(x0, x2);
	        var yMin = Math.min(y0, y2);
	        var yMax = Math.max(y0, y2);

	        if (xMin <= x && x <= xMax && yMin <= y && y <= yMax) {
	          var coeff = bezierPtsToQuadCoeff(x0, x1, x2);
	          var roots = solveQuadratic(coeff[0], coeff[1], coeff[2], x);
	          var validRoots = roots.filter(function (r) {
	            return 0 <= r && r <= 1;
	          });

	          if (validRoots.length > 0) {
	            return validRoots[0];
	          }
	        }

	        return null;
	      };

	      var curveRegions = Object.keys(barrelCurvePts);

	      for (var i = 0; i < curveRegions.length; i++) {
	        var corner = curveRegions[i];
	        var cornerPts = barrelCurvePts[corner];
	        var t = getCurveT(x, y, cornerPts);

	        if (t == null) {
	          continue;
	        }

	        var y0 = cornerPts[5];
	        var y1 = cornerPts[3];
	        var y2 = cornerPts[1];
	        var bezY = qbezierAt(y0, y1, y2, t);

	        if (cornerPts.isTop && bezY <= y) {
	          return true;
	        }

	        if (cornerPts.isBottom && y <= bezY) {
	          return true;
	        }
	      }

	      return false;
	    }
	  };
	};

	BRp$d.generateBottomRoundrectangle = function () {
	  return this.nodeShapes['bottom-round-rectangle'] = this.nodeShapes['bottomroundrectangle'] = {
	    renderer: this,
	    name: 'bottom-round-rectangle',
	    points: generateUnitNgonPointsFitToSquare(4, 0),
	    draw: function draw(context, centerX, centerY, width, height) {
	      this.renderer.nodeShapeImpl(this.name, context, centerX, centerY, width, height);
	    },
	    intersectLine: function intersectLine(nodeX, nodeY, width, height, x, y, padding) {
	      var topStartX = nodeX - (width / 2 + padding);
	      var topStartY = nodeY - (height / 2 + padding);
	      var topEndY = topStartY;
	      var topEndX = nodeX + (width / 2 + padding);
	      var topIntersections = finiteLinesIntersect(x, y, nodeX, nodeY, topStartX, topStartY, topEndX, topEndY, false);

	      if (topIntersections.length > 0) {
	        return topIntersections;
	      }

	      return roundRectangleIntersectLine(x, y, nodeX, nodeY, width, height, padding);
	    },
	    checkPoint: function checkPoint(x, y, padding, width, height, centerX, centerY) {
	      var cornerRadius = getRoundRectangleRadius(width, height);
	      var diam = 2 * cornerRadius; // Check hBox

	      if (pointInsidePolygon(x, y, this.points, centerX, centerY, width, height - diam, [0, -1], padding)) {
	        return true;
	      } // Check vBox


	      if (pointInsidePolygon(x, y, this.points, centerX, centerY, width - diam, height, [0, -1], padding)) {
	        return true;
	      } // check non-rounded top side


	      var outerWidth = width / 2 + 2 * padding;
	      var outerHeight = height / 2 + 2 * padding;
	      var points = [centerX - outerWidth, centerY - outerHeight, centerX - outerWidth, centerY, centerX + outerWidth, centerY, centerX + outerWidth, centerY - outerHeight];

	      if (pointInsidePolygonPoints(x, y, points)) {
	        return true;
	      } // Check bottom right quarter circle


	      if (checkInEllipse(x, y, diam, diam, centerX + width / 2 - cornerRadius, centerY + height / 2 - cornerRadius, padding)) {
	        return true;
	      } // Check bottom left quarter circle


	      if (checkInEllipse(x, y, diam, diam, centerX - width / 2 + cornerRadius, centerY + height / 2 - cornerRadius, padding)) {
	        return true;
	      }

	      return false;
	    }
	  };
	};

	BRp$d.registerNodeShapes = function () {
	  var nodeShapes = this.nodeShapes = {};
	  var renderer = this;
	  this.generateEllipse();
	  this.generatePolygon('triangle', generateUnitNgonPointsFitToSquare(3, 0));
	  this.generateRoundPolygon('round-triangle', generateUnitNgonPointsFitToSquare(3, 0));
	  this.generatePolygon('rectangle', generateUnitNgonPointsFitToSquare(4, 0));
	  nodeShapes['square'] = nodeShapes['rectangle'];
	  this.generateRoundRectangle();
	  this.generateCutRectangle();
	  this.generateBarrel();
	  this.generateBottomRoundrectangle();
	  {
	    var diamondPoints = [0, 1, 1, 0, 0, -1, -1, 0];
	    this.generatePolygon('diamond', diamondPoints);
	    this.generateRoundPolygon('round-diamond', diamondPoints);
	  }
	  this.generatePolygon('pentagon', generateUnitNgonPointsFitToSquare(5, 0));
	  this.generateRoundPolygon('round-pentagon', generateUnitNgonPointsFitToSquare(5, 0));
	  this.generatePolygon('hexagon', generateUnitNgonPointsFitToSquare(6, 0));
	  this.generateRoundPolygon('round-hexagon', generateUnitNgonPointsFitToSquare(6, 0));
	  this.generatePolygon('heptagon', generateUnitNgonPointsFitToSquare(7, 0));
	  this.generateRoundPolygon('round-heptagon', generateUnitNgonPointsFitToSquare(7, 0));
	  this.generatePolygon('octagon', generateUnitNgonPointsFitToSquare(8, 0));
	  this.generateRoundPolygon('round-octagon', generateUnitNgonPointsFitToSquare(8, 0));
	  var star5Points = new Array(20);
	  {
	    var outerPoints = generateUnitNgonPoints(5, 0);
	    var innerPoints = generateUnitNgonPoints(5, Math.PI / 5); // Outer radius is 1; inner radius of star is smaller

	    var innerRadius = 0.5 * (3 - Math.sqrt(5));
	    innerRadius *= 1.57;

	    for (var i = 0; i < innerPoints.length / 2; i++) {
	      innerPoints[i * 2] *= innerRadius;
	      innerPoints[i * 2 + 1] *= innerRadius;
	    }

	    for (var i = 0; i < 20 / 4; i++) {
	      star5Points[i * 4] = outerPoints[i * 2];
	      star5Points[i * 4 + 1] = outerPoints[i * 2 + 1];
	      star5Points[i * 4 + 2] = innerPoints[i * 2];
	      star5Points[i * 4 + 3] = innerPoints[i * 2 + 1];
	    }
	  }
	  star5Points = fitPolygonToSquare(star5Points);
	  this.generatePolygon('star', star5Points);
	  this.generatePolygon('vee', [-1, -1, 0, -0.333, 1, -1, 0, 1]);
	  this.generatePolygon('rhomboid', [-1, -1, 0.333, -1, 1, 1, -0.333, 1]);
	  this.nodeShapes['concavehexagon'] = this.generatePolygon('concave-hexagon', [-1, -0.95, -0.75, 0, -1, 0.95, 1, 0.95, 0.75, 0, 1, -0.95]);
	  {
	    var tagPoints = [-1, -1, 0.25, -1, 1, 0, 0.25, 1, -1, 1];
	    this.generatePolygon('tag', tagPoints);
	    this.generateRoundPolygon('round-tag', tagPoints);
	  }

	  nodeShapes.makePolygon = function (points) {
	    // use caching on user-specified polygons so they are as fast as native shapes
	    var key = points.join('$');
	    var name = 'polygon-' + key;
	    var shape;

	    if (shape = this[name]) {
	      // got cached shape
	      return shape;
	    } // create and cache new shape


	    return renderer.generatePolygon(name, points);
	  };
	};

	var BRp$e = {};

	BRp$e.timeToRender = function () {
	  return this.redrawTotalTime / this.redrawCount;
	};

	BRp$e.redraw = function (options) {
	  options = options || staticEmptyObject();
	  var r = this;

	  if (r.averageRedrawTime === undefined) {
	    r.averageRedrawTime = 0;
	  }

	  if (r.lastRedrawTime === undefined) {
	    r.lastRedrawTime = 0;
	  }

	  if (r.lastDrawTime === undefined) {
	    r.lastDrawTime = 0;
	  }

	  r.requestedFrame = true;
	  r.renderOptions = options;
	};

	BRp$e.beforeRender = function (fn, priority) {
	  // the renderer can't add tick callbacks when destroyed
	  if (this.destroyed) {
	    return;
	  }

	  if (priority == null) {
	    error('Priority is not optional for beforeRender');
	  }

	  var cbs = this.beforeRenderCallbacks;
	  cbs.push({
	    fn: fn,
	    priority: priority
	  }); // higher priority callbacks executed first

	  cbs.sort(function (a, b) {
	    return b.priority - a.priority;
	  });
	};

	var beforeRenderCallbacks = function beforeRenderCallbacks(r, willDraw, startTime) {
	  var cbs = r.beforeRenderCallbacks;

	  for (var i = 0; i < cbs.length; i++) {
	    cbs[i].fn(willDraw, startTime);
	  }
	};

	BRp$e.startRenderLoop = function () {
	  var r = this;
	  var cy = r.cy;

	  if (r.renderLoopStarted) {
	    return;
	  } else {
	    r.renderLoopStarted = true;
	  }

	  var renderFn = function renderFn(requestTime) {
	    if (r.destroyed) {
	      return;
	    }

	    if (cy.batching()) ; else if (r.requestedFrame && !r.skipFrame) {
	      beforeRenderCallbacks(r, true, requestTime);
	      var startTime = performanceNow();
	      r.render(r.renderOptions);
	      var endTime = r.lastDrawTime = performanceNow();

	      if (r.averageRedrawTime === undefined) {
	        r.averageRedrawTime = endTime - startTime;
	      }

	      if (r.redrawCount === undefined) {
	        r.redrawCount = 0;
	      }

	      r.redrawCount++;

	      if (r.redrawTotalTime === undefined) {
	        r.redrawTotalTime = 0;
	      }

	      var duration = endTime - startTime;
	      r.redrawTotalTime += duration;
	      r.lastRedrawTime = duration; // use a weighted average with a bias from the previous average so we don't spike so easily

	      r.averageRedrawTime = r.averageRedrawTime / 2 + duration / 2;
	      r.requestedFrame = false;
	    } else {
	      beforeRenderCallbacks(r, false, requestTime);
	    }

	    r.skipFrame = false;
	    requestAnimationFrame(renderFn);
	  };

	  requestAnimationFrame(renderFn);
	};

	var BaseRenderer = function BaseRenderer(options) {
	  this.init(options);
	};

	var BR = BaseRenderer;
	var BRp$f = BR.prototype;
	BRp$f.clientFunctions = ['redrawHint', 'render', 'renderTo', 'matchCanvasSize', 'nodeShapeImpl', 'arrowShapeImpl'];

	BRp$f.init = function (options) {
	  var r = this;
	  r.options = options;
	  r.cy = options.cy;
	  var ctr = r.container = options.cy.container(); // prepend a stylesheet in the head such that

	  if (window$1) {
	    var document = window$1.document;
	    var head = document.head;
	    var stylesheetId = '__________cytoscape_stylesheet';
	    var className = '__________cytoscape_container';
	    var stylesheetAlreadyExists = document.getElementById(stylesheetId) != null;

	    if (ctr.className.indexOf(className) < 0) {
	      ctr.className = (ctr.className || '') + ' ' + className;
	    }

	    if (!stylesheetAlreadyExists) {
	      var stylesheet = document.createElement('style');
	      stylesheet.id = stylesheetId;
	      stylesheet.innerHTML = '.' + className + ' { position: relative; }';
	      head.insertBefore(stylesheet, head.children[0]); // first so lowest priority
	    }

	    var computedStyle = window$1.getComputedStyle(ctr);
	    var position = computedStyle.getPropertyValue('position');

	    if (position === 'static') {
	      warn('A Cytoscape container has style position:static and so can not use UI extensions properly');
	    }
	  }

	  r.selection = [undefined, undefined, undefined, undefined, 0]; // Coordinates for selection box, plus enabled flag

	  r.bezierProjPcts = [0.05, 0.225, 0.4, 0.5, 0.6, 0.775, 0.95]; //--Pointer-related data

	  r.hoverData = {
	    down: null,
	    last: null,
	    downTime: null,
	    triggerMode: null,
	    dragging: false,
	    initialPan: [null, null],
	    capture: false
	  };
	  r.dragData = {
	    possibleDragElements: []
	  };
	  r.touchData = {
	    start: null,
	    capture: false,
	    // These 3 fields related to tap, taphold events
	    startPosition: [null, null, null, null, null, null],
	    singleTouchStartTime: null,
	    singleTouchMoved: true,
	    now: [null, null, null, null, null, null],
	    earlier: [null, null, null, null, null, null]
	  };
	  r.redraws = 0;
	  r.showFps = options.showFps;
	  r.debug = options.debug;
	  r.hideEdgesOnViewport = options.hideEdgesOnViewport;
	  r.textureOnViewport = options.textureOnViewport;
	  r.wheelSensitivity = options.wheelSensitivity;
	  r.motionBlurEnabled = options.motionBlur; // on by default

	  r.forcedPixelRatio = number(options.pixelRatio) ? options.pixelRatio : null;
	  r.motionBlur = options.motionBlur; // for initial kick off

	  r.motionBlurOpacity = options.motionBlurOpacity;
	  r.motionBlurTransparency = 1 - r.motionBlurOpacity;
	  r.motionBlurPxRatio = 1;
	  r.mbPxRBlurry = 1; //0.8;

	  r.minMbLowQualFrames = 4;
	  r.fullQualityMb = false;
	  r.clearedForMotionBlur = [];
	  r.desktopTapThreshold = options.desktopTapThreshold;
	  r.desktopTapThreshold2 = options.desktopTapThreshold * options.desktopTapThreshold;
	  r.touchTapThreshold = options.touchTapThreshold;
	  r.touchTapThreshold2 = options.touchTapThreshold * options.touchTapThreshold;
	  r.tapholdDuration = 500;
	  r.bindings = [];
	  r.beforeRenderCallbacks = [];
	  r.beforeRenderPriorities = {
	    // higher priority execs before lower one
	    animations: 400,
	    eleCalcs: 300,
	    eleTxrDeq: 200,
	    lyrTxrDeq: 150,
	    lyrTxrSkip: 100
	  };
	  r.registerNodeShapes();
	  r.registerArrowShapes();
	  r.registerCalculationListeners();
	};

	BRp$f.notify = function (eventName, eles) {
	  var r = this;
	  var cy = r.cy; // the renderer can't be notified after it's destroyed

	  if (this.destroyed) {
	    return;
	  }

	  if (eventName === 'init') {
	    r.load();
	    return;
	  }

	  if (eventName === 'destroy') {
	    r.destroy();
	    return;
	  }

	  if (eventName === 'add' || eventName === 'remove' || eventName === 'move' && cy.hasCompoundNodes() || eventName === 'load' || eventName === 'zorder' || eventName === 'mount') {
	    r.invalidateCachedZSortedEles();
	  }

	  if (eventName === 'viewport') {
	    r.redrawHint('select', true);
	  }

	  if (eventName === 'load' || eventName === 'resize' || eventName === 'mount') {
	    r.invalidateContainerClientCoordsCache();
	    r.matchCanvasSize(r.container);
	  }

	  r.redrawHint('eles', true);
	  r.redrawHint('drag', true);
	  this.startRenderLoop();
	  this.redraw();
	};

	BRp$f.destroy = function () {
	  var r = this;
	  r.destroyed = true;
	  r.cy.stopAnimationLoop();

	  for (var i = 0; i < r.bindings.length; i++) {
	    var binding = r.bindings[i];
	    var b = binding;
	    var tgt = b.target;
	    (tgt.off || tgt.removeEventListener).apply(tgt, b.args);
	  }

	  r.bindings = [];
	  r.beforeRenderCallbacks = [];
	  r.onUpdateEleCalcsFns = [];

	  if (r.removeObserver) {
	    r.removeObserver.disconnect();
	  }

	  if (r.styleObserver) {
	    r.styleObserver.disconnect();
	  }

	  if (r.resizeObserver) {
	    r.resizeObserver.disconnect();
	  }

	  if (r.labelCalcDiv) {
	    try {
	      document.body.removeChild(r.labelCalcDiv); // eslint-disable-line no-undef
	    } catch (e) {// ie10 issue #1014
	    }
	  }
	};

	BRp$f.isHeadless = function () {
	  return false;
	};

	[BRp, BRp$a, BRp$b, BRp$c, BRp$d, BRp$e].forEach(function (props) {
	  extend(BRp$f, props);
	});

	var fullFpsTime = 1000 / 60; // assume 60 frames per second

	var defs = {
	  setupDequeueing: function setupDequeueing(opts) {
	    return function setupDequeueingImpl() {
	      var self = this;
	      var r = this.renderer;

	      if (self.dequeueingSetup) {
	        return;
	      } else {
	        self.dequeueingSetup = true;
	      }

	      var queueRedraw = util(function () {
	        r.redrawHint('eles', true);
	        r.redrawHint('drag', true);
	        r.redraw();
	      }, opts.deqRedrawThreshold);

	      var dequeue = function dequeue(willDraw, frameStartTime) {
	        var startTime = performanceNow();
	        var avgRenderTime = r.averageRedrawTime;
	        var renderTime = r.lastRedrawTime;
	        var deqd = [];
	        var extent = r.cy.extent();
	        var pixelRatio = r.getPixelRatio(); // if we aren't in a tick that causes a draw, then the rendered style
	        // queue won't automatically be flushed before dequeueing starts

	        if (!willDraw) {
	          r.flushRenderedStyleQueue();
	        }

	        while (true) {
	          // eslint-disable-line no-constant-condition
	          var now = performanceNow();
	          var duration = now - startTime;
	          var frameDuration = now - frameStartTime;

	          if (renderTime < fullFpsTime) {
	            // if we're rendering faster than the ideal fps, then do dequeueing
	            // during all of the remaining frame time
	            var timeAvailable = fullFpsTime - (willDraw ? avgRenderTime : 0);

	            if (frameDuration >= opts.deqFastCost * timeAvailable) {
	              break;
	            }
	          } else {
	            if (willDraw) {
	              if (duration >= opts.deqCost * renderTime || duration >= opts.deqAvgCost * avgRenderTime) {
	                break;
	              }
	            } else if (frameDuration >= opts.deqNoDrawCost * fullFpsTime) {
	              break;
	            }
	          }

	          var thisDeqd = opts.deq(self, pixelRatio, extent);

	          if (thisDeqd.length > 0) {
	            for (var i = 0; i < thisDeqd.length; i++) {
	              deqd.push(thisDeqd[i]);
	            }
	          } else {
	            break;
	          }
	        } // callbacks on dequeue


	        if (deqd.length > 0) {
	          opts.onDeqd(self, deqd);

	          if (!willDraw && opts.shouldRedraw(self, deqd, pixelRatio, extent)) {
	            queueRedraw();
	          }
	        }
	      };

	      var priority = opts.priority || noop;
	      r.beforeRender(dequeue, priority(self));
	    };
	  }
	};

	// Uses keys so elements may share the same cache.

	var ElementTextureCacheLookup =
	/*#__PURE__*/
	function () {
	  function ElementTextureCacheLookup(getKey) {
	    var doesEleInvalidateKey = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : falsify;

	    _classCallCheck(this, ElementTextureCacheLookup);

	    this.idsByKey = new Map$1();
	    this.keyForId = new Map$1();
	    this.cachesByLvl = new Map$1();
	    this.lvls = [];
	    this.getKey = getKey;
	    this.doesEleInvalidateKey = doesEleInvalidateKey;
	  }

	  _createClass(ElementTextureCacheLookup, [{
	    key: "getIdsFor",
	    value: function getIdsFor(key) {
	      if (key == null) {
	        error("Can not get id list for null key");
	      }

	      var idsByKey = this.idsByKey;
	      var ids = this.idsByKey.get(key);

	      if (!ids) {
	        ids = new Set$1();
	        idsByKey.set(key, ids);
	      }

	      return ids;
	    }
	  }, {
	    key: "addIdForKey",
	    value: function addIdForKey(key, id) {
	      if (key != null) {
	        this.getIdsFor(key).add(id);
	      }
	    }
	  }, {
	    key: "deleteIdForKey",
	    value: function deleteIdForKey(key, id) {
	      if (key != null) {
	        this.getIdsFor(key)["delete"](id);
	      }
	    }
	  }, {
	    key: "getNumberOfIdsForKey",
	    value: function getNumberOfIdsForKey(key) {
	      if (key == null) {
	        return 0;
	      } else {
	        return this.getIdsFor(key).size;
	      }
	    }
	  }, {
	    key: "updateKeyMappingFor",
	    value: function updateKeyMappingFor(ele) {
	      var id = ele.id();
	      var prevKey = this.keyForId.get(id);
	      var currKey = this.getKey(ele);
	      this.deleteIdForKey(prevKey, id);
	      this.addIdForKey(currKey, id);
	      this.keyForId.set(id, currKey);
	    }
	  }, {
	    key: "deleteKeyMappingFor",
	    value: function deleteKeyMappingFor(ele) {
	      var id = ele.id();
	      var prevKey = this.keyForId.get(id);
	      this.deleteIdForKey(prevKey, id);
	      this.keyForId["delete"](id);
	    }
	  }, {
	    key: "keyHasChangedFor",
	    value: function keyHasChangedFor(ele) {
	      var id = ele.id();
	      var prevKey = this.keyForId.get(id);
	      var newKey = this.getKey(ele);
	      return prevKey !== newKey;
	    }
	  }, {
	    key: "isInvalid",
	    value: function isInvalid(ele) {
	      return this.keyHasChangedFor(ele) || this.doesEleInvalidateKey(ele);
	    }
	  }, {
	    key: "getCachesAt",
	    value: function getCachesAt(lvl) {
	      var cachesByLvl = this.cachesByLvl,
	          lvls = this.lvls;
	      var caches = cachesByLvl.get(lvl);

	      if (!caches) {
	        caches = new Map$1();
	        cachesByLvl.set(lvl, caches);
	        lvls.push(lvl);
	      }

	      return caches;
	    }
	  }, {
	    key: "getCache",
	    value: function getCache(key, lvl) {
	      return this.getCachesAt(lvl).get(key);
	    }
	  }, {
	    key: "get",
	    value: function get(ele, lvl) {
	      var key = this.getKey(ele);
	      var cache = this.getCache(key, lvl); // getting for an element may need to add to the id list b/c eles can share keys

	      if (cache != null) {
	        this.updateKeyMappingFor(ele);
	      }

	      return cache;
	    }
	  }, {
	    key: "getForCachedKey",
	    value: function getForCachedKey(ele, lvl) {
	      var key = this.keyForId.get(ele.id()); // n.b. use cached key, not newly computed key

	      var cache = this.getCache(key, lvl);
	      return cache;
	    }
	  }, {
	    key: "hasCache",
	    value: function hasCache(key, lvl) {
	      return this.getCachesAt(lvl).has(key);
	    }
	  }, {
	    key: "has",
	    value: function has(ele, lvl) {
	      var key = this.getKey(ele);
	      return this.hasCache(key, lvl);
	    }
	  }, {
	    key: "setCache",
	    value: function setCache(key, lvl, cache) {
	      cache.key = key;
	      this.getCachesAt(lvl).set(key, cache);
	    }
	  }, {
	    key: "set",
	    value: function set(ele, lvl, cache) {
	      var key = this.getKey(ele);
	      this.setCache(key, lvl, cache);
	      this.updateKeyMappingFor(ele);
	    }
	  }, {
	    key: "deleteCache",
	    value: function deleteCache(key, lvl) {
	      this.getCachesAt(lvl)["delete"](key);
	    }
	  }, {
	    key: "delete",
	    value: function _delete(ele, lvl) {
	      var key = this.getKey(ele);
	      this.deleteCache(key, lvl);
	    }
	  }, {
	    key: "invalidateKey",
	    value: function invalidateKey(key) {
	      var _this = this;

	      this.lvls.forEach(function (lvl) {
	        return _this.deleteCache(key, lvl);
	      });
	    } // returns true if no other eles reference the invalidated cache (n.b. other eles may need the cache with the same key)

	  }, {
	    key: "invalidate",
	    value: function invalidate(ele) {
	      var id = ele.id();
	      var key = this.keyForId.get(id); // n.b. use stored key rather than current (potential key)

	      this.deleteKeyMappingFor(ele);
	      var entireKeyInvalidated = this.doesEleInvalidateKey(ele);

	      if (entireKeyInvalidated) {
	        // clear mapping for current key
	        this.invalidateKey(key);
	      }

	      return entireKeyInvalidated || this.getNumberOfIdsForKey(key) === 0;
	    }
	  }]);

	  return ElementTextureCacheLookup;
	}();

	var minTxrH = 25; // the size of the texture cache for small height eles (special case)

	var txrStepH = 50; // the min size of the regular cache, and the size it increases with each step up

	var minLvl = -4; // when scaling smaller than that we don't need to re-render

	var maxLvl = 3; // when larger than this scale just render directly (caching is not helpful)

	var maxZoom = 7.99; // beyond this zoom level, layered textures are not used

	var eleTxrSpacing = 8; // spacing between elements on textures to avoid blitting overlaps

	var defTxrWidth = 1024; // default/minimum texture width

	var maxTxrW = 1024; // the maximum width of a texture

	var maxTxrH = 1024; // the maximum height of a texture

	var minUtility = 0.2; // if usage of texture is less than this, it is retired

	var maxFullness = 0.8; // fullness of texture after which queue removal is checked

	var maxFullnessChecks = 10; // dequeued after this many checks

	var deqCost = 0.15; // % of add'l rendering cost allowed for dequeuing ele caches each frame

	var deqAvgCost = 0.1; // % of add'l rendering cost compared to average overall redraw time

	var deqNoDrawCost = 0.9; // % of avg frame time that can be used for dequeueing when not drawing

	var deqFastCost = 0.9; // % of frame time to be used when >60fps

	var deqRedrawThreshold = 100; // time to batch redraws together from dequeueing to allow more dequeueing calcs to happen in the meanwhile

	var maxDeqSize = 1; // number of eles to dequeue and render at higher texture in each batch

	var getTxrReasons = {
	  dequeue: 'dequeue',
	  downscale: 'downscale',
	  highQuality: 'highQuality'
	};
	var initDefaults = defaults({
	  getKey: null,
	  doesEleInvalidateKey: falsify,
	  drawElement: null,
	  getBoundingBox: null,
	  getRotationPoint: null,
	  getRotationOffset: null,
	  isVisible: trueify,
	  allowEdgeTxrCaching: true,
	  allowParentTxrCaching: true
	});

	var ElementTextureCache = function ElementTextureCache(renderer, initOptions) {
	  var self = this;
	  self.renderer = renderer;
	  self.onDequeues = [];
	  var opts = initDefaults(initOptions);
	  extend(self, opts);
	  self.lookup = new ElementTextureCacheLookup(opts.getKey, opts.doesEleInvalidateKey);
	  self.setupDequeueing();
	};

	var ETCp = ElementTextureCache.prototype;
	ETCp.reasons = getTxrReasons; // the list of textures in which new subtextures for elements can be placed

	ETCp.getTextureQueue = function (txrH) {
	  var self = this;
	  self.eleImgCaches = self.eleImgCaches || {};
	  return self.eleImgCaches[txrH] = self.eleImgCaches[txrH] || [];
	}; // the list of usused textures which can be recycled (in use in texture queue)


	ETCp.getRetiredTextureQueue = function (txrH) {
	  var self = this;
	  var rtxtrQs = self.eleImgCaches.retired = self.eleImgCaches.retired || {};
	  var rtxtrQ = rtxtrQs[txrH] = rtxtrQs[txrH] || [];
	  return rtxtrQ;
	}; // queue of element draw requests at different scale levels


	ETCp.getElementQueue = function () {
	  var self = this;
	  var q = self.eleCacheQueue = self.eleCacheQueue || new Heap(function (a, b) {
	    return b.reqs - a.reqs;
	  });
	  return q;
	}; // queue of element draw requests at different scale levels (element id lookup)


	ETCp.getElementKeyToQueue = function () {
	  var self = this;
	  var k2q = self.eleKeyToCacheQueue = self.eleKeyToCacheQueue || {};
	  return k2q;
	};

	ETCp.getElement = function (ele, bb, pxRatio, lvl, reason) {
	  var self = this;
	  var r = this.renderer;
	  var zoom = r.cy.zoom();
	  var lookup = this.lookup;

	  if (bb.w === 0 || bb.h === 0 || isNaN(bb.w) || isNaN(bb.h) || !ele.visible()) {
	    return null;
	  }

	  if (!self.allowEdgeTxrCaching && ele.isEdge() || !self.allowParentTxrCaching && ele.isParent()) {
	    return null;
	  }

	  if (lvl == null) {
	    lvl = Math.ceil(log2(zoom * pxRatio));
	  }

	  if (lvl < minLvl) {
	    lvl = minLvl;
	  } else if (zoom >= maxZoom || lvl > maxLvl) {
	    return null;
	  }

	  var scale = Math.pow(2, lvl);
	  var eleScaledH = bb.h * scale;
	  var eleScaledW = bb.w * scale;
	  var scaledLabelShown = r.eleTextBiggerThanMin(ele, scale);

	  if (!this.isVisible(ele, scaledLabelShown)) {
	    return null;
	  }

	  var eleCache = lookup.get(ele, lvl); // if this get was on an unused/invalidated cache, then restore the texture usage metric

	  if (eleCache && eleCache.invalidated) {
	    eleCache.invalidated = false;
	    eleCache.texture.invalidatedWidth -= eleCache.width;
	  }

	  if (eleCache) {
	    return eleCache;
	  }

	  var txrH; // which texture height this ele belongs to

	  if (eleScaledH <= minTxrH) {
	    txrH = minTxrH;
	  } else if (eleScaledH <= txrStepH) {
	    txrH = txrStepH;
	  } else {
	    txrH = Math.ceil(eleScaledH / txrStepH) * txrStepH;
	  }

	  if (eleScaledH > maxTxrH || eleScaledW > maxTxrW) {
	    return null; // caching large elements is not efficient
	  }

	  var txrQ = self.getTextureQueue(txrH); // first try the second last one in case it has space at the end

	  var txr = txrQ[txrQ.length - 2];

	  var addNewTxr = function addNewTxr() {
	    return self.recycleTexture(txrH, eleScaledW) || self.addTexture(txrH, eleScaledW);
	  }; // try the last one if there is no second last one


	  if (!txr) {
	    txr = txrQ[txrQ.length - 1];
	  } // if the last one doesn't exist, we need a first one


	  if (!txr) {
	    txr = addNewTxr();
	  } // if there's no room in the current texture, we need a new one


	  if (txr.width - txr.usedWidth < eleScaledW) {
	    txr = addNewTxr();
	  }

	  var scalableFrom = function scalableFrom(otherCache) {
	    return otherCache && otherCache.scaledLabelShown === scaledLabelShown;
	  };

	  var deqing = reason && reason === getTxrReasons.dequeue;
	  var highQualityReq = reason && reason === getTxrReasons.highQuality;
	  var downscaleReq = reason && reason === getTxrReasons.downscale;
	  var higherCache; // the nearest cache with a higher level

	  for (var l = lvl + 1; l <= maxLvl; l++) {
	    var c = lookup.get(ele, l);

	    if (c) {
	      higherCache = c;
	      break;
	    }
	  }

	  var oneUpCache = higherCache && higherCache.level === lvl + 1 ? higherCache : null;

	  var downscale = function downscale() {
	    txr.context.drawImage(oneUpCache.texture.canvas, oneUpCache.x, 0, oneUpCache.width, oneUpCache.height, txr.usedWidth, 0, eleScaledW, eleScaledH);
	  }; // reset ele area in texture


	  txr.context.setTransform(1, 0, 0, 1, 0, 0);
	  txr.context.clearRect(txr.usedWidth, 0, eleScaledW, txrH);

	  if (scalableFrom(oneUpCache)) {
	    // then we can relatively cheaply rescale the existing image w/o rerendering
	    downscale();
	  } else if (scalableFrom(higherCache)) {
	    // then use the higher cache for now and queue the next level down
	    // to cheaply scale towards the smaller level
	    if (highQualityReq) {
	      for (var _l = higherCache.level; _l > lvl; _l--) {
	        oneUpCache = self.getElement(ele, bb, pxRatio, _l, getTxrReasons.downscale);
	      }

	      downscale();
	    } else {
	      self.queueElement(ele, higherCache.level - 1);
	      return higherCache;
	    }
	  } else {
	    var lowerCache; // the nearest cache with a lower level

	    if (!deqing && !highQualityReq && !downscaleReq) {
	      for (var _l2 = lvl - 1; _l2 >= minLvl; _l2--) {
	        var _c = lookup.get(ele, _l2);

	        if (_c) {
	          lowerCache = _c;
	          break;
	        }
	      }
	    }

	    if (scalableFrom(lowerCache)) {
	      // then use the lower quality cache for now and queue the better one for later
	      self.queueElement(ele, lvl);
	      return lowerCache;
	    }

	    txr.context.translate(txr.usedWidth, 0);
	    txr.context.scale(scale, scale);
	    this.drawElement(txr.context, ele, bb, scaledLabelShown, false);
	    txr.context.scale(1 / scale, 1 / scale);
	    txr.context.translate(-txr.usedWidth, 0);
	  }

	  eleCache = {
	    x: txr.usedWidth,
	    texture: txr,
	    level: lvl,
	    scale: scale,
	    width: eleScaledW,
	    height: eleScaledH,
	    scaledLabelShown: scaledLabelShown
	  };
	  txr.usedWidth += Math.ceil(eleScaledW + eleTxrSpacing);
	  txr.eleCaches.push(eleCache);
	  lookup.set(ele, lvl, eleCache);
	  self.checkTextureFullness(txr);
	  return eleCache;
	};

	ETCp.invalidateElements = function (eles) {
	  for (var i = 0; i < eles.length; i++) {
	    this.invalidateElement(eles[i]);
	  }
	};

	ETCp.invalidateElement = function (ele) {
	  var self = this;
	  var lookup = self.lookup;
	  var caches = [];
	  var invalid = lookup.isInvalid(ele);

	  if (!invalid) {
	    return; // override the invalidation request if the element key has not changed
	  }

	  for (var lvl = minLvl; lvl <= maxLvl; lvl++) {
	    var cache = lookup.getForCachedKey(ele, lvl);

	    if (cache) {
	      caches.push(cache);
	    }
	  }

	  var noOtherElesUseCache = lookup.invalidate(ele);

	  if (noOtherElesUseCache) {
	    for (var i = 0; i < caches.length; i++) {
	      var _cache = caches[i];
	      var txr = _cache.texture; // remove space from the texture it belongs to

	      txr.invalidatedWidth += _cache.width; // mark the cache as invalidated

	      _cache.invalidated = true; // retire the texture if its utility is low

	      self.checkTextureUtility(txr);
	    }
	  } // remove from queue since the old req was for the old state


	  self.removeFromQueue(ele);
	};

	ETCp.checkTextureUtility = function (txr) {
	  // invalidate all entries in the cache if the cache size is small
	  if (txr.invalidatedWidth >= minUtility * txr.width) {
	    this.retireTexture(txr);
	  }
	};

	ETCp.checkTextureFullness = function (txr) {
	  // if texture has been mostly filled and passed over several times, remove
	  // it from the queue so we don't need to waste time looking at it to put new things
	  var self = this;
	  var txrQ = self.getTextureQueue(txr.height);

	  if (txr.usedWidth / txr.width > maxFullness && txr.fullnessChecks >= maxFullnessChecks) {
	    removeFromArray(txrQ, txr);
	  } else {
	    txr.fullnessChecks++;
	  }
	};

	ETCp.retireTexture = function (txr) {
	  var self = this;
	  var txrH = txr.height;
	  var txrQ = self.getTextureQueue(txrH);
	  var lookup = this.lookup; // retire the texture from the active / searchable queue:

	  removeFromArray(txrQ, txr);
	  txr.retired = true; // remove the refs from the eles to the caches:

	  var eleCaches = txr.eleCaches;

	  for (var i = 0; i < eleCaches.length; i++) {
	    var eleCache = eleCaches[i];
	    lookup.deleteCache(eleCache.key, eleCache.level);
	  }

	  clearArray(eleCaches); // add the texture to a retired queue so it can be recycled in future:

	  var rtxtrQ = self.getRetiredTextureQueue(txrH);
	  rtxtrQ.push(txr);
	};

	ETCp.addTexture = function (txrH, minW) {
	  var self = this;
	  var txrQ = self.getTextureQueue(txrH);
	  var txr = {};
	  txrQ.push(txr);
	  txr.eleCaches = [];
	  txr.height = txrH;
	  txr.width = Math.max(defTxrWidth, minW);
	  txr.usedWidth = 0;
	  txr.invalidatedWidth = 0;
	  txr.fullnessChecks = 0;
	  txr.canvas = self.renderer.makeOffscreenCanvas(txr.width, txr.height);
	  txr.context = txr.canvas.getContext('2d');
	  return txr;
	};

	ETCp.recycleTexture = function (txrH, minW) {
	  var self = this;
	  var txrQ = self.getTextureQueue(txrH);
	  var rtxtrQ = self.getRetiredTextureQueue(txrH);

	  for (var i = 0; i < rtxtrQ.length; i++) {
	    var txr = rtxtrQ[i];

	    if (txr.width >= minW) {
	      txr.retired = false;
	      txr.usedWidth = 0;
	      txr.invalidatedWidth = 0;
	      txr.fullnessChecks = 0;
	      clearArray(txr.eleCaches);
	      txr.context.setTransform(1, 0, 0, 1, 0, 0);
	      txr.context.clearRect(0, 0, txr.width, txr.height);
	      removeFromArray(rtxtrQ, txr);
	      txrQ.push(txr);
	      return txr;
	    }
	  }
	};

	ETCp.queueElement = function (ele, lvl) {
	  var self = this;
	  var q = self.getElementQueue();
	  var k2q = self.getElementKeyToQueue();
	  var key = this.getKey(ele);
	  var existingReq = k2q[key];

	  if (existingReq) {
	    // use the max lvl b/c in between lvls are cheap to make
	    existingReq.level = Math.max(existingReq.level, lvl);
	    existingReq.eles.merge(ele);
	    existingReq.reqs++;
	    q.updateItem(existingReq);
	  } else {
	    var req = {
	      eles: ele.spawn().merge(ele),
	      level: lvl,
	      reqs: 1,
	      key: key
	    };
	    q.push(req);
	    k2q[key] = req;
	  }
	};

	ETCp.dequeue = function (pxRatio
	/*, extent*/
	) {
	  var self = this;
	  var q = self.getElementQueue();
	  var k2q = self.getElementKeyToQueue();
	  var dequeued = [];
	  var lookup = self.lookup;

	  for (var i = 0; i < maxDeqSize; i++) {
	    if (q.size() > 0) {
	      var req = q.pop();
	      var key = req.key;
	      var ele = req.eles[0]; // all eles have the same key

	      var cacheExists = lookup.hasCache(ele, req.level); // clear out the key to req lookup

	      k2q[key] = null; // dequeueing isn't necessary with an existing cache

	      if (cacheExists) {
	        continue;
	      }

	      dequeued.push(req);
	      var bb = self.getBoundingBox(ele);
	      self.getElement(ele, bb, pxRatio, req.level, getTxrReasons.dequeue);
	    } else {
	      break;
	    }
	  }

	  return dequeued;
	};

	ETCp.removeFromQueue = function (ele) {
	  var self = this;
	  var q = self.getElementQueue();
	  var k2q = self.getElementKeyToQueue();
	  var key = this.getKey(ele);
	  var req = k2q[key];

	  if (req != null) {
	    if (req.eles.length === 1) {
	      // remove if last ele in the req
	      // bring to front of queue
	      req.reqs = MAX_INT;
	      q.updateItem(req);
	      q.pop(); // remove from queue

	      k2q[key] = null; // remove from lookup map
	    } else {
	      // otherwise just remove ele from req
	      req.eles.unmerge(ele);
	    }
	  }
	};

	ETCp.onDequeue = function (fn) {
	  this.onDequeues.push(fn);
	};

	ETCp.offDequeue = function (fn) {
	  removeFromArray(this.onDequeues, fn);
	};

	ETCp.setupDequeueing = defs.setupDequeueing({
	  deqRedrawThreshold: deqRedrawThreshold,
	  deqCost: deqCost,
	  deqAvgCost: deqAvgCost,
	  deqNoDrawCost: deqNoDrawCost,
	  deqFastCost: deqFastCost,
	  deq: function deq(self, pxRatio, extent) {
	    return self.dequeue(pxRatio, extent);
	  },
	  onDeqd: function onDeqd(self, deqd) {
	    for (var i = 0; i < self.onDequeues.length; i++) {
	      var fn = self.onDequeues[i];
	      fn(deqd);
	    }
	  },
	  shouldRedraw: function shouldRedraw(self, deqd, pxRatio, extent) {
	    for (var i = 0; i < deqd.length; i++) {
	      var eles = deqd[i].eles;

	      for (var j = 0; j < eles.length; j++) {
	        var bb = eles[j].boundingBox();

	        if (boundingBoxesIntersect(bb, extent)) {
	          return true;
	        }
	      }
	    }

	    return false;
	  },
	  priority: function priority(self) {
	    return self.renderer.beforeRenderPriorities.eleTxrDeq;
	  }
	});

	var defNumLayers = 1; // default number of layers to use

	var minLvl$1 = -4; // when scaling smaller than that we don't need to re-render

	var maxLvl$1 = 2; // when larger than this scale just render directly (caching is not helpful)

	var maxZoom$1 = 3.99; // beyond this zoom level, layered textures are not used

	var deqRedrawThreshold$1 = 50; // time to batch redraws together from dequeueing to allow more dequeueing calcs to happen in the meanwhile

	var refineEleDebounceTime = 50; // time to debounce sharper ele texture updates

	var deqCost$1 = 0.15; // % of add'l rendering cost allowed for dequeuing ele caches each frame

	var deqAvgCost$1 = 0.1; // % of add'l rendering cost compared to average overall redraw time

	var deqNoDrawCost$1 = 0.9; // % of avg frame time that can be used for dequeueing when not drawing

	var deqFastCost$1 = 0.9; // % of frame time to be used when >60fps

	var maxDeqSize$1 = 1; // number of eles to dequeue and render at higher texture in each batch

	var invalidThreshold = 250; // time threshold for disabling b/c of invalidations

	var maxLayerArea = 4000 * 4000; // layers can't be bigger than this

	var useHighQualityEleTxrReqs = true; // whether to use high quality ele txr requests (generally faster and cheaper in the longterm)
	// var log = function(){ console.log.apply( console, arguments ); };

	var LayeredTextureCache = function LayeredTextureCache(renderer) {
	  var self = this;
	  var r = self.renderer = renderer;
	  var cy = r.cy;
	  self.layersByLevel = {}; // e.g. 2 => [ layer1, layer2, ..., layerN ]

	  self.firstGet = true;
	  self.lastInvalidationTime = performanceNow() - 2 * invalidThreshold;
	  self.skipping = false;
	  self.eleTxrDeqs = cy.collection();
	  self.scheduleElementRefinement = util(function () {
	    self.refineElementTextures(self.eleTxrDeqs);
	    self.eleTxrDeqs.unmerge(self.eleTxrDeqs);
	  }, refineEleDebounceTime);
	  r.beforeRender(function (willDraw, now) {
	    if (now - self.lastInvalidationTime <= invalidThreshold) {
	      self.skipping = true;
	    } else {
	      self.skipping = false;
	    }
	  }, r.beforeRenderPriorities.lyrTxrSkip);

	  var qSort = function qSort(a, b) {
	    return b.reqs - a.reqs;
	  };

	  self.layersQueue = new Heap(qSort);
	  self.setupDequeueing();
	};

	var LTCp = LayeredTextureCache.prototype;
	var layerIdPool = 0;
	var MAX_INT$1 = Math.pow(2, 53) - 1;

	LTCp.makeLayer = function (bb, lvl) {
	  var scale = Math.pow(2, lvl);
	  var w = Math.ceil(bb.w * scale);
	  var h = Math.ceil(bb.h * scale);
	  var canvas = this.renderer.makeOffscreenCanvas(w, h);
	  var layer = {
	    id: layerIdPool = ++layerIdPool % MAX_INT$1,
	    bb: bb,
	    level: lvl,
	    width: w,
	    height: h,
	    canvas: canvas,
	    context: canvas.getContext('2d'),
	    eles: [],
	    elesQueue: [],
	    reqs: 0
	  }; // log('make layer %s with w %s and h %s and lvl %s', layer.id, layer.width, layer.height, layer.level);

	  var cxt = layer.context;
	  var dx = -layer.bb.x1;
	  var dy = -layer.bb.y1; // do the transform on creation to save cycles (it's the same for all eles)

	  cxt.scale(scale, scale);
	  cxt.translate(dx, dy);
	  return layer;
	};

	LTCp.getLayers = function (eles, pxRatio, lvl) {
	  var self = this;
	  var r = self.renderer;
	  var cy = r.cy;
	  var zoom = cy.zoom();
	  var firstGet = self.firstGet;
	  self.firstGet = false; // log('--\nget layers with %s eles', eles.length);
	  //log eles.map(function(ele){ return ele.id() }) );

	  if (lvl == null) {
	    lvl = Math.ceil(log2(zoom * pxRatio));

	    if (lvl < minLvl$1) {
	      lvl = minLvl$1;
	    } else if (zoom >= maxZoom$1 || lvl > maxLvl$1) {
	      return null;
	    }
	  }

	  self.validateLayersElesOrdering(lvl, eles);
	  var layersByLvl = self.layersByLevel;
	  var scale = Math.pow(2, lvl);
	  var layers = layersByLvl[lvl] = layersByLvl[lvl] || [];
	  var bb;
	  var lvlComplete = self.levelIsComplete(lvl, eles);
	  var tmpLayers;

	  var checkTempLevels = function checkTempLevels() {
	    var canUseAsTmpLvl = function canUseAsTmpLvl(l) {
	      self.validateLayersElesOrdering(l, eles);

	      if (self.levelIsComplete(l, eles)) {
	        tmpLayers = layersByLvl[l];
	        return true;
	      }
	    };

	    var checkLvls = function checkLvls(dir) {
	      if (tmpLayers) {
	        return;
	      }

	      for (var l = lvl + dir; minLvl$1 <= l && l <= maxLvl$1; l += dir) {
	        if (canUseAsTmpLvl(l)) {
	          break;
	        }
	      }
	    };

	    checkLvls(+1);
	    checkLvls(-1); // remove the invalid layers; they will be replaced as needed later in this function

	    for (var i = layers.length - 1; i >= 0; i--) {
	      var layer = layers[i];

	      if (layer.invalid) {
	        removeFromArray(layers, layer);
	      }
	    }
	  };

	  if (!lvlComplete) {
	    // if the current level is incomplete, then use the closest, best quality layerset temporarily
	    // and later queue the current layerset so we can get the proper quality level soon
	    checkTempLevels();
	  } else {
	    // log('level complete, using existing layers\n--');
	    return layers;
	  }

	  var getBb = function getBb() {
	    if (!bb) {
	      bb = makeBoundingBox();

	      for (var i = 0; i < eles.length; i++) {
	        updateBoundingBox(bb, eles[i].boundingBox());
	      }
	    }

	    return bb;
	  };

	  var makeLayer = function makeLayer(opts) {
	    opts = opts || {};
	    var after = opts.after;
	    getBb();
	    var area = bb.w * scale * (bb.h * scale);

	    if (area > maxLayerArea) {
	      return null;
	    }

	    var layer = self.makeLayer(bb, lvl);

	    if (after != null) {
	      var index = layers.indexOf(after) + 1;
	      layers.splice(index, 0, layer);
	    } else if (opts.insert === undefined || opts.insert) {
	      // no after specified => first layer made so put at start
	      layers.unshift(layer);
	    } // if( tmpLayers ){
	    //self.queueLayer( layer );
	    // }


	    return layer;
	  };

	  if (self.skipping && !firstGet) {
	    // log('skip layers');
	    return null;
	  } // log('do layers');


	  var layer = null;
	  var maxElesPerLayer = eles.length / defNumLayers;
	  var allowLazyQueueing =  !firstGet;

	  for (var i = 0; i < eles.length; i++) {
	    var ele = eles[i];
	    var rs = ele._private.rscratch;
	    var caches = rs.imgLayerCaches = rs.imgLayerCaches || {}; // log('look at ele', ele.id());

	    var existingLayer = caches[lvl];

	    if (existingLayer) {
	      // reuse layer for later eles
	      // log('reuse layer for', ele.id());
	      layer = existingLayer;
	      continue;
	    }

	    if (!layer || layer.eles.length >= maxElesPerLayer || !boundingBoxInBoundingBox(layer.bb, ele.boundingBox())) {
	      // log('make new layer for ele %s', ele.id());
	      layer = makeLayer({
	        insert: true,
	        after: layer
	      }); // if now layer can be built then we can't use layers at this level

	      if (!layer) {
	        return null;
	      } // log('new layer with id %s', layer.id);

	    }

	    if (tmpLayers || allowLazyQueueing) {
	      // log('queue ele %s in layer %s', ele.id(), layer.id);
	      self.queueLayer(layer, ele);
	    } else {
	      // log('draw ele %s in layer %s', ele.id(), layer.id);
	      self.drawEleInLayer(layer, ele, lvl, pxRatio);
	    }

	    layer.eles.push(ele);
	    caches[lvl] = layer;
	  } // log('--');


	  if (tmpLayers) {
	    // then we only queued the current layerset and can't draw it yet
	    return tmpLayers;
	  }

	  if (allowLazyQueueing) {
	    // log('lazy queue level', lvl);
	    return null;
	  }

	  return layers;
	}; // a layer may want to use an ele cache of a higher level to avoid blurriness
	// so the layer level might not equal the ele level


	LTCp.getEleLevelForLayerLevel = function (lvl, pxRatio) {
	  return lvl;
	};

	LTCp.drawEleInLayer = function (layer, ele, lvl, pxRatio) {
	  var self = this;
	  var r = this.renderer;
	  var context = layer.context;
	  var bb = ele.boundingBox();

	  if (bb.w === 0 || bb.h === 0 || !ele.visible()) {
	    return;
	  }

	  lvl = self.getEleLevelForLayerLevel(lvl, pxRatio);

	  {
	    r.setImgSmoothing(context, false);
	  }

	  {
	    r.drawCachedElement(context, ele, null, null, lvl, useHighQualityEleTxrReqs);
	  }

	  {
	    r.setImgSmoothing(context, true);
	  }
	};

	LTCp.levelIsComplete = function (lvl, eles) {
	  var self = this;
	  var layers = self.layersByLevel[lvl];

	  if (!layers || layers.length === 0) {
	    return false;
	  }

	  var numElesInLayers = 0;

	  for (var i = 0; i < layers.length; i++) {
	    var layer = layers[i]; // if there are any eles needed to be drawn yet, the level is not complete

	    if (layer.reqs > 0) {
	      return false;
	    } // if the layer is invalid, the level is not complete


	    if (layer.invalid) {
	      return false;
	    }

	    numElesInLayers += layer.eles.length;
	  } // we should have exactly the number of eles passed in to be complete


	  if (numElesInLayers !== eles.length) {
	    return false;
	  }

	  return true;
	};

	LTCp.validateLayersElesOrdering = function (lvl, eles) {
	  var layers = this.layersByLevel[lvl];

	  if (!layers) {
	    return;
	  } // if in a layer the eles are not in the same order, then the layer is invalid
	  // (i.e. there is an ele in between the eles in the layer)


	  for (var i = 0; i < layers.length; i++) {
	    var layer = layers[i];
	    var offset = -1; // find the offset

	    for (var j = 0; j < eles.length; j++) {
	      if (layer.eles[0] === eles[j]) {
	        offset = j;
	        break;
	      }
	    }

	    if (offset < 0) {
	      // then the layer has nonexistant elements and is invalid
	      this.invalidateLayer(layer);
	      continue;
	    } // the eles in the layer must be in the same continuous order, else the layer is invalid


	    var o = offset;

	    for (var j = 0; j < layer.eles.length; j++) {
	      if (layer.eles[j] !== eles[o + j]) {
	        // log('invalidate based on ordering', layer.id);
	        this.invalidateLayer(layer);
	        break;
	      }
	    }
	  }
	};

	LTCp.updateElementsInLayers = function (eles, update) {
	  var self = this;
	  var isEles = element(eles[0]); // collect udpated elements (cascaded from the layers) and update each
	  // layer itself along the way

	  for (var i = 0; i < eles.length; i++) {
	    var req = isEles ? null : eles[i];
	    var ele = isEles ? eles[i] : eles[i].ele;
	    var rs = ele._private.rscratch;
	    var caches = rs.imgLayerCaches = rs.imgLayerCaches || {};

	    for (var l = minLvl$1; l <= maxLvl$1; l++) {
	      var layer = caches[l];

	      if (!layer) {
	        continue;
	      } // if update is a request from the ele cache, then it affects only
	      // the matching level


	      if (req && self.getEleLevelForLayerLevel(layer.level) !== req.level) {
	        continue;
	      }

	      update(layer, ele, req);
	    }
	  }
	};

	LTCp.haveLayers = function () {
	  var self = this;
	  var haveLayers = false;

	  for (var l = minLvl$1; l <= maxLvl$1; l++) {
	    var layers = self.layersByLevel[l];

	    if (layers && layers.length > 0) {
	      haveLayers = true;
	      break;
	    }
	  }

	  return haveLayers;
	};

	LTCp.invalidateElements = function (eles) {
	  var self = this;

	  if (eles.length === 0) {
	    return;
	  }

	  self.lastInvalidationTime = performanceNow(); // log('update invalidate layer time from eles');

	  if (eles.length === 0 || !self.haveLayers()) {
	    return;
	  }

	  self.updateElementsInLayers(eles, function invalAssocLayers(layer, ele, req) {
	    self.invalidateLayer(layer);
	  });
	};

	LTCp.invalidateLayer = function (layer) {
	  // log('update invalidate layer time');
	  this.lastInvalidationTime = performanceNow();

	  if (layer.invalid) {
	    return;
	  } // save cycles


	  var lvl = layer.level;
	  var eles = layer.eles;
	  var layers = this.layersByLevel[lvl]; // log('invalidate layer', layer.id );

	  removeFromArray(layers, layer); // layer.eles = [];

	  layer.elesQueue = [];
	  layer.invalid = true;

	  if (layer.replacement) {
	    layer.replacement.invalid = true;
	  }

	  for (var i = 0; i < eles.length; i++) {
	    var caches = eles[i]._private.rscratch.imgLayerCaches;

	    if (caches) {
	      caches[lvl] = null;
	    }
	  }
	};

	LTCp.refineElementTextures = function (eles) {
	  var self = this; // log('refine', eles.length);

	  self.updateElementsInLayers(eles, function refineEachEle(layer, ele, req) {
	    var rLyr = layer.replacement;

	    if (!rLyr) {
	      rLyr = layer.replacement = self.makeLayer(layer.bb, layer.level);
	      rLyr.replaces = layer;
	      rLyr.eles = layer.eles; // log('make replacement layer %s for %s with level %s', rLyr.id, layer.id, rLyr.level);
	    }

	    if (!rLyr.reqs) {
	      for (var i = 0; i < rLyr.eles.length; i++) {
	        self.queueLayer(rLyr, rLyr.eles[i]);
	      } // log('queue replacement layer refinement', rLyr.id);

	    }
	  });
	};

	LTCp.enqueueElementRefinement = function (ele) {

	  this.eleTxrDeqs.merge(ele);
	  this.scheduleElementRefinement();
	};

	LTCp.queueLayer = function (layer, ele) {
	  var self = this;
	  var q = self.layersQueue;
	  var elesQ = layer.elesQueue;
	  var hasId = elesQ.hasId = elesQ.hasId || {}; // if a layer is going to be replaced, queuing is a waste of time

	  if (layer.replacement) {
	    return;
	  }

	  if (ele) {
	    if (hasId[ele.id()]) {
	      return;
	    }

	    elesQ.push(ele);
	    hasId[ele.id()] = true;
	  }

	  if (layer.reqs) {
	    layer.reqs++;
	    q.updateItem(layer);
	  } else {
	    layer.reqs = 1;
	    q.push(layer);
	  }
	};

	LTCp.dequeue = function (pxRatio) {
	  var self = this;
	  var q = self.layersQueue;
	  var deqd = [];
	  var eleDeqs = 0;

	  while (eleDeqs < maxDeqSize$1) {
	    if (q.size() === 0) {
	      break;
	    }

	    var layer = q.peek(); // if a layer has been or will be replaced, then don't waste time with it

	    if (layer.replacement) {
	      // log('layer %s in queue skipped b/c it already has a replacement', layer.id);
	      q.pop();
	      continue;
	    } // if this is a replacement layer that has been superceded, then forget it


	    if (layer.replaces && layer !== layer.replaces.replacement) {
	      // log('layer is no longer the most uptodate replacement; dequeued', layer.id)
	      q.pop();
	      continue;
	    }

	    if (layer.invalid) {
	      // log('replacement layer %s is invalid; dequeued', layer.id);
	      q.pop();
	      continue;
	    }

	    var ele = layer.elesQueue.shift();

	    if (ele) {
	      // log('dequeue layer %s', layer.id);
	      self.drawEleInLayer(layer, ele, layer.level, pxRatio);
	      eleDeqs++;
	    }

	    if (deqd.length === 0) {
	      // we need only one entry in deqd to queue redrawing etc
	      deqd.push(true);
	    } // if the layer has all its eles done, then remove from the queue


	    if (layer.elesQueue.length === 0) {
	      q.pop();
	      layer.reqs = 0; // log('dequeue of layer %s complete', layer.id);
	      // when a replacement layer is dequeued, it replaces the old layer in the level

	      if (layer.replaces) {
	        self.applyLayerReplacement(layer);
	      }

	      self.requestRedraw();
	    }
	  }

	  return deqd;
	};

	LTCp.applyLayerReplacement = function (layer) {
	  var self = this;
	  var layersInLevel = self.layersByLevel[layer.level];
	  var replaced = layer.replaces;
	  var index = layersInLevel.indexOf(replaced); // if the replaced layer is not in the active list for the level, then replacing
	  // refs would be a mistake (i.e. overwriting the true active layer)

	  if (index < 0 || replaced.invalid) {
	    // log('replacement layer would have no effect', layer.id);
	    return;
	  }

	  layersInLevel[index] = layer; // replace level ref
	  // replace refs in eles

	  for (var i = 0; i < layer.eles.length; i++) {
	    var _p = layer.eles[i]._private;
	    var cache = _p.imgLayerCaches = _p.imgLayerCaches || {};

	    if (cache) {
	      cache[layer.level] = layer;
	    }
	  } // log('apply replacement layer %s over %s', layer.id, replaced.id);


	  self.requestRedraw();
	};

	LTCp.requestRedraw = util(function () {
	  var r = this.renderer;
	  r.redrawHint('eles', true);
	  r.redrawHint('drag', true);
	  r.redraw();
	}, 100);
	LTCp.setupDequeueing = defs.setupDequeueing({
	  deqRedrawThreshold: deqRedrawThreshold$1,
	  deqCost: deqCost$1,
	  deqAvgCost: deqAvgCost$1,
	  deqNoDrawCost: deqNoDrawCost$1,
	  deqFastCost: deqFastCost$1,
	  deq: function deq(self, pxRatio) {
	    return self.dequeue(pxRatio);
	  },
	  onDeqd: noop,
	  shouldRedraw: trueify,
	  priority: function priority(self) {
	    return self.renderer.beforeRenderPriorities.lyrTxrDeq;
	  }
	});

	var CRp = {};
	var impl;

	function polygon(context, points) {
	  for (var i = 0; i < points.length; i++) {
	    var pt = points[i];
	    context.lineTo(pt.x, pt.y);
	  }
	}

	function triangleBackcurve(context, points, controlPoint) {
	  var firstPt;

	  for (var i = 0; i < points.length; i++) {
	    var pt = points[i];

	    if (i === 0) {
	      firstPt = pt;
	    }

	    context.lineTo(pt.x, pt.y);
	  }

	  context.quadraticCurveTo(controlPoint.x, controlPoint.y, firstPt.x, firstPt.y);
	}

	function triangleTee(context, trianglePoints, teePoints) {
	  if (context.beginPath) {
	    context.beginPath();
	  }

	  var triPts = trianglePoints;

	  for (var i = 0; i < triPts.length; i++) {
	    var pt = triPts[i];
	    context.lineTo(pt.x, pt.y);
	  }

	  var teePts = teePoints;
	  var firstTeePt = teePoints[0];
	  context.moveTo(firstTeePt.x, firstTeePt.y);

	  for (var i = 1; i < teePts.length; i++) {
	    var pt = teePts[i];
	    context.lineTo(pt.x, pt.y);
	  }

	  if (context.closePath) {
	    context.closePath();
	  }
	}

	function circle(context, rx, ry, r) {
	  context.arc(rx, ry, r, 0, Math.PI * 2, false);
	}

	CRp.arrowShapeImpl = function (name) {
	  return (impl || (impl = {
	    'polygon': polygon,
	    'triangle-backcurve': triangleBackcurve,
	    'triangle-tee': triangleTee,
	    'triangle-cross': triangleTee,
	    'circle': circle
	  }))[name];
	};

	var CRp$1 = {};

	CRp$1.drawElement = function (context, ele, shiftToOriginWithBb, showLabel, showOverlay, showOpacity) {
	  var r = this;

	  if (ele.isNode()) {
	    r.drawNode(context, ele, shiftToOriginWithBb, showLabel, showOverlay, showOpacity);
	  } else {
	    r.drawEdge(context, ele, shiftToOriginWithBb, showLabel, showOverlay, showOpacity);
	  }
	};

	CRp$1.drawElementOverlay = function (context, ele) {
	  var r = this;

	  if (ele.isNode()) {
	    r.drawNodeOverlay(context, ele);
	  } else {
	    r.drawEdgeOverlay(context, ele);
	  }
	};

	CRp$1.drawCachedElementPortion = function (context, ele, eleTxrCache, pxRatio, lvl, reason, getRotation, getOpacity) {
	  var r = this;
	  var bb = eleTxrCache.getBoundingBox(ele);

	  if (bb.w === 0 || bb.h === 0) {
	    return;
	  } // ignore zero size case


	  var eleCache = eleTxrCache.getElement(ele, bb, pxRatio, lvl, reason);

	  if (eleCache != null) {
	    var opacity = getOpacity(r, ele);

	    if (opacity === 0) {
	      return;
	    }

	    var theta = getRotation(r, ele);
	    var x1 = bb.x1,
	        y1 = bb.y1,
	        w = bb.w,
	        h = bb.h;
	    var x, y, sx, sy, smooth;

	    if (theta !== 0) {
	      var rotPt = eleTxrCache.getRotationPoint(ele);
	      sx = rotPt.x;
	      sy = rotPt.y;
	      context.translate(sx, sy);
	      context.rotate(theta);
	      smooth = r.getImgSmoothing(context);

	      if (!smooth) {
	        r.setImgSmoothing(context, true);
	      }

	      var off = eleTxrCache.getRotationOffset(ele);
	      x = off.x;
	      y = off.y;
	    } else {
	      x = x1;
	      y = y1;
	    }

	    var oldGlobalAlpha;

	    if (opacity !== 1) {
	      oldGlobalAlpha = context.globalAlpha;
	      context.globalAlpha = oldGlobalAlpha * opacity;
	    }

	    context.drawImage(eleCache.texture.canvas, eleCache.x, 0, eleCache.width, eleCache.height, x, y, w, h);

	    if (opacity !== 1) {
	      context.globalAlpha = oldGlobalAlpha;
	    }

	    if (theta !== 0) {
	      context.rotate(-theta);
	      context.translate(-sx, -sy);

	      if (!smooth) {
	        r.setImgSmoothing(context, false);
	      }
	    }
	  } else {
	    eleTxrCache.drawElement(context, ele); // direct draw fallback
	  }
	};

	var getZeroRotation = function getZeroRotation() {
	  return 0;
	};

	var getLabelRotation = function getLabelRotation(r, ele) {
	  return r.getTextAngle(ele, null);
	};

	var getSourceLabelRotation = function getSourceLabelRotation(r, ele) {
	  return r.getTextAngle(ele, 'source');
	};

	var getTargetLabelRotation = function getTargetLabelRotation(r, ele) {
	  return r.getTextAngle(ele, 'target');
	};

	var getOpacity = function getOpacity(r, ele) {
	  return ele.effectiveOpacity();
	};

	var getTextOpacity = function getTextOpacity(e, ele) {
	  return ele.pstyle('text-opacity').pfValue * ele.effectiveOpacity();
	};

	CRp$1.drawCachedElement = function (context, ele, pxRatio, extent, lvl, requestHighQuality) {
	  var r = this;
	  var _r$data = r.data,
	      eleTxrCache = _r$data.eleTxrCache,
	      lblTxrCache = _r$data.lblTxrCache,
	      slbTxrCache = _r$data.slbTxrCache,
	      tlbTxrCache = _r$data.tlbTxrCache;
	  var bb = ele.boundingBox();
	  var reason = requestHighQuality === true ? eleTxrCache.reasons.highQuality : null;

	  if (bb.w === 0 || bb.h === 0 || !ele.visible()) {
	    return;
	  }

	  if (!extent || boundingBoxesIntersect(bb, extent)) {
	    var isEdge = ele.isEdge();

	    var badLine = ele.element()._private.rscratch.badLine;

	    r.drawCachedElementPortion(context, ele, eleTxrCache, pxRatio, lvl, reason, getZeroRotation, getOpacity);

	    if (!isEdge || !badLine) {
	      r.drawCachedElementPortion(context, ele, lblTxrCache, pxRatio, lvl, reason, getLabelRotation, getTextOpacity);
	    }

	    if (isEdge && !badLine) {
	      r.drawCachedElementPortion(context, ele, slbTxrCache, pxRatio, lvl, reason, getSourceLabelRotation, getTextOpacity);
	      r.drawCachedElementPortion(context, ele, tlbTxrCache, pxRatio, lvl, reason, getTargetLabelRotation, getTextOpacity);
	    }

	    r.drawElementOverlay(context, ele);
	  }
	};

	CRp$1.drawElements = function (context, eles) {
	  var r = this;

	  for (var i = 0; i < eles.length; i++) {
	    var ele = eles[i];
	    r.drawElement(context, ele);
	  }
	};

	CRp$1.drawCachedElements = function (context, eles, pxRatio, extent) {
	  var r = this;

	  for (var i = 0; i < eles.length; i++) {
	    var ele = eles[i];
	    r.drawCachedElement(context, ele, pxRatio, extent);
	  }
	};

	CRp$1.drawCachedNodes = function (context, eles, pxRatio, extent) {
	  var r = this;

	  for (var i = 0; i < eles.length; i++) {
	    var ele = eles[i];

	    if (!ele.isNode()) {
	      continue;
	    }

	    r.drawCachedElement(context, ele, pxRatio, extent);
	  }
	};

	CRp$1.drawLayeredElements = function (context, eles, pxRatio, extent) {
	  var r = this;
	  var layers = r.data.lyrTxrCache.getLayers(eles, pxRatio);

	  if (layers) {
	    for (var i = 0; i < layers.length; i++) {
	      var layer = layers[i];
	      var bb = layer.bb;

	      if (bb.w === 0 || bb.h === 0) {
	        continue;
	      }

	      context.drawImage(layer.canvas, bb.x1, bb.y1, bb.w, bb.h);
	    }
	  } else {
	    // fall back on plain caching if no layers
	    r.drawCachedElements(context, eles, pxRatio, extent);
	  }
	};

	/* global Path2D */
	var CRp$2 = {};

	CRp$2.drawEdge = function (context, edge, shiftToOriginWithBb) {
	  var drawLabel = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
	  var shouldDrawOverlay = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;
	  var shouldDrawOpacity = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;
	  var r = this;
	  var rs = edge._private.rscratch;

	  if (shouldDrawOpacity && !edge.visible()) {
	    return;
	  } // if bezier ctrl pts can not be calculated, then die


	  if (rs.badLine || rs.allpts == null || isNaN(rs.allpts[0])) {
	    // isNaN in case edge is impossible and browser bugs (e.g. safari)
	    return;
	  }

	  var bb;

	  if (shiftToOriginWithBb) {
	    bb = shiftToOriginWithBb;
	    context.translate(-bb.x1, -bb.y1);
	  }

	  var opacity = shouldDrawOpacity ? edge.pstyle('opacity').value : 1;
	  var lineStyle = edge.pstyle('line-style').value;
	  var edgeWidth = edge.pstyle('width').pfValue;
	  var lineCap = edge.pstyle('line-cap').value;

	  var drawLine = function drawLine() {
	    var strokeOpacity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : opacity;
	    context.lineWidth = edgeWidth;
	    context.lineCap = lineCap;
	    r.eleStrokeStyle(context, edge, strokeOpacity);
	    r.drawEdgePath(edge, context, rs.allpts, lineStyle);
	    context.lineCap = 'butt'; // reset for other drawing functions
	  };

	  var drawOverlay = function drawOverlay() {
	    if (!shouldDrawOverlay) {
	      return;
	    }

	    r.drawEdgeOverlay(context, edge);
	  };

	  var drawArrows = function drawArrows() {
	    var arrowOpacity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : opacity;
	    r.drawArrowheads(context, edge, arrowOpacity);
	  };

	  var drawText = function drawText() {
	    r.drawElementText(context, edge, null, drawLabel);
	  };

	  context.lineJoin = 'round';
	  var ghost = edge.pstyle('ghost').value === 'yes';

	  if (ghost) {
	    var gx = edge.pstyle('ghost-offset-x').pfValue;
	    var gy = edge.pstyle('ghost-offset-y').pfValue;
	    var ghostOpacity = edge.pstyle('ghost-opacity').value;
	    var effectiveGhostOpacity = opacity * ghostOpacity;
	    context.translate(gx, gy);
	    drawLine(effectiveGhostOpacity);
	    drawArrows(effectiveGhostOpacity);
	    context.translate(-gx, -gy);
	  }

	  drawLine();
	  drawArrows();
	  drawOverlay();
	  drawText();

	  if (shiftToOriginWithBb) {
	    context.translate(bb.x1, bb.y1);
	  }
	};

	CRp$2.drawEdgeOverlay = function (context, edge) {
	  if (!edge.visible()) {
	    return;
	  }

	  var overlayOpacity = edge.pstyle('overlay-opacity').value;

	  if (overlayOpacity === 0) {
	    return;
	  }

	  var r = this;
	  var usePaths = r.usePaths();
	  var rs = edge._private.rscratch;
	  var overlayPadding = edge.pstyle('overlay-padding').pfValue;
	  var overlayWidth = 2 * overlayPadding;
	  var overlayColor = edge.pstyle('overlay-color').value;
	  context.lineWidth = overlayWidth;

	  if (rs.edgeType === 'self' && !usePaths) {
	    context.lineCap = 'butt';
	  } else {
	    context.lineCap = 'round';
	  }

	  r.colorStrokeStyle(context, overlayColor[0], overlayColor[1], overlayColor[2], overlayOpacity);
	  r.drawEdgePath(edge, context, rs.allpts, 'solid');
	};

	CRp$2.drawEdgePath = function (edge, context, pts, type) {
	  var rs = edge._private.rscratch;
	  var canvasCxt = context;
	  var path;
	  var pathCacheHit = false;
	  var usePaths = this.usePaths();
	  var lineDashPattern = edge.pstyle('line-dash-pattern').pfValue;
	  var lineDashOffset = edge.pstyle('line-dash-offset').pfValue;

	  if (usePaths) {
	    var pathCacheKey = pts.join('$');
	    var keyMatches = rs.pathCacheKey && rs.pathCacheKey === pathCacheKey;

	    if (keyMatches) {
	      path = context = rs.pathCache;
	      pathCacheHit = true;
	    } else {
	      path = context = new Path2D();
	      rs.pathCacheKey = pathCacheKey;
	      rs.pathCache = path;
	    }
	  }

	  if (canvasCxt.setLineDash) {
	    // for very outofdate browsers
	    switch (type) {
	      case 'dotted':
	        canvasCxt.setLineDash([1, 1]);
	        break;

	      case 'dashed':
	        canvasCxt.setLineDash(lineDashPattern);
	        canvasCxt.lineDashOffset = lineDashOffset;
	        break;

	      case 'solid':
	        canvasCxt.setLineDash([]);
	        break;
	    }
	  }

	  if (!pathCacheHit && !rs.badLine) {
	    if (context.beginPath) {
	      context.beginPath();
	    }

	    context.moveTo(pts[0], pts[1]);

	    switch (rs.edgeType) {
	      case 'bezier':
	      case 'self':
	      case 'compound':
	      case 'multibezier':
	        for (var i = 2; i + 3 < pts.length; i += 4) {
	          context.quadraticCurveTo(pts[i], pts[i + 1], pts[i + 2], pts[i + 3]);
	        }

	        break;

	      case 'straight':
	      case 'segments':
	      case 'haystack':
	        for (var _i = 2; _i + 1 < pts.length; _i += 2) {
	          context.lineTo(pts[_i], pts[_i + 1]);
	        }

	        break;
	    }
	  }

	  context = canvasCxt;

	  if (usePaths) {
	    context.stroke(path);
	  } else {
	    context.stroke();
	  } // reset any line dashes


	  if (context.setLineDash) {
	    // for very outofdate browsers
	    context.setLineDash([]);
	  }
	};

	CRp$2.drawArrowheads = function (context, edge, opacity) {
	  var rs = edge._private.rscratch;
	  var isHaystack = rs.edgeType === 'haystack';

	  if (!isHaystack) {
	    this.drawArrowhead(context, edge, 'source', rs.arrowStartX, rs.arrowStartY, rs.srcArrowAngle, opacity);
	  }

	  this.drawArrowhead(context, edge, 'mid-target', rs.midX, rs.midY, rs.midtgtArrowAngle, opacity);
	  this.drawArrowhead(context, edge, 'mid-source', rs.midX, rs.midY, rs.midsrcArrowAngle, opacity);

	  if (!isHaystack) {
	    this.drawArrowhead(context, edge, 'target', rs.arrowEndX, rs.arrowEndY, rs.tgtArrowAngle, opacity);
	  }
	};

	CRp$2.drawArrowhead = function (context, edge, prefix, x, y, angle, opacity) {
	  if (isNaN(x) || x == null || isNaN(y) || y == null || isNaN(angle) || angle == null) {
	    return;
	  }

	  var self = this;
	  var arrowShape = edge.pstyle(prefix + '-arrow-shape').value;

	  if (arrowShape === 'none') {
	    return;
	  }

	  var arrowClearFill = edge.pstyle(prefix + '-arrow-fill').value === 'hollow' ? 'both' : 'filled';
	  var arrowFill = edge.pstyle(prefix + '-arrow-fill').value;
	  var edgeWidth = edge.pstyle('width').pfValue;
	  var edgeOpacity = edge.pstyle('opacity').value;

	  if (opacity === undefined) {
	    opacity = edgeOpacity;
	  }

	  var gco = context.globalCompositeOperation;

	  if (opacity !== 1 || arrowFill === 'hollow') {
	    // then extra clear is needed
	    context.globalCompositeOperation = 'destination-out';
	    self.colorFillStyle(context, 255, 255, 255, 1);
	    self.colorStrokeStyle(context, 255, 255, 255, 1);
	    self.drawArrowShape(edge, context, arrowClearFill, edgeWidth, arrowShape, x, y, angle);
	    context.globalCompositeOperation = gco;
	  } // otherwise, the opaque arrow clears it for free :)


	  var color = edge.pstyle(prefix + '-arrow-color').value;
	  self.colorFillStyle(context, color[0], color[1], color[2], opacity);
	  self.colorStrokeStyle(context, color[0], color[1], color[2], opacity);
	  self.drawArrowShape(edge, context, arrowFill, edgeWidth, arrowShape, x, y, angle);
	};

	CRp$2.drawArrowShape = function (edge, context, fill, edgeWidth, shape, x, y, angle) {
	  var r = this;
	  var usePaths = this.usePaths() && shape !== 'triangle-cross';
	  var pathCacheHit = false;
	  var path;
	  var canvasContext = context;
	  var translation = {
	    x: x,
	    y: y
	  };
	  var scale = edge.pstyle('arrow-scale').value;
	  var size = this.getArrowWidth(edgeWidth, scale);
	  var shapeImpl = r.arrowShapes[shape];

	  if (usePaths) {
	    var cache = r.arrowPathCache = r.arrowPathCache || [];
	    var key = hashString(shape);
	    var cachedPath = cache[key];

	    if (cachedPath != null) {
	      path = context = cachedPath;
	      pathCacheHit = true;
	    } else {
	      path = context = new Path2D();
	      cache[key] = path;
	    }
	  }

	  if (!pathCacheHit) {
	    if (context.beginPath) {
	      context.beginPath();
	    }

	    if (usePaths) {
	      // store in the path cache with values easily manipulated later
	      shapeImpl.draw(context, 1, 0, {
	        x: 0,
	        y: 0
	      }, 1);
	    } else {
	      shapeImpl.draw(context, size, angle, translation, edgeWidth);
	    }

	    if (context.closePath) {
	      context.closePath();
	    }
	  }

	  context = canvasContext;

	  if (usePaths) {
	    // set transform to arrow position/orientation
	    context.translate(x, y);
	    context.rotate(angle);
	    context.scale(size, size);
	  }

	  if (fill === 'filled' || fill === 'both') {
	    if (usePaths) {
	      context.fill(path);
	    } else {
	      context.fill();
	    }
	  }

	  if (fill === 'hollow' || fill === 'both') {
	    context.lineWidth = (shapeImpl.matchEdgeWidth ? edgeWidth : 1) / (usePaths ? size : 1);
	    context.lineJoin = 'miter';

	    if (usePaths) {
	      context.stroke(path);
	    } else {
	      context.stroke();
	    }
	  }

	  if (usePaths) {
	    // reset transform by applying inverse
	    context.scale(1 / size, 1 / size);
	    context.rotate(-angle);
	    context.translate(-x, -y);
	  }
	};

	var CRp$3 = {};

	CRp$3.safeDrawImage = function (context, img, ix, iy, iw, ih, x, y, w, h) {
	  // detect problematic cases for old browsers with bad images (cheaper than try-catch)
	  if (iw <= 0 || ih <= 0 || w <= 0 || h <= 0) {
	    return;
	  }

	  context.drawImage(img, ix, iy, iw, ih, x, y, w, h);
	};

	CRp$3.drawInscribedImage = function (context, img, node, index, nodeOpacity) {
	  var r = this;
	  var pos = node.position();
	  var nodeX = pos.x;
	  var nodeY = pos.y;
	  var styleObj = node.cy().style();
	  var getIndexedStyle = styleObj.getIndexedStyle.bind(styleObj);
	  var fit = getIndexedStyle(node, 'background-fit', 'value', index);
	  var repeat = getIndexedStyle(node, 'background-repeat', 'value', index);
	  var nodeW = node.width();
	  var nodeH = node.height();
	  var paddingX2 = node.padding() * 2;
	  var nodeTW = nodeW + (getIndexedStyle(node, 'background-width-relative-to', 'value', index) === 'inner' ? 0 : paddingX2);
	  var nodeTH = nodeH + (getIndexedStyle(node, 'background-height-relative-to', 'value', index) === 'inner' ? 0 : paddingX2);
	  var rs = node._private.rscratch;
	  var clip = getIndexedStyle(node, 'background-clip', 'value', index);
	  var shouldClip = clip === 'node';
	  var imgOpacity = getIndexedStyle(node, 'background-image-opacity', 'value', index) * nodeOpacity;
	  var imgW = img.width || img.cachedW;
	  var imgH = img.height || img.cachedH; // workaround for broken browsers like ie

	  if (null == imgW || null == imgH) {
	    document.body.appendChild(img); // eslint-disable-line no-undef

	    imgW = img.cachedW = img.width || img.offsetWidth;
	    imgH = img.cachedH = img.height || img.offsetHeight;
	    document.body.removeChild(img); // eslint-disable-line no-undef
	  }

	  var w = imgW;
	  var h = imgH;

	  if (getIndexedStyle(node, 'background-width', 'value', index) !== 'auto') {
	    if (getIndexedStyle(node, 'background-width', 'units', index) === '%') {
	      w = getIndexedStyle(node, 'background-width', 'pfValue', index) * nodeTW;
	    } else {
	      w = getIndexedStyle(node, 'background-width', 'pfValue', index);
	    }
	  }

	  if (getIndexedStyle(node, 'background-height', 'value', index) !== 'auto') {
	    if (getIndexedStyle(node, 'background-height', 'units', index) === '%') {
	      h = getIndexedStyle(node, 'background-height', 'pfValue', index) * nodeTH;
	    } else {
	      h = getIndexedStyle(node, 'background-height', 'pfValue', index);
	    }
	  }

	  if (w === 0 || h === 0) {
	    return; // no point in drawing empty image (and chrome is broken in this case)
	  }

	  if (fit === 'contain') {
	    var scale = Math.min(nodeTW / w, nodeTH / h);
	    w *= scale;
	    h *= scale;
	  } else if (fit === 'cover') {
	    var scale = Math.max(nodeTW / w, nodeTH / h);
	    w *= scale;
	    h *= scale;
	  }

	  var x = nodeX - nodeTW / 2; // left

	  var posXUnits = getIndexedStyle(node, 'background-position-x', 'units', index);
	  var posXPfVal = getIndexedStyle(node, 'background-position-x', 'pfValue', index);

	  if (posXUnits === '%') {
	    x += (nodeTW - w) * posXPfVal;
	  } else {
	    x += posXPfVal;
	  }

	  var offXUnits = getIndexedStyle(node, 'background-offset-x', 'units', index);
	  var offXPfVal = getIndexedStyle(node, 'background-offset-x', 'pfValue', index);

	  if (offXUnits === '%') {
	    x += (nodeTW - w) * offXPfVal;
	  } else {
	    x += offXPfVal;
	  }

	  var y = nodeY - nodeTH / 2; // top

	  var posYUnits = getIndexedStyle(node, 'background-position-y', 'units', index);
	  var posYPfVal = getIndexedStyle(node, 'background-position-y', 'pfValue', index);

	  if (posYUnits === '%') {
	    y += (nodeTH - h) * posYPfVal;
	  } else {
	    y += posYPfVal;
	  }

	  var offYUnits = getIndexedStyle(node, 'background-offset-y', 'units', index);
	  var offYPfVal = getIndexedStyle(node, 'background-offset-y', 'pfValue', index);

	  if (offYUnits === '%') {
	    y += (nodeTH - h) * offYPfVal;
	  } else {
	    y += offYPfVal;
	  }

	  if (rs.pathCache) {
	    x -= nodeX;
	    y -= nodeY;
	    nodeX = 0;
	    nodeY = 0;
	  }

	  var gAlpha = context.globalAlpha;
	  context.globalAlpha = imgOpacity;

	  if (repeat === 'no-repeat') {
	    if (shouldClip) {
	      context.save();

	      if (rs.pathCache) {
	        context.clip(rs.pathCache);
	      } else {
	        r.nodeShapes[r.getNodeShape(node)].draw(context, nodeX, nodeY, nodeTW, nodeTH);
	        context.clip();
	      }
	    }

	    r.safeDrawImage(context, img, 0, 0, imgW, imgH, x, y, w, h);

	    if (shouldClip) {
	      context.restore();
	    }
	  } else {
	    var pattern = context.createPattern(img, repeat);
	    context.fillStyle = pattern;
	    r.nodeShapes[r.getNodeShape(node)].draw(context, nodeX, nodeY, nodeTW, nodeTH);
	    context.translate(x, y);
	    context.fill();
	    context.translate(-x, -y);
	  }

	  context.globalAlpha = gAlpha;
	};

	var CRp$4 = {};

	CRp$4.eleTextBiggerThanMin = function (ele, scale) {
	  if (!scale) {
	    var zoom = ele.cy().zoom();
	    var pxRatio = this.getPixelRatio();
	    var lvl = Math.ceil(log2(zoom * pxRatio)); // the effective texture level

	    scale = Math.pow(2, lvl);
	  }

	  var computedSize = ele.pstyle('font-size').pfValue * scale;
	  var minSize = ele.pstyle('min-zoomed-font-size').pfValue;

	  if (computedSize < minSize) {
	    return false;
	  }

	  return true;
	};

	CRp$4.drawElementText = function (context, ele, shiftToOriginWithBb, force, prefix) {
	  var useEleOpacity = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;
	  var r = this;

	  if (force == null) {
	    if (useEleOpacity && !r.eleTextBiggerThanMin(ele)) {
	      return;
	    }
	  } else if (force === false) {
	    return;
	  }

	  if (ele.isNode()) {
	    var label = ele.pstyle('label');

	    if (!label || !label.value) {
	      return;
	    }

	    var justification = r.getLabelJustification(ele);
	    context.textAlign = justification;
	    context.textBaseline = 'bottom';
	  } else {
	    var badLine = ele.element()._private.rscratch.badLine;

	    var _label = ele.pstyle('label');

	    var srcLabel = ele.pstyle('source-label');
	    var tgtLabel = ele.pstyle('target-label');

	    if (badLine || (!_label || !_label.value) && (!srcLabel || !srcLabel.value) && (!tgtLabel || !tgtLabel.value)) {
	      return;
	    }

	    context.textAlign = 'center';
	    context.textBaseline = 'bottom';
	  }

	  var applyRotation = !shiftToOriginWithBb;
	  var bb;

	  if (shiftToOriginWithBb) {
	    bb = shiftToOriginWithBb;
	    context.translate(-bb.x1, -bb.y1);
	  }

	  if (prefix == null) {
	    r.drawText(context, ele, null, applyRotation, useEleOpacity);

	    if (ele.isEdge()) {
	      r.drawText(context, ele, 'source', applyRotation, useEleOpacity);
	      r.drawText(context, ele, 'target', applyRotation, useEleOpacity);
	    }
	  } else {
	    r.drawText(context, ele, prefix, applyRotation, useEleOpacity);
	  }

	  if (shiftToOriginWithBb) {
	    context.translate(bb.x1, bb.y1);
	  }
	};

	CRp$4.getFontCache = function (context) {
	  var cache;
	  this.fontCaches = this.fontCaches || [];

	  for (var i = 0; i < this.fontCaches.length; i++) {
	    cache = this.fontCaches[i];

	    if (cache.context === context) {
	      return cache;
	    }
	  }

	  cache = {
	    context: context
	  };
	  this.fontCaches.push(cache);
	  return cache;
	}; // set up canvas context with font
	// returns transformed text string


	CRp$4.setupTextStyle = function (context, ele) {
	  var useEleOpacity = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
	  // Font style
	  var labelStyle = ele.pstyle('font-style').strValue;
	  var labelSize = ele.pstyle('font-size').pfValue + 'px';
	  var labelFamily = ele.pstyle('font-family').strValue;
	  var labelWeight = ele.pstyle('font-weight').strValue;
	  var opacity = useEleOpacity ? ele.effectiveOpacity() * ele.pstyle('text-opacity').value : 1;
	  var outlineOpacity = ele.pstyle('text-outline-opacity').value * opacity;
	  var color = ele.pstyle('color').value;
	  var outlineColor = ele.pstyle('text-outline-color').value;
	  context.font = labelStyle + ' ' + labelWeight + ' ' + labelSize + ' ' + labelFamily;
	  context.lineJoin = 'round'; // so text outlines aren't jagged

	  this.colorFillStyle(context, color[0], color[1], color[2], opacity);
	  this.colorStrokeStyle(context, outlineColor[0], outlineColor[1], outlineColor[2], outlineOpacity);
	}; // TODO ensure re-used


	function roundRect(ctx, x, y, width, height) {
	  var radius = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 5;
	  ctx.beginPath();
	  ctx.moveTo(x + radius, y);
	  ctx.lineTo(x + width - radius, y);
	  ctx.quadraticCurveTo(x + width, y, x + width, y + radius);
	  ctx.lineTo(x + width, y + height - radius);
	  ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);
	  ctx.lineTo(x + radius, y + height);
	  ctx.quadraticCurveTo(x, y + height, x, y + height - radius);
	  ctx.lineTo(x, y + radius);
	  ctx.quadraticCurveTo(x, y, x + radius, y);
	  ctx.closePath();
	  ctx.fill();
	}

	CRp$4.getTextAngle = function (ele, prefix) {
	  var theta;
	  var _p = ele._private;
	  var rscratch = _p.rscratch;
	  var pdash = prefix ? prefix + '-' : '';
	  var rotation = ele.pstyle(pdash + 'text-rotation');
	  var textAngle = getPrefixedProperty(rscratch, 'labelAngle', prefix);

	  if (rotation.strValue === 'autorotate') {
	    theta = ele.isEdge() ? textAngle : 0;
	  } else if (rotation.strValue === 'none') {
	    theta = 0;
	  } else {
	    theta = rotation.pfValue;
	  }

	  return theta;
	};

	CRp$4.drawText = function (context, ele, prefix) {
	  var applyRotation = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
	  var useEleOpacity = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;
	  var _p = ele._private;
	  var rscratch = _p.rscratch;
	  var parentOpacity = useEleOpacity ? ele.effectiveOpacity() : 1;

	  if (useEleOpacity && (parentOpacity === 0 || ele.pstyle('text-opacity').value === 0)) {
	    return;
	  } // use 'main' as an alias for the main label (i.e. null prefix)


	  if (prefix === 'main') {
	    prefix = null;
	  }

	  var textX = getPrefixedProperty(rscratch, 'labelX', prefix);
	  var textY = getPrefixedProperty(rscratch, 'labelY', prefix);
	  var orgTextX, orgTextY; // used for rotation

	  var text = this.getLabelText(ele, prefix);

	  if (text != null && text !== '' && !isNaN(textX) && !isNaN(textY)) {
	    this.setupTextStyle(context, ele, useEleOpacity);
	    var pdash = prefix ? prefix + '-' : '';
	    var textW = getPrefixedProperty(rscratch, 'labelWidth', prefix);
	    var textH = getPrefixedProperty(rscratch, 'labelHeight', prefix);
	    var marginX = ele.pstyle(pdash + 'text-margin-x').pfValue;
	    var marginY = ele.pstyle(pdash + 'text-margin-y').pfValue;
	    var isEdge = ele.isEdge();
	    var halign = ele.pstyle('text-halign').value;
	    var valign = ele.pstyle('text-valign').value;

	    if (isEdge) {
	      halign = 'center';
	      valign = 'center';
	    }

	    textX += marginX;
	    textY += marginY;
	    var theta;

	    if (!applyRotation) {
	      theta = 0;
	    } else {
	      theta = this.getTextAngle(ele, prefix);
	    }

	    if (theta !== 0) {
	      orgTextX = textX;
	      orgTextY = textY;
	      context.translate(orgTextX, orgTextY);
	      context.rotate(theta);
	      textX = 0;
	      textY = 0;
	    }

	    switch (valign) {
	      case 'top':
	        break;

	      case 'center':
	        textY += textH / 2;
	        break;

	      case 'bottom':
	        textY += textH;
	        break;
	    }

	    var backgroundOpacity = ele.pstyle('text-background-opacity').value;
	    var borderOpacity = ele.pstyle('text-border-opacity').value;
	    var textBorderWidth = ele.pstyle('text-border-width').pfValue;
	    var backgroundPadding = ele.pstyle('text-background-padding').pfValue;

	    if (backgroundOpacity > 0 || textBorderWidth > 0 && borderOpacity > 0) {
	      var bgX = textX - backgroundPadding;

	      switch (halign) {
	        case 'left':
	          bgX -= textW;
	          break;

	        case 'center':
	          bgX -= textW / 2;
	          break;
	      }

	      var bgY = textY - textH - backgroundPadding;
	      var bgW = textW + 2 * backgroundPadding;
	      var bgH = textH + 2 * backgroundPadding;

	      if (backgroundOpacity > 0) {
	        var textFill = context.fillStyle;
	        var textBackgroundColor = ele.pstyle('text-background-color').value;
	        context.fillStyle = 'rgba(' + textBackgroundColor[0] + ',' + textBackgroundColor[1] + ',' + textBackgroundColor[2] + ',' + backgroundOpacity * parentOpacity + ')';
	        var styleShape = ele.pstyle('text-background-shape').strValue;

	        if (styleShape.indexOf('round') === 0) {
	          roundRect(context, bgX, bgY, bgW, bgH, 2);
	        } else {
	          context.fillRect(bgX, bgY, bgW, bgH);
	        }

	        context.fillStyle = textFill;
	      }

	      if (textBorderWidth > 0 && borderOpacity > 0) {
	        var textStroke = context.strokeStyle;
	        var textLineWidth = context.lineWidth;
	        var textBorderColor = ele.pstyle('text-border-color').value;
	        var textBorderStyle = ele.pstyle('text-border-style').value;
	        context.strokeStyle = 'rgba(' + textBorderColor[0] + ',' + textBorderColor[1] + ',' + textBorderColor[2] + ',' + borderOpacity * parentOpacity + ')';
	        context.lineWidth = textBorderWidth;

	        if (context.setLineDash) {
	          // for very outofdate browsers
	          switch (textBorderStyle) {
	            case 'dotted':
	              context.setLineDash([1, 1]);
	              break;

	            case 'dashed':
	              context.setLineDash([4, 2]);
	              break;

	            case 'double':
	              context.lineWidth = textBorderWidth / 4; // 50% reserved for white between the two borders

	              context.setLineDash([]);
	              break;

	            case 'solid':
	              context.setLineDash([]);
	              break;
	          }
	        }

	        context.strokeRect(bgX, bgY, bgW, bgH);

	        if (textBorderStyle === 'double') {
	          var whiteWidth = textBorderWidth / 2;
	          context.strokeRect(bgX + whiteWidth, bgY + whiteWidth, bgW - whiteWidth * 2, bgH - whiteWidth * 2);
	        }

	        if (context.setLineDash) {
	          // for very outofdate browsers
	          context.setLineDash([]);
	        }

	        context.lineWidth = textLineWidth;
	        context.strokeStyle = textStroke;
	      }
	    }

	    var lineWidth = 2 * ele.pstyle('text-outline-width').pfValue; // *2 b/c the stroke is drawn centred on the middle

	    if (lineWidth > 0) {
	      context.lineWidth = lineWidth;
	    }

	    if (ele.pstyle('text-wrap').value === 'wrap') {
	      var lines = getPrefixedProperty(rscratch, 'labelWrapCachedLines', prefix);
	      var lineHeight = getPrefixedProperty(rscratch, 'labelLineHeight', prefix);
	      var halfTextW = textW / 2;
	      var justification = this.getLabelJustification(ele);

	      if (justification === 'auto') ; else if (halign === 'left') {
	        // auto justification : right
	        if (justification === 'left') {
	          textX += -textW;
	        } else if (justification === 'center') {
	          textX += -halfTextW;
	        } // else same as auto

	      } else if (halign === 'center') {
	        // auto justfication : center
	        if (justification === 'left') {
	          textX += -halfTextW;
	        } else if (justification === 'right') {
	          textX += halfTextW;
	        } // else same as auto

	      } else if (halign === 'right') {
	        // auto justification : left
	        if (justification === 'center') {
	          textX += halfTextW;
	        } else if (justification === 'right') {
	          textX += textW;
	        } // else same as auto

	      }

	      switch (valign) {
	        case 'top':
	          textY -= (lines.length - 1) * lineHeight;
	          break;

	        case 'center':
	        case 'bottom':
	          textY -= (lines.length - 1) * lineHeight;
	          break;
	      }

	      for (var l = 0; l < lines.length; l++) {
	        if (lineWidth > 0) {
	          context.strokeText(lines[l], textX, textY);
	        }

	        context.fillText(lines[l], textX, textY);
	        textY += lineHeight;
	      }
	    } else {
	      if (lineWidth > 0) {
	        context.strokeText(text, textX, textY);
	      }

	      context.fillText(text, textX, textY);
	    }

	    if (theta !== 0) {
	      context.rotate(-theta);
	      context.translate(-orgTextX, -orgTextY);
	    }
	  }
	};

	/* global Path2D */
	var CRp$5 = {};

	CRp$5.drawNode = function (context, node, shiftToOriginWithBb) {
	  var drawLabel = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
	  var shouldDrawOverlay = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;
	  var shouldDrawOpacity = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;
	  var r = this;
	  var nodeWidth, nodeHeight;
	  var _p = node._private;
	  var rs = _p.rscratch;
	  var pos = node.position();

	  if (!number(pos.x) || !number(pos.y)) {
	    return; // can't draw node with undefined position
	  }

	  if (shouldDrawOpacity && !node.visible()) {
	    return;
	  }

	  var eleOpacity = shouldDrawOpacity ? node.effectiveOpacity() : 1;
	  var usePaths = r.usePaths();
	  var path;
	  var pathCacheHit = false;
	  var padding = node.padding();
	  nodeWidth = node.width() + 2 * padding;
	  nodeHeight = node.height() + 2 * padding; //
	  // setup shift

	  var bb;

	  if (shiftToOriginWithBb) {
	    bb = shiftToOriginWithBb;
	    context.translate(-bb.x1, -bb.y1);
	  } //
	  // load bg image


	  var bgImgProp = node.pstyle('background-image');
	  var urls = bgImgProp.value;
	  var urlDefined = new Array(urls.length);
	  var image = new Array(urls.length);
	  var numImages = 0;

	  for (var i = 0; i < urls.length; i++) {
	    var url = urls[i];
	    var defd = urlDefined[i] = url != null && url !== 'none';

	    if (defd) {
	      var bgImgCrossOrigin = node.cy().style().getIndexedStyle(node, 'background-image-crossorigin', 'value', i);
	      numImages++; // get image, and if not loaded then ask to redraw when later loaded

	      image[i] = r.getCachedImage(url, bgImgCrossOrigin, function () {
	        _p.backgroundTimestamp = Date.now();
	        node.emitAndNotify('background');
	      });
	    }
	  } //
	  // setup styles


	  var darkness = node.pstyle('background-blacken').value;
	  var borderWidth = node.pstyle('border-width').pfValue;
	  var bgOpacity = node.pstyle('background-opacity').value * eleOpacity;
	  var borderColor = node.pstyle('border-color').value;
	  var borderStyle = node.pstyle('border-style').value;
	  var borderOpacity = node.pstyle('border-opacity').value * eleOpacity;
	  context.lineJoin = 'miter'; // so borders are square with the node shape

	  var setupShapeColor = function setupShapeColor() {
	    var bgOpy = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : bgOpacity;
	    r.eleFillStyle(context, node, bgOpy);
	  };

	  var setupBorderColor = function setupBorderColor() {
	    var bdrOpy = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : borderOpacity;
	    r.colorStrokeStyle(context, borderColor[0], borderColor[1], borderColor[2], bdrOpy);
	  }; //
	  // setup shape


	  var styleShape = node.pstyle('shape').strValue;
	  var shapePts = node.pstyle('shape-polygon-points').pfValue;

	  if (usePaths) {
	    context.translate(pos.x, pos.y);
	    var pathCache = r.nodePathCache = r.nodePathCache || [];
	    var key = hashStrings(styleShape === 'polygon' ? styleShape + ',' + shapePts.join(',') : styleShape, '' + nodeHeight, '' + nodeWidth);
	    var cachedPath = pathCache[key];

	    if (cachedPath != null) {
	      path = cachedPath;
	      pathCacheHit = true;
	      rs.pathCache = path;
	    } else {
	      path = new Path2D();
	      pathCache[key] = rs.pathCache = path;
	    }
	  }

	  var drawShape = function drawShape() {
	    if (!pathCacheHit) {
	      var npos = pos;

	      if (usePaths) {
	        npos = {
	          x: 0,
	          y: 0
	        };
	      }

	      r.nodeShapes[r.getNodeShape(node)].draw(path || context, npos.x, npos.y, nodeWidth, nodeHeight);
	    }

	    if (usePaths) {
	      context.fill(path);
	    } else {
	      context.fill();
	    }
	  };

	  var drawImages = function drawImages() {
	    var nodeOpacity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : eleOpacity;
	    var prevBging = _p.backgrounding;
	    var totalCompleted = 0;

	    for (var _i = 0; _i < image.length; _i++) {
	      if (urlDefined[_i] && image[_i].complete && !image[_i].error) {
	        totalCompleted++;
	        r.drawInscribedImage(context, image[_i], node, _i, nodeOpacity);
	      }
	    }

	    _p.backgrounding = !(totalCompleted === numImages);

	    if (prevBging !== _p.backgrounding) {
	      // update style b/c :backgrounding state changed
	      node.updateStyle(false);
	    }
	  };

	  var drawPie = function drawPie() {
	    var redrawShape = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
	    var pieOpacity = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : eleOpacity;

	    if (r.hasPie(node)) {
	      r.drawPie(context, node, pieOpacity); // redraw/restore path if steps after pie need it

	      if (redrawShape) {
	        if (!usePaths) {
	          r.nodeShapes[r.getNodeShape(node)].draw(context, pos.x, pos.y, nodeWidth, nodeHeight);
	        }
	      }
	    }
	  };

	  var darken = function darken() {
	    var darkenOpacity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : eleOpacity;
	    var opacity = (darkness > 0 ? darkness : -darkness) * darkenOpacity;
	    var c = darkness > 0 ? 0 : 255;

	    if (darkness !== 0) {
	      r.colorFillStyle(context, c, c, c, opacity);

	      if (usePaths) {
	        context.fill(path);
	      } else {
	        context.fill();
	      }
	    }
	  };

	  var drawBorder = function drawBorder() {
	    if (borderWidth > 0) {
	      context.lineWidth = borderWidth;
	      context.lineCap = 'butt';

	      if (context.setLineDash) {
	        // for very outofdate browsers
	        switch (borderStyle) {
	          case 'dotted':
	            context.setLineDash([1, 1]);
	            break;

	          case 'dashed':
	            context.setLineDash([4, 2]);
	            break;

	          case 'solid':
	          case 'double':
	            context.setLineDash([]);
	            break;
	        }
	      }

	      if (usePaths) {
	        context.stroke(path);
	      } else {
	        context.stroke();
	      }

	      if (borderStyle === 'double') {
	        context.lineWidth = borderWidth / 3;
	        var gco = context.globalCompositeOperation;
	        context.globalCompositeOperation = 'destination-out';

	        if (usePaths) {
	          context.stroke(path);
	        } else {
	          context.stroke();
	        }

	        context.globalCompositeOperation = gco;
	      } // reset in case we changed the border style


	      if (context.setLineDash) {
	        // for very outofdate browsers
	        context.setLineDash([]);
	      }
	    }
	  };

	  var drawOverlay = function drawOverlay() {
	    if (shouldDrawOverlay) {
	      r.drawNodeOverlay(context, node, pos, nodeWidth, nodeHeight);
	    }
	  };

	  var drawText = function drawText() {
	    r.drawElementText(context, node, null, drawLabel);
	  };

	  var ghost = node.pstyle('ghost').value === 'yes';

	  if (ghost) {
	    var gx = node.pstyle('ghost-offset-x').pfValue;
	    var gy = node.pstyle('ghost-offset-y').pfValue;
	    var ghostOpacity = node.pstyle('ghost-opacity').value;
	    var effGhostOpacity = ghostOpacity * eleOpacity;
	    context.translate(gx, gy);
	    setupShapeColor(ghostOpacity * bgOpacity);
	    drawShape();
	    drawImages(effGhostOpacity);
	    drawPie(darkness !== 0 || borderWidth !== 0);
	    darken(effGhostOpacity);
	    setupBorderColor(ghostOpacity * borderOpacity);
	    drawBorder();
	    context.translate(-gx, -gy);
	  }

	  setupShapeColor();
	  drawShape();
	  drawImages();
	  drawPie(darkness !== 0 || borderWidth !== 0);
	  darken();
	  setupBorderColor();
	  drawBorder();

	  if (usePaths) {
	    context.translate(-pos.x, -pos.y);
	  }

	  drawText();
	  drawOverlay(); //
	  // clean up shift

	  if (shiftToOriginWithBb) {
	    context.translate(bb.x1, bb.y1);
	  }
	};

	CRp$5.drawNodeOverlay = function (context, node, pos, nodeWidth, nodeHeight) {
	  var r = this;

	  if (!node.visible()) {
	    return;
	  }

	  var overlayPadding = node.pstyle('overlay-padding').pfValue;
	  var overlayOpacity = node.pstyle('overlay-opacity').value;
	  var overlayColor = node.pstyle('overlay-color').value;

	  if (overlayOpacity > 0) {
	    pos = pos || node.position();

	    if (nodeWidth == null || nodeHeight == null) {
	      var padding = node.padding();
	      nodeWidth = node.width() + 2 * padding;
	      nodeHeight = node.height() + 2 * padding;
	    }

	    r.colorFillStyle(context, overlayColor[0], overlayColor[1], overlayColor[2], overlayOpacity);
	    r.nodeShapes['roundrectangle'].draw(context, pos.x, pos.y, nodeWidth + overlayPadding * 2, nodeHeight + overlayPadding * 2);
	    context.fill();
	  }
	}; // does the node have at least one pie piece?


	CRp$5.hasPie = function (node) {
	  node = node[0]; // ensure ele ref

	  return node._private.hasPie;
	};

	CRp$5.drawPie = function (context, node, nodeOpacity, pos) {
	  node = node[0]; // ensure ele ref

	  pos = pos || node.position();
	  var cyStyle = node.cy().style();
	  var pieSize = node.pstyle('pie-size');
	  var x = pos.x;
	  var y = pos.y;
	  var nodeW = node.width();
	  var nodeH = node.height();
	  var radius = Math.min(nodeW, nodeH) / 2; // must fit in node

	  var lastPercent = 0; // what % to continue drawing pie slices from on [0, 1]

	  var usePaths = this.usePaths();

	  if (usePaths) {
	    x = 0;
	    y = 0;
	  }

	  if (pieSize.units === '%') {
	    radius = radius * pieSize.pfValue;
	  } else if (pieSize.pfValue !== undefined) {
	    radius = pieSize.pfValue / 2;
	  }

	  for (var i = 1; i <= cyStyle.pieBackgroundN; i++) {
	    // 1..N
	    var size = node.pstyle('pie-' + i + '-background-size').value;
	    var color = node.pstyle('pie-' + i + '-background-color').value;
	    var opacity = node.pstyle('pie-' + i + '-background-opacity').value * nodeOpacity;
	    var percent = size / 100; // map integer range [0, 100] to [0, 1]
	    // percent can't push beyond 1

	    if (percent + lastPercent > 1) {
	      percent = 1 - lastPercent;
	    }

	    var angleStart = 1.5 * Math.PI + 2 * Math.PI * lastPercent; // start at 12 o'clock and go clockwise

	    var angleDelta = 2 * Math.PI * percent;
	    var angleEnd = angleStart + angleDelta; // ignore if
	    // - zero size
	    // - we're already beyond the full circle
	    // - adding the current slice would go beyond the full circle

	    if (size === 0 || lastPercent >= 1 || lastPercent + percent > 1) {
	      continue;
	    }

	    context.beginPath();
	    context.moveTo(x, y);
	    context.arc(x, y, radius, angleStart, angleEnd);
	    context.closePath();
	    this.colorFillStyle(context, color[0], color[1], color[2], opacity);
	    context.fill();
	    lastPercent += percent;
	  }
	};

	var CRp$6 = {};
	var motionBlurDelay = 100; // var isFirefox = typeof InstallTrigger !== 'undefined';

	CRp$6.getPixelRatio = function () {
	  var context = this.data.contexts[0];

	  if (this.forcedPixelRatio != null) {
	    return this.forcedPixelRatio;
	  }

	  var backingStore = context.backingStorePixelRatio || context.webkitBackingStorePixelRatio || context.mozBackingStorePixelRatio || context.msBackingStorePixelRatio || context.oBackingStorePixelRatio || context.backingStorePixelRatio || 1;
	  return (window.devicePixelRatio || 1) / backingStore; // eslint-disable-line no-undef
	};

	CRp$6.paintCache = function (context) {
	  var caches = this.paintCaches = this.paintCaches || [];
	  var needToCreateCache = true;
	  var cache;

	  for (var i = 0; i < caches.length; i++) {
	    cache = caches[i];

	    if (cache.context === context) {
	      needToCreateCache = false;
	      break;
	    }
	  }

	  if (needToCreateCache) {
	    cache = {
	      context: context
	    };
	    caches.push(cache);
	  }

	  return cache;
	};

	CRp$6.createGradientStyleFor = function (context, shapeStyleName, ele, fill, opacity) {
	  var gradientStyle;
	  var usePaths = this.usePaths();
	  var colors = ele.pstyle(shapeStyleName + '-gradient-stop-colors').value,
	      positions = ele.pstyle(shapeStyleName + '-gradient-stop-positions').pfValue;

	  if (fill === 'radial-gradient') {
	    if (ele.isEdge()) {
	      var start = ele.sourceEndpoint(),
	          end = ele.targetEndpoint(),
	          mid = ele.midpoint();
	      var d1 = dist(start, mid);
	      var d2 = dist(end, mid);
	      gradientStyle = context.createRadialGradient(mid.x, mid.y, 0, mid.x, mid.y, Math.max(d1, d2));
	    } else {
	      var pos = usePaths ? {
	        x: 0,
	        y: 0
	      } : ele.position(),
	          width = ele.paddedWidth(),
	          height = ele.paddedHeight();
	      gradientStyle = context.createRadialGradient(pos.x, pos.y, 0, pos.x, pos.y, Math.max(width, height));
	    }
	  } else {
	    if (ele.isEdge()) {
	      var _start = ele.sourceEndpoint(),
	          _end = ele.targetEndpoint();

	      gradientStyle = context.createLinearGradient(_start.x, _start.y, _end.x, _end.y);
	    } else {
	      var _pos = usePaths ? {
	        x: 0,
	        y: 0
	      } : ele.position(),
	          _width = ele.paddedWidth(),
	          _height = ele.paddedHeight(),
	          halfWidth = _width / 2,
	          halfHeight = _height / 2;

	      var direction = ele.pstyle('background-gradient-direction').value;

	      switch (direction) {
	        case 'to-bottom':
	          gradientStyle = context.createLinearGradient(_pos.x, _pos.y - halfHeight, _pos.x, _pos.y + halfHeight);
	          break;

	        case 'to-top':
	          gradientStyle = context.createLinearGradient(_pos.x, _pos.y + halfHeight, _pos.x, _pos.y - halfHeight);
	          break;

	        case 'to-left':
	          gradientStyle = context.createLinearGradient(_pos.x + halfWidth, _pos.y, _pos.x - halfWidth, _pos.y);
	          break;

	        case 'to-right':
	          gradientStyle = context.createLinearGradient(_pos.x - halfWidth, _pos.y, _pos.x + halfWidth, _pos.y);
	          break;

	        case 'to-bottom-right':
	        case 'to-right-bottom':
	          gradientStyle = context.createLinearGradient(_pos.x - halfWidth, _pos.y - halfHeight, _pos.x + halfWidth, _pos.y + halfHeight);
	          break;

	        case 'to-top-right':
	        case 'to-right-top':
	          gradientStyle = context.createLinearGradient(_pos.x - halfWidth, _pos.y + halfHeight, _pos.x + halfWidth, _pos.y - halfHeight);
	          break;

	        case 'to-bottom-left':
	        case 'to-left-bottom':
	          gradientStyle = context.createLinearGradient(_pos.x + halfWidth, _pos.y - halfHeight, _pos.x - halfWidth, _pos.y + halfHeight);
	          break;

	        case 'to-top-left':
	        case 'to-left-top':
	          gradientStyle = context.createLinearGradient(_pos.x + halfWidth, _pos.y + halfHeight, _pos.x - halfWidth, _pos.y - halfHeight);
	          break;
	      }
	    }
	  }

	  if (!gradientStyle) return null; // invalid gradient style

	  var hasPositions = positions.length === colors.length;
	  var length = colors.length;

	  for (var i = 0; i < length; i++) {
	    gradientStyle.addColorStop(hasPositions ? positions[i] : i / (length - 1), 'rgba(' + colors[i][0] + ',' + colors[i][1] + ',' + colors[i][2] + ',' + opacity + ')');
	  }

	  return gradientStyle;
	};

	CRp$6.gradientFillStyle = function (context, ele, fill, opacity) {
	  var gradientStyle = this.createGradientStyleFor(context, 'background', ele, fill, opacity);
	  if (!gradientStyle) return null; // error

	  context.fillStyle = gradientStyle;
	};

	CRp$6.colorFillStyle = function (context, r, g, b, a) {
	  context.fillStyle = 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')'; // turn off for now, seems context does its own caching
	  // var cache = this.paintCache(context);
	  // var fillStyle = 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';
	  // if( cache.fillStyle !== fillStyle ){
	  //   context.fillStyle = cache.fillStyle = fillStyle;
	  // }
	};

	CRp$6.eleFillStyle = function (context, ele, opacity) {
	  var backgroundFill = ele.pstyle('background-fill').value;

	  if (backgroundFill === 'linear-gradient' || backgroundFill === 'radial-gradient') {
	    this.gradientFillStyle(context, ele, backgroundFill, opacity);
	  } else {
	    var backgroundColor = ele.pstyle('background-color').value;
	    this.colorFillStyle(context, backgroundColor[0], backgroundColor[1], backgroundColor[2], opacity);
	  }
	};

	CRp$6.gradientStrokeStyle = function (context, ele, fill, opacity) {
	  var gradientStyle = this.createGradientStyleFor(context, 'line', ele, fill, opacity);
	  if (!gradientStyle) return null; // error

	  context.strokeStyle = gradientStyle;
	};

	CRp$6.colorStrokeStyle = function (context, r, g, b, a) {
	  context.strokeStyle = 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')'; // turn off for now, seems context does its own caching
	  // var cache = this.paintCache(context);
	  // var strokeStyle = 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';
	  // if( cache.strokeStyle !== strokeStyle ){
	  //   context.strokeStyle = cache.strokeStyle = strokeStyle;
	  // }
	};

	CRp$6.eleStrokeStyle = function (context, ele, opacity) {
	  var lineFill = ele.pstyle('line-fill').value;

	  if (lineFill === 'linear-gradient' || lineFill === 'radial-gradient') {
	    this.gradientStrokeStyle(context, ele, lineFill, opacity);
	  } else {
	    var lineColor = ele.pstyle('line-color').value;
	    this.colorStrokeStyle(context, lineColor[0], lineColor[1], lineColor[2], opacity);
	  }
	}; // Resize canvas


	CRp$6.matchCanvasSize = function (container) {
	  var r = this;
	  var data = r.data;
	  var bb = r.findContainerClientCoords();
	  var width = bb[2];
	  var height = bb[3];
	  var pixelRatio = r.getPixelRatio();
	  var mbPxRatio = r.motionBlurPxRatio;

	  if (container === r.data.bufferCanvases[r.MOTIONBLUR_BUFFER_NODE] || container === r.data.bufferCanvases[r.MOTIONBLUR_BUFFER_DRAG]) {
	    pixelRatio = mbPxRatio;
	  }

	  var canvasWidth = width * pixelRatio;
	  var canvasHeight = height * pixelRatio;
	  var canvas;

	  if (canvasWidth === r.canvasWidth && canvasHeight === r.canvasHeight) {
	    return; // save cycles if same
	  }

	  r.fontCaches = null; // resizing resets the style

	  var canvasContainer = data.canvasContainer;
	  canvasContainer.style.width = width + 'px';
	  canvasContainer.style.height = height + 'px';

	  for (var i = 0; i < r.CANVAS_LAYERS; i++) {
	    canvas = data.canvases[i];
	    canvas.width = canvasWidth;
	    canvas.height = canvasHeight;
	    canvas.style.width = width + 'px';
	    canvas.style.height = height + 'px';
	  }

	  for (var i = 0; i < r.BUFFER_COUNT; i++) {
	    canvas = data.bufferCanvases[i];
	    canvas.width = canvasWidth;
	    canvas.height = canvasHeight;
	    canvas.style.width = width + 'px';
	    canvas.style.height = height + 'px';
	  }

	  r.textureMult = 1;

	  if (pixelRatio <= 1) {
	    canvas = data.bufferCanvases[r.TEXTURE_BUFFER];
	    r.textureMult = 2;
	    canvas.width = canvasWidth * r.textureMult;
	    canvas.height = canvasHeight * r.textureMult;
	  }

	  r.canvasWidth = canvasWidth;
	  r.canvasHeight = canvasHeight;
	};

	CRp$6.renderTo = function (cxt, zoom, pan, pxRatio) {
	  this.render({
	    forcedContext: cxt,
	    forcedZoom: zoom,
	    forcedPan: pan,
	    drawAllLayers: true,
	    forcedPxRatio: pxRatio
	  });
	};

	CRp$6.render = function (options) {
	  options = options || staticEmptyObject();
	  var forcedContext = options.forcedContext;
	  var drawAllLayers = options.drawAllLayers;
	  var drawOnlyNodeLayer = options.drawOnlyNodeLayer;
	  var forcedZoom = options.forcedZoom;
	  var forcedPan = options.forcedPan;
	  var r = this;
	  var pixelRatio = options.forcedPxRatio === undefined ? this.getPixelRatio() : options.forcedPxRatio;
	  var cy = r.cy;
	  var data = r.data;
	  var needDraw = data.canvasNeedsRedraw;
	  var textureDraw = r.textureOnViewport && !forcedContext && (r.pinching || r.hoverData.dragging || r.swipePanning || r.data.wheelZooming);
	  var motionBlur = options.motionBlur !== undefined ? options.motionBlur : r.motionBlur;
	  var mbPxRatio = r.motionBlurPxRatio;
	  var hasCompoundNodes = cy.hasCompoundNodes();
	  var inNodeDragGesture = r.hoverData.draggingEles;
	  var inBoxSelection = r.hoverData.selecting || r.touchData.selecting ? true : false;
	  motionBlur = motionBlur && !forcedContext && r.motionBlurEnabled && !inBoxSelection;
	  var motionBlurFadeEffect = motionBlur;

	  if (!forcedContext) {
	    if (r.prevPxRatio !== pixelRatio) {
	      r.invalidateContainerClientCoordsCache();
	      r.matchCanvasSize(r.container);
	      r.redrawHint('eles', true);
	      r.redrawHint('drag', true);
	    }

	    r.prevPxRatio = pixelRatio;
	  }

	  if (!forcedContext && r.motionBlurTimeout) {
	    clearTimeout(r.motionBlurTimeout);
	  }

	  if (motionBlur) {
	    if (r.mbFrames == null) {
	      r.mbFrames = 0;
	    }

	    r.mbFrames++;

	    if (r.mbFrames < 3) {
	      // need several frames before even high quality motionblur
	      motionBlurFadeEffect = false;
	    } // go to lower quality blurry frames when several m/b frames have been rendered (avoids flashing)


	    if (r.mbFrames > r.minMbLowQualFrames) {
	      //r.fullQualityMb = false;
	      r.motionBlurPxRatio = r.mbPxRBlurry;
	    }
	  }

	  if (r.clearingMotionBlur) {
	    r.motionBlurPxRatio = 1;
	  } // b/c drawToContext() may be async w.r.t. redraw(), keep track of last texture frame
	  // because a rogue async texture frame would clear needDraw


	  if (r.textureDrawLastFrame && !textureDraw) {
	    needDraw[r.NODE] = true;
	    needDraw[r.SELECT_BOX] = true;
	  }

	  var style = cy.style();
	  var zoom = cy.zoom();
	  var effectiveZoom = forcedZoom !== undefined ? forcedZoom : zoom;
	  var pan = cy.pan();
	  var effectivePan = {
	    x: pan.x,
	    y: pan.y
	  };
	  var vp = {
	    zoom: zoom,
	    pan: {
	      x: pan.x,
	      y: pan.y
	    }
	  };
	  var prevVp = r.prevViewport;
	  var viewportIsDiff = prevVp === undefined || vp.zoom !== prevVp.zoom || vp.pan.x !== prevVp.pan.x || vp.pan.y !== prevVp.pan.y; // we want the low quality motionblur only when the viewport is being manipulated etc (where it's not noticed)

	  if (!viewportIsDiff && !(inNodeDragGesture && !hasCompoundNodes)) {
	    r.motionBlurPxRatio = 1;
	  }

	  if (forcedPan) {
	    effectivePan = forcedPan;
	  } // apply pixel ratio


	  effectiveZoom *= pixelRatio;
	  effectivePan.x *= pixelRatio;
	  effectivePan.y *= pixelRatio;
	  var eles = r.getCachedZSortedEles();

	  function mbclear(context, x, y, w, h) {
	    var gco = context.globalCompositeOperation;
	    context.globalCompositeOperation = 'destination-out';
	    r.colorFillStyle(context, 255, 255, 255, r.motionBlurTransparency);
	    context.fillRect(x, y, w, h);
	    context.globalCompositeOperation = gco;
	  }

	  function setContextTransform(context, clear) {
	    var ePan, eZoom, w, h;

	    if (!r.clearingMotionBlur && (context === data.bufferContexts[r.MOTIONBLUR_BUFFER_NODE] || context === data.bufferContexts[r.MOTIONBLUR_BUFFER_DRAG])) {
	      ePan = {
	        x: pan.x * mbPxRatio,
	        y: pan.y * mbPxRatio
	      };
	      eZoom = zoom * mbPxRatio;
	      w = r.canvasWidth * mbPxRatio;
	      h = r.canvasHeight * mbPxRatio;
	    } else {
	      ePan = effectivePan;
	      eZoom = effectiveZoom;
	      w = r.canvasWidth;
	      h = r.canvasHeight;
	    }

	    context.setTransform(1, 0, 0, 1, 0, 0);

	    if (clear === 'motionBlur') {
	      mbclear(context, 0, 0, w, h);
	    } else if (!forcedContext && (clear === undefined || clear)) {
	      context.clearRect(0, 0, w, h);
	    }

	    if (!drawAllLayers) {
	      context.translate(ePan.x, ePan.y);
	      context.scale(eZoom, eZoom);
	    }

	    if (forcedPan) {
	      context.translate(forcedPan.x, forcedPan.y);
	    }

	    if (forcedZoom) {
	      context.scale(forcedZoom, forcedZoom);
	    }
	  }

	  if (!textureDraw) {
	    r.textureDrawLastFrame = false;
	  }

	  if (textureDraw) {
	    r.textureDrawLastFrame = true;

	    if (!r.textureCache) {
	      r.textureCache = {};
	      r.textureCache.bb = cy.mutableElements().boundingBox();
	      r.textureCache.texture = r.data.bufferCanvases[r.TEXTURE_BUFFER];
	      var cxt = r.data.bufferContexts[r.TEXTURE_BUFFER];
	      cxt.setTransform(1, 0, 0, 1, 0, 0);
	      cxt.clearRect(0, 0, r.canvasWidth * r.textureMult, r.canvasHeight * r.textureMult);
	      r.render({
	        forcedContext: cxt,
	        drawOnlyNodeLayer: true,
	        forcedPxRatio: pixelRatio * r.textureMult
	      });
	      var vp = r.textureCache.viewport = {
	        zoom: cy.zoom(),
	        pan: cy.pan(),
	        width: r.canvasWidth,
	        height: r.canvasHeight
	      };
	      vp.mpan = {
	        x: (0 - vp.pan.x) / vp.zoom,
	        y: (0 - vp.pan.y) / vp.zoom
	      };
	    }

	    needDraw[r.DRAG] = false;
	    needDraw[r.NODE] = false;
	    var context = data.contexts[r.NODE];
	    var texture = r.textureCache.texture;
	    var vp = r.textureCache.viewport;
	    context.setTransform(1, 0, 0, 1, 0, 0);

	    if (motionBlur) {
	      mbclear(context, 0, 0, vp.width, vp.height);
	    } else {
	      context.clearRect(0, 0, vp.width, vp.height);
	    }

	    var outsideBgColor = style.core('outside-texture-bg-color').value;
	    var outsideBgOpacity = style.core('outside-texture-bg-opacity').value;
	    r.colorFillStyle(context, outsideBgColor[0], outsideBgColor[1], outsideBgColor[2], outsideBgOpacity);
	    context.fillRect(0, 0, vp.width, vp.height);
	    var zoom = cy.zoom();
	    setContextTransform(context, false);
	    context.clearRect(vp.mpan.x, vp.mpan.y, vp.width / vp.zoom / pixelRatio, vp.height / vp.zoom / pixelRatio);
	    context.drawImage(texture, vp.mpan.x, vp.mpan.y, vp.width / vp.zoom / pixelRatio, vp.height / vp.zoom / pixelRatio);
	  } else if (r.textureOnViewport && !forcedContext) {
	    // clear the cache since we don't need it
	    r.textureCache = null;
	  }

	  var extent = cy.extent();
	  var vpManip = r.pinching || r.hoverData.dragging || r.swipePanning || r.data.wheelZooming || r.hoverData.draggingEles || r.cy.animated();
	  var hideEdges = r.hideEdgesOnViewport && vpManip;
	  var needMbClear = [];
	  needMbClear[r.NODE] = !needDraw[r.NODE] && motionBlur && !r.clearedForMotionBlur[r.NODE] || r.clearingMotionBlur;

	  if (needMbClear[r.NODE]) {
	    r.clearedForMotionBlur[r.NODE] = true;
	  }

	  needMbClear[r.DRAG] = !needDraw[r.DRAG] && motionBlur && !r.clearedForMotionBlur[r.DRAG] || r.clearingMotionBlur;

	  if (needMbClear[r.DRAG]) {
	    r.clearedForMotionBlur[r.DRAG] = true;
	  }

	  if (needDraw[r.NODE] || drawAllLayers || drawOnlyNodeLayer || needMbClear[r.NODE]) {
	    var useBuffer = motionBlur && !needMbClear[r.NODE] && mbPxRatio !== 1;
	    var context = forcedContext || (useBuffer ? r.data.bufferContexts[r.MOTIONBLUR_BUFFER_NODE] : data.contexts[r.NODE]);
	    var clear = motionBlur && !useBuffer ? 'motionBlur' : undefined;
	    setContextTransform(context, clear);

	    if (hideEdges) {
	      r.drawCachedNodes(context, eles.nondrag, pixelRatio, extent);
	    } else {
	      r.drawLayeredElements(context, eles.nondrag, pixelRatio, extent);
	    }

	    if (r.debug) {
	      r.drawDebugPoints(context, eles.nondrag);
	    }

	    if (!drawAllLayers && !motionBlur) {
	      needDraw[r.NODE] = false;
	    }
	  }

	  if (!drawOnlyNodeLayer && (needDraw[r.DRAG] || drawAllLayers || needMbClear[r.DRAG])) {
	    var useBuffer = motionBlur && !needMbClear[r.DRAG] && mbPxRatio !== 1;
	    var context = forcedContext || (useBuffer ? r.data.bufferContexts[r.MOTIONBLUR_BUFFER_DRAG] : data.contexts[r.DRAG]);
	    setContextTransform(context, motionBlur && !useBuffer ? 'motionBlur' : undefined);

	    if (hideEdges) {
	      r.drawCachedNodes(context, eles.drag, pixelRatio, extent);
	    } else {
	      r.drawCachedElements(context, eles.drag, pixelRatio, extent);
	    }

	    if (r.debug) {
	      r.drawDebugPoints(context, eles.drag);
	    }

	    if (!drawAllLayers && !motionBlur) {
	      needDraw[r.DRAG] = false;
	    }
	  }

	  if (r.showFps || !drawOnlyNodeLayer && needDraw[r.SELECT_BOX] && !drawAllLayers) {
	    var context = forcedContext || data.contexts[r.SELECT_BOX];
	    setContextTransform(context);

	    if (r.selection[4] == 1 && (r.hoverData.selecting || r.touchData.selecting)) {
	      var zoom = r.cy.zoom();
	      var borderWidth = style.core('selection-box-border-width').value / zoom;
	      context.lineWidth = borderWidth;
	      context.fillStyle = 'rgba(' + style.core('selection-box-color').value[0] + ',' + style.core('selection-box-color').value[1] + ',' + style.core('selection-box-color').value[2] + ',' + style.core('selection-box-opacity').value + ')';
	      context.fillRect(r.selection[0], r.selection[1], r.selection[2] - r.selection[0], r.selection[3] - r.selection[1]);

	      if (borderWidth > 0) {
	        context.strokeStyle = 'rgba(' + style.core('selection-box-border-color').value[0] + ',' + style.core('selection-box-border-color').value[1] + ',' + style.core('selection-box-border-color').value[2] + ',' + style.core('selection-box-opacity').value + ')';
	        context.strokeRect(r.selection[0], r.selection[1], r.selection[2] - r.selection[0], r.selection[3] - r.selection[1]);
	      }
	    }

	    if (data.bgActivePosistion && !r.hoverData.selecting) {
	      var zoom = r.cy.zoom();
	      var pos = data.bgActivePosistion;
	      context.fillStyle = 'rgba(' + style.core('active-bg-color').value[0] + ',' + style.core('active-bg-color').value[1] + ',' + style.core('active-bg-color').value[2] + ',' + style.core('active-bg-opacity').value + ')';
	      context.beginPath();
	      context.arc(pos.x, pos.y, style.core('active-bg-size').pfValue / zoom, 0, 2 * Math.PI);
	      context.fill();
	    }

	    var timeToRender = r.lastRedrawTime;

	    if (r.showFps && timeToRender) {
	      timeToRender = Math.round(timeToRender);
	      var fps = Math.round(1000 / timeToRender);
	      context.setTransform(1, 0, 0, 1, 0, 0);
	      context.fillStyle = 'rgba(255, 0, 0, 0.75)';
	      context.strokeStyle = 'rgba(255, 0, 0, 0.75)';
	      context.lineWidth = 1;
	      context.fillText('1 frame = ' + timeToRender + ' ms = ' + fps + ' fps', 0, 20);
	      var maxFps = 60;
	      context.strokeRect(0, 30, 250, 20);
	      context.fillRect(0, 30, 250 * Math.min(fps / maxFps, 1), 20);
	    }

	    if (!drawAllLayers) {
	      needDraw[r.SELECT_BOX] = false;
	    }
	  } // motionblur: blit rendered blurry frames


	  if (motionBlur && mbPxRatio !== 1) {
	    var cxtNode = data.contexts[r.NODE];
	    var txtNode = r.data.bufferCanvases[r.MOTIONBLUR_BUFFER_NODE];
	    var cxtDrag = data.contexts[r.DRAG];
	    var txtDrag = r.data.bufferCanvases[r.MOTIONBLUR_BUFFER_DRAG];

	    var drawMotionBlur = function drawMotionBlur(cxt, txt, needClear) {
	      cxt.setTransform(1, 0, 0, 1, 0, 0);

	      if (needClear || !motionBlurFadeEffect) {
	        cxt.clearRect(0, 0, r.canvasWidth, r.canvasHeight);
	      } else {
	        mbclear(cxt, 0, 0, r.canvasWidth, r.canvasHeight);
	      }

	      var pxr = mbPxRatio;
	      cxt.drawImage(txt, // img
	      0, 0, // sx, sy
	      r.canvasWidth * pxr, r.canvasHeight * pxr, // sw, sh
	      0, 0, // x, y
	      r.canvasWidth, r.canvasHeight // w, h
	      );
	    };

	    if (needDraw[r.NODE] || needMbClear[r.NODE]) {
	      drawMotionBlur(cxtNode, txtNode, needMbClear[r.NODE]);
	      needDraw[r.NODE] = false;
	    }

	    if (needDraw[r.DRAG] || needMbClear[r.DRAG]) {
	      drawMotionBlur(cxtDrag, txtDrag, needMbClear[r.DRAG]);
	      needDraw[r.DRAG] = false;
	    }
	  }

	  r.prevViewport = vp;

	  if (r.clearingMotionBlur) {
	    r.clearingMotionBlur = false;
	    r.motionBlurCleared = true;
	    r.motionBlur = true;
	  }

	  if (motionBlur) {
	    r.motionBlurTimeout = setTimeout(function () {
	      r.motionBlurTimeout = null;
	      r.clearedForMotionBlur[r.NODE] = false;
	      r.clearedForMotionBlur[r.DRAG] = false;
	      r.motionBlur = false;
	      r.clearingMotionBlur = !textureDraw;
	      r.mbFrames = 0;
	      needDraw[r.NODE] = true;
	      needDraw[r.DRAG] = true;
	      r.redraw();
	    }, motionBlurDelay);
	  }

	  if (!forcedContext) {
	    cy.emit('render');
	  }
	};

	var CRp$7 = {}; // @O Polygon drawing

	CRp$7.drawPolygonPath = function (context, x, y, width, height, points) {
	  var halfW = width / 2;
	  var halfH = height / 2;

	  if (context.beginPath) {
	    context.beginPath();
	  }

	  context.moveTo(x + halfW * points[0], y + halfH * points[1]);

	  for (var i = 1; i < points.length / 2; i++) {
	    context.lineTo(x + halfW * points[i * 2], y + halfH * points[i * 2 + 1]);
	  }

	  context.closePath();
	};

	CRp$7.drawRoundPolygonPath = function (context, x, y, width, height, points) {
	  var halfW = width / 2;
	  var halfH = height / 2;
	  var cornerRadius = getRoundPolygonRadius(width, height);

	  if (context.beginPath) {
	    context.beginPath();
	  }

	  for (var _i = 0; _i < points.length / 4; _i++) {
	    var sourceUv = void 0,
	        destUv = void 0;

	    if (_i === 0) {
	      sourceUv = points.length - 2;
	    } else {
	      sourceUv = _i * 4 - 2;
	    }

	    destUv = _i * 4 + 2;
	    var px = x + halfW * points[_i * 4];
	    var py = y + halfH * points[_i * 4 + 1];
	    var cosTheta = -points[sourceUv] * points[destUv] - points[sourceUv + 1] * points[destUv + 1];
	    var offset = cornerRadius / Math.tan(Math.acos(cosTheta) / 2);
	    var cp0x = px - offset * points[sourceUv];
	    var cp0y = py - offset * points[sourceUv + 1];
	    var cp1x = px + offset * points[destUv];
	    var cp1y = py + offset * points[destUv + 1];

	    if (_i === 0) {
	      context.moveTo(cp0x, cp0y);
	    } else {
	      context.lineTo(cp0x, cp0y);
	    }

	    context.arcTo(px, py, cp1x, cp1y, cornerRadius);
	  }

	  context.closePath();
	}; // Round rectangle drawing


	CRp$7.drawRoundRectanglePath = function (context, x, y, width, height) {
	  var halfWidth = width / 2;
	  var halfHeight = height / 2;
	  var cornerRadius = getRoundRectangleRadius(width, height);

	  if (context.beginPath) {
	    context.beginPath();
	  } // Start at top middle


	  context.moveTo(x, y - halfHeight); // Arc from middle top to right side

	  context.arcTo(x + halfWidth, y - halfHeight, x + halfWidth, y, cornerRadius); // Arc from right side to bottom

	  context.arcTo(x + halfWidth, y + halfHeight, x, y + halfHeight, cornerRadius); // Arc from bottom to left side

	  context.arcTo(x - halfWidth, y + halfHeight, x - halfWidth, y, cornerRadius); // Arc from left side to topBorder

	  context.arcTo(x - halfWidth, y - halfHeight, x, y - halfHeight, cornerRadius); // Join line

	  context.lineTo(x, y - halfHeight);
	  context.closePath();
	};

	CRp$7.drawBottomRoundRectanglePath = function (context, x, y, width, height) {
	  var halfWidth = width / 2;
	  var halfHeight = height / 2;
	  var cornerRadius = getRoundRectangleRadius(width, height);

	  if (context.beginPath) {
	    context.beginPath();
	  } // Start at top middle


	  context.moveTo(x, y - halfHeight);
	  context.lineTo(x + halfWidth, y - halfHeight);
	  context.lineTo(x + halfWidth, y);
	  context.arcTo(x + halfWidth, y + halfHeight, x, y + halfHeight, cornerRadius);
	  context.arcTo(x - halfWidth, y + halfHeight, x - halfWidth, y, cornerRadius);
	  context.lineTo(x - halfWidth, y - halfHeight);
	  context.lineTo(x, y - halfHeight);
	  context.closePath();
	};

	CRp$7.drawCutRectanglePath = function (context, x, y, width, height) {
	  var halfWidth = width / 2;
	  var halfHeight = height / 2;
	  var cornerLength = getCutRectangleCornerLength();

	  if (context.beginPath) {
	    context.beginPath();
	  }

	  context.moveTo(x - halfWidth + cornerLength, y - halfHeight);
	  context.lineTo(x + halfWidth - cornerLength, y - halfHeight);
	  context.lineTo(x + halfWidth, y - halfHeight + cornerLength);
	  context.lineTo(x + halfWidth, y + halfHeight - cornerLength);
	  context.lineTo(x + halfWidth - cornerLength, y + halfHeight);
	  context.lineTo(x - halfWidth + cornerLength, y + halfHeight);
	  context.lineTo(x - halfWidth, y + halfHeight - cornerLength);
	  context.lineTo(x - halfWidth, y - halfHeight + cornerLength);
	  context.closePath();
	};

	CRp$7.drawBarrelPath = function (context, x, y, width, height) {
	  var halfWidth = width / 2;
	  var halfHeight = height / 2;
	  var xBegin = x - halfWidth;
	  var xEnd = x + halfWidth;
	  var yBegin = y - halfHeight;
	  var yEnd = y + halfHeight;
	  var barrelCurveConstants = getBarrelCurveConstants(width, height);
	  var wOffset = barrelCurveConstants.widthOffset;
	  var hOffset = barrelCurveConstants.heightOffset;
	  var ctrlPtXOffset = barrelCurveConstants.ctrlPtOffsetPct * wOffset;

	  if (context.beginPath) {
	    context.beginPath();
	  }

	  context.moveTo(xBegin, yBegin + hOffset);
	  context.lineTo(xBegin, yEnd - hOffset);
	  context.quadraticCurveTo(xBegin + ctrlPtXOffset, yEnd, xBegin + wOffset, yEnd);
	  context.lineTo(xEnd - wOffset, yEnd);
	  context.quadraticCurveTo(xEnd - ctrlPtXOffset, yEnd, xEnd, yEnd - hOffset);
	  context.lineTo(xEnd, yBegin + hOffset);
	  context.quadraticCurveTo(xEnd - ctrlPtXOffset, yBegin, xEnd - wOffset, yBegin);
	  context.lineTo(xBegin + wOffset, yBegin);
	  context.quadraticCurveTo(xBegin + ctrlPtXOffset, yBegin, xBegin, yBegin + hOffset);
	  context.closePath();
	};

	var sin0 = Math.sin(0);
	var cos0 = Math.cos(0);
	var sin = {};
	var cos = {};
	var ellipseStepSize = Math.PI / 40;

	for (var i = 0 * Math.PI; i < 2 * Math.PI; i += ellipseStepSize) {
	  sin[i] = Math.sin(i);
	  cos[i] = Math.cos(i);
	}

	CRp$7.drawEllipsePath = function (context, centerX, centerY, width, height) {
	  if (context.beginPath) {
	    context.beginPath();
	  }

	  if (context.ellipse) {
	    context.ellipse(centerX, centerY, width / 2, height / 2, 0, 0, 2 * Math.PI);
	  } else {
	    var xPos, yPos;
	    var rw = width / 2;
	    var rh = height / 2;

	    for (var i = 0 * Math.PI; i < 2 * Math.PI; i += ellipseStepSize) {
	      xPos = centerX - rw * sin[i] * sin0 + rw * cos[i] * cos0;
	      yPos = centerY + rh * cos[i] * sin0 + rh * sin[i] * cos0;

	      if (i === 0) {
	        context.moveTo(xPos, yPos);
	      } else {
	        context.lineTo(xPos, yPos);
	      }
	    }
	  }

	  context.closePath();
	};

	/* global atob, ArrayBuffer, Uint8Array, Blob */
	var CRp$8 = {};

	CRp$8.createBuffer = function (w, h) {
	  var buffer = document.createElement('canvas'); // eslint-disable-line no-undef

	  buffer.width = w;
	  buffer.height = h;
	  return [buffer, buffer.getContext('2d')];
	};

	CRp$8.bufferCanvasImage = function (options) {
	  var cy = this.cy;
	  var eles = cy.mutableElements();
	  var bb = eles.boundingBox();
	  var ctrRect = this.findContainerClientCoords();
	  var width = options.full ? Math.ceil(bb.w) : ctrRect[2];
	  var height = options.full ? Math.ceil(bb.h) : ctrRect[3];
	  var specdMaxDims = number(options.maxWidth) || number(options.maxHeight);
	  var pxRatio = this.getPixelRatio();
	  var scale = 1;

	  if (options.scale !== undefined) {
	    width *= options.scale;
	    height *= options.scale;
	    scale = options.scale;
	  } else if (specdMaxDims) {
	    var maxScaleW = Infinity;
	    var maxScaleH = Infinity;

	    if (number(options.maxWidth)) {
	      maxScaleW = scale * options.maxWidth / width;
	    }

	    if (number(options.maxHeight)) {
	      maxScaleH = scale * options.maxHeight / height;
	    }

	    scale = Math.min(maxScaleW, maxScaleH);
	    width *= scale;
	    height *= scale;
	  }

	  if (!specdMaxDims) {
	    width *= pxRatio;
	    height *= pxRatio;
	    scale *= pxRatio;
	  }

	  var buffCanvas = document.createElement('canvas'); // eslint-disable-line no-undef

	  buffCanvas.width = width;
	  buffCanvas.height = height;
	  buffCanvas.style.width = width + 'px';
	  buffCanvas.style.height = height + 'px';
	  var buffCxt = buffCanvas.getContext('2d'); // Rasterize the layers, but only if container has nonzero size

	  if (width > 0 && height > 0) {
	    buffCxt.clearRect(0, 0, width, height);
	    buffCxt.globalCompositeOperation = 'source-over';
	    var zsortedEles = this.getCachedZSortedEles();

	    if (options.full) {
	      // draw the full bounds of the graph
	      buffCxt.translate(-bb.x1 * scale, -bb.y1 * scale);
	      buffCxt.scale(scale, scale);
	      this.drawElements(buffCxt, zsortedEles);
	      buffCxt.scale(1 / scale, 1 / scale);
	      buffCxt.translate(bb.x1 * scale, bb.y1 * scale);
	    } else {
	      // draw the current view
	      var pan = cy.pan();
	      var translation = {
	        x: pan.x * scale,
	        y: pan.y * scale
	      };
	      scale *= cy.zoom();
	      buffCxt.translate(translation.x, translation.y);
	      buffCxt.scale(scale, scale);
	      this.drawElements(buffCxt, zsortedEles);
	      buffCxt.scale(1 / scale, 1 / scale);
	      buffCxt.translate(-translation.x, -translation.y);
	    } // need to fill bg at end like this in order to fill cleared transparent pixels in jpgs


	    if (options.bg) {
	      buffCxt.globalCompositeOperation = 'destination-over';
	      buffCxt.fillStyle = options.bg;
	      buffCxt.rect(0, 0, width, height);
	      buffCxt.fill();
	    }
	  }

	  return buffCanvas;
	};

	function b64ToBlob(b64, mimeType) {
	  var bytes = atob(b64);
	  var buff = new ArrayBuffer(bytes.length);
	  var buffUint8 = new Uint8Array(buff);

	  for (var i = 0; i < bytes.length; i++) {
	    buffUint8[i] = bytes.charCodeAt(i);
	  }

	  return new Blob([buff], {
	    type: mimeType
	  });
	}

	function b64UriToB64(b64uri) {
	  var i = b64uri.indexOf(',');
	  return b64uri.substr(i + 1);
	}

	function output(options, canvas, mimeType) {
	  var getB64Uri = function getB64Uri() {
	    return canvas.toDataURL(mimeType, options.quality);
	  };

	  switch (options.output) {
	    case 'blob-promise':
	      return new Promise$1(function (resolve, reject) {
	        try {
	          canvas.toBlob(function (blob) {
	            if (blob != null) {
	              resolve(blob);
	            } else {
	              reject(new Error('`canvas.toBlob()` sent a null value in its callback'));
	            }
	          }, mimeType, options.quality);
	        } catch (err) {
	          reject(err);
	        }
	      });

	    case 'blob':
	      return b64ToBlob(b64UriToB64(getB64Uri()), mimeType);

	    case 'base64':
	      return b64UriToB64(getB64Uri());

	    case 'base64uri':
	    default:
	      return getB64Uri();
	  }
	}

	CRp$8.png = function (options) {
	  return output(options, this.bufferCanvasImage(options), 'image/png');
	};

	CRp$8.jpg = function (options) {
	  return output(options, this.bufferCanvasImage(options), 'image/jpeg');
	};

	var CRp$9 = {};

	CRp$9.nodeShapeImpl = function (name, context, centerX, centerY, width, height, points) {
	  switch (name) {
	    case 'ellipse':
	      return this.drawEllipsePath(context, centerX, centerY, width, height);

	    case 'polygon':
	      return this.drawPolygonPath(context, centerX, centerY, width, height, points);

	    case 'round-polygon':
	      return this.drawRoundPolygonPath(context, centerX, centerY, width, height, points);

	    case 'roundrectangle':
	    case 'round-rectangle':
	      return this.drawRoundRectanglePath(context, centerX, centerY, width, height);

	    case 'cutrectangle':
	    case 'cut-rectangle':
	      return this.drawCutRectanglePath(context, centerX, centerY, width, height);

	    case 'bottomroundrectangle':
	    case 'bottom-round-rectangle':
	      return this.drawBottomRoundRectanglePath(context, centerX, centerY, width, height);

	    case 'barrel':
	      return this.drawBarrelPath(context, centerX, centerY, width, height);
	  }
	};

	var CR = CanvasRenderer;
	var CRp$a = CanvasRenderer.prototype;
	CRp$a.CANVAS_LAYERS = 3; //

	CRp$a.SELECT_BOX = 0;
	CRp$a.DRAG = 1;
	CRp$a.NODE = 2;
	CRp$a.BUFFER_COUNT = 3; //

	CRp$a.TEXTURE_BUFFER = 0;
	CRp$a.MOTIONBLUR_BUFFER_NODE = 1;
	CRp$a.MOTIONBLUR_BUFFER_DRAG = 2;

	function CanvasRenderer(options) {
	  var r = this;
	  r.data = {
	    canvases: new Array(CRp$a.CANVAS_LAYERS),
	    contexts: new Array(CRp$a.CANVAS_LAYERS),
	    canvasNeedsRedraw: new Array(CRp$a.CANVAS_LAYERS),
	    bufferCanvases: new Array(CRp$a.BUFFER_COUNT),
	    bufferContexts: new Array(CRp$a.CANVAS_LAYERS)
	  };
	  var tapHlOffAttr = '-webkit-tap-highlight-color';
	  var tapHlOffStyle = 'rgba(0,0,0,0)';
	  r.data.canvasContainer = document.createElement('div'); // eslint-disable-line no-undef

	  var containerStyle = r.data.canvasContainer.style;
	  r.data.canvasContainer.style[tapHlOffAttr] = tapHlOffStyle;
	  containerStyle.position = 'relative';
	  containerStyle.zIndex = '0';
	  containerStyle.overflow = 'hidden';
	  var container = options.cy.container();
	  container.appendChild(r.data.canvasContainer);
	  container.style[tapHlOffAttr] = tapHlOffStyle;
	  var styleMap = {
	    '-webkit-user-select': 'none',
	    '-moz-user-select': '-moz-none',
	    'user-select': 'none',
	    '-webkit-tap-highlight-color': 'rgba(0,0,0,0)',
	    'outline-style': 'none'
	  };

	  if (ms()) {
	    styleMap['-ms-touch-action'] = 'none';
	    styleMap['touch-action'] = 'none';
	  }

	  for (var i = 0; i < CRp$a.CANVAS_LAYERS; i++) {
	    var canvas = r.data.canvases[i] = document.createElement('canvas'); // eslint-disable-line no-undef

	    r.data.contexts[i] = canvas.getContext('2d');
	    Object.keys(styleMap).forEach(function (k) {
	      canvas.style[k] = styleMap[k];
	    });
	    canvas.style.position = 'absolute';
	    canvas.setAttribute('data-id', 'layer' + i);
	    canvas.style.zIndex = String(CRp$a.CANVAS_LAYERS - i);
	    r.data.canvasContainer.appendChild(canvas);
	    r.data.canvasNeedsRedraw[i] = false;
	  }

	  r.data.topCanvas = r.data.canvases[0];
	  r.data.canvases[CRp$a.NODE].setAttribute('data-id', 'layer' + CRp$a.NODE + '-node');
	  r.data.canvases[CRp$a.SELECT_BOX].setAttribute('data-id', 'layer' + CRp$a.SELECT_BOX + '-selectbox');
	  r.data.canvases[CRp$a.DRAG].setAttribute('data-id', 'layer' + CRp$a.DRAG + '-drag');

	  for (var i = 0; i < CRp$a.BUFFER_COUNT; i++) {
	    r.data.bufferCanvases[i] = document.createElement('canvas'); // eslint-disable-line no-undef

	    r.data.bufferContexts[i] = r.data.bufferCanvases[i].getContext('2d');
	    r.data.bufferCanvases[i].style.position = 'absolute';
	    r.data.bufferCanvases[i].setAttribute('data-id', 'buffer' + i);
	    r.data.bufferCanvases[i].style.zIndex = String(-i - 1);
	    r.data.bufferCanvases[i].style.visibility = 'hidden'; //r.data.canvasContainer.appendChild(r.data.bufferCanvases[i]);
	  }

	  r.pathsEnabled = true;
	  var emptyBb = makeBoundingBox();

	  var getBoxCenter = function getBoxCenter(bb) {
	    return {
	      x: (bb.x1 + bb.x2) / 2,
	      y: (bb.y1 + bb.y2) / 2
	    };
	  };

	  var getCenterOffset = function getCenterOffset(bb) {
	    return {
	      x: -bb.w / 2,
	      y: -bb.h / 2
	    };
	  };

	  var backgroundTimestampHasChanged = function backgroundTimestampHasChanged(ele) {
	    var _p = ele[0]._private;
	    var same = _p.oldBackgroundTimestamp === _p.backgroundTimestamp;
	    return !same;
	  };

	  var getStyleKey = function getStyleKey(ele) {
	    return ele[0]._private.nodeKey;
	  };

	  var getLabelKey = function getLabelKey(ele) {
	    return ele[0]._private.labelStyleKey;
	  };

	  var getSourceLabelKey = function getSourceLabelKey(ele) {
	    return ele[0]._private.sourceLabelStyleKey;
	  };

	  var getTargetLabelKey = function getTargetLabelKey(ele) {
	    return ele[0]._private.targetLabelStyleKey;
	  };

	  var drawElement = function drawElement(context, ele, bb, scaledLabelShown, useEleOpacity) {
	    return r.drawElement(context, ele, bb, false, false, useEleOpacity);
	  };

	  var drawLabel = function drawLabel(context, ele, bb, scaledLabelShown, useEleOpacity) {
	    return r.drawElementText(context, ele, bb, scaledLabelShown, 'main', useEleOpacity);
	  };

	  var drawSourceLabel = function drawSourceLabel(context, ele, bb, scaledLabelShown, useEleOpacity) {
	    return r.drawElementText(context, ele, bb, scaledLabelShown, 'source', useEleOpacity);
	  };

	  var drawTargetLabel = function drawTargetLabel(context, ele, bb, scaledLabelShown, useEleOpacity) {
	    return r.drawElementText(context, ele, bb, scaledLabelShown, 'target', useEleOpacity);
	  };

	  var getElementBox = function getElementBox(ele) {
	    ele.boundingBox();
	    return ele[0]._private.bodyBounds;
	  };

	  var getLabelBox = function getLabelBox(ele) {
	    ele.boundingBox();
	    return ele[0]._private.labelBounds.main || emptyBb;
	  };

	  var getSourceLabelBox = function getSourceLabelBox(ele) {
	    ele.boundingBox();
	    return ele[0]._private.labelBounds.source || emptyBb;
	  };

	  var getTargetLabelBox = function getTargetLabelBox(ele) {
	    ele.boundingBox();
	    return ele[0]._private.labelBounds.target || emptyBb;
	  };

	  var isLabelVisibleAtScale = function isLabelVisibleAtScale(ele, scaledLabelShown) {
	    return scaledLabelShown;
	  };

	  var getElementRotationPoint = function getElementRotationPoint(ele) {
	    return getBoxCenter(getElementBox(ele));
	  };

	  var addTextMargin = function addTextMargin(prefix, pt, ele) {
	    var pre = prefix ? prefix + '-' : '';
	    return {
	      x: pt.x + ele.pstyle(pre + 'text-margin-x').pfValue,
	      y: pt.y + ele.pstyle(pre + 'text-margin-y').pfValue
	    };
	  };

	  var getRsPt = function getRsPt(ele, x, y) {
	    var rs = ele[0]._private.rscratch;
	    return {
	      x: rs[x],
	      y: rs[y]
	    };
	  };

	  var getLabelRotationPoint = function getLabelRotationPoint(ele) {
	    return addTextMargin('', getRsPt(ele, 'labelX', 'labelY'), ele);
	  };

	  var getSourceLabelRotationPoint = function getSourceLabelRotationPoint(ele) {
	    return addTextMargin('source', getRsPt(ele, 'sourceLabelX', 'sourceLabelY'), ele);
	  };

	  var getTargetLabelRotationPoint = function getTargetLabelRotationPoint(ele) {
	    return addTextMargin('target', getRsPt(ele, 'targetLabelX', 'targetLabelY'), ele);
	  };

	  var getElementRotationOffset = function getElementRotationOffset(ele) {
	    return getCenterOffset(getElementBox(ele));
	  };

	  var getSourceLabelRotationOffset = function getSourceLabelRotationOffset(ele) {
	    return getCenterOffset(getSourceLabelBox(ele));
	  };

	  var getTargetLabelRotationOffset = function getTargetLabelRotationOffset(ele) {
	    return getCenterOffset(getTargetLabelBox(ele));
	  };

	  var getLabelRotationOffset = function getLabelRotationOffset(ele) {
	    var bb = getLabelBox(ele);
	    var p = getCenterOffset(getLabelBox(ele));

	    if (ele.isNode()) {
	      switch (ele.pstyle('text-halign').value) {
	        case 'left':
	          p.x = -bb.w;
	          break;

	        case 'right':
	          p.x = 0;
	          break;
	      }

	      switch (ele.pstyle('text-valign').value) {
	        case 'top':
	          p.y = -bb.h;
	          break;

	        case 'bottom':
	          p.y = 0;
	          break;
	      }
	    }

	    return p;
	  };

	  var eleTxrCache = r.data.eleTxrCache = new ElementTextureCache(r, {
	    getKey: getStyleKey,
	    doesEleInvalidateKey: backgroundTimestampHasChanged,
	    drawElement: drawElement,
	    getBoundingBox: getElementBox,
	    getRotationPoint: getElementRotationPoint,
	    getRotationOffset: getElementRotationOffset,
	    allowEdgeTxrCaching: false,
	    allowParentTxrCaching: false
	  });
	  var lblTxrCache = r.data.lblTxrCache = new ElementTextureCache(r, {
	    getKey: getLabelKey,
	    drawElement: drawLabel,
	    getBoundingBox: getLabelBox,
	    getRotationPoint: getLabelRotationPoint,
	    getRotationOffset: getLabelRotationOffset,
	    isVisible: isLabelVisibleAtScale
	  });
	  var slbTxrCache = r.data.slbTxrCache = new ElementTextureCache(r, {
	    getKey: getSourceLabelKey,
	    drawElement: drawSourceLabel,
	    getBoundingBox: getSourceLabelBox,
	    getRotationPoint: getSourceLabelRotationPoint,
	    getRotationOffset: getSourceLabelRotationOffset,
	    isVisible: isLabelVisibleAtScale
	  });
	  var tlbTxrCache = r.data.tlbTxrCache = new ElementTextureCache(r, {
	    getKey: getTargetLabelKey,
	    drawElement: drawTargetLabel,
	    getBoundingBox: getTargetLabelBox,
	    getRotationPoint: getTargetLabelRotationPoint,
	    getRotationOffset: getTargetLabelRotationOffset,
	    isVisible: isLabelVisibleAtScale
	  });
	  var lyrTxrCache = r.data.lyrTxrCache = new LayeredTextureCache(r);
	  r.onUpdateEleCalcs(function invalidateTextureCaches(willDraw, eles) {
	    // each cache should check for sub-key diff to see that the update affects that cache particularly
	    eleTxrCache.invalidateElements(eles);
	    lblTxrCache.invalidateElements(eles);
	    slbTxrCache.invalidateElements(eles);
	    tlbTxrCache.invalidateElements(eles); // any change invalidates the layers

	    lyrTxrCache.invalidateElements(eles); // update the old bg timestamp so diffs can be done in the ele txr caches

	    for (var _i = 0; _i < eles.length; _i++) {
	      var _p = eles[_i]._private;
	      _p.oldBackgroundTimestamp = _p.backgroundTimestamp;
	    }
	  });

	  var refineInLayers = function refineInLayers(reqs) {
	    for (var i = 0; i < reqs.length; i++) {
	      lyrTxrCache.enqueueElementRefinement(reqs[i].ele);
	    }
	  };

	  eleTxrCache.onDequeue(refineInLayers);
	  lblTxrCache.onDequeue(refineInLayers);
	  slbTxrCache.onDequeue(refineInLayers);
	  tlbTxrCache.onDequeue(refineInLayers);
	}

	CRp$a.redrawHint = function (group, bool) {
	  var r = this;

	  switch (group) {
	    case 'eles':
	      r.data.canvasNeedsRedraw[CRp$a.NODE] = bool;
	      break;

	    case 'drag':
	      r.data.canvasNeedsRedraw[CRp$a.DRAG] = bool;
	      break;

	    case 'select':
	      r.data.canvasNeedsRedraw[CRp$a.SELECT_BOX] = bool;
	      break;
	  }
	}; // whether to use Path2D caching for drawing


	var pathsImpld = typeof Path2D !== 'undefined';

	CRp$a.path2dEnabled = function (on) {
	  if (on === undefined) {
	    return this.pathsEnabled;
	  }

	  this.pathsEnabled = on ? true : false;
	};

	CRp$a.usePaths = function () {
	  return pathsImpld && this.pathsEnabled;
	};

	CRp$a.setImgSmoothing = function (context, bool) {
	  if (context.imageSmoothingEnabled != null) {
	    context.imageSmoothingEnabled = bool;
	  } else {
	    context.webkitImageSmoothingEnabled = bool;
	    context.mozImageSmoothingEnabled = bool;
	    context.msImageSmoothingEnabled = bool;
	  }
	};

	CRp$a.getImgSmoothing = function (context) {
	  if (context.imageSmoothingEnabled != null) {
	    return context.imageSmoothingEnabled;
	  } else {
	    return context.webkitImageSmoothingEnabled || context.mozImageSmoothingEnabled || context.msImageSmoothingEnabled;
	  }
	};

	CRp$a.makeOffscreenCanvas = function (width, height) {
	  var canvas;

	  if ((typeof OffscreenCanvas === "undefined" ? "undefined" : _typeof(OffscreenCanvas)) !== ( "undefined" )) {
	    canvas = new OffscreenCanvas(width, height);
	  } else {
	    canvas = document.createElement('canvas'); // eslint-disable-line no-undef

	    canvas.width = width;
	    canvas.height = height;
	  }

	  return canvas;
	};

	[CRp, CRp$1, CRp$2, CRp$3, CRp$4, CRp$5, CRp$6, CRp$7, CRp$8, CRp$9].forEach(function (props) {
	  extend(CRp$a, props);
	});

	var renderer = [{
	  name: 'null',
	  impl: NullRenderer
	}, {
	  name: 'base',
	  impl: BR
	}, {
	  name: 'canvas',
	  impl: CR
	}];

	var incExts = [{
	  type: 'layout',
	  extensions: layout
	}, {
	  type: 'renderer',
	  extensions: renderer
	}];

	var extensions = {}; // registered modules for extensions, indexed by name

	var modules = {};

	function setExtension(type, name, registrant) {
	  var ext = registrant;

	  var overrideErr = function overrideErr(field) {
	    error('Can not register `' + name + '` for `' + type + '` since `' + field + '` already exists in the prototype and can not be overridden');
	  };

	  if (type === 'core') {
	    if (Core.prototype[name]) {
	      return overrideErr(name);
	    } else {
	      Core.prototype[name] = registrant;
	    }
	  } else if (type === 'collection') {
	    if (Collection.prototype[name]) {
	      return overrideErr(name);
	    } else {
	      Collection.prototype[name] = registrant;
	    }
	  } else if (type === 'layout') {
	    // fill in missing layout functions in the prototype
	    var Layout = function Layout(options) {
	      this.options = options;
	      registrant.call(this, options); // make sure layout has _private for use w/ std apis like .on()

	      if (!plainObject(this._private)) {
	        this._private = {};
	      }

	      this._private.cy = options.cy;
	      this._private.listeners = [];
	      this.createEmitter();
	    };

	    var layoutProto = Layout.prototype = Object.create(registrant.prototype);
	    var optLayoutFns = [];

	    for (var i = 0; i < optLayoutFns.length; i++) {
	      var fnName = optLayoutFns[i];

	      layoutProto[fnName] = layoutProto[fnName] || function () {
	        return this;
	      };
	    } // either .start() or .run() is defined, so autogen the other


	    if (layoutProto.start && !layoutProto.run) {
	      layoutProto.run = function () {
	        this.start();
	        return this;
	      };
	    } else if (!layoutProto.start && layoutProto.run) {
	      layoutProto.start = function () {
	        this.run();
	        return this;
	      };
	    }

	    var regStop = registrant.prototype.stop;

	    layoutProto.stop = function () {
	      var opts = this.options;

	      if (opts && opts.animate) {
	        var anis = this.animations;

	        if (anis) {
	          for (var _i = 0; _i < anis.length; _i++) {
	            anis[_i].stop();
	          }
	        }
	      }

	      if (regStop) {
	        regStop.call(this);
	      } else {
	        this.emit('layoutstop');
	      }

	      return this;
	    };

	    if (!layoutProto.destroy) {
	      layoutProto.destroy = function () {
	        return this;
	      };
	    }

	    layoutProto.cy = function () {
	      return this._private.cy;
	    };

	    var getCy = function getCy(layout) {
	      return layout._private.cy;
	    };

	    var emitterOpts = {
	      addEventFields: function addEventFields(layout, evt) {
	        evt.layout = layout;
	        evt.cy = getCy(layout);
	        evt.target = layout;
	      },
	      bubble: function bubble() {
	        return true;
	      },
	      parent: function parent(layout) {
	        return getCy(layout);
	      }
	    };
	    extend(layoutProto, {
	      createEmitter: function createEmitter() {
	        this._private.emitter = new Emitter(emitterOpts, this);
	        return this;
	      },
	      emitter: function emitter() {
	        return this._private.emitter;
	      },
	      on: function on(evt, cb) {
	        this.emitter().on(evt, cb);
	        return this;
	      },
	      one: function one(evt, cb) {
	        this.emitter().one(evt, cb);
	        return this;
	      },
	      once: function once(evt, cb) {
	        this.emitter().one(evt, cb);
	        return this;
	      },
	      removeListener: function removeListener(evt, cb) {
	        this.emitter().removeListener(evt, cb);
	        return this;
	      },
	      removeAllListeners: function removeAllListeners() {
	        this.emitter().removeAllListeners();
	        return this;
	      },
	      emit: function emit(evt, params) {
	        this.emitter().emit(evt, params);
	        return this;
	      }
	    });
	    define$3.eventAliasesOn(layoutProto);
	    ext = Layout; // replace with our wrapped layout
	  } else if (type === 'renderer' && name !== 'null' && name !== 'base') {
	    // user registered renderers inherit from base
	    var BaseRenderer = getExtension('renderer', 'base');
	    var bProto = BaseRenderer.prototype;
	    var RegistrantRenderer = registrant;
	    var rProto = registrant.prototype;

	    var Renderer = function Renderer() {
	      BaseRenderer.apply(this, arguments);
	      RegistrantRenderer.apply(this, arguments);
	    };

	    var proto = Renderer.prototype;

	    for (var pName in bProto) {
	      var pVal = bProto[pName];
	      var existsInR = rProto[pName] != null;

	      if (existsInR) {
	        return overrideErr(pName);
	      }

	      proto[pName] = pVal; // take impl from base
	    }

	    for (var _pName in rProto) {
	      proto[_pName] = rProto[_pName]; // take impl from registrant
	    }

	    bProto.clientFunctions.forEach(function (name) {
	      proto[name] = proto[name] || function () {
	        error('Renderer does not implement `renderer.' + name + '()` on its prototype');
	      };
	    });
	    ext = Renderer;
	  }

	  return setMap({
	    map: extensions,
	    keys: [type, name],
	    value: ext
	  });
	}

	function getExtension(type, name) {
	  return getMap({
	    map: extensions,
	    keys: [type, name]
	  });
	}

	function setModule(type, name, moduleType, moduleName, registrant) {
	  return setMap({
	    map: modules,
	    keys: [type, name, moduleType, moduleName],
	    value: registrant
	  });
	}

	function getModule(type, name, moduleType, moduleName) {
	  return getMap({
	    map: modules,
	    keys: [type, name, moduleType, moduleName]
	  });
	}

	var extension = function extension() {
	  // e.g. extension('renderer', 'svg')
	  if (arguments.length === 2) {
	    return getExtension.apply(null, arguments);
	  } // e.g. extension('renderer', 'svg', { ... })
	  else if (arguments.length === 3) {
	      return setExtension.apply(null, arguments);
	    } // e.g. extension('renderer', 'svg', 'nodeShape', 'ellipse')
	    else if (arguments.length === 4) {
	        return getModule.apply(null, arguments);
	      } // e.g. extension('renderer', 'svg', 'nodeShape', 'ellipse', { ... })
	      else if (arguments.length === 5) {
	          return setModule.apply(null, arguments);
	        } else {
	          error('Invalid extension access syntax');
	        }
	}; // allows a core instance to access extensions internally


	Core.prototype.extension = extension; // included extensions

	incExts.forEach(function (group) {
	  group.extensions.forEach(function (ext) {
	    setExtension(group.type, ext.name, ext.impl);
	  });
	});

	// (useful for init)

	var Stylesheet = function Stylesheet() {
	  if (!(this instanceof Stylesheet)) {
	    return new Stylesheet();
	  }

	  this.length = 0;
	};

	var sheetfn = Stylesheet.prototype;

	sheetfn.instanceString = function () {
	  return 'stylesheet';
	}; // just store the selector to be parsed later


	sheetfn.selector = function (selector) {
	  var i = this.length++;
	  this[i] = {
	    selector: selector,
	    properties: []
	  };
	  return this; // chaining
	}; // just store the property to be parsed later


	sheetfn.css = function (name, value) {
	  var i = this.length - 1;

	  if (string(name)) {
	    this[i].properties.push({
	      name: name,
	      value: value
	    });
	  } else if (plainObject(name)) {
	    var map = name;
	    var propNames = Object.keys(map);

	    for (var j = 0; j < propNames.length; j++) {
	      var key = propNames[j];
	      var mapVal = map[key];

	      if (mapVal == null) {
	        continue;
	      }

	      var prop = Style.properties[key] || Style.properties[dash2camel(key)];

	      if (prop == null) {
	        continue;
	      }

	      var _name = prop.name;
	      var _value = mapVal;
	      this[i].properties.push({
	        name: _name,
	        value: _value
	      });
	    }
	  }

	  return this; // chaining
	};

	sheetfn.style = sheetfn.css; // generate a real style object from the dummy stylesheet

	sheetfn.generateStyle = function (cy) {
	  var style = new Style(cy);
	  return this.appendToStyle(style);
	}; // append a dummy stylesheet object on a real style object


	sheetfn.appendToStyle = function (style) {
	  for (var i = 0; i < this.length; i++) {
	    var context = this[i];
	    var selector = context.selector;
	    var props = context.properties;
	    style.selector(selector); // apply selector

	    for (var j = 0; j < props.length; j++) {
	      var prop = props[j];
	      style.css(prop.name, prop.value); // apply property
	    }
	  }

	  return style;
	};

	var version = "3.14.1";

	var cytoscape = function cytoscape(options) {
	  // if no options specified, use default
	  if (options === undefined) {
	    options = {};
	  } // create instance


	  if (plainObject(options)) {
	    return new Core(options);
	  } // allow for registration of extensions
	  else if (string(options)) {
	      return extension.apply(extension, arguments);
	    }
	}; // e.g. cytoscape.use( require('cytoscape-foo'), bar )


	cytoscape.use = function (ext) {
	  var args = Array.prototype.slice.call(arguments, 1); // args to pass to ext

	  args.unshift(cytoscape); // cytoscape is first arg to ext

	  ext.apply(null, args);
	  return this;
	};

	cytoscape.warnings = function (bool) {
	  return warnings(bool);
	}; // replaced by build system


	cytoscape.version = version; // expose public apis (mostly for extensions)

	cytoscape.stylesheet = cytoscape.Stylesheet = Stylesheet;

	module.exports = cytoscape;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(296).setImmediate))

/***/ }),
/* 296 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {var scope = (typeof global !== "undefined" && global) ||
	            (typeof self !== "undefined" && self) ||
	            window;
	var apply = Function.prototype.apply;

	// DOM APIs, for completeness

	exports.setTimeout = function() {
	  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);
	};
	exports.setInterval = function() {
	  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);
	};
	exports.clearTimeout =
	exports.clearInterval = function(timeout) {
	  if (timeout) {
	    timeout.close();
	  }
	};

	function Timeout(id, clearFn) {
	  this._id = id;
	  this._clearFn = clearFn;
	}
	Timeout.prototype.unref = Timeout.prototype.ref = function() {};
	Timeout.prototype.close = function() {
	  this._clearFn.call(scope, this._id);
	};

	// Does not start the time, just sets up the members needed.
	exports.enroll = function(item, msecs) {
	  clearTimeout(item._idleTimeoutId);
	  item._idleTimeout = msecs;
	};

	exports.unenroll = function(item) {
	  clearTimeout(item._idleTimeoutId);
	  item._idleTimeout = -1;
	};

	exports._unrefActive = exports.active = function(item) {
	  clearTimeout(item._idleTimeoutId);

	  var msecs = item._idleTimeout;
	  if (msecs >= 0) {
	    item._idleTimeoutId = setTimeout(function onTimeout() {
	      if (item._onTimeout)
	        item._onTimeout();
	    }, msecs);
	  }
	};

	// setimmediate attaches itself to the global object
	__webpack_require__(297);
	// On some exotic environments, it's not clear which object `setimmediate` was
	// able to install onto.  Search each possibility in the same order as the
	// `setimmediate` library.
	exports.setImmediate = (typeof self !== "undefined" && self.setImmediate) ||
	                       (typeof global !== "undefined" && global.setImmediate) ||
	                       (this && this.setImmediate);
	exports.clearImmediate = (typeof self !== "undefined" && self.clearImmediate) ||
	                         (typeof global !== "undefined" && global.clearImmediate) ||
	                         (this && this.clearImmediate);

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 297 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {
	    "use strict";

	    if (global.setImmediate) {
	        return;
	    }

	    var nextHandle = 1; // Spec says greater than zero
	    var tasksByHandle = {};
	    var currentlyRunningATask = false;
	    var doc = global.document;
	    var registerImmediate;

	    function setImmediate(callback) {
	      // Callback can either be a function or a string
	      if (typeof callback !== "function") {
	        callback = new Function("" + callback);
	      }
	      // Copy function arguments
	      var args = new Array(arguments.length - 1);
	      for (var i = 0; i < args.length; i++) {
	          args[i] = arguments[i + 1];
	      }
	      // Store and register the task
	      var task = { callback: callback, args: args };
	      tasksByHandle[nextHandle] = task;
	      registerImmediate(nextHandle);
	      return nextHandle++;
	    }

	    function clearImmediate(handle) {
	        delete tasksByHandle[handle];
	    }

	    function run(task) {
	        var callback = task.callback;
	        var args = task.args;
	        switch (args.length) {
	        case 0:
	            callback();
	            break;
	        case 1:
	            callback(args[0]);
	            break;
	        case 2:
	            callback(args[0], args[1]);
	            break;
	        case 3:
	            callback(args[0], args[1], args[2]);
	            break;
	        default:
	            callback.apply(undefined, args);
	            break;
	        }
	    }

	    function runIfPresent(handle) {
	        // From the spec: "Wait until any invocations of this algorithm started before this one have completed."
	        // So if we're currently running a task, we'll need to delay this invocation.
	        if (currentlyRunningATask) {
	            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a
	            // "too much recursion" error.
	            setTimeout(runIfPresent, 0, handle);
	        } else {
	            var task = tasksByHandle[handle];
	            if (task) {
	                currentlyRunningATask = true;
	                try {
	                    run(task);
	                } finally {
	                    clearImmediate(handle);
	                    currentlyRunningATask = false;
	                }
	            }
	        }
	    }

	    function installNextTickImplementation() {
	        registerImmediate = function(handle) {
	            process.nextTick(function () { runIfPresent(handle); });
	        };
	    }

	    function canUsePostMessage() {
	        // The test against `importScripts` prevents this implementation from being installed inside a web worker,
	        // where `global.postMessage` means something completely different and can't be used for this purpose.
	        if (global.postMessage && !global.importScripts) {
	            var postMessageIsAsynchronous = true;
	            var oldOnMessage = global.onmessage;
	            global.onmessage = function() {
	                postMessageIsAsynchronous = false;
	            };
	            global.postMessage("", "*");
	            global.onmessage = oldOnMessage;
	            return postMessageIsAsynchronous;
	        }
	    }

	    function installPostMessageImplementation() {
	        // Installs an event handler on `global` for the `message` event: see
	        // * https://developer.mozilla.org/en/DOM/window.postMessage
	        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages

	        var messagePrefix = "setImmediate$" + Math.random() + "$";
	        var onGlobalMessage = function(event) {
	            if (event.source === global &&
	                typeof event.data === "string" &&
	                event.data.indexOf(messagePrefix) === 0) {
	                runIfPresent(+event.data.slice(messagePrefix.length));
	            }
	        };

	        if (global.addEventListener) {
	            global.addEventListener("message", onGlobalMessage, false);
	        } else {
	            global.attachEvent("onmessage", onGlobalMessage);
	        }

	        registerImmediate = function(handle) {
	            global.postMessage(messagePrefix + handle, "*");
	        };
	    }

	    function installMessageChannelImplementation() {
	        var channel = new MessageChannel();
	        channel.port1.onmessage = function(event) {
	            var handle = event.data;
	            runIfPresent(handle);
	        };

	        registerImmediate = function(handle) {
	            channel.port2.postMessage(handle);
	        };
	    }

	    function installReadyStateChangeImplementation() {
	        var html = doc.documentElement;
	        registerImmediate = function(handle) {
	            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
	            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
	            var script = doc.createElement("script");
	            script.onreadystatechange = function () {
	                runIfPresent(handle);
	                script.onreadystatechange = null;
	                html.removeChild(script);
	                script = null;
	            };
	            html.appendChild(script);
	        };
	    }

	    function installSetTimeoutImplementation() {
	        registerImmediate = function(handle) {
	            setTimeout(runIfPresent, 0, handle);
	        };
	    }

	    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.
	    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);
	    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;

	    // Don't get fooled by e.g. browserify environments.
	    if ({}.toString.call(global.process) === "[object process]") {
	        // For Node.js before 0.9
	        installNextTickImplementation();

	    } else if (canUsePostMessage()) {
	        // For non-IE10 modern browsers
	        installPostMessageImplementation();

	    } else if (global.MessageChannel) {
	        // For web workers, where supported
	        installMessageChannelImplementation();

	    } else if (doc && "onreadystatechange" in doc.createElement("script")) {
	        // For IE 6–8
	        installReadyStateChangeImplementation();

	    } else {
	        // For older browsers
	        installSetTimeoutImplementation();
	    }

	    attachTo.setImmediate = setImmediate;
	    attachTo.clearImmediate = clearImmediate;
	}(typeof self === "undefined" ? typeof global === "undefined" ? this : global : self));

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(298)))

/***/ }),
/* 298 */
/***/ (function(module, exports) {

	// shim for using process in browser
	var process = module.exports = {};

	// cached from whatever global is present so that test runners that stub it
	// don't break things.  But we need to wrap it in a try catch in case it is
	// wrapped in strict mode code which doesn't define any globals.  It's inside a
	// function because try/catches deoptimize in certain engines.

	var cachedSetTimeout;
	var cachedClearTimeout;

	function defaultSetTimout() {
	    throw new Error('setTimeout has not been defined');
	}
	function defaultClearTimeout () {
	    throw new Error('clearTimeout has not been defined');
	}
	(function () {
	    try {
	        if (typeof setTimeout === 'function') {
	            cachedSetTimeout = setTimeout;
	        } else {
	            cachedSetTimeout = defaultSetTimout;
	        }
	    } catch (e) {
	        cachedSetTimeout = defaultSetTimout;
	    }
	    try {
	        if (typeof clearTimeout === 'function') {
	            cachedClearTimeout = clearTimeout;
	        } else {
	            cachedClearTimeout = defaultClearTimeout;
	        }
	    } catch (e) {
	        cachedClearTimeout = defaultClearTimeout;
	    }
	} ())
	function runTimeout(fun) {
	    if (cachedSetTimeout === setTimeout) {
	        //normal enviroments in sane situations
	        return setTimeout(fun, 0);
	    }
	    // if setTimeout wasn't available but was latter defined
	    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
	        cachedSetTimeout = setTimeout;
	        return setTimeout(fun, 0);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedSetTimeout(fun, 0);
	    } catch(e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
	            return cachedSetTimeout.call(null, fun, 0);
	        } catch(e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
	            return cachedSetTimeout.call(this, fun, 0);
	        }
	    }


	}
	function runClearTimeout(marker) {
	    if (cachedClearTimeout === clearTimeout) {
	        //normal enviroments in sane situations
	        return clearTimeout(marker);
	    }
	    // if clearTimeout wasn't available but was latter defined
	    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
	        cachedClearTimeout = clearTimeout;
	        return clearTimeout(marker);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedClearTimeout(marker);
	    } catch (e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
	            return cachedClearTimeout.call(null, marker);
	        } catch (e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
	            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
	            return cachedClearTimeout.call(this, marker);
	        }
	    }



	}
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;

	function cleanUpNextTick() {
	    if (!draining || !currentQueue) {
	        return;
	    }
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}

	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = runTimeout(cleanUpNextTick);
	    draining = true;

	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    runClearTimeout(timeout);
	}

	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        runTimeout(drainQueue);
	    }
	};

	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};

	function noop() {}

	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;
	process.prependListener = noop;
	process.prependOnceListener = noop;

	process.listeners = function (name) { return [] }

	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};

	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ }),
/* 299 */
/***/ (function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {/**
	 * lodash (Custom Build) <https://lodash.com/>
	 * Build: `lodash modularize exports="npm" -o ./`
	 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
	 * Released under MIT license <https://lodash.com/license>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 */

	/** Used as the `TypeError` message for "Functions" methods. */
	var FUNC_ERROR_TEXT = 'Expected a function';

	/** Used as references for various `Number` constants. */
	var NAN = 0 / 0;

	/** `Object#toString` result references. */
	var symbolTag = '[object Symbol]';

	/** Used to match leading and trailing whitespace. */
	var reTrim = /^\s+|\s+$/g;

	/** Used to detect bad signed hexadecimal string values. */
	var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

	/** Used to detect binary string values. */
	var reIsBinary = /^0b[01]+$/i;

	/** Used to detect octal string values. */
	var reIsOctal = /^0o[0-7]+$/i;

	/** Built-in method references without a dependency on `root`. */
	var freeParseInt = parseInt;

	/** Detect free variable `global` from Node.js. */
	var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

	/** Detect free variable `self`. */
	var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

	/** Used as a reference to the global object. */
	var root = freeGlobal || freeSelf || Function('return this')();

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objectToString = objectProto.toString;

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeMax = Math.max,
	    nativeMin = Math.min;

	/**
	 * Gets the timestamp of the number of milliseconds that have elapsed since
	 * the Unix epoch (1 January 1970 00:00:00 UTC).
	 *
	 * @static
	 * @memberOf _
	 * @since 2.4.0
	 * @category Date
	 * @returns {number} Returns the timestamp.
	 * @example
	 *
	 * _.defer(function(stamp) {
	 *   console.log(_.now() - stamp);
	 * }, _.now());
	 * // => Logs the number of milliseconds it took for the deferred invocation.
	 */
	var now = function() {
	  return root.Date.now();
	};

	/**
	 * Creates a debounced function that delays invoking `func` until after `wait`
	 * milliseconds have elapsed since the last time the debounced function was
	 * invoked. The debounced function comes with a `cancel` method to cancel
	 * delayed `func` invocations and a `flush` method to immediately invoke them.
	 * Provide `options` to indicate whether `func` should be invoked on the
	 * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
	 * with the last arguments provided to the debounced function. Subsequent
	 * calls to the debounced function return the result of the last `func`
	 * invocation.
	 *
	 * **Note:** If `leading` and `trailing` options are `true`, `func` is
	 * invoked on the trailing edge of the timeout only if the debounced function
	 * is invoked more than once during the `wait` timeout.
	 *
	 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
	 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
	 *
	 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
	 * for details over the differences between `_.debounce` and `_.throttle`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Function
	 * @param {Function} func The function to debounce.
	 * @param {number} [wait=0] The number of milliseconds to delay.
	 * @param {Object} [options={}] The options object.
	 * @param {boolean} [options.leading=false]
	 *  Specify invoking on the leading edge of the timeout.
	 * @param {number} [options.maxWait]
	 *  The maximum time `func` is allowed to be delayed before it's invoked.
	 * @param {boolean} [options.trailing=true]
	 *  Specify invoking on the trailing edge of the timeout.
	 * @returns {Function} Returns the new debounced function.
	 * @example
	 *
	 * // Avoid costly calculations while the window size is in flux.
	 * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
	 *
	 * // Invoke `sendMail` when clicked, debouncing subsequent calls.
	 * jQuery(element).on('click', _.debounce(sendMail, 300, {
	 *   'leading': true,
	 *   'trailing': false
	 * }));
	 *
	 * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
	 * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
	 * var source = new EventSource('/stream');
	 * jQuery(source).on('message', debounced);
	 *
	 * // Cancel the trailing debounced invocation.
	 * jQuery(window).on('popstate', debounced.cancel);
	 */
	function debounce(func, wait, options) {
	  var lastArgs,
	      lastThis,
	      maxWait,
	      result,
	      timerId,
	      lastCallTime,
	      lastInvokeTime = 0,
	      leading = false,
	      maxing = false,
	      trailing = true;

	  if (typeof func != 'function') {
	    throw new TypeError(FUNC_ERROR_TEXT);
	  }
	  wait = toNumber(wait) || 0;
	  if (isObject(options)) {
	    leading = !!options.leading;
	    maxing = 'maxWait' in options;
	    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
	    trailing = 'trailing' in options ? !!options.trailing : trailing;
	  }

	  function invokeFunc(time) {
	    var args = lastArgs,
	        thisArg = lastThis;

	    lastArgs = lastThis = undefined;
	    lastInvokeTime = time;
	    result = func.apply(thisArg, args);
	    return result;
	  }

	  function leadingEdge(time) {
	    // Reset any `maxWait` timer.
	    lastInvokeTime = time;
	    // Start the timer for the trailing edge.
	    timerId = setTimeout(timerExpired, wait);
	    // Invoke the leading edge.
	    return leading ? invokeFunc(time) : result;
	  }

	  function remainingWait(time) {
	    var timeSinceLastCall = time - lastCallTime,
	        timeSinceLastInvoke = time - lastInvokeTime,
	        result = wait - timeSinceLastCall;

	    return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;
	  }

	  function shouldInvoke(time) {
	    var timeSinceLastCall = time - lastCallTime,
	        timeSinceLastInvoke = time - lastInvokeTime;

	    // Either this is the first call, activity has stopped and we're at the
	    // trailing edge, the system time has gone backwards and we're treating
	    // it as the trailing edge, or we've hit the `maxWait` limit.
	    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
	      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
	  }

	  function timerExpired() {
	    var time = now();
	    if (shouldInvoke(time)) {
	      return trailingEdge(time);
	    }
	    // Restart the timer.
	    timerId = setTimeout(timerExpired, remainingWait(time));
	  }

	  function trailingEdge(time) {
	    timerId = undefined;

	    // Only invoke if we have `lastArgs` which means `func` has been
	    // debounced at least once.
	    if (trailing && lastArgs) {
	      return invokeFunc(time);
	    }
	    lastArgs = lastThis = undefined;
	    return result;
	  }

	  function cancel() {
	    if (timerId !== undefined) {
	      clearTimeout(timerId);
	    }
	    lastInvokeTime = 0;
	    lastArgs = lastCallTime = lastThis = timerId = undefined;
	  }

	  function flush() {
	    return timerId === undefined ? result : trailingEdge(now());
	  }

	  function debounced() {
	    var time = now(),
	        isInvoking = shouldInvoke(time);

	    lastArgs = arguments;
	    lastThis = this;
	    lastCallTime = time;

	    if (isInvoking) {
	      if (timerId === undefined) {
	        return leadingEdge(lastCallTime);
	      }
	      if (maxing) {
	        // Handle invocations in a tight loop.
	        timerId = setTimeout(timerExpired, wait);
	        return invokeFunc(lastCallTime);
	      }
	    }
	    if (timerId === undefined) {
	      timerId = setTimeout(timerExpired, wait);
	    }
	    return result;
	  }
	  debounced.cancel = cancel;
	  debounced.flush = flush;
	  return debounced;
	}

	/**
	 * Checks if `value` is the
	 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
	 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	 * @example
	 *
	 * _.isObject({});
	 * // => true
	 *
	 * _.isObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isObject(_.noop);
	 * // => true
	 *
	 * _.isObject(null);
	 * // => false
	 */
	function isObject(value) {
	  var type = typeof value;
	  return !!value && (type == 'object' || type == 'function');
	}

	/**
	 * Checks if `value` is object-like. A value is object-like if it's not `null`
	 * and has a `typeof` result of "object".
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	 * @example
	 *
	 * _.isObjectLike({});
	 * // => true
	 *
	 * _.isObjectLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isObjectLike(_.noop);
	 * // => false
	 *
	 * _.isObjectLike(null);
	 * // => false
	 */
	function isObjectLike(value) {
	  return !!value && typeof value == 'object';
	}

	/**
	 * Checks if `value` is classified as a `Symbol` primitive or object.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
	 * @example
	 *
	 * _.isSymbol(Symbol.iterator);
	 * // => true
	 *
	 * _.isSymbol('abc');
	 * // => false
	 */
	function isSymbol(value) {
	  return typeof value == 'symbol' ||
	    (isObjectLike(value) && objectToString.call(value) == symbolTag);
	}

	/**
	 * Converts `value` to a number.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to process.
	 * @returns {number} Returns the number.
	 * @example
	 *
	 * _.toNumber(3.2);
	 * // => 3.2
	 *
	 * _.toNumber(Number.MIN_VALUE);
	 * // => 5e-324
	 *
	 * _.toNumber(Infinity);
	 * // => Infinity
	 *
	 * _.toNumber('3.2');
	 * // => 3.2
	 */
	function toNumber(value) {
	  if (typeof value == 'number') {
	    return value;
	  }
	  if (isSymbol(value)) {
	    return NAN;
	  }
	  if (isObject(value)) {
	    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
	    value = isObject(other) ? (other + '') : other;
	  }
	  if (typeof value != 'string') {
	    return value === 0 ? value : +value;
	  }
	  value = value.replace(reTrim, '');
	  var isBinary = reIsBinary.test(value);
	  return (isBinary || reIsOctal.test(value))
	    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
	    : (reIsBadHex.test(value) ? NAN : +value);
	}

	module.exports = debounce;

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 300 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(301);


/***/ }),
/* 301 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// Generated by CoffeeScript 1.8.0
	(function() {
	  var Heap, defaultCmp, floor, heapify, heappop, heappush, heappushpop, heapreplace, insort, min, nlargest, nsmallest, updateItem, _siftdown, _siftup;

	  floor = Math.floor, min = Math.min;


	  /*
	  Default comparison function to be used
	   */

	  defaultCmp = function(x, y) {
	    if (x < y) {
	      return -1;
	    }
	    if (x > y) {
	      return 1;
	    }
	    return 0;
	  };


	  /*
	  Insert item x in list a, and keep it sorted assuming a is sorted.
	  
	  If x is already in a, insert it to the right of the rightmost x.
	  
	  Optional args lo (default 0) and hi (default a.length) bound the slice
	  of a to be searched.
	   */

	  insort = function(a, x, lo, hi, cmp) {
	    var mid;
	    if (lo == null) {
	      lo = 0;
	    }
	    if (cmp == null) {
	      cmp = defaultCmp;
	    }
	    if (lo < 0) {
	      throw new Error('lo must be non-negative');
	    }
	    if (hi == null) {
	      hi = a.length;
	    }
	    while (lo < hi) {
	      mid = floor((lo + hi) / 2);
	      if (cmp(x, a[mid]) < 0) {
	        hi = mid;
	      } else {
	        lo = mid + 1;
	      }
	    }
	    return ([].splice.apply(a, [lo, lo - lo].concat(x)), x);
	  };


	  /*
	  Push item onto heap, maintaining the heap invariant.
	   */

	  heappush = function(array, item, cmp) {
	    if (cmp == null) {
	      cmp = defaultCmp;
	    }
	    array.push(item);
	    return _siftdown(array, 0, array.length - 1, cmp);
	  };


	  /*
	  Pop the smallest item off the heap, maintaining the heap invariant.
	   */

	  heappop = function(array, cmp) {
	    var lastelt, returnitem;
	    if (cmp == null) {
	      cmp = defaultCmp;
	    }
	    lastelt = array.pop();
	    if (array.length) {
	      returnitem = array[0];
	      array[0] = lastelt;
	      _siftup(array, 0, cmp);
	    } else {
	      returnitem = lastelt;
	    }
	    return returnitem;
	  };


	  /*
	  Pop and return the current smallest value, and add the new item.
	  
	  This is more efficient than heappop() followed by heappush(), and can be
	  more appropriate when using a fixed size heap. Note that the value
	  returned may be larger than item! That constrains reasonable use of
	  this routine unless written as part of a conditional replacement:
	      if item > array[0]
	        item = heapreplace(array, item)
	   */

	  heapreplace = function(array, item, cmp) {
	    var returnitem;
	    if (cmp == null) {
	      cmp = defaultCmp;
	    }
	    returnitem = array[0];
	    array[0] = item;
	    _siftup(array, 0, cmp);
	    return returnitem;
	  };


	  /*
	  Fast version of a heappush followed by a heappop.
	   */

	  heappushpop = function(array, item, cmp) {
	    var _ref;
	    if (cmp == null) {
	      cmp = defaultCmp;
	    }
	    if (array.length && cmp(array[0], item) < 0) {
	      _ref = [array[0], item], item = _ref[0], array[0] = _ref[1];
	      _siftup(array, 0, cmp);
	    }
	    return item;
	  };


	  /*
	  Transform list into a heap, in-place, in O(array.length) time.
	   */

	  heapify = function(array, cmp) {
	    var i, _i, _j, _len, _ref, _ref1, _results, _results1;
	    if (cmp == null) {
	      cmp = defaultCmp;
	    }
	    _ref1 = (function() {
	      _results1 = [];
	      for (var _j = 0, _ref = floor(array.length / 2); 0 <= _ref ? _j < _ref : _j > _ref; 0 <= _ref ? _j++ : _j--){ _results1.push(_j); }
	      return _results1;
	    }).apply(this).reverse();
	    _results = [];
	    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
	      i = _ref1[_i];
	      _results.push(_siftup(array, i, cmp));
	    }
	    return _results;
	  };


	  /*
	  Update the position of the given item in the heap.
	  This function should be called every time the item is being modified.
	   */

	  updateItem = function(array, item, cmp) {
	    var pos;
	    if (cmp == null) {
	      cmp = defaultCmp;
	    }
	    pos = array.indexOf(item);
	    if (pos === -1) {
	      return;
	    }
	    _siftdown(array, 0, pos, cmp);
	    return _siftup(array, pos, cmp);
	  };


	  /*
	  Find the n largest elements in a dataset.
	   */

	  nlargest = function(array, n, cmp) {
	    var elem, result, _i, _len, _ref;
	    if (cmp == null) {
	      cmp = defaultCmp;
	    }
	    result = array.slice(0, n);
	    if (!result.length) {
	      return result;
	    }
	    heapify(result, cmp);
	    _ref = array.slice(n);
	    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
	      elem = _ref[_i];
	      heappushpop(result, elem, cmp);
	    }
	    return result.sort(cmp).reverse();
	  };


	  /*
	  Find the n smallest elements in a dataset.
	   */

	  nsmallest = function(array, n, cmp) {
	    var elem, i, los, result, _i, _j, _len, _ref, _ref1, _results;
	    if (cmp == null) {
	      cmp = defaultCmp;
	    }
	    if (n * 10 <= array.length) {
	      result = array.slice(0, n).sort(cmp);
	      if (!result.length) {
	        return result;
	      }
	      los = result[result.length - 1];
	      _ref = array.slice(n);
	      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
	        elem = _ref[_i];
	        if (cmp(elem, los) < 0) {
	          insort(result, elem, 0, null, cmp);
	          result.pop();
	          los = result[result.length - 1];
	        }
	      }
	      return result;
	    }
	    heapify(array, cmp);
	    _results = [];
	    for (i = _j = 0, _ref1 = min(n, array.length); 0 <= _ref1 ? _j < _ref1 : _j > _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
	      _results.push(heappop(array, cmp));
	    }
	    return _results;
	  };

	  _siftdown = function(array, startpos, pos, cmp) {
	    var newitem, parent, parentpos;
	    if (cmp == null) {
	      cmp = defaultCmp;
	    }
	    newitem = array[pos];
	    while (pos > startpos) {
	      parentpos = (pos - 1) >> 1;
	      parent = array[parentpos];
	      if (cmp(newitem, parent) < 0) {
	        array[pos] = parent;
	        pos = parentpos;
	        continue;
	      }
	      break;
	    }
	    return array[pos] = newitem;
	  };

	  _siftup = function(array, pos, cmp) {
	    var childpos, endpos, newitem, rightpos, startpos;
	    if (cmp == null) {
	      cmp = defaultCmp;
	    }
	    endpos = array.length;
	    startpos = pos;
	    newitem = array[pos];
	    childpos = 2 * pos + 1;
	    while (childpos < endpos) {
	      rightpos = childpos + 1;
	      if (rightpos < endpos && !(cmp(array[childpos], array[rightpos]) < 0)) {
	        childpos = rightpos;
	      }
	      array[pos] = array[childpos];
	      pos = childpos;
	      childpos = 2 * pos + 1;
	    }
	    array[pos] = newitem;
	    return _siftdown(array, startpos, pos, cmp);
	  };

	  Heap = (function() {
	    Heap.push = heappush;

	    Heap.pop = heappop;

	    Heap.replace = heapreplace;

	    Heap.pushpop = heappushpop;

	    Heap.heapify = heapify;

	    Heap.updateItem = updateItem;

	    Heap.nlargest = nlargest;

	    Heap.nsmallest = nsmallest;

	    function Heap(cmp) {
	      this.cmp = cmp != null ? cmp : defaultCmp;
	      this.nodes = [];
	    }

	    Heap.prototype.push = function(x) {
	      return heappush(this.nodes, x, this.cmp);
	    };

	    Heap.prototype.pop = function() {
	      return heappop(this.nodes, this.cmp);
	    };

	    Heap.prototype.peek = function() {
	      return this.nodes[0];
	    };

	    Heap.prototype.contains = function(x) {
	      return this.nodes.indexOf(x) !== -1;
	    };

	    Heap.prototype.replace = function(x) {
	      return heapreplace(this.nodes, x, this.cmp);
	    };

	    Heap.prototype.pushpop = function(x) {
	      return heappushpop(this.nodes, x, this.cmp);
	    };

	    Heap.prototype.heapify = function() {
	      return heapify(this.nodes, this.cmp);
	    };

	    Heap.prototype.updateItem = function(x) {
	      return updateItem(this.nodes, x, this.cmp);
	    };

	    Heap.prototype.clear = function() {
	      return this.nodes = [];
	    };

	    Heap.prototype.empty = function() {
	      return this.nodes.length === 0;
	    };

	    Heap.prototype.size = function() {
	      return this.nodes.length;
	    };

	    Heap.prototype.clone = function() {
	      var heap;
	      heap = new Heap();
	      heap.nodes = this.nodes.slice(0);
	      return heap;
	    };

	    Heap.prototype.toArray = function() {
	      return this.nodes.slice(0);
	    };

	    Heap.prototype.insert = Heap.prototype.push;

	    Heap.prototype.top = Heap.prototype.peek;

	    Heap.prototype.front = Heap.prototype.peek;

	    Heap.prototype.has = Heap.prototype.contains;

	    Heap.prototype.copy = Heap.prototype.clone;

	    return Heap;

	  })();

	  (function(root, factory) {
	    if (true) {
	      return !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else if (typeof exports === 'object') {
	      return module.exports = factory();
	    } else {
	      return root.Heap = factory();
	    }
	  })(this, function() {
	    return Heap;
	  });

	}).call(this);


/***/ }),
/* 302 */
/***/ (function(module, exports, __webpack_require__) {

	(function webpackUniversalModuleDefinition(root, factory) {
		if(true)
			module.exports = factory();
		else if(typeof define === 'function' && define.amd)
			define([], factory);
		else if(typeof exports === 'object')
			exports["cytoscapeCxtmenu"] = factory();
		else
			root["cytoscapeCxtmenu"] = factory();
	})(this, function() {
	return /******/ (function(modules) { // webpackBootstrap
	/******/ 	// The module cache
	/******/ 	var installedModules = {};
	/******/
	/******/ 	// The require function
	/******/ 	function __webpack_require__(moduleId) {
	/******/
	/******/ 		// Check if module is in cache
	/******/ 		if(installedModules[moduleId]) {
	/******/ 			return installedModules[moduleId].exports;
	/******/ 		}
	/******/ 		// Create a new module (and put it into the cache)
	/******/ 		var module = installedModules[moduleId] = {
	/******/ 			i: moduleId,
	/******/ 			l: false,
	/******/ 			exports: {}
	/******/ 		};
	/******/
	/******/ 		// Execute the module function
	/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
	/******/
	/******/ 		// Flag the module as loaded
	/******/ 		module.l = true;
	/******/
	/******/ 		// Return the exports of the module
	/******/ 		return module.exports;
	/******/ 	}
	/******/
	/******/
	/******/ 	// expose the modules object (__webpack_modules__)
	/******/ 	__webpack_require__.m = modules;
	/******/
	/******/ 	// expose the module cache
	/******/ 	__webpack_require__.c = installedModules;
	/******/
	/******/ 	// identity function for calling harmony imports with the correct context
	/******/ 	__webpack_require__.i = function(value) { return value; };
	/******/
	/******/ 	// define getter function for harmony exports
	/******/ 	__webpack_require__.d = function(exports, name, getter) {
	/******/ 		if(!__webpack_require__.o(exports, name)) {
	/******/ 			Object.defineProperty(exports, name, {
	/******/ 				configurable: false,
	/******/ 				enumerable: true,
	/******/ 				get: getter
	/******/ 			});
	/******/ 		}
	/******/ 	};
	/******/
	/******/ 	// getDefaultExport function for compatibility with non-harmony modules
	/******/ 	__webpack_require__.n = function(module) {
	/******/ 		var getter = module && module.__esModule ?
	/******/ 			function getDefault() { return module['default']; } :
	/******/ 			function getModuleExports() { return module; };
	/******/ 		__webpack_require__.d(getter, 'a', getter);
	/******/ 		return getter;
	/******/ 	};
	/******/
	/******/ 	// Object.prototype.hasOwnProperty.call
	/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
	/******/
	/******/ 	// __webpack_public_path__
	/******/ 	__webpack_require__.p = "";
	/******/
	/******/ 	// Load entry module and return exports
	/******/ 	return __webpack_require__(__webpack_require__.s = 4);
	/******/ })
	/************************************************************************/
	/******/ ([
	/* 0 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	var defaults = __webpack_require__(2);
	var assign = __webpack_require__(1);

	var _require = __webpack_require__(3),
	    removeEles = _require.removeEles,
	    setStyles = _require.setStyles,
	    createElement = _require.createElement,
	    getPixelRatio = _require.getPixelRatio,
	    getOffset = _require.getOffset;

	var cxtmenu = function cxtmenu(params) {
	  var options = assign({}, defaults, params);
	  var cy = this;
	  var container = cy.container();
	  var target = void 0;

	  var data = {
	    options: options,
	    handlers: [],
	    container: createElement({ class: 'cxtmenu' })
	  };

	  var wrapper = data.container;
	  var parent = createElement();
	  var canvas = createElement({ tag: 'canvas' });
	  var commands = [];
	  var c2d = canvas.getContext('2d');
	  var r = options.menuRadius;
	  var containerSize = (r + options.activePadding) * 2;
	  var activeCommandI = void 0;
	  var offset = void 0;

	  container.insertBefore(wrapper, container.firstChild);
	  wrapper.appendChild(parent);
	  parent.appendChild(canvas);

	  setStyles(wrapper, {
	    position: 'absolute',
	    zIndex: options.zIndex,
	    userSelect: 'none',
	    pointerEvents: 'none' // prevent events on menu in modern browsers
	  });

	  // prevent events on menu in legacy browsers
	  ['mousedown', 'mousemove', 'mouseup', 'contextmenu'].forEach(function (evt) {
	    wrapper.addEventListener(evt, function (e) {
	      e.preventDefault();

	      return false;
	    });
	  });

	  setStyles(parent, {
	    display: 'none',
	    width: containerSize + 'px',
	    height: containerSize + 'px',
	    position: 'absolute',
	    zIndex: 1,
	    marginLeft: -options.activePadding + 'px',
	    marginTop: -options.activePadding + 'px',
	    userSelect: 'none'
	  });

	  canvas.width = containerSize;
	  canvas.height = containerSize;

	  function createMenuItems() {
	    removeEles('.cxtmenu-item', parent);
	    var dtheta = 2 * Math.PI / commands.length;
	    var theta1 = Math.PI / 2;
	    var theta2 = theta1 + dtheta;

	    for (var i = 0; i < commands.length; i++) {
	      var command = commands[i];

	      var midtheta = (theta1 + theta2) / 2;
	      var rx1 = 0.66 * r * Math.cos(midtheta);
	      var ry1 = 0.66 * r * Math.sin(midtheta);

	      var item = createElement({ class: 'cxtmenu-item' });
	      setStyles(item, {
	        color: options.itemColor,
	        cursor: 'default',
	        display: 'table',
	        'text-align': 'center',
	        //background: 'red',
	        position: 'absolute',
	        'text-shadow': '-1px -1px 2px ' + options.itemTextShadowColor + ', 1px -1px 2px ' + options.itemTextShadowColor + ', -1px 1px 2px ' + options.itemTextShadowColor + ', 1px 1px 1px ' + options.itemTextShadowColor,
	        left: '50%',
	        top: '50%',
	        'min-height': r * 0.66 + 'px',
	        width: r * 0.66 + 'px',
	        height: r * 0.66 + 'px',
	        marginLeft: rx1 - r * 0.33 + 'px',
	        marginTop: -ry1 - r * 0.33 + 'px'
	      });

	      var content = createElement({ class: 'cxtmenu-content' });

	      if (command.content instanceof HTMLElement) {
	        content.appendChild(command.content);
	      } else {
	        content.innerHTML = command.content;
	      }

	      setStyles(content, {
	        'width': r * 0.66 + 'px',
	        'height': r * 0.66 + 'px',
	        'vertical-align': 'middle',
	        'display': 'table-cell'
	      });

	      setStyles(content, command.contentStyle || {});

	      if (command.disabled === true || command.enabled === false) {
	        content.setAttribute('class', 'cxtmenu-content cxtmenu-disabled');
	      }

	      parent.appendChild(item);
	      item.appendChild(content);

	      theta1 += dtheta;
	      theta2 += dtheta;
	    }
	  }

	  function queueDrawBg(rspotlight) {
	    redrawQueue.drawBg = [rspotlight];
	  }

	  function drawBg(rspotlight) {
	    rspotlight = rspotlight !== undefined ? rspotlight : rs;

	    c2d.globalCompositeOperation = 'source-over';

	    c2d.clearRect(0, 0, containerSize, containerSize);

	    // draw background items
	    c2d.fillStyle = options.fillColor;
	    var dtheta = 2 * Math.PI / commands.length;
	    var theta1 = Math.PI / 2;
	    var theta2 = theta1 + dtheta;

	    for (var index = 0; index < commands.length; index++) {
	      var command = commands[index];

	      if (command.fillColor) {
	        c2d.fillStyle = command.fillColor;
	      }
	      c2d.beginPath();
	      c2d.moveTo(r + options.activePadding, r + options.activePadding);
	      c2d.arc(r + options.activePadding, r + options.activePadding, r, 2 * Math.PI - theta1, 2 * Math.PI - theta2, true);
	      c2d.closePath();
	      c2d.fill();

	      theta1 += dtheta;
	      theta2 += dtheta;

	      c2d.fillStyle = options.fillColor;
	    }

	    // draw separators between items
	    c2d.globalCompositeOperation = 'destination-out';
	    c2d.strokeStyle = 'white';
	    c2d.lineWidth = options.separatorWidth;
	    theta1 = Math.PI / 2;
	    theta2 = theta1 + dtheta;

	    for (var i = 0; i < commands.length; i++) {
	      var rx1 = r * Math.cos(theta1);
	      var ry1 = r * Math.sin(theta1);
	      c2d.beginPath();
	      c2d.moveTo(r + options.activePadding, r + options.activePadding);
	      c2d.lineTo(r + options.activePadding + rx1, r + options.activePadding - ry1);
	      c2d.closePath();
	      c2d.stroke();

	      theta1 += dtheta;
	      theta2 += dtheta;
	    }

	    c2d.fillStyle = 'white';
	    c2d.globalCompositeOperation = 'destination-out';
	    c2d.beginPath();
	    c2d.arc(r + options.activePadding, r + options.activePadding, rspotlight + options.spotlightPadding, 0, Math.PI * 2, true);
	    c2d.closePath();
	    c2d.fill();

	    c2d.globalCompositeOperation = 'source-over';
	  }

	  function queueDrawCommands(rx, ry, theta) {
	    redrawQueue.drawCommands = [rx, ry, theta];
	  }

	  function drawCommands(rx, ry, theta) {
	    var dtheta = 2 * Math.PI / commands.length;
	    var theta1 = Math.PI / 2;
	    var theta2 = theta1 + dtheta;

	    theta1 += dtheta * activeCommandI;
	    theta2 += dtheta * activeCommandI;

	    c2d.fillStyle = options.activeFillColor;
	    c2d.strokeStyle = 'black';
	    c2d.lineWidth = 1;
	    c2d.beginPath();
	    c2d.moveTo(r + options.activePadding, r + options.activePadding);
	    c2d.arc(r + options.activePadding, r + options.activePadding, r + options.activePadding, 2 * Math.PI - theta1, 2 * Math.PI - theta2, true);
	    c2d.closePath();
	    c2d.fill();

	    c2d.fillStyle = 'white';
	    c2d.globalCompositeOperation = 'destination-out';

	    var tx = r + options.activePadding + rx / r * (rs + options.spotlightPadding - options.indicatorSize / 4);
	    var ty = r + options.activePadding + ry / r * (rs + options.spotlightPadding - options.indicatorSize / 4);
	    var rot = Math.PI / 4 - theta;

	    c2d.translate(tx, ty);
	    c2d.rotate(rot);

	    // clear the indicator
	    c2d.beginPath();
	    c2d.fillRect(-options.indicatorSize / 2, -options.indicatorSize / 2, options.indicatorSize, options.indicatorSize);
	    c2d.closePath();
	    c2d.fill();

	    c2d.rotate(-rot);
	    c2d.translate(-tx, -ty);

	    // c2d.setTransform( 1, 0, 0, 1, 0, 0 );

	    // clear the spotlight
	    c2d.beginPath();
	    c2d.arc(r + options.activePadding, r + options.activePadding, rs + options.spotlightPadding, 0, Math.PI * 2, true);
	    c2d.closePath();
	    c2d.fill();

	    c2d.globalCompositeOperation = 'source-over';
	  }

	  function updatePixelRatio() {
	    var pxr = getPixelRatio();
	    var w = containerSize;
	    var h = containerSize;

	    canvas.width = w * pxr;
	    canvas.height = h * pxr;

	    canvas.style.width = w + 'px';
	    canvas.style.height = h + 'px';

	    c2d.setTransform(1, 0, 0, 1, 0, 0);
	    c2d.scale(pxr, pxr);
	  }

	  var redrawing = true;
	  var redrawQueue = {};

	  var raf = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.msRequestAnimationFrame || function (fn) {
	    return setTimeout(fn, 16);
	  };

	  var redraw = function redraw() {
	    if (redrawQueue.drawBg) {
	      drawBg.apply(null, redrawQueue.drawBg);
	    }

	    if (redrawQueue.drawCommands) {
	      drawCommands.apply(null, redrawQueue.drawCommands);
	    }

	    redrawQueue = {};

	    if (redrawing) {
	      raf(redraw);
	    }
	  };

	  // kick off
	  updatePixelRatio();
	  redraw();

	  var ctrx = void 0,
	      ctry = void 0,
	      rs = void 0;

	  var bindings = {
	    on: function on(events, selector, fn) {

	      var _fn = fn;
	      if (selector === 'core') {
	        _fn = function _fn(e) {
	          if (e.cyTarget === cy || e.target === cy) {
	            // only if event target is directly core
	            return fn.apply(this, [e]);
	          }
	        };
	      }

	      data.handlers.push({
	        events: events,
	        selector: selector,
	        fn: _fn
	      });

	      if (selector === 'core') {
	        cy.on(events, _fn);
	      } else {
	        cy.on(events, selector, _fn);
	      }

	      return this;
	    }
	  };

	  function addEventListeners() {
	    var grabbable = void 0;
	    var inGesture = false;
	    var dragHandler = void 0;
	    var zoomEnabled = void 0;
	    var panEnabled = void 0;
	    var boxEnabled = void 0;
	    var gestureStartEvent = void 0;

	    var restoreZoom = function restoreZoom() {
	      if (zoomEnabled) {
	        cy.userZoomingEnabled(true);
	      }
	    };

	    var restoreGrab = function restoreGrab() {
	      if (grabbable) {
	        target.grabify();
	      }
	    };

	    var restorePan = function restorePan() {
	      if (panEnabled) {
	        cy.userPanningEnabled(true);
	      }
	    };

	    var restoreBoxSeln = function restoreBoxSeln() {
	      if (boxEnabled) {
	        cy.boxSelectionEnabled(true);
	      }
	    };

	    var restoreGestures = function restoreGestures() {
	      restoreGrab();
	      restoreZoom();
	      restorePan();
	      restoreBoxSeln();
	    };

	    window.addEventListener('resize', updatePixelRatio);

	    bindings.on('resize', function () {
	      updatePixelRatio();
	    }).on(options.openMenuEvents, options.selector, function (e) {
	      target = this; // Remember which node the context menu is for
	      var ele = this;
	      var isCy = this === cy;

	      if (inGesture) {
	        parent.style.display = 'none';

	        inGesture = false;

	        restoreGestures();
	      }

	      if (typeof options.commands === 'function') {
	        var res = options.commands(target);
	        if (res.then) {
	          res.then(function (_commands) {
	            commands = _commands;
	            openMenu();
	          });
	        } else {
	          commands = res;
	          openMenu();
	        }
	      } else {
	        commands = options.commands;
	        openMenu();
	      }

	      function openMenu() {
	        if (!commands || commands.length === 0) {
	          return;
	        }

	        zoomEnabled = cy.userZoomingEnabled();
	        cy.userZoomingEnabled(false);

	        panEnabled = cy.userPanningEnabled();
	        cy.userPanningEnabled(false);

	        boxEnabled = cy.boxSelectionEnabled();
	        cy.boxSelectionEnabled(false);

	        grabbable = target.grabbable && target.grabbable();
	        if (grabbable) {
	          target.ungrabify();
	        }

	        var rp = void 0,
	            rw = void 0,
	            rh = void 0;
	        if (!isCy && ele.isNode() && !ele.isParent() && !options.atMouse) {
	          rp = ele.renderedPosition();
	          rw = ele.renderedWidth();
	          rh = ele.renderedHeight();
	        } else {
	          rp = e.renderedPosition || e.cyRenderedPosition;
	          rw = 1;
	          rh = 1;
	        }

	        offset = getOffset(container);

	        ctrx = rp.x;
	        ctry = rp.y;

	        createMenuItems();

	        setStyles(parent, {
	          display: 'block',
	          left: rp.x - r + 'px',
	          top: rp.y - r + 'px'
	        });

	        rs = Math.max(rw, rh) / 2;
	        rs = Math.max(rs, options.minSpotlightRadius);
	        rs = Math.min(rs, options.maxSpotlightRadius);

	        queueDrawBg();

	        activeCommandI = undefined;

	        inGesture = true;
	        gestureStartEvent = e;
	      }
	    }).on('cxtdrag tapdrag', options.selector, dragHandler = function dragHandler(e) {

	      if (!inGesture) {
	        return;
	      }

	      var origE = e.originalEvent;
	      var isTouch = origE.touches && origE.touches.length > 0;

	      var pageX = (isTouch ? origE.touches[0].pageX : origE.pageX) - window.scrollX;
	      var pageY = (isTouch ? origE.touches[0].pageY : origE.pageY) - window.scrollY;

	      activeCommandI = undefined;

	      var dx = pageX - offset.left - ctrx;
	      var dy = pageY - offset.top - ctry;

	      if (dx === 0) {
	        dx = 0.01;
	      }

	      var d = Math.sqrt(dx * dx + dy * dy);
	      var cosTheta = (dy * dy - d * d - dx * dx) / (-2 * d * dx);
	      var theta = Math.acos(cosTheta);

	      if (d < rs + options.spotlightPadding) {
	        queueDrawBg();
	        return;
	      }

	      queueDrawBg();

	      var rx = dx * r / d;
	      var ry = dy * r / d;

	      if (dy > 0) {
	        theta = Math.PI + Math.abs(theta - Math.PI);
	      }

	      var dtheta = 2 * Math.PI / commands.length;
	      var theta1 = Math.PI / 2;
	      var theta2 = theta1 + dtheta;

	      for (var i = 0; i < commands.length; i++) {
	        var command = commands[i];

	        var inThisCommand = theta1 <= theta && theta <= theta2 || theta1 <= theta + 2 * Math.PI && theta + 2 * Math.PI <= theta2;

	        if (command.disabled === true || command.enabled === false) {
	          inThisCommand = false;
	        }

	        if (inThisCommand) {
	          activeCommandI = i;
	          break;
	        }

	        theta1 += dtheta;
	        theta2 += dtheta;
	      }

	      queueDrawCommands(rx, ry, theta);
	    }).on('tapdrag', dragHandler).on('cxttapend tapend', function () {
	      parent.style.display = 'none';

	      if (activeCommandI !== undefined) {
	        var select = commands[activeCommandI].select;

	        if (select) {
	          select.apply(target, [target, gestureStartEvent]);
	          activeCommandI = undefined;
	        }
	      }

	      inGesture = false;

	      restoreGestures();
	    });
	  }

	  function removeEventListeners() {
	    var handlers = data.handlers;

	    for (var i = 0; i < handlers.length; i++) {
	      var h = handlers[i];

	      if (h.selector === 'core') {
	        cy.off(h.events, h.fn);
	      } else {
	        cy.off(h.events, h.selector, h.fn);
	      }
	    }

	    window.removeEventListener('resize', updatePixelRatio);
	  }

	  function destroyInstance() {
	    redrawing = false;

	    removeEventListeners();

	    wrapper.remove();
	  }

	  addEventListeners();

	  return {
	    destroy: function destroy() {
	      destroyInstance();
	    }
	  };
	};

	module.exports = cxtmenu;

	/***/ }),
	/* 1 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	// Simple, internal Object.assign() polyfill for options objects etc.

	module.exports = Object.assign != null ? Object.assign.bind(Object) : function (tgt) {
	  for (var _len = arguments.length, srcs = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	    srcs[_key - 1] = arguments[_key];
	  }

	  srcs.filter(function (src) {
	    return src != null;
	  }).forEach(function (src) {
	    Object.keys(src).forEach(function (k) {
	      return tgt[k] = src[k];
	    });
	  });

	  return tgt;
	};

	/***/ }),
	/* 2 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	var defaults = {
	  menuRadius: 100, // the radius of the circular menu in pixels
	  selector: 'node', // elements matching this Cytoscape.js selector will trigger cxtmenus
	  commands: [// an array of commands to list in the menu or a function that returns the array
	    /*
	    { // example command
	      fillColor: 'rgba(200, 200, 200, 0.75)', // optional: custom background color for item
	      content: 'a command name' // html/text content to be displayed in the menu
	      contentStyle: {}, // css key:value pairs to set the command's css in js if you want
	      select: function(ele){ // a function to execute when the command is selected
	        console.log( ele.id() ) // `ele` holds the reference to the active element
	      },
	      enabled: true // whether the command is selectable
	    }
	    */
	  ], // function( ele ){ return [ /*...*/ ] }, // example function for commands
	  fillColor: 'rgba(0, 0, 0, 0.75)', // the background colour of the menu
	  activeFillColor: 'rgba(1, 105, 217, 0.75)', // the colour used to indicate the selected command
	  activePadding: 20, // additional size in pixels for the active command
	  indicatorSize: 24, // the size in pixels of the pointer to the active command
	  separatorWidth: 3, // the empty spacing in pixels between successive commands
	  spotlightPadding: 4, // extra spacing in pixels between the element and the spotlight
	  minSpotlightRadius: 24, // the minimum radius in pixels of the spotlight
	  maxSpotlightRadius: 38, // the maximum radius in pixels of the spotlight
	  openMenuEvents: 'cxttapstart taphold', // space-separated cytoscape events that will open the menu; only `cxttapstart` and/or `taphold` work here
	  itemColor: 'white', // the colour of text in the command's content
	  itemTextShadowColor: 'transparent', // the text shadow colour of the command's content
	  zIndex: 9999, // the z-index of the ui div
	  atMouse: false // draw menu at mouse position
	};

	module.exports = defaults;

	/***/ }),
	/* 3 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	var removeEles = function removeEles(query) {
	  var ancestor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document;

	  var els = ancestor.querySelectorAll(query);

	  for (var i = 0; i < els.length; i++) {
	    var el = els[i];

	    el.parentNode.removeChild(el);
	  }
	};

	var setStyles = function setStyles(el, style) {
	  var props = Object.keys(style);

	  for (var i = 0, l = props.length; i < l; i++) {
	    el.style[props[i]] = style[props[i]];
	  }
	};

	var createElement = function createElement(options) {
	  options = options || {};

	  var el = document.createElement(options.tag || 'div');

	  el.className = options.class || '';

	  if (options.style) {
	    setStyles(el, options.style);
	  }

	  return el;
	};

	var getPixelRatio = function getPixelRatio() {
	  return window.devicePixelRatio || 1;
	};

	var getOffset = function getOffset(el) {
	  var offset = el.getBoundingClientRect();

	  return {
	    left: offset.left + document.body.scrollLeft + parseFloat(getComputedStyle(document.body)['padding-left']) + parseFloat(getComputedStyle(document.body)['border-left-width']),
	    top: offset.top + document.body.scrollTop + parseFloat(getComputedStyle(document.body)['padding-top']) + parseFloat(getComputedStyle(document.body)['border-top-width'])
	  };
	};

	module.exports = { removeEles: removeEles, setStyles: setStyles, createElement: createElement, getPixelRatio: getPixelRatio, getOffset: getOffset };

	/***/ }),
	/* 4 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	var cxtmenu = __webpack_require__(0);

	// registers the extension on a cytoscape lib ref
	var register = function register(cytoscape) {
	  if (!cytoscape) {
	    return;
	  } // can't register if cytoscape unspecified

	  cytoscape('core', 'cxtmenu', cxtmenu); // register with cytoscape.js
	};

	if (typeof cytoscape !== 'undefined') {
	  // expose to global cytoscape (i.e. window.cytoscape)
	  register(cytoscape);
	}

	module.exports = register;

	/***/ })
	/******/ ]);
	});

/***/ }),
/* 303 */
/***/ (function(module, exports, __webpack_require__) {

	(function webpackUniversalModuleDefinition(root, factory) {
		if(true)
			module.exports = factory(__webpack_require__(304), __webpack_require__(306));
		else if(typeof define === 'function' && define.amd)
			define(["cose-base", "numeric"], factory);
		else if(typeof exports === 'object')
			exports["cytoscapeFcose"] = factory(require("cose-base"), require("numeric"));
		else
			root["cytoscapeFcose"] = factory(root["coseBase"], root["numeric"]);
	})(this, function(__WEBPACK_EXTERNAL_MODULE_0__, __WEBPACK_EXTERNAL_MODULE_7__) {
	return /******/ (function(modules) { // webpackBootstrap
	/******/ 	// The module cache
	/******/ 	var installedModules = {};
	/******/
	/******/ 	// The require function
	/******/ 	function __webpack_require__(moduleId) {
	/******/
	/******/ 		// Check if module is in cache
	/******/ 		if(installedModules[moduleId]) {
	/******/ 			return installedModules[moduleId].exports;
	/******/ 		}
	/******/ 		// Create a new module (and put it into the cache)
	/******/ 		var module = installedModules[moduleId] = {
	/******/ 			i: moduleId,
	/******/ 			l: false,
	/******/ 			exports: {}
	/******/ 		};
	/******/
	/******/ 		// Execute the module function
	/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
	/******/
	/******/ 		// Flag the module as loaded
	/******/ 		module.l = true;
	/******/
	/******/ 		// Return the exports of the module
	/******/ 		return module.exports;
	/******/ 	}
	/******/
	/******/
	/******/ 	// expose the modules object (__webpack_modules__)
	/******/ 	__webpack_require__.m = modules;
	/******/
	/******/ 	// expose the module cache
	/******/ 	__webpack_require__.c = installedModules;
	/******/
	/******/ 	// identity function for calling harmony imports with the correct context
	/******/ 	__webpack_require__.i = function(value) { return value; };
	/******/
	/******/ 	// define getter function for harmony exports
	/******/ 	__webpack_require__.d = function(exports, name, getter) {
	/******/ 		if(!__webpack_require__.o(exports, name)) {
	/******/ 			Object.defineProperty(exports, name, {
	/******/ 				configurable: false,
	/******/ 				enumerable: true,
	/******/ 				get: getter
	/******/ 			});
	/******/ 		}
	/******/ 	};
	/******/
	/******/ 	// getDefaultExport function for compatibility with non-harmony modules
	/******/ 	__webpack_require__.n = function(module) {
	/******/ 		var getter = module && module.__esModule ?
	/******/ 			function getDefault() { return module['default']; } :
	/******/ 			function getModuleExports() { return module; };
	/******/ 		__webpack_require__.d(getter, 'a', getter);
	/******/ 		return getter;
	/******/ 	};
	/******/
	/******/ 	// Object.prototype.hasOwnProperty.call
	/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
	/******/
	/******/ 	// __webpack_public_path__
	/******/ 	__webpack_require__.p = "";
	/******/
	/******/ 	// Load entry module and return exports
	/******/ 	return __webpack_require__(__webpack_require__.s = 6);
	/******/ })
	/************************************************************************/
	/******/ ([
	/* 0 */
	/***/ (function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_0__;

	/***/ }),
	/* 1 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	/*
	 * Auxiliary functions
	 */

	var LinkedList = __webpack_require__(0).layoutBase.LinkedList;

	var auxiliary = {};

	auxiliary.multMat = function (array1, array2) {
	  var result = [];

	  for (var i = 0; i < array1.length; i++) {
	    result[i] = [];
	    for (var j = 0; j < array2[0].length; j++) {
	      result[i][j] = 0;
	      for (var k = 0; k < array1[0].length; k++) {
	        result[i][j] += array1[i][k] * array2[k][j];
	      }
	    }
	  }
	  return result;
	};

	auxiliary.multGamma = function (array) {
	  var result = [];
	  var sum = 0;

	  for (var i = 0; i < array.length; i++) {
	    sum += array[i];
	  }

	  sum *= -1 / array.length;

	  for (var _i = 0; _i < array.length; _i++) {
	    result[_i] = sum + array[_i];
	  }
	  return result;
	};

	auxiliary.multL = function (array, C, INV) {
	  var result = [];
	  var temp1 = [];
	  var temp2 = [];

	  // multiply by C^T
	  for (var i = 0; i < C[0].length; i++) {
	    var sum = 0;
	    for (var j = 0; j < C.length; j++) {
	      sum += -0.5 * C[j][i] * array[j];
	    }
	    temp1[i] = sum;
	  }
	  // multiply the result by INV
	  for (var _i2 = 0; _i2 < INV.length; _i2++) {
	    var _sum = 0;
	    for (var _j = 0; _j < INV.length; _j++) {
	      _sum += INV[_i2][_j] * temp1[_j];
	    }
	    temp2[_i2] = _sum;
	  }
	  // multiply the result by C
	  for (var _i3 = 0; _i3 < C.length; _i3++) {
	    var _sum2 = 0;
	    for (var _j2 = 0; _j2 < C[0].length; _j2++) {
	      _sum2 += C[_i3][_j2] * temp2[_j2];
	    }
	    result[_i3] = _sum2;
	  }

	  return result;
	};

	auxiliary.multCons = function (array, constant) {
	  var result = [];

	  for (var i = 0; i < array.length; i++) {
	    result[i] = array[i] * constant;
	  }

	  return result;
	};

	// assumes arrays have same size
	auxiliary.minusOp = function (array1, array2) {
	  var result = [];

	  for (var i = 0; i < array1.length; i++) {
	    result[i] = array1[i] - array2[i];
	  }

	  return result;
	};

	// assumes arrays have same size
	auxiliary.dotProduct = function (array1, array2) {
	  var product = 0;

	  for (var i = 0; i < array1.length; i++) {
	    product += array1[i] * array2[i];
	  }

	  return product;
	};

	auxiliary.mag = function (array) {
	  return Math.sqrt(this.dotProduct(array, array));
	};

	auxiliary.normalize = function (array) {
	  var result = [];
	  var magnitude = this.mag(array);

	  for (var i = 0; i < array.length; i++) {
	    result[i] = array[i] / magnitude;
	  }

	  return result;
	};

	// get the top most nodes
	auxiliary.getTopMostNodes = function (nodes) {
	  var nodesMap = {};
	  for (var i = 0; i < nodes.length; i++) {
	    nodesMap[nodes[i].id()] = true;
	  }
	  var roots = nodes.filter(function (ele, i) {
	    if (typeof ele === "number") {
	      ele = i;
	    }
	    var parent = ele.parent()[0];
	    while (parent != null) {
	      if (nodesMap[parent.id()]) {
	        return false;
	      }
	      parent = parent.parent()[0];
	    }
	    return true;
	  });

	  return roots;
	};

	// find disconnected components and create dummy nodes that connect them
	auxiliary.connectComponents = function (cy, eles, topMostNodes, dummyNodes) {
	  var queue = new LinkedList();
	  var visited = new Set();
	  var visitedTopMostNodes = [];
	  var currentNeighbor = void 0;
	  var minDegreeNode = void 0;
	  var minDegree = void 0;

	  var isConnected = false;
	  var count = 1;
	  var nodesConnectedToDummy = [];
	  var components = [];

	  var _loop = function _loop() {
	    var cmpt = cy.collection();
	    components.push(cmpt);

	    var currentNode = topMostNodes[0];
	    var childrenOfCurrentNode = cy.collection();
	    childrenOfCurrentNode.merge(currentNode).merge(currentNode.descendants());
	    visitedTopMostNodes.push(currentNode);

	    childrenOfCurrentNode.forEach(function (node) {
	      queue.push(node);
	      visited.add(node);
	      cmpt.merge(node);
	    });

	    var _loop2 = function _loop2() {
	      currentNode = queue.shift();

	      // Traverse all neighbors of this node
	      var neighborNodes = cy.collection();
	      currentNode.neighborhood().nodes().forEach(function (node) {
	        if (eles.anySame(currentNode.edgesWith(node))) {
	          neighborNodes.merge(node);
	        }
	      });

	      for (var i = 0; i < neighborNodes.length; i++) {
	        var neighborNode = neighborNodes[i];
	        currentNeighbor = topMostNodes.intersection(neighborNode.union(neighborNode.ancestors()));
	        if (currentNeighbor != null && !visited.has(currentNeighbor[0])) {
	          var childrenOfNeighbor = currentNeighbor.union(currentNeighbor.descendants());

	          childrenOfNeighbor.forEach(function (node) {
	            queue.push(node);
	            visited.add(node);
	            cmpt.merge(node);
	            if (topMostNodes.has(node)) {
	              visitedTopMostNodes.push(node);
	            }
	          });
	        }
	      }
	    };

	    while (queue.length != 0) {
	      _loop2();
	    }

	    cmpt.forEach(function (node) {
	      node.connectedEdges().forEach(function (e) {
	        // connectedEdges() usually cached
	        if (cmpt.has(e.source()) && cmpt.has(e.target())) {
	          // has() is cheap
	          cmpt.merge(e); // forEach() only considers nodes -- sets N at call time
	        }
	      });
	    });

	    if (visitedTopMostNodes.length == topMostNodes.length) {
	      isConnected = true;
	    }

	    if (!isConnected || isConnected && count > 1) {
	      minDegreeNode = visitedTopMostNodes[0];
	      minDegree = minDegreeNode.connectedEdges().length;
	      visitedTopMostNodes.forEach(function (node) {
	        if (node.connectedEdges().length < minDegree) {
	          minDegree = node.connectedEdges().length;
	          minDegreeNode = node;
	        }
	      });
	      nodesConnectedToDummy.push(minDegreeNode.id());
	      // TO DO: Check efficiency of this part
	      var temp = cy.collection();
	      temp.merge(visitedTopMostNodes[0]);
	      visitedTopMostNodes.forEach(function (node) {
	        temp.merge(node);
	      });
	      visitedTopMostNodes = [];
	      topMostNodes = topMostNodes.difference(temp);
	      count++;
	    }
	  };

	  do {
	    _loop();
	  } while (!isConnected);

	  if (dummyNodes) {
	    if (nodesConnectedToDummy.length > 0) {
	      dummyNodes.set('dummy' + (dummyNodes.size + 1), nodesConnectedToDummy);
	    }
	  }
	  return components;
	};

	auxiliary.calcBoundingBox = function (parentNode, xCoords, yCoords, nodeIndexes) {
	  // calculate bounds
	  var left = Number.MAX_VALUE;
	  var right = Number.MIN_VALUE;
	  var top = Number.MAX_VALUE;
	  var bottom = Number.MIN_VALUE;
	  var nodeLeft = void 0;
	  var nodeRight = void 0;
	  var nodeTop = void 0;
	  var nodeBottom = void 0;

	  var nodes = parentNode.descendants().not(":parent");
	  var s = nodes.length;
	  for (var i = 0; i < s; i++) {
	    var node = nodes[i];

	    nodeLeft = xCoords[nodeIndexes.get(node.id())] - node.width() / 2;
	    nodeRight = xCoords[nodeIndexes.get(node.id())] + node.width() / 2;
	    nodeTop = yCoords[nodeIndexes.get(node.id())] - node.height() / 2;
	    nodeBottom = yCoords[nodeIndexes.get(node.id())] + node.height() / 2;

	    if (left > nodeLeft) {
	      left = nodeLeft;
	    }

	    if (right < nodeRight) {
	      right = nodeRight;
	    }

	    if (top > nodeTop) {
	      top = nodeTop;
	    }

	    if (bottom < nodeBottom) {
	      bottom = nodeBottom;
	    }
	  }

	  var boundingBox = {};
	  boundingBox.topLeftX = left;
	  boundingBox.topLeftY = top;
	  boundingBox.width = right - left;
	  boundingBox.height = bottom - top;
	  return boundingBox;
	};

	module.exports = auxiliary;

	/***/ }),
	/* 2 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	/**
	  The implementation of the fcose layout algorithm
	*/

	var assign = __webpack_require__(3);
	var aux = __webpack_require__(1);

	var _require = __webpack_require__(5),
	    spectralLayout = _require.spectralLayout;

	var _require2 = __webpack_require__(4),
	    coseLayout = _require2.coseLayout;

	var defaults = Object.freeze({

	  // 'draft', 'default' or 'proof' 
	  // - 'draft' only applies spectral layout 
	  // - 'default' improves the quality with subsequent CoSE layout (fast cooling rate)
	  // - 'proof' improves the quality with subsequent CoSE layout (slow cooling rate) 
	  quality: "default",
	  // Use random node positions at beginning of layout
	  // if this is set to false, then quality option must be "proof"
	  randomize: true,
	  // Whether or not to animate the layout
	  animate: true,
	  // Duration of animation in ms, if enabled
	  animationDuration: 1000,
	  // Easing of animation, if enabled
	  animationEasing: undefined,
	  // Fit the viewport to the repositioned nodes
	  fit: true,
	  // Padding around layout
	  padding: 30,
	  // Whether to include labels in node dimensions. Valid in "proof" quality
	  nodeDimensionsIncludeLabels: false,
	  // Whether or not simple nodes (non-compound nodes) are of uniform dimensions
	  uniformNodeDimensions: false,
	  // Whether to pack disconnected components - valid only if randomize: true
	  packComponents: true,

	  /* spectral layout options */

	  // False for random, true for greedy
	  samplingType: true,
	  // Sample size to construct distance matrix
	  sampleSize: 25,
	  // Separation amount between nodes
	  nodeSeparation: 75,
	  // Power iteration tolerance
	  piTol: 0.0000001,

	  /* CoSE layout options */

	  // Node repulsion (non overlapping) multiplier
	  nodeRepulsion: 4500,
	  // Ideal edge (non nested) length
	  idealEdgeLength: 50,
	  // Divisor to compute edge forces
	  edgeElasticity: 0.45,
	  // Nesting factor (multiplier) to compute ideal edge length for nested edges
	  nestingFactor: 0.1,
	  // Gravity force (constant)
	  gravity: 0.25,
	  // Maximum number of iterations to perform
	  numIter: 2500,
	  // For enabling tiling
	  tile: true,
	  // Represents the amount of the vertical space to put between the zero degree members during the tiling operation(can also be a function)
	  tilingPaddingVertical: 10,
	  // Represents the amount of the horizontal space to put between the zero degree members during the tiling operation(can also be a function)
	  tilingPaddingHorizontal: 10,
	  // Gravity range (constant) for compounds
	  gravityRangeCompound: 1.5,
	  // Gravity force (constant) for compounds
	  gravityCompound: 1.0,
	  // Gravity range (constant)
	  gravityRange: 3.8,
	  // Initial cooling factor for incremental layout  
	  initialEnergyOnIncremental: 0.3,

	  /* layout event callbacks */
	  ready: function ready() {}, // on layoutready
	  stop: function stop() {} // on layoutstop
	});

	var Layout = function () {
	  function Layout(options) {
	    _classCallCheck(this, Layout);

	    this.options = assign({}, defaults, options);
	  }

	  _createClass(Layout, [{
	    key: 'run',
	    value: function run() {
	      var layout = this;
	      var options = this.options;
	      var cy = options.cy;
	      var eles = options.eles;

	      var spectralResult = [];
	      var xCoords = void 0;
	      var yCoords = void 0;
	      var coseResult = [];
	      var components = void 0;

	      // if there is no elements, return
	      if (options.eles.length == 0) return;

	      // decide component packing is enabled or not
	      var layUtil = void 0;
	      var packingEnabled = false;
	      if (cy.layoutUtilities && options.packComponents && options.randomize) {
	        layUtil = cy.layoutUtilities("get");
	        if (!layUtil) layUtil = cy.layoutUtilities();
	        packingEnabled = true;
	      }

	      // if partial layout, update options.eles
	      if (options.eles.length != options.cy.elements().length) {
	        var prevNodes = eles.nodes();
	        eles = eles.union(eles.descendants());

	        eles.forEach(function (ele) {
	          if (ele.isNode()) {
	            var connectedEdges = ele.connectedEdges();
	            connectedEdges.forEach(function (edge) {
	              if (eles.contains(edge.source()) && eles.contains(edge.target()) && !prevNodes.contains(edge.source().union(edge.target()))) {
	                eles = eles.union(edge);
	              }
	            });
	          }
	        });

	        options.eles = eles;
	      }

	      // if packing is not enabled, perform layout on the whole graph
	      if (!packingEnabled) {
	        if (options.randomize) {
	          // Apply spectral layout
	          spectralResult.push(spectralLayout(options));
	          xCoords = spectralResult[0]["xCoords"];
	          yCoords = spectralResult[0]["yCoords"];
	        }

	        // Apply cose layout as postprocessing
	        if (options.quality == "default" || options.quality == "proof") {
	          coseResult.push(coseLayout(options, spectralResult[0]));
	        }
	      } else {
	        // packing is enabled
	        var topMostNodes = aux.getTopMostNodes(options.eles.nodes());
	        components = aux.connectComponents(cy, options.eles, topMostNodes);

	        //send each component to spectral layout
	        if (options.randomize) {
	          components.forEach(function (component) {
	            options.eles = component;
	            spectralResult.push(spectralLayout(options));
	          });
	        }

	        if (options.quality == "default" || options.quality == "proof") {
	          var toBeTiledNodes = cy.collection();
	          if (options.tile) {
	            // behave nodes to be tiled as one component
	            var nodeIndexes = new Map();
	            var _xCoords = [];
	            var _yCoords = [];
	            var count = 0;
	            var tempSpectralResult = { nodeIndexes: nodeIndexes, xCoords: _xCoords, yCoords: _yCoords };
	            var indexesToBeDeleted = [];
	            components.forEach(function (component, index) {
	              if (component.edges().length == 0) {
	                component.nodes().forEach(function (node, i) {
	                  toBeTiledNodes.merge(component.nodes()[i]);
	                  if (!node.isParent()) {
	                    tempSpectralResult.nodeIndexes.set(component.nodes()[i].id(), count++);
	                    tempSpectralResult.xCoords.push(component.nodes()[0].position().x);
	                    tempSpectralResult.yCoords.push(component.nodes()[0].position().y);
	                  }
	                });
	                indexesToBeDeleted.push(index);
	              }
	            });
	            if (toBeTiledNodes.length > 1) {
	              components.push(toBeTiledNodes);
	              spectralResult.push(tempSpectralResult);
	              for (var i = indexesToBeDeleted.length - 1; i >= 0; i--) {
	                components.splice(indexesToBeDeleted[i], 1);
	                spectralResult.splice(indexesToBeDeleted[i], 1);
	              };
	            }
	          }
	          components.forEach(function (component, index) {
	            // send each component to cose layout
	            options.eles = component;
	            coseResult.push(coseLayout(options, spectralResult[index]));
	          });
	        }

	        // packing
	        var subgraphs = [];
	        components.forEach(function (component, index) {
	          var nodeIndexes = void 0;
	          if (options.quality == "draft") {
	            nodeIndexes = spectralResult[index].nodeIndexes;
	          }
	          var subgraph = {};
	          subgraph.nodes = [];
	          subgraph.edges = [];
	          var nodeIndex = void 0;
	          component.nodes().forEach(function (node) {
	            if (options.quality == "draft") {
	              if (!node.isParent()) {
	                nodeIndex = nodeIndexes.get(node.id());
	                subgraph.nodes.push({ x: spectralResult[index].xCoords[nodeIndex] - node.boundingbox().w / 2, y: spectralResult[index].yCoords[nodeIndex] - node.boundingbox().h / 2, width: node.boundingbox().w, height: node.boundingbox().h });
	              } else {
	                var parentInfo = aux.calcBoundingBox(node, spectralResult[index].xCoords, spectralResult[index].yCoords, nodeIndexes);
	                subgraph.nodes.push({ x: parentInfo.topLeftX, y: parentInfo.topLeftY, width: parentInfo.width, height: parentInfo.height });
	              }
	            } else {
	              subgraph.nodes.push({ x: coseResult[index][node.id()].getLeft(), y: coseResult[index][node.id()].getTop(), width: coseResult[index][node.id()].getWidth(), height: coseResult[index][node.id()].getHeight() });
	            }
	          });
	          component.edges().forEach(function (node) {
	            var source = node.source();
	            var target = node.target();
	            if (options.quality == "draft") {
	              var sourceNodeIndex = nodeIndexes.get(source.id());
	              var targetNodeIndex = nodeIndexes.get(target.id());
	              var sourceCenter = [];
	              var targetCenter = [];
	              if (source.isParent()) {
	                var parentInfo = aux.calcBoundingBox(source, spectralResult[index].xCoords, spectralResult[index].yCoords, nodeIndexes);
	                sourceCenter.push(parentInfo.topLeftX + parentInfo.width / 2);
	                sourceCenter.push(parentInfo.topLeftY + parentInfo.height / 2);
	              } else {
	                sourceCenter.push(spectralResult[index].xCoords[sourceNodeIndex]);
	                sourceCenter.push(spectralResult[index].yCoords[sourceNodeIndex]);
	              }
	              if (target.isParent()) {
	                var _parentInfo = aux.calcBoundingBox(target, spectralResult[index].xCoords, spectralResult[index].yCoords, nodeIndexes);
	                targetCenter.push(_parentInfo.topLeftX + _parentInfo.width / 2);
	                targetCenter.push(_parentInfo.topLeftY + _parentInfo.height / 2);
	              } else {
	                targetCenter.push(spectralResult[index].xCoords[targetNodeIndex]);
	                targetCenter.push(spectralResult[index].yCoords[targetNodeIndex]);
	              }
	              subgraph.edges.push({ startX: sourceCenter[0], startY: sourceCenter[1], endX: targetCenter[0], endY: targetCenter[1] });
	            } else {
	              subgraph.edges.push({ startX: coseResult[index][source.id()].getCenterX(), startY: coseResult[index][source.id()].getCenterY(), endX: coseResult[index][target.id()].getCenterX(), endY: coseResult[index][target.id()].getCenterY() });
	            }
	          });
	          subgraphs.push(subgraph);
	        });
	        var shiftResult = layUtil.packComponents(subgraphs).shifts;
	        if (options.quality == "draft") {
	          spectralResult.forEach(function (result, index) {
	            var newXCoords = result.xCoords.map(function (x) {
	              return x + shiftResult[index].dx;
	            });
	            var newYCoords = result.yCoords.map(function (y) {
	              return y + shiftResult[index].dy;
	            });
	            result.xCoords = newXCoords;
	            result.yCoords = newYCoords;
	          });
	        } else {
	          coseResult.forEach(function (result, index) {
	            Object.keys(result).forEach(function (item) {
	              var nodeRectangle = result[item];
	              nodeRectangle.setCenter(nodeRectangle.getCenterX() + shiftResult[index].dx, nodeRectangle.getCenterY() + shiftResult[index].dy);
	            });
	          });
	        }
	      }

	      // get each element's calculated position
	      var getPositions = function getPositions(ele, i) {
	        if (options.quality == "default" || options.quality == "proof") {
	          if (typeof ele === "number") {
	            ele = i;
	          }
	          var pos = void 0;
	          var theId = ele.data('id');
	          coseResult.forEach(function (result) {
	            if (theId in result) {
	              pos = { x: result[theId].getRect().getCenterX(), y: result[theId].getRect().getCenterY() };
	            }
	          });
	          return {
	            x: pos.x,
	            y: pos.y
	          };
	        } else {
	          var _pos = void 0;
	          spectralResult.forEach(function (result) {
	            var index = result.nodeIndexes.get(ele.id());
	            if (index != undefined) {
	              _pos = { x: result.xCoords[index], y: result.yCoords[index] };
	            }
	          });
	          if (_pos == undefined) _pos = { x: ele.position("x"), y: ele.position("y") };
	          return {
	            x: _pos.x,
	            y: _pos.y
	          };
	        }
	      };

	      // quality = "draft" and randomize = false are contradictive so in that case positions don't change
	      if (options.quality == "default" || options.quality == "proof" || options.randomize) {
	        // transfer calculated positions to nodes (positions of only simple nodes are evaluated, compounds are positioned automatically)
	        options.eles = eles;
	        eles.nodes().not(":parent").layoutPositions(layout, options, getPositions);
	      } else {
	        console.log("If randomize option is set to false, then quality option must be 'default' or 'proof'.");
	      }
	    }
	  }]);

	  return Layout;
	}();

	module.exports = Layout;

	/***/ }),
	/* 3 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	// Simple, internal Object.assign() polyfill for options objects etc.

	module.exports = Object.assign != null ? Object.assign.bind(Object) : function (tgt) {
	  for (var _len = arguments.length, srcs = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	    srcs[_key - 1] = arguments[_key];
	  }

	  srcs.forEach(function (src) {
	    Object.keys(src).forEach(function (k) {
	      return tgt[k] = src[k];
	    });
	  });

	  return tgt;
	};

	/***/ }),
	/* 4 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	/**
	  The implementation of the postprocessing part that applies CoSE layout over the spectral layout
	*/

	var aux = __webpack_require__(1);
	var CoSELayout = __webpack_require__(0).CoSELayout;
	var CoSENode = __webpack_require__(0).CoSENode;
	var PointD = __webpack_require__(0).layoutBase.PointD;
	var DimensionD = __webpack_require__(0).layoutBase.DimensionD;
	var LayoutConstants = __webpack_require__(0).layoutBase.LayoutConstants;
	var FDLayoutConstants = __webpack_require__(0).layoutBase.FDLayoutConstants;
	var CoSEConstants = __webpack_require__(0).CoSEConstants;

	// main function that cose layout is processed
	var coseLayout = function coseLayout(options, spectralResult) {

	  var eles = options.eles;
	  var nodes = eles.nodes();
	  var edges = eles.edges();

	  var nodeIndexes = void 0;
	  var xCoords = void 0;
	  var yCoords = void 0;
	  var idToLNode = {};

	  if (options.randomize) {
	    nodeIndexes = spectralResult["nodeIndexes"];
	    xCoords = spectralResult["xCoords"];
	    yCoords = spectralResult["yCoords"];
	  }

	  /**** Postprocessing functions ****/

	  // transfer cytoscape nodes to cose nodes
	  var processChildrenList = function processChildrenList(parent, children, layout, options) {
	    var size = children.length;
	    for (var i = 0; i < size; i++) {
	      var theChild = children[i];
	      var children_of_children = theChild.children();
	      var theNode = void 0;

	      var dimensions = theChild.layoutDimensions({
	        nodeDimensionsIncludeLabels: options.nodeDimensionsIncludeLabels
	      });

	      if (theChild.outerWidth() != null && theChild.outerHeight() != null) {
	        if (options.randomize) {
	          if (!theChild.isParent()) {
	            theNode = parent.add(new CoSENode(layout.graphManager, new PointD(xCoords[nodeIndexes.get(theChild.id())] - dimensions.w / 2, yCoords[nodeIndexes.get(theChild.id())] - dimensions.h / 2), new DimensionD(parseFloat(dimensions.w), parseFloat(dimensions.h))));
	          } else {
	            var parentInfo = aux.calcBoundingBox(theChild, xCoords, yCoords, nodeIndexes);
	            theNode = parent.add(new CoSENode(layout.graphManager, new PointD(parentInfo.topLeftX, parentInfo.topLeftY), new DimensionD(parentInfo.width, parentInfo.height)));
	          }
	        } else {
	          theNode = parent.add(new CoSENode(layout.graphManager, new PointD(theChild.position('x') - dimensions.w / 2, theChild.position('y') - dimensions.h / 2), new DimensionD(parseFloat(dimensions.w), parseFloat(dimensions.h))));
	        }
	      } else {
	        theNode = parent.add(new CoSENode(this.graphManager));
	      }
	      // Attach id to the layout node
	      theNode.id = theChild.data("id");
	      // Attach the paddings of cy node to layout node
	      theNode.paddingLeft = parseInt(theChild.css('padding'));
	      theNode.paddingTop = parseInt(theChild.css('padding'));
	      theNode.paddingRight = parseInt(theChild.css('padding'));
	      theNode.paddingBottom = parseInt(theChild.css('padding'));

	      //Attach the label properties to compound if labels will be included in node dimensions  
	      if (options.nodeDimensionsIncludeLabels) {
	        if (theChild.isParent()) {
	          var labelWidth = theChild.boundingBox({ includeLabels: true, includeNodes: false }).w;
	          var labelHeight = theChild.boundingBox({ includeLabels: true, includeNodes: false }).h;
	          var labelPos = theChild.css("text-halign");
	          theNode.labelWidth = labelWidth;
	          theNode.labelHeight = labelHeight;
	          theNode.labelPos = labelPos;
	        }
	      }

	      // Map the layout node
	      idToLNode[theChild.data("id")] = theNode;

	      if (isNaN(theNode.rect.x)) {
	        theNode.rect.x = 0;
	      }

	      if (isNaN(theNode.rect.y)) {
	        theNode.rect.y = 0;
	      }

	      if (children_of_children != null && children_of_children.length > 0) {
	        var theNewGraph = void 0;
	        theNewGraph = layout.getGraphManager().add(layout.newGraph(), theNode);
	        processChildrenList(theNewGraph, children_of_children, layout, options);
	      }
	    }
	  };

	  // transfer cytoscape edges to cose edges
	  var processEdges = function processEdges(layout, gm, edges) {
	    for (var i = 0; i < edges.length; i++) {
	      var edge = edges[i];
	      var sourceNode = idToLNode[edge.data("source")];
	      var targetNode = idToLNode[edge.data("target")];
	      if (sourceNode !== targetNode && sourceNode.getEdgesBetween(targetNode).length == 0) {
	        var e1 = gm.add(layout.newEdge(), sourceNode, targetNode);
	        e1.id = edge.id();
	      }
	    }
	  };

	  /**** Apply postprocessing ****/

	  if (options.nodeRepulsion != null) CoSEConstants.DEFAULT_REPULSION_STRENGTH = FDLayoutConstants.DEFAULT_REPULSION_STRENGTH = options.nodeRepulsion;
	  if (options.idealEdgeLength != null) CoSEConstants.DEFAULT_EDGE_LENGTH = FDLayoutConstants.DEFAULT_EDGE_LENGTH = options.idealEdgeLength;
	  if (options.edgeElasticity != null) CoSEConstants.DEFAULT_SPRING_STRENGTH = FDLayoutConstants.DEFAULT_SPRING_STRENGTH = options.edgeElasticity;
	  if (options.nestingFactor != null) CoSEConstants.PER_LEVEL_IDEAL_EDGE_LENGTH_FACTOR = FDLayoutConstants.PER_LEVEL_IDEAL_EDGE_LENGTH_FACTOR = options.nestingFactor;
	  if (options.gravity != null) CoSEConstants.DEFAULT_GRAVITY_STRENGTH = FDLayoutConstants.DEFAULT_GRAVITY_STRENGTH = options.gravity;
	  if (options.numIter != null) CoSEConstants.MAX_ITERATIONS = FDLayoutConstants.MAX_ITERATIONS = options.numIter;
	  if (options.gravityRange != null) CoSEConstants.DEFAULT_GRAVITY_RANGE_FACTOR = FDLayoutConstants.DEFAULT_GRAVITY_RANGE_FACTOR = options.gravityRange;
	  if (options.gravityCompound != null) CoSEConstants.DEFAULT_COMPOUND_GRAVITY_STRENGTH = FDLayoutConstants.DEFAULT_COMPOUND_GRAVITY_STRENGTH = options.gravityCompound;
	  if (options.gravityRangeCompound != null) CoSEConstants.DEFAULT_COMPOUND_GRAVITY_RANGE_FACTOR = FDLayoutConstants.DEFAULT_COMPOUND_GRAVITY_RANGE_FACTOR = options.gravityRangeCompound;
	  if (options.initialEnergyOnIncremental != null) CoSEConstants.DEFAULT_COOLING_FACTOR_INCREMENTAL = FDLayoutConstants.DEFAULT_COOLING_FACTOR_INCREMENTAL = options.initialEnergyOnIncremental;

	  if (options.quality == 'proof') LayoutConstants.QUALITY = 2;else LayoutConstants.QUALITY = 0;

	  CoSEConstants.NODE_DIMENSIONS_INCLUDE_LABELS = FDLayoutConstants.NODE_DIMENSIONS_INCLUDE_LABELS = LayoutConstants.NODE_DIMENSIONS_INCLUDE_LABELS = options.nodeDimensionsIncludeLabels;
	  CoSEConstants.DEFAULT_INCREMENTAL = FDLayoutConstants.DEFAULT_INCREMENTAL = LayoutConstants.DEFAULT_INCREMENTAL = !options.randomize;
	  CoSEConstants.ANIMATE = FDLayoutConstants.ANIMATE = LayoutConstants.ANIMATE = options.animate;
	  CoSEConstants.TILE = options.tile;
	  CoSEConstants.TILING_PADDING_VERTICAL = typeof options.tilingPaddingVertical === 'function' ? options.tilingPaddingVertical.call() : options.tilingPaddingVertical;
	  CoSEConstants.TILING_PADDING_HORIZONTAL = typeof options.tilingPaddingHorizontal === 'function' ? options.tilingPaddingHorizontal.call() : options.tilingPaddingHorizontal;

	  CoSEConstants.DEFAULT_INCREMENTAL = FDLayoutConstants.DEFAULT_INCREMENTAL = LayoutConstants.DEFAULT_INCREMENTAL = true;
	  LayoutConstants.DEFAULT_UNIFORM_LEAF_NODE_SIZES = options.uniformNodeDimensions;

	  var coseLayout = new CoSELayout();
	  var gm = coseLayout.newGraphManager();

	  processChildrenList(gm.addRoot(), aux.getTopMostNodes(nodes), coseLayout, options);

	  processEdges(coseLayout, gm, edges);

	  coseLayout.runLayout();

	  return idToLNode;
	};

	module.exports = { coseLayout: coseLayout };

	/***/ }),
	/* 5 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	/**
	  The implementation of the spectral layout that is the first part of the fcose layout algorithm
	*/

	var aux = __webpack_require__(1);
	var numeric = __webpack_require__(7);

	// main function that spectral layout is processed
	var spectralLayout = function spectralLayout(options) {

	  var cy = options.cy;
	  var eles = options.eles;
	  var nodes = eles.nodes();
	  var parentNodes = eles.nodes(":parent");

	  var dummyNodes = new Map(); // map to keep dummy nodes and their neighbors
	  var nodeIndexes = new Map(); // map to keep indexes to nodes
	  var parentChildMap = new Map(); // mapping btw. compound and its representative node 
	  var allNodesNeighborhood = []; // array to keep neighborhood of all nodes
	  var xCoords = [];
	  var yCoords = [];

	  var samplesColumn = []; // sampled vertices
	  var minDistancesColumn = [];
	  var C = []; // column sampling matrix
	  var PHI = []; // intersection of column and row sampling matrices 
	  var INV = []; // inverse of PHI 

	  var firstSample = void 0; // the first sampled node
	  var nodeSize = void 0;

	  var infinity = 100000000;
	  var small = 0.000000001;

	  var piTol = options.piTol;
	  var samplingType = options.samplingType; // false for random, true for greedy
	  var nodeSeparation = options.nodeSeparation;
	  var sampleSize = void 0;

	  /**** Spectral-preprocessing functions ****/

	  /**** Spectral layout functions ****/

	  // determine which columns to be sampled
	  var randomSampleCR = function randomSampleCR() {
	    var sample = 0;
	    var count = 0;
	    var flag = false;

	    while (count < sampleSize) {
	      sample = Math.floor(Math.random() * nodeSize);

	      flag = false;
	      for (var i = 0; i < count; i++) {
	        if (samplesColumn[i] == sample) {
	          flag = true;
	          break;
	        }
	      }

	      if (!flag) {
	        samplesColumn[count] = sample;
	        count++;
	      } else {
	        continue;
	      }
	    }
	  };

	  // takes the index of the node(pivot) to initiate BFS as a parameter
	  var BFS = function BFS(pivot, index, samplingMethod) {
	    var path = []; // the front of the path
	    var front = 0; // the back of the path
	    var back = 0;
	    var current = 0;
	    var temp = void 0;
	    var distance = [];

	    var max_dist = 0; // the furthest node to be returned
	    var max_ind = 1;

	    for (var i = 0; i < nodeSize; i++) {
	      distance[i] = infinity;
	    }

	    path[back] = pivot;
	    distance[pivot] = 0;

	    while (back >= front) {
	      current = path[front++];
	      var neighbors = allNodesNeighborhood[current];
	      for (var _i = 0; _i < neighbors.length; _i++) {
	        temp = nodeIndexes.get(neighbors[_i]);
	        if (distance[temp] == infinity) {
	          distance[temp] = distance[current] + 1;
	          path[++back] = temp;
	        }
	      }
	      C[current][index] = distance[current] * nodeSeparation;
	    }

	    if (samplingMethod) {
	      for (var _i2 = 0; _i2 < nodeSize; _i2++) {
	        if (C[_i2][index] < minDistancesColumn[_i2]) minDistancesColumn[_i2] = C[_i2][index];
	      }

	      for (var _i3 = 0; _i3 < nodeSize; _i3++) {
	        if (minDistancesColumn[_i3] > max_dist) {
	          max_dist = minDistancesColumn[_i3];
	          max_ind = _i3;
	        }
	      }
	    }
	    return max_ind;
	  };

	  // apply BFS to all nodes or selected samples
	  var allBFS = function allBFS(samplingMethod) {

	    var sample = void 0;

	    if (!samplingMethod) {
	      randomSampleCR();

	      // call BFS
	      for (var i = 0; i < sampleSize; i++) {
	        BFS(samplesColumn[i], i, samplingMethod, false);
	      }
	    } else {
	      sample = Math.floor(Math.random() * nodeSize);
	      firstSample = sample;

	      for (var _i4 = 0; _i4 < nodeSize; _i4++) {
	        minDistancesColumn[_i4] = infinity;
	      }

	      for (var _i5 = 0; _i5 < sampleSize; _i5++) {
	        samplesColumn[_i5] = sample;
	        sample = BFS(sample, _i5, samplingMethod);
	      }
	    }

	    // form the squared distances for C
	    for (var _i6 = 0; _i6 < nodeSize; _i6++) {
	      for (var j = 0; j < sampleSize; j++) {
	        C[_i6][j] *= C[_i6][j];
	      }
	    }

	    // form PHI
	    for (var _i7 = 0; _i7 < sampleSize; _i7++) {
	      PHI[_i7] = [];
	    }

	    for (var _i8 = 0; _i8 < sampleSize; _i8++) {
	      for (var _j = 0; _j < sampleSize; _j++) {
	        PHI[_i8][_j] = C[samplesColumn[_j]][_i8];
	      }
	    }
	  };

	  // perform the SVD algorithm and apply a regularization step
	  var sample = function sample() {

	    var SVDResult = numeric.svd(PHI);

	    var a_w = SVDResult.S;
	    var a_u = SVDResult.U;
	    var a_v = SVDResult.V;

	    var max_s = a_w[0] * a_w[0] * a_w[0];

	    var a_Sig = [];

	    //  regularization
	    for (var i = 0; i < sampleSize; i++) {
	      a_Sig[i] = [];
	      for (var j = 0; j < sampleSize; j++) {
	        a_Sig[i][j] = 0;
	        if (i == j) {
	          a_Sig[i][j] = a_w[i] / (a_w[i] * a_w[i] + max_s / (a_w[i] * a_w[i]));
	        }
	      }
	    }

	    INV = aux.multMat(aux.multMat(a_v, a_Sig), numeric.transpose(a_u));
	  };

	  // calculate final coordinates 
	  var powerIteration = function powerIteration() {
	    // two largest eigenvalues
	    var theta1 = void 0;
	    var theta2 = void 0;

	    // initial guesses for eigenvectors
	    var Y1 = [];
	    var Y2 = [];

	    var V1 = [];
	    var V2 = [];

	    for (var i = 0; i < nodeSize; i++) {
	      Y1[i] = Math.random();
	      Y2[i] = Math.random();
	    }

	    Y1 = aux.normalize(Y1);
	    Y2 = aux.normalize(Y2);

	    var count = 0;
	    // to keep track of the improvement ratio in power iteration
	    var current = small;
	    var previous = small;

	    var temp = void 0;

	    while (true) {
	      count++;

	      for (var _i9 = 0; _i9 < nodeSize; _i9++) {
	        V1[_i9] = Y1[_i9];
	      }

	      Y1 = aux.multGamma(aux.multL(aux.multGamma(V1), C, INV));
	      theta1 = aux.dotProduct(V1, Y1);
	      Y1 = aux.normalize(Y1);

	      current = aux.dotProduct(V1, Y1);

	      temp = Math.abs(current / previous);

	      if (temp <= 1 + piTol && temp >= 1) {
	        break;
	      }

	      previous = current;
	    }

	    for (var _i10 = 0; _i10 < nodeSize; _i10++) {
	      V1[_i10] = Y1[_i10];
	    }

	    count = 0;
	    previous = small;
	    while (true) {
	      count++;

	      for (var _i11 = 0; _i11 < nodeSize; _i11++) {
	        V2[_i11] = Y2[_i11];
	      }

	      V2 = aux.minusOp(V2, aux.multCons(V1, aux.dotProduct(V1, V2)));
	      Y2 = aux.multGamma(aux.multL(aux.multGamma(V2), C, INV));
	      theta2 = aux.dotProduct(V2, Y2);
	      Y2 = aux.normalize(Y2);

	      current = aux.dotProduct(V2, Y2);

	      temp = Math.abs(current / previous);

	      if (temp <= 1 + piTol && temp >= 1) {
	        break;
	      }

	      previous = current;
	    }

	    for (var _i12 = 0; _i12 < nodeSize; _i12++) {
	      V2[_i12] = Y2[_i12];
	    }

	    // theta1 now contains dominant eigenvalue
	    // theta2 now contains the second-largest eigenvalue
	    // V1 now contains theta1's eigenvector
	    // V2 now contains theta2's eigenvector

	    //populate the two vectors
	    xCoords = aux.multCons(V1, Math.sqrt(Math.abs(theta1)));
	    yCoords = aux.multCons(V2, Math.sqrt(Math.abs(theta2)));
	  };

	  /**** Preparation for spectral layout (Preprocessing) ****/

	  // connect disconnected components (first top level, then inside of each compound node)
	  aux.connectComponents(cy, eles, aux.getTopMostNodes(nodes), dummyNodes);

	  parentNodes.forEach(function (ele) {
	    aux.connectComponents(cy, eles, aux.getTopMostNodes(ele.descendants()), dummyNodes);
	  });

	  // assign indexes to nodes (first real, then dummy nodes)
	  var index = 0;
	  for (var i = 0; i < nodes.length; i++) {
	    if (!nodes[i].isParent()) {
	      nodeIndexes.set(nodes[i].id(), index++);
	    }
	  }

	  var _iteratorNormalCompletion = true;
	  var _didIteratorError = false;
	  var _iteratorError = undefined;

	  try {
	    for (var _iterator = dummyNodes.keys()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	      var key = _step.value;

	      nodeIndexes.set(key, index++);
	    }

	    // instantiate the neighborhood matrix
	  } catch (err) {
	    _didIteratorError = true;
	    _iteratorError = err;
	  } finally {
	    try {
	      if (!_iteratorNormalCompletion && _iterator.return) {
	        _iterator.return();
	      }
	    } finally {
	      if (_didIteratorError) {
	        throw _iteratorError;
	      }
	    }
	  }

	  for (var _i13 = 0; _i13 < nodeIndexes.size; _i13++) {
	    allNodesNeighborhood[_i13] = [];
	  }

	  // form a parent-child map to keep representative node of each compound node  
	  parentNodes.forEach(function (ele) {
	    var children = ele.children();

	    //      let random = 0;
	    while (children.nodes(":childless").length == 0) {
	      //        random = Math.floor(Math.random() * children.nodes().length); // if all children are compound then proceed randomly
	      children = children.nodes()[0].children();
	    }
	    //  select the representative node - we can apply different methods here
	    //      random = Math.floor(Math.random() * children.nodes(":childless").length);
	    var index = 0;
	    var min = children.nodes(":childless")[0].connectedEdges().length;
	    children.nodes(":childless").forEach(function (ele2, i) {
	      if (ele2.connectedEdges().length < min) {
	        min = ele2.connectedEdges().length;
	        index = i;
	      }
	    });
	    parentChildMap.set(ele.id(), children.nodes(":childless")[index].id());
	  });

	  // add neighborhood relations (first real, then dummy nodes)
	  nodes.forEach(function (ele) {
	    var eleIndex = void 0;

	    if (ele.isParent()) eleIndex = nodeIndexes.get(parentChildMap.get(ele.id()));else eleIndex = nodeIndexes.get(ele.id());

	    ele.neighborhood().nodes().forEach(function (node) {
	      if (eles.anySame(ele.edgesWith(node))) {
	        if (node.isParent()) allNodesNeighborhood[eleIndex].push(parentChildMap.get(node.id()));else allNodesNeighborhood[eleIndex].push(node.id());
	      }
	    });
	  });

	  var _loop = function _loop(_key) {
	    var eleIndex = nodeIndexes.get(_key);
	    var disconnectedId = void 0;
	    dummyNodes.get(_key).forEach(function (id) {
	      if (cy.getElementById(id).isParent()) disconnectedId = parentChildMap.get(id);else disconnectedId = id;

	      allNodesNeighborhood[eleIndex].push(disconnectedId);
	      allNodesNeighborhood[nodeIndexes.get(disconnectedId)].push(_key);
	    });
	  };

	  var _iteratorNormalCompletion2 = true;
	  var _didIteratorError2 = false;
	  var _iteratorError2 = undefined;

	  try {
	    for (var _iterator2 = dummyNodes.keys()[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
	      var _key = _step2.value;

	      _loop(_key);
	    }

	    // nodeSize now only considers the size of transformed graph
	  } catch (err) {
	    _didIteratorError2 = true;
	    _iteratorError2 = err;
	  } finally {
	    try {
	      if (!_iteratorNormalCompletion2 && _iterator2.return) {
	        _iterator2.return();
	      }
	    } finally {
	      if (_didIteratorError2) {
	        throw _iteratorError2;
	      }
	    }
	  }

	  nodeSize = nodeIndexes.size;

	  var spectralResult = void 0;

	  // If number of nodes in transformed graph is 1 or 2, either SVD or powerIteration causes problem
	  // So skip spectral and layout the graph with cose
	  if (nodeSize > 2) {
	    // if # of nodes in transformed graph is smaller than sample size,
	    // then use # of nodes as sample size
	    sampleSize = nodeSize < options.sampleSize ? nodeSize : options.sampleSize;

	    // instantiates the partial matrices that will be used in spectral layout
	    for (var _i14 = 0; _i14 < nodeSize; _i14++) {
	      C[_i14] = [];
	    }
	    for (var _i15 = 0; _i15 < sampleSize; _i15++) {
	      INV[_i15] = [];
	    }

	    /**** Apply spectral layout ****/

	    allBFS(samplingType);
	    sample();
	    powerIteration();

	    spectralResult = { nodeIndexes: nodeIndexes, xCoords: xCoords, yCoords: yCoords };
	    return spectralResult;
	  } else {
	    var iterator = nodeIndexes.keys();
	    var firstNode = cy.getElementById(iterator.next().value);
	    var firstNodePos = firstNode.position();
	    var firstNodeWidth = firstNode.outerWidth();
	    xCoords.push(firstNodePos.x);
	    yCoords.push(firstNodePos.y);
	    if (nodeSize == 2) {
	      var secondNode = cy.getElementById(iterator.next().value);
	      var secondNodeWidth = secondNode.outerWidth();
	      xCoords.push(firstNodePos.x + firstNodeWidth / 2 + secondNodeWidth / 2 + options.idealEdgeLength);
	      yCoords.push(firstNodePos.y);
	    }

	    spectralResult = { nodeIndexes: nodeIndexes, xCoords: xCoords, yCoords: yCoords };
	    return spectralResult;
	  }
	};

	module.exports = { spectralLayout: spectralLayout };

	/***/ }),
	/* 6 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	var impl = __webpack_require__(2);

	// registers the extension on a cytoscape lib ref
	var register = function register(cytoscape) {
	  if (!cytoscape) {
	    return;
	  } // can't register if cytoscape unspecified

	  cytoscape('layout', 'fcose', impl); // register with cytoscape.js
	};

	if (typeof cytoscape !== 'undefined') {
	  // expose to global cytoscape (i.e. window.cytoscape)
	  register(cytoscape);
	}

	module.exports = register;

	/***/ }),
	/* 7 */
	/***/ (function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_7__;

	/***/ })
	/******/ ]);
	});

/***/ }),
/* 304 */
/***/ (function(module, exports, __webpack_require__) {

	(function webpackUniversalModuleDefinition(root, factory) {
		if(true)
			module.exports = factory(__webpack_require__(305));
		else if(typeof define === 'function' && define.amd)
			define(["layout-base"], factory);
		else if(typeof exports === 'object')
			exports["coseBase"] = factory(require("layout-base"));
		else
			root["coseBase"] = factory(root["layoutBase"]);
	})(this, function(__WEBPACK_EXTERNAL_MODULE_0__) {
	return /******/ (function(modules) { // webpackBootstrap
	/******/ 	// The module cache
	/******/ 	var installedModules = {};
	/******/
	/******/ 	// The require function
	/******/ 	function __webpack_require__(moduleId) {
	/******/
	/******/ 		// Check if module is in cache
	/******/ 		if(installedModules[moduleId]) {
	/******/ 			return installedModules[moduleId].exports;
	/******/ 		}
	/******/ 		// Create a new module (and put it into the cache)
	/******/ 		var module = installedModules[moduleId] = {
	/******/ 			i: moduleId,
	/******/ 			l: false,
	/******/ 			exports: {}
	/******/ 		};
	/******/
	/******/ 		// Execute the module function
	/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
	/******/
	/******/ 		// Flag the module as loaded
	/******/ 		module.l = true;
	/******/
	/******/ 		// Return the exports of the module
	/******/ 		return module.exports;
	/******/ 	}
	/******/
	/******/
	/******/ 	// expose the modules object (__webpack_modules__)
	/******/ 	__webpack_require__.m = modules;
	/******/
	/******/ 	// expose the module cache
	/******/ 	__webpack_require__.c = installedModules;
	/******/
	/******/ 	// identity function for calling harmony imports with the correct context
	/******/ 	__webpack_require__.i = function(value) { return value; };
	/******/
	/******/ 	// define getter function for harmony exports
	/******/ 	__webpack_require__.d = function(exports, name, getter) {
	/******/ 		if(!__webpack_require__.o(exports, name)) {
	/******/ 			Object.defineProperty(exports, name, {
	/******/ 				configurable: false,
	/******/ 				enumerable: true,
	/******/ 				get: getter
	/******/ 			});
	/******/ 		}
	/******/ 	};
	/******/
	/******/ 	// getDefaultExport function for compatibility with non-harmony modules
	/******/ 	__webpack_require__.n = function(module) {
	/******/ 		var getter = module && module.__esModule ?
	/******/ 			function getDefault() { return module['default']; } :
	/******/ 			function getModuleExports() { return module; };
	/******/ 		__webpack_require__.d(getter, 'a', getter);
	/******/ 		return getter;
	/******/ 	};
	/******/
	/******/ 	// Object.prototype.hasOwnProperty.call
	/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
	/******/
	/******/ 	// __webpack_public_path__
	/******/ 	__webpack_require__.p = "";
	/******/
	/******/ 	// Load entry module and return exports
	/******/ 	return __webpack_require__(__webpack_require__.s = 7);
	/******/ })
	/************************************************************************/
	/******/ ([
	/* 0 */
	/***/ (function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_0__;

	/***/ }),
	/* 1 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	var FDLayoutConstants = __webpack_require__(0).FDLayoutConstants;

	function CoSEConstants() {}

	//CoSEConstants inherits static props in FDLayoutConstants
	for (var prop in FDLayoutConstants) {
	  CoSEConstants[prop] = FDLayoutConstants[prop];
	}

	CoSEConstants.DEFAULT_USE_MULTI_LEVEL_SCALING = false;
	CoSEConstants.DEFAULT_RADIAL_SEPARATION = FDLayoutConstants.DEFAULT_EDGE_LENGTH;
	CoSEConstants.DEFAULT_COMPONENT_SEPERATION = 60;
	CoSEConstants.TILE = true;
	CoSEConstants.TILING_PADDING_VERTICAL = 10;
	CoSEConstants.TILING_PADDING_HORIZONTAL = 10;

	module.exports = CoSEConstants;

	/***/ }),
	/* 2 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	var FDLayoutEdge = __webpack_require__(0).FDLayoutEdge;

	function CoSEEdge(source, target, vEdge) {
	  FDLayoutEdge.call(this, source, target, vEdge);
	}

	CoSEEdge.prototype = Object.create(FDLayoutEdge.prototype);
	for (var prop in FDLayoutEdge) {
	  CoSEEdge[prop] = FDLayoutEdge[prop];
	}

	module.exports = CoSEEdge;

	/***/ }),
	/* 3 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	var LGraph = __webpack_require__(0).LGraph;

	function CoSEGraph(parent, graphMgr, vGraph) {
	  LGraph.call(this, parent, graphMgr, vGraph);
	}

	CoSEGraph.prototype = Object.create(LGraph.prototype);
	for (var prop in LGraph) {
	  CoSEGraph[prop] = LGraph[prop];
	}

	module.exports = CoSEGraph;

	/***/ }),
	/* 4 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	var LGraphManager = __webpack_require__(0).LGraphManager;

	function CoSEGraphManager(layout) {
	  LGraphManager.call(this, layout);
	}

	CoSEGraphManager.prototype = Object.create(LGraphManager.prototype);
	for (var prop in LGraphManager) {
	  CoSEGraphManager[prop] = LGraphManager[prop];
	}

	module.exports = CoSEGraphManager;

	/***/ }),
	/* 5 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	var FDLayoutNode = __webpack_require__(0).FDLayoutNode;
	var IMath = __webpack_require__(0).IMath;

	function CoSENode(gm, loc, size, vNode) {
	  FDLayoutNode.call(this, gm, loc, size, vNode);
	}

	CoSENode.prototype = Object.create(FDLayoutNode.prototype);
	for (var prop in FDLayoutNode) {
	  CoSENode[prop] = FDLayoutNode[prop];
	}

	CoSENode.prototype.move = function () {
	  var layout = this.graphManager.getLayout();
	  this.displacementX = layout.coolingFactor * (this.springForceX + this.repulsionForceX + this.gravitationForceX) / this.noOfChildren;
	  this.displacementY = layout.coolingFactor * (this.springForceY + this.repulsionForceY + this.gravitationForceY) / this.noOfChildren;

	  if (Math.abs(this.displacementX) > layout.coolingFactor * layout.maxNodeDisplacement) {
	    this.displacementX = layout.coolingFactor * layout.maxNodeDisplacement * IMath.sign(this.displacementX);
	  }

	  if (Math.abs(this.displacementY) > layout.coolingFactor * layout.maxNodeDisplacement) {
	    this.displacementY = layout.coolingFactor * layout.maxNodeDisplacement * IMath.sign(this.displacementY);
	  }

	  // a simple node, just move it
	  if (this.child == null) {
	    this.moveBy(this.displacementX, this.displacementY);
	  }
	  // an empty compound node, again just move it
	  else if (this.child.getNodes().length == 0) {
	      this.moveBy(this.displacementX, this.displacementY);
	    }
	    // non-empty compound node, propogate movement to children as well
	    else {
	        this.propogateDisplacementToChildren(this.displacementX, this.displacementY);
	      }

	  layout.totalDisplacement += Math.abs(this.displacementX) + Math.abs(this.displacementY);

	  this.springForceX = 0;
	  this.springForceY = 0;
	  this.repulsionForceX = 0;
	  this.repulsionForceY = 0;
	  this.gravitationForceX = 0;
	  this.gravitationForceY = 0;
	  this.displacementX = 0;
	  this.displacementY = 0;
	};

	CoSENode.prototype.propogateDisplacementToChildren = function (dX, dY) {
	  var nodes = this.getChild().getNodes();
	  var node;
	  for (var i = 0; i < nodes.length; i++) {
	    node = nodes[i];
	    if (node.getChild() == null) {
	      node.moveBy(dX, dY);
	      node.displacementX += dX;
	      node.displacementY += dY;
	    } else {
	      node.propogateDisplacementToChildren(dX, dY);
	    }
	  }
	};

	CoSENode.prototype.setPred1 = function (pred1) {
	  this.pred1 = pred1;
	};

	CoSENode.prototype.getPred1 = function () {
	  return pred1;
	};

	CoSENode.prototype.getPred2 = function () {
	  return pred2;
	};

	CoSENode.prototype.setNext = function (next) {
	  this.next = next;
	};

	CoSENode.prototype.getNext = function () {
	  return next;
	};

	CoSENode.prototype.setProcessed = function (processed) {
	  this.processed = processed;
	};

	CoSENode.prototype.isProcessed = function () {
	  return processed;
	};

	module.exports = CoSENode;

	/***/ }),
	/* 6 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	var FDLayout = __webpack_require__(0).FDLayout;
	var CoSEGraphManager = __webpack_require__(4);
	var CoSEGraph = __webpack_require__(3);
	var CoSENode = __webpack_require__(5);
	var CoSEEdge = __webpack_require__(2);
	var CoSEConstants = __webpack_require__(1);
	var FDLayoutConstants = __webpack_require__(0).FDLayoutConstants;
	var LayoutConstants = __webpack_require__(0).LayoutConstants;
	var Point = __webpack_require__(0).Point;
	var PointD = __webpack_require__(0).PointD;
	var Layout = __webpack_require__(0).Layout;
	var Integer = __webpack_require__(0).Integer;
	var IGeometry = __webpack_require__(0).IGeometry;
	var LGraph = __webpack_require__(0).LGraph;
	var Transform = __webpack_require__(0).Transform;

	function CoSELayout() {
	  FDLayout.call(this);

	  this.toBeTiled = {}; // Memorize if a node is to be tiled or is tiled
	}

	CoSELayout.prototype = Object.create(FDLayout.prototype);

	for (var prop in FDLayout) {
	  CoSELayout[prop] = FDLayout[prop];
	}

	CoSELayout.prototype.newGraphManager = function () {
	  var gm = new CoSEGraphManager(this);
	  this.graphManager = gm;
	  return gm;
	};

	CoSELayout.prototype.newGraph = function (vGraph) {
	  return new CoSEGraph(null, this.graphManager, vGraph);
	};

	CoSELayout.prototype.newNode = function (vNode) {
	  return new CoSENode(this.graphManager, vNode);
	};

	CoSELayout.prototype.newEdge = function (vEdge) {
	  return new CoSEEdge(null, null, vEdge);
	};

	CoSELayout.prototype.initParameters = function () {
	  FDLayout.prototype.initParameters.call(this, arguments);
	  if (!this.isSubLayout) {
	    if (CoSEConstants.DEFAULT_EDGE_LENGTH < 10) {
	      this.idealEdgeLength = 10;
	    } else {
	      this.idealEdgeLength = CoSEConstants.DEFAULT_EDGE_LENGTH;
	    }

	    this.useSmartIdealEdgeLengthCalculation = CoSEConstants.DEFAULT_USE_SMART_IDEAL_EDGE_LENGTH_CALCULATION;
	    this.springConstant = FDLayoutConstants.DEFAULT_SPRING_STRENGTH;
	    this.repulsionConstant = FDLayoutConstants.DEFAULT_REPULSION_STRENGTH;
	    this.gravityConstant = FDLayoutConstants.DEFAULT_GRAVITY_STRENGTH;
	    this.compoundGravityConstant = FDLayoutConstants.DEFAULT_COMPOUND_GRAVITY_STRENGTH;
	    this.gravityRangeFactor = FDLayoutConstants.DEFAULT_GRAVITY_RANGE_FACTOR;
	    this.compoundGravityRangeFactor = FDLayoutConstants.DEFAULT_COMPOUND_GRAVITY_RANGE_FACTOR;

	    // variables for tree reduction support
	    this.prunedNodesAll = [];
	    this.growTreeIterations = 0;
	    this.afterGrowthIterations = 0;
	    this.isTreeGrowing = false;
	    this.isGrowthFinished = false;

	    // variables for cooling
	    this.coolingCycle = 0;
	    this.maxCoolingCycle = this.maxIterations / FDLayoutConstants.CONVERGENCE_CHECK_PERIOD;
	    this.finalTemperature = FDLayoutConstants.CONVERGENCE_CHECK_PERIOD / this.maxIterations;
	    this.coolingAdjuster = 1;
	  }
	};

	CoSELayout.prototype.layout = function () {
	  var createBendsAsNeeded = LayoutConstants.DEFAULT_CREATE_BENDS_AS_NEEDED;
	  if (createBendsAsNeeded) {
	    this.createBendpoints();
	    this.graphManager.resetAllEdges();
	  }

	  this.level = 0;
	  return this.classicLayout();
	};

	CoSELayout.prototype.classicLayout = function () {
	  this.nodesWithGravity = this.calculateNodesToApplyGravitationTo();
	  this.graphManager.setAllNodesToApplyGravitation(this.nodesWithGravity);
	  this.calcNoOfChildrenForAllNodes();
	  this.graphManager.calcLowestCommonAncestors();
	  this.graphManager.calcInclusionTreeDepths();
	  this.graphManager.getRoot().calcEstimatedSize();
	  this.calcIdealEdgeLengths();

	  if (!this.incremental) {
	    var forest = this.getFlatForest();

	    // The graph associated with this layout is flat and a forest
	    if (forest.length > 0) {
	      this.positionNodesRadially(forest);
	    }
	    // The graph associated with this layout is not flat or a forest
	    else {
	        // Reduce the trees when incremental mode is not enabled and graph is not a forest 
	        this.reduceTrees();
	        // Update nodes that gravity will be applied
	        this.graphManager.resetAllNodesToApplyGravitation();
	        var allNodes = new Set(this.getAllNodes());
	        var intersection = this.nodesWithGravity.filter(function (x) {
	          return allNodes.has(x);
	        });
	        this.graphManager.setAllNodesToApplyGravitation(intersection);

	        this.positionNodesRandomly();
	      }
	  }

	  this.initSpringEmbedder();
	  this.runSpringEmbedder();

	  return true;
	};

	CoSELayout.prototype.tick = function () {
	  this.totalIterations++;

	  if (this.totalIterations === this.maxIterations && !this.isTreeGrowing && !this.isGrowthFinished) {
	    if (this.prunedNodesAll.length > 0) {
	      this.isTreeGrowing = true;
	    } else {
	      return true;
	    }
	  }

	  if (this.totalIterations % FDLayoutConstants.CONVERGENCE_CHECK_PERIOD == 0 && !this.isTreeGrowing && !this.isGrowthFinished) {
	    if (this.isConverged()) {
	      if (this.prunedNodesAll.length > 0) {
	        this.isTreeGrowing = true;
	      } else {
	        return true;
	      }
	    }

	    this.coolingCycle++;

	    if (this.layoutQuality == 0) {
	      // quality - "draft"
	      this.coolingAdjuster = this.coolingCycle;
	    } else if (this.layoutQuality == 1) {
	      // quality - "default"
	      this.coolingAdjuster = this.coolingCycle / 3;
	    }

	    // cooling schedule is based on http://www.btluke.com/simanf1.html -> cooling schedule 3
	    this.coolingFactor = Math.max(this.initialCoolingFactor - Math.pow(this.coolingCycle, Math.log(100 * (this.initialCoolingFactor - this.finalTemperature)) / Math.log(this.maxCoolingCycle)) / 100 * this.coolingAdjuster, this.finalTemperature);
	    this.animationPeriod = Math.ceil(this.initialAnimationPeriod * Math.sqrt(this.coolingFactor));
	  }
	  // Operations while tree is growing again 
	  if (this.isTreeGrowing) {
	    if (this.growTreeIterations % 10 == 0) {
	      if (this.prunedNodesAll.length > 0) {
	        this.graphManager.updateBounds();
	        this.updateGrid();
	        this.growTree(this.prunedNodesAll);
	        // Update nodes that gravity will be applied
	        this.graphManager.resetAllNodesToApplyGravitation();
	        var allNodes = new Set(this.getAllNodes());
	        var intersection = this.nodesWithGravity.filter(function (x) {
	          return allNodes.has(x);
	        });
	        this.graphManager.setAllNodesToApplyGravitation(intersection);

	        this.graphManager.updateBounds();
	        this.updateGrid();
	        this.coolingFactor = FDLayoutConstants.DEFAULT_COOLING_FACTOR_INCREMENTAL;
	      } else {
	        this.isTreeGrowing = false;
	        this.isGrowthFinished = true;
	      }
	    }
	    this.growTreeIterations++;
	  }
	  // Operations after growth is finished
	  if (this.isGrowthFinished) {
	    if (this.isConverged()) {
	      return true;
	    }
	    if (this.afterGrowthIterations % 10 == 0) {
	      this.graphManager.updateBounds();
	      this.updateGrid();
	    }
	    this.coolingFactor = FDLayoutConstants.DEFAULT_COOLING_FACTOR_INCREMENTAL * ((100 - this.afterGrowthIterations) / 100);
	    this.afterGrowthIterations++;
	  }

	  var gridUpdateAllowed = !this.isTreeGrowing && !this.isGrowthFinished;
	  var forceToNodeSurroundingUpdate = this.growTreeIterations % 10 == 1 && this.isTreeGrowing || this.afterGrowthIterations % 10 == 1 && this.isGrowthFinished;

	  this.totalDisplacement = 0;
	  this.graphManager.updateBounds();
	  this.calcSpringForces();
	  this.calcRepulsionForces(gridUpdateAllowed, forceToNodeSurroundingUpdate);
	  this.calcGravitationalForces();
	  this.moveNodes();
	  this.animate();

	  return false; // Layout is not ended yet return false
	};

	CoSELayout.prototype.getPositionsData = function () {
	  var allNodes = this.graphManager.getAllNodes();
	  var pData = {};
	  for (var i = 0; i < allNodes.length; i++) {
	    var rect = allNodes[i].rect;
	    var id = allNodes[i].id;
	    pData[id] = {
	      id: id,
	      x: rect.getCenterX(),
	      y: rect.getCenterY(),
	      w: rect.width,
	      h: rect.height
	    };
	  }

	  return pData;
	};

	CoSELayout.prototype.runSpringEmbedder = function () {
	  this.initialAnimationPeriod = 25;
	  this.animationPeriod = this.initialAnimationPeriod;
	  var layoutEnded = false;

	  // If aminate option is 'during' signal that layout is supposed to start iterating
	  if (FDLayoutConstants.ANIMATE === 'during') {
	    this.emit('layoutstarted');
	  } else {
	    // If aminate option is 'during' tick() function will be called on index.js
	    while (!layoutEnded) {
	      layoutEnded = this.tick();
	    }

	    this.graphManager.updateBounds();
	  }
	};

	CoSELayout.prototype.calculateNodesToApplyGravitationTo = function () {
	  var nodeList = [];
	  var graph;

	  var graphs = this.graphManager.getGraphs();
	  var size = graphs.length;
	  var i;
	  for (i = 0; i < size; i++) {
	    graph = graphs[i];

	    graph.updateConnected();

	    if (!graph.isConnected) {
	      nodeList = nodeList.concat(graph.getNodes());
	    }
	  }

	  return nodeList;
	};

	CoSELayout.prototype.createBendpoints = function () {
	  var edges = [];
	  edges = edges.concat(this.graphManager.getAllEdges());
	  var visited = new Set();
	  var i;
	  for (i = 0; i < edges.length; i++) {
	    var edge = edges[i];

	    if (!visited.has(edge)) {
	      var source = edge.getSource();
	      var target = edge.getTarget();

	      if (source == target) {
	        edge.getBendpoints().push(new PointD());
	        edge.getBendpoints().push(new PointD());
	        this.createDummyNodesForBendpoints(edge);
	        visited.add(edge);
	      } else {
	        var edgeList = [];

	        edgeList = edgeList.concat(source.getEdgeListToNode(target));
	        edgeList = edgeList.concat(target.getEdgeListToNode(source));

	        if (!visited.has(edgeList[0])) {
	          if (edgeList.length > 1) {
	            var k;
	            for (k = 0; k < edgeList.length; k++) {
	              var multiEdge = edgeList[k];
	              multiEdge.getBendpoints().push(new PointD());
	              this.createDummyNodesForBendpoints(multiEdge);
	            }
	          }
	          edgeList.forEach(function (edge) {
	            visited.add(edge);
	          });
	        }
	      }
	    }

	    if (visited.size == edges.length) {
	      break;
	    }
	  }
	};

	CoSELayout.prototype.positionNodesRadially = function (forest) {
	  // We tile the trees to a grid row by row; first tree starts at (0,0)
	  var currentStartingPoint = new Point(0, 0);
	  var numberOfColumns = Math.ceil(Math.sqrt(forest.length));
	  var height = 0;
	  var currentY = 0;
	  var currentX = 0;
	  var point = new PointD(0, 0);

	  for (var i = 0; i < forest.length; i++) {
	    if (i % numberOfColumns == 0) {
	      // Start of a new row, make the x coordinate 0, increment the
	      // y coordinate with the max height of the previous row
	      currentX = 0;
	      currentY = height;

	      if (i != 0) {
	        currentY += CoSEConstants.DEFAULT_COMPONENT_SEPERATION;
	      }

	      height = 0;
	    }

	    var tree = forest[i];

	    // Find the center of the tree
	    var centerNode = Layout.findCenterOfTree(tree);

	    // Set the staring point of the next tree
	    currentStartingPoint.x = currentX;
	    currentStartingPoint.y = currentY;

	    // Do a radial layout starting with the center
	    point = CoSELayout.radialLayout(tree, centerNode, currentStartingPoint);

	    if (point.y > height) {
	      height = Math.floor(point.y);
	    }

	    currentX = Math.floor(point.x + CoSEConstants.DEFAULT_COMPONENT_SEPERATION);
	  }

	  this.transform(new PointD(LayoutConstants.WORLD_CENTER_X - point.x / 2, LayoutConstants.WORLD_CENTER_Y - point.y / 2));
	};

	CoSELayout.radialLayout = function (tree, centerNode, startingPoint) {
	  var radialSep = Math.max(this.maxDiagonalInTree(tree), CoSEConstants.DEFAULT_RADIAL_SEPARATION);
	  CoSELayout.branchRadialLayout(centerNode, null, 0, 359, 0, radialSep);
	  var bounds = LGraph.calculateBounds(tree);

	  var transform = new Transform();
	  transform.setDeviceOrgX(bounds.getMinX());
	  transform.setDeviceOrgY(bounds.getMinY());
	  transform.setWorldOrgX(startingPoint.x);
	  transform.setWorldOrgY(startingPoint.y);

	  for (var i = 0; i < tree.length; i++) {
	    var node = tree[i];
	    node.transform(transform);
	  }

	  var bottomRight = new PointD(bounds.getMaxX(), bounds.getMaxY());

	  return transform.inverseTransformPoint(bottomRight);
	};

	CoSELayout.branchRadialLayout = function (node, parentOfNode, startAngle, endAngle, distance, radialSeparation) {
	  // First, position this node by finding its angle.
	  var halfInterval = (endAngle - startAngle + 1) / 2;

	  if (halfInterval < 0) {
	    halfInterval += 180;
	  }

	  var nodeAngle = (halfInterval + startAngle) % 360;
	  var teta = nodeAngle * IGeometry.TWO_PI / 360;

	  // Make polar to java cordinate conversion.
	  var cos_teta = Math.cos(teta);
	  var x_ = distance * Math.cos(teta);
	  var y_ = distance * Math.sin(teta);

	  node.setCenter(x_, y_);

	  // Traverse all neighbors of this node and recursively call this
	  // function.
	  var neighborEdges = [];
	  neighborEdges = neighborEdges.concat(node.getEdges());
	  var childCount = neighborEdges.length;

	  if (parentOfNode != null) {
	    childCount--;
	  }

	  var branchCount = 0;

	  var incEdgesCount = neighborEdges.length;
	  var startIndex;

	  var edges = node.getEdgesBetween(parentOfNode);

	  // If there are multiple edges, prune them until there remains only one
	  // edge.
	  while (edges.length > 1) {
	    //neighborEdges.remove(edges.remove(0));
	    var temp = edges[0];
	    edges.splice(0, 1);
	    var index = neighborEdges.indexOf(temp);
	    if (index >= 0) {
	      neighborEdges.splice(index, 1);
	    }
	    incEdgesCount--;
	    childCount--;
	  }

	  if (parentOfNode != null) {
	    //assert edges.length == 1;
	    startIndex = (neighborEdges.indexOf(edges[0]) + 1) % incEdgesCount;
	  } else {
	    startIndex = 0;
	  }

	  var stepAngle = Math.abs(endAngle - startAngle) / childCount;

	  for (var i = startIndex; branchCount != childCount; i = ++i % incEdgesCount) {
	    var currentNeighbor = neighborEdges[i].getOtherEnd(node);

	    // Don't back traverse to root node in current tree.
	    if (currentNeighbor == parentOfNode) {
	      continue;
	    }

	    var childStartAngle = (startAngle + branchCount * stepAngle) % 360;
	    var childEndAngle = (childStartAngle + stepAngle) % 360;

	    CoSELayout.branchRadialLayout(currentNeighbor, node, childStartAngle, childEndAngle, distance + radialSeparation, radialSeparation);

	    branchCount++;
	  }
	};

	CoSELayout.maxDiagonalInTree = function (tree) {
	  var maxDiagonal = Integer.MIN_VALUE;

	  for (var i = 0; i < tree.length; i++) {
	    var node = tree[i];
	    var diagonal = node.getDiagonal();

	    if (diagonal > maxDiagonal) {
	      maxDiagonal = diagonal;
	    }
	  }

	  return maxDiagonal;
	};

	CoSELayout.prototype.calcRepulsionRange = function () {
	  // formula is 2 x (level + 1) x idealEdgeLength
	  return 2 * (this.level + 1) * this.idealEdgeLength;
	};

	// Tiling methods

	// Group zero degree members whose parents are not to be tiled, create dummy parents where needed and fill memberGroups by their dummp parent id's
	CoSELayout.prototype.groupZeroDegreeMembers = function () {
	  var self = this;
	  // array of [parent_id x oneDegreeNode_id]
	  var tempMemberGroups = {}; // A temporary map of parent node and its zero degree members
	  this.memberGroups = {}; // A map of dummy parent node and its zero degree members whose parents are not to be tiled
	  this.idToDummyNode = {}; // A map of id to dummy node 

	  var zeroDegree = []; // List of zero degree nodes whose parents are not to be tiled
	  var allNodes = this.graphManager.getAllNodes();

	  // Fill zero degree list
	  for (var i = 0; i < allNodes.length; i++) {
	    var node = allNodes[i];
	    var parent = node.getParent();
	    // If a node has zero degree and its parent is not to be tiled if exists add that node to zeroDegres list
	    if (this.getNodeDegreeWithChildren(node) === 0 && (parent.id == undefined || !this.getToBeTiled(parent))) {
	      zeroDegree.push(node);
	    }
	  }

	  // Create a map of parent node and its zero degree members
	  for (var i = 0; i < zeroDegree.length; i++) {
	    var node = zeroDegree[i]; // Zero degree node itself
	    var p_id = node.getParent().id; // Parent id

	    if (typeof tempMemberGroups[p_id] === "undefined") tempMemberGroups[p_id] = [];

	    tempMemberGroups[p_id] = tempMemberGroups[p_id].concat(node); // Push node to the list belongs to its parent in tempMemberGroups
	  }

	  // If there are at least two nodes at a level, create a dummy compound for them
	  Object.keys(tempMemberGroups).forEach(function (p_id) {
	    if (tempMemberGroups[p_id].length > 1) {
	      var dummyCompoundId = "DummyCompound_" + p_id; // The id of dummy compound which will be created soon
	      self.memberGroups[dummyCompoundId] = tempMemberGroups[p_id]; // Add dummy compound to memberGroups

	      var parent = tempMemberGroups[p_id][0].getParent(); // The parent of zero degree nodes will be the parent of new dummy compound

	      // Create a dummy compound with calculated id
	      var dummyCompound = new CoSENode(self.graphManager);
	      dummyCompound.id = dummyCompoundId;
	      dummyCompound.paddingLeft = parent.paddingLeft || 0;
	      dummyCompound.paddingRight = parent.paddingRight || 0;
	      dummyCompound.paddingBottom = parent.paddingBottom || 0;
	      dummyCompound.paddingTop = parent.paddingTop || 0;

	      self.idToDummyNode[dummyCompoundId] = dummyCompound;

	      var dummyParentGraph = self.getGraphManager().add(self.newGraph(), dummyCompound);
	      var parentGraph = parent.getChild();

	      // Add dummy compound to parent the graph
	      parentGraph.add(dummyCompound);

	      // For each zero degree node in this level remove it from its parent graph and add it to the graph of dummy parent
	      for (var i = 0; i < tempMemberGroups[p_id].length; i++) {
	        var node = tempMemberGroups[p_id][i];

	        parentGraph.remove(node);
	        dummyParentGraph.add(node);
	      }
	    }
	  });
	};

	CoSELayout.prototype.clearCompounds = function () {
	  var childGraphMap = {};
	  var idToNode = {};

	  // Get compound ordering by finding the inner one first
	  this.performDFSOnCompounds();

	  for (var i = 0; i < this.compoundOrder.length; i++) {

	    idToNode[this.compoundOrder[i].id] = this.compoundOrder[i];
	    childGraphMap[this.compoundOrder[i].id] = [].concat(this.compoundOrder[i].getChild().getNodes());

	    // Remove children of compounds
	    this.graphManager.remove(this.compoundOrder[i].getChild());
	    this.compoundOrder[i].child = null;
	  }

	  this.graphManager.resetAllNodes();

	  // Tile the removed children
	  this.tileCompoundMembers(childGraphMap, idToNode);
	};

	CoSELayout.prototype.clearZeroDegreeMembers = function () {
	  var self = this;
	  var tiledZeroDegreePack = this.tiledZeroDegreePack = [];

	  Object.keys(this.memberGroups).forEach(function (id) {
	    var compoundNode = self.idToDummyNode[id]; // Get the dummy compound

	    tiledZeroDegreePack[id] = self.tileNodes(self.memberGroups[id], compoundNode.paddingLeft + compoundNode.paddingRight);

	    // Set the width and height of the dummy compound as calculated
	    compoundNode.rect.width = tiledZeroDegreePack[id].width;
	    compoundNode.rect.height = tiledZeroDegreePack[id].height;
	  });
	};

	CoSELayout.prototype.repopulateCompounds = function () {
	  for (var i = this.compoundOrder.length - 1; i >= 0; i--) {
	    var lCompoundNode = this.compoundOrder[i];
	    var id = lCompoundNode.id;
	    var horizontalMargin = lCompoundNode.paddingLeft;
	    var verticalMargin = lCompoundNode.paddingTop;

	    this.adjustLocations(this.tiledMemberPack[id], lCompoundNode.rect.x, lCompoundNode.rect.y, horizontalMargin, verticalMargin);
	  }
	};

	CoSELayout.prototype.repopulateZeroDegreeMembers = function () {
	  var self = this;
	  var tiledPack = this.tiledZeroDegreePack;

	  Object.keys(tiledPack).forEach(function (id) {
	    var compoundNode = self.idToDummyNode[id]; // Get the dummy compound by its id
	    var horizontalMargin = compoundNode.paddingLeft;
	    var verticalMargin = compoundNode.paddingTop;

	    // Adjust the positions of nodes wrt its compound
	    self.adjustLocations(tiledPack[id], compoundNode.rect.x, compoundNode.rect.y, horizontalMargin, verticalMargin);
	  });
	};

	CoSELayout.prototype.getToBeTiled = function (node) {
	  var id = node.id;
	  //firstly check the previous results
	  if (this.toBeTiled[id] != null) {
	    return this.toBeTiled[id];
	  }

	  //only compound nodes are to be tiled
	  var childGraph = node.getChild();
	  if (childGraph == null) {
	    this.toBeTiled[id] = false;
	    return false;
	  }

	  var children = childGraph.getNodes(); // Get the children nodes

	  //a compound node is not to be tiled if all of its compound children are not to be tiled
	  for (var i = 0; i < children.length; i++) {
	    var theChild = children[i];

	    if (this.getNodeDegree(theChild) > 0) {
	      this.toBeTiled[id] = false;
	      return false;
	    }

	    //pass the children not having the compound structure
	    if (theChild.getChild() == null) {
	      this.toBeTiled[theChild.id] = false;
	      continue;
	    }

	    if (!this.getToBeTiled(theChild)) {
	      this.toBeTiled[id] = false;
	      return false;
	    }
	  }
	  this.toBeTiled[id] = true;
	  return true;
	};

	// Get degree of a node depending of its edges and independent of its children
	CoSELayout.prototype.getNodeDegree = function (node) {
	  var id = node.id;
	  var edges = node.getEdges();
	  var degree = 0;

	  // For the edges connected
	  for (var i = 0; i < edges.length; i++) {
	    var edge = edges[i];
	    if (edge.getSource().id !== edge.getTarget().id) {
	      degree = degree + 1;
	    }
	  }
	  return degree;
	};

	// Get degree of a node with its children
	CoSELayout.prototype.getNodeDegreeWithChildren = function (node) {
	  var degree = this.getNodeDegree(node);
	  if (node.getChild() == null) {
	    return degree;
	  }
	  var children = node.getChild().getNodes();
	  for (var i = 0; i < children.length; i++) {
	    var child = children[i];
	    degree += this.getNodeDegreeWithChildren(child);
	  }
	  return degree;
	};

	CoSELayout.prototype.performDFSOnCompounds = function () {
	  this.compoundOrder = [];
	  this.fillCompexOrderByDFS(this.graphManager.getRoot().getNodes());
	};

	CoSELayout.prototype.fillCompexOrderByDFS = function (children) {
	  for (var i = 0; i < children.length; i++) {
	    var child = children[i];
	    if (child.getChild() != null) {
	      this.fillCompexOrderByDFS(child.getChild().getNodes());
	    }
	    if (this.getToBeTiled(child)) {
	      this.compoundOrder.push(child);
	    }
	  }
	};

	/**
	* This method places each zero degree member wrt given (x,y) coordinates (top left).
	*/
	CoSELayout.prototype.adjustLocations = function (organization, x, y, compoundHorizontalMargin, compoundVerticalMargin) {
	  x += compoundHorizontalMargin;
	  y += compoundVerticalMargin;

	  var left = x;

	  for (var i = 0; i < organization.rows.length; i++) {
	    var row = organization.rows[i];
	    x = left;
	    var maxHeight = 0;

	    for (var j = 0; j < row.length; j++) {
	      var lnode = row[j];

	      lnode.rect.x = x; // + lnode.rect.width / 2;
	      lnode.rect.y = y; // + lnode.rect.height / 2;

	      x += lnode.rect.width + organization.horizontalPadding;

	      if (lnode.rect.height > maxHeight) maxHeight = lnode.rect.height;
	    }

	    y += maxHeight + organization.verticalPadding;
	  }
	};

	CoSELayout.prototype.tileCompoundMembers = function (childGraphMap, idToNode) {
	  var self = this;
	  this.tiledMemberPack = [];

	  Object.keys(childGraphMap).forEach(function (id) {
	    // Get the compound node
	    var compoundNode = idToNode[id];

	    self.tiledMemberPack[id] = self.tileNodes(childGraphMap[id], compoundNode.paddingLeft + compoundNode.paddingRight);

	    compoundNode.rect.width = self.tiledMemberPack[id].width;
	    compoundNode.rect.height = self.tiledMemberPack[id].height;
	  });
	};

	CoSELayout.prototype.tileNodes = function (nodes, minWidth) {
	  var verticalPadding = CoSEConstants.TILING_PADDING_VERTICAL;
	  var horizontalPadding = CoSEConstants.TILING_PADDING_HORIZONTAL;
	  var organization = {
	    rows: [],
	    rowWidth: [],
	    rowHeight: [],
	    width: 0,
	    height: minWidth, // assume minHeight equals to minWidth
	    verticalPadding: verticalPadding,
	    horizontalPadding: horizontalPadding
	  };

	  // Sort the nodes in ascending order of their areas
	  nodes.sort(function (n1, n2) {
	    if (n1.rect.width * n1.rect.height > n2.rect.width * n2.rect.height) return -1;
	    if (n1.rect.width * n1.rect.height < n2.rect.width * n2.rect.height) return 1;
	    return 0;
	  });

	  // Create the organization -> tile members
	  for (var i = 0; i < nodes.length; i++) {
	    var lNode = nodes[i];

	    if (organization.rows.length == 0) {
	      this.insertNodeToRow(organization, lNode, 0, minWidth);
	    } else if (this.canAddHorizontal(organization, lNode.rect.width, lNode.rect.height)) {
	      this.insertNodeToRow(organization, lNode, this.getShortestRowIndex(organization), minWidth);
	    } else {
	      this.insertNodeToRow(organization, lNode, organization.rows.length, minWidth);
	    }

	    this.shiftToLastRow(organization);
	  }

	  return organization;
	};

	CoSELayout.prototype.insertNodeToRow = function (organization, node, rowIndex, minWidth) {
	  var minCompoundSize = minWidth;

	  // Add new row if needed
	  if (rowIndex == organization.rows.length) {
	    var secondDimension = [];

	    organization.rows.push(secondDimension);
	    organization.rowWidth.push(minCompoundSize);
	    organization.rowHeight.push(0);
	  }

	  // Update row width
	  var w = organization.rowWidth[rowIndex] + node.rect.width;

	  if (organization.rows[rowIndex].length > 0) {
	    w += organization.horizontalPadding;
	  }

	  organization.rowWidth[rowIndex] = w;
	  // Update compound width
	  if (organization.width < w) {
	    organization.width = w;
	  }

	  // Update height
	  var h = node.rect.height;
	  if (rowIndex > 0) h += organization.verticalPadding;

	  var extraHeight = 0;
	  if (h > organization.rowHeight[rowIndex]) {
	    extraHeight = organization.rowHeight[rowIndex];
	    organization.rowHeight[rowIndex] = h;
	    extraHeight = organization.rowHeight[rowIndex] - extraHeight;
	  }

	  organization.height += extraHeight;

	  // Insert node
	  organization.rows[rowIndex].push(node);
	};

	//Scans the rows of an organization and returns the one with the min width
	CoSELayout.prototype.getShortestRowIndex = function (organization) {
	  var r = -1;
	  var min = Number.MAX_VALUE;

	  for (var i = 0; i < organization.rows.length; i++) {
	    if (organization.rowWidth[i] < min) {
	      r = i;
	      min = organization.rowWidth[i];
	    }
	  }
	  return r;
	};

	//Scans the rows of an organization and returns the one with the max width
	CoSELayout.prototype.getLongestRowIndex = function (organization) {
	  var r = -1;
	  var max = Number.MIN_VALUE;

	  for (var i = 0; i < organization.rows.length; i++) {

	    if (organization.rowWidth[i] > max) {
	      r = i;
	      max = organization.rowWidth[i];
	    }
	  }

	  return r;
	};

	/**
	* This method checks whether adding extra width to the organization violates
	* the aspect ratio(1) or not.
	*/
	CoSELayout.prototype.canAddHorizontal = function (organization, extraWidth, extraHeight) {

	  var sri = this.getShortestRowIndex(organization);

	  if (sri < 0) {
	    return true;
	  }

	  var min = organization.rowWidth[sri];

	  if (min + organization.horizontalPadding + extraWidth <= organization.width) return true;

	  var hDiff = 0;

	  // Adding to an existing row
	  if (organization.rowHeight[sri] < extraHeight) {
	    if (sri > 0) hDiff = extraHeight + organization.verticalPadding - organization.rowHeight[sri];
	  }

	  var add_to_row_ratio;
	  if (organization.width - min >= extraWidth + organization.horizontalPadding) {
	    add_to_row_ratio = (organization.height + hDiff) / (min + extraWidth + organization.horizontalPadding);
	  } else {
	    add_to_row_ratio = (organization.height + hDiff) / organization.width;
	  }

	  // Adding a new row for this node
	  hDiff = extraHeight + organization.verticalPadding;
	  var add_new_row_ratio;
	  if (organization.width < extraWidth) {
	    add_new_row_ratio = (organization.height + hDiff) / extraWidth;
	  } else {
	    add_new_row_ratio = (organization.height + hDiff) / organization.width;
	  }

	  if (add_new_row_ratio < 1) add_new_row_ratio = 1 / add_new_row_ratio;

	  if (add_to_row_ratio < 1) add_to_row_ratio = 1 / add_to_row_ratio;

	  return add_to_row_ratio < add_new_row_ratio;
	};

	//If moving the last node from the longest row and adding it to the last
	//row makes the bounding box smaller, do it.
	CoSELayout.prototype.shiftToLastRow = function (organization) {
	  var longest = this.getLongestRowIndex(organization);
	  var last = organization.rowWidth.length - 1;
	  var row = organization.rows[longest];
	  var node = row[row.length - 1];

	  var diff = node.width + organization.horizontalPadding;

	  // Check if there is enough space on the last row
	  if (organization.width - organization.rowWidth[last] > diff && longest != last) {
	    // Remove the last element of the longest row
	    row.splice(-1, 1);

	    // Push it to the last row
	    organization.rows[last].push(node);

	    organization.rowWidth[longest] = organization.rowWidth[longest] - diff;
	    organization.rowWidth[last] = organization.rowWidth[last] + diff;
	    organization.width = organization.rowWidth[instance.getLongestRowIndex(organization)];

	    // Update heights of the organization
	    var maxHeight = Number.MIN_VALUE;
	    for (var i = 0; i < row.length; i++) {
	      if (row[i].height > maxHeight) maxHeight = row[i].height;
	    }
	    if (longest > 0) maxHeight += organization.verticalPadding;

	    var prevTotal = organization.rowHeight[longest] + organization.rowHeight[last];

	    organization.rowHeight[longest] = maxHeight;
	    if (organization.rowHeight[last] < node.height + organization.verticalPadding) organization.rowHeight[last] = node.height + organization.verticalPadding;

	    var finalTotal = organization.rowHeight[longest] + organization.rowHeight[last];
	    organization.height += finalTotal - prevTotal;

	    this.shiftToLastRow(organization);
	  }
	};

	CoSELayout.prototype.tilingPreLayout = function () {
	  if (CoSEConstants.TILE) {
	    // Find zero degree nodes and create a compound for each level
	    this.groupZeroDegreeMembers();
	    // Tile and clear children of each compound
	    this.clearCompounds();
	    // Separately tile and clear zero degree nodes for each level
	    this.clearZeroDegreeMembers();
	  }
	};

	CoSELayout.prototype.tilingPostLayout = function () {
	  if (CoSEConstants.TILE) {
	    this.repopulateZeroDegreeMembers();
	    this.repopulateCompounds();
	  }
	};

	// -----------------------------------------------------------------------------
	// Section: Tree Reduction methods
	// -----------------------------------------------------------------------------
	// Reduce trees 
	CoSELayout.prototype.reduceTrees = function () {
	  var prunedNodesAll = [];
	  var containsLeaf = true;
	  var node;

	  while (containsLeaf) {
	    var allNodes = this.graphManager.getAllNodes();
	    var prunedNodesInStepTemp = [];
	    containsLeaf = false;

	    for (var i = 0; i < allNodes.length; i++) {
	      node = allNodes[i];
	      if (node.getEdges().length == 1 && !node.getEdges()[0].isInterGraph && node.getChild() == null) {
	        prunedNodesInStepTemp.push([node, node.getEdges()[0], node.getOwner()]);
	        containsLeaf = true;
	      }
	    }
	    if (containsLeaf == true) {
	      var prunedNodesInStep = [];
	      for (var j = 0; j < prunedNodesInStepTemp.length; j++) {
	        if (prunedNodesInStepTemp[j][0].getEdges().length == 1) {
	          prunedNodesInStep.push(prunedNodesInStepTemp[j]);
	          prunedNodesInStepTemp[j][0].getOwner().remove(prunedNodesInStepTemp[j][0]);
	        }
	      }
	      prunedNodesAll.push(prunedNodesInStep);
	      this.graphManager.resetAllNodes();
	      this.graphManager.resetAllEdges();
	    }
	  }
	  this.prunedNodesAll = prunedNodesAll;
	};

	// Grow tree one step 
	CoSELayout.prototype.growTree = function (prunedNodesAll) {
	  var lengthOfPrunedNodesInStep = prunedNodesAll.length;
	  var prunedNodesInStep = prunedNodesAll[lengthOfPrunedNodesInStep - 1];

	  var nodeData;
	  for (var i = 0; i < prunedNodesInStep.length; i++) {
	    nodeData = prunedNodesInStep[i];

	    this.findPlaceforPrunedNode(nodeData);

	    nodeData[2].add(nodeData[0]);
	    nodeData[2].add(nodeData[1], nodeData[1].source, nodeData[1].target);
	  }

	  prunedNodesAll.splice(prunedNodesAll.length - 1, 1);
	  this.graphManager.resetAllNodes();
	  this.graphManager.resetAllEdges();
	};

	// Find an appropriate position to replace pruned node, this method can be improved
	CoSELayout.prototype.findPlaceforPrunedNode = function (nodeData) {

	  var gridForPrunedNode;
	  var nodeToConnect;
	  var prunedNode = nodeData[0];
	  if (prunedNode == nodeData[1].source) {
	    nodeToConnect = nodeData[1].target;
	  } else {
	    nodeToConnect = nodeData[1].source;
	  }
	  var startGridX = nodeToConnect.startX;
	  var finishGridX = nodeToConnect.finishX;
	  var startGridY = nodeToConnect.startY;
	  var finishGridY = nodeToConnect.finishY;

	  var upNodeCount = 0;
	  var downNodeCount = 0;
	  var rightNodeCount = 0;
	  var leftNodeCount = 0;
	  var controlRegions = [upNodeCount, rightNodeCount, downNodeCount, leftNodeCount];

	  if (startGridY > 0) {
	    for (var i = startGridX; i <= finishGridX; i++) {
	      controlRegions[0] += this.grid[i][startGridY - 1].length + this.grid[i][startGridY].length - 1;
	    }
	  }
	  if (finishGridX < this.grid.length - 1) {
	    for (var i = startGridY; i <= finishGridY; i++) {
	      controlRegions[1] += this.grid[finishGridX + 1][i].length + this.grid[finishGridX][i].length - 1;
	    }
	  }
	  if (finishGridY < this.grid[0].length - 1) {
	    for (var i = startGridX; i <= finishGridX; i++) {
	      controlRegions[2] += this.grid[i][finishGridY + 1].length + this.grid[i][finishGridY].length - 1;
	    }
	  }
	  if (startGridX > 0) {
	    for (var i = startGridY; i <= finishGridY; i++) {
	      controlRegions[3] += this.grid[startGridX - 1][i].length + this.grid[startGridX][i].length - 1;
	    }
	  }
	  var min = Integer.MAX_VALUE;
	  var minCount;
	  var minIndex;
	  for (var j = 0; j < controlRegions.length; j++) {
	    if (controlRegions[j] < min) {
	      min = controlRegions[j];
	      minCount = 1;
	      minIndex = j;
	    } else if (controlRegions[j] == min) {
	      minCount++;
	    }
	  }

	  if (minCount == 3 && min == 0) {
	    if (controlRegions[0] == 0 && controlRegions[1] == 0 && controlRegions[2] == 0) {
	      gridForPrunedNode = 1;
	    } else if (controlRegions[0] == 0 && controlRegions[1] == 0 && controlRegions[3] == 0) {
	      gridForPrunedNode = 0;
	    } else if (controlRegions[0] == 0 && controlRegions[2] == 0 && controlRegions[3] == 0) {
	      gridForPrunedNode = 3;
	    } else if (controlRegions[1] == 0 && controlRegions[2] == 0 && controlRegions[3] == 0) {
	      gridForPrunedNode = 2;
	    }
	  } else if (minCount == 2 && min == 0) {
	    var random = Math.floor(Math.random() * 2);
	    if (controlRegions[0] == 0 && controlRegions[1] == 0) {
	      ;
	      if (random == 0) {
	        gridForPrunedNode = 0;
	      } else {
	        gridForPrunedNode = 1;
	      }
	    } else if (controlRegions[0] == 0 && controlRegions[2] == 0) {
	      if (random == 0) {
	        gridForPrunedNode = 0;
	      } else {
	        gridForPrunedNode = 2;
	      }
	    } else if (controlRegions[0] == 0 && controlRegions[3] == 0) {
	      if (random == 0) {
	        gridForPrunedNode = 0;
	      } else {
	        gridForPrunedNode = 3;
	      }
	    } else if (controlRegions[1] == 0 && controlRegions[2] == 0) {
	      if (random == 0) {
	        gridForPrunedNode = 1;
	      } else {
	        gridForPrunedNode = 2;
	      }
	    } else if (controlRegions[1] == 0 && controlRegions[3] == 0) {
	      if (random == 0) {
	        gridForPrunedNode = 1;
	      } else {
	        gridForPrunedNode = 3;
	      }
	    } else {
	      if (random == 0) {
	        gridForPrunedNode = 2;
	      } else {
	        gridForPrunedNode = 3;
	      }
	    }
	  } else if (minCount == 4 && min == 0) {
	    var random = Math.floor(Math.random() * 4);
	    gridForPrunedNode = random;
	  } else {
	    gridForPrunedNode = minIndex;
	  }

	  if (gridForPrunedNode == 0) {
	    prunedNode.setCenter(nodeToConnect.getCenterX(), nodeToConnect.getCenterY() - nodeToConnect.getHeight() / 2 - FDLayoutConstants.DEFAULT_EDGE_LENGTH - prunedNode.getHeight() / 2);
	  } else if (gridForPrunedNode == 1) {
	    prunedNode.setCenter(nodeToConnect.getCenterX() + nodeToConnect.getWidth() / 2 + FDLayoutConstants.DEFAULT_EDGE_LENGTH + prunedNode.getWidth() / 2, nodeToConnect.getCenterY());
	  } else if (gridForPrunedNode == 2) {
	    prunedNode.setCenter(nodeToConnect.getCenterX(), nodeToConnect.getCenterY() + nodeToConnect.getHeight() / 2 + FDLayoutConstants.DEFAULT_EDGE_LENGTH + prunedNode.getHeight() / 2);
	  } else {
	    prunedNode.setCenter(nodeToConnect.getCenterX() - nodeToConnect.getWidth() / 2 - FDLayoutConstants.DEFAULT_EDGE_LENGTH - prunedNode.getWidth() / 2, nodeToConnect.getCenterY());
	  }
	};

	module.exports = CoSELayout;

	/***/ }),
	/* 7 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	var coseBase = {};

	coseBase.layoutBase = __webpack_require__(0);
	coseBase.CoSEConstants = __webpack_require__(1);
	coseBase.CoSEEdge = __webpack_require__(2);
	coseBase.CoSEGraph = __webpack_require__(3);
	coseBase.CoSEGraphManager = __webpack_require__(4);
	coseBase.CoSELayout = __webpack_require__(6);
	coseBase.CoSENode = __webpack_require__(5);

	module.exports = coseBase;

	/***/ })
	/******/ ]);
	});

/***/ }),
/* 305 */
/***/ (function(module, exports, __webpack_require__) {

	(function webpackUniversalModuleDefinition(root, factory) {
		if(true)
			module.exports = factory();
		else if(typeof define === 'function' && define.amd)
			define([], factory);
		else if(typeof exports === 'object')
			exports["layoutBase"] = factory();
		else
			root["layoutBase"] = factory();
	})(this, function() {
	return /******/ (function(modules) { // webpackBootstrap
	/******/ 	// The module cache
	/******/ 	var installedModules = {};
	/******/
	/******/ 	// The require function
	/******/ 	function __webpack_require__(moduleId) {
	/******/
	/******/ 		// Check if module is in cache
	/******/ 		if(installedModules[moduleId]) {
	/******/ 			return installedModules[moduleId].exports;
	/******/ 		}
	/******/ 		// Create a new module (and put it into the cache)
	/******/ 		var module = installedModules[moduleId] = {
	/******/ 			i: moduleId,
	/******/ 			l: false,
	/******/ 			exports: {}
	/******/ 		};
	/******/
	/******/ 		// Execute the module function
	/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
	/******/
	/******/ 		// Flag the module as loaded
	/******/ 		module.l = true;
	/******/
	/******/ 		// Return the exports of the module
	/******/ 		return module.exports;
	/******/ 	}
	/******/
	/******/
	/******/ 	// expose the modules object (__webpack_modules__)
	/******/ 	__webpack_require__.m = modules;
	/******/
	/******/ 	// expose the module cache
	/******/ 	__webpack_require__.c = installedModules;
	/******/
	/******/ 	// identity function for calling harmony imports with the correct context
	/******/ 	__webpack_require__.i = function(value) { return value; };
	/******/
	/******/ 	// define getter function for harmony exports
	/******/ 	__webpack_require__.d = function(exports, name, getter) {
	/******/ 		if(!__webpack_require__.o(exports, name)) {
	/******/ 			Object.defineProperty(exports, name, {
	/******/ 				configurable: false,
	/******/ 				enumerable: true,
	/******/ 				get: getter
	/******/ 			});
	/******/ 		}
	/******/ 	};
	/******/
	/******/ 	// getDefaultExport function for compatibility with non-harmony modules
	/******/ 	__webpack_require__.n = function(module) {
	/******/ 		var getter = module && module.__esModule ?
	/******/ 			function getDefault() { return module['default']; } :
	/******/ 			function getModuleExports() { return module; };
	/******/ 		__webpack_require__.d(getter, 'a', getter);
	/******/ 		return getter;
	/******/ 	};
	/******/
	/******/ 	// Object.prototype.hasOwnProperty.call
	/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
	/******/
	/******/ 	// __webpack_public_path__
	/******/ 	__webpack_require__.p = "";
	/******/
	/******/ 	// Load entry module and return exports
	/******/ 	return __webpack_require__(__webpack_require__.s = 26);
	/******/ })
	/************************************************************************/
	/******/ ([
	/* 0 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	function LayoutConstants() {}

	/**
	 * Layout Quality: 0:draft, 1:default, 2:proof
	 */
	LayoutConstants.QUALITY = 1;

	/**
	 * Default parameters
	 */
	LayoutConstants.DEFAULT_CREATE_BENDS_AS_NEEDED = false;
	LayoutConstants.DEFAULT_INCREMENTAL = false;
	LayoutConstants.DEFAULT_ANIMATION_ON_LAYOUT = true;
	LayoutConstants.DEFAULT_ANIMATION_DURING_LAYOUT = false;
	LayoutConstants.DEFAULT_ANIMATION_PERIOD = 50;
	LayoutConstants.DEFAULT_UNIFORM_LEAF_NODE_SIZES = false;

	// -----------------------------------------------------------------------------
	// Section: General other constants
	// -----------------------------------------------------------------------------
	/*
	 * Margins of a graph to be applied on bouding rectangle of its contents. We
	 * assume margins on all four sides to be uniform.
	 */
	LayoutConstants.DEFAULT_GRAPH_MARGIN = 15;

	/*
	 * Whether to consider labels in node dimensions or not
	 */
	LayoutConstants.NODE_DIMENSIONS_INCLUDE_LABELS = false;

	/*
	 * Default dimension of a non-compound node.
	 */
	LayoutConstants.SIMPLE_NODE_SIZE = 40;

	/*
	 * Default dimension of a non-compound node.
	 */
	LayoutConstants.SIMPLE_NODE_HALF_SIZE = LayoutConstants.SIMPLE_NODE_SIZE / 2;

	/*
	 * Empty compound node size. When a compound node is empty, its both
	 * dimensions should be of this value.
	 */
	LayoutConstants.EMPTY_COMPOUND_NODE_SIZE = 40;

	/*
	 * Minimum length that an edge should take during layout
	 */
	LayoutConstants.MIN_EDGE_LENGTH = 1;

	/*
	 * World boundaries that layout operates on
	 */
	LayoutConstants.WORLD_BOUNDARY = 1000000;

	/*
	 * World boundaries that random positioning can be performed with
	 */
	LayoutConstants.INITIAL_WORLD_BOUNDARY = LayoutConstants.WORLD_BOUNDARY / 1000;

	/*
	 * Coordinates of the world center
	 */
	LayoutConstants.WORLD_CENTER_X = 1200;
	LayoutConstants.WORLD_CENTER_Y = 900;

	module.exports = LayoutConstants;

	/***/ }),
	/* 1 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	var LGraphObject = __webpack_require__(2);
	var IGeometry = __webpack_require__(8);
	var IMath = __webpack_require__(9);

	function LEdge(source, target, vEdge) {
	  LGraphObject.call(this, vEdge);

	  this.isOverlapingSourceAndTarget = false;
	  this.vGraphObject = vEdge;
	  this.bendpoints = [];
	  this.source = source;
	  this.target = target;
	}

	LEdge.prototype = Object.create(LGraphObject.prototype);

	for (var prop in LGraphObject) {
	  LEdge[prop] = LGraphObject[prop];
	}

	LEdge.prototype.getSource = function () {
	  return this.source;
	};

	LEdge.prototype.getTarget = function () {
	  return this.target;
	};

	LEdge.prototype.isInterGraph = function () {
	  return this.isInterGraph;
	};

	LEdge.prototype.getLength = function () {
	  return this.length;
	};

	LEdge.prototype.isOverlapingSourceAndTarget = function () {
	  return this.isOverlapingSourceAndTarget;
	};

	LEdge.prototype.getBendpoints = function () {
	  return this.bendpoints;
	};

	LEdge.prototype.getLca = function () {
	  return this.lca;
	};

	LEdge.prototype.getSourceInLca = function () {
	  return this.sourceInLca;
	};

	LEdge.prototype.getTargetInLca = function () {
	  return this.targetInLca;
	};

	LEdge.prototype.getOtherEnd = function (node) {
	  if (this.source === node) {
	    return this.target;
	  } else if (this.target === node) {
	    return this.source;
	  } else {
	    throw "Node is not incident with this edge";
	  }
	};

	LEdge.prototype.getOtherEndInGraph = function (node, graph) {
	  var otherEnd = this.getOtherEnd(node);
	  var root = graph.getGraphManager().getRoot();

	  while (true) {
	    if (otherEnd.getOwner() == graph) {
	      return otherEnd;
	    }

	    if (otherEnd.getOwner() == root) {
	      break;
	    }

	    otherEnd = otherEnd.getOwner().getParent();
	  }

	  return null;
	};

	LEdge.prototype.updateLength = function () {
	  var clipPointCoordinates = new Array(4);

	  this.isOverlapingSourceAndTarget = IGeometry.getIntersection(this.target.getRect(), this.source.getRect(), clipPointCoordinates);

	  if (!this.isOverlapingSourceAndTarget) {
	    this.lengthX = clipPointCoordinates[0] - clipPointCoordinates[2];
	    this.lengthY = clipPointCoordinates[1] - clipPointCoordinates[3];

	    if (Math.abs(this.lengthX) < 1.0) {
	      this.lengthX = IMath.sign(this.lengthX);
	    }

	    if (Math.abs(this.lengthY) < 1.0) {
	      this.lengthY = IMath.sign(this.lengthY);
	    }

	    this.length = Math.sqrt(this.lengthX * this.lengthX + this.lengthY * this.lengthY);
	  }
	};

	LEdge.prototype.updateLengthSimple = function () {
	  this.lengthX = this.target.getCenterX() - this.source.getCenterX();
	  this.lengthY = this.target.getCenterY() - this.source.getCenterY();

	  if (Math.abs(this.lengthX) < 1.0) {
	    this.lengthX = IMath.sign(this.lengthX);
	  }

	  if (Math.abs(this.lengthY) < 1.0) {
	    this.lengthY = IMath.sign(this.lengthY);
	  }

	  this.length = Math.sqrt(this.lengthX * this.lengthX + this.lengthY * this.lengthY);
	};

	module.exports = LEdge;

	/***/ }),
	/* 2 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	function LGraphObject(vGraphObject) {
	  this.vGraphObject = vGraphObject;
	}

	module.exports = LGraphObject;

	/***/ }),
	/* 3 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	var LGraphObject = __webpack_require__(2);
	var Integer = __webpack_require__(10);
	var RectangleD = __webpack_require__(13);
	var LayoutConstants = __webpack_require__(0);
	var RandomSeed = __webpack_require__(16);
	var PointD = __webpack_require__(4);

	function LNode(gm, loc, size, vNode) {
	  //Alternative constructor 1 : LNode(LGraphManager gm, Point loc, Dimension size, Object vNode)
	  if (size == null && vNode == null) {
	    vNode = loc;
	  }

	  LGraphObject.call(this, vNode);

	  //Alternative constructor 2 : LNode(Layout layout, Object vNode)
	  if (gm.graphManager != null) gm = gm.graphManager;

	  this.estimatedSize = Integer.MIN_VALUE;
	  this.inclusionTreeDepth = Integer.MAX_VALUE;
	  this.vGraphObject = vNode;
	  this.edges = [];
	  this.graphManager = gm;

	  if (size != null && loc != null) this.rect = new RectangleD(loc.x, loc.y, size.width, size.height);else this.rect = new RectangleD();
	}

	LNode.prototype = Object.create(LGraphObject.prototype);
	for (var prop in LGraphObject) {
	  LNode[prop] = LGraphObject[prop];
	}

	LNode.prototype.getEdges = function () {
	  return this.edges;
	};

	LNode.prototype.getChild = function () {
	  return this.child;
	};

	LNode.prototype.getOwner = function () {
	  //  if (this.owner != null) {
	  //    if (!(this.owner == null || this.owner.getNodes().indexOf(this) > -1)) {
	  //      throw "assert failed";
	  //    }
	  //  }

	  return this.owner;
	};

	LNode.prototype.getWidth = function () {
	  return this.rect.width;
	};

	LNode.prototype.setWidth = function (width) {
	  this.rect.width = width;
	};

	LNode.prototype.getHeight = function () {
	  return this.rect.height;
	};

	LNode.prototype.setHeight = function (height) {
	  this.rect.height = height;
	};

	LNode.prototype.getCenterX = function () {
	  return this.rect.x + this.rect.width / 2;
	};

	LNode.prototype.getCenterY = function () {
	  return this.rect.y + this.rect.height / 2;
	};

	LNode.prototype.getCenter = function () {
	  return new PointD(this.rect.x + this.rect.width / 2, this.rect.y + this.rect.height / 2);
	};

	LNode.prototype.getLocation = function () {
	  return new PointD(this.rect.x, this.rect.y);
	};

	LNode.prototype.getRect = function () {
	  return this.rect;
	};

	LNode.prototype.getDiagonal = function () {
	  return Math.sqrt(this.rect.width * this.rect.width + this.rect.height * this.rect.height);
	};

	/**
	 * This method returns half the diagonal length of this node.
	 */
	LNode.prototype.getHalfTheDiagonal = function () {
	  return Math.sqrt(this.rect.height * this.rect.height + this.rect.width * this.rect.width) / 2;
	};

	LNode.prototype.setRect = function (upperLeft, dimension) {
	  this.rect.x = upperLeft.x;
	  this.rect.y = upperLeft.y;
	  this.rect.width = dimension.width;
	  this.rect.height = dimension.height;
	};

	LNode.prototype.setCenter = function (cx, cy) {
	  this.rect.x = cx - this.rect.width / 2;
	  this.rect.y = cy - this.rect.height / 2;
	};

	LNode.prototype.setLocation = function (x, y) {
	  this.rect.x = x;
	  this.rect.y = y;
	};

	LNode.prototype.moveBy = function (dx, dy) {
	  this.rect.x += dx;
	  this.rect.y += dy;
	};

	LNode.prototype.getEdgeListToNode = function (to) {
	  var edgeList = [];
	  var edge;
	  var self = this;

	  self.edges.forEach(function (edge) {

	    if (edge.target == to) {
	      if (edge.source != self) throw "Incorrect edge source!";

	      edgeList.push(edge);
	    }
	  });

	  return edgeList;
	};

	LNode.prototype.getEdgesBetween = function (other) {
	  var edgeList = [];
	  var edge;

	  var self = this;
	  self.edges.forEach(function (edge) {

	    if (!(edge.source == self || edge.target == self)) throw "Incorrect edge source and/or target";

	    if (edge.target == other || edge.source == other) {
	      edgeList.push(edge);
	    }
	  });

	  return edgeList;
	};

	LNode.prototype.getNeighborsList = function () {
	  var neighbors = new Set();

	  var self = this;
	  self.edges.forEach(function (edge) {

	    if (edge.source == self) {
	      neighbors.add(edge.target);
	    } else {
	      if (edge.target != self) {
	        throw "Incorrect incidency!";
	      }

	      neighbors.add(edge.source);
	    }
	  });

	  return neighbors;
	};

	LNode.prototype.withChildren = function () {
	  var withNeighborsList = new Set();
	  var childNode;
	  var children;

	  withNeighborsList.add(this);

	  if (this.child != null) {
	    var nodes = this.child.getNodes();
	    for (var i = 0; i < nodes.length; i++) {
	      childNode = nodes[i];
	      children = childNode.withChildren();
	      children.forEach(function (node) {
	        withNeighborsList.add(node);
	      });
	    }
	  }

	  return withNeighborsList;
	};

	LNode.prototype.getNoOfChildren = function () {
	  var noOfChildren = 0;
	  var childNode;

	  if (this.child == null) {
	    noOfChildren = 1;
	  } else {
	    var nodes = this.child.getNodes();
	    for (var i = 0; i < nodes.length; i++) {
	      childNode = nodes[i];

	      noOfChildren += childNode.getNoOfChildren();
	    }
	  }

	  if (noOfChildren == 0) {
	    noOfChildren = 1;
	  }
	  return noOfChildren;
	};

	LNode.prototype.getEstimatedSize = function () {
	  if (this.estimatedSize == Integer.MIN_VALUE) {
	    throw "assert failed";
	  }
	  return this.estimatedSize;
	};

	LNode.prototype.calcEstimatedSize = function () {
	  if (this.child == null) {
	    return this.estimatedSize = (this.rect.width + this.rect.height) / 2;
	  } else {
	    this.estimatedSize = this.child.calcEstimatedSize();
	    this.rect.width = this.estimatedSize;
	    this.rect.height = this.estimatedSize;

	    return this.estimatedSize;
	  }
	};

	LNode.prototype.scatter = function () {
	  var randomCenterX;
	  var randomCenterY;

	  var minX = -LayoutConstants.INITIAL_WORLD_BOUNDARY;
	  var maxX = LayoutConstants.INITIAL_WORLD_BOUNDARY;
	  randomCenterX = LayoutConstants.WORLD_CENTER_X + RandomSeed.nextDouble() * (maxX - minX) + minX;

	  var minY = -LayoutConstants.INITIAL_WORLD_BOUNDARY;
	  var maxY = LayoutConstants.INITIAL_WORLD_BOUNDARY;
	  randomCenterY = LayoutConstants.WORLD_CENTER_Y + RandomSeed.nextDouble() * (maxY - minY) + minY;

	  this.rect.x = randomCenterX;
	  this.rect.y = randomCenterY;
	};

	LNode.prototype.updateBounds = function () {
	  if (this.getChild() == null) {
	    throw "assert failed";
	  }
	  if (this.getChild().getNodes().length != 0) {
	    // wrap the children nodes by re-arranging the boundaries
	    var childGraph = this.getChild();
	    childGraph.updateBounds(true);

	    this.rect.x = childGraph.getLeft();
	    this.rect.y = childGraph.getTop();

	    this.setWidth(childGraph.getRight() - childGraph.getLeft());
	    this.setHeight(childGraph.getBottom() - childGraph.getTop());

	    // Update compound bounds considering its label properties    
	    if (LayoutConstants.NODE_DIMENSIONS_INCLUDE_LABELS) {

	      var width = childGraph.getRight() - childGraph.getLeft();
	      var height = childGraph.getBottom() - childGraph.getTop();

	      if (this.labelWidth > width) {
	        this.rect.x -= (this.labelWidth - width) / 2;
	        this.setWidth(this.labelWidth);
	      }

	      if (this.labelHeight > height) {
	        if (this.labelPos == "center") {
	          this.rect.y -= (this.labelHeight - height) / 2;
	        } else if (this.labelPos == "top") {
	          this.rect.y -= this.labelHeight - height;
	        }
	        this.setHeight(this.labelHeight);
	      }
	    }
	  }
	};

	LNode.prototype.getInclusionTreeDepth = function () {
	  if (this.inclusionTreeDepth == Integer.MAX_VALUE) {
	    throw "assert failed";
	  }
	  return this.inclusionTreeDepth;
	};

	LNode.prototype.transform = function (trans) {
	  var left = this.rect.x;

	  if (left > LayoutConstants.WORLD_BOUNDARY) {
	    left = LayoutConstants.WORLD_BOUNDARY;
	  } else if (left < -LayoutConstants.WORLD_BOUNDARY) {
	    left = -LayoutConstants.WORLD_BOUNDARY;
	  }

	  var top = this.rect.y;

	  if (top > LayoutConstants.WORLD_BOUNDARY) {
	    top = LayoutConstants.WORLD_BOUNDARY;
	  } else if (top < -LayoutConstants.WORLD_BOUNDARY) {
	    top = -LayoutConstants.WORLD_BOUNDARY;
	  }

	  var leftTop = new PointD(left, top);
	  var vLeftTop = trans.inverseTransformPoint(leftTop);

	  this.setLocation(vLeftTop.x, vLeftTop.y);
	};

	LNode.prototype.getLeft = function () {
	  return this.rect.x;
	};

	LNode.prototype.getRight = function () {
	  return this.rect.x + this.rect.width;
	};

	LNode.prototype.getTop = function () {
	  return this.rect.y;
	};

	LNode.prototype.getBottom = function () {
	  return this.rect.y + this.rect.height;
	};

	LNode.prototype.getParent = function () {
	  if (this.owner == null) {
	    return null;
	  }

	  return this.owner.getParent();
	};

	module.exports = LNode;

	/***/ }),
	/* 4 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	function PointD(x, y) {
	  if (x == null && y == null) {
	    this.x = 0;
	    this.y = 0;
	  } else {
	    this.x = x;
	    this.y = y;
	  }
	}

	PointD.prototype.getX = function () {
	  return this.x;
	};

	PointD.prototype.getY = function () {
	  return this.y;
	};

	PointD.prototype.setX = function (x) {
	  this.x = x;
	};

	PointD.prototype.setY = function (y) {
	  this.y = y;
	};

	PointD.prototype.getDifference = function (pt) {
	  return new DimensionD(this.x - pt.x, this.y - pt.y);
	};

	PointD.prototype.getCopy = function () {
	  return new PointD(this.x, this.y);
	};

	PointD.prototype.translate = function (dim) {
	  this.x += dim.width;
	  this.y += dim.height;
	  return this;
	};

	module.exports = PointD;

	/***/ }),
	/* 5 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	var LGraphObject = __webpack_require__(2);
	var Integer = __webpack_require__(10);
	var LayoutConstants = __webpack_require__(0);
	var LGraphManager = __webpack_require__(6);
	var LNode = __webpack_require__(3);
	var LEdge = __webpack_require__(1);
	var RectangleD = __webpack_require__(13);
	var Point = __webpack_require__(12);
	var LinkedList = __webpack_require__(11);

	function LGraph(parent, obj2, vGraph) {
	  LGraphObject.call(this, vGraph);
	  this.estimatedSize = Integer.MIN_VALUE;
	  this.margin = LayoutConstants.DEFAULT_GRAPH_MARGIN;
	  this.edges = [];
	  this.nodes = [];
	  this.isConnected = false;
	  this.parent = parent;

	  if (obj2 != null && obj2 instanceof LGraphManager) {
	    this.graphManager = obj2;
	  } else if (obj2 != null && obj2 instanceof Layout) {
	    this.graphManager = obj2.graphManager;
	  }
	}

	LGraph.prototype = Object.create(LGraphObject.prototype);
	for (var prop in LGraphObject) {
	  LGraph[prop] = LGraphObject[prop];
	}

	LGraph.prototype.getNodes = function () {
	  return this.nodes;
	};

	LGraph.prototype.getEdges = function () {
	  return this.edges;
	};

	LGraph.prototype.getGraphManager = function () {
	  return this.graphManager;
	};

	LGraph.prototype.getParent = function () {
	  return this.parent;
	};

	LGraph.prototype.getLeft = function () {
	  return this.left;
	};

	LGraph.prototype.getRight = function () {
	  return this.right;
	};

	LGraph.prototype.getTop = function () {
	  return this.top;
	};

	LGraph.prototype.getBottom = function () {
	  return this.bottom;
	};

	LGraph.prototype.isConnected = function () {
	  return this.isConnected;
	};

	LGraph.prototype.add = function (obj1, sourceNode, targetNode) {
	  if (sourceNode == null && targetNode == null) {
	    var newNode = obj1;
	    if (this.graphManager == null) {
	      throw "Graph has no graph mgr!";
	    }
	    if (this.getNodes().indexOf(newNode) > -1) {
	      throw "Node already in graph!";
	    }
	    newNode.owner = this;
	    this.getNodes().push(newNode);

	    return newNode;
	  } else {
	    var newEdge = obj1;
	    if (!(this.getNodes().indexOf(sourceNode) > -1 && this.getNodes().indexOf(targetNode) > -1)) {
	      throw "Source or target not in graph!";
	    }

	    if (!(sourceNode.owner == targetNode.owner && sourceNode.owner == this)) {
	      throw "Both owners must be this graph!";
	    }

	    if (sourceNode.owner != targetNode.owner) {
	      return null;
	    }

	    // set source and target
	    newEdge.source = sourceNode;
	    newEdge.target = targetNode;

	    // set as intra-graph edge
	    newEdge.isInterGraph = false;

	    // add to graph edge list
	    this.getEdges().push(newEdge);

	    // add to incidency lists
	    sourceNode.edges.push(newEdge);

	    if (targetNode != sourceNode) {
	      targetNode.edges.push(newEdge);
	    }

	    return newEdge;
	  }
	};

	LGraph.prototype.remove = function (obj) {
	  var node = obj;
	  if (obj instanceof LNode) {
	    if (node == null) {
	      throw "Node is null!";
	    }
	    if (!(node.owner != null && node.owner == this)) {
	      throw "Owner graph is invalid!";
	    }
	    if (this.graphManager == null) {
	      throw "Owner graph manager is invalid!";
	    }
	    // remove incident edges first (make a copy to do it safely)
	    var edgesToBeRemoved = node.edges.slice();
	    var edge;
	    var s = edgesToBeRemoved.length;
	    for (var i = 0; i < s; i++) {
	      edge = edgesToBeRemoved[i];

	      if (edge.isInterGraph) {
	        this.graphManager.remove(edge);
	      } else {
	        edge.source.owner.remove(edge);
	      }
	    }

	    // now the node itself
	    var index = this.nodes.indexOf(node);
	    if (index == -1) {
	      throw "Node not in owner node list!";
	    }

	    this.nodes.splice(index, 1);
	  } else if (obj instanceof LEdge) {
	    var edge = obj;
	    if (edge == null) {
	      throw "Edge is null!";
	    }
	    if (!(edge.source != null && edge.target != null)) {
	      throw "Source and/or target is null!";
	    }
	    if (!(edge.source.owner != null && edge.target.owner != null && edge.source.owner == this && edge.target.owner == this)) {
	      throw "Source and/or target owner is invalid!";
	    }

	    var sourceIndex = edge.source.edges.indexOf(edge);
	    var targetIndex = edge.target.edges.indexOf(edge);
	    if (!(sourceIndex > -1 && targetIndex > -1)) {
	      throw "Source and/or target doesn't know this edge!";
	    }

	    edge.source.edges.splice(sourceIndex, 1);

	    if (edge.target != edge.source) {
	      edge.target.edges.splice(targetIndex, 1);
	    }

	    var index = edge.source.owner.getEdges().indexOf(edge);
	    if (index == -1) {
	      throw "Not in owner's edge list!";
	    }

	    edge.source.owner.getEdges().splice(index, 1);
	  }
	};

	LGraph.prototype.updateLeftTop = function () {
	  var top = Integer.MAX_VALUE;
	  var left = Integer.MAX_VALUE;
	  var nodeTop;
	  var nodeLeft;
	  var margin;

	  var nodes = this.getNodes();
	  var s = nodes.length;

	  for (var i = 0; i < s; i++) {
	    var lNode = nodes[i];
	    nodeTop = lNode.getTop();
	    nodeLeft = lNode.getLeft();

	    if (top > nodeTop) {
	      top = nodeTop;
	    }

	    if (left > nodeLeft) {
	      left = nodeLeft;
	    }
	  }

	  // Do we have any nodes in this graph?
	  if (top == Integer.MAX_VALUE) {
	    return null;
	  }

	  if (nodes[0].getParent().paddingLeft != undefined) {
	    margin = nodes[0].getParent().paddingLeft;
	  } else {
	    margin = this.margin;
	  }

	  this.left = left - margin;
	  this.top = top - margin;

	  // Apply the margins and return the result
	  return new Point(this.left, this.top);
	};

	LGraph.prototype.updateBounds = function (recursive) {
	  // calculate bounds
	  var left = Integer.MAX_VALUE;
	  var right = -Integer.MAX_VALUE;
	  var top = Integer.MAX_VALUE;
	  var bottom = -Integer.MAX_VALUE;
	  var nodeLeft;
	  var nodeRight;
	  var nodeTop;
	  var nodeBottom;
	  var margin;

	  var nodes = this.nodes;
	  var s = nodes.length;
	  for (var i = 0; i < s; i++) {
	    var lNode = nodes[i];

	    if (recursive && lNode.child != null) {
	      lNode.updateBounds();
	    }
	    nodeLeft = lNode.getLeft();
	    nodeRight = lNode.getRight();
	    nodeTop = lNode.getTop();
	    nodeBottom = lNode.getBottom();

	    if (left > nodeLeft) {
	      left = nodeLeft;
	    }

	    if (right < nodeRight) {
	      right = nodeRight;
	    }

	    if (top > nodeTop) {
	      top = nodeTop;
	    }

	    if (bottom < nodeBottom) {
	      bottom = nodeBottom;
	    }
	  }

	  var boundingRect = new RectangleD(left, top, right - left, bottom - top);
	  if (left == Integer.MAX_VALUE) {
	    this.left = this.parent.getLeft();
	    this.right = this.parent.getRight();
	    this.top = this.parent.getTop();
	    this.bottom = this.parent.getBottom();
	  }

	  if (nodes[0].getParent().paddingLeft != undefined) {
	    margin = nodes[0].getParent().paddingLeft;
	  } else {
	    margin = this.margin;
	  }

	  this.left = boundingRect.x - margin;
	  this.right = boundingRect.x + boundingRect.width + margin;
	  this.top = boundingRect.y - margin;
	  this.bottom = boundingRect.y + boundingRect.height + margin;
	};

	LGraph.calculateBounds = function (nodes) {
	  var left = Integer.MAX_VALUE;
	  var right = -Integer.MAX_VALUE;
	  var top = Integer.MAX_VALUE;
	  var bottom = -Integer.MAX_VALUE;
	  var nodeLeft;
	  var nodeRight;
	  var nodeTop;
	  var nodeBottom;

	  var s = nodes.length;

	  for (var i = 0; i < s; i++) {
	    var lNode = nodes[i];
	    nodeLeft = lNode.getLeft();
	    nodeRight = lNode.getRight();
	    nodeTop = lNode.getTop();
	    nodeBottom = lNode.getBottom();

	    if (left > nodeLeft) {
	      left = nodeLeft;
	    }

	    if (right < nodeRight) {
	      right = nodeRight;
	    }

	    if (top > nodeTop) {
	      top = nodeTop;
	    }

	    if (bottom < nodeBottom) {
	      bottom = nodeBottom;
	    }
	  }

	  var boundingRect = new RectangleD(left, top, right - left, bottom - top);

	  return boundingRect;
	};

	LGraph.prototype.getInclusionTreeDepth = function () {
	  if (this == this.graphManager.getRoot()) {
	    return 1;
	  } else {
	    return this.parent.getInclusionTreeDepth();
	  }
	};

	LGraph.prototype.getEstimatedSize = function () {
	  if (this.estimatedSize == Integer.MIN_VALUE) {
	    throw "assert failed";
	  }
	  return this.estimatedSize;
	};

	LGraph.prototype.calcEstimatedSize = function () {
	  var size = 0;
	  var nodes = this.nodes;
	  var s = nodes.length;

	  for (var i = 0; i < s; i++) {
	    var lNode = nodes[i];
	    size += lNode.calcEstimatedSize();
	  }

	  if (size == 0) {
	    this.estimatedSize = LayoutConstants.EMPTY_COMPOUND_NODE_SIZE;
	  } else {
	    this.estimatedSize = size / Math.sqrt(this.nodes.length);
	  }

	  return this.estimatedSize;
	};

	LGraph.prototype.updateConnected = function () {
	  var self = this;
	  if (this.nodes.length == 0) {
	    this.isConnected = true;
	    return;
	  }

	  var queue = new LinkedList();
	  var visited = new Set();
	  var currentNode = this.nodes[0];
	  var neighborEdges;
	  var currentNeighbor;
	  var childrenOfNode = currentNode.withChildren();
	  childrenOfNode.forEach(function (node) {
	    queue.push(node);
	    visited.add(node);
	  });

	  while (queue.length !== 0) {
	    currentNode = queue.shift();

	    // Traverse all neighbors of this node
	    neighborEdges = currentNode.getEdges();
	    var size = neighborEdges.length;
	    for (var i = 0; i < size; i++) {
	      var neighborEdge = neighborEdges[i];
	      currentNeighbor = neighborEdge.getOtherEndInGraph(currentNode, this);

	      // Add unvisited neighbors to the list to visit
	      if (currentNeighbor != null && !visited.has(currentNeighbor)) {
	        var childrenOfNeighbor = currentNeighbor.withChildren();

	        childrenOfNeighbor.forEach(function (node) {
	          queue.push(node);
	          visited.add(node);
	        });
	      }
	    }
	  }

	  this.isConnected = false;

	  if (visited.size >= this.nodes.length) {
	    var noOfVisitedInThisGraph = 0;

	    visited.forEach(function (visitedNode) {
	      if (visitedNode.owner == self) {
	        noOfVisitedInThisGraph++;
	      }
	    });

	    if (noOfVisitedInThisGraph == this.nodes.length) {
	      this.isConnected = true;
	    }
	  }
	};

	module.exports = LGraph;

	/***/ }),
	/* 6 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	var LGraph;
	var LEdge = __webpack_require__(1);

	function LGraphManager(layout) {
	  LGraph = __webpack_require__(5); // It may be better to initilize this out of this function but it gives an error (Right-hand side of 'instanceof' is not callable) now.
	  this.layout = layout;

	  this.graphs = [];
	  this.edges = [];
	}

	LGraphManager.prototype.addRoot = function () {
	  var ngraph = this.layout.newGraph();
	  var nnode = this.layout.newNode(null);
	  var root = this.add(ngraph, nnode);
	  this.setRootGraph(root);
	  return this.rootGraph;
	};

	LGraphManager.prototype.add = function (newGraph, parentNode, newEdge, sourceNode, targetNode) {
	  //there are just 2 parameters are passed then it adds an LGraph else it adds an LEdge
	  if (newEdge == null && sourceNode == null && targetNode == null) {
	    if (newGraph == null) {
	      throw "Graph is null!";
	    }
	    if (parentNode == null) {
	      throw "Parent node is null!";
	    }
	    if (this.graphs.indexOf(newGraph) > -1) {
	      throw "Graph already in this graph mgr!";
	    }

	    this.graphs.push(newGraph);

	    if (newGraph.parent != null) {
	      throw "Already has a parent!";
	    }
	    if (parentNode.child != null) {
	      throw "Already has a child!";
	    }

	    newGraph.parent = parentNode;
	    parentNode.child = newGraph;

	    return newGraph;
	  } else {
	    //change the order of the parameters
	    targetNode = newEdge;
	    sourceNode = parentNode;
	    newEdge = newGraph;
	    var sourceGraph = sourceNode.getOwner();
	    var targetGraph = targetNode.getOwner();

	    if (!(sourceGraph != null && sourceGraph.getGraphManager() == this)) {
	      throw "Source not in this graph mgr!";
	    }
	    if (!(targetGraph != null && targetGraph.getGraphManager() == this)) {
	      throw "Target not in this graph mgr!";
	    }

	    if (sourceGraph == targetGraph) {
	      newEdge.isInterGraph = false;
	      return sourceGraph.add(newEdge, sourceNode, targetNode);
	    } else {
	      newEdge.isInterGraph = true;

	      // set source and target
	      newEdge.source = sourceNode;
	      newEdge.target = targetNode;

	      // add edge to inter-graph edge list
	      if (this.edges.indexOf(newEdge) > -1) {
	        throw "Edge already in inter-graph edge list!";
	      }

	      this.edges.push(newEdge);

	      // add edge to source and target incidency lists
	      if (!(newEdge.source != null && newEdge.target != null)) {
	        throw "Edge source and/or target is null!";
	      }

	      if (!(newEdge.source.edges.indexOf(newEdge) == -1 && newEdge.target.edges.indexOf(newEdge) == -1)) {
	        throw "Edge already in source and/or target incidency list!";
	      }

	      newEdge.source.edges.push(newEdge);
	      newEdge.target.edges.push(newEdge);

	      return newEdge;
	    }
	  }
	};

	LGraphManager.prototype.remove = function (lObj) {
	  if (lObj instanceof LGraph) {
	    var graph = lObj;
	    if (graph.getGraphManager() != this) {
	      throw "Graph not in this graph mgr";
	    }
	    if (!(graph == this.rootGraph || graph.parent != null && graph.parent.graphManager == this)) {
	      throw "Invalid parent node!";
	    }

	    // first the edges (make a copy to do it safely)
	    var edgesToBeRemoved = [];

	    edgesToBeRemoved = edgesToBeRemoved.concat(graph.getEdges());

	    var edge;
	    var s = edgesToBeRemoved.length;
	    for (var i = 0; i < s; i++) {
	      edge = edgesToBeRemoved[i];
	      graph.remove(edge);
	    }

	    // then the nodes (make a copy to do it safely)
	    var nodesToBeRemoved = [];

	    nodesToBeRemoved = nodesToBeRemoved.concat(graph.getNodes());

	    var node;
	    s = nodesToBeRemoved.length;
	    for (var i = 0; i < s; i++) {
	      node = nodesToBeRemoved[i];
	      graph.remove(node);
	    }

	    // check if graph is the root
	    if (graph == this.rootGraph) {
	      this.setRootGraph(null);
	    }

	    // now remove the graph itself
	    var index = this.graphs.indexOf(graph);
	    this.graphs.splice(index, 1);

	    // also reset the parent of the graph
	    graph.parent = null;
	  } else if (lObj instanceof LEdge) {
	    edge = lObj;
	    if (edge == null) {
	      throw "Edge is null!";
	    }
	    if (!edge.isInterGraph) {
	      throw "Not an inter-graph edge!";
	    }
	    if (!(edge.source != null && edge.target != null)) {
	      throw "Source and/or target is null!";
	    }

	    // remove edge from source and target nodes' incidency lists

	    if (!(edge.source.edges.indexOf(edge) != -1 && edge.target.edges.indexOf(edge) != -1)) {
	      throw "Source and/or target doesn't know this edge!";
	    }

	    var index = edge.source.edges.indexOf(edge);
	    edge.source.edges.splice(index, 1);
	    index = edge.target.edges.indexOf(edge);
	    edge.target.edges.splice(index, 1);

	    // remove edge from owner graph manager's inter-graph edge list

	    if (!(edge.source.owner != null && edge.source.owner.getGraphManager() != null)) {
	      throw "Edge owner graph or owner graph manager is null!";
	    }
	    if (edge.source.owner.getGraphManager().edges.indexOf(edge) == -1) {
	      throw "Not in owner graph manager's edge list!";
	    }

	    var index = edge.source.owner.getGraphManager().edges.indexOf(edge);
	    edge.source.owner.getGraphManager().edges.splice(index, 1);
	  }
	};

	LGraphManager.prototype.updateBounds = function () {
	  this.rootGraph.updateBounds(true);
	};

	LGraphManager.prototype.getGraphs = function () {
	  return this.graphs;
	};

	LGraphManager.prototype.getAllNodes = function () {
	  if (this.allNodes == null) {
	    var nodeList = [];
	    var graphs = this.getGraphs();
	    var s = graphs.length;
	    for (var i = 0; i < s; i++) {
	      nodeList = nodeList.concat(graphs[i].getNodes());
	    }
	    this.allNodes = nodeList;
	  }
	  return this.allNodes;
	};

	LGraphManager.prototype.resetAllNodes = function () {
	  this.allNodes = null;
	};

	LGraphManager.prototype.resetAllEdges = function () {
	  this.allEdges = null;
	};

	LGraphManager.prototype.resetAllNodesToApplyGravitation = function () {
	  this.allNodesToApplyGravitation = null;
	};

	LGraphManager.prototype.getAllEdges = function () {
	  if (this.allEdges == null) {
	    var edgeList = [];
	    var graphs = this.getGraphs();
	    var s = graphs.length;
	    for (var i = 0; i < graphs.length; i++) {
	      edgeList = edgeList.concat(graphs[i].getEdges());
	    }

	    edgeList = edgeList.concat(this.edges);

	    this.allEdges = edgeList;
	  }
	  return this.allEdges;
	};

	LGraphManager.prototype.getAllNodesToApplyGravitation = function () {
	  return this.allNodesToApplyGravitation;
	};

	LGraphManager.prototype.setAllNodesToApplyGravitation = function (nodeList) {
	  if (this.allNodesToApplyGravitation != null) {
	    throw "assert failed";
	  }

	  this.allNodesToApplyGravitation = nodeList;
	};

	LGraphManager.prototype.getRoot = function () {
	  return this.rootGraph;
	};

	LGraphManager.prototype.setRootGraph = function (graph) {
	  if (graph.getGraphManager() != this) {
	    throw "Root not in this graph mgr!";
	  }

	  this.rootGraph = graph;
	  // root graph must have a root node associated with it for convenience
	  if (graph.parent == null) {
	    graph.parent = this.layout.newNode("Root node");
	  }
	};

	LGraphManager.prototype.getLayout = function () {
	  return this.layout;
	};

	LGraphManager.prototype.isOneAncestorOfOther = function (firstNode, secondNode) {
	  if (!(firstNode != null && secondNode != null)) {
	    throw "assert failed";
	  }

	  if (firstNode == secondNode) {
	    return true;
	  }
	  // Is second node an ancestor of the first one?
	  var ownerGraph = firstNode.getOwner();
	  var parentNode;

	  do {
	    parentNode = ownerGraph.getParent();

	    if (parentNode == null) {
	      break;
	    }

	    if (parentNode == secondNode) {
	      return true;
	    }

	    ownerGraph = parentNode.getOwner();
	    if (ownerGraph == null) {
	      break;
	    }
	  } while (true);
	  // Is first node an ancestor of the second one?
	  ownerGraph = secondNode.getOwner();

	  do {
	    parentNode = ownerGraph.getParent();

	    if (parentNode == null) {
	      break;
	    }

	    if (parentNode == firstNode) {
	      return true;
	    }

	    ownerGraph = parentNode.getOwner();
	    if (ownerGraph == null) {
	      break;
	    }
	  } while (true);

	  return false;
	};

	LGraphManager.prototype.calcLowestCommonAncestors = function () {
	  var edge;
	  var sourceNode;
	  var targetNode;
	  var sourceAncestorGraph;
	  var targetAncestorGraph;

	  var edges = this.getAllEdges();
	  var s = edges.length;
	  for (var i = 0; i < s; i++) {
	    edge = edges[i];

	    sourceNode = edge.source;
	    targetNode = edge.target;
	    edge.lca = null;
	    edge.sourceInLca = sourceNode;
	    edge.targetInLca = targetNode;

	    if (sourceNode == targetNode) {
	      edge.lca = sourceNode.getOwner();
	      continue;
	    }

	    sourceAncestorGraph = sourceNode.getOwner();

	    while (edge.lca == null) {
	      edge.targetInLca = targetNode;
	      targetAncestorGraph = targetNode.getOwner();

	      while (edge.lca == null) {
	        if (targetAncestorGraph == sourceAncestorGraph) {
	          edge.lca = targetAncestorGraph;
	          break;
	        }

	        if (targetAncestorGraph == this.rootGraph) {
	          break;
	        }

	        if (edge.lca != null) {
	          throw "assert failed";
	        }
	        edge.targetInLca = targetAncestorGraph.getParent();
	        targetAncestorGraph = edge.targetInLca.getOwner();
	      }

	      if (sourceAncestorGraph == this.rootGraph) {
	        break;
	      }

	      if (edge.lca == null) {
	        edge.sourceInLca = sourceAncestorGraph.getParent();
	        sourceAncestorGraph = edge.sourceInLca.getOwner();
	      }
	    }

	    if (edge.lca == null) {
	      throw "assert failed";
	    }
	  }
	};

	LGraphManager.prototype.calcLowestCommonAncestor = function (firstNode, secondNode) {
	  if (firstNode == secondNode) {
	    return firstNode.getOwner();
	  }
	  var firstOwnerGraph = firstNode.getOwner();

	  do {
	    if (firstOwnerGraph == null) {
	      break;
	    }
	    var secondOwnerGraph = secondNode.getOwner();

	    do {
	      if (secondOwnerGraph == null) {
	        break;
	      }

	      if (secondOwnerGraph == firstOwnerGraph) {
	        return secondOwnerGraph;
	      }
	      secondOwnerGraph = secondOwnerGraph.getParent().getOwner();
	    } while (true);

	    firstOwnerGraph = firstOwnerGraph.getParent().getOwner();
	  } while (true);

	  return firstOwnerGraph;
	};

	LGraphManager.prototype.calcInclusionTreeDepths = function (graph, depth) {
	  if (graph == null && depth == null) {
	    graph = this.rootGraph;
	    depth = 1;
	  }
	  var node;

	  var nodes = graph.getNodes();
	  var s = nodes.length;
	  for (var i = 0; i < s; i++) {
	    node = nodes[i];
	    node.inclusionTreeDepth = depth;

	    if (node.child != null) {
	      this.calcInclusionTreeDepths(node.child, depth + 1);
	    }
	  }
	};

	LGraphManager.prototype.includesInvalidEdge = function () {
	  var edge;

	  var s = this.edges.length;
	  for (var i = 0; i < s; i++) {
	    edge = this.edges[i];

	    if (this.isOneAncestorOfOther(edge.source, edge.target)) {
	      return true;
	    }
	  }
	  return false;
	};

	module.exports = LGraphManager;

	/***/ }),
	/* 7 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	var LayoutConstants = __webpack_require__(0);

	function FDLayoutConstants() {}

	//FDLayoutConstants inherits static props in LayoutConstants
	for (var prop in LayoutConstants) {
	  FDLayoutConstants[prop] = LayoutConstants[prop];
	}

	FDLayoutConstants.MAX_ITERATIONS = 2500;

	FDLayoutConstants.DEFAULT_EDGE_LENGTH = 50;
	FDLayoutConstants.DEFAULT_SPRING_STRENGTH = 0.45;
	FDLayoutConstants.DEFAULT_REPULSION_STRENGTH = 4500.0;
	FDLayoutConstants.DEFAULT_GRAVITY_STRENGTH = 0.4;
	FDLayoutConstants.DEFAULT_COMPOUND_GRAVITY_STRENGTH = 1.0;
	FDLayoutConstants.DEFAULT_GRAVITY_RANGE_FACTOR = 3.8;
	FDLayoutConstants.DEFAULT_COMPOUND_GRAVITY_RANGE_FACTOR = 1.5;
	FDLayoutConstants.DEFAULT_USE_SMART_IDEAL_EDGE_LENGTH_CALCULATION = true;
	FDLayoutConstants.DEFAULT_USE_SMART_REPULSION_RANGE_CALCULATION = true;
	FDLayoutConstants.DEFAULT_COOLING_FACTOR_INCREMENTAL = 0.3;
	FDLayoutConstants.COOLING_ADAPTATION_FACTOR = 0.33;
	FDLayoutConstants.ADAPTATION_LOWER_NODE_LIMIT = 1000;
	FDLayoutConstants.ADAPTATION_UPPER_NODE_LIMIT = 5000;
	FDLayoutConstants.MAX_NODE_DISPLACEMENT_INCREMENTAL = 100.0;
	FDLayoutConstants.MAX_NODE_DISPLACEMENT = FDLayoutConstants.MAX_NODE_DISPLACEMENT_INCREMENTAL * 3;
	FDLayoutConstants.MIN_REPULSION_DIST = FDLayoutConstants.DEFAULT_EDGE_LENGTH / 10.0;
	FDLayoutConstants.CONVERGENCE_CHECK_PERIOD = 100;
	FDLayoutConstants.PER_LEVEL_IDEAL_EDGE_LENGTH_FACTOR = 0.1;
	FDLayoutConstants.MIN_EDGE_LENGTH = 1;
	FDLayoutConstants.GRID_CALCULATION_CHECK_PERIOD = 10;

	module.exports = FDLayoutConstants;

	/***/ }),
	/* 8 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	/**
	 * This class maintains a list of static geometry related utility methods.
	 *
	 *
	 * Copyright: i-Vis Research Group, Bilkent University, 2007 - present
	 */

	var Point = __webpack_require__(12);

	function IGeometry() {}

	/**
	 * This method calculates *half* the amount in x and y directions of the two
	 * input rectangles needed to separate them keeping their respective
	 * positioning, and returns the result in the input array. An input
	 * separation buffer added to the amount in both directions. We assume that
	 * the two rectangles do intersect.
	 */
	IGeometry.calcSeparationAmount = function (rectA, rectB, overlapAmount, separationBuffer) {
	  if (!rectA.intersects(rectB)) {
	    throw "assert failed";
	  }

	  var directions = new Array(2);

	  this.decideDirectionsForOverlappingNodes(rectA, rectB, directions);

	  overlapAmount[0] = Math.min(rectA.getRight(), rectB.getRight()) - Math.max(rectA.x, rectB.x);
	  overlapAmount[1] = Math.min(rectA.getBottom(), rectB.getBottom()) - Math.max(rectA.y, rectB.y);

	  // update the overlapping amounts for the following cases:
	  if (rectA.getX() <= rectB.getX() && rectA.getRight() >= rectB.getRight()) {
	    /* Case x.1:
	    *
	    * rectA
	    * 	|                       |
	    * 	|        _________      |
	    * 	|        |       |      |
	    * 	|________|_______|______|
	    * 			 |       |
	    *           |       |
	    *        rectB
	    */
	    overlapAmount[0] += Math.min(rectB.getX() - rectA.getX(), rectA.getRight() - rectB.getRight());
	  } else if (rectB.getX() <= rectA.getX() && rectB.getRight() >= rectA.getRight()) {
	    /* Case x.2:
	    *
	    * rectB
	    * 	|                       |
	    * 	|        _________      |
	    * 	|        |       |      |
	    * 	|________|_______|______|
	    * 			 |       |
	    *           |       |
	    *        rectA
	    */
	    overlapAmount[0] += Math.min(rectA.getX() - rectB.getX(), rectB.getRight() - rectA.getRight());
	  }
	  if (rectA.getY() <= rectB.getY() && rectA.getBottom() >= rectB.getBottom()) {
	    /* Case y.1:
	     *          ________ rectA
	     *         |
	     *         |
	     *   ______|____  rectB
	     *         |    |
	     *         |    |
	     *   ______|____|
	     *         |
	     *         |
	     *         |________
	     *
	     */
	    overlapAmount[1] += Math.min(rectB.getY() - rectA.getY(), rectA.getBottom() - rectB.getBottom());
	  } else if (rectB.getY() <= rectA.getY() && rectB.getBottom() >= rectA.getBottom()) {
	    /* Case y.2:
	    *          ________ rectB
	    *         |
	    *         |
	    *   ______|____  rectA
	    *         |    |
	    *         |    |
	    *   ______|____|
	    *         |
	    *         |
	    *         |________
	    *
	    */
	    overlapAmount[1] += Math.min(rectA.getY() - rectB.getY(), rectB.getBottom() - rectA.getBottom());
	  }

	  // find slope of the line passes two centers
	  var slope = Math.abs((rectB.getCenterY() - rectA.getCenterY()) / (rectB.getCenterX() - rectA.getCenterX()));
	  // if centers are overlapped
	  if (rectB.getCenterY() === rectA.getCenterY() && rectB.getCenterX() === rectA.getCenterX()) {
	    // assume the slope is 1 (45 degree)
	    slope = 1.0;
	  }

	  var moveByY = slope * overlapAmount[0];
	  var moveByX = overlapAmount[1] / slope;
	  if (overlapAmount[0] < moveByX) {
	    moveByX = overlapAmount[0];
	  } else {
	    moveByY = overlapAmount[1];
	  }
	  // return half the amount so that if each rectangle is moved by these
	  // amounts in opposite directions, overlap will be resolved
	  overlapAmount[0] = -1 * directions[0] * (moveByX / 2 + separationBuffer);
	  overlapAmount[1] = -1 * directions[1] * (moveByY / 2 + separationBuffer);
	};

	/**
	 * This method decides the separation direction of overlapping nodes
	 *
	 * if directions[0] = -1, then rectA goes left
	 * if directions[0] = 1,  then rectA goes right
	 * if directions[1] = -1, then rectA goes up
	 * if directions[1] = 1,  then rectA goes down
	 */
	IGeometry.decideDirectionsForOverlappingNodes = function (rectA, rectB, directions) {
	  if (rectA.getCenterX() < rectB.getCenterX()) {
	    directions[0] = -1;
	  } else {
	    directions[0] = 1;
	  }

	  if (rectA.getCenterY() < rectB.getCenterY()) {
	    directions[1] = -1;
	  } else {
	    directions[1] = 1;
	  }
	};

	/**
	 * This method calculates the intersection (clipping) points of the two
	 * input rectangles with line segment defined by the centers of these two
	 * rectangles. The clipping points are saved in the input double array and
	 * whether or not the two rectangles overlap is returned.
	 */
	IGeometry.getIntersection2 = function (rectA, rectB, result) {
	  //result[0-1] will contain clipPoint of rectA, result[2-3] will contain clipPoint of rectB
	  var p1x = rectA.getCenterX();
	  var p1y = rectA.getCenterY();
	  var p2x = rectB.getCenterX();
	  var p2y = rectB.getCenterY();

	  //if two rectangles intersect, then clipping points are centers
	  if (rectA.intersects(rectB)) {
	    result[0] = p1x;
	    result[1] = p1y;
	    result[2] = p2x;
	    result[3] = p2y;
	    return true;
	  }
	  //variables for rectA
	  var topLeftAx = rectA.getX();
	  var topLeftAy = rectA.getY();
	  var topRightAx = rectA.getRight();
	  var bottomLeftAx = rectA.getX();
	  var bottomLeftAy = rectA.getBottom();
	  var bottomRightAx = rectA.getRight();
	  var halfWidthA = rectA.getWidthHalf();
	  var halfHeightA = rectA.getHeightHalf();
	  //variables for rectB
	  var topLeftBx = rectB.getX();
	  var topLeftBy = rectB.getY();
	  var topRightBx = rectB.getRight();
	  var bottomLeftBx = rectB.getX();
	  var bottomLeftBy = rectB.getBottom();
	  var bottomRightBx = rectB.getRight();
	  var halfWidthB = rectB.getWidthHalf();
	  var halfHeightB = rectB.getHeightHalf();

	  //flag whether clipping points are found
	  var clipPointAFound = false;
	  var clipPointBFound = false;

	  // line is vertical
	  if (p1x === p2x) {
	    if (p1y > p2y) {
	      result[0] = p1x;
	      result[1] = topLeftAy;
	      result[2] = p2x;
	      result[3] = bottomLeftBy;
	      return false;
	    } else if (p1y < p2y) {
	      result[0] = p1x;
	      result[1] = bottomLeftAy;
	      result[2] = p2x;
	      result[3] = topLeftBy;
	      return false;
	    } else {
	      //not line, return null;
	    }
	  }
	  // line is horizontal
	  else if (p1y === p2y) {
	      if (p1x > p2x) {
	        result[0] = topLeftAx;
	        result[1] = p1y;
	        result[2] = topRightBx;
	        result[3] = p2y;
	        return false;
	      } else if (p1x < p2x) {
	        result[0] = topRightAx;
	        result[1] = p1y;
	        result[2] = topLeftBx;
	        result[3] = p2y;
	        return false;
	      } else {
	        //not valid line, return null;
	      }
	    } else {
	      //slopes of rectA's and rectB's diagonals
	      var slopeA = rectA.height / rectA.width;
	      var slopeB = rectB.height / rectB.width;

	      //slope of line between center of rectA and center of rectB
	      var slopePrime = (p2y - p1y) / (p2x - p1x);
	      var cardinalDirectionA = void 0;
	      var cardinalDirectionB = void 0;
	      var tempPointAx = void 0;
	      var tempPointAy = void 0;
	      var tempPointBx = void 0;
	      var tempPointBy = void 0;

	      //determine whether clipping point is the corner of nodeA
	      if (-slopeA === slopePrime) {
	        if (p1x > p2x) {
	          result[0] = bottomLeftAx;
	          result[1] = bottomLeftAy;
	          clipPointAFound = true;
	        } else {
	          result[0] = topRightAx;
	          result[1] = topLeftAy;
	          clipPointAFound = true;
	        }
	      } else if (slopeA === slopePrime) {
	        if (p1x > p2x) {
	          result[0] = topLeftAx;
	          result[1] = topLeftAy;
	          clipPointAFound = true;
	        } else {
	          result[0] = bottomRightAx;
	          result[1] = bottomLeftAy;
	          clipPointAFound = true;
	        }
	      }

	      //determine whether clipping point is the corner of nodeB
	      if (-slopeB === slopePrime) {
	        if (p2x > p1x) {
	          result[2] = bottomLeftBx;
	          result[3] = bottomLeftBy;
	          clipPointBFound = true;
	        } else {
	          result[2] = topRightBx;
	          result[3] = topLeftBy;
	          clipPointBFound = true;
	        }
	      } else if (slopeB === slopePrime) {
	        if (p2x > p1x) {
	          result[2] = topLeftBx;
	          result[3] = topLeftBy;
	          clipPointBFound = true;
	        } else {
	          result[2] = bottomRightBx;
	          result[3] = bottomLeftBy;
	          clipPointBFound = true;
	        }
	      }

	      //if both clipping points are corners
	      if (clipPointAFound && clipPointBFound) {
	        return false;
	      }

	      //determine Cardinal Direction of rectangles
	      if (p1x > p2x) {
	        if (p1y > p2y) {
	          cardinalDirectionA = this.getCardinalDirection(slopeA, slopePrime, 4);
	          cardinalDirectionB = this.getCardinalDirection(slopeB, slopePrime, 2);
	        } else {
	          cardinalDirectionA = this.getCardinalDirection(-slopeA, slopePrime, 3);
	          cardinalDirectionB = this.getCardinalDirection(-slopeB, slopePrime, 1);
	        }
	      } else {
	        if (p1y > p2y) {
	          cardinalDirectionA = this.getCardinalDirection(-slopeA, slopePrime, 1);
	          cardinalDirectionB = this.getCardinalDirection(-slopeB, slopePrime, 3);
	        } else {
	          cardinalDirectionA = this.getCardinalDirection(slopeA, slopePrime, 2);
	          cardinalDirectionB = this.getCardinalDirection(slopeB, slopePrime, 4);
	        }
	      }
	      //calculate clipping Point if it is not found before
	      if (!clipPointAFound) {
	        switch (cardinalDirectionA) {
	          case 1:
	            tempPointAy = topLeftAy;
	            tempPointAx = p1x + -halfHeightA / slopePrime;
	            result[0] = tempPointAx;
	            result[1] = tempPointAy;
	            break;
	          case 2:
	            tempPointAx = bottomRightAx;
	            tempPointAy = p1y + halfWidthA * slopePrime;
	            result[0] = tempPointAx;
	            result[1] = tempPointAy;
	            break;
	          case 3:
	            tempPointAy = bottomLeftAy;
	            tempPointAx = p1x + halfHeightA / slopePrime;
	            result[0] = tempPointAx;
	            result[1] = tempPointAy;
	            break;
	          case 4:
	            tempPointAx = bottomLeftAx;
	            tempPointAy = p1y + -halfWidthA * slopePrime;
	            result[0] = tempPointAx;
	            result[1] = tempPointAy;
	            break;
	        }
	      }
	      if (!clipPointBFound) {
	        switch (cardinalDirectionB) {
	          case 1:
	            tempPointBy = topLeftBy;
	            tempPointBx = p2x + -halfHeightB / slopePrime;
	            result[2] = tempPointBx;
	            result[3] = tempPointBy;
	            break;
	          case 2:
	            tempPointBx = bottomRightBx;
	            tempPointBy = p2y + halfWidthB * slopePrime;
	            result[2] = tempPointBx;
	            result[3] = tempPointBy;
	            break;
	          case 3:
	            tempPointBy = bottomLeftBy;
	            tempPointBx = p2x + halfHeightB / slopePrime;
	            result[2] = tempPointBx;
	            result[3] = tempPointBy;
	            break;
	          case 4:
	            tempPointBx = bottomLeftBx;
	            tempPointBy = p2y + -halfWidthB * slopePrime;
	            result[2] = tempPointBx;
	            result[3] = tempPointBy;
	            break;
	        }
	      }
	    }
	  return false;
	};

	/**
	 * This method returns in which cardinal direction does input point stays
	 * 1: North
	 * 2: East
	 * 3: South
	 * 4: West
	 */
	IGeometry.getCardinalDirection = function (slope, slopePrime, line) {
	  if (slope > slopePrime) {
	    return line;
	  } else {
	    return 1 + line % 4;
	  }
	};

	/**
	 * This method calculates the intersection of the two lines defined by
	 * point pairs (s1,s2) and (f1,f2).
	 */
	IGeometry.getIntersection = function (s1, s2, f1, f2) {
	  if (f2 == null) {
	    return this.getIntersection2(s1, s2, f1);
	  }

	  var x1 = s1.x;
	  var y1 = s1.y;
	  var x2 = s2.x;
	  var y2 = s2.y;
	  var x3 = f1.x;
	  var y3 = f1.y;
	  var x4 = f2.x;
	  var y4 = f2.y;
	  var x = void 0,
	      y = void 0; // intersection point
	  var a1 = void 0,
	      a2 = void 0,
	      b1 = void 0,
	      b2 = void 0,
	      c1 = void 0,
	      c2 = void 0; // coefficients of line eqns.
	  var denom = void 0;

	  a1 = y2 - y1;
	  b1 = x1 - x2;
	  c1 = x2 * y1 - x1 * y2; // { a1*x + b1*y + c1 = 0 is line 1 }

	  a2 = y4 - y3;
	  b2 = x3 - x4;
	  c2 = x4 * y3 - x3 * y4; // { a2*x + b2*y + c2 = 0 is line 2 }

	  denom = a1 * b2 - a2 * b1;

	  if (denom === 0) {
	    return null;
	  }

	  x = (b1 * c2 - b2 * c1) / denom;
	  y = (a2 * c1 - a1 * c2) / denom;

	  return new Point(x, y);
	};

	/**
	 * This method finds and returns the angle of the vector from the + x-axis
	 * in clockwise direction (compatible w/ Java coordinate system!).
	 */
	IGeometry.angleOfVector = function (Cx, Cy, Nx, Ny) {
	  var C_angle = void 0;

	  if (Cx !== Nx) {
	    C_angle = Math.atan((Ny - Cy) / (Nx - Cx));

	    if (Nx < Cx) {
	      C_angle += Math.PI;
	    } else if (Ny < Cy) {
	      C_angle += this.TWO_PI;
	    }
	  } else if (Ny < Cy) {
	    C_angle = this.ONE_AND_HALF_PI; // 270 degrees
	  } else {
	    C_angle = this.HALF_PI; // 90 degrees
	  }

	  return C_angle;
	};

	/**
	 * This method checks whether the given two line segments (one with point
	 * p1 and p2, the other with point p3 and p4) intersect at a point other
	 * than these points.
	 */
	IGeometry.doIntersect = function (p1, p2, p3, p4) {
	  var a = p1.x;
	  var b = p1.y;
	  var c = p2.x;
	  var d = p2.y;
	  var p = p3.x;
	  var q = p3.y;
	  var r = p4.x;
	  var s = p4.y;
	  var det = (c - a) * (s - q) - (r - p) * (d - b);

	  if (det === 0) {
	    return false;
	  } else {
	    var lambda = ((s - q) * (r - a) + (p - r) * (s - b)) / det;
	    var gamma = ((b - d) * (r - a) + (c - a) * (s - b)) / det;
	    return 0 < lambda && lambda < 1 && 0 < gamma && gamma < 1;
	  }
	};

	// -----------------------------------------------------------------------------
	// Section: Class Constants
	// -----------------------------------------------------------------------------
	/**
	 * Some useful pre-calculated constants
	 */
	IGeometry.HALF_PI = 0.5 * Math.PI;
	IGeometry.ONE_AND_HALF_PI = 1.5 * Math.PI;
	IGeometry.TWO_PI = 2.0 * Math.PI;
	IGeometry.THREE_PI = 3.0 * Math.PI;

	module.exports = IGeometry;

	/***/ }),
	/* 9 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	function IMath() {}

	/**
	 * This method returns the sign of the input value.
	 */
	IMath.sign = function (value) {
	  if (value > 0) {
	    return 1;
	  } else if (value < 0) {
	    return -1;
	  } else {
	    return 0;
	  }
	};

	IMath.floor = function (value) {
	  return value < 0 ? Math.ceil(value) : Math.floor(value);
	};

	IMath.ceil = function (value) {
	  return value < 0 ? Math.floor(value) : Math.ceil(value);
	};

	module.exports = IMath;

	/***/ }),
	/* 10 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	function Integer() {}

	Integer.MAX_VALUE = 2147483647;
	Integer.MIN_VALUE = -2147483648;

	module.exports = Integer;

	/***/ }),
	/* 11 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var nodeFrom = function nodeFrom(value) {
	  return { value: value, next: null, prev: null };
	};

	var add = function add(prev, node, next, list) {
	  if (prev !== null) {
	    prev.next = node;
	  } else {
	    list.head = node;
	  }

	  if (next !== null) {
	    next.prev = node;
	  } else {
	    list.tail = node;
	  }

	  node.prev = prev;
	  node.next = next;

	  list.length++;

	  return node;
	};

	var _remove = function _remove(node, list) {
	  var prev = node.prev,
	      next = node.next;


	  if (prev !== null) {
	    prev.next = next;
	  } else {
	    list.head = next;
	  }

	  if (next !== null) {
	    next.prev = prev;
	  } else {
	    list.tail = prev;
	  }

	  node.prev = node.next = null;

	  list.length--;

	  return node;
	};

	var LinkedList = function () {
	  function LinkedList(vals) {
	    var _this = this;

	    _classCallCheck(this, LinkedList);

	    this.length = 0;
	    this.head = null;
	    this.tail = null;

	    if (vals != null) {
	      vals.forEach(function (v) {
	        return _this.push(v);
	      });
	    }
	  }

	  _createClass(LinkedList, [{
	    key: "size",
	    value: function size() {
	      return this.length;
	    }
	  }, {
	    key: "insertBefore",
	    value: function insertBefore(val, otherNode) {
	      return add(otherNode.prev, nodeFrom(val), otherNode, this);
	    }
	  }, {
	    key: "insertAfter",
	    value: function insertAfter(val, otherNode) {
	      return add(otherNode, nodeFrom(val), otherNode.next, this);
	    }
	  }, {
	    key: "insertNodeBefore",
	    value: function insertNodeBefore(newNode, otherNode) {
	      return add(otherNode.prev, newNode, otherNode, this);
	    }
	  }, {
	    key: "insertNodeAfter",
	    value: function insertNodeAfter(newNode, otherNode) {
	      return add(otherNode, newNode, otherNode.next, this);
	    }
	  }, {
	    key: "push",
	    value: function push(val) {
	      return add(this.tail, nodeFrom(val), null, this);
	    }
	  }, {
	    key: "unshift",
	    value: function unshift(val) {
	      return add(null, nodeFrom(val), this.head, this);
	    }
	  }, {
	    key: "remove",
	    value: function remove(node) {
	      return _remove(node, this);
	    }
	  }, {
	    key: "pop",
	    value: function pop() {
	      return _remove(this.tail, this).value;
	    }
	  }, {
	    key: "popNode",
	    value: function popNode() {
	      return _remove(this.tail, this);
	    }
	  }, {
	    key: "shift",
	    value: function shift() {
	      return _remove(this.head, this).value;
	    }
	  }, {
	    key: "shiftNode",
	    value: function shiftNode() {
	      return _remove(this.head, this);
	    }
	  }, {
	    key: "get_object_at",
	    value: function get_object_at(index) {
	      if (index <= this.length()) {
	        var i = 1;
	        var current = this.head;
	        while (i < index) {
	          current = current.next;
	          i++;
	        }
	        return current.value;
	      }
	    }
	  }, {
	    key: "set_object_at",
	    value: function set_object_at(index, value) {
	      if (index <= this.length()) {
	        var i = 1;
	        var current = this.head;
	        while (i < index) {
	          current = current.next;
	          i++;
	        }
	        current.value = value;
	      }
	    }
	  }]);

	  return LinkedList;
	}();

	module.exports = LinkedList;

	/***/ }),
	/* 12 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	/*
	 *This class is the javascript implementation of the Point.java class in jdk
	 */
	function Point(x, y, p) {
	  this.x = null;
	  this.y = null;
	  if (x == null && y == null && p == null) {
	    this.x = 0;
	    this.y = 0;
	  } else if (typeof x == 'number' && typeof y == 'number' && p == null) {
	    this.x = x;
	    this.y = y;
	  } else if (x.constructor.name == 'Point' && y == null && p == null) {
	    p = x;
	    this.x = p.x;
	    this.y = p.y;
	  }
	}

	Point.prototype.getX = function () {
	  return this.x;
	};

	Point.prototype.getY = function () {
	  return this.y;
	};

	Point.prototype.getLocation = function () {
	  return new Point(this.x, this.y);
	};

	Point.prototype.setLocation = function (x, y, p) {
	  if (x.constructor.name == 'Point' && y == null && p == null) {
	    p = x;
	    this.setLocation(p.x, p.y);
	  } else if (typeof x == 'number' && typeof y == 'number' && p == null) {
	    //if both parameters are integer just move (x,y) location
	    if (parseInt(x) == x && parseInt(y) == y) {
	      this.move(x, y);
	    } else {
	      this.x = Math.floor(x + 0.5);
	      this.y = Math.floor(y + 0.5);
	    }
	  }
	};

	Point.prototype.move = function (x, y) {
	  this.x = x;
	  this.y = y;
	};

	Point.prototype.translate = function (dx, dy) {
	  this.x += dx;
	  this.y += dy;
	};

	Point.prototype.equals = function (obj) {
	  if (obj.constructor.name == "Point") {
	    var pt = obj;
	    return this.x == pt.x && this.y == pt.y;
	  }
	  return this == obj;
	};

	Point.prototype.toString = function () {
	  return new Point().constructor.name + "[x=" + this.x + ",y=" + this.y + "]";
	};

	module.exports = Point;

	/***/ }),
	/* 13 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	function RectangleD(x, y, width, height) {
	  this.x = 0;
	  this.y = 0;
	  this.width = 0;
	  this.height = 0;

	  if (x != null && y != null && width != null && height != null) {
	    this.x = x;
	    this.y = y;
	    this.width = width;
	    this.height = height;
	  }
	}

	RectangleD.prototype.getX = function () {
	  return this.x;
	};

	RectangleD.prototype.setX = function (x) {
	  this.x = x;
	};

	RectangleD.prototype.getY = function () {
	  return this.y;
	};

	RectangleD.prototype.setY = function (y) {
	  this.y = y;
	};

	RectangleD.prototype.getWidth = function () {
	  return this.width;
	};

	RectangleD.prototype.setWidth = function (width) {
	  this.width = width;
	};

	RectangleD.prototype.getHeight = function () {
	  return this.height;
	};

	RectangleD.prototype.setHeight = function (height) {
	  this.height = height;
	};

	RectangleD.prototype.getRight = function () {
	  return this.x + this.width;
	};

	RectangleD.prototype.getBottom = function () {
	  return this.y + this.height;
	};

	RectangleD.prototype.intersects = function (a) {
	  if (this.getRight() < a.x) {
	    return false;
	  }

	  if (this.getBottom() < a.y) {
	    return false;
	  }

	  if (a.getRight() < this.x) {
	    return false;
	  }

	  if (a.getBottom() < this.y) {
	    return false;
	  }

	  return true;
	};

	RectangleD.prototype.getCenterX = function () {
	  return this.x + this.width / 2;
	};

	RectangleD.prototype.getMinX = function () {
	  return this.getX();
	};

	RectangleD.prototype.getMaxX = function () {
	  return this.getX() + this.width;
	};

	RectangleD.prototype.getCenterY = function () {
	  return this.y + this.height / 2;
	};

	RectangleD.prototype.getMinY = function () {
	  return this.getY();
	};

	RectangleD.prototype.getMaxY = function () {
	  return this.getY() + this.height;
	};

	RectangleD.prototype.getWidthHalf = function () {
	  return this.width / 2;
	};

	RectangleD.prototype.getHeightHalf = function () {
	  return this.height / 2;
	};

	module.exports = RectangleD;

	/***/ }),
	/* 14 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	function UniqueIDGeneretor() {}

	UniqueIDGeneretor.lastID = 0;

	UniqueIDGeneretor.createID = function (obj) {
	  if (UniqueIDGeneretor.isPrimitive(obj)) {
	    return obj;
	  }
	  if (obj.uniqueID != null) {
	    return obj.uniqueID;
	  }
	  obj.uniqueID = UniqueIDGeneretor.getString();
	  UniqueIDGeneretor.lastID++;
	  return obj.uniqueID;
	};

	UniqueIDGeneretor.getString = function (id) {
	  if (id == null) id = UniqueIDGeneretor.lastID;
	  return "Object#" + id + "";
	};

	UniqueIDGeneretor.isPrimitive = function (arg) {
	  var type = typeof arg === "undefined" ? "undefined" : _typeof(arg);
	  return arg == null || type != "object" && type != "function";
	};

	module.exports = UniqueIDGeneretor;

	/***/ }),
	/* 15 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

	var LayoutConstants = __webpack_require__(0);
	var LGraphManager = __webpack_require__(6);
	var LNode = __webpack_require__(3);
	var LEdge = __webpack_require__(1);
	var LGraph = __webpack_require__(5);
	var PointD = __webpack_require__(4);
	var Transform = __webpack_require__(17);
	var Emitter = __webpack_require__(27);

	function Layout(isRemoteUse) {
	  Emitter.call(this);

	  //Layout Quality: 0:draft, 1:default, 2:proof
	  this.layoutQuality = LayoutConstants.QUALITY;
	  //Whether layout should create bendpoints as needed or not
	  this.createBendsAsNeeded = LayoutConstants.DEFAULT_CREATE_BENDS_AS_NEEDED;
	  //Whether layout should be incremental or not
	  this.incremental = LayoutConstants.DEFAULT_INCREMENTAL;
	  //Whether we animate from before to after layout node positions
	  this.animationOnLayout = LayoutConstants.DEFAULT_ANIMATION_ON_LAYOUT;
	  //Whether we animate the layout process or not
	  this.animationDuringLayout = LayoutConstants.DEFAULT_ANIMATION_DURING_LAYOUT;
	  //Number iterations that should be done between two successive animations
	  this.animationPeriod = LayoutConstants.DEFAULT_ANIMATION_PERIOD;
	  /**
	   * Whether or not leaf nodes (non-compound nodes) are of uniform sizes. When
	   * they are, both spring and repulsion forces between two leaf nodes can be
	   * calculated without the expensive clipping point calculations, resulting
	   * in major speed-up.
	   */
	  this.uniformLeafNodeSizes = LayoutConstants.DEFAULT_UNIFORM_LEAF_NODE_SIZES;
	  /**
	   * This is used for creation of bendpoints by using dummy nodes and edges.
	   * Maps an LEdge to its dummy bendpoint path.
	   */
	  this.edgeToDummyNodes = new Map();
	  this.graphManager = new LGraphManager(this);
	  this.isLayoutFinished = false;
	  this.isSubLayout = false;
	  this.isRemoteUse = false;

	  if (isRemoteUse != null) {
	    this.isRemoteUse = isRemoteUse;
	  }
	}

	Layout.RANDOM_SEED = 1;

	Layout.prototype = Object.create(Emitter.prototype);

	Layout.prototype.getGraphManager = function () {
	  return this.graphManager;
	};

	Layout.prototype.getAllNodes = function () {
	  return this.graphManager.getAllNodes();
	};

	Layout.prototype.getAllEdges = function () {
	  return this.graphManager.getAllEdges();
	};

	Layout.prototype.getAllNodesToApplyGravitation = function () {
	  return this.graphManager.getAllNodesToApplyGravitation();
	};

	Layout.prototype.newGraphManager = function () {
	  var gm = new LGraphManager(this);
	  this.graphManager = gm;
	  return gm;
	};

	Layout.prototype.newGraph = function (vGraph) {
	  return new LGraph(null, this.graphManager, vGraph);
	};

	Layout.prototype.newNode = function (vNode) {
	  return new LNode(this.graphManager, vNode);
	};

	Layout.prototype.newEdge = function (vEdge) {
	  return new LEdge(null, null, vEdge);
	};

	Layout.prototype.checkLayoutSuccess = function () {
	  return this.graphManager.getRoot() == null || this.graphManager.getRoot().getNodes().length == 0 || this.graphManager.includesInvalidEdge();
	};

	Layout.prototype.runLayout = function () {
	  this.isLayoutFinished = false;

	  if (this.tilingPreLayout) {
	    this.tilingPreLayout();
	  }

	  this.initParameters();
	  var isLayoutSuccessfull;

	  if (this.checkLayoutSuccess()) {
	    isLayoutSuccessfull = false;
	  } else {
	    isLayoutSuccessfull = this.layout();
	  }

	  if (LayoutConstants.ANIMATE === 'during') {
	    // If this is a 'during' layout animation. Layout is not finished yet. 
	    // We need to perform these in index.js when layout is really finished.
	    return false;
	  }

	  if (isLayoutSuccessfull) {
	    if (!this.isSubLayout) {
	      this.doPostLayout();
	    }
	  }

	  if (this.tilingPostLayout) {
	    this.tilingPostLayout();
	  }

	  this.isLayoutFinished = true;

	  return isLayoutSuccessfull;
	};

	/**
	 * This method performs the operations required after layout.
	 */
	Layout.prototype.doPostLayout = function () {
	  //assert !isSubLayout : "Should not be called on sub-layout!";
	  // Propagate geometric changes to v-level objects
	  if (!this.incremental) {
	    this.transform();
	  }
	  this.update();
	};

	/**
	 * This method updates the geometry of the target graph according to
	 * calculated layout.
	 */
	Layout.prototype.update2 = function () {
	  // update bend points
	  if (this.createBendsAsNeeded) {
	    this.createBendpointsFromDummyNodes();

	    // reset all edges, since the topology has changed
	    this.graphManager.resetAllEdges();
	  }

	  // perform edge, node and root updates if layout is not called
	  // remotely
	  if (!this.isRemoteUse) {
	    // update all edges
	    var edge;
	    var allEdges = this.graphManager.getAllEdges();
	    for (var i = 0; i < allEdges.length; i++) {
	      edge = allEdges[i];
	      //      this.update(edge);
	    }

	    // recursively update nodes
	    var node;
	    var nodes = this.graphManager.getRoot().getNodes();
	    for (var i = 0; i < nodes.length; i++) {
	      node = nodes[i];
	      //      this.update(node);
	    }

	    // update root graph
	    this.update(this.graphManager.getRoot());
	  }
	};

	Layout.prototype.update = function (obj) {
	  if (obj == null) {
	    this.update2();
	  } else if (obj instanceof LNode) {
	    var node = obj;
	    if (node.getChild() != null) {
	      // since node is compound, recursively update child nodes
	      var nodes = node.getChild().getNodes();
	      for (var i = 0; i < nodes.length; i++) {
	        update(nodes[i]);
	      }
	    }

	    // if the l-level node is associated with a v-level graph object,
	    // then it is assumed that the v-level node implements the
	    // interface Updatable.
	    if (node.vGraphObject != null) {
	      // cast to Updatable without any type check
	      var vNode = node.vGraphObject;

	      // call the update method of the interface
	      vNode.update(node);
	    }
	  } else if (obj instanceof LEdge) {
	    var edge = obj;
	    // if the l-level edge is associated with a v-level graph object,
	    // then it is assumed that the v-level edge implements the
	    // interface Updatable.

	    if (edge.vGraphObject != null) {
	      // cast to Updatable without any type check
	      var vEdge = edge.vGraphObject;

	      // call the update method of the interface
	      vEdge.update(edge);
	    }
	  } else if (obj instanceof LGraph) {
	    var graph = obj;
	    // if the l-level graph is associated with a v-level graph object,
	    // then it is assumed that the v-level object implements the
	    // interface Updatable.

	    if (graph.vGraphObject != null) {
	      // cast to Updatable without any type check
	      var vGraph = graph.vGraphObject;

	      // call the update method of the interface
	      vGraph.update(graph);
	    }
	  }
	};

	/**
	 * This method is used to set all layout parameters to default values
	 * determined at compile time.
	 */
	Layout.prototype.initParameters = function () {
	  if (!this.isSubLayout) {
	    this.layoutQuality = LayoutConstants.QUALITY;
	    this.animationDuringLayout = LayoutConstants.DEFAULT_ANIMATION_DURING_LAYOUT;
	    this.animationPeriod = LayoutConstants.DEFAULT_ANIMATION_PERIOD;
	    this.animationOnLayout = LayoutConstants.DEFAULT_ANIMATION_ON_LAYOUT;
	    this.incremental = LayoutConstants.DEFAULT_INCREMENTAL;
	    this.createBendsAsNeeded = LayoutConstants.DEFAULT_CREATE_BENDS_AS_NEEDED;
	    this.uniformLeafNodeSizes = LayoutConstants.DEFAULT_UNIFORM_LEAF_NODE_SIZES;
	  }

	  if (this.animationDuringLayout) {
	    this.animationOnLayout = false;
	  }
	};

	Layout.prototype.transform = function (newLeftTop) {
	  if (newLeftTop == undefined) {
	    this.transform(new PointD(0, 0));
	  } else {
	    // create a transformation object (from Eclipse to layout). When an
	    // inverse transform is applied, we get upper-left coordinate of the
	    // drawing or the root graph at given input coordinate (some margins
	    // already included in calculation of left-top).

	    var trans = new Transform();
	    var leftTop = this.graphManager.getRoot().updateLeftTop();

	    if (leftTop != null) {
	      trans.setWorldOrgX(newLeftTop.x);
	      trans.setWorldOrgY(newLeftTop.y);

	      trans.setDeviceOrgX(leftTop.x);
	      trans.setDeviceOrgY(leftTop.y);

	      var nodes = this.getAllNodes();
	      var node;

	      for (var i = 0; i < nodes.length; i++) {
	        node = nodes[i];
	        node.transform(trans);
	      }
	    }
	  }
	};

	Layout.prototype.positionNodesRandomly = function (graph) {

	  if (graph == undefined) {
	    //assert !this.incremental;
	    this.positionNodesRandomly(this.getGraphManager().getRoot());
	    this.getGraphManager().getRoot().updateBounds(true);
	  } else {
	    var lNode;
	    var childGraph;

	    var nodes = graph.getNodes();
	    for (var i = 0; i < nodes.length; i++) {
	      lNode = nodes[i];
	      childGraph = lNode.getChild();

	      if (childGraph == null) {
	        lNode.scatter();
	      } else if (childGraph.getNodes().length == 0) {
	        lNode.scatter();
	      } else {
	        this.positionNodesRandomly(childGraph);
	        lNode.updateBounds();
	      }
	    }
	  }
	};

	/**
	 * This method returns a list of trees where each tree is represented as a
	 * list of l-nodes. The method returns a list of size 0 when:
	 * - The graph is not flat or
	 * - One of the component(s) of the graph is not a tree.
	 */
	Layout.prototype.getFlatForest = function () {
	  var flatForest = [];
	  var isForest = true;

	  // Quick reference for all nodes in the graph manager associated with
	  // this layout. The list should not be changed.
	  var allNodes = this.graphManager.getRoot().getNodes();

	  // First be sure that the graph is flat
	  var isFlat = true;

	  for (var i = 0; i < allNodes.length; i++) {
	    if (allNodes[i].getChild() != null) {
	      isFlat = false;
	    }
	  }

	  // Return empty forest if the graph is not flat.
	  if (!isFlat) {
	    return flatForest;
	  }

	  // Run BFS for each component of the graph.

	  var visited = new Set();
	  var toBeVisited = [];
	  var parents = new Map();
	  var unProcessedNodes = [];

	  unProcessedNodes = unProcessedNodes.concat(allNodes);

	  // Each iteration of this loop finds a component of the graph and
	  // decides whether it is a tree or not. If it is a tree, adds it to the
	  // forest and continued with the next component.

	  while (unProcessedNodes.length > 0 && isForest) {
	    toBeVisited.push(unProcessedNodes[0]);

	    // Start the BFS. Each iteration of this loop visits a node in a
	    // BFS manner.
	    while (toBeVisited.length > 0 && isForest) {
	      //pool operation
	      var currentNode = toBeVisited[0];
	      toBeVisited.splice(0, 1);
	      visited.add(currentNode);

	      // Traverse all neighbors of this node
	      var neighborEdges = currentNode.getEdges();

	      for (var i = 0; i < neighborEdges.length; i++) {
	        var currentNeighbor = neighborEdges[i].getOtherEnd(currentNode);

	        // If BFS is not growing from this neighbor.
	        if (parents.get(currentNode) != currentNeighbor) {
	          // We haven't previously visited this neighbor.
	          if (!visited.has(currentNeighbor)) {
	            toBeVisited.push(currentNeighbor);
	            parents.set(currentNeighbor, currentNode);
	          }
	          // Since we have previously visited this neighbor and
	          // this neighbor is not parent of currentNode, given
	          // graph contains a component that is not tree, hence
	          // it is not a forest.
	          else {
	              isForest = false;
	              break;
	            }
	        }
	      }
	    }

	    // The graph contains a component that is not a tree. Empty
	    // previously found trees. The method will end.
	    if (!isForest) {
	      flatForest = [];
	    }
	    // Save currently visited nodes as a tree in our forest. Reset
	    // visited and parents lists. Continue with the next component of
	    // the graph, if any.
	    else {
	        var temp = [].concat(_toConsumableArray(visited));
	        flatForest.push(temp);
	        //flatForest = flatForest.concat(temp);
	        //unProcessedNodes.removeAll(visited);
	        for (var i = 0; i < temp.length; i++) {
	          var value = temp[i];
	          var index = unProcessedNodes.indexOf(value);
	          if (index > -1) {
	            unProcessedNodes.splice(index, 1);
	          }
	        }
	        visited = new Set();
	        parents = new Map();
	      }
	  }

	  return flatForest;
	};

	/**
	 * This method creates dummy nodes (an l-level node with minimal dimensions)
	 * for the given edge (one per bendpoint). The existing l-level structure
	 * is updated accordingly.
	 */
	Layout.prototype.createDummyNodesForBendpoints = function (edge) {
	  var dummyNodes = [];
	  var prev = edge.source;

	  var graph = this.graphManager.calcLowestCommonAncestor(edge.source, edge.target);

	  for (var i = 0; i < edge.bendpoints.length; i++) {
	    // create new dummy node
	    var dummyNode = this.newNode(null);
	    dummyNode.setRect(new Point(0, 0), new Dimension(1, 1));

	    graph.add(dummyNode);

	    // create new dummy edge between prev and dummy node
	    var dummyEdge = this.newEdge(null);
	    this.graphManager.add(dummyEdge, prev, dummyNode);

	    dummyNodes.add(dummyNode);
	    prev = dummyNode;
	  }

	  var dummyEdge = this.newEdge(null);
	  this.graphManager.add(dummyEdge, prev, edge.target);

	  this.edgeToDummyNodes.set(edge, dummyNodes);

	  // remove real edge from graph manager if it is inter-graph
	  if (edge.isInterGraph()) {
	    this.graphManager.remove(edge);
	  }
	  // else, remove the edge from the current graph
	  else {
	      graph.remove(edge);
	    }

	  return dummyNodes;
	};

	/**
	 * This method creates bendpoints for edges from the dummy nodes
	 * at l-level.
	 */
	Layout.prototype.createBendpointsFromDummyNodes = function () {
	  var edges = [];
	  edges = edges.concat(this.graphManager.getAllEdges());
	  edges = [].concat(_toConsumableArray(this.edgeToDummyNodes.keys())).concat(edges);

	  for (var k = 0; k < edges.length; k++) {
	    var lEdge = edges[k];

	    if (lEdge.bendpoints.length > 0) {
	      var path = this.edgeToDummyNodes.get(lEdge);

	      for (var i = 0; i < path.length; i++) {
	        var dummyNode = path[i];
	        var p = new PointD(dummyNode.getCenterX(), dummyNode.getCenterY());

	        // update bendpoint's location according to dummy node
	        var ebp = lEdge.bendpoints.get(i);
	        ebp.x = p.x;
	        ebp.y = p.y;

	        // remove the dummy node, dummy edges incident with this
	        // dummy node is also removed (within the remove method)
	        dummyNode.getOwner().remove(dummyNode);
	      }

	      // add the real edge to graph
	      this.graphManager.add(lEdge, lEdge.source, lEdge.target);
	    }
	  }
	};

	Layout.transform = function (sliderValue, defaultValue, minDiv, maxMul) {
	  if (minDiv != undefined && maxMul != undefined) {
	    var value = defaultValue;

	    if (sliderValue <= 50) {
	      var minValue = defaultValue / minDiv;
	      value -= (defaultValue - minValue) / 50 * (50 - sliderValue);
	    } else {
	      var maxValue = defaultValue * maxMul;
	      value += (maxValue - defaultValue) / 50 * (sliderValue - 50);
	    }

	    return value;
	  } else {
	    var a, b;

	    if (sliderValue <= 50) {
	      a = 9.0 * defaultValue / 500.0;
	      b = defaultValue / 10.0;
	    } else {
	      a = 9.0 * defaultValue / 50.0;
	      b = -8 * defaultValue;
	    }

	    return a * sliderValue + b;
	  }
	};

	/**
	 * This method finds and returns the center of the given nodes, assuming
	 * that the given nodes form a tree in themselves.
	 */
	Layout.findCenterOfTree = function (nodes) {
	  var list = [];
	  list = list.concat(nodes);

	  var removedNodes = [];
	  var remainingDegrees = new Map();
	  var foundCenter = false;
	  var centerNode = null;

	  if (list.length == 1 || list.length == 2) {
	    foundCenter = true;
	    centerNode = list[0];
	  }

	  for (var i = 0; i < list.length; i++) {
	    var node = list[i];
	    var degree = node.getNeighborsList().size;
	    remainingDegrees.set(node, node.getNeighborsList().size);

	    if (degree == 1) {
	      removedNodes.push(node);
	    }
	  }

	  var tempList = [];
	  tempList = tempList.concat(removedNodes);

	  while (!foundCenter) {
	    var tempList2 = [];
	    tempList2 = tempList2.concat(tempList);
	    tempList = [];

	    for (var i = 0; i < list.length; i++) {
	      var node = list[i];

	      var index = list.indexOf(node);
	      if (index >= 0) {
	        list.splice(index, 1);
	      }

	      var neighbours = node.getNeighborsList();

	      neighbours.forEach(function (neighbour) {
	        if (removedNodes.indexOf(neighbour) < 0) {
	          var otherDegree = remainingDegrees.get(neighbour);
	          var newDegree = otherDegree - 1;

	          if (newDegree == 1) {
	            tempList.push(neighbour);
	          }

	          remainingDegrees.set(neighbour, newDegree);
	        }
	      });
	    }

	    removedNodes = removedNodes.concat(tempList);

	    if (list.length == 1 || list.length == 2) {
	      foundCenter = true;
	      centerNode = list[0];
	    }
	  }

	  return centerNode;
	};

	/**
	 * During the coarsening process, this layout may be referenced by two graph managers
	 * this setter function grants access to change the currently being used graph manager
	 */
	Layout.prototype.setGraphManager = function (gm) {
	  this.graphManager = gm;
	};

	module.exports = Layout;

	/***/ }),
	/* 16 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	function RandomSeed() {}
	// adapted from: https://stackoverflow.com/a/19303725
	RandomSeed.seed = 1;
	RandomSeed.x = 0;

	RandomSeed.nextDouble = function () {
	  RandomSeed.x = Math.sin(RandomSeed.seed++) * 10000;
	  return RandomSeed.x - Math.floor(RandomSeed.x);
	};

	module.exports = RandomSeed;

	/***/ }),
	/* 17 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	var PointD = __webpack_require__(4);

	function Transform(x, y) {
	  this.lworldOrgX = 0.0;
	  this.lworldOrgY = 0.0;
	  this.ldeviceOrgX = 0.0;
	  this.ldeviceOrgY = 0.0;
	  this.lworldExtX = 1.0;
	  this.lworldExtY = 1.0;
	  this.ldeviceExtX = 1.0;
	  this.ldeviceExtY = 1.0;
	}

	Transform.prototype.getWorldOrgX = function () {
	  return this.lworldOrgX;
	};

	Transform.prototype.setWorldOrgX = function (wox) {
	  this.lworldOrgX = wox;
	};

	Transform.prototype.getWorldOrgY = function () {
	  return this.lworldOrgY;
	};

	Transform.prototype.setWorldOrgY = function (woy) {
	  this.lworldOrgY = woy;
	};

	Transform.prototype.getWorldExtX = function () {
	  return this.lworldExtX;
	};

	Transform.prototype.setWorldExtX = function (wex) {
	  this.lworldExtX = wex;
	};

	Transform.prototype.getWorldExtY = function () {
	  return this.lworldExtY;
	};

	Transform.prototype.setWorldExtY = function (wey) {
	  this.lworldExtY = wey;
	};

	/* Device related */

	Transform.prototype.getDeviceOrgX = function () {
	  return this.ldeviceOrgX;
	};

	Transform.prototype.setDeviceOrgX = function (dox) {
	  this.ldeviceOrgX = dox;
	};

	Transform.prototype.getDeviceOrgY = function () {
	  return this.ldeviceOrgY;
	};

	Transform.prototype.setDeviceOrgY = function (doy) {
	  this.ldeviceOrgY = doy;
	};

	Transform.prototype.getDeviceExtX = function () {
	  return this.ldeviceExtX;
	};

	Transform.prototype.setDeviceExtX = function (dex) {
	  this.ldeviceExtX = dex;
	};

	Transform.prototype.getDeviceExtY = function () {
	  return this.ldeviceExtY;
	};

	Transform.prototype.setDeviceExtY = function (dey) {
	  this.ldeviceExtY = dey;
	};

	Transform.prototype.transformX = function (x) {
	  var xDevice = 0.0;
	  var worldExtX = this.lworldExtX;
	  if (worldExtX != 0.0) {
	    xDevice = this.ldeviceOrgX + (x - this.lworldOrgX) * this.ldeviceExtX / worldExtX;
	  }

	  return xDevice;
	};

	Transform.prototype.transformY = function (y) {
	  var yDevice = 0.0;
	  var worldExtY = this.lworldExtY;
	  if (worldExtY != 0.0) {
	    yDevice = this.ldeviceOrgY + (y - this.lworldOrgY) * this.ldeviceExtY / worldExtY;
	  }

	  return yDevice;
	};

	Transform.prototype.inverseTransformX = function (x) {
	  var xWorld = 0.0;
	  var deviceExtX = this.ldeviceExtX;
	  if (deviceExtX != 0.0) {
	    xWorld = this.lworldOrgX + (x - this.ldeviceOrgX) * this.lworldExtX / deviceExtX;
	  }

	  return xWorld;
	};

	Transform.prototype.inverseTransformY = function (y) {
	  var yWorld = 0.0;
	  var deviceExtY = this.ldeviceExtY;
	  if (deviceExtY != 0.0) {
	    yWorld = this.lworldOrgY + (y - this.ldeviceOrgY) * this.lworldExtY / deviceExtY;
	  }
	  return yWorld;
	};

	Transform.prototype.inverseTransformPoint = function (inPoint) {
	  var outPoint = new PointD(this.inverseTransformX(inPoint.x), this.inverseTransformY(inPoint.y));
	  return outPoint;
	};

	module.exports = Transform;

	/***/ }),
	/* 18 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

	var Layout = __webpack_require__(15);
	var FDLayoutConstants = __webpack_require__(7);
	var LayoutConstants = __webpack_require__(0);
	var IGeometry = __webpack_require__(8);
	var IMath = __webpack_require__(9);

	function FDLayout() {
	  Layout.call(this);

	  this.useSmartIdealEdgeLengthCalculation = FDLayoutConstants.DEFAULT_USE_SMART_IDEAL_EDGE_LENGTH_CALCULATION;
	  this.idealEdgeLength = FDLayoutConstants.DEFAULT_EDGE_LENGTH;
	  this.springConstant = FDLayoutConstants.DEFAULT_SPRING_STRENGTH;
	  this.repulsionConstant = FDLayoutConstants.DEFAULT_REPULSION_STRENGTH;
	  this.gravityConstant = FDLayoutConstants.DEFAULT_GRAVITY_STRENGTH;
	  this.compoundGravityConstant = FDLayoutConstants.DEFAULT_COMPOUND_GRAVITY_STRENGTH;
	  this.gravityRangeFactor = FDLayoutConstants.DEFAULT_GRAVITY_RANGE_FACTOR;
	  this.compoundGravityRangeFactor = FDLayoutConstants.DEFAULT_COMPOUND_GRAVITY_RANGE_FACTOR;
	  this.displacementThresholdPerNode = 3.0 * FDLayoutConstants.DEFAULT_EDGE_LENGTH / 100;
	  this.coolingFactor = FDLayoutConstants.DEFAULT_COOLING_FACTOR_INCREMENTAL;
	  this.initialCoolingFactor = FDLayoutConstants.DEFAULT_COOLING_FACTOR_INCREMENTAL;
	  this.totalDisplacement = 0.0;
	  this.oldTotalDisplacement = 0.0;
	  this.maxIterations = FDLayoutConstants.MAX_ITERATIONS;
	}

	FDLayout.prototype = Object.create(Layout.prototype);

	for (var prop in Layout) {
	  FDLayout[prop] = Layout[prop];
	}

	FDLayout.prototype.initParameters = function () {
	  Layout.prototype.initParameters.call(this, arguments);

	  this.totalIterations = 0;
	  this.notAnimatedIterations = 0;

	  this.useFRGridVariant = FDLayoutConstants.DEFAULT_USE_SMART_REPULSION_RANGE_CALCULATION;

	  this.grid = [];
	};

	FDLayout.prototype.calcIdealEdgeLengths = function () {
	  var edge;
	  var lcaDepth;
	  var source;
	  var target;
	  var sizeOfSourceInLca;
	  var sizeOfTargetInLca;

	  var allEdges = this.getGraphManager().getAllEdges();
	  for (var i = 0; i < allEdges.length; i++) {
	    edge = allEdges[i];

	    edge.idealLength = this.idealEdgeLength;

	    if (edge.isInterGraph) {
	      source = edge.getSource();
	      target = edge.getTarget();

	      sizeOfSourceInLca = edge.getSourceInLca().getEstimatedSize();
	      sizeOfTargetInLca = edge.getTargetInLca().getEstimatedSize();

	      if (this.useSmartIdealEdgeLengthCalculation) {
	        edge.idealLength += sizeOfSourceInLca + sizeOfTargetInLca - 2 * LayoutConstants.SIMPLE_NODE_SIZE;
	      }

	      lcaDepth = edge.getLca().getInclusionTreeDepth();

	      edge.idealLength += FDLayoutConstants.DEFAULT_EDGE_LENGTH * FDLayoutConstants.PER_LEVEL_IDEAL_EDGE_LENGTH_FACTOR * (source.getInclusionTreeDepth() + target.getInclusionTreeDepth() - 2 * lcaDepth);
	    }
	  }
	};

	FDLayout.prototype.initSpringEmbedder = function () {

	  var s = this.getAllNodes().length;
	  if (this.incremental) {
	    if (s > FDLayoutConstants.ADAPTATION_LOWER_NODE_LIMIT) {
	      this.coolingFactor = Math.max(this.coolingFactor * FDLayoutConstants.COOLING_ADAPTATION_FACTOR, this.coolingFactor - (s - FDLayoutConstants.ADAPTATION_LOWER_NODE_LIMIT) / (FDLayoutConstants.ADAPTATION_UPPER_NODE_LIMIT - FDLayoutConstants.ADAPTATION_LOWER_NODE_LIMIT) * this.coolingFactor * (1 - FDLayoutConstants.COOLING_ADAPTATION_FACTOR));
	    }
	    this.maxNodeDisplacement = FDLayoutConstants.MAX_NODE_DISPLACEMENT_INCREMENTAL;
	  } else {
	    if (s > FDLayoutConstants.ADAPTATION_LOWER_NODE_LIMIT) {
	      this.coolingFactor = Math.max(FDLayoutConstants.COOLING_ADAPTATION_FACTOR, 1.0 - (s - FDLayoutConstants.ADAPTATION_LOWER_NODE_LIMIT) / (FDLayoutConstants.ADAPTATION_UPPER_NODE_LIMIT - FDLayoutConstants.ADAPTATION_LOWER_NODE_LIMIT) * (1 - FDLayoutConstants.COOLING_ADAPTATION_FACTOR));
	    } else {
	      this.coolingFactor = 1.0;
	    }
	    this.initialCoolingFactor = this.coolingFactor;
	    this.maxNodeDisplacement = FDLayoutConstants.MAX_NODE_DISPLACEMENT;
	  }

	  this.maxIterations = Math.max(this.getAllNodes().length * 5, this.maxIterations);

	  this.totalDisplacementThreshold = this.displacementThresholdPerNode * this.getAllNodes().length;

	  this.repulsionRange = this.calcRepulsionRange();
	};

	FDLayout.prototype.calcSpringForces = function () {
	  var lEdges = this.getAllEdges();
	  var edge;

	  for (var i = 0; i < lEdges.length; i++) {
	    edge = lEdges[i];

	    this.calcSpringForce(edge, edge.idealLength);
	  }
	};

	FDLayout.prototype.calcRepulsionForces = function () {
	  var gridUpdateAllowed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
	  var forceToNodeSurroundingUpdate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

	  var i, j;
	  var nodeA, nodeB;
	  var lNodes = this.getAllNodes();
	  var processedNodeSet;

	  if (this.useFRGridVariant) {
	    if (this.totalIterations % FDLayoutConstants.GRID_CALCULATION_CHECK_PERIOD == 1 && gridUpdateAllowed) {
	      this.updateGrid();
	    }

	    processedNodeSet = new Set();

	    // calculate repulsion forces between each nodes and its surrounding
	    for (i = 0; i < lNodes.length; i++) {
	      nodeA = lNodes[i];
	      this.calculateRepulsionForceOfANode(nodeA, processedNodeSet, gridUpdateAllowed, forceToNodeSurroundingUpdate);
	      processedNodeSet.add(nodeA);
	    }
	  } else {
	    for (i = 0; i < lNodes.length; i++) {
	      nodeA = lNodes[i];

	      for (j = i + 1; j < lNodes.length; j++) {
	        nodeB = lNodes[j];

	        // If both nodes are not members of the same graph, skip.
	        if (nodeA.getOwner() != nodeB.getOwner()) {
	          continue;
	        }

	        this.calcRepulsionForce(nodeA, nodeB);
	      }
	    }
	  }
	};

	FDLayout.prototype.calcGravitationalForces = function () {
	  var node;
	  var lNodes = this.getAllNodesToApplyGravitation();

	  for (var i = 0; i < lNodes.length; i++) {
	    node = lNodes[i];
	    this.calcGravitationalForce(node);
	  }
	};

	FDLayout.prototype.moveNodes = function () {
	  var lNodes = this.getAllNodes();
	  var node;

	  for (var i = 0; i < lNodes.length; i++) {
	    node = lNodes[i];
	    node.move();
	  }
	};

	FDLayout.prototype.calcSpringForce = function (edge, idealLength) {
	  var sourceNode = edge.getSource();
	  var targetNode = edge.getTarget();

	  var length;
	  var springForce;
	  var springForceX;
	  var springForceY;

	  // Update edge length
	  if (this.uniformLeafNodeSizes && sourceNode.getChild() == null && targetNode.getChild() == null) {
	    edge.updateLengthSimple();
	  } else {
	    edge.updateLength();

	    if (edge.isOverlapingSourceAndTarget) {
	      return;
	    }
	  }

	  length = edge.getLength();

	  if (length == 0) return;

	  // Calculate spring forces
	  springForce = this.springConstant * (length - idealLength);

	  // Project force onto x and y axes
	  springForceX = springForce * (edge.lengthX / length);
	  springForceY = springForce * (edge.lengthY / length);

	  // Apply forces on the end nodes
	  sourceNode.springForceX += springForceX;
	  sourceNode.springForceY += springForceY;
	  targetNode.springForceX -= springForceX;
	  targetNode.springForceY -= springForceY;
	};

	FDLayout.prototype.calcRepulsionForce = function (nodeA, nodeB) {
	  var rectA = nodeA.getRect();
	  var rectB = nodeB.getRect();
	  var overlapAmount = new Array(2);
	  var clipPoints = new Array(4);
	  var distanceX;
	  var distanceY;
	  var distanceSquared;
	  var distance;
	  var repulsionForce;
	  var repulsionForceX;
	  var repulsionForceY;

	  if (rectA.intersects(rectB)) // two nodes overlap
	    {
	      // calculate separation amount in x and y directions
	      IGeometry.calcSeparationAmount(rectA, rectB, overlapAmount, FDLayoutConstants.DEFAULT_EDGE_LENGTH / 2.0);

	      repulsionForceX = 2 * overlapAmount[0];
	      repulsionForceY = 2 * overlapAmount[1];

	      var childrenConstant = nodeA.noOfChildren * nodeB.noOfChildren / (nodeA.noOfChildren + nodeB.noOfChildren);

	      // Apply forces on the two nodes
	      nodeA.repulsionForceX -= childrenConstant * repulsionForceX;
	      nodeA.repulsionForceY -= childrenConstant * repulsionForceY;
	      nodeB.repulsionForceX += childrenConstant * repulsionForceX;
	      nodeB.repulsionForceY += childrenConstant * repulsionForceY;
	    } else // no overlap
	    {
	      // calculate distance

	      if (this.uniformLeafNodeSizes && nodeA.getChild() == null && nodeB.getChild() == null) // simply base repulsion on distance of node centers
	        {
	          distanceX = rectB.getCenterX() - rectA.getCenterX();
	          distanceY = rectB.getCenterY() - rectA.getCenterY();
	        } else // use clipping points
	        {
	          IGeometry.getIntersection(rectA, rectB, clipPoints);

	          distanceX = clipPoints[2] - clipPoints[0];
	          distanceY = clipPoints[3] - clipPoints[1];
	        }

	      // No repulsion range. FR grid variant should take care of this.
	      if (Math.abs(distanceX) < FDLayoutConstants.MIN_REPULSION_DIST) {
	        distanceX = IMath.sign(distanceX) * FDLayoutConstants.MIN_REPULSION_DIST;
	      }

	      if (Math.abs(distanceY) < FDLayoutConstants.MIN_REPULSION_DIST) {
	        distanceY = IMath.sign(distanceY) * FDLayoutConstants.MIN_REPULSION_DIST;
	      }

	      distanceSquared = distanceX * distanceX + distanceY * distanceY;
	      distance = Math.sqrt(distanceSquared);

	      repulsionForce = this.repulsionConstant * nodeA.noOfChildren * nodeB.noOfChildren / distanceSquared;

	      // Project force onto x and y axes
	      repulsionForceX = repulsionForce * distanceX / distance;
	      repulsionForceY = repulsionForce * distanceY / distance;

	      // Apply forces on the two nodes    
	      nodeA.repulsionForceX -= repulsionForceX;
	      nodeA.repulsionForceY -= repulsionForceY;
	      nodeB.repulsionForceX += repulsionForceX;
	      nodeB.repulsionForceY += repulsionForceY;
	    }
	};

	FDLayout.prototype.calcGravitationalForce = function (node) {
	  var ownerGraph;
	  var ownerCenterX;
	  var ownerCenterY;
	  var distanceX;
	  var distanceY;
	  var absDistanceX;
	  var absDistanceY;
	  var estimatedSize;
	  ownerGraph = node.getOwner();

	  ownerCenterX = (ownerGraph.getRight() + ownerGraph.getLeft()) / 2;
	  ownerCenterY = (ownerGraph.getTop() + ownerGraph.getBottom()) / 2;
	  distanceX = node.getCenterX() - ownerCenterX;
	  distanceY = node.getCenterY() - ownerCenterY;
	  absDistanceX = Math.abs(distanceX) + node.getWidth() / 2;
	  absDistanceY = Math.abs(distanceY) + node.getHeight() / 2;

	  if (node.getOwner() == this.graphManager.getRoot()) // in the root graph
	    {
	      estimatedSize = ownerGraph.getEstimatedSize() * this.gravityRangeFactor;

	      if (absDistanceX > estimatedSize || absDistanceY > estimatedSize) {
	        node.gravitationForceX = -this.gravityConstant * distanceX;
	        node.gravitationForceY = -this.gravityConstant * distanceY;
	      }
	    } else // inside a compound
	    {
	      estimatedSize = ownerGraph.getEstimatedSize() * this.compoundGravityRangeFactor;

	      if (absDistanceX > estimatedSize || absDistanceY > estimatedSize) {
	        node.gravitationForceX = -this.gravityConstant * distanceX * this.compoundGravityConstant;
	        node.gravitationForceY = -this.gravityConstant * distanceY * this.compoundGravityConstant;
	      }
	    }
	};

	FDLayout.prototype.isConverged = function () {
	  var converged;
	  var oscilating = false;

	  if (this.totalIterations > this.maxIterations / 3) {
	    oscilating = Math.abs(this.totalDisplacement - this.oldTotalDisplacement) < 2;
	  }

	  converged = this.totalDisplacement < this.totalDisplacementThreshold;

	  this.oldTotalDisplacement = this.totalDisplacement;

	  return converged || oscilating;
	};

	FDLayout.prototype.animate = function () {
	  if (this.animationDuringLayout && !this.isSubLayout) {
	    if (this.notAnimatedIterations == this.animationPeriod) {
	      this.update();
	      this.notAnimatedIterations = 0;
	    } else {
	      this.notAnimatedIterations++;
	    }
	  }
	};

	//This method calculates the number of children (weight) for all nodes
	FDLayout.prototype.calcNoOfChildrenForAllNodes = function () {
	  var node;
	  var allNodes = this.graphManager.getAllNodes();

	  for (var i = 0; i < allNodes.length; i++) {
	    node = allNodes[i];
	    node.noOfChildren = node.getNoOfChildren();
	  }
	};

	// -----------------------------------------------------------------------------
	// Section: FR-Grid Variant Repulsion Force Calculation
	// -----------------------------------------------------------------------------

	FDLayout.prototype.calcGrid = function (graph) {

	  var sizeX = 0;
	  var sizeY = 0;

	  sizeX = parseInt(Math.ceil((graph.getRight() - graph.getLeft()) / this.repulsionRange));
	  sizeY = parseInt(Math.ceil((graph.getBottom() - graph.getTop()) / this.repulsionRange));

	  var grid = new Array(sizeX);

	  for (var i = 0; i < sizeX; i++) {
	    grid[i] = new Array(sizeY);
	  }

	  for (var i = 0; i < sizeX; i++) {
	    for (var j = 0; j < sizeY; j++) {
	      grid[i][j] = new Array();
	    }
	  }

	  return grid;
	};

	FDLayout.prototype.addNodeToGrid = function (v, left, top) {

	  var startX = 0;
	  var finishX = 0;
	  var startY = 0;
	  var finishY = 0;

	  startX = parseInt(Math.floor((v.getRect().x - left) / this.repulsionRange));
	  finishX = parseInt(Math.floor((v.getRect().width + v.getRect().x - left) / this.repulsionRange));
	  startY = parseInt(Math.floor((v.getRect().y - top) / this.repulsionRange));
	  finishY = parseInt(Math.floor((v.getRect().height + v.getRect().y - top) / this.repulsionRange));

	  for (var i = startX; i <= finishX; i++) {
	    for (var j = startY; j <= finishY; j++) {
	      this.grid[i][j].push(v);
	      v.setGridCoordinates(startX, finishX, startY, finishY);
	    }
	  }
	};

	FDLayout.prototype.updateGrid = function () {
	  var i;
	  var nodeA;
	  var lNodes = this.getAllNodes();

	  this.grid = this.calcGrid(this.graphManager.getRoot());

	  // put all nodes to proper grid cells
	  for (i = 0; i < lNodes.length; i++) {
	    nodeA = lNodes[i];
	    this.addNodeToGrid(nodeA, this.graphManager.getRoot().getLeft(), this.graphManager.getRoot().getTop());
	  }
	};

	FDLayout.prototype.calculateRepulsionForceOfANode = function (nodeA, processedNodeSet, gridUpdateAllowed, forceToNodeSurroundingUpdate) {

	  if (this.totalIterations % FDLayoutConstants.GRID_CALCULATION_CHECK_PERIOD == 1 && gridUpdateAllowed || forceToNodeSurroundingUpdate) {
	    var surrounding = new Set();
	    nodeA.surrounding = new Array();
	    var nodeB;
	    var grid = this.grid;

	    for (var i = nodeA.startX - 1; i < nodeA.finishX + 2; i++) {
	      for (var j = nodeA.startY - 1; j < nodeA.finishY + 2; j++) {
	        if (!(i < 0 || j < 0 || i >= grid.length || j >= grid[0].length)) {
	          for (var k = 0; k < grid[i][j].length; k++) {
	            nodeB = grid[i][j][k];

	            // If both nodes are not members of the same graph, 
	            // or both nodes are the same, skip.
	            if (nodeA.getOwner() != nodeB.getOwner() || nodeA == nodeB) {
	              continue;
	            }

	            // check if the repulsion force between
	            // nodeA and nodeB has already been calculated
	            if (!processedNodeSet.has(nodeB) && !surrounding.has(nodeB)) {
	              var distanceX = Math.abs(nodeA.getCenterX() - nodeB.getCenterX()) - (nodeA.getWidth() / 2 + nodeB.getWidth() / 2);
	              var distanceY = Math.abs(nodeA.getCenterY() - nodeB.getCenterY()) - (nodeA.getHeight() / 2 + nodeB.getHeight() / 2);

	              // if the distance between nodeA and nodeB 
	              // is less then calculation range
	              if (distanceX <= this.repulsionRange && distanceY <= this.repulsionRange) {
	                //then add nodeB to surrounding of nodeA
	                surrounding.add(nodeB);
	              }
	            }
	          }
	        }
	      }
	    }

	    nodeA.surrounding = [].concat(_toConsumableArray(surrounding));
	  }
	  for (i = 0; i < nodeA.surrounding.length; i++) {
	    this.calcRepulsionForce(nodeA, nodeA.surrounding[i]);
	  }
	};

	FDLayout.prototype.calcRepulsionRange = function () {
	  return 0.0;
	};

	module.exports = FDLayout;

	/***/ }),
	/* 19 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	var LEdge = __webpack_require__(1);
	var FDLayoutConstants = __webpack_require__(7);

	function FDLayoutEdge(source, target, vEdge) {
	  LEdge.call(this, source, target, vEdge);
	  this.idealLength = FDLayoutConstants.DEFAULT_EDGE_LENGTH;
	}

	FDLayoutEdge.prototype = Object.create(LEdge.prototype);

	for (var prop in LEdge) {
	  FDLayoutEdge[prop] = LEdge[prop];
	}

	module.exports = FDLayoutEdge;

	/***/ }),
	/* 20 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	var LNode = __webpack_require__(3);

	function FDLayoutNode(gm, loc, size, vNode) {
	  // alternative constructor is handled inside LNode
	  LNode.call(this, gm, loc, size, vNode);
	  //Spring, repulsion and gravitational forces acting on this node
	  this.springForceX = 0;
	  this.springForceY = 0;
	  this.repulsionForceX = 0;
	  this.repulsionForceY = 0;
	  this.gravitationForceX = 0;
	  this.gravitationForceY = 0;
	  //Amount by which this node is to be moved in this iteration
	  this.displacementX = 0;
	  this.displacementY = 0;

	  //Start and finish grid coordinates that this node is fallen into
	  this.startX = 0;
	  this.finishX = 0;
	  this.startY = 0;
	  this.finishY = 0;

	  //Geometric neighbors of this node
	  this.surrounding = [];
	}

	FDLayoutNode.prototype = Object.create(LNode.prototype);

	for (var prop in LNode) {
	  FDLayoutNode[prop] = LNode[prop];
	}

	FDLayoutNode.prototype.setGridCoordinates = function (_startX, _finishX, _startY, _finishY) {
	  this.startX = _startX;
	  this.finishX = _finishX;
	  this.startY = _startY;
	  this.finishY = _finishY;
	};

	module.exports = FDLayoutNode;

	/***/ }),
	/* 21 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	function DimensionD(width, height) {
	  this.width = 0;
	  this.height = 0;
	  if (width !== null && height !== null) {
	    this.height = height;
	    this.width = width;
	  }
	}

	DimensionD.prototype.getWidth = function () {
	  return this.width;
	};

	DimensionD.prototype.setWidth = function (width) {
	  this.width = width;
	};

	DimensionD.prototype.getHeight = function () {
	  return this.height;
	};

	DimensionD.prototype.setHeight = function (height) {
	  this.height = height;
	};

	module.exports = DimensionD;

	/***/ }),
	/* 22 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	var UniqueIDGeneretor = __webpack_require__(14);

	function HashMap() {
	  this.map = {};
	  this.keys = [];
	}

	HashMap.prototype.put = function (key, value) {
	  var theId = UniqueIDGeneretor.createID(key);
	  if (!this.contains(theId)) {
	    this.map[theId] = value;
	    this.keys.push(key);
	  }
	};

	HashMap.prototype.contains = function (key) {
	  var theId = UniqueIDGeneretor.createID(key);
	  return this.map[key] != null;
	};

	HashMap.prototype.get = function (key) {
	  var theId = UniqueIDGeneretor.createID(key);
	  return this.map[theId];
	};

	HashMap.prototype.keySet = function () {
	  return this.keys;
	};

	module.exports = HashMap;

	/***/ }),
	/* 23 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	var UniqueIDGeneretor = __webpack_require__(14);

	function HashSet() {
	  this.set = {};
	}
	;

	HashSet.prototype.add = function (obj) {
	  var theId = UniqueIDGeneretor.createID(obj);
	  if (!this.contains(theId)) this.set[theId] = obj;
	};

	HashSet.prototype.remove = function (obj) {
	  delete this.set[UniqueIDGeneretor.createID(obj)];
	};

	HashSet.prototype.clear = function () {
	  this.set = {};
	};

	HashSet.prototype.contains = function (obj) {
	  return this.set[UniqueIDGeneretor.createID(obj)] == obj;
	};

	HashSet.prototype.isEmpty = function () {
	  return this.size() === 0;
	};

	HashSet.prototype.size = function () {
	  return Object.keys(this.set).length;
	};

	//concats this.set to the given list
	HashSet.prototype.addAllTo = function (list) {
	  var keys = Object.keys(this.set);
	  var length = keys.length;
	  for (var i = 0; i < length; i++) {
	    list.push(this.set[keys[i]]);
	  }
	};

	HashSet.prototype.size = function () {
	  return Object.keys(this.set).length;
	};

	HashSet.prototype.addAll = function (list) {
	  var s = list.length;
	  for (var i = 0; i < s; i++) {
	    var v = list[i];
	    this.add(v);
	  }
	};

	module.exports = HashSet;

	/***/ }),
	/* 24 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	/**
	 * A classic Quicksort algorithm with Hoare's partition
	 * - Works also on LinkedList objects
	 *
	 * Copyright: i-Vis Research Group, Bilkent University, 2007 - present
	 */

	var LinkedList = __webpack_require__(11);

	var Quicksort = function () {
	    function Quicksort(A, compareFunction) {
	        _classCallCheck(this, Quicksort);

	        if (compareFunction !== null || compareFunction !== undefined) this.compareFunction = this._defaultCompareFunction;

	        var length = void 0;
	        if (A instanceof LinkedList) length = A.size();else length = A.length;

	        this._quicksort(A, 0, length - 1);
	    }

	    _createClass(Quicksort, [{
	        key: '_quicksort',
	        value: function _quicksort(A, p, r) {
	            if (p < r) {
	                var q = this._partition(A, p, r);
	                this._quicksort(A, p, q);
	                this._quicksort(A, q + 1, r);
	            }
	        }
	    }, {
	        key: '_partition',
	        value: function _partition(A, p, r) {
	            var x = this._get(A, p);
	            var i = p;
	            var j = r;
	            while (true) {
	                while (this.compareFunction(x, this._get(A, j))) {
	                    j--;
	                }while (this.compareFunction(this._get(A, i), x)) {
	                    i++;
	                }if (i < j) {
	                    this._swap(A, i, j);
	                    i++;
	                    j--;
	                } else return j;
	            }
	        }
	    }, {
	        key: '_get',
	        value: function _get(object, index) {
	            if (object instanceof LinkedList) return object.get_object_at(index);else return object[index];
	        }
	    }, {
	        key: '_set',
	        value: function _set(object, index, value) {
	            if (object instanceof LinkedList) object.set_object_at(index, value);else object[index] = value;
	        }
	    }, {
	        key: '_swap',
	        value: function _swap(A, i, j) {
	            var temp = this._get(A, i);
	            this._set(A, i, this._get(A, j));
	            this._set(A, j, temp);
	        }
	    }, {
	        key: '_defaultCompareFunction',
	        value: function _defaultCompareFunction(a, b) {
	            return b > a;
	        }
	    }]);

	    return Quicksort;
	}();

	module.exports = Quicksort;

	/***/ }),
	/* 25 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	/**
	 *   Needleman-Wunsch algorithm is an procedure to compute the optimal global alignment of two string
	 *   sequences by S.B.Needleman and C.D.Wunsch (1970).
	 *
	 *   Aside from the inputs, you can assign the scores for,
	 *   - Match: The two characters at the current index are same.
	 *   - Mismatch: The two characters at the current index are different.
	 *   - Insertion/Deletion(gaps): The best alignment involves one letter aligning to a gap in the other string.
	 */

	var NeedlemanWunsch = function () {
	    function NeedlemanWunsch(sequence1, sequence2) {
	        var match_score = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
	        var mismatch_penalty = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : -1;
	        var gap_penalty = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : -1;

	        _classCallCheck(this, NeedlemanWunsch);

	        this.sequence1 = sequence1;
	        this.sequence2 = sequence2;
	        this.match_score = match_score;
	        this.mismatch_penalty = mismatch_penalty;
	        this.gap_penalty = gap_penalty;

	        // Just the remove redundancy
	        this.iMax = sequence1.length + 1;
	        this.jMax = sequence2.length + 1;

	        // Grid matrix of scores
	        this.grid = new Array(this.iMax);
	        for (var i = 0; i < this.iMax; i++) {
	            this.grid[i] = new Array(this.jMax);

	            for (var j = 0; j < this.jMax; j++) {
	                this.grid[i][j] = 0;
	            }
	        }

	        // Traceback matrix (2D array, each cell is an array of boolean values for [`Diag`, `Up`, `Left`] positions)
	        this.tracebackGrid = new Array(this.iMax);
	        for (var _i = 0; _i < this.iMax; _i++) {
	            this.tracebackGrid[_i] = new Array(this.jMax);

	            for (var _j = 0; _j < this.jMax; _j++) {
	                this.tracebackGrid[_i][_j] = [null, null, null];
	            }
	        }

	        // The aligned sequences (return multiple possibilities)
	        this.alignments = [];

	        // Final alignment score
	        this.score = -1;

	        // Calculate scores and tracebacks
	        this.computeGrids();
	    }

	    _createClass(NeedlemanWunsch, [{
	        key: "getScore",
	        value: function getScore() {
	            return this.score;
	        }
	    }, {
	        key: "getAlignments",
	        value: function getAlignments() {
	            return this.alignments;
	        }

	        // Main dynamic programming procedure

	    }, {
	        key: "computeGrids",
	        value: function computeGrids() {
	            // Fill in the first row
	            for (var j = 1; j < this.jMax; j++) {
	                this.grid[0][j] = this.grid[0][j - 1] + this.gap_penalty;
	                this.tracebackGrid[0][j] = [false, false, true];
	            }

	            // Fill in the first column
	            for (var i = 1; i < this.iMax; i++) {
	                this.grid[i][0] = this.grid[i - 1][0] + this.gap_penalty;
	                this.tracebackGrid[i][0] = [false, true, false];
	            }

	            // Fill the rest of the grid
	            for (var _i2 = 1; _i2 < this.iMax; _i2++) {
	                for (var _j2 = 1; _j2 < this.jMax; _j2++) {
	                    // Find the max score(s) among [`Diag`, `Up`, `Left`]
	                    var diag = void 0;
	                    if (this.sequence1[_i2 - 1] === this.sequence2[_j2 - 1]) diag = this.grid[_i2 - 1][_j2 - 1] + this.match_score;else diag = this.grid[_i2 - 1][_j2 - 1] + this.mismatch_penalty;

	                    var up = this.grid[_i2 - 1][_j2] + this.gap_penalty;
	                    var left = this.grid[_i2][_j2 - 1] + this.gap_penalty;

	                    // If there exists multiple max values, capture them for multiple paths
	                    var maxOf = [diag, up, left];
	                    var indices = this.arrayAllMaxIndexes(maxOf);

	                    // Update Grids
	                    this.grid[_i2][_j2] = maxOf[indices[0]];
	                    this.tracebackGrid[_i2][_j2] = [indices.includes(0), indices.includes(1), indices.includes(2)];
	                }
	            }

	            // Update alignment score
	            this.score = this.grid[this.iMax - 1][this.jMax - 1];
	        }

	        // Gets all possible valid sequence combinations

	    }, {
	        key: "alignmentTraceback",
	        value: function alignmentTraceback() {
	            var inProcessAlignments = [];

	            inProcessAlignments.push({ pos: [this.sequence1.length, this.sequence2.length],
	                seq1: "",
	                seq2: ""
	            });

	            while (inProcessAlignments[0]) {
	                var current = inProcessAlignments[0];
	                var directions = this.tracebackGrid[current.pos[0]][current.pos[1]];

	                if (directions[0]) {
	                    inProcessAlignments.push({ pos: [current.pos[0] - 1, current.pos[1] - 1],
	                        seq1: this.sequence1[current.pos[0] - 1] + current.seq1,
	                        seq2: this.sequence2[current.pos[1] - 1] + current.seq2
	                    });
	                }
	                if (directions[1]) {
	                    inProcessAlignments.push({ pos: [current.pos[0] - 1, current.pos[1]],
	                        seq1: this.sequence1[current.pos[0] - 1] + current.seq1,
	                        seq2: '-' + current.seq2
	                    });
	                }
	                if (directions[2]) {
	                    inProcessAlignments.push({ pos: [current.pos[0], current.pos[1] - 1],
	                        seq1: '-' + current.seq1,
	                        seq2: this.sequence2[current.pos[1] - 1] + current.seq2
	                    });
	                }

	                if (current.pos[0] === 0 && current.pos[1] === 0) this.alignments.push({ sequence1: current.seq1,
	                    sequence2: current.seq2
	                });

	                inProcessAlignments.shift();
	            }

	            return this.alignments;
	        }

	        // Helper Functions

	    }, {
	        key: "getAllIndexes",
	        value: function getAllIndexes(arr, val) {
	            var indexes = [],
	                i = -1;
	            while ((i = arr.indexOf(val, i + 1)) !== -1) {
	                indexes.push(i);
	            }
	            return indexes;
	        }
	    }, {
	        key: "arrayAllMaxIndexes",
	        value: function arrayAllMaxIndexes(array) {
	            return this.getAllIndexes(array, Math.max.apply(null, array));
	        }
	    }]);

	    return NeedlemanWunsch;
	}();

	module.exports = NeedlemanWunsch;

	/***/ }),
	/* 26 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	var layoutBase = function layoutBase() {
	  return;
	};

	layoutBase.FDLayout = __webpack_require__(18);
	layoutBase.FDLayoutConstants = __webpack_require__(7);
	layoutBase.FDLayoutEdge = __webpack_require__(19);
	layoutBase.FDLayoutNode = __webpack_require__(20);
	layoutBase.DimensionD = __webpack_require__(21);
	layoutBase.HashMap = __webpack_require__(22);
	layoutBase.HashSet = __webpack_require__(23);
	layoutBase.IGeometry = __webpack_require__(8);
	layoutBase.IMath = __webpack_require__(9);
	layoutBase.Integer = __webpack_require__(10);
	layoutBase.Point = __webpack_require__(12);
	layoutBase.PointD = __webpack_require__(4);
	layoutBase.RandomSeed = __webpack_require__(16);
	layoutBase.RectangleD = __webpack_require__(13);
	layoutBase.Transform = __webpack_require__(17);
	layoutBase.UniqueIDGeneretor = __webpack_require__(14);
	layoutBase.Quicksort = __webpack_require__(24);
	layoutBase.LinkedList = __webpack_require__(11);
	layoutBase.LGraphObject = __webpack_require__(2);
	layoutBase.LGraph = __webpack_require__(5);
	layoutBase.LEdge = __webpack_require__(1);
	layoutBase.LGraphManager = __webpack_require__(6);
	layoutBase.LNode = __webpack_require__(3);
	layoutBase.Layout = __webpack_require__(15);
	layoutBase.LayoutConstants = __webpack_require__(0);
	layoutBase.NeedlemanWunsch = __webpack_require__(25);

	module.exports = layoutBase;

	/***/ }),
	/* 27 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	function Emitter() {
	  this.listeners = [];
	}

	var p = Emitter.prototype;

	p.addListener = function (event, callback) {
	  this.listeners.push({
	    event: event,
	    callback: callback
	  });
	};

	p.removeListener = function (event, callback) {
	  for (var i = this.listeners.length; i >= 0; i--) {
	    var l = this.listeners[i];

	    if (l.event === event && l.callback === callback) {
	      this.listeners.splice(i, 1);
	    }
	  }
	};

	p.emit = function (event, data) {
	  for (var i = 0; i < this.listeners.length; i++) {
	    var l = this.listeners[i];

	    if (event === l.event) {
	      l.callback(data);
	    }
	  }
	};

	module.exports = Emitter;

	/***/ })
	/******/ ]);
	});

/***/ }),
/* 306 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {"use strict";

	var numeric = ( false)?(function numeric() {}):(exports);
	if(typeof global !== "undefined") { global.numeric = numeric; }

	numeric.version = "1.2.6";

	// 1. Utility functions
	numeric.bench = function bench (f,interval) {
	    var t1,t2,n,i;
	    if(typeof interval === "undefined") { interval = 15; }
	    n = 0.5;
	    t1 = new Date();
	    while(1) {
	        n*=2;
	        for(i=n;i>3;i-=4) { f(); f(); f(); f(); }
	        while(i>0) { f(); i--; }
	        t2 = new Date();
	        if(t2-t1 > interval) break;
	    }
	    for(i=n;i>3;i-=4) { f(); f(); f(); f(); }
	    while(i>0) { f(); i--; }
	    t2 = new Date();
	    return 1000*(3*n-1)/(t2-t1);
	}

	numeric._myIndexOf = (function _myIndexOf(w) {
	    var n = this.length,k;
	    for(k=0;k<n;++k) if(this[k]===w) return k;
	    return -1;
	});
	numeric.myIndexOf = (Array.prototype.indexOf)?Array.prototype.indexOf:numeric._myIndexOf;

	numeric.Function = Function;
	numeric.precision = 4;
	numeric.largeArray = 50;

	numeric.prettyPrint = function prettyPrint(x) {
	    function fmtnum(x) {
	        if(x === 0) { return '0'; }
	        if(isNaN(x)) { return 'NaN'; }
	        if(x<0) { return '-'+fmtnum(-x); }
	        if(isFinite(x)) {
	            var scale = Math.floor(Math.log(x) / Math.log(10));
	            var normalized = x / Math.pow(10,scale);
	            var basic = normalized.toPrecision(numeric.precision);
	            if(parseFloat(basic) === 10) { scale++; normalized = 1; basic = normalized.toPrecision(numeric.precision); }
	            return parseFloat(basic).toString()+'e'+scale.toString();
	        }
	        return 'Infinity';
	    }
	    var ret = [];
	    function foo(x) {
	        var k;
	        if(typeof x === "undefined") { ret.push(Array(numeric.precision+8).join(' ')); return false; }
	        if(typeof x === "string") { ret.push('"'+x+'"'); return false; }
	        if(typeof x === "boolean") { ret.push(x.toString()); return false; }
	        if(typeof x === "number") {
	            var a = fmtnum(x);
	            var b = x.toPrecision(numeric.precision);
	            var c = parseFloat(x.toString()).toString();
	            var d = [a,b,c,parseFloat(b).toString(),parseFloat(c).toString()];
	            for(k=1;k<d.length;k++) { if(d[k].length < a.length) a = d[k]; }
	            ret.push(Array(numeric.precision+8-a.length).join(' ')+a);
	            return false;
	        }
	        if(x === null) { ret.push("null"); return false; }
	        if(typeof x === "function") { 
	            ret.push(x.toString());
	            var flag = false;
	            for(k in x) { if(x.hasOwnProperty(k)) { 
	                if(flag) ret.push(',\n');
	                else ret.push('\n{');
	                flag = true; 
	                ret.push(k); 
	                ret.push(': \n'); 
	                foo(x[k]); 
	            } }
	            if(flag) ret.push('}\n');
	            return true;
	        }
	        if(x instanceof Array) {
	            if(x.length > numeric.largeArray) { ret.push('...Large Array...'); return true; }
	            var flag = false;
	            ret.push('[');
	            for(k=0;k<x.length;k++) { if(k>0) { ret.push(','); if(flag) ret.push('\n '); } flag = foo(x[k]); }
	            ret.push(']');
	            return true;
	        }
	        ret.push('{');
	        var flag = false;
	        for(k in x) { if(x.hasOwnProperty(k)) { if(flag) ret.push(',\n'); flag = true; ret.push(k); ret.push(': \n'); foo(x[k]); } }
	        ret.push('}');
	        return true;
	    }
	    foo(x);
	    return ret.join('');
	}

	numeric.parseDate = function parseDate(d) {
	    function foo(d) {
	        if(typeof d === 'string') { return Date.parse(d.replace(/-/g,'/')); }
	        if(!(d instanceof Array)) { throw new Error("parseDate: parameter must be arrays of strings"); }
	        var ret = [],k;
	        for(k=0;k<d.length;k++) { ret[k] = foo(d[k]); }
	        return ret;
	    }
	    return foo(d);
	}

	numeric.parseFloat = function parseFloat_(d) {
	    function foo(d) {
	        if(typeof d === 'string') { return parseFloat(d); }
	        if(!(d instanceof Array)) { throw new Error("parseFloat: parameter must be arrays of strings"); }
	        var ret = [],k;
	        for(k=0;k<d.length;k++) { ret[k] = foo(d[k]); }
	        return ret;
	    }
	    return foo(d);
	}

	numeric.parseCSV = function parseCSV(t) {
	    var foo = t.split('\n');
	    var j,k;
	    var ret = [];
	    var pat = /(([^'",]*)|('[^']*')|("[^"]*")),/g;
	    var patnum = /^\s*(([+-]?[0-9]+(\.[0-9]*)?(e[+-]?[0-9]+)?)|([+-]?[0-9]*(\.[0-9]+)?(e[+-]?[0-9]+)?))\s*$/;
	    var stripper = function(n) { return n.substr(0,n.length-1); }
	    var count = 0;
	    for(k=0;k<foo.length;k++) {
	      var bar = (foo[k]+",").match(pat),baz;
	      if(bar.length>0) {
	          ret[count] = [];
	          for(j=0;j<bar.length;j++) {
	              baz = stripper(bar[j]);
	              if(patnum.test(baz)) { ret[count][j] = parseFloat(baz); }
	              else ret[count][j] = baz;
	          }
	          count++;
	      }
	    }
	    return ret;
	}

	numeric.toCSV = function toCSV(A) {
	    var s = numeric.dim(A);
	    var i,j,m,n,row,ret;
	    m = s[0];
	    n = s[1];
	    ret = [];
	    for(i=0;i<m;i++) {
	        row = [];
	        for(j=0;j<m;j++) { row[j] = A[i][j].toString(); }
	        ret[i] = row.join(', ');
	    }
	    return ret.join('\n')+'\n';
	}

	numeric.getURL = function getURL(url) {
	    var client = new XMLHttpRequest();
	    client.open("GET",url,false);
	    client.send();
	    return client;
	}

	numeric.imageURL = function imageURL(img) {
	    function base64(A) {
	        var n = A.length, i,x,y,z,p,q,r,s;
	        var key = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
	        var ret = "";
	        for(i=0;i<n;i+=3) {
	            x = A[i];
	            y = A[i+1];
	            z = A[i+2];
	            p = x >> 2;
	            q = ((x & 3) << 4) + (y >> 4);
	            r = ((y & 15) << 2) + (z >> 6);
	            s = z & 63;
	            if(i+1>=n) { r = s = 64; }
	            else if(i+2>=n) { s = 64; }
	            ret += key.charAt(p) + key.charAt(q) + key.charAt(r) + key.charAt(s);
	            }
	        return ret;
	    }
	    function crc32Array (a,from,to) {
	        if(typeof from === "undefined") { from = 0; }
	        if(typeof to === "undefined") { to = a.length; }
	        var table = [0x00000000, 0x77073096, 0xEE0E612C, 0x990951BA, 0x076DC419, 0x706AF48F, 0xE963A535, 0x9E6495A3,
	                     0x0EDB8832, 0x79DCB8A4, 0xE0D5E91E, 0x97D2D988, 0x09B64C2B, 0x7EB17CBD, 0xE7B82D07, 0x90BF1D91, 
	                     0x1DB71064, 0x6AB020F2, 0xF3B97148, 0x84BE41DE, 0x1ADAD47D, 0x6DDDE4EB, 0xF4D4B551, 0x83D385C7,
	                     0x136C9856, 0x646BA8C0, 0xFD62F97A, 0x8A65C9EC, 0x14015C4F, 0x63066CD9, 0xFA0F3D63, 0x8D080DF5, 
	                     0x3B6E20C8, 0x4C69105E, 0xD56041E4, 0xA2677172, 0x3C03E4D1, 0x4B04D447, 0xD20D85FD, 0xA50AB56B, 
	                     0x35B5A8FA, 0x42B2986C, 0xDBBBC9D6, 0xACBCF940, 0x32D86CE3, 0x45DF5C75, 0xDCD60DCF, 0xABD13D59, 
	                     0x26D930AC, 0x51DE003A, 0xC8D75180, 0xBFD06116, 0x21B4F4B5, 0x56B3C423, 0xCFBA9599, 0xB8BDA50F,
	                     0x2802B89E, 0x5F058808, 0xC60CD9B2, 0xB10BE924, 0x2F6F7C87, 0x58684C11, 0xC1611DAB, 0xB6662D3D,
	                     0x76DC4190, 0x01DB7106, 0x98D220BC, 0xEFD5102A, 0x71B18589, 0x06B6B51F, 0x9FBFE4A5, 0xE8B8D433,
	                     0x7807C9A2, 0x0F00F934, 0x9609A88E, 0xE10E9818, 0x7F6A0DBB, 0x086D3D2D, 0x91646C97, 0xE6635C01, 
	                     0x6B6B51F4, 0x1C6C6162, 0x856530D8, 0xF262004E, 0x6C0695ED, 0x1B01A57B, 0x8208F4C1, 0xF50FC457, 
	                     0x65B0D9C6, 0x12B7E950, 0x8BBEB8EA, 0xFCB9887C, 0x62DD1DDF, 0x15DA2D49, 0x8CD37CF3, 0xFBD44C65, 
	                     0x4DB26158, 0x3AB551CE, 0xA3BC0074, 0xD4BB30E2, 0x4ADFA541, 0x3DD895D7, 0xA4D1C46D, 0xD3D6F4FB, 
	                     0x4369E96A, 0x346ED9FC, 0xAD678846, 0xDA60B8D0, 0x44042D73, 0x33031DE5, 0xAA0A4C5F, 0xDD0D7CC9, 
	                     0x5005713C, 0x270241AA, 0xBE0B1010, 0xC90C2086, 0x5768B525, 0x206F85B3, 0xB966D409, 0xCE61E49F, 
	                     0x5EDEF90E, 0x29D9C998, 0xB0D09822, 0xC7D7A8B4, 0x59B33D17, 0x2EB40D81, 0xB7BD5C3B, 0xC0BA6CAD, 
	                     0xEDB88320, 0x9ABFB3B6, 0x03B6E20C, 0x74B1D29A, 0xEAD54739, 0x9DD277AF, 0x04DB2615, 0x73DC1683, 
	                     0xE3630B12, 0x94643B84, 0x0D6D6A3E, 0x7A6A5AA8, 0xE40ECF0B, 0x9309FF9D, 0x0A00AE27, 0x7D079EB1, 
	                     0xF00F9344, 0x8708A3D2, 0x1E01F268, 0x6906C2FE, 0xF762575D, 0x806567CB, 0x196C3671, 0x6E6B06E7, 
	                     0xFED41B76, 0x89D32BE0, 0x10DA7A5A, 0x67DD4ACC, 0xF9B9DF6F, 0x8EBEEFF9, 0x17B7BE43, 0x60B08ED5, 
	                     0xD6D6A3E8, 0xA1D1937E, 0x38D8C2C4, 0x4FDFF252, 0xD1BB67F1, 0xA6BC5767, 0x3FB506DD, 0x48B2364B, 
	                     0xD80D2BDA, 0xAF0A1B4C, 0x36034AF6, 0x41047A60, 0xDF60EFC3, 0xA867DF55, 0x316E8EEF, 0x4669BE79, 
	                     0xCB61B38C, 0xBC66831A, 0x256FD2A0, 0x5268E236, 0xCC0C7795, 0xBB0B4703, 0x220216B9, 0x5505262F, 
	                     0xC5BA3BBE, 0xB2BD0B28, 0x2BB45A92, 0x5CB36A04, 0xC2D7FFA7, 0xB5D0CF31, 0x2CD99E8B, 0x5BDEAE1D, 
	                     0x9B64C2B0, 0xEC63F226, 0x756AA39C, 0x026D930A, 0x9C0906A9, 0xEB0E363F, 0x72076785, 0x05005713, 
	                     0x95BF4A82, 0xE2B87A14, 0x7BB12BAE, 0x0CB61B38, 0x92D28E9B, 0xE5D5BE0D, 0x7CDCEFB7, 0x0BDBDF21, 
	                     0x86D3D2D4, 0xF1D4E242, 0x68DDB3F8, 0x1FDA836E, 0x81BE16CD, 0xF6B9265B, 0x6FB077E1, 0x18B74777, 
	                     0x88085AE6, 0xFF0F6A70, 0x66063BCA, 0x11010B5C, 0x8F659EFF, 0xF862AE69, 0x616BFFD3, 0x166CCF45, 
	                     0xA00AE278, 0xD70DD2EE, 0x4E048354, 0x3903B3C2, 0xA7672661, 0xD06016F7, 0x4969474D, 0x3E6E77DB, 
	                     0xAED16A4A, 0xD9D65ADC, 0x40DF0B66, 0x37D83BF0, 0xA9BCAE53, 0xDEBB9EC5, 0x47B2CF7F, 0x30B5FFE9, 
	                     0xBDBDF21C, 0xCABAC28A, 0x53B39330, 0x24B4A3A6, 0xBAD03605, 0xCDD70693, 0x54DE5729, 0x23D967BF, 
	                     0xB3667A2E, 0xC4614AB8, 0x5D681B02, 0x2A6F2B94, 0xB40BBE37, 0xC30C8EA1, 0x5A05DF1B, 0x2D02EF8D];
	     
	        var crc = -1, y = 0, n = a.length,i;

	        for (i = from; i < to; i++) {
	            y = (crc ^ a[i]) & 0xFF;
	            crc = (crc >>> 8) ^ table[y];
	        }
	     
	        return crc ^ (-1);
	    }

	    var h = img[0].length, w = img[0][0].length, s1, s2, next,k,length,a,b,i,j,adler32,crc32;
	    var stream = [
	                  137, 80, 78, 71, 13, 10, 26, 10,                           //  0: PNG signature
	                  0,0,0,13,                                                  //  8: IHDR Chunk length
	                  73, 72, 68, 82,                                            // 12: "IHDR" 
	                  (w >> 24) & 255, (w >> 16) & 255, (w >> 8) & 255, w&255,   // 16: Width
	                  (h >> 24) & 255, (h >> 16) & 255, (h >> 8) & 255, h&255,   // 20: Height
	                  8,                                                         // 24: bit depth
	                  2,                                                         // 25: RGB
	                  0,                                                         // 26: deflate
	                  0,                                                         // 27: no filter
	                  0,                                                         // 28: no interlace
	                  -1,-2,-3,-4,                                               // 29: CRC
	                  -5,-6,-7,-8,                                               // 33: IDAT Chunk length
	                  73, 68, 65, 84,                                            // 37: "IDAT"
	                  // RFC 1950 header starts here
	                  8,                                                         // 41: RFC1950 CMF
	                  29                                                         // 42: RFC1950 FLG
	                  ];
	    crc32 = crc32Array(stream,12,29);
	    stream[29] = (crc32>>24)&255;
	    stream[30] = (crc32>>16)&255;
	    stream[31] = (crc32>>8)&255;
	    stream[32] = (crc32)&255;
	    s1 = 1;
	    s2 = 0;
	    for(i=0;i<h;i++) {
	        if(i<h-1) { stream.push(0); }
	        else { stream.push(1); }
	        a = (3*w+1+(i===0))&255; b = ((3*w+1+(i===0))>>8)&255;
	        stream.push(a); stream.push(b);
	        stream.push((~a)&255); stream.push((~b)&255);
	        if(i===0) stream.push(0);
	        for(j=0;j<w;j++) {
	            for(k=0;k<3;k++) {
	                a = img[k][i][j];
	                if(a>255) a = 255;
	                else if(a<0) a=0;
	                else a = Math.round(a);
	                s1 = (s1 + a )%65521;
	                s2 = (s2 + s1)%65521;
	                stream.push(a);
	            }
	        }
	        stream.push(0);
	    }
	    adler32 = (s2<<16)+s1;
	    stream.push((adler32>>24)&255);
	    stream.push((adler32>>16)&255);
	    stream.push((adler32>>8)&255);
	    stream.push((adler32)&255);
	    length = stream.length - 41;
	    stream[33] = (length>>24)&255;
	    stream[34] = (length>>16)&255;
	    stream[35] = (length>>8)&255;
	    stream[36] = (length)&255;
	    crc32 = crc32Array(stream,37);
	    stream.push((crc32>>24)&255);
	    stream.push((crc32>>16)&255);
	    stream.push((crc32>>8)&255);
	    stream.push((crc32)&255);
	    stream.push(0);
	    stream.push(0);
	    stream.push(0);
	    stream.push(0);
	//    a = stream.length;
	    stream.push(73);  // I
	    stream.push(69);  // E
	    stream.push(78);  // N
	    stream.push(68);  // D
	    stream.push(174); // CRC1
	    stream.push(66);  // CRC2
	    stream.push(96);  // CRC3
	    stream.push(130); // CRC4
	    return 'data:image/png;base64,'+base64(stream);
	}

	// 2. Linear algebra with Arrays.
	numeric._dim = function _dim(x) {
	    var ret = [];
	    while(typeof x === "object") { ret.push(x.length); x = x[0]; }
	    return ret;
	}

	numeric.dim = function dim(x) {
	    var y,z;
	    if(typeof x === "object") {
	        y = x[0];
	        if(typeof y === "object") {
	            z = y[0];
	            if(typeof z === "object") {
	                return numeric._dim(x);
	            }
	            return [x.length,y.length];
	        }
	        return [x.length];
	    }
	    return [];
	}

	numeric.mapreduce = function mapreduce(body,init) {
	    return Function('x','accum','_s','_k',
	            'if(typeof accum === "undefined") accum = '+init+';\n'+
	            'if(typeof x === "number") { var xi = x; '+body+'; return accum; }\n'+
	            'if(typeof _s === "undefined") _s = numeric.dim(x);\n'+
	            'if(typeof _k === "undefined") _k = 0;\n'+
	            'var _n = _s[_k];\n'+
	            'var i,xi;\n'+
	            'if(_k < _s.length-1) {\n'+
	            '    for(i=_n-1;i>=0;i--) {\n'+
	            '        accum = arguments.callee(x[i],accum,_s,_k+1);\n'+
	            '    }'+
	            '    return accum;\n'+
	            '}\n'+
	            'for(i=_n-1;i>=1;i-=2) { \n'+
	            '    xi = x[i];\n'+
	            '    '+body+';\n'+
	            '    xi = x[i-1];\n'+
	            '    '+body+';\n'+
	            '}\n'+
	            'if(i === 0) {\n'+
	            '    xi = x[i];\n'+
	            '    '+body+'\n'+
	            '}\n'+
	            'return accum;'
	            );
	}
	numeric.mapreduce2 = function mapreduce2(body,setup) {
	    return Function('x',
	            'var n = x.length;\n'+
	            'var i,xi;\n'+setup+';\n'+
	            'for(i=n-1;i!==-1;--i) { \n'+
	            '    xi = x[i];\n'+
	            '    '+body+';\n'+
	            '}\n'+
	            'return accum;'
	            );
	}


	numeric.same = function same(x,y) {
	    var i,n;
	    if(!(x instanceof Array) || !(y instanceof Array)) { return false; }
	    n = x.length;
	    if(n !== y.length) { return false; }
	    for(i=0;i<n;i++) {
	        if(x[i] === y[i]) { continue; }
	        if(typeof x[i] === "object") { if(!same(x[i],y[i])) return false; }
	        else { return false; }
	    }
	    return true;
	}

	numeric.rep = function rep(s,v,k) {
	    if(typeof k === "undefined") { k=0; }
	    var n = s[k], ret = Array(n), i;
	    if(k === s.length-1) {
	        for(i=n-2;i>=0;i-=2) { ret[i+1] = v; ret[i] = v; }
	        if(i===-1) { ret[0] = v; }
	        return ret;
	    }
	    for(i=n-1;i>=0;i--) { ret[i] = numeric.rep(s,v,k+1); }
	    return ret;
	}


	numeric.dotMMsmall = function dotMMsmall(x,y) {
	    var i,j,k,p,q,r,ret,foo,bar,woo,i0,k0,p0,r0;
	    p = x.length; q = y.length; r = y[0].length;
	    ret = Array(p);
	    for(i=p-1;i>=0;i--) {
	        foo = Array(r);
	        bar = x[i];
	        for(k=r-1;k>=0;k--) {
	            woo = bar[q-1]*y[q-1][k];
	            for(j=q-2;j>=1;j-=2) {
	                i0 = j-1;
	                woo += bar[j]*y[j][k] + bar[i0]*y[i0][k];
	            }
	            if(j===0) { woo += bar[0]*y[0][k]; }
	            foo[k] = woo;
	        }
	        ret[i] = foo;
	    }
	    return ret;
	}
	numeric._getCol = function _getCol(A,j,x) {
	    var n = A.length, i;
	    for(i=n-1;i>0;--i) {
	        x[i] = A[i][j];
	        --i;
	        x[i] = A[i][j];
	    }
	    if(i===0) x[0] = A[0][j];
	}
	numeric.dotMMbig = function dotMMbig(x,y){
	    var gc = numeric._getCol, p = y.length, v = Array(p);
	    var m = x.length, n = y[0].length, A = new Array(m), xj;
	    var VV = numeric.dotVV;
	    var i,j,k,z;
	    --p;
	    --m;
	    for(i=m;i!==-1;--i) A[i] = Array(n);
	    --n;
	    for(i=n;i!==-1;--i) {
	        gc(y,i,v);
	        for(j=m;j!==-1;--j) {
	            z=0;
	            xj = x[j];
	            A[j][i] = VV(xj,v);
	        }
	    }
	    return A;
	}

	numeric.dotMV = function dotMV(x,y) {
	    var p = x.length, q = y.length,i;
	    var ret = Array(p), dotVV = numeric.dotVV;
	    for(i=p-1;i>=0;i--) { ret[i] = dotVV(x[i],y); }
	    return ret;
	}

	numeric.dotVM = function dotVM(x,y) {
	    var i,j,k,p,q,r,ret,foo,bar,woo,i0,k0,p0,r0,s1,s2,s3,baz,accum;
	    p = x.length; q = y[0].length;
	    ret = Array(q);
	    for(k=q-1;k>=0;k--) {
	        woo = x[p-1]*y[p-1][k];
	        for(j=p-2;j>=1;j-=2) {
	            i0 = j-1;
	            woo += x[j]*y[j][k] + x[i0]*y[i0][k];
	        }
	        if(j===0) { woo += x[0]*y[0][k]; }
	        ret[k] = woo;
	    }
	    return ret;
	}

	numeric.dotVV = function dotVV(x,y) {
	    var i,n=x.length,i1,ret = x[n-1]*y[n-1];
	    for(i=n-2;i>=1;i-=2) {
	        i1 = i-1;
	        ret += x[i]*y[i] + x[i1]*y[i1];
	    }
	    if(i===0) { ret += x[0]*y[0]; }
	    return ret;
	}

	numeric.dot = function dot(x,y) {
	    var d = numeric.dim;
	    switch(d(x).length*1000+d(y).length) {
	    case 2002:
	        if(y.length < 10) return numeric.dotMMsmall(x,y);
	        else return numeric.dotMMbig(x,y);
	    case 2001: return numeric.dotMV(x,y);
	    case 1002: return numeric.dotVM(x,y);
	    case 1001: return numeric.dotVV(x,y);
	    case 1000: return numeric.mulVS(x,y);
	    case 1: return numeric.mulSV(x,y);
	    case 0: return x*y;
	    default: throw new Error('numeric.dot only works on vectors and matrices');
	    }
	}

	numeric.diag = function diag(d) {
	    var i,i1,j,n = d.length, A = Array(n), Ai;
	    for(i=n-1;i>=0;i--) {
	        Ai = Array(n);
	        i1 = i+2;
	        for(j=n-1;j>=i1;j-=2) {
	            Ai[j] = 0;
	            Ai[j-1] = 0;
	        }
	        if(j>i) { Ai[j] = 0; }
	        Ai[i] = d[i];
	        for(j=i-1;j>=1;j-=2) {
	            Ai[j] = 0;
	            Ai[j-1] = 0;
	        }
	        if(j===0) { Ai[0] = 0; }
	        A[i] = Ai;
	    }
	    return A;
	}
	numeric.getDiag = function(A) {
	    var n = Math.min(A.length,A[0].length),i,ret = Array(n);
	    for(i=n-1;i>=1;--i) {
	        ret[i] = A[i][i];
	        --i;
	        ret[i] = A[i][i];
	    }
	    if(i===0) {
	        ret[0] = A[0][0];
	    }
	    return ret;
	}

	numeric.identity = function identity(n) { return numeric.diag(numeric.rep([n],1)); }
	numeric.pointwise = function pointwise(params,body,setup) {
	    if(typeof setup === "undefined") { setup = ""; }
	    var fun = [];
	    var k;
	    var avec = /\[i\]$/,p,thevec = '';
	    var haveret = false;
	    for(k=0;k<params.length;k++) {
	        if(avec.test(params[k])) {
	            p = params[k].substring(0,params[k].length-3);
	            thevec = p;
	        } else { p = params[k]; }
	        if(p==='ret') haveret = true;
	        fun.push(p);
	    }
	    fun[params.length] = '_s';
	    fun[params.length+1] = '_k';
	    fun[params.length+2] = (
	            'if(typeof _s === "undefined") _s = numeric.dim('+thevec+');\n'+
	            'if(typeof _k === "undefined") _k = 0;\n'+
	            'var _n = _s[_k];\n'+
	            'var i'+(haveret?'':', ret = Array(_n)')+';\n'+
	            'if(_k < _s.length-1) {\n'+
	            '    for(i=_n-1;i>=0;i--) ret[i] = arguments.callee('+params.join(',')+',_s,_k+1);\n'+
	            '    return ret;\n'+
	            '}\n'+
	            setup+'\n'+
	            'for(i=_n-1;i!==-1;--i) {\n'+
	            '    '+body+'\n'+
	            '}\n'+
	            'return ret;'
	            );
	    return Function.apply(null,fun);
	}
	numeric.pointwise2 = function pointwise2(params,body,setup) {
	    if(typeof setup === "undefined") { setup = ""; }
	    var fun = [];
	    var k;
	    var avec = /\[i\]$/,p,thevec = '';
	    var haveret = false;
	    for(k=0;k<params.length;k++) {
	        if(avec.test(params[k])) {
	            p = params[k].substring(0,params[k].length-3);
	            thevec = p;
	        } else { p = params[k]; }
	        if(p==='ret') haveret = true;
	        fun.push(p);
	    }
	    fun[params.length] = (
	            'var _n = '+thevec+'.length;\n'+
	            'var i'+(haveret?'':', ret = Array(_n)')+';\n'+
	            setup+'\n'+
	            'for(i=_n-1;i!==-1;--i) {\n'+
	            body+'\n'+
	            '}\n'+
	            'return ret;'
	            );
	    return Function.apply(null,fun);
	}
	numeric._biforeach = (function _biforeach(x,y,s,k,f) {
	    if(k === s.length-1) { f(x,y); return; }
	    var i,n=s[k];
	    for(i=n-1;i>=0;i--) { _biforeach(typeof x==="object"?x[i]:x,typeof y==="object"?y[i]:y,s,k+1,f); }
	});
	numeric._biforeach2 = (function _biforeach2(x,y,s,k,f) {
	    if(k === s.length-1) { return f(x,y); }
	    var i,n=s[k],ret = Array(n);
	    for(i=n-1;i>=0;--i) { ret[i] = _biforeach2(typeof x==="object"?x[i]:x,typeof y==="object"?y[i]:y,s,k+1,f); }
	    return ret;
	});
	numeric._foreach = (function _foreach(x,s,k,f) {
	    if(k === s.length-1) { f(x); return; }
	    var i,n=s[k];
	    for(i=n-1;i>=0;i--) { _foreach(x[i],s,k+1,f); }
	});
	numeric._foreach2 = (function _foreach2(x,s,k,f) {
	    if(k === s.length-1) { return f(x); }
	    var i,n=s[k], ret = Array(n);
	    for(i=n-1;i>=0;i--) { ret[i] = _foreach2(x[i],s,k+1,f); }
	    return ret;
	});

	/*numeric.anyV = numeric.mapreduce('if(xi) return true;','false');
	numeric.allV = numeric.mapreduce('if(!xi) return false;','true');
	numeric.any = function(x) { if(typeof x.length === "undefined") return x; return numeric.anyV(x); }
	numeric.all = function(x) { if(typeof x.length === "undefined") return x; return numeric.allV(x); }*/

	numeric.ops2 = {
	        add: '+',
	        sub: '-',
	        mul: '*',
	        div: '/',
	        mod: '%',
	        and: '&&',
	        or:  '||',
	        eq:  '===',
	        neq: '!==',
	        lt:  '<',
	        gt:  '>',
	        leq: '<=',
	        geq: '>=',
	        band: '&',
	        bor: '|',
	        bxor: '^',
	        lshift: '<<',
	        rshift: '>>',
	        rrshift: '>>>'
	};
	numeric.opseq = {
	        addeq: '+=',
	        subeq: '-=',
	        muleq: '*=',
	        diveq: '/=',
	        modeq: '%=',
	        lshifteq: '<<=',
	        rshifteq: '>>=',
	        rrshifteq: '>>>=',
	        bandeq: '&=',
	        boreq: '|=',
	        bxoreq: '^='
	};
	numeric.mathfuns = ['abs','acos','asin','atan','ceil','cos',
	                    'exp','floor','log','round','sin','sqrt','tan',
	                    'isNaN','isFinite'];
	numeric.mathfuns2 = ['atan2','pow','max','min'];
	numeric.ops1 = {
	        neg: '-',
	        not: '!',
	        bnot: '~',
	        clone: ''
	};
	numeric.mapreducers = {
	        any: ['if(xi) return true;','var accum = false;'],
	        all: ['if(!xi) return false;','var accum = true;'],
	        sum: ['accum += xi;','var accum = 0;'],
	        prod: ['accum *= xi;','var accum = 1;'],
	        norm2Squared: ['accum += xi*xi;','var accum = 0;'],
	        norminf: ['accum = max(accum,abs(xi));','var accum = 0, max = Math.max, abs = Math.abs;'],
	        norm1: ['accum += abs(xi)','var accum = 0, abs = Math.abs;'],
	        sup: ['accum = max(accum,xi);','var accum = -Infinity, max = Math.max;'],
	        inf: ['accum = min(accum,xi);','var accum = Infinity, min = Math.min;']
	};

	(function () {
	    var i,o;
	    for(i=0;i<numeric.mathfuns2.length;++i) {
	        o = numeric.mathfuns2[i];
	        numeric.ops2[o] = o;
	    }
	    for(i in numeric.ops2) {
	        if(numeric.ops2.hasOwnProperty(i)) {
	            o = numeric.ops2[i];
	            var code, codeeq, setup = '';
	            if(numeric.myIndexOf.call(numeric.mathfuns2,i)!==-1) {
	                setup = 'var '+o+' = Math.'+o+';\n';
	                code = function(r,x,y) { return r+' = '+o+'('+x+','+y+')'; };
	                codeeq = function(x,y) { return x+' = '+o+'('+x+','+y+')'; };
	            } else {
	                code = function(r,x,y) { return r+' = '+x+' '+o+' '+y; };
	                if(numeric.opseq.hasOwnProperty(i+'eq')) {
	                    codeeq = function(x,y) { return x+' '+o+'= '+y; };
	                } else {
	                    codeeq = function(x,y) { return x+' = '+x+' '+o+' '+y; };                    
	                }
	            }
	            numeric[i+'VV'] = numeric.pointwise2(['x[i]','y[i]'],code('ret[i]','x[i]','y[i]'),setup);
	            numeric[i+'SV'] = numeric.pointwise2(['x','y[i]'],code('ret[i]','x','y[i]'),setup);
	            numeric[i+'VS'] = numeric.pointwise2(['x[i]','y'],code('ret[i]','x[i]','y'),setup);
	            numeric[i] = Function(
	                    'var n = arguments.length, i, x = arguments[0], y;\n'+
	                    'var VV = numeric.'+i+'VV, VS = numeric.'+i+'VS, SV = numeric.'+i+'SV;\n'+
	                    'var dim = numeric.dim;\n'+
	                    'for(i=1;i!==n;++i) { \n'+
	                    '  y = arguments[i];\n'+
	                    '  if(typeof x === "object") {\n'+
	                    '      if(typeof y === "object") x = numeric._biforeach2(x,y,dim(x),0,VV);\n'+
	                    '      else x = numeric._biforeach2(x,y,dim(x),0,VS);\n'+
	                    '  } else if(typeof y === "object") x = numeric._biforeach2(x,y,dim(y),0,SV);\n'+
	                    '  else '+codeeq('x','y')+'\n'+
	                    '}\nreturn x;\n');
	            numeric[o] = numeric[i];
	            numeric[i+'eqV'] = numeric.pointwise2(['ret[i]','x[i]'], codeeq('ret[i]','x[i]'),setup);
	            numeric[i+'eqS'] = numeric.pointwise2(['ret[i]','x'], codeeq('ret[i]','x'),setup);
	            numeric[i+'eq'] = Function(
	                    'var n = arguments.length, i, x = arguments[0], y;\n'+
	                    'var V = numeric.'+i+'eqV, S = numeric.'+i+'eqS\n'+
	                    'var s = numeric.dim(x);\n'+
	                    'for(i=1;i!==n;++i) { \n'+
	                    '  y = arguments[i];\n'+
	                    '  if(typeof y === "object") numeric._biforeach(x,y,s,0,V);\n'+
	                    '  else numeric._biforeach(x,y,s,0,S);\n'+
	                    '}\nreturn x;\n');
	        }
	    }
	    for(i=0;i<numeric.mathfuns2.length;++i) {
	        o = numeric.mathfuns2[i];
	        delete numeric.ops2[o];
	    }
	    for(i=0;i<numeric.mathfuns.length;++i) {
	        o = numeric.mathfuns[i];
	        numeric.ops1[o] = o;
	    }
	    for(i in numeric.ops1) {
	        if(numeric.ops1.hasOwnProperty(i)) {
	            setup = '';
	            o = numeric.ops1[i];
	            if(numeric.myIndexOf.call(numeric.mathfuns,i)!==-1) {
	                if(Math.hasOwnProperty(o)) setup = 'var '+o+' = Math.'+o+';\n';
	            }
	            numeric[i+'eqV'] = numeric.pointwise2(['ret[i]'],'ret[i] = '+o+'(ret[i]);',setup);
	            numeric[i+'eq'] = Function('x',
	                    'if(typeof x !== "object") return '+o+'x\n'+
	                    'var i;\n'+
	                    'var V = numeric.'+i+'eqV;\n'+
	                    'var s = numeric.dim(x);\n'+
	                    'numeric._foreach(x,s,0,V);\n'+
	                    'return x;\n');
	            numeric[i+'V'] = numeric.pointwise2(['x[i]'],'ret[i] = '+o+'(x[i]);',setup);
	            numeric[i] = Function('x',
	                    'if(typeof x !== "object") return '+o+'(x)\n'+
	                    'var i;\n'+
	                    'var V = numeric.'+i+'V;\n'+
	                    'var s = numeric.dim(x);\n'+
	                    'return numeric._foreach2(x,s,0,V);\n');
	        }
	    }
	    for(i=0;i<numeric.mathfuns.length;++i) {
	        o = numeric.mathfuns[i];
	        delete numeric.ops1[o];
	    }
	    for(i in numeric.mapreducers) {
	        if(numeric.mapreducers.hasOwnProperty(i)) {
	            o = numeric.mapreducers[i];
	            numeric[i+'V'] = numeric.mapreduce2(o[0],o[1]);
	            numeric[i] = Function('x','s','k',
	                    o[1]+
	                    'if(typeof x !== "object") {'+
	                    '    xi = x;\n'+
	                    o[0]+';\n'+
	                    '    return accum;\n'+
	                    '}'+
	                    'if(typeof s === "undefined") s = numeric.dim(x);\n'+
	                    'if(typeof k === "undefined") k = 0;\n'+
	                    'if(k === s.length-1) return numeric.'+i+'V(x);\n'+
	                    'var xi;\n'+
	                    'var n = x.length, i;\n'+
	                    'for(i=n-1;i!==-1;--i) {\n'+
	                    '   xi = arguments.callee(x[i]);\n'+
	                    o[0]+';\n'+
	                    '}\n'+
	                    'return accum;\n');
	        }
	    }
	}());

	numeric.truncVV = numeric.pointwise(['x[i]','y[i]'],'ret[i] = round(x[i]/y[i])*y[i];','var round = Math.round;');
	numeric.truncVS = numeric.pointwise(['x[i]','y'],'ret[i] = round(x[i]/y)*y;','var round = Math.round;');
	numeric.truncSV = numeric.pointwise(['x','y[i]'],'ret[i] = round(x/y[i])*y[i];','var round = Math.round;');
	numeric.trunc = function trunc(x,y) {
	    if(typeof x === "object") {
	        if(typeof y === "object") return numeric.truncVV(x,y);
	        return numeric.truncVS(x,y);
	    }
	    if (typeof y === "object") return numeric.truncSV(x,y);
	    return Math.round(x/y)*y;
	}

	numeric.inv = function inv(x) {
	    var s = numeric.dim(x), abs = Math.abs, m = s[0], n = s[1];
	    var A = numeric.clone(x), Ai, Aj;
	    var I = numeric.identity(m), Ii, Ij;
	    var i,j,k,x;
	    for(j=0;j<n;++j) {
	        var i0 = -1;
	        var v0 = -1;
	        for(i=j;i!==m;++i) { k = abs(A[i][j]); if(k>v0) { i0 = i; v0 = k; } }
	        Aj = A[i0]; A[i0] = A[j]; A[j] = Aj;
	        Ij = I[i0]; I[i0] = I[j]; I[j] = Ij;
	        x = Aj[j];
	        for(k=j;k!==n;++k)    Aj[k] /= x; 
	        for(k=n-1;k!==-1;--k) Ij[k] /= x;
	        for(i=m-1;i!==-1;--i) {
	            if(i!==j) {
	                Ai = A[i];
	                Ii = I[i];
	                x = Ai[j];
	                for(k=j+1;k!==n;++k)  Ai[k] -= Aj[k]*x;
	                for(k=n-1;k>0;--k) { Ii[k] -= Ij[k]*x; --k; Ii[k] -= Ij[k]*x; }
	                if(k===0) Ii[0] -= Ij[0]*x;
	            }
	        }
	    }
	    return I;
	}

	numeric.det = function det(x) {
	    var s = numeric.dim(x);
	    if(s.length !== 2 || s[0] !== s[1]) { throw new Error('numeric: det() only works on square matrices'); }
	    var n = s[0], ret = 1,i,j,k,A = numeric.clone(x),Aj,Ai,alpha,temp,k1,k2,k3;
	    for(j=0;j<n-1;j++) {
	        k=j;
	        for(i=j+1;i<n;i++) { if(Math.abs(A[i][j]) > Math.abs(A[k][j])) { k = i; } }
	        if(k !== j) {
	            temp = A[k]; A[k] = A[j]; A[j] = temp;
	            ret *= -1;
	        }
	        Aj = A[j];
	        for(i=j+1;i<n;i++) {
	            Ai = A[i];
	            alpha = Ai[j]/Aj[j];
	            for(k=j+1;k<n-1;k+=2) {
	                k1 = k+1;
	                Ai[k] -= Aj[k]*alpha;
	                Ai[k1] -= Aj[k1]*alpha;
	            }
	            if(k!==n) { Ai[k] -= Aj[k]*alpha; }
	        }
	        if(Aj[j] === 0) { return 0; }
	        ret *= Aj[j];
	    }
	    return ret*A[j][j];
	}

	numeric.transpose = function transpose(x) {
	    var i,j,m = x.length,n = x[0].length, ret=Array(n),A0,A1,Bj;
	    for(j=0;j<n;j++) ret[j] = Array(m);
	    for(i=m-1;i>=1;i-=2) {
	        A1 = x[i];
	        A0 = x[i-1];
	        for(j=n-1;j>=1;--j) {
	            Bj = ret[j]; Bj[i] = A1[j]; Bj[i-1] = A0[j];
	            --j;
	            Bj = ret[j]; Bj[i] = A1[j]; Bj[i-1] = A0[j];
	        }
	        if(j===0) {
	            Bj = ret[0]; Bj[i] = A1[0]; Bj[i-1] = A0[0];
	        }
	    }
	    if(i===0) {
	        A0 = x[0];
	        for(j=n-1;j>=1;--j) {
	            ret[j][0] = A0[j];
	            --j;
	            ret[j][0] = A0[j];
	        }
	        if(j===0) { ret[0][0] = A0[0]; }
	    }
	    return ret;
	}
	numeric.negtranspose = function negtranspose(x) {
	    var i,j,m = x.length,n = x[0].length, ret=Array(n),A0,A1,Bj;
	    for(j=0;j<n;j++) ret[j] = Array(m);
	    for(i=m-1;i>=1;i-=2) {
	        A1 = x[i];
	        A0 = x[i-1];
	        for(j=n-1;j>=1;--j) {
	            Bj = ret[j]; Bj[i] = -A1[j]; Bj[i-1] = -A0[j];
	            --j;
	            Bj = ret[j]; Bj[i] = -A1[j]; Bj[i-1] = -A0[j];
	        }
	        if(j===0) {
	            Bj = ret[0]; Bj[i] = -A1[0]; Bj[i-1] = -A0[0];
	        }
	    }
	    if(i===0) {
	        A0 = x[0];
	        for(j=n-1;j>=1;--j) {
	            ret[j][0] = -A0[j];
	            --j;
	            ret[j][0] = -A0[j];
	        }
	        if(j===0) { ret[0][0] = -A0[0]; }
	    }
	    return ret;
	}

	numeric._random = function _random(s,k) {
	    var i,n=s[k],ret=Array(n), rnd;
	    if(k === s.length-1) {
	        rnd = Math.random;
	        for(i=n-1;i>=1;i-=2) {
	            ret[i] = rnd();
	            ret[i-1] = rnd();
	        }
	        if(i===0) { ret[0] = rnd(); }
	        return ret;
	    }
	    for(i=n-1;i>=0;i--) ret[i] = _random(s,k+1);
	    return ret;
	}
	numeric.random = function random(s) { return numeric._random(s,0); }

	numeric.norm2 = function norm2(x) { return Math.sqrt(numeric.norm2Squared(x)); }

	numeric.linspace = function linspace(a,b,n) {
	    if(typeof n === "undefined") n = Math.max(Math.round(b-a)+1,1);
	    if(n<2) { return n===1?[a]:[]; }
	    var i,ret = Array(n);
	    n--;
	    for(i=n;i>=0;i--) { ret[i] = (i*b+(n-i)*a)/n; }
	    return ret;
	}

	numeric.getBlock = function getBlock(x,from,to) {
	    var s = numeric.dim(x);
	    function foo(x,k) {
	        var i,a = from[k], n = to[k]-a, ret = Array(n);
	        if(k === s.length-1) {
	            for(i=n;i>=0;i--) { ret[i] = x[i+a]; }
	            return ret;
	        }
	        for(i=n;i>=0;i--) { ret[i] = foo(x[i+a],k+1); }
	        return ret;
	    }
	    return foo(x,0);
	}

	numeric.setBlock = function setBlock(x,from,to,B) {
	    var s = numeric.dim(x);
	    function foo(x,y,k) {
	        var i,a = from[k], n = to[k]-a;
	        if(k === s.length-1) { for(i=n;i>=0;i--) { x[i+a] = y[i]; } }
	        for(i=n;i>=0;i--) { foo(x[i+a],y[i],k+1); }
	    }
	    foo(x,B,0);
	    return x;
	}

	numeric.getRange = function getRange(A,I,J) {
	    var m = I.length, n = J.length;
	    var i,j;
	    var B = Array(m), Bi, AI;
	    for(i=m-1;i!==-1;--i) {
	        B[i] = Array(n);
	        Bi = B[i];
	        AI = A[I[i]];
	        for(j=n-1;j!==-1;--j) Bi[j] = AI[J[j]];
	    }
	    return B;
	}

	numeric.blockMatrix = function blockMatrix(X) {
	    var s = numeric.dim(X);
	    if(s.length<4) return numeric.blockMatrix([X]);
	    var m=s[0],n=s[1],M,N,i,j,Xij;
	    M = 0; N = 0;
	    for(i=0;i<m;++i) M+=X[i][0].length;
	    for(j=0;j<n;++j) N+=X[0][j][0].length;
	    var Z = Array(M);
	    for(i=0;i<M;++i) Z[i] = Array(N);
	    var I=0,J,ZI,k,l,Xijk;
	    for(i=0;i<m;++i) {
	        J=N;
	        for(j=n-1;j!==-1;--j) {
	            Xij = X[i][j];
	            J -= Xij[0].length;
	            for(k=Xij.length-1;k!==-1;--k) {
	                Xijk = Xij[k];
	                ZI = Z[I+k];
	                for(l = Xijk.length-1;l!==-1;--l) ZI[J+l] = Xijk[l];
	            }
	        }
	        I += X[i][0].length;
	    }
	    return Z;
	}

	numeric.tensor = function tensor(x,y) {
	    if(typeof x === "number" || typeof y === "number") return numeric.mul(x,y);
	    var s1 = numeric.dim(x), s2 = numeric.dim(y);
	    if(s1.length !== 1 || s2.length !== 1) {
	        throw new Error('numeric: tensor product is only defined for vectors');
	    }
	    var m = s1[0], n = s2[0], A = Array(m), Ai, i,j,xi;
	    for(i=m-1;i>=0;i--) {
	        Ai = Array(n);
	        xi = x[i];
	        for(j=n-1;j>=3;--j) {
	            Ai[j] = xi * y[j];
	            --j;
	            Ai[j] = xi * y[j];
	            --j;
	            Ai[j] = xi * y[j];
	            --j;
	            Ai[j] = xi * y[j];
	        }
	        while(j>=0) { Ai[j] = xi * y[j]; --j; }
	        A[i] = Ai;
	    }
	    return A;
	}

	// 3. The Tensor type T
	numeric.T = function T(x,y) { this.x = x; this.y = y; }
	numeric.t = function t(x,y) { return new numeric.T(x,y); }

	numeric.Tbinop = function Tbinop(rr,rc,cr,cc,setup) {
	    var io = numeric.indexOf;
	    if(typeof setup !== "string") {
	        var k;
	        setup = '';
	        for(k in numeric) {
	            if(numeric.hasOwnProperty(k) && (rr.indexOf(k)>=0 || rc.indexOf(k)>=0 || cr.indexOf(k)>=0 || cc.indexOf(k)>=0) && k.length>1) {
	                setup += 'var '+k+' = numeric.'+k+';\n';
	            }
	        }
	    }
	    return Function(['y'],
	            'var x = this;\n'+
	            'if(!(y instanceof numeric.T)) { y = new numeric.T(y); }\n'+
	            setup+'\n'+
	            'if(x.y) {'+
	            '  if(y.y) {'+
	            '    return new numeric.T('+cc+');\n'+
	            '  }\n'+
	            '  return new numeric.T('+cr+');\n'+
	            '}\n'+
	            'if(y.y) {\n'+
	            '  return new numeric.T('+rc+');\n'+
	            '}\n'+
	            'return new numeric.T('+rr+');\n'
	    );
	}

	numeric.T.prototype.add = numeric.Tbinop(
	        'add(x.x,y.x)',
	        'add(x.x,y.x),y.y',
	        'add(x.x,y.x),x.y',
	        'add(x.x,y.x),add(x.y,y.y)');
	numeric.T.prototype.sub = numeric.Tbinop(
	        'sub(x.x,y.x)',
	        'sub(x.x,y.x),neg(y.y)',
	        'sub(x.x,y.x),x.y',
	        'sub(x.x,y.x),sub(x.y,y.y)');
	numeric.T.prototype.mul = numeric.Tbinop(
	        'mul(x.x,y.x)',
	        'mul(x.x,y.x),mul(x.x,y.y)',
	        'mul(x.x,y.x),mul(x.y,y.x)',
	        'sub(mul(x.x,y.x),mul(x.y,y.y)),add(mul(x.x,y.y),mul(x.y,y.x))');

	numeric.T.prototype.reciprocal = function reciprocal() {
	    var mul = numeric.mul, div = numeric.div;
	    if(this.y) {
	        var d = numeric.add(mul(this.x,this.x),mul(this.y,this.y));
	        return new numeric.T(div(this.x,d),div(numeric.neg(this.y),d));
	    }
	    return new T(div(1,this.x));
	}
	numeric.T.prototype.div = function div(y) {
	    if(!(y instanceof numeric.T)) y = new numeric.T(y);
	    if(y.y) { return this.mul(y.reciprocal()); }
	    var div = numeric.div;
	    if(this.y) { return new numeric.T(div(this.x,y.x),div(this.y,y.x)); }
	    return new numeric.T(div(this.x,y.x));
	}
	numeric.T.prototype.dot = numeric.Tbinop(
	        'dot(x.x,y.x)',
	        'dot(x.x,y.x),dot(x.x,y.y)',
	        'dot(x.x,y.x),dot(x.y,y.x)',
	        'sub(dot(x.x,y.x),dot(x.y,y.y)),add(dot(x.x,y.y),dot(x.y,y.x))'
	        );
	numeric.T.prototype.transpose = function transpose() {
	    var t = numeric.transpose, x = this.x, y = this.y;
	    if(y) { return new numeric.T(t(x),t(y)); }
	    return new numeric.T(t(x));
	}
	numeric.T.prototype.transjugate = function transjugate() {
	    var t = numeric.transpose, x = this.x, y = this.y;
	    if(y) { return new numeric.T(t(x),numeric.negtranspose(y)); }
	    return new numeric.T(t(x));
	}
	numeric.Tunop = function Tunop(r,c,s) {
	    if(typeof s !== "string") { s = ''; }
	    return Function(
	            'var x = this;\n'+
	            s+'\n'+
	            'if(x.y) {'+
	            '  '+c+';\n'+
	            '}\n'+
	            r+';\n'
	    );
	}

	numeric.T.prototype.exp = numeric.Tunop(
	        'return new numeric.T(ex)',
	        'return new numeric.T(mul(cos(x.y),ex),mul(sin(x.y),ex))',
	        'var ex = numeric.exp(x.x), cos = numeric.cos, sin = numeric.sin, mul = numeric.mul;');
	numeric.T.prototype.conj = numeric.Tunop(
	        'return new numeric.T(x.x);',
	        'return new numeric.T(x.x,numeric.neg(x.y));');
	numeric.T.prototype.neg = numeric.Tunop(
	        'return new numeric.T(neg(x.x));',
	        'return new numeric.T(neg(x.x),neg(x.y));',
	        'var neg = numeric.neg;');
	numeric.T.prototype.sin = numeric.Tunop(
	        'return new numeric.T(numeric.sin(x.x))',
	        'return x.exp().sub(x.neg().exp()).div(new numeric.T(0,2));');
	numeric.T.prototype.cos = numeric.Tunop(
	        'return new numeric.T(numeric.cos(x.x))',
	        'return x.exp().add(x.neg().exp()).div(2);');
	numeric.T.prototype.abs = numeric.Tunop(
	        'return new numeric.T(numeric.abs(x.x));',
	        'return new numeric.T(numeric.sqrt(numeric.add(mul(x.x,x.x),mul(x.y,x.y))));',
	        'var mul = numeric.mul;');
	numeric.T.prototype.log = numeric.Tunop(
	        'return new numeric.T(numeric.log(x.x));',
	        'var theta = new numeric.T(numeric.atan2(x.y,x.x)), r = x.abs();\n'+
	        'return new numeric.T(numeric.log(r.x),theta.x);');
	numeric.T.prototype.norm2 = numeric.Tunop(
	        'return numeric.norm2(x.x);',
	        'var f = numeric.norm2Squared;\n'+
	        'return Math.sqrt(f(x.x)+f(x.y));');
	numeric.T.prototype.inv = function inv() {
	    var A = this;
	    if(typeof A.y === "undefined") { return new numeric.T(numeric.inv(A.x)); }
	    var n = A.x.length, i, j, k;
	    var Rx = numeric.identity(n),Ry = numeric.rep([n,n],0);
	    var Ax = numeric.clone(A.x), Ay = numeric.clone(A.y);
	    var Aix, Aiy, Ajx, Ajy, Rix, Riy, Rjx, Rjy;
	    var i,j,k,d,d1,ax,ay,bx,by,temp;
	    for(i=0;i<n;i++) {
	        ax = Ax[i][i]; ay = Ay[i][i];
	        d = ax*ax+ay*ay;
	        k = i;
	        for(j=i+1;j<n;j++) {
	            ax = Ax[j][i]; ay = Ay[j][i];
	            d1 = ax*ax+ay*ay;
	            if(d1 > d) { k=j; d = d1; }
	        }
	        if(k!==i) {
	            temp = Ax[i]; Ax[i] = Ax[k]; Ax[k] = temp;
	            temp = Ay[i]; Ay[i] = Ay[k]; Ay[k] = temp;
	            temp = Rx[i]; Rx[i] = Rx[k]; Rx[k] = temp;
	            temp = Ry[i]; Ry[i] = Ry[k]; Ry[k] = temp;
	        }
	        Aix = Ax[i]; Aiy = Ay[i];
	        Rix = Rx[i]; Riy = Ry[i];
	        ax = Aix[i]; ay = Aiy[i];
	        for(j=i+1;j<n;j++) {
	            bx = Aix[j]; by = Aiy[j];
	            Aix[j] = (bx*ax+by*ay)/d;
	            Aiy[j] = (by*ax-bx*ay)/d;
	        }
	        for(j=0;j<n;j++) {
	            bx = Rix[j]; by = Riy[j];
	            Rix[j] = (bx*ax+by*ay)/d;
	            Riy[j] = (by*ax-bx*ay)/d;
	        }
	        for(j=i+1;j<n;j++) {
	            Ajx = Ax[j]; Ajy = Ay[j];
	            Rjx = Rx[j]; Rjy = Ry[j];
	            ax = Ajx[i]; ay = Ajy[i];
	            for(k=i+1;k<n;k++) {
	                bx = Aix[k]; by = Aiy[k];
	                Ajx[k] -= bx*ax-by*ay;
	                Ajy[k] -= by*ax+bx*ay;
	            }
	            for(k=0;k<n;k++) {
	                bx = Rix[k]; by = Riy[k];
	                Rjx[k] -= bx*ax-by*ay;
	                Rjy[k] -= by*ax+bx*ay;
	            }
	        }
	    }
	    for(i=n-1;i>0;i--) {
	        Rix = Rx[i]; Riy = Ry[i];
	        for(j=i-1;j>=0;j--) {
	            Rjx = Rx[j]; Rjy = Ry[j];
	            ax = Ax[j][i]; ay = Ay[j][i];
	            for(k=n-1;k>=0;k--) {
	                bx = Rix[k]; by = Riy[k];
	                Rjx[k] -= ax*bx - ay*by;
	                Rjy[k] -= ax*by + ay*bx;
	            }
	        }
	    }
	    return new numeric.T(Rx,Ry);
	}
	numeric.T.prototype.get = function get(i) {
	    var x = this.x, y = this.y, k = 0, ik, n = i.length;
	    if(y) {
	        while(k<n) {
	            ik = i[k];
	            x = x[ik];
	            y = y[ik];
	            k++;
	        }
	        return new numeric.T(x,y);
	    }
	    while(k<n) {
	        ik = i[k];
	        x = x[ik];
	        k++;
	    }
	    return new numeric.T(x);
	}
	numeric.T.prototype.set = function set(i,v) {
	    var x = this.x, y = this.y, k = 0, ik, n = i.length, vx = v.x, vy = v.y;
	    if(n===0) {
	        if(vy) { this.y = vy; }
	        else if(y) { this.y = undefined; }
	        this.x = x;
	        return this;
	    }
	    if(vy) {
	        if(y) { /* ok */ }
	        else {
	            y = numeric.rep(numeric.dim(x),0);
	            this.y = y;
	        }
	        while(k<n-1) {
	            ik = i[k];
	            x = x[ik];
	            y = y[ik];
	            k++;
	        }
	        ik = i[k];
	        x[ik] = vx;
	        y[ik] = vy;
	        return this;
	    }
	    if(y) {
	        while(k<n-1) {
	            ik = i[k];
	            x = x[ik];
	            y = y[ik];
	            k++;
	        }
	        ik = i[k];
	        x[ik] = vx;
	        if(vx instanceof Array) y[ik] = numeric.rep(numeric.dim(vx),0);
	        else y[ik] = 0;
	        return this;
	    }
	    while(k<n-1) {
	        ik = i[k];
	        x = x[ik];
	        k++;
	    }
	    ik = i[k];
	    x[ik] = vx;
	    return this;
	}
	numeric.T.prototype.getRows = function getRows(i0,i1) {
	    var n = i1-i0+1, j;
	    var rx = Array(n), ry, x = this.x, y = this.y;
	    for(j=i0;j<=i1;j++) { rx[j-i0] = x[j]; }
	    if(y) {
	        ry = Array(n);
	        for(j=i0;j<=i1;j++) { ry[j-i0] = y[j]; }
	        return new numeric.T(rx,ry);
	    }
	    return new numeric.T(rx);
	}
	numeric.T.prototype.setRows = function setRows(i0,i1,A) {
	    var j;
	    var rx = this.x, ry = this.y, x = A.x, y = A.y;
	    for(j=i0;j<=i1;j++) { rx[j] = x[j-i0]; }
	    if(y) {
	        if(!ry) { ry = numeric.rep(numeric.dim(rx),0); this.y = ry; }
	        for(j=i0;j<=i1;j++) { ry[j] = y[j-i0]; }
	    } else if(ry) {
	        for(j=i0;j<=i1;j++) { ry[j] = numeric.rep([x[j-i0].length],0); }
	    }
	    return this;
	}
	numeric.T.prototype.getRow = function getRow(k) {
	    var x = this.x, y = this.y;
	    if(y) { return new numeric.T(x[k],y[k]); }
	    return new numeric.T(x[k]);
	}
	numeric.T.prototype.setRow = function setRow(i,v) {
	    var rx = this.x, ry = this.y, x = v.x, y = v.y;
	    rx[i] = x;
	    if(y) {
	        if(!ry) { ry = numeric.rep(numeric.dim(rx),0); this.y = ry; }
	        ry[i] = y;
	    } else if(ry) {
	        ry = numeric.rep([x.length],0);
	    }
	    return this;
	}

	numeric.T.prototype.getBlock = function getBlock(from,to) {
	    var x = this.x, y = this.y, b = numeric.getBlock;
	    if(y) { return new numeric.T(b(x,from,to),b(y,from,to)); }
	    return new numeric.T(b(x,from,to));
	}
	numeric.T.prototype.setBlock = function setBlock(from,to,A) {
	    if(!(A instanceof numeric.T)) A = new numeric.T(A);
	    var x = this.x, y = this.y, b = numeric.setBlock, Ax = A.x, Ay = A.y;
	    if(Ay) {
	        if(!y) { this.y = numeric.rep(numeric.dim(this),0); y = this.y; }
	        b(x,from,to,Ax);
	        b(y,from,to,Ay);
	        return this;
	    }
	    b(x,from,to,Ax);
	    if(y) b(y,from,to,numeric.rep(numeric.dim(Ax),0));
	}
	numeric.T.rep = function rep(s,v) {
	    var T = numeric.T;
	    if(!(v instanceof T)) v = new T(v);
	    var x = v.x, y = v.y, r = numeric.rep;
	    if(y) return new T(r(s,x),r(s,y));
	    return new T(r(s,x));
	}
	numeric.T.diag = function diag(d) {
	    if(!(d instanceof numeric.T)) d = new numeric.T(d);
	    var x = d.x, y = d.y, diag = numeric.diag;
	    if(y) return new numeric.T(diag(x),diag(y));
	    return new numeric.T(diag(x));
	}
	numeric.T.eig = function eig() {
	    if(this.y) { throw new Error('eig: not implemented for complex matrices.'); }
	    return numeric.eig(this.x);
	}
	numeric.T.identity = function identity(n) { return new numeric.T(numeric.identity(n)); }
	numeric.T.prototype.getDiag = function getDiag() {
	    var n = numeric;
	    var x = this.x, y = this.y;
	    if(y) { return new n.T(n.getDiag(x),n.getDiag(y)); }
	    return new n.T(n.getDiag(x));
	}

	// 4. Eigenvalues of real matrices

	numeric.house = function house(x) {
	    var v = numeric.clone(x);
	    var s = x[0] >= 0 ? 1 : -1;
	    var alpha = s*numeric.norm2(x);
	    v[0] += alpha;
	    var foo = numeric.norm2(v);
	    if(foo === 0) { /* this should not happen */ throw new Error('eig: internal error'); }
	    return numeric.div(v,foo);
	}

	numeric.toUpperHessenberg = function toUpperHessenberg(me) {
	    var s = numeric.dim(me);
	    if(s.length !== 2 || s[0] !== s[1]) { throw new Error('numeric: toUpperHessenberg() only works on square matrices'); }
	    var m = s[0], i,j,k,x,v,A = numeric.clone(me),B,C,Ai,Ci,Q = numeric.identity(m),Qi;
	    for(j=0;j<m-2;j++) {
	        x = Array(m-j-1);
	        for(i=j+1;i<m;i++) { x[i-j-1] = A[i][j]; }
	        if(numeric.norm2(x)>0) {
	            v = numeric.house(x);
	            B = numeric.getBlock(A,[j+1,j],[m-1,m-1]);
	            C = numeric.tensor(v,numeric.dot(v,B));
	            for(i=j+1;i<m;i++) { Ai = A[i]; Ci = C[i-j-1]; for(k=j;k<m;k++) Ai[k] -= 2*Ci[k-j]; }
	            B = numeric.getBlock(A,[0,j+1],[m-1,m-1]);
	            C = numeric.tensor(numeric.dot(B,v),v);
	            for(i=0;i<m;i++) { Ai = A[i]; Ci = C[i]; for(k=j+1;k<m;k++) Ai[k] -= 2*Ci[k-j-1]; }
	            B = Array(m-j-1);
	            for(i=j+1;i<m;i++) B[i-j-1] = Q[i];
	            C = numeric.tensor(v,numeric.dot(v,B));
	            for(i=j+1;i<m;i++) { Qi = Q[i]; Ci = C[i-j-1]; for(k=0;k<m;k++) Qi[k] -= 2*Ci[k]; }
	        }
	    }
	    return {H:A, Q:Q};
	}

	numeric.epsilon = 2.220446049250313e-16;

	numeric.QRFrancis = function(H,maxiter) {
	    if(typeof maxiter === "undefined") { maxiter = 10000; }
	    H = numeric.clone(H);
	    var H0 = numeric.clone(H);
	    var s = numeric.dim(H),m=s[0],x,v,a,b,c,d,det,tr, Hloc, Q = numeric.identity(m), Qi, Hi, B, C, Ci,i,j,k,iter;
	    if(m<3) { return {Q:Q, B:[ [0,m-1] ]}; }
	    var epsilon = numeric.epsilon;
	    for(iter=0;iter<maxiter;iter++) {
	        for(j=0;j<m-1;j++) {
	            if(Math.abs(H[j+1][j]) < epsilon*(Math.abs(H[j][j])+Math.abs(H[j+1][j+1]))) {
	                var QH1 = numeric.QRFrancis(numeric.getBlock(H,[0,0],[j,j]),maxiter);
	                var QH2 = numeric.QRFrancis(numeric.getBlock(H,[j+1,j+1],[m-1,m-1]),maxiter);
	                B = Array(j+1);
	                for(i=0;i<=j;i++) { B[i] = Q[i]; }
	                C = numeric.dot(QH1.Q,B);
	                for(i=0;i<=j;i++) { Q[i] = C[i]; }
	                B = Array(m-j-1);
	                for(i=j+1;i<m;i++) { B[i-j-1] = Q[i]; }
	                C = numeric.dot(QH2.Q,B);
	                for(i=j+1;i<m;i++) { Q[i] = C[i-j-1]; }
	                return {Q:Q,B:QH1.B.concat(numeric.add(QH2.B,j+1))};
	            }
	        }
	        a = H[m-2][m-2]; b = H[m-2][m-1];
	        c = H[m-1][m-2]; d = H[m-1][m-1];
	        tr = a+d;
	        det = (a*d-b*c);
	        Hloc = numeric.getBlock(H, [0,0], [2,2]);
	        if(tr*tr>=4*det) {
	            var s1,s2;
	            s1 = 0.5*(tr+Math.sqrt(tr*tr-4*det));
	            s2 = 0.5*(tr-Math.sqrt(tr*tr-4*det));
	            Hloc = numeric.add(numeric.sub(numeric.dot(Hloc,Hloc),
	                                           numeric.mul(Hloc,s1+s2)),
	                               numeric.diag(numeric.rep([3],s1*s2)));
	        } else {
	            Hloc = numeric.add(numeric.sub(numeric.dot(Hloc,Hloc),
	                                           numeric.mul(Hloc,tr)),
	                               numeric.diag(numeric.rep([3],det)));
	        }
	        x = [Hloc[0][0],Hloc[1][0],Hloc[2][0]];
	        v = numeric.house(x);
	        B = [H[0],H[1],H[2]];
	        C = numeric.tensor(v,numeric.dot(v,B));
	        for(i=0;i<3;i++) { Hi = H[i]; Ci = C[i]; for(k=0;k<m;k++) Hi[k] -= 2*Ci[k]; }
	        B = numeric.getBlock(H, [0,0],[m-1,2]);
	        C = numeric.tensor(numeric.dot(B,v),v);
	        for(i=0;i<m;i++) { Hi = H[i]; Ci = C[i]; for(k=0;k<3;k++) Hi[k] -= 2*Ci[k]; }
	        B = [Q[0],Q[1],Q[2]];
	        C = numeric.tensor(v,numeric.dot(v,B));
	        for(i=0;i<3;i++) { Qi = Q[i]; Ci = C[i]; for(k=0;k<m;k++) Qi[k] -= 2*Ci[k]; }
	        var J;
	        for(j=0;j<m-2;j++) {
	            for(k=j;k<=j+1;k++) {
	                if(Math.abs(H[k+1][k]) < epsilon*(Math.abs(H[k][k])+Math.abs(H[k+1][k+1]))) {
	                    var QH1 = numeric.QRFrancis(numeric.getBlock(H,[0,0],[k,k]),maxiter);
	                    var QH2 = numeric.QRFrancis(numeric.getBlock(H,[k+1,k+1],[m-1,m-1]),maxiter);
	                    B = Array(k+1);
	                    for(i=0;i<=k;i++) { B[i] = Q[i]; }
	                    C = numeric.dot(QH1.Q,B);
	                    for(i=0;i<=k;i++) { Q[i] = C[i]; }
	                    B = Array(m-k-1);
	                    for(i=k+1;i<m;i++) { B[i-k-1] = Q[i]; }
	                    C = numeric.dot(QH2.Q,B);
	                    for(i=k+1;i<m;i++) { Q[i] = C[i-k-1]; }
	                    return {Q:Q,B:QH1.B.concat(numeric.add(QH2.B,k+1))};
	                }
	            }
	            J = Math.min(m-1,j+3);
	            x = Array(J-j);
	            for(i=j+1;i<=J;i++) { x[i-j-1] = H[i][j]; }
	            v = numeric.house(x);
	            B = numeric.getBlock(H, [j+1,j],[J,m-1]);
	            C = numeric.tensor(v,numeric.dot(v,B));
	            for(i=j+1;i<=J;i++) { Hi = H[i]; Ci = C[i-j-1]; for(k=j;k<m;k++) Hi[k] -= 2*Ci[k-j]; }
	            B = numeric.getBlock(H, [0,j+1],[m-1,J]);
	            C = numeric.tensor(numeric.dot(B,v),v);
	            for(i=0;i<m;i++) { Hi = H[i]; Ci = C[i]; for(k=j+1;k<=J;k++) Hi[k] -= 2*Ci[k-j-1]; }
	            B = Array(J-j);
	            for(i=j+1;i<=J;i++) B[i-j-1] = Q[i];
	            C = numeric.tensor(v,numeric.dot(v,B));
	            for(i=j+1;i<=J;i++) { Qi = Q[i]; Ci = C[i-j-1]; for(k=0;k<m;k++) Qi[k] -= 2*Ci[k]; }
	        }
	    }
	    throw new Error('numeric: eigenvalue iteration does not converge -- increase maxiter?');
	}

	numeric.eig = function eig(A,maxiter) {
	    var QH = numeric.toUpperHessenberg(A);
	    var QB = numeric.QRFrancis(QH.H,maxiter);
	    var T = numeric.T;
	    var n = A.length,i,k,flag = false,B = QB.B,H = numeric.dot(QB.Q,numeric.dot(QH.H,numeric.transpose(QB.Q)));
	    var Q = new T(numeric.dot(QB.Q,QH.Q)),Q0;
	    var m = B.length,j;
	    var a,b,c,d,p1,p2,disc,x,y,p,q,n1,n2;
	    var sqrt = Math.sqrt;
	    for(k=0;k<m;k++) {
	        i = B[k][0];
	        if(i === B[k][1]) {
	            // nothing
	        } else {
	            j = i+1;
	            a = H[i][i];
	            b = H[i][j];
	            c = H[j][i];
	            d = H[j][j];
	            if(b === 0 && c === 0) continue;
	            p1 = -a-d;
	            p2 = a*d-b*c;
	            disc = p1*p1-4*p2;
	            if(disc>=0) {
	                if(p1<0) x = -0.5*(p1-sqrt(disc));
	                else     x = -0.5*(p1+sqrt(disc));
	                n1 = (a-x)*(a-x)+b*b;
	                n2 = c*c+(d-x)*(d-x);
	                if(n1>n2) {
	                    n1 = sqrt(n1);
	                    p = (a-x)/n1;
	                    q = b/n1;
	                } else {
	                    n2 = sqrt(n2);
	                    p = c/n2;
	                    q = (d-x)/n2;
	                }
	                Q0 = new T([[q,-p],[p,q]]);
	                Q.setRows(i,j,Q0.dot(Q.getRows(i,j)));
	            } else {
	                x = -0.5*p1;
	                y = 0.5*sqrt(-disc);
	                n1 = (a-x)*(a-x)+b*b;
	                n2 = c*c+(d-x)*(d-x);
	                if(n1>n2) {
	                    n1 = sqrt(n1+y*y);
	                    p = (a-x)/n1;
	                    q = b/n1;
	                    x = 0;
	                    y /= n1;
	                } else {
	                    n2 = sqrt(n2+y*y);
	                    p = c/n2;
	                    q = (d-x)/n2;
	                    x = y/n2;
	                    y = 0;
	                }
	                Q0 = new T([[q,-p],[p,q]],[[x,y],[y,-x]]);
	                Q.setRows(i,j,Q0.dot(Q.getRows(i,j)));
	            }
	        }
	    }
	    var R = Q.dot(A).dot(Q.transjugate()), n = A.length, E = numeric.T.identity(n);
	    for(j=0;j<n;j++) {
	        if(j>0) {
	            for(k=j-1;k>=0;k--) {
	                var Rk = R.get([k,k]), Rj = R.get([j,j]);
	                if(numeric.neq(Rk.x,Rj.x) || numeric.neq(Rk.y,Rj.y)) {
	                    x = R.getRow(k).getBlock([k],[j-1]);
	                    y = E.getRow(j).getBlock([k],[j-1]);
	                    E.set([j,k],(R.get([k,j]).neg().sub(x.dot(y))).div(Rk.sub(Rj)));
	                } else {
	                    E.setRow(j,E.getRow(k));
	                    continue;
	                }
	            }
	        }
	    }
	    for(j=0;j<n;j++) {
	        x = E.getRow(j);
	        E.setRow(j,x.div(x.norm2()));
	    }
	    E = E.transpose();
	    E = Q.transjugate().dot(E);
	    return { lambda:R.getDiag(), E:E };
	};

	// 5. Compressed Column Storage matrices
	numeric.ccsSparse = function ccsSparse(A) {
	    var m = A.length,n,foo, i,j, counts = [];
	    for(i=m-1;i!==-1;--i) {
	        foo = A[i];
	        for(j in foo) {
	            j = parseInt(j);
	            while(j>=counts.length) counts[counts.length] = 0;
	            if(foo[j]!==0) counts[j]++;
	        }
	    }
	    var n = counts.length;
	    var Ai = Array(n+1);
	    Ai[0] = 0;
	    for(i=0;i<n;++i) Ai[i+1] = Ai[i] + counts[i];
	    var Aj = Array(Ai[n]), Av = Array(Ai[n]);
	    for(i=m-1;i!==-1;--i) {
	        foo = A[i];
	        for(j in foo) {
	            if(foo[j]!==0) {
	                counts[j]--;
	                Aj[Ai[j]+counts[j]] = i;
	                Av[Ai[j]+counts[j]] = foo[j];
	            }
	        }
	    }
	    return [Ai,Aj,Av];
	}
	numeric.ccsFull = function ccsFull(A) {
	    var Ai = A[0], Aj = A[1], Av = A[2], s = numeric.ccsDim(A), m = s[0], n = s[1], i,j,j0,j1,k;
	    var B = numeric.rep([m,n],0);
	    for(i=0;i<n;i++) {
	        j0 = Ai[i];
	        j1 = Ai[i+1];
	        for(j=j0;j<j1;++j) { B[Aj[j]][i] = Av[j]; }
	    }
	    return B;
	}
	numeric.ccsTSolve = function ccsTSolve(A,b,x,bj,xj) {
	    var Ai = A[0], Aj = A[1], Av = A[2],m = Ai.length-1, max = Math.max,n=0;
	    if(typeof bj === "undefined") x = numeric.rep([m],0);
	    if(typeof bj === "undefined") bj = numeric.linspace(0,x.length-1);
	    if(typeof xj === "undefined") xj = [];
	    function dfs(j) {
	        var k;
	        if(x[j] !== 0) return;
	        x[j] = 1;
	        for(k=Ai[j];k<Ai[j+1];++k) dfs(Aj[k]);
	        xj[n] = j;
	        ++n;
	    }
	    var i,j,j0,j1,k,l,l0,l1,a;
	    for(i=bj.length-1;i!==-1;--i) { dfs(bj[i]); }
	    xj.length = n;
	    for(i=xj.length-1;i!==-1;--i) { x[xj[i]] = 0; }
	    for(i=bj.length-1;i!==-1;--i) { j = bj[i]; x[j] = b[j]; }
	    for(i=xj.length-1;i!==-1;--i) {
	        j = xj[i];
	        j0 = Ai[j];
	        j1 = max(Ai[j+1],j0);
	        for(k=j0;k!==j1;++k) { if(Aj[k] === j) { x[j] /= Av[k]; break; } }
	        a = x[j];
	        for(k=j0;k!==j1;++k) {
	            l = Aj[k];
	            if(l !== j) x[l] -= a*Av[k];
	        }
	    }
	    return x;
	}
	numeric.ccsDFS = function ccsDFS(n) {
	    this.k = Array(n);
	    this.k1 = Array(n);
	    this.j = Array(n);
	}
	numeric.ccsDFS.prototype.dfs = function dfs(J,Ai,Aj,x,xj,Pinv) {
	    var m = 0,foo,n=xj.length;
	    var k = this.k, k1 = this.k1, j = this.j,km,k11;
	    if(x[J]!==0) return;
	    x[J] = 1;
	    j[0] = J;
	    k[0] = km = Ai[J];
	    k1[0] = k11 = Ai[J+1];
	    while(1) {
	        if(km >= k11) {
	            xj[n] = j[m];
	            if(m===0) return;
	            ++n;
	            --m;
	            km = k[m];
	            k11 = k1[m];
	        } else {
	            foo = Pinv[Aj[km]];
	            if(x[foo] === 0) {
	                x[foo] = 1;
	                k[m] = km;
	                ++m;
	                j[m] = foo;
	                km = Ai[foo];
	                k1[m] = k11 = Ai[foo+1];
	            } else ++km;
	        }
	    }
	}
	numeric.ccsLPSolve = function ccsLPSolve(A,B,x,xj,I,Pinv,dfs) {
	    var Ai = A[0], Aj = A[1], Av = A[2],m = Ai.length-1, n=0;
	    var Bi = B[0], Bj = B[1], Bv = B[2];
	    
	    var i,i0,i1,j,J,j0,j1,k,l,l0,l1,a;
	    i0 = Bi[I];
	    i1 = Bi[I+1];
	    xj.length = 0;
	    for(i=i0;i<i1;++i) { dfs.dfs(Pinv[Bj[i]],Ai,Aj,x,xj,Pinv); }
	    for(i=xj.length-1;i!==-1;--i) { x[xj[i]] = 0; }
	    for(i=i0;i!==i1;++i) { j = Pinv[Bj[i]]; x[j] = Bv[i]; }
	    for(i=xj.length-1;i!==-1;--i) {
	        j = xj[i];
	        j0 = Ai[j];
	        j1 = Ai[j+1];
	        for(k=j0;k<j1;++k) { if(Pinv[Aj[k]] === j) { x[j] /= Av[k]; break; } }
	        a = x[j];
	        for(k=j0;k<j1;++k) {
	            l = Pinv[Aj[k]];
	            if(l !== j) x[l] -= a*Av[k];
	        }
	    }
	    return x;
	}
	numeric.ccsLUP1 = function ccsLUP1(A,threshold) {
	    var m = A[0].length-1;
	    var L = [numeric.rep([m+1],0),[],[]], U = [numeric.rep([m+1], 0),[],[]];
	    var Li = L[0], Lj = L[1], Lv = L[2], Ui = U[0], Uj = U[1], Uv = U[2];
	    var x = numeric.rep([m],0), xj = numeric.rep([m],0);
	    var i,j,k,j0,j1,a,e,c,d,K;
	    var sol = numeric.ccsLPSolve, max = Math.max, abs = Math.abs;
	    var P = numeric.linspace(0,m-1),Pinv = numeric.linspace(0,m-1);
	    var dfs = new numeric.ccsDFS(m);
	    if(typeof threshold === "undefined") { threshold = 1; }
	    for(i=0;i<m;++i) {
	        sol(L,A,x,xj,i,Pinv,dfs);
	        a = -1;
	        e = -1;
	        for(j=xj.length-1;j!==-1;--j) {
	            k = xj[j];
	            if(k <= i) continue;
	            c = abs(x[k]);
	            if(c > a) { e = k; a = c; }
	        }
	        if(abs(x[i])<threshold*a) {
	            j = P[i];
	            a = P[e];
	            P[i] = a; Pinv[a] = i;
	            P[e] = j; Pinv[j] = e;
	            a = x[i]; x[i] = x[e]; x[e] = a;
	        }
	        a = Li[i];
	        e = Ui[i];
	        d = x[i];
	        Lj[a] = P[i];
	        Lv[a] = 1;
	        ++a;
	        for(j=xj.length-1;j!==-1;--j) {
	            k = xj[j];
	            c = x[k];
	            xj[j] = 0;
	            x[k] = 0;
	            if(k<=i) { Uj[e] = k; Uv[e] = c;   ++e; }
	            else     { Lj[a] = P[k]; Lv[a] = c/d; ++a; }
	        }
	        Li[i+1] = a;
	        Ui[i+1] = e;
	    }
	    for(j=Lj.length-1;j!==-1;--j) { Lj[j] = Pinv[Lj[j]]; }
	    return {L:L, U:U, P:P, Pinv:Pinv};
	}
	numeric.ccsDFS0 = function ccsDFS0(n) {
	    this.k = Array(n);
	    this.k1 = Array(n);
	    this.j = Array(n);
	}
	numeric.ccsDFS0.prototype.dfs = function dfs(J,Ai,Aj,x,xj,Pinv,P) {
	    var m = 0,foo,n=xj.length;
	    var k = this.k, k1 = this.k1, j = this.j,km,k11;
	    if(x[J]!==0) return;
	    x[J] = 1;
	    j[0] = J;
	    k[0] = km = Ai[Pinv[J]];
	    k1[0] = k11 = Ai[Pinv[J]+1];
	    while(1) {
	        if(isNaN(km)) throw new Error("Ow!");
	        if(km >= k11) {
	            xj[n] = Pinv[j[m]];
	            if(m===0) return;
	            ++n;
	            --m;
	            km = k[m];
	            k11 = k1[m];
	        } else {
	            foo = Aj[km];
	            if(x[foo] === 0) {
	                x[foo] = 1;
	                k[m] = km;
	                ++m;
	                j[m] = foo;
	                foo = Pinv[foo];
	                km = Ai[foo];
	                k1[m] = k11 = Ai[foo+1];
	            } else ++km;
	        }
	    }
	}
	numeric.ccsLPSolve0 = function ccsLPSolve0(A,B,y,xj,I,Pinv,P,dfs) {
	    var Ai = A[0], Aj = A[1], Av = A[2],m = Ai.length-1, n=0;
	    var Bi = B[0], Bj = B[1], Bv = B[2];
	    
	    var i,i0,i1,j,J,j0,j1,k,l,l0,l1,a;
	    i0 = Bi[I];
	    i1 = Bi[I+1];
	    xj.length = 0;
	    for(i=i0;i<i1;++i) { dfs.dfs(Bj[i],Ai,Aj,y,xj,Pinv,P); }
	    for(i=xj.length-1;i!==-1;--i) { j = xj[i]; y[P[j]] = 0; }
	    for(i=i0;i!==i1;++i) { j = Bj[i]; y[j] = Bv[i]; }
	    for(i=xj.length-1;i!==-1;--i) {
	        j = xj[i];
	        l = P[j];
	        j0 = Ai[j];
	        j1 = Ai[j+1];
	        for(k=j0;k<j1;++k) { if(Aj[k] === l) { y[l] /= Av[k]; break; } }
	        a = y[l];
	        for(k=j0;k<j1;++k) y[Aj[k]] -= a*Av[k];
	        y[l] = a;
	    }
	}
	numeric.ccsLUP0 = function ccsLUP0(A,threshold) {
	    var m = A[0].length-1;
	    var L = [numeric.rep([m+1],0),[],[]], U = [numeric.rep([m+1], 0),[],[]];
	    var Li = L[0], Lj = L[1], Lv = L[2], Ui = U[0], Uj = U[1], Uv = U[2];
	    var y = numeric.rep([m],0), xj = numeric.rep([m],0);
	    var i,j,k,j0,j1,a,e,c,d,K;
	    var sol = numeric.ccsLPSolve0, max = Math.max, abs = Math.abs;
	    var P = numeric.linspace(0,m-1),Pinv = numeric.linspace(0,m-1);
	    var dfs = new numeric.ccsDFS0(m);
	    if(typeof threshold === "undefined") { threshold = 1; }
	    for(i=0;i<m;++i) {
	        sol(L,A,y,xj,i,Pinv,P,dfs);
	        a = -1;
	        e = -1;
	        for(j=xj.length-1;j!==-1;--j) {
	            k = xj[j];
	            if(k <= i) continue;
	            c = abs(y[P[k]]);
	            if(c > a) { e = k; a = c; }
	        }
	        if(abs(y[P[i]])<threshold*a) {
	            j = P[i];
	            a = P[e];
	            P[i] = a; Pinv[a] = i;
	            P[e] = j; Pinv[j] = e;
	        }
	        a = Li[i];
	        e = Ui[i];
	        d = y[P[i]];
	        Lj[a] = P[i];
	        Lv[a] = 1;
	        ++a;
	        for(j=xj.length-1;j!==-1;--j) {
	            k = xj[j];
	            c = y[P[k]];
	            xj[j] = 0;
	            y[P[k]] = 0;
	            if(k<=i) { Uj[e] = k; Uv[e] = c;   ++e; }
	            else     { Lj[a] = P[k]; Lv[a] = c/d; ++a; }
	        }
	        Li[i+1] = a;
	        Ui[i+1] = e;
	    }
	    for(j=Lj.length-1;j!==-1;--j) { Lj[j] = Pinv[Lj[j]]; }
	    return {L:L, U:U, P:P, Pinv:Pinv};
	}
	numeric.ccsLUP = numeric.ccsLUP0;

	numeric.ccsDim = function ccsDim(A) { return [numeric.sup(A[1])+1,A[0].length-1]; }
	numeric.ccsGetBlock = function ccsGetBlock(A,i,j) {
	    var s = numeric.ccsDim(A),m=s[0],n=s[1];
	    if(typeof i === "undefined") { i = numeric.linspace(0,m-1); }
	    else if(typeof i === "number") { i = [i]; }
	    if(typeof j === "undefined") { j = numeric.linspace(0,n-1); }
	    else if(typeof j === "number") { j = [j]; }
	    var p,p0,p1,P = i.length,q,Q = j.length,r,jq,ip;
	    var Bi = numeric.rep([n],0), Bj=[], Bv=[], B = [Bi,Bj,Bv];
	    var Ai = A[0], Aj = A[1], Av = A[2];
	    var x = numeric.rep([m],0),count=0,flags = numeric.rep([m],0);
	    for(q=0;q<Q;++q) {
	        jq = j[q];
	        var q0 = Ai[jq];
	        var q1 = Ai[jq+1];
	        for(p=q0;p<q1;++p) {
	            r = Aj[p];
	            flags[r] = 1;
	            x[r] = Av[p];
	        }
	        for(p=0;p<P;++p) {
	            ip = i[p];
	            if(flags[ip]) {
	                Bj[count] = p;
	                Bv[count] = x[i[p]];
	                ++count;
	            }
	        }
	        for(p=q0;p<q1;++p) {
	            r = Aj[p];
	            flags[r] = 0;
	        }
	        Bi[q+1] = count;
	    }
	    return B;
	}

	numeric.ccsDot = function ccsDot(A,B) {
	    var Ai = A[0], Aj = A[1], Av = A[2];
	    var Bi = B[0], Bj = B[1], Bv = B[2];
	    var sA = numeric.ccsDim(A), sB = numeric.ccsDim(B);
	    var m = sA[0], n = sA[1], o = sB[1];
	    var x = numeric.rep([m],0), flags = numeric.rep([m],0), xj = Array(m);
	    var Ci = numeric.rep([o],0), Cj = [], Cv = [], C = [Ci,Cj,Cv];
	    var i,j,k,j0,j1,i0,i1,l,p,a,b;
	    for(k=0;k!==o;++k) {
	        j0 = Bi[k];
	        j1 = Bi[k+1];
	        p = 0;
	        for(j=j0;j<j1;++j) {
	            a = Bj[j];
	            b = Bv[j];
	            i0 = Ai[a];
	            i1 = Ai[a+1];
	            for(i=i0;i<i1;++i) {
	                l = Aj[i];
	                if(flags[l]===0) {
	                    xj[p] = l;
	                    flags[l] = 1;
	                    p = p+1;
	                }
	                x[l] = x[l] + Av[i]*b;
	            }
	        }
	        j0 = Ci[k];
	        j1 = j0+p;
	        Ci[k+1] = j1;
	        for(j=p-1;j!==-1;--j) {
	            b = j0+j;
	            i = xj[j];
	            Cj[b] = i;
	            Cv[b] = x[i];
	            flags[i] = 0;
	            x[i] = 0;
	        }
	        Ci[k+1] = Ci[k]+p;
	    }
	    return C;
	}

	numeric.ccsLUPSolve = function ccsLUPSolve(LUP,B) {
	    var L = LUP.L, U = LUP.U, P = LUP.P;
	    var Bi = B[0];
	    var flag = false;
	    if(typeof Bi !== "object") { B = [[0,B.length],numeric.linspace(0,B.length-1),B]; Bi = B[0]; flag = true; }
	    var Bj = B[1], Bv = B[2];
	    var n = L[0].length-1, m = Bi.length-1;
	    var x = numeric.rep([n],0), xj = Array(n);
	    var b = numeric.rep([n],0), bj = Array(n);
	    var Xi = numeric.rep([m+1],0), Xj = [], Xv = [];
	    var sol = numeric.ccsTSolve;
	    var i,j,j0,j1,k,J,N=0;
	    for(i=0;i<m;++i) {
	        k = 0;
	        j0 = Bi[i];
	        j1 = Bi[i+1];
	        for(j=j0;j<j1;++j) { 
	            J = LUP.Pinv[Bj[j]];
	            bj[k] = J;
	            b[J] = Bv[j];
	            ++k;
	        }
	        bj.length = k;
	        sol(L,b,x,bj,xj);
	        for(j=bj.length-1;j!==-1;--j) b[bj[j]] = 0;
	        sol(U,x,b,xj,bj);
	        if(flag) return b;
	        for(j=xj.length-1;j!==-1;--j) x[xj[j]] = 0;
	        for(j=bj.length-1;j!==-1;--j) {
	            J = bj[j];
	            Xj[N] = J;
	            Xv[N] = b[J];
	            b[J] = 0;
	            ++N;
	        }
	        Xi[i+1] = N;
	    }
	    return [Xi,Xj,Xv];
	}

	numeric.ccsbinop = function ccsbinop(body,setup) {
	    if(typeof setup === "undefined") setup='';
	    return Function('X','Y',
	            'var Xi = X[0], Xj = X[1], Xv = X[2];\n'+
	            'var Yi = Y[0], Yj = Y[1], Yv = Y[2];\n'+
	            'var n = Xi.length-1,m = Math.max(numeric.sup(Xj),numeric.sup(Yj))+1;\n'+
	            'var Zi = numeric.rep([n+1],0), Zj = [], Zv = [];\n'+
	            'var x = numeric.rep([m],0),y = numeric.rep([m],0);\n'+
	            'var xk,yk,zk;\n'+
	            'var i,j,j0,j1,k,p=0;\n'+
	            setup+
	            'for(i=0;i<n;++i) {\n'+
	            '  j0 = Xi[i]; j1 = Xi[i+1];\n'+
	            '  for(j=j0;j!==j1;++j) {\n'+
	            '    k = Xj[j];\n'+
	            '    x[k] = 1;\n'+
	            '    Zj[p] = k;\n'+
	            '    ++p;\n'+
	            '  }\n'+
	            '  j0 = Yi[i]; j1 = Yi[i+1];\n'+
	            '  for(j=j0;j!==j1;++j) {\n'+
	            '    k = Yj[j];\n'+
	            '    y[k] = Yv[j];\n'+
	            '    if(x[k] === 0) {\n'+
	            '      Zj[p] = k;\n'+
	            '      ++p;\n'+
	            '    }\n'+
	            '  }\n'+
	            '  Zi[i+1] = p;\n'+
	            '  j0 = Xi[i]; j1 = Xi[i+1];\n'+
	            '  for(j=j0;j!==j1;++j) x[Xj[j]] = Xv[j];\n'+
	            '  j0 = Zi[i]; j1 = Zi[i+1];\n'+
	            '  for(j=j0;j!==j1;++j) {\n'+
	            '    k = Zj[j];\n'+
	            '    xk = x[k];\n'+
	            '    yk = y[k];\n'+
	            body+'\n'+
	            '    Zv[j] = zk;\n'+
	            '  }\n'+
	            '  j0 = Xi[i]; j1 = Xi[i+1];\n'+
	            '  for(j=j0;j!==j1;++j) x[Xj[j]] = 0;\n'+
	            '  j0 = Yi[i]; j1 = Yi[i+1];\n'+
	            '  for(j=j0;j!==j1;++j) y[Yj[j]] = 0;\n'+
	            '}\n'+
	            'return [Zi,Zj,Zv];'
	            );
	};

	(function() {
	    var k,A,B,C;
	    for(k in numeric.ops2) {
	        if(isFinite(eval('1'+numeric.ops2[k]+'0'))) A = '[Y[0],Y[1],numeric.'+k+'(X,Y[2])]';
	        else A = 'NaN';
	        if(isFinite(eval('0'+numeric.ops2[k]+'1'))) B = '[X[0],X[1],numeric.'+k+'(X[2],Y)]';
	        else B = 'NaN';
	        if(isFinite(eval('1'+numeric.ops2[k]+'0')) && isFinite(eval('0'+numeric.ops2[k]+'1'))) C = 'numeric.ccs'+k+'MM(X,Y)';
	        else C = 'NaN';
	        numeric['ccs'+k+'MM'] = numeric.ccsbinop('zk = xk '+numeric.ops2[k]+'yk;');
	        numeric['ccs'+k] = Function('X','Y',
	                'if(typeof X === "number") return '+A+';\n'+
	                'if(typeof Y === "number") return '+B+';\n'+
	                'return '+C+';\n'
	                );
	    }
	}());

	numeric.ccsScatter = function ccsScatter(A) {
	    var Ai = A[0], Aj = A[1], Av = A[2];
	    var n = numeric.sup(Aj)+1,m=Ai.length;
	    var Ri = numeric.rep([n],0),Rj=Array(m), Rv = Array(m);
	    var counts = numeric.rep([n],0),i;
	    for(i=0;i<m;++i) counts[Aj[i]]++;
	    for(i=0;i<n;++i) Ri[i+1] = Ri[i] + counts[i];
	    var ptr = Ri.slice(0),k,Aii;
	    for(i=0;i<m;++i) {
	        Aii = Aj[i];
	        k = ptr[Aii];
	        Rj[k] = Ai[i];
	        Rv[k] = Av[i];
	        ptr[Aii]=ptr[Aii]+1;
	    }
	    return [Ri,Rj,Rv];
	}

	numeric.ccsGather = function ccsGather(A) {
	    var Ai = A[0], Aj = A[1], Av = A[2];
	    var n = Ai.length-1,m = Aj.length;
	    var Ri = Array(m), Rj = Array(m), Rv = Array(m);
	    var i,j,j0,j1,p;
	    p=0;
	    for(i=0;i<n;++i) {
	        j0 = Ai[i];
	        j1 = Ai[i+1];
	        for(j=j0;j!==j1;++j) {
	            Rj[p] = i;
	            Ri[p] = Aj[j];
	            Rv[p] = Av[j];
	            ++p;
	        }
	    }
	    return [Ri,Rj,Rv];
	}

	// The following sparse linear algebra routines are deprecated.

	numeric.sdim = function dim(A,ret,k) {
	    if(typeof ret === "undefined") { ret = []; }
	    if(typeof A !== "object") return ret;
	    if(typeof k === "undefined") { k=0; }
	    if(!(k in ret)) { ret[k] = 0; }
	    if(A.length > ret[k]) ret[k] = A.length;
	    var i;
	    for(i in A) {
	        if(A.hasOwnProperty(i)) dim(A[i],ret,k+1);
	    }
	    return ret;
	};

	numeric.sclone = function clone(A,k,n) {
	    if(typeof k === "undefined") { k=0; }
	    if(typeof n === "undefined") { n = numeric.sdim(A).length; }
	    var i,ret = Array(A.length);
	    if(k === n-1) {
	        for(i in A) { if(A.hasOwnProperty(i)) ret[i] = A[i]; }
	        return ret;
	    }
	    for(i in A) {
	        if(A.hasOwnProperty(i)) ret[i] = clone(A[i],k+1,n);
	    }
	    return ret;
	}

	numeric.sdiag = function diag(d) {
	    var n = d.length,i,ret = Array(n),i1,i2,i3;
	    for(i=n-1;i>=1;i-=2) {
	        i1 = i-1;
	        ret[i] = []; ret[i][i] = d[i];
	        ret[i1] = []; ret[i1][i1] = d[i1];
	    }
	    if(i===0) { ret[0] = []; ret[0][0] = d[i]; }
	    return ret;
	}

	numeric.sidentity = function identity(n) { return numeric.sdiag(numeric.rep([n],1)); }

	numeric.stranspose = function transpose(A) {
	    var ret = [], n = A.length, i,j,Ai;
	    for(i in A) {
	        if(!(A.hasOwnProperty(i))) continue;
	        Ai = A[i];
	        for(j in Ai) {
	            if(!(Ai.hasOwnProperty(j))) continue;
	            if(typeof ret[j] !== "object") { ret[j] = []; }
	            ret[j][i] = Ai[j];
	        }
	    }
	    return ret;
	}

	numeric.sLUP = function LUP(A,tol) {
	    throw new Error("The function numeric.sLUP had a bug in it and has been removed. Please use the new numeric.ccsLUP function instead.");
	};

	numeric.sdotMM = function dotMM(A,B) {
	    var p = A.length, q = B.length, BT = numeric.stranspose(B), r = BT.length, Ai, BTk;
	    var i,j,k,accum;
	    var ret = Array(p),reti;
	    for(i=p-1;i>=0;i--) {
	        reti = [];
	        Ai = A[i];
	        for(k=r-1;k>=0;k--) {
	            accum = 0;
	            BTk = BT[k];
	            for(j in Ai) {
	                if(!(Ai.hasOwnProperty(j))) continue;
	                if(j in BTk) { accum += Ai[j]*BTk[j]; }
	            }
	            if(accum) reti[k] = accum;
	        }
	        ret[i] = reti;
	    }
	    return ret;
	}

	numeric.sdotMV = function dotMV(A,x) {
	    var p = A.length, Ai, i,j;
	    var ret = Array(p), accum;
	    for(i=p-1;i>=0;i--) {
	        Ai = A[i];
	        accum = 0;
	        for(j in Ai) {
	            if(!(Ai.hasOwnProperty(j))) continue;
	            if(x[j]) accum += Ai[j]*x[j];
	        }
	        if(accum) ret[i] = accum;
	    }
	    return ret;
	}

	numeric.sdotVM = function dotMV(x,A) {
	    var i,j,Ai,alpha;
	    var ret = [], accum;
	    for(i in x) {
	        if(!x.hasOwnProperty(i)) continue;
	        Ai = A[i];
	        alpha = x[i];
	        for(j in Ai) {
	            if(!Ai.hasOwnProperty(j)) continue;
	            if(!ret[j]) { ret[j] = 0; }
	            ret[j] += alpha*Ai[j];
	        }
	    }
	    return ret;
	}

	numeric.sdotVV = function dotVV(x,y) {
	    var i,ret=0;
	    for(i in x) { if(x[i] && y[i]) ret+= x[i]*y[i]; }
	    return ret;
	}

	numeric.sdot = function dot(A,B) {
	    var m = numeric.sdim(A).length, n = numeric.sdim(B).length;
	    var k = m*1000+n;
	    switch(k) {
	    case 0: return A*B;
	    case 1001: return numeric.sdotVV(A,B);
	    case 2001: return numeric.sdotMV(A,B);
	    case 1002: return numeric.sdotVM(A,B);
	    case 2002: return numeric.sdotMM(A,B);
	    default: throw new Error('numeric.sdot not implemented for tensors of order '+m+' and '+n);
	    }
	}

	numeric.sscatter = function scatter(V) {
	    var n = V[0].length, Vij, i, j, m = V.length, A = [], Aj;
	    for(i=n-1;i>=0;--i) {
	        if(!V[m-1][i]) continue;
	        Aj = A;
	        for(j=0;j<m-2;j++) {
	            Vij = V[j][i];
	            if(!Aj[Vij]) Aj[Vij] = [];
	            Aj = Aj[Vij];
	        }
	        Aj[V[j][i]] = V[j+1][i];
	    }
	    return A;
	}

	numeric.sgather = function gather(A,ret,k) {
	    if(typeof ret === "undefined") ret = [];
	    if(typeof k === "undefined") k = [];
	    var n,i,Ai;
	    n = k.length;
	    for(i in A) {
	        if(A.hasOwnProperty(i)) {
	            k[n] = parseInt(i);
	            Ai = A[i];
	            if(typeof Ai === "number") {
	                if(Ai) {
	                    if(ret.length === 0) {
	                        for(i=n+1;i>=0;--i) ret[i] = [];
	                    }
	                    for(i=n;i>=0;--i) ret[i].push(k[i]);
	                    ret[n+1].push(Ai);
	                }
	            } else gather(Ai,ret,k);
	        }
	    }
	    if(k.length>n) k.pop();
	    return ret;
	}

	// 6. Coordinate matrices
	numeric.cLU = function LU(A) {
	    var I = A[0], J = A[1], V = A[2];
	    var p = I.length, m=0, i,j,k,a,b,c;
	    for(i=0;i<p;i++) if(I[i]>m) m=I[i];
	    m++;
	    var L = Array(m), U = Array(m), left = numeric.rep([m],Infinity), right = numeric.rep([m],-Infinity);
	    var Ui, Uj,alpha;
	    for(k=0;k<p;k++) {
	        i = I[k];
	        j = J[k];
	        if(j<left[i]) left[i] = j;
	        if(j>right[i]) right[i] = j;
	    }
	    for(i=0;i<m-1;i++) { if(right[i] > right[i+1]) right[i+1] = right[i]; }
	    for(i=m-1;i>=1;i--) { if(left[i]<left[i-1]) left[i-1] = left[i]; }
	    var countL = 0, countU = 0;
	    for(i=0;i<m;i++) {
	        U[i] = numeric.rep([right[i]-left[i]+1],0);
	        L[i] = numeric.rep([i-left[i]],0);
	        countL += i-left[i]+1;
	        countU += right[i]-i+1;
	    }
	    for(k=0;k<p;k++) { i = I[k]; U[i][J[k]-left[i]] = V[k]; }
	    for(i=0;i<m-1;i++) {
	        a = i-left[i];
	        Ui = U[i];
	        for(j=i+1;left[j]<=i && j<m;j++) {
	            b = i-left[j];
	            c = right[i]-i;
	            Uj = U[j];
	            alpha = Uj[b]/Ui[a];
	            if(alpha) {
	                for(k=1;k<=c;k++) { Uj[k+b] -= alpha*Ui[k+a]; }
	                L[j][i-left[j]] = alpha;
	            }
	        }
	    }
	    var Ui = [], Uj = [], Uv = [], Li = [], Lj = [], Lv = [];
	    var p,q,foo;
	    p=0; q=0;
	    for(i=0;i<m;i++) {
	        a = left[i];
	        b = right[i];
	        foo = U[i];
	        for(j=i;j<=b;j++) {
	            if(foo[j-a]) {
	                Ui[p] = i;
	                Uj[p] = j;
	                Uv[p] = foo[j-a];
	                p++;
	            }
	        }
	        foo = L[i];
	        for(j=a;j<i;j++) {
	            if(foo[j-a]) {
	                Li[q] = i;
	                Lj[q] = j;
	                Lv[q] = foo[j-a];
	                q++;
	            }
	        }
	        Li[q] = i;
	        Lj[q] = i;
	        Lv[q] = 1;
	        q++;
	    }
	    return {U:[Ui,Uj,Uv], L:[Li,Lj,Lv]};
	};

	numeric.cLUsolve = function LUsolve(lu,b) {
	    var L = lu.L, U = lu.U, ret = numeric.clone(b);
	    var Li = L[0], Lj = L[1], Lv = L[2];
	    var Ui = U[0], Uj = U[1], Uv = U[2];
	    var p = Ui.length, q = Li.length;
	    var m = ret.length,i,j,k;
	    k = 0;
	    for(i=0;i<m;i++) {
	        while(Lj[k] < i) {
	            ret[i] -= Lv[k]*ret[Lj[k]];
	            k++;
	        }
	        k++;
	    }
	    k = p-1;
	    for(i=m-1;i>=0;i--) {
	        while(Uj[k] > i) {
	            ret[i] -= Uv[k]*ret[Uj[k]];
	            k--;
	        }
	        ret[i] /= Uv[k];
	        k--;
	    }
	    return ret;
	};

	numeric.cgrid = function grid(n,shape) {
	    if(typeof n === "number") n = [n,n];
	    var ret = numeric.rep(n,-1);
	    var i,j,count;
	    if(typeof shape !== "function") {
	        switch(shape) {
	        case 'L':
	            shape = function(i,j) { return (i>=n[0]/2 || j<n[1]/2); }
	            break;
	        default:
	            shape = function(i,j) { return true; };
	            break;
	        }
	    }
	    count=0;
	    for(i=1;i<n[0]-1;i++) for(j=1;j<n[1]-1;j++) 
	        if(shape(i,j)) {
	            ret[i][j] = count;
	            count++;
	        }
	    return ret;
	}

	numeric.cdelsq = function delsq(g) {
	    var dir = [[-1,0],[0,-1],[0,1],[1,0]];
	    var s = numeric.dim(g), m = s[0], n = s[1], i,j,k,p,q;
	    var Li = [], Lj = [], Lv = [];
	    for(i=1;i<m-1;i++) for(j=1;j<n-1;j++) {
	        if(g[i][j]<0) continue;
	        for(k=0;k<4;k++) {
	            p = i+dir[k][0];
	            q = j+dir[k][1];
	            if(g[p][q]<0) continue;
	            Li.push(g[i][j]);
	            Lj.push(g[p][q]);
	            Lv.push(-1);
	        }
	        Li.push(g[i][j]);
	        Lj.push(g[i][j]);
	        Lv.push(4);
	    }
	    return [Li,Lj,Lv];
	}

	numeric.cdotMV = function dotMV(A,x) {
	    var ret, Ai = A[0], Aj = A[1], Av = A[2],k,p=Ai.length,N;
	    N=0;
	    for(k=0;k<p;k++) { if(Ai[k]>N) N = Ai[k]; }
	    N++;
	    ret = numeric.rep([N],0);
	    for(k=0;k<p;k++) { ret[Ai[k]]+=Av[k]*x[Aj[k]]; }
	    return ret;
	}

	// 7. Splines

	numeric.Spline = function Spline(x,yl,yr,kl,kr) { this.x = x; this.yl = yl; this.yr = yr; this.kl = kl; this.kr = kr; }
	numeric.Spline.prototype._at = function _at(x1,p) {
	    var x = this.x;
	    var yl = this.yl;
	    var yr = this.yr;
	    var kl = this.kl;
	    var kr = this.kr;
	    var x1,a,b,t;
	    var add = numeric.add, sub = numeric.sub, mul = numeric.mul;
	    a = sub(mul(kl[p],x[p+1]-x[p]),sub(yr[p+1],yl[p]));
	    b = add(mul(kr[p+1],x[p]-x[p+1]),sub(yr[p+1],yl[p]));
	    t = (x1-x[p])/(x[p+1]-x[p]);
	    var s = t*(1-t);
	    return add(add(add(mul(1-t,yl[p]),mul(t,yr[p+1])),mul(a,s*(1-t))),mul(b,s*t));
	}
	numeric.Spline.prototype.at = function at(x0) {
	    if(typeof x0 === "number") {
	        var x = this.x;
	        var n = x.length;
	        var p,q,mid,floor = Math.floor,a,b,t;
	        p = 0;
	        q = n-1;
	        while(q-p>1) {
	            mid = floor((p+q)/2);
	            if(x[mid] <= x0) p = mid;
	            else q = mid;
	        }
	        return this._at(x0,p);
	    }
	    var n = x0.length, i, ret = Array(n);
	    for(i=n-1;i!==-1;--i) ret[i] = this.at(x0[i]);
	    return ret;
	}
	numeric.Spline.prototype.diff = function diff() {
	    var x = this.x;
	    var yl = this.yl;
	    var yr = this.yr;
	    var kl = this.kl;
	    var kr = this.kr;
	    var n = yl.length;
	    var i,dx,dy;
	    var zl = kl, zr = kr, pl = Array(n), pr = Array(n);
	    var add = numeric.add, mul = numeric.mul, div = numeric.div, sub = numeric.sub;
	    for(i=n-1;i!==-1;--i) {
	        dx = x[i+1]-x[i];
	        dy = sub(yr[i+1],yl[i]);
	        pl[i] = div(add(mul(dy, 6),mul(kl[i],-4*dx),mul(kr[i+1],-2*dx)),dx*dx);
	        pr[i+1] = div(add(mul(dy,-6),mul(kl[i], 2*dx),mul(kr[i+1], 4*dx)),dx*dx);
	    }
	    return new numeric.Spline(x,zl,zr,pl,pr);
	}
	numeric.Spline.prototype.roots = function roots() {
	    function sqr(x) { return x*x; }
	    function heval(y0,y1,k0,k1,x) {
	        var A = k0*2-(y1-y0);
	        var B = -k1*2+(y1-y0);
	        var t = (x+1)*0.5;
	        var s = t*(1-t);
	        return (1-t)*y0+t*y1+A*s*(1-t)+B*s*t;
	    }
	    var ret = [];
	    var x = this.x, yl = this.yl, yr = this.yr, kl = this.kl, kr = this.kr;
	    if(typeof yl[0] === "number") {
	        yl = [yl];
	        yr = [yr];
	        kl = [kl];
	        kr = [kr];
	    }
	    var m = yl.length,n=x.length-1,i,j,k,y,s,t;
	    var ai,bi,ci,di, ret = Array(m),ri,k0,k1,y0,y1,A,B,D,dx,cx,stops,z0,z1,zm,t0,t1,tm;
	    var sqrt = Math.sqrt;
	    for(i=0;i!==m;++i) {
	        ai = yl[i];
	        bi = yr[i];
	        ci = kl[i];
	        di = kr[i];
	        ri = [];
	        for(j=0;j!==n;j++) {
	            if(j>0 && bi[j]*ai[j]<0) ri.push(x[j]);
	            dx = (x[j+1]-x[j]);
	            cx = x[j];
	            y0 = ai[j];
	            y1 = bi[j+1];
	            k0 = ci[j]/dx;
	            k1 = di[j+1]/dx;
	            D = sqr(k0-k1+3*(y0-y1)) + 12*k1*y0;
	            A = k1+3*y0+2*k0-3*y1;
	            B = 3*(k1+k0+2*(y0-y1));
	            if(D<=0) {
	                z0 = A/B;
	                if(z0>x[j] && z0<x[j+1]) stops = [x[j],z0,x[j+1]];
	                else stops = [x[j],x[j+1]];
	            } else {
	                z0 = (A-sqrt(D))/B;
	                z1 = (A+sqrt(D))/B;
	                stops = [x[j]];
	                if(z0>x[j] && z0<x[j+1]) stops.push(z0);
	                if(z1>x[j] && z1<x[j+1]) stops.push(z1);
	                stops.push(x[j+1]);
	            }
	            t0 = stops[0];
	            z0 = this._at(t0,j);
	            for(k=0;k<stops.length-1;k++) {
	                t1 = stops[k+1];
	                z1 = this._at(t1,j);
	                if(z0 === 0) {
	                    ri.push(t0); 
	                    t0 = t1;
	                    z0 = z1;
	                    continue;
	                }
	                if(z1 === 0 || z0*z1>0) {
	                    t0 = t1;
	                    z0 = z1;
	                    continue;
	                }
	                var side = 0;
	                while(1) {
	                    tm = (z0*t1-z1*t0)/(z0-z1);
	                    if(tm <= t0 || tm >= t1) { break; }
	                    zm = this._at(tm,j);
	                    if(zm*z1>0) {
	                        t1 = tm;
	                        z1 = zm;
	                        if(side === -1) z0*=0.5;
	                        side = -1;
	                    } else if(zm*z0>0) {
	                        t0 = tm;
	                        z0 = zm;
	                        if(side === 1) z1*=0.5;
	                        side = 1;
	                    } else break;
	                }
	                ri.push(tm);
	                t0 = stops[k+1];
	                z0 = this._at(t0, j);
	            }
	            if(z1 === 0) ri.push(t1);
	        }
	        ret[i] = ri;
	    }
	    if(typeof this.yl[0] === "number") return ret[0];
	    return ret;
	}
	numeric.spline = function spline(x,y,k1,kn) {
	    var n = x.length, b = [], dx = [], dy = [];
	    var i;
	    var sub = numeric.sub,mul = numeric.mul,add = numeric.add;
	    for(i=n-2;i>=0;i--) { dx[i] = x[i+1]-x[i]; dy[i] = sub(y[i+1],y[i]); }
	    if(typeof k1 === "string" || typeof kn === "string") { 
	        k1 = kn = "periodic";
	    }
	    // Build sparse tridiagonal system
	    var T = [[],[],[]];
	    switch(typeof k1) {
	    case "undefined":
	        b[0] = mul(3/(dx[0]*dx[0]),dy[0]);
	        T[0].push(0,0);
	        T[1].push(0,1);
	        T[2].push(2/dx[0],1/dx[0]);
	        break;
	    case "string":
	        b[0] = add(mul(3/(dx[n-2]*dx[n-2]),dy[n-2]),mul(3/(dx[0]*dx[0]),dy[0]));
	        T[0].push(0,0,0);
	        T[1].push(n-2,0,1);
	        T[2].push(1/dx[n-2],2/dx[n-2]+2/dx[0],1/dx[0]);
	        break;
	    default:
	        b[0] = k1;
	        T[0].push(0);
	        T[1].push(0);
	        T[2].push(1);
	        break;
	    }
	    for(i=1;i<n-1;i++) {
	        b[i] = add(mul(3/(dx[i-1]*dx[i-1]),dy[i-1]),mul(3/(dx[i]*dx[i]),dy[i]));
	        T[0].push(i,i,i);
	        T[1].push(i-1,i,i+1);
	        T[2].push(1/dx[i-1],2/dx[i-1]+2/dx[i],1/dx[i]);
	    }
	    switch(typeof kn) {
	    case "undefined":
	        b[n-1] = mul(3/(dx[n-2]*dx[n-2]),dy[n-2]);
	        T[0].push(n-1,n-1);
	        T[1].push(n-2,n-1);
	        T[2].push(1/dx[n-2],2/dx[n-2]);
	        break;
	    case "string":
	        T[1][T[1].length-1] = 0;
	        break;
	    default:
	        b[n-1] = kn;
	        T[0].push(n-1);
	        T[1].push(n-1);
	        T[2].push(1);
	        break;
	    }
	    if(typeof b[0] !== "number") b = numeric.transpose(b);
	    else b = [b];
	    var k = Array(b.length);
	    if(typeof k1 === "string") {
	        for(i=k.length-1;i!==-1;--i) {
	            k[i] = numeric.ccsLUPSolve(numeric.ccsLUP(numeric.ccsScatter(T)),b[i]);
	            k[i][n-1] = k[i][0];
	        }
	    } else {
	        for(i=k.length-1;i!==-1;--i) {
	            k[i] = numeric.cLUsolve(numeric.cLU(T),b[i]);
	        }
	    }
	    if(typeof y[0] === "number") k = k[0];
	    else k = numeric.transpose(k);
	    return new numeric.Spline(x,y,y,k,k);
	}

	// 8. FFT
	numeric.fftpow2 = function fftpow2(x,y) {
	    var n = x.length;
	    if(n === 1) return;
	    var cos = Math.cos, sin = Math.sin, i,j;
	    var xe = Array(n/2), ye = Array(n/2), xo = Array(n/2), yo = Array(n/2);
	    j = n/2;
	    for(i=n-1;i!==-1;--i) {
	        --j;
	        xo[j] = x[i];
	        yo[j] = y[i];
	        --i;
	        xe[j] = x[i];
	        ye[j] = y[i];
	    }
	    fftpow2(xe,ye);
	    fftpow2(xo,yo);
	    j = n/2;
	    var t,k = (-6.2831853071795864769252867665590057683943387987502116419/n),ci,si;
	    for(i=n-1;i!==-1;--i) {
	        --j;
	        if(j === -1) j = n/2-1;
	        t = k*i;
	        ci = cos(t);
	        si = sin(t);
	        x[i] = xe[j] + ci*xo[j] - si*yo[j];
	        y[i] = ye[j] + ci*yo[j] + si*xo[j];
	    }
	}
	numeric._ifftpow2 = function _ifftpow2(x,y) {
	    var n = x.length;
	    if(n === 1) return;
	    var cos = Math.cos, sin = Math.sin, i,j;
	    var xe = Array(n/2), ye = Array(n/2), xo = Array(n/2), yo = Array(n/2);
	    j = n/2;
	    for(i=n-1;i!==-1;--i) {
	        --j;
	        xo[j] = x[i];
	        yo[j] = y[i];
	        --i;
	        xe[j] = x[i];
	        ye[j] = y[i];
	    }
	    _ifftpow2(xe,ye);
	    _ifftpow2(xo,yo);
	    j = n/2;
	    var t,k = (6.2831853071795864769252867665590057683943387987502116419/n),ci,si;
	    for(i=n-1;i!==-1;--i) {
	        --j;
	        if(j === -1) j = n/2-1;
	        t = k*i;
	        ci = cos(t);
	        si = sin(t);
	        x[i] = xe[j] + ci*xo[j] - si*yo[j];
	        y[i] = ye[j] + ci*yo[j] + si*xo[j];
	    }
	}
	numeric.ifftpow2 = function ifftpow2(x,y) {
	    numeric._ifftpow2(x,y);
	    numeric.diveq(x,x.length);
	    numeric.diveq(y,y.length);
	}
	numeric.convpow2 = function convpow2(ax,ay,bx,by) {
	    numeric.fftpow2(ax,ay);
	    numeric.fftpow2(bx,by);
	    var i,n = ax.length,axi,bxi,ayi,byi;
	    for(i=n-1;i!==-1;--i) {
	        axi = ax[i]; ayi = ay[i]; bxi = bx[i]; byi = by[i];
	        ax[i] = axi*bxi-ayi*byi;
	        ay[i] = axi*byi+ayi*bxi;
	    }
	    numeric.ifftpow2(ax,ay);
	}
	numeric.T.prototype.fft = function fft() {
	    var x = this.x, y = this.y;
	    var n = x.length, log = Math.log, log2 = log(2),
	        p = Math.ceil(log(2*n-1)/log2), m = Math.pow(2,p);
	    var cx = numeric.rep([m],0), cy = numeric.rep([m],0), cos = Math.cos, sin = Math.sin;
	    var k, c = (-3.141592653589793238462643383279502884197169399375105820/n),t;
	    var a = numeric.rep([m],0), b = numeric.rep([m],0),nhalf = Math.floor(n/2);
	    for(k=0;k<n;k++) a[k] = x[k];
	    if(typeof y !== "undefined") for(k=0;k<n;k++) b[k] = y[k];
	    cx[0] = 1;
	    for(k=1;k<=m/2;k++) {
	        t = c*k*k;
	        cx[k] = cos(t);
	        cy[k] = sin(t);
	        cx[m-k] = cos(t);
	        cy[m-k] = sin(t)
	    }
	    var X = new numeric.T(a,b), Y = new numeric.T(cx,cy);
	    X = X.mul(Y);
	    numeric.convpow2(X.x,X.y,numeric.clone(Y.x),numeric.neg(Y.y));
	    X = X.mul(Y);
	    X.x.length = n;
	    X.y.length = n;
	    return X;
	}
	numeric.T.prototype.ifft = function ifft() {
	    var x = this.x, y = this.y;
	    var n = x.length, log = Math.log, log2 = log(2),
	        p = Math.ceil(log(2*n-1)/log2), m = Math.pow(2,p);
	    var cx = numeric.rep([m],0), cy = numeric.rep([m],0), cos = Math.cos, sin = Math.sin;
	    var k, c = (3.141592653589793238462643383279502884197169399375105820/n),t;
	    var a = numeric.rep([m],0), b = numeric.rep([m],0),nhalf = Math.floor(n/2);
	    for(k=0;k<n;k++) a[k] = x[k];
	    if(typeof y !== "undefined") for(k=0;k<n;k++) b[k] = y[k];
	    cx[0] = 1;
	    for(k=1;k<=m/2;k++) {
	        t = c*k*k;
	        cx[k] = cos(t);
	        cy[k] = sin(t);
	        cx[m-k] = cos(t);
	        cy[m-k] = sin(t)
	    }
	    var X = new numeric.T(a,b), Y = new numeric.T(cx,cy);
	    X = X.mul(Y);
	    numeric.convpow2(X.x,X.y,numeric.clone(Y.x),numeric.neg(Y.y));
	    X = X.mul(Y);
	    X.x.length = n;
	    X.y.length = n;
	    return X.div(n);
	}

	//9. Unconstrained optimization
	numeric.gradient = function gradient(f,x) {
	    var n = x.length;
	    var f0 = f(x);
	    if(isNaN(f0)) throw new Error('gradient: f(x) is a NaN!');
	    var max = Math.max;
	    var i,x0 = numeric.clone(x),f1,f2, J = Array(n);
	    var div = numeric.div, sub = numeric.sub,errest,roundoff,max = Math.max,eps = 1e-3,abs = Math.abs, min = Math.min;
	    var t0,t1,t2,it=0,d1,d2,N;
	    for(i=0;i<n;i++) {
	        var h = max(1e-6*f0,1e-8);
	        while(1) {
	            ++it;
	            if(it>20) { throw new Error("Numerical gradient fails"); }
	            x0[i] = x[i]+h;
	            f1 = f(x0);
	            x0[i] = x[i]-h;
	            f2 = f(x0);
	            x0[i] = x[i];
	            if(isNaN(f1) || isNaN(f2)) { h/=16; continue; }
	            J[i] = (f1-f2)/(2*h);
	            t0 = x[i]-h;
	            t1 = x[i];
	            t2 = x[i]+h;
	            d1 = (f1-f0)/h;
	            d2 = (f0-f2)/h;
	            N = max(abs(J[i]),abs(f0),abs(f1),abs(f2),abs(t0),abs(t1),abs(t2),1e-8);
	            errest = min(max(abs(d1-J[i]),abs(d2-J[i]),abs(d1-d2))/N,h/N);
	            if(errest>eps) { h/=16; }
	            else break;
	            }
	    }
	    return J;
	}

	numeric.uncmin = function uncmin(f,x0,tol,gradient,maxit,callback,options) {
	    var grad = numeric.gradient;
	    if(typeof options === "undefined") { options = {}; }
	    if(typeof tol === "undefined") { tol = 1e-8; }
	    if(typeof gradient === "undefined") { gradient = function(x) { return grad(f,x); }; }
	    if(typeof maxit === "undefined") maxit = 1000;
	    x0 = numeric.clone(x0);
	    var n = x0.length;
	    var f0 = f(x0),f1,df0;
	    if(isNaN(f0)) throw new Error('uncmin: f(x0) is a NaN!');
	    var max = Math.max, norm2 = numeric.norm2;
	    tol = max(tol,numeric.epsilon);
	    var step,g0,g1,H1 = options.Hinv || numeric.identity(n);
	    var dot = numeric.dot, inv = numeric.inv, sub = numeric.sub, add = numeric.add, ten = numeric.tensor, div = numeric.div, mul = numeric.mul;
	    var all = numeric.all, isfinite = numeric.isFinite, neg = numeric.neg;
	    var it=0,i,s,x1,y,Hy,Hs,ys,i0,t,nstep,t1,t2;
	    var msg = "";
	    g0 = gradient(x0);
	    while(it<maxit) {
	        if(typeof callback === "function") { if(callback(it,x0,f0,g0,H1)) { msg = "Callback returned true"; break; } }
	        if(!all(isfinite(g0))) { msg = "Gradient has Infinity or NaN"; break; }
	        step = neg(dot(H1,g0));
	        if(!all(isfinite(step))) { msg = "Search direction has Infinity or NaN"; break; }
	        nstep = norm2(step);
	        if(nstep < tol) { msg="Newton step smaller than tol"; break; }
	        t = 1;
	        df0 = dot(g0,step);
	        // line search
	        x1 = x0;
	        while(it < maxit) {
	            if(t*nstep < tol) { break; }
	            s = mul(step,t);
	            x1 = add(x0,s);
	            f1 = f(x1);
	            if(f1-f0 >= 0.1*t*df0 || isNaN(f1)) {
	                t *= 0.5;
	                ++it;
	                continue;
	            }
	            break;
	        }
	        if(t*nstep < tol) { msg = "Line search step size smaller than tol"; break; }
	        if(it === maxit) { msg = "maxit reached during line search"; break; }
	        g1 = gradient(x1);
	        y = sub(g1,g0);
	        ys = dot(y,s);
	        Hy = dot(H1,y);
	        H1 = sub(add(H1,
	                mul(
	                        (ys+dot(y,Hy))/(ys*ys),
	                        ten(s,s)    )),
	                div(add(ten(Hy,s),ten(s,Hy)),ys));
	        x0 = x1;
	        f0 = f1;
	        g0 = g1;
	        ++it;
	    }
	    return {solution: x0, f: f0, gradient: g0, invHessian: H1, iterations:it, message: msg};
	}

	// 10. Ode solver (Dormand-Prince)
	numeric.Dopri = function Dopri(x,y,f,ymid,iterations,msg,events) {
	    this.x = x;
	    this.y = y;
	    this.f = f;
	    this.ymid = ymid;
	    this.iterations = iterations;
	    this.events = events;
	    this.message = msg;
	}
	numeric.Dopri.prototype._at = function _at(xi,j) {
	    function sqr(x) { return x*x; }
	    var sol = this;
	    var xs = sol.x;
	    var ys = sol.y;
	    var k1 = sol.f;
	    var ymid = sol.ymid;
	    var n = xs.length;
	    var x0,x1,xh,y0,y1,yh,xi;
	    var floor = Math.floor,h;
	    var c = 0.5;
	    var add = numeric.add, mul = numeric.mul,sub = numeric.sub, p,q,w;
	    x0 = xs[j];
	    x1 = xs[j+1];
	    y0 = ys[j];
	    y1 = ys[j+1];
	    h  = x1-x0;
	    xh = x0+c*h;
	    yh = ymid[j];
	    p = sub(k1[j  ],mul(y0,1/(x0-xh)+2/(x0-x1)));
	    q = sub(k1[j+1],mul(y1,1/(x1-xh)+2/(x1-x0)));
	    w = [sqr(xi - x1) * (xi - xh) / sqr(x0 - x1) / (x0 - xh),
	         sqr(xi - x0) * sqr(xi - x1) / sqr(x0 - xh) / sqr(x1 - xh),
	         sqr(xi - x0) * (xi - xh) / sqr(x1 - x0) / (x1 - xh),
	         (xi - x0) * sqr(xi - x1) * (xi - xh) / sqr(x0-x1) / (x0 - xh),
	         (xi - x1) * sqr(xi - x0) * (xi - xh) / sqr(x0-x1) / (x1 - xh)];
	    return add(add(add(add(mul(y0,w[0]),
	                           mul(yh,w[1])),
	                           mul(y1,w[2])),
	                           mul( p,w[3])),
	                           mul( q,w[4]));
	}
	numeric.Dopri.prototype.at = function at(x) {
	    var i,j,k,floor = Math.floor;
	    if(typeof x !== "number") {
	        var n = x.length, ret = Array(n);
	        for(i=n-1;i!==-1;--i) {
	            ret[i] = this.at(x[i]);
	        }
	        return ret;
	    }
	    var x0 = this.x;
	    i = 0; j = x0.length-1;
	    while(j-i>1) {
	        k = floor(0.5*(i+j));
	        if(x0[k] <= x) i = k;
	        else j = k;
	    }
	    return this._at(x,i);
	}

	numeric.dopri = function dopri(x0,x1,y0,f,tol,maxit,event) {
	    if(typeof tol === "undefined") { tol = 1e-6; }
	    if(typeof maxit === "undefined") { maxit = 1000; }
	    var xs = [x0], ys = [y0], k1 = [f(x0,y0)], k2,k3,k4,k5,k6,k7, ymid = [];
	    var A2 = 1/5;
	    var A3 = [3/40,9/40];
	    var A4 = [44/45,-56/15,32/9];
	    var A5 = [19372/6561,-25360/2187,64448/6561,-212/729];
	    var A6 = [9017/3168,-355/33,46732/5247,49/176,-5103/18656];
	    var b = [35/384,0,500/1113,125/192,-2187/6784,11/84];
	    var bm = [0.5*6025192743/30085553152,
	              0,
	              0.5*51252292925/65400821598,
	              0.5*-2691868925/45128329728,
	              0.5*187940372067/1594534317056,
	              0.5*-1776094331/19743644256,
	              0.5*11237099/235043384];
	    var c = [1/5,3/10,4/5,8/9,1,1];
	    var e = [-71/57600,0,71/16695,-71/1920,17253/339200,-22/525,1/40];
	    var i = 0,er,j;
	    var h = (x1-x0)/10;
	    var it = 0;
	    var add = numeric.add, mul = numeric.mul, y1,erinf;
	    var max = Math.max, min = Math.min, abs = Math.abs, norminf = numeric.norminf,pow = Math.pow;
	    var any = numeric.any, lt = numeric.lt, and = numeric.and, sub = numeric.sub;
	    var e0, e1, ev;
	    var ret = new numeric.Dopri(xs,ys,k1,ymid,-1,"");
	    if(typeof event === "function") e0 = event(x0,y0);
	    while(x0<x1 && it<maxit) {
	        ++it;
	        if(x0+h>x1) h = x1-x0;
	        k2 = f(x0+c[0]*h,                add(y0,mul(   A2*h,k1[i])));
	        k3 = f(x0+c[1]*h,            add(add(y0,mul(A3[0]*h,k1[i])),mul(A3[1]*h,k2)));
	        k4 = f(x0+c[2]*h,        add(add(add(y0,mul(A4[0]*h,k1[i])),mul(A4[1]*h,k2)),mul(A4[2]*h,k3)));
	        k5 = f(x0+c[3]*h,    add(add(add(add(y0,mul(A5[0]*h,k1[i])),mul(A5[1]*h,k2)),mul(A5[2]*h,k3)),mul(A5[3]*h,k4)));
	        k6 = f(x0+c[4]*h,add(add(add(add(add(y0,mul(A6[0]*h,k1[i])),mul(A6[1]*h,k2)),mul(A6[2]*h,k3)),mul(A6[3]*h,k4)),mul(A6[4]*h,k5)));
	        y1 = add(add(add(add(add(y0,mul(k1[i],h*b[0])),mul(k3,h*b[2])),mul(k4,h*b[3])),mul(k5,h*b[4])),mul(k6,h*b[5]));
	        k7 = f(x0+h,y1);
	        er = add(add(add(add(add(mul(k1[i],h*e[0]),mul(k3,h*e[2])),mul(k4,h*e[3])),mul(k5,h*e[4])),mul(k6,h*e[5])),mul(k7,h*e[6]));
	        if(typeof er === "number") erinf = abs(er);
	        else erinf = norminf(er);
	        if(erinf > tol) { // reject
	            h = 0.2*h*pow(tol/erinf,0.25);
	            if(x0+h === x0) {
	                ret.msg = "Step size became too small";
	                break;
	            }
	            continue;
	        }
	        ymid[i] = add(add(add(add(add(add(y0,
	                mul(k1[i],h*bm[0])),
	                mul(k3   ,h*bm[2])),
	                mul(k4   ,h*bm[3])),
	                mul(k5   ,h*bm[4])),
	                mul(k6   ,h*bm[5])),
	                mul(k7   ,h*bm[6]));
	        ++i;
	        xs[i] = x0+h;
	        ys[i] = y1;
	        k1[i] = k7;
	        if(typeof event === "function") {
	            var yi,xl = x0,xr = x0+0.5*h,xi;
	            e1 = event(xr,ymid[i-1]);
	            ev = and(lt(e0,0),lt(0,e1));
	            if(!any(ev)) { xl = xr; xr = x0+h; e0 = e1; e1 = event(xr,y1); ev = and(lt(e0,0),lt(0,e1)); }
	            if(any(ev)) {
	                var xc, yc, en,ei;
	                var side=0, sl = 1.0, sr = 1.0;
	                while(1) {
	                    if(typeof e0 === "number") xi = (sr*e1*xl-sl*e0*xr)/(sr*e1-sl*e0);
	                    else {
	                        xi = xr;
	                        for(j=e0.length-1;j!==-1;--j) {
	                            if(e0[j]<0 && e1[j]>0) xi = min(xi,(sr*e1[j]*xl-sl*e0[j]*xr)/(sr*e1[j]-sl*e0[j]));
	                        }
	                    }
	                    if(xi <= xl || xi >= xr) break;
	                    yi = ret._at(xi, i-1);
	                    ei = event(xi,yi);
	                    en = and(lt(e0,0),lt(0,ei));
	                    if(any(en)) {
	                        xr = xi;
	                        e1 = ei;
	                        ev = en;
	                        sr = 1.0;
	                        if(side === -1) sl *= 0.5;
	                        else sl = 1.0;
	                        side = -1;
	                    } else {
	                        xl = xi;
	                        e0 = ei;
	                        sl = 1.0;
	                        if(side === 1) sr *= 0.5;
	                        else sr = 1.0;
	                        side = 1;
	                    }
	                }
	                y1 = ret._at(0.5*(x0+xi),i-1);
	                ret.f[i] = f(xi,yi);
	                ret.x[i] = xi;
	                ret.y[i] = yi;
	                ret.ymid[i-1] = y1;
	                ret.events = ev;
	                ret.iterations = it;
	                return ret;
	            }
	        }
	        x0 += h;
	        y0 = y1;
	        e0 = e1;
	        h = min(0.8*h*pow(tol/erinf,0.25),4*h);
	    }
	    ret.iterations = it;
	    return ret;
	}

	// 11. Ax = b
	numeric.LU = function(A, fast) {
	  fast = fast || false;

	  var abs = Math.abs;
	  var i, j, k, absAjk, Akk, Ak, Pk, Ai;
	  var max;
	  var n = A.length, n1 = n-1;
	  var P = new Array(n);
	  if(!fast) A = numeric.clone(A);

	  for (k = 0; k < n; ++k) {
	    Pk = k;
	    Ak = A[k];
	    max = abs(Ak[k]);
	    for (j = k + 1; j < n; ++j) {
	      absAjk = abs(A[j][k]);
	      if (max < absAjk) {
	        max = absAjk;
	        Pk = j;
	      }
	    }
	    P[k] = Pk;

	    if (Pk != k) {
	      A[k] = A[Pk];
	      A[Pk] = Ak;
	      Ak = A[k];
	    }

	    Akk = Ak[k];

	    for (i = k + 1; i < n; ++i) {
	      A[i][k] /= Akk;
	    }

	    for (i = k + 1; i < n; ++i) {
	      Ai = A[i];
	      for (j = k + 1; j < n1; ++j) {
	        Ai[j] -= Ai[k] * Ak[j];
	        ++j;
	        Ai[j] -= Ai[k] * Ak[j];
	      }
	      if(j===n1) Ai[j] -= Ai[k] * Ak[j];
	    }
	  }

	  return {
	    LU: A,
	    P:  P
	  };
	}

	numeric.LUsolve = function LUsolve(LUP, b) {
	  var i, j;
	  var LU = LUP.LU;
	  var n   = LU.length;
	  var x = numeric.clone(b);
	  var P   = LUP.P;
	  var Pi, LUi, LUii, tmp;

	  for (i=n-1;i!==-1;--i) x[i] = b[i];
	  for (i = 0; i < n; ++i) {
	    Pi = P[i];
	    if (P[i] !== i) {
	      tmp = x[i];
	      x[i] = x[Pi];
	      x[Pi] = tmp;
	    }

	    LUi = LU[i];
	    for (j = 0; j < i; ++j) {
	      x[i] -= x[j] * LUi[j];
	    }
	  }

	  for (i = n - 1; i >= 0; --i) {
	    LUi = LU[i];
	    for (j = i + 1; j < n; ++j) {
	      x[i] -= x[j] * LUi[j];
	    }

	    x[i] /= LUi[i];
	  }

	  return x;
	}

	numeric.solve = function solve(A,b,fast) { return numeric.LUsolve(numeric.LU(A,fast), b); }

	// 12. Linear programming
	numeric.echelonize = function echelonize(A) {
	    var s = numeric.dim(A), m = s[0], n = s[1];
	    var I = numeric.identity(m);
	    var P = Array(m);
	    var i,j,k,l,Ai,Ii,Z,a;
	    var abs = Math.abs;
	    var diveq = numeric.diveq;
	    A = numeric.clone(A);
	    for(i=0;i<m;++i) {
	        k = 0;
	        Ai = A[i];
	        Ii = I[i];
	        for(j=1;j<n;++j) if(abs(Ai[k])<abs(Ai[j])) k=j;
	        P[i] = k;
	        diveq(Ii,Ai[k]);
	        diveq(Ai,Ai[k]);
	        for(j=0;j<m;++j) if(j!==i) {
	            Z = A[j]; a = Z[k];
	            for(l=n-1;l!==-1;--l) Z[l] -= Ai[l]*a;
	            Z = I[j];
	            for(l=m-1;l!==-1;--l) Z[l] -= Ii[l]*a;
	        }
	    }
	    return {I:I, A:A, P:P};
	}

	numeric.__solveLP = function __solveLP(c,A,b,tol,maxit,x,flag) {
	    var sum = numeric.sum, log = numeric.log, mul = numeric.mul, sub = numeric.sub, dot = numeric.dot, div = numeric.div, add = numeric.add;
	    var m = c.length, n = b.length,y;
	    var unbounded = false, cb,i0=0;
	    var alpha = 1.0;
	    var f0,df0,AT = numeric.transpose(A), svd = numeric.svd,transpose = numeric.transpose,leq = numeric.leq, sqrt = Math.sqrt, abs = Math.abs;
	    var muleq = numeric.muleq;
	    var norm = numeric.norminf, any = numeric.any,min = Math.min;
	    var all = numeric.all, gt = numeric.gt;
	    var p = Array(m), A0 = Array(n),e=numeric.rep([n],1), H;
	    var solve = numeric.solve, z = sub(b,dot(A,x)),count;
	    var dotcc = dot(c,c);
	    var g;
	    for(count=i0;count<maxit;++count) {
	        var i,j,d;
	        for(i=n-1;i!==-1;--i) A0[i] = div(A[i],z[i]);
	        var A1 = transpose(A0);
	        for(i=m-1;i!==-1;--i) p[i] = (/*x[i]+*/sum(A1[i]));
	        alpha = 0.25*abs(dotcc/dot(c,p));
	        var a1 = 100*sqrt(dotcc/dot(p,p));
	        if(!isFinite(alpha) || alpha>a1) alpha = a1;
	        g = add(c,mul(alpha,p));
	        H = dot(A1,A0);
	        for(i=m-1;i!==-1;--i) H[i][i] += 1;
	        d = solve(H,div(g,alpha),true);
	        var t0 = div(z,dot(A,d));
	        var t = 1.0;
	        for(i=n-1;i!==-1;--i) if(t0[i]<0) t = min(t,-0.999*t0[i]);
	        y = sub(x,mul(d,t));
	        z = sub(b,dot(A,y));
	        if(!all(gt(z,0))) return { solution: x, message: "", iterations: count };
	        x = y;
	        if(alpha<tol) return { solution: y, message: "", iterations: count };
	        if(flag) {
	            var s = dot(c,g), Ag = dot(A,g);
	            unbounded = true;
	            for(i=n-1;i!==-1;--i) if(s*Ag[i]<0) { unbounded = false; break; }
	        } else {
	            if(x[m-1]>=0) unbounded = false;
	            else unbounded = true;
	        }
	        if(unbounded) return { solution: y, message: "Unbounded", iterations: count };
	    }
	    return { solution: x, message: "maximum iteration count exceeded", iterations:count };
	}

	numeric._solveLP = function _solveLP(c,A,b,tol,maxit) {
	    var m = c.length, n = b.length,y;
	    var sum = numeric.sum, log = numeric.log, mul = numeric.mul, sub = numeric.sub, dot = numeric.dot, div = numeric.div, add = numeric.add;
	    var c0 = numeric.rep([m],0).concat([1]);
	    var J = numeric.rep([n,1],-1);
	    var A0 = numeric.blockMatrix([[A                   ,   J  ]]);
	    var b0 = b;
	    var y = numeric.rep([m],0).concat(Math.max(0,numeric.sup(numeric.neg(b)))+1);
	    var x0 = numeric.__solveLP(c0,A0,b0,tol,maxit,y,false);
	    var x = numeric.clone(x0.solution);
	    x.length = m;
	    var foo = numeric.inf(sub(b,dot(A,x)));
	    if(foo<0) { return { solution: NaN, message: "Infeasible", iterations: x0.iterations }; }
	    var ret = numeric.__solveLP(c, A, b, tol, maxit-x0.iterations, x, true);
	    ret.iterations += x0.iterations;
	    return ret;
	};

	numeric.solveLP = function solveLP(c,A,b,Aeq,beq,tol,maxit) {
	    if(typeof maxit === "undefined") maxit = 1000;
	    if(typeof tol === "undefined") tol = numeric.epsilon;
	    if(typeof Aeq === "undefined") return numeric._solveLP(c,A,b,tol,maxit);
	    var m = Aeq.length, n = Aeq[0].length, o = A.length;
	    var B = numeric.echelonize(Aeq);
	    var flags = numeric.rep([n],0);
	    var P = B.P;
	    var Q = [];
	    var i;
	    for(i=P.length-1;i!==-1;--i) flags[P[i]] = 1;
	    for(i=n-1;i!==-1;--i) if(flags[i]===0) Q.push(i);
	    var g = numeric.getRange;
	    var I = numeric.linspace(0,m-1), J = numeric.linspace(0,o-1);
	    var Aeq2 = g(Aeq,I,Q), A1 = g(A,J,P), A2 = g(A,J,Q), dot = numeric.dot, sub = numeric.sub;
	    var A3 = dot(A1,B.I);
	    var A4 = sub(A2,dot(A3,Aeq2)), b4 = sub(b,dot(A3,beq));
	    var c1 = Array(P.length), c2 = Array(Q.length);
	    for(i=P.length-1;i!==-1;--i) c1[i] = c[P[i]];
	    for(i=Q.length-1;i!==-1;--i) c2[i] = c[Q[i]];
	    var c4 = sub(c2,dot(c1,dot(B.I,Aeq2)));
	    var S = numeric._solveLP(c4,A4,b4,tol,maxit);
	    var x2 = S.solution;
	    if(x2!==x2) return S;
	    var x1 = dot(B.I,sub(beq,dot(Aeq2,x2)));
	    var x = Array(c.length);
	    for(i=P.length-1;i!==-1;--i) x[P[i]] = x1[i];
	    for(i=Q.length-1;i!==-1;--i) x[Q[i]] = x2[i];
	    return { solution: x, message:S.message, iterations: S.iterations };
	}

	numeric.MPStoLP = function MPStoLP(MPS) {
	    if(MPS instanceof String) { MPS.split('\n'); }
	    var state = 0;
	    var states = ['Initial state','NAME','ROWS','COLUMNS','RHS','BOUNDS','ENDATA'];
	    var n = MPS.length;
	    var i,j,z,N=0,rows = {}, sign = [], rl = 0, vars = {}, nv = 0;
	    var name;
	    var c = [], A = [], b = [];
	    function err(e) { throw new Error('MPStoLP: '+e+'\nLine '+i+': '+MPS[i]+'\nCurrent state: '+states[state]+'\n'); }
	    for(i=0;i<n;++i) {
	        z = MPS[i];
	        var w0 = z.match(/\S*/g);
	        var w = [];
	        for(j=0;j<w0.length;++j) if(w0[j]!=="") w.push(w0[j]);
	        if(w.length === 0) continue;
	        for(j=0;j<states.length;++j) if(z.substr(0,states[j].length) === states[j]) break;
	        if(j<states.length) {
	            state = j;
	            if(j===1) { name = w[1]; }
	            if(j===6) return { name:name, c:c, A:numeric.transpose(A), b:b, rows:rows, vars:vars };
	            continue;
	        }
	        switch(state) {
	        case 0: case 1: err('Unexpected line');
	        case 2: 
	            switch(w[0]) {
	            case 'N': if(N===0) N = w[1]; else err('Two or more N rows'); break;
	            case 'L': rows[w[1]] = rl; sign[rl] = 1; b[rl] = 0; ++rl; break;
	            case 'G': rows[w[1]] = rl; sign[rl] = -1;b[rl] = 0; ++rl; break;
	            case 'E': rows[w[1]] = rl; sign[rl] = 0;b[rl] = 0; ++rl; break;
	            default: err('Parse error '+numeric.prettyPrint(w));
	            }
	            break;
	        case 3:
	            if(!vars.hasOwnProperty(w[0])) { vars[w[0]] = nv; c[nv] = 0; A[nv] = numeric.rep([rl],0); ++nv; }
	            var p = vars[w[0]];
	            for(j=1;j<w.length;j+=2) {
	                if(w[j] === N) { c[p] = parseFloat(w[j+1]); continue; }
	                var q = rows[w[j]];
	                A[p][q] = (sign[q]<0?-1:1)*parseFloat(w[j+1]);
	            }
	            break;
	        case 4:
	            for(j=1;j<w.length;j+=2) b[rows[w[j]]] = (sign[rows[w[j]]]<0?-1:1)*parseFloat(w[j+1]);
	            break;
	        case 5: /*FIXME*/ break;
	        case 6: err('Internal error');
	        }
	    }
	    err('Reached end of file without ENDATA');
	}
	// seedrandom.js version 2.0.
	// Author: David Bau 4/2/2011
	//
	// Defines a method Math.seedrandom() that, when called, substitutes
	// an explicitly seeded RC4-based algorithm for Math.random().  Also
	// supports automatic seeding from local or network sources of entropy.
	//
	// Usage:
	//
	//   <script src=http://davidbau.com/encode/seedrandom-min.js></script>
	//
	//   Math.seedrandom('yipee'); Sets Math.random to a function that is
	//                             initialized using the given explicit seed.
	//
	//   Math.seedrandom();        Sets Math.random to a function that is
	//                             seeded using the current time, dom state,
	//                             and other accumulated local entropy.
	//                             The generated seed string is returned.
	//
	//   Math.seedrandom('yowza', true);
	//                             Seeds using the given explicit seed mixed
	//                             together with accumulated entropy.
	//
	//   <script src="http://bit.ly/srandom-512"></script>
	//                             Seeds using physical random bits downloaded
	//                             from random.org.
	//
	//   <script src="https://jsonlib.appspot.com/urandom?callback=Math.seedrandom">
	//   </script>                 Seeds using urandom bits from call.jsonlib.com,
	//                             which is faster than random.org.
	//
	// Examples:
	//
	//   Math.seedrandom("hello");            // Use "hello" as the seed.
	//   document.write(Math.random());       // Always 0.5463663768140734
	//   document.write(Math.random());       // Always 0.43973793770592234
	//   var rng1 = Math.random;              // Remember the current prng.
	//
	//   var autoseed = Math.seedrandom();    // New prng with an automatic seed.
	//   document.write(Math.random());       // Pretty much unpredictable.
	//
	//   Math.random = rng1;                  // Continue "hello" prng sequence.
	//   document.write(Math.random());       // Always 0.554769432473455
	//
	//   Math.seedrandom(autoseed);           // Restart at the previous seed.
	//   document.write(Math.random());       // Repeat the 'unpredictable' value.
	//
	// Notes:
	//
	// Each time seedrandom('arg') is called, entropy from the passed seed
	// is accumulated in a pool to help generate future seeds for the
	// zero-argument form of Math.seedrandom, so entropy can be injected over
	// time by calling seedrandom with explicit data repeatedly.
	//
	// On speed - This javascript implementation of Math.random() is about
	// 3-10x slower than the built-in Math.random() because it is not native
	// code, but this is typically fast enough anyway.  Seeding is more expensive,
	// especially if you use auto-seeding.  Some details (timings on Chrome 4):
	//
	// Our Math.random()            - avg less than 0.002 milliseconds per call
	// seedrandom('explicit')       - avg less than 0.5 milliseconds per call
	// seedrandom('explicit', true) - avg less than 2 milliseconds per call
	// seedrandom()                 - avg about 38 milliseconds per call
	//
	// LICENSE (BSD):
	//
	// Copyright 2010 David Bau, all rights reserved.
	//
	// Redistribution and use in source and binary forms, with or without
	// modification, are permitted provided that the following conditions are met:
	// 
	//   1. Redistributions of source code must retain the above copyright
	//      notice, this list of conditions and the following disclaimer.
	//
	//   2. Redistributions in binary form must reproduce the above copyright
	//      notice, this list of conditions and the following disclaimer in the
	//      documentation and/or other materials provided with the distribution.
	// 
	//   3. Neither the name of this module nor the names of its contributors may
	//      be used to endorse or promote products derived from this software
	//      without specific prior written permission.
	// 
	// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
	// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
	// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
	// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
	// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
	// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
	// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
	// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
	// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	//
	/**
	 * All code is in an anonymous closure to keep the global namespace clean.
	 *
	 * @param {number=} overflow 
	 * @param {number=} startdenom
	 */

	// Patched by Seb so that seedrandom.js does not pollute the Math object.
	// My tests suggest that doing Math.trouble = 1 makes Math lookups about 5%
	// slower.
	numeric.seedrandom = { pow:Math.pow, random:Math.random };

	(function (pool, math, width, chunks, significance, overflow, startdenom) {


	//
	// seedrandom()
	// This is the seedrandom function described above.
	//
	math['seedrandom'] = function seedrandom(seed, use_entropy) {
	  var key = [];
	  var arc4;

	  // Flatten the seed string or build one from local entropy if needed.
	  seed = mixkey(flatten(
	    use_entropy ? [seed, pool] :
	    arguments.length ? seed :
	    [new Date().getTime(), pool, window], 3), key);

	  // Use the seed to initialize an ARC4 generator.
	  arc4 = new ARC4(key);

	  // Mix the randomness into accumulated entropy.
	  mixkey(arc4.S, pool);

	  // Override Math.random

	  // This function returns a random double in [0, 1) that contains
	  // randomness in every bit of the mantissa of the IEEE 754 value.

	  math['random'] = function random() {  // Closure to return a random double:
	    var n = arc4.g(chunks);             // Start with a numerator n < 2 ^ 48
	    var d = startdenom;                 //   and denominator d = 2 ^ 48.
	    var x = 0;                          //   and no 'extra last byte'.
	    while (n < significance) {          // Fill up all significant digits by
	      n = (n + x) * width;              //   shifting numerator and
	      d *= width;                       //   denominator and generating a
	      x = arc4.g(1);                    //   new least-significant-byte.
	    }
	    while (n >= overflow) {             // To avoid rounding up, before adding
	      n /= 2;                           //   last byte, shift everything
	      d /= 2;                           //   right using integer math until
	      x >>>= 1;                         //   we have exactly the desired bits.
	    }
	    return (n + x) / d;                 // Form the number within [0, 1).
	  };

	  // Return the seed that was used
	  return seed;
	};

	//
	// ARC4
	//
	// An ARC4 implementation.  The constructor takes a key in the form of
	// an array of at most (width) integers that should be 0 <= x < (width).
	//
	// The g(count) method returns a pseudorandom integer that concatenates
	// the next (count) outputs from ARC4.  Its return value is a number x
	// that is in the range 0 <= x < (width ^ count).
	//
	/** @constructor */
	function ARC4(key) {
	  var t, u, me = this, keylen = key.length;
	  var i = 0, j = me.i = me.j = me.m = 0;
	  me.S = [];
	  me.c = [];

	  // The empty key [] is treated as [0].
	  if (!keylen) { key = [keylen++]; }

	  // Set up S using the standard key scheduling algorithm.
	  while (i < width) { me.S[i] = i++; }
	  for (i = 0; i < width; i++) {
	    t = me.S[i];
	    j = lowbits(j + t + key[i % keylen]);
	    u = me.S[j];
	    me.S[i] = u;
	    me.S[j] = t;
	  }

	  // The "g" method returns the next (count) outputs as one number.
	  me.g = function getnext(count) {
	    var s = me.S;
	    var i = lowbits(me.i + 1); var t = s[i];
	    var j = lowbits(me.j + t); var u = s[j];
	    s[i] = u;
	    s[j] = t;
	    var r = s[lowbits(t + u)];
	    while (--count) {
	      i = lowbits(i + 1); t = s[i];
	      j = lowbits(j + t); u = s[j];
	      s[i] = u;
	      s[j] = t;
	      r = r * width + s[lowbits(t + u)];
	    }
	    me.i = i;
	    me.j = j;
	    return r;
	  };
	  // For robust unpredictability discard an initial batch of values.
	  // See http://www.rsa.com/rsalabs/node.asp?id=2009
	  me.g(width);
	}

	//
	// flatten()
	// Converts an object tree to nested arrays of strings.
	//
	/** @param {Object=} result 
	  * @param {string=} prop
	  * @param {string=} typ */
	function flatten(obj, depth, result, prop, typ) {
	  result = [];
	  typ = typeof(obj);
	  if (depth && typ == 'object') {
	    for (prop in obj) {
	      if (prop.indexOf('S') < 5) {    // Avoid FF3 bug (local/sessionStorage)
	        try { result.push(flatten(obj[prop], depth - 1)); } catch (e) {}
	      }
	    }
	  }
	  return (result.length ? result : obj + (typ != 'string' ? '\0' : ''));
	}

	//
	// mixkey()
	// Mixes a string seed into a key that is an array of integers, and
	// returns a shortened string seed that is equivalent to the result key.
	//
	/** @param {number=} smear 
	  * @param {number=} j */
	function mixkey(seed, key, smear, j) {
	  seed += '';                         // Ensure the seed is a string
	  smear = 0;
	  for (j = 0; j < seed.length; j++) {
	    key[lowbits(j)] =
	      lowbits((smear ^= key[lowbits(j)] * 19) + seed.charCodeAt(j));
	  }
	  seed = '';
	  for (j in key) { seed += String.fromCharCode(key[j]); }
	  return seed;
	}

	//
	// lowbits()
	// A quick "n mod width" for width a power of 2.
	//
	function lowbits(n) { return n & (width - 1); }

	//
	// The following constants are related to IEEE 754 limits.
	//
	startdenom = math.pow(width, chunks);
	significance = math.pow(2, significance);
	overflow = significance * 2;

	//
	// When seedrandom.js is loaded, we immediately mix a few bits
	// from the built-in RNG into the entropy pool.  Because we do
	// not want to intefere with determinstic PRNG state later,
	// seedrandom will not call math.random on its own again after
	// initialization.
	//
	mixkey(math.random(), pool);

	// End anonymous scope, and pass initial values.
	}(
	  [],   // pool: entropy pool starts empty
	  numeric.seedrandom, // math: package containing random, pow, and seedrandom
	  256,  // width: each RC4 output is 0 <= x < 256
	  6,    // chunks: at least six RC4 outputs for each double
	  52    // significance: there are 52 significant digits in a double
	  ));
	/* This file is a slightly modified version of quadprog.js from Alberto Santini.
	 * It has been slightly modified by Sébastien Loisel to make sure that it handles
	 * 0-based Arrays instead of 1-based Arrays.
	 * License is in resources/LICENSE.quadprog */
	(function(exports) {

	function base0to1(A) {
	    if(typeof A !== "object") { return A; }
	    var ret = [], i,n=A.length;
	    for(i=0;i<n;i++) ret[i+1] = base0to1(A[i]);
	    return ret;
	}
	function base1to0(A) {
	    if(typeof A !== "object") { return A; }
	    var ret = [], i,n=A.length;
	    for(i=1;i<n;i++) ret[i-1] = base1to0(A[i]);
	    return ret;
	}

	function dpori(a, lda, n) {
	    var i, j, k, kp1, t;

	    for (k = 1; k <= n; k = k + 1) {
	        a[k][k] = 1 / a[k][k];
	        t = -a[k][k];
	        //~ dscal(k - 1, t, a[1][k], 1);
	        for (i = 1; i < k; i = i + 1) {
	            a[i][k] = t * a[i][k];
	        }

	        kp1 = k + 1;
	        if (n < kp1) {
	            break;
	        }
	        for (j = kp1; j <= n; j = j + 1) {
	            t = a[k][j];
	            a[k][j] = 0;
	            //~ daxpy(k, t, a[1][k], 1, a[1][j], 1);
	            for (i = 1; i <= k; i = i + 1) {
	                a[i][j] = a[i][j] + (t * a[i][k]);
	            }
	        }
	    }

	}

	function dposl(a, lda, n, b) {
	    var i, k, kb, t;

	    for (k = 1; k <= n; k = k + 1) {
	        //~ t = ddot(k - 1, a[1][k], 1, b[1], 1);
	        t = 0;
	        for (i = 1; i < k; i = i + 1) {
	            t = t + (a[i][k] * b[i]);
	        }

	        b[k] = (b[k] - t) / a[k][k];
	    }

	    for (kb = 1; kb <= n; kb = kb + 1) {
	        k = n + 1 - kb;
	        b[k] = b[k] / a[k][k];
	        t = -b[k];
	        //~ daxpy(k - 1, t, a[1][k], 1, b[1], 1);
	        for (i = 1; i < k; i = i + 1) {
	            b[i] = b[i] + (t * a[i][k]);
	        }
	    }
	}

	function dpofa(a, lda, n, info) {
	    var i, j, jm1, k, t, s;

	    for (j = 1; j <= n; j = j + 1) {
	        info[1] = j;
	        s = 0;
	        jm1 = j - 1;
	        if (jm1 < 1) {
	            s = a[j][j] - s;
	            if (s <= 0) {
	                break;
	            }
	            a[j][j] = Math.sqrt(s);
	        } else {
	            for (k = 1; k <= jm1; k = k + 1) {
	                //~ t = a[k][j] - ddot(k - 1, a[1][k], 1, a[1][j], 1);
	                t = a[k][j];
	                for (i = 1; i < k; i = i + 1) {
	                    t = t - (a[i][j] * a[i][k]);
	                }
	                t = t / a[k][k];
	                a[k][j] = t;
	                s = s + t * t;
	            }
	            s = a[j][j] - s;
	            if (s <= 0) {
	                break;
	            }
	            a[j][j] = Math.sqrt(s);
	        }
	        info[1] = 0;
	    }
	}

	function qpgen2(dmat, dvec, fddmat, n, sol, crval, amat,
	    bvec, fdamat, q, meq, iact, nact, iter, work, ierr) {

	    var i, j, l, l1, info, it1, iwzv, iwrv, iwrm, iwsv, iwuv, nvl, r, iwnbv,
	        temp, sum, t1, tt, gc, gs, nu,
	        t1inf, t2min,
	        vsmall, tmpa, tmpb,
	        go;

	    r = Math.min(n, q);
	    l = 2 * n + (r * (r + 5)) / 2 + 2 * q + 1;

	    vsmall = 1.0e-60;
	    do {
	        vsmall = vsmall + vsmall;
	        tmpa = 1 + 0.1 * vsmall;
	        tmpb = 1 + 0.2 * vsmall;
	    } while (tmpa <= 1 || tmpb <= 1);

	    for (i = 1; i <= n; i = i + 1) {
	        work[i] = dvec[i];
	    }
	    for (i = n + 1; i <= l; i = i + 1) {
	        work[i] = 0;
	    }
	    for (i = 1; i <= q; i = i + 1) {
	        iact[i] = 0;
	    }

	    info = [];

	    if (ierr[1] === 0) {
	        dpofa(dmat, fddmat, n, info);
	        if (info[1] !== 0) {
	            ierr[1] = 2;
	            return;
	        }
	        dposl(dmat, fddmat, n, dvec);
	        dpori(dmat, fddmat, n);
	    } else {
	        for (j = 1; j <= n; j = j + 1) {
	            sol[j] = 0;
	            for (i = 1; i <= j; i = i + 1) {
	                sol[j] = sol[j] + dmat[i][j] * dvec[i];
	            }
	        }
	        for (j = 1; j <= n; j = j + 1) {
	            dvec[j] = 0;
	            for (i = j; i <= n; i = i + 1) {
	                dvec[j] = dvec[j] + dmat[j][i] * sol[i];
	            }
	        }
	    }

	    crval[1] = 0;
	    for (j = 1; j <= n; j = j + 1) {
	        sol[j] = dvec[j];
	        crval[1] = crval[1] + work[j] * sol[j];
	        work[j] = 0;
	        for (i = j + 1; i <= n; i = i + 1) {
	            dmat[i][j] = 0;
	        }
	    }
	    crval[1] = -crval[1] / 2;
	    ierr[1] = 0;

	    iwzv = n;
	    iwrv = iwzv + n;
	    iwuv = iwrv + r;
	    iwrm = iwuv + r + 1;
	    iwsv = iwrm + (r * (r + 1)) / 2;
	    iwnbv = iwsv + q;

	    for (i = 1; i <= q; i = i + 1) {
	        sum = 0;
	        for (j = 1; j <= n; j = j + 1) {
	            sum = sum + amat[j][i] * amat[j][i];
	        }
	        work[iwnbv + i] = Math.sqrt(sum);
	    }
	    nact = 0;
	    iter[1] = 0;
	    iter[2] = 0;

	    function fn_goto_50() {
	        iter[1] = iter[1] + 1;

	        l = iwsv;
	        for (i = 1; i <= q; i = i + 1) {
	            l = l + 1;
	            sum = -bvec[i];
	            for (j = 1; j <= n; j = j + 1) {
	                sum = sum + amat[j][i] * sol[j];
	            }
	            if (Math.abs(sum) < vsmall) {
	                sum = 0;
	            }
	            if (i > meq) {
	                work[l] = sum;
	            } else {
	                work[l] = -Math.abs(sum);
	                if (sum > 0) {
	                    for (j = 1; j <= n; j = j + 1) {
	                        amat[j][i] = -amat[j][i];
	                    }
	                    bvec[i] = -bvec[i];
	                }
	            }
	        }

	        for (i = 1; i <= nact; i = i + 1) {
	            work[iwsv + iact[i]] = 0;
	        }

	        nvl = 0;
	        temp = 0;
	        for (i = 1; i <= q; i = i + 1) {
	            if (work[iwsv + i] < temp * work[iwnbv + i]) {
	                nvl = i;
	                temp = work[iwsv + i] / work[iwnbv + i];
	            }
	        }
	        if (nvl === 0) {
	            return 999;
	        }

	        return 0;
	    }

	    function fn_goto_55() {
	        for (i = 1; i <= n; i = i + 1) {
	            sum = 0;
	            for (j = 1; j <= n; j = j + 1) {
	                sum = sum + dmat[j][i] * amat[j][nvl];
	            }
	            work[i] = sum;
	        }

	        l1 = iwzv;
	        for (i = 1; i <= n; i = i + 1) {
	            work[l1 + i] = 0;
	        }
	        for (j = nact + 1; j <= n; j = j + 1) {
	            for (i = 1; i <= n; i = i + 1) {
	                work[l1 + i] = work[l1 + i] + dmat[i][j] * work[j];
	            }
	        }

	        t1inf = true;
	        for (i = nact; i >= 1; i = i - 1) {
	            sum = work[i];
	            l = iwrm + (i * (i + 3)) / 2;
	            l1 = l - i;
	            for (j = i + 1; j <= nact; j = j + 1) {
	                sum = sum - work[l] * work[iwrv + j];
	                l = l + j;
	            }
	            sum = sum / work[l1];
	            work[iwrv + i] = sum;
	            if (iact[i] < meq) {
	                // continue;
	                break;
	            }
	            if (sum < 0) {
	                // continue;
	                break;
	            }
	            t1inf = false;
	            it1 = i;
	        }

	        if (!t1inf) {
	            t1 = work[iwuv + it1] / work[iwrv + it1];
	            for (i = 1; i <= nact; i = i + 1) {
	                if (iact[i] < meq) {
	                    // continue;
	                    break;
	                }
	                if (work[iwrv + i] < 0) {
	                    // continue;
	                    break;
	                }
	                temp = work[iwuv + i] / work[iwrv + i];
	                if (temp < t1) {
	                    t1 = temp;
	                    it1 = i;
	                }
	            }
	        }

	        sum = 0;
	        for (i = iwzv + 1; i <= iwzv + n; i = i + 1) {
	            sum = sum + work[i] * work[i];
	        }
	        if (Math.abs(sum) <= vsmall) {
	            if (t1inf) {
	                ierr[1] = 1;
	                // GOTO 999
	                return 999;
	            } else {
	                for (i = 1; i <= nact; i = i + 1) {
	                    work[iwuv + i] = work[iwuv + i] - t1 * work[iwrv + i];
	                }
	                work[iwuv + nact + 1] = work[iwuv + nact + 1] + t1;
	                // GOTO 700
	                return 700;
	            }
	        } else {
	            sum = 0;
	            for (i = 1; i <= n; i = i + 1) {
	                sum = sum + work[iwzv + i] * amat[i][nvl];
	            }
	            tt = -work[iwsv + nvl] / sum;
	            t2min = true;
	            if (!t1inf) {
	                if (t1 < tt) {
	                    tt = t1;
	                    t2min = false;
	                }
	            }

	            for (i = 1; i <= n; i = i + 1) {
	                sol[i] = sol[i] + tt * work[iwzv + i];
	                if (Math.abs(sol[i]) < vsmall) {
	                    sol[i] = 0;
	                }
	            }

	            crval[1] = crval[1] + tt * sum * (tt / 2 + work[iwuv + nact + 1]);
	            for (i = 1; i <= nact; i = i + 1) {
	                work[iwuv + i] = work[iwuv + i] - tt * work[iwrv + i];
	            }
	            work[iwuv + nact + 1] = work[iwuv + nact + 1] + tt;

	            if (t2min) {
	                nact = nact + 1;
	                iact[nact] = nvl;

	                l = iwrm + ((nact - 1) * nact) / 2 + 1;
	                for (i = 1; i <= nact - 1; i = i + 1) {
	                    work[l] = work[i];
	                    l = l + 1;
	                }

	                if (nact === n) {
	                    work[l] = work[n];
	                } else {
	                    for (i = n; i >= nact + 1; i = i - 1) {
	                        if (work[i] === 0) {
	                            // continue;
	                            break;
	                        }
	                        gc = Math.max(Math.abs(work[i - 1]), Math.abs(work[i]));
	                        gs = Math.min(Math.abs(work[i - 1]), Math.abs(work[i]));
	                        if (work[i - 1] >= 0) {
	                            temp = Math.abs(gc * Math.sqrt(1 + gs * gs / (gc * gc)));
	                        } else {
	                            temp = -Math.abs(gc * Math.sqrt(1 + gs * gs / (gc * gc)));
	                        }
	                        gc = work[i - 1] / temp;
	                        gs = work[i] / temp;

	                        if (gc === 1) {
	                            // continue;
	                            break;
	                        }
	                        if (gc === 0) {
	                            work[i - 1] = gs * temp;
	                            for (j = 1; j <= n; j = j + 1) {
	                                temp = dmat[j][i - 1];
	                                dmat[j][i - 1] = dmat[j][i];
	                                dmat[j][i] = temp;
	                            }
	                        } else {
	                            work[i - 1] = temp;
	                            nu = gs / (1 + gc);
	                            for (j = 1; j <= n; j = j + 1) {
	                                temp = gc * dmat[j][i - 1] + gs * dmat[j][i];
	                                dmat[j][i] = nu * (dmat[j][i - 1] + temp) - dmat[j][i];
	                                dmat[j][i - 1] = temp;

	                            }
	                        }
	                    }
	                    work[l] = work[nact];
	                }
	            } else {
	                sum = -bvec[nvl];
	                for (j = 1; j <= n; j = j + 1) {
	                    sum = sum + sol[j] * amat[j][nvl];
	                }
	                if (nvl > meq) {
	                    work[iwsv + nvl] = sum;
	                } else {
	                    work[iwsv + nvl] = -Math.abs(sum);
	                    if (sum > 0) {
	                        for (j = 1; j <= n; j = j + 1) {
	                            amat[j][nvl] = -amat[j][nvl];
	                        }
	                        bvec[nvl] = -bvec[nvl];
	                    }
	                }
	                // GOTO 700
	                return 700;
	            }
	        }

	        return 0;
	    }

	    function fn_goto_797() {
	        l = iwrm + (it1 * (it1 + 1)) / 2 + 1;
	        l1 = l + it1;
	        if (work[l1] === 0) {
	            // GOTO 798
	            return 798;
	        }
	        gc = Math.max(Math.abs(work[l1 - 1]), Math.abs(work[l1]));
	        gs = Math.min(Math.abs(work[l1 - 1]), Math.abs(work[l1]));
	        if (work[l1 - 1] >= 0) {
	            temp = Math.abs(gc * Math.sqrt(1 + gs * gs / (gc * gc)));
	        } else {
	            temp = -Math.abs(gc * Math.sqrt(1 + gs * gs / (gc * gc)));
	        }
	        gc = work[l1 - 1] / temp;
	        gs = work[l1] / temp;

	        if (gc === 1) {
	            // GOTO 798
	            return 798;
	        }
	        if (gc === 0) {
	            for (i = it1 + 1; i <= nact; i = i + 1) {
	                temp = work[l1 - 1];
	                work[l1 - 1] = work[l1];
	                work[l1] = temp;
	                l1 = l1 + i;
	            }
	            for (i = 1; i <= n; i = i + 1) {
	                temp = dmat[i][it1];
	                dmat[i][it1] = dmat[i][it1 + 1];
	                dmat[i][it1 + 1] = temp;
	            }
	        } else {
	            nu = gs / (1 + gc);
	            for (i = it1 + 1; i <= nact; i = i + 1) {
	                temp = gc * work[l1 - 1] + gs * work[l1];
	                work[l1] = nu * (work[l1 - 1] + temp) - work[l1];
	                work[l1 - 1] = temp;
	                l1 = l1 + i;
	            }
	            for (i = 1; i <= n; i = i + 1) {
	                temp = gc * dmat[i][it1] + gs * dmat[i][it1 + 1];
	                dmat[i][it1 + 1] = nu * (dmat[i][it1] + temp) - dmat[i][it1 + 1];
	                dmat[i][it1] = temp;
	            }
	        }

	        return 0;
	    }

	    function fn_goto_798() {
	        l1 = l - it1;
	        for (i = 1; i <= it1; i = i + 1) {
	            work[l1] = work[l];
	            l = l + 1;
	            l1 = l1 + 1;
	        }

	        work[iwuv + it1] = work[iwuv + it1 + 1];
	        iact[it1] = iact[it1 + 1];
	        it1 = it1 + 1;
	        if (it1 < nact) {
	            // GOTO 797
	            return 797;
	        }

	        return 0;
	    }

	    function fn_goto_799() {
	        work[iwuv + nact] = work[iwuv + nact + 1];
	        work[iwuv + nact + 1] = 0;
	        iact[nact] = 0;
	        nact = nact - 1;
	        iter[2] = iter[2] + 1;

	        return 0;
	    }

	    go = 0;
	    while (true) {
	        go = fn_goto_50();
	        if (go === 999) {
	            return;
	        }
	        while (true) {
	            go = fn_goto_55();
	            if (go === 0) {
	                break;
	            }
	            if (go === 999) {
	                return;
	            }
	            if (go === 700) {
	                if (it1 === nact) {
	                    fn_goto_799();
	                } else {
	                    while (true) {
	                        fn_goto_797();
	                        go = fn_goto_798();
	                        if (go !== 797) {
	                            break;
	                        }
	                    }
	                    fn_goto_799();
	                }
	            }
	        }
	    }

	}

	function solveQP(Dmat, dvec, Amat, bvec, meq, factorized) {
	    Dmat = base0to1(Dmat);
	    dvec = base0to1(dvec);
	    Amat = base0to1(Amat);
	    var i, n, q,
	        nact, r,
	        crval = [], iact = [], sol = [], work = [], iter = [],
	        message;

	    meq = meq || 0;
	    factorized = factorized ? base0to1(factorized) : [undefined, 0];
	    bvec = bvec ? base0to1(bvec) : [];

	    // In Fortran the array index starts from 1
	    n = Dmat.length - 1;
	    q = Amat[1].length - 1;

	    if (!bvec) {
	        for (i = 1; i <= q; i = i + 1) {
	            bvec[i] = 0;
	        }
	    }
	    for (i = 1; i <= q; i = i + 1) {
	        iact[i] = 0;
	    }
	    nact = 0;
	    r = Math.min(n, q);
	    for (i = 1; i <= n; i = i + 1) {
	        sol[i] = 0;
	    }
	    crval[1] = 0;
	    for (i = 1; i <= (2 * n + (r * (r + 5)) / 2 + 2 * q + 1); i = i + 1) {
	        work[i] = 0;
	    }
	    for (i = 1; i <= 2; i = i + 1) {
	        iter[i] = 0;
	    }

	    qpgen2(Dmat, dvec, n, n, sol, crval, Amat,
	        bvec, n, q, meq, iact, nact, iter, work, factorized);

	    message = "";
	    if (factorized[1] === 1) {
	        message = "constraints are inconsistent, no solution!";
	    }
	    if (factorized[1] === 2) {
	        message = "matrix D in quadratic function is not positive definite!";
	    }

	    return {
	        solution: base1to0(sol),
	        value: base1to0(crval),
	        unconstrained_solution: base1to0(dvec),
	        iterations: base1to0(iter),
	        iact: base1to0(iact),
	        message: message
	    };
	}
	exports.solveQP = solveQP;
	}(numeric));
	/*
	Shanti Rao sent me this routine by private email. I had to modify it
	slightly to work on Arrays instead of using a Matrix object.
	It is apparently translated from http://stitchpanorama.sourceforge.net/Python/svd.py
	*/

	numeric.svd= function svd(A) {
	    var temp;
	//Compute the thin SVD from G. H. Golub and C. Reinsch, Numer. Math. 14, 403-420 (1970)
		var prec= numeric.epsilon; //Math.pow(2,-52) // assumes double prec
		var tolerance= 1.e-64/prec;
		var itmax= 50;
		var c=0;
		var i=0;
		var j=0;
		var k=0;
		var l=0;
		
		var u= numeric.clone(A);
		var m= u.length;
		
		var n= u[0].length;
		
		if (m < n) throw "Need more rows than columns"
		
		var e = new Array(n);
		var q = new Array(n);
		for (i=0; i<n; i++) e[i] = q[i] = 0.0;
		var v = numeric.rep([n,n],0);
	//	v.zero();
		
	 	function pythag(a,b)
	 	{
			a = Math.abs(a)
			b = Math.abs(b)
			if (a > b)
				return a*Math.sqrt(1.0+(b*b/a/a))
			else if (b == 0.0) 
				return a
			return b*Math.sqrt(1.0+(a*a/b/b))
		}

		//Householder's reduction to bidiagonal form

		var f= 0.0;
		var g= 0.0;
		var h= 0.0;
		var x= 0.0;
		var y= 0.0;
		var z= 0.0;
		var s= 0.0;
		
		for (i=0; i < n; i++)
		{	
			e[i]= g;
			s= 0.0;
			l= i+1;
			for (j=i; j < m; j++) 
				s += (u[j][i]*u[j][i]);
			if (s <= tolerance)
				g= 0.0;
			else
			{	
				f= u[i][i];
				g= Math.sqrt(s);
				if (f >= 0.0) g= -g;
				h= f*g-s
				u[i][i]=f-g;
				for (j=l; j < n; j++)
				{
					s= 0.0
					for (k=i; k < m; k++) 
						s += u[k][i]*u[k][j]
					f= s/h
					for (k=i; k < m; k++) 
						u[k][j]+=f*u[k][i]
				}
			}
			q[i]= g
			s= 0.0
			for (j=l; j < n; j++) 
				s= s + u[i][j]*u[i][j]
			if (s <= tolerance)
				g= 0.0
			else
			{	
				f= u[i][i+1]
				g= Math.sqrt(s)
				if (f >= 0.0) g= -g
				h= f*g - s
				u[i][i+1] = f-g;
				for (j=l; j < n; j++) e[j]= u[i][j]/h
				for (j=l; j < m; j++)
				{	
					s=0.0
					for (k=l; k < n; k++) 
						s += (u[j][k]*u[i][k])
					for (k=l; k < n; k++) 
						u[j][k]+=s*e[k]
				}	
			}
			y= Math.abs(q[i])+Math.abs(e[i])
			if (y>x) 
				x=y
		}
		
		// accumulation of right hand gtransformations
		for (i=n-1; i != -1; i+= -1)
		{	
			if (g != 0.0)
			{
			 	h= g*u[i][i+1]
				for (j=l; j < n; j++) 
					v[j][i]=u[i][j]/h
				for (j=l; j < n; j++)
				{	
					s=0.0
					for (k=l; k < n; k++) 
						s += u[i][k]*v[k][j]
					for (k=l; k < n; k++) 
						v[k][j]+=(s*v[k][i])
				}	
			}
			for (j=l; j < n; j++)
			{
				v[i][j] = 0;
				v[j][i] = 0;
			}
			v[i][i] = 1;
			g= e[i]
			l= i
		}
		
		// accumulation of left hand transformations
		for (i=n-1; i != -1; i+= -1)
		{	
			l= i+1
			g= q[i]
			for (j=l; j < n; j++) 
				u[i][j] = 0;
			if (g != 0.0)
			{
				h= u[i][i]*g
				for (j=l; j < n; j++)
				{
					s=0.0
					for (k=l; k < m; k++) s += u[k][i]*u[k][j];
					f= s/h
					for (k=i; k < m; k++) u[k][j]+=f*u[k][i];
				}
				for (j=i; j < m; j++) u[j][i] = u[j][i]/g;
			}
			else
				for (j=i; j < m; j++) u[j][i] = 0;
			u[i][i] += 1;
		}
		
		// diagonalization of the bidiagonal form
		prec= prec*x
		for (k=n-1; k != -1; k+= -1)
		{
			for (var iteration=0; iteration < itmax; iteration++)
			{	// test f splitting
				var test_convergence = false
				for (l=k; l != -1; l+= -1)
				{	
					if (Math.abs(e[l]) <= prec)
					{	test_convergence= true
						break 
					}
					if (Math.abs(q[l-1]) <= prec)
						break 
				}
				if (!test_convergence)
				{	// cancellation of e[l] if l>0
					c= 0.0
					s= 1.0
					var l1= l-1
					for (i =l; i<k+1; i++)
					{	
						f= s*e[i]
						e[i]= c*e[i]
						if (Math.abs(f) <= prec)
							break
						g= q[i]
						h= pythag(f,g)
						q[i]= h
						c= g/h
						s= -f/h
						for (j=0; j < m; j++)
						{	
							y= u[j][l1]
							z= u[j][i]
							u[j][l1] =  y*c+(z*s)
							u[j][i] = -y*s+(z*c)
						} 
					}	
				}
				// test f convergence
				z= q[k]
				if (l== k)
				{	//convergence
					if (z<0.0)
					{	//q[k] is made non-negative
						q[k]= -z
						for (j=0; j < n; j++)
							v[j][k] = -v[j][k]
					}
					break  //break out of iteration loop and move on to next k value
				}
				if (iteration >= itmax-1)
					throw 'Error: no convergence.'
				// shift from bottom 2x2 minor
				x= q[l]
				y= q[k-1]
				g= e[k-1]
				h= e[k]
				f= ((y-z)*(y+z)+(g-h)*(g+h))/(2.0*h*y)
				g= pythag(f,1.0)
				if (f < 0.0)
					f= ((x-z)*(x+z)+h*(y/(f-g)-h))/x
				else
					f= ((x-z)*(x+z)+h*(y/(f+g)-h))/x
				// next QR transformation
				c= 1.0
				s= 1.0
				for (i=l+1; i< k+1; i++)
				{	
					g= e[i]
					y= q[i]
					h= s*g
					g= c*g
					z= pythag(f,h)
					e[i-1]= z
					c= f/z
					s= h/z
					f= x*c+g*s
					g= -x*s+g*c
					h= y*s
					y= y*c
					for (j=0; j < n; j++)
					{	
						x= v[j][i-1]
						z= v[j][i]
						v[j][i-1] = x*c+z*s
						v[j][i] = -x*s+z*c
					}
					z= pythag(f,h)
					q[i-1]= z
					c= f/z
					s= h/z
					f= c*g+s*y
					x= -s*g+c*y
					for (j=0; j < m; j++)
					{
						y= u[j][i-1]
						z= u[j][i]
						u[j][i-1] = y*c+z*s
						u[j][i] = -y*s+z*c
					}
				}
				e[l]= 0.0
				e[k]= f
				q[k]= x
			} 
		}
			
		//vt= transpose(v)
		//return (u,q,vt)
		for (i=0;i<q.length; i++) 
		  if (q[i] < prec) q[i] = 0
		  
		//sort eigenvalues	
		for (i=0; i< n; i++)
		{	 
		//writeln(q)
		 for (j=i-1; j >= 0; j--)
		 {
		  if (q[j] < q[i])
		  {
		//  writeln(i,'-',j)
		   c = q[j]
		   q[j] = q[i]
		   q[i] = c
		   for(k=0;k<u.length;k++) { temp = u[k][i]; u[k][i] = u[k][j]; u[k][j] = temp; }
		   for(k=0;k<v.length;k++) { temp = v[k][i]; v[k][i] = v[k][j]; v[k][j] = temp; }
	//	   u.swapCols(i,j)
	//	   v.swapCols(i,j)
		   i = j	   
		  }
		 }	
		}
		
		return {U:u,S:q,V:v}
	};


	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 307 */
/***/ (function(module, exports, __webpack_require__) {

	(function webpackUniversalModuleDefinition(root, factory) {
		if(true)
			module.exports = factory(__webpack_require__(308));
		else if(typeof define === 'function' && define.amd)
			define(["popper.js"], factory);
		else if(typeof exports === 'object')
			exports["cytoscapePopper"] = factory(require("popper.js"));
		else
			root["cytoscapePopper"] = factory(root["Popper"]);
	})(this, function(__WEBPACK_EXTERNAL_MODULE_8__) {
	return /******/ (function(modules) { // webpackBootstrap
	/******/ 	// The module cache
	/******/ 	var installedModules = {};
	/******/
	/******/ 	// The require function
	/******/ 	function __webpack_require__(moduleId) {
	/******/
	/******/ 		// Check if module is in cache
	/******/ 		if(installedModules[moduleId]) {
	/******/ 			return installedModules[moduleId].exports;
	/******/ 		}
	/******/ 		// Create a new module (and put it into the cache)
	/******/ 		var module = installedModules[moduleId] = {
	/******/ 			i: moduleId,
	/******/ 			l: false,
	/******/ 			exports: {}
	/******/ 		};
	/******/
	/******/ 		// Execute the module function
	/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
	/******/
	/******/ 		// Flag the module as loaded
	/******/ 		module.l = true;
	/******/
	/******/ 		// Return the exports of the module
	/******/ 		return module.exports;
	/******/ 	}
	/******/
	/******/
	/******/ 	// expose the modules object (__webpack_modules__)
	/******/ 	__webpack_require__.m = modules;
	/******/
	/******/ 	// expose the module cache
	/******/ 	__webpack_require__.c = installedModules;
	/******/
	/******/ 	// identity function for calling harmony imports with the correct context
	/******/ 	__webpack_require__.i = function(value) { return value; };
	/******/
	/******/ 	// define getter function for harmony exports
	/******/ 	__webpack_require__.d = function(exports, name, getter) {
	/******/ 		if(!__webpack_require__.o(exports, name)) {
	/******/ 			Object.defineProperty(exports, name, {
	/******/ 				configurable: false,
	/******/ 				enumerable: true,
	/******/ 				get: getter
	/******/ 			});
	/******/ 		}
	/******/ 	};
	/******/
	/******/ 	// getDefaultExport function for compatibility with non-harmony modules
	/******/ 	__webpack_require__.n = function(module) {
	/******/ 		var getter = module && module.__esModule ?
	/******/ 			function getDefault() { return module['default']; } :
	/******/ 			function getModuleExports() { return module; };
	/******/ 		__webpack_require__.d(getter, 'a', getter);
	/******/ 		return getter;
	/******/ 	};
	/******/
	/******/ 	// Object.prototype.hasOwnProperty.call
	/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
	/******/
	/******/ 	// __webpack_public_path__
	/******/ 	__webpack_require__.p = "";
	/******/
	/******/ 	// Load entry module and return exports
	/******/ 	return __webpack_require__(__webpack_require__.s = 7);
	/******/ })
	/************************************************************************/
	/******/ ([
	/* 0 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	// Simple, internal Object.assign() polyfill for options objects etc.

	module.exports = Object.assign != null ? Object.assign.bind(Object) : function (tgt) {
	  for (var _len = arguments.length, srcs = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	    srcs[_key - 1] = arguments[_key];
	  }

	  srcs.forEach(function (src) {
	    if (src !== null && src !== undefined) {
	      Object.keys(src).forEach(function (k) {
	        return tgt[k] = src[k];
	      });
	    }
	  });

	  return tgt;
	};

	/***/ }),
	/* 1 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	var _require = __webpack_require__(5),
	    getBoundingBox = _require.getBoundingBox;

	// Create a popper reference object
	// https://popper.js.org/popper-documentation.html#referenceObject


	function getRef(target, opts) {
	  var renderedDimensions = opts.renderedDimensions;

	  //Define popper reference object and cy reference  object

	  var refObject = {
	    getBoundingClientRect: function getBoundingClientRect() {
	      return getBoundingBox(target, opts);
	    },

	    get clientWidth() {
	      return renderedDimensions(target).w;
	    },

	    get clientHeight() {
	      return renderedDimensions(target).h;
	    }
	  };

	  return refObject;
	}

	module.exports = { getRef: getRef };

	/***/ }),
	/* 2 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	var assign = __webpack_require__(0);

	var _require = __webpack_require__(1),
	    getRef = _require.getRef;

	var _require2 = __webpack_require__(6),
	    getContent = _require2.getContent;

	var popperDefaults = {};

	//Fix Popper.js webpack import conflict (Use .default if using webpack)
	var Popper = __webpack_require__(8);
	var EsmWebpackPopper = Popper.default;
	if (EsmWebpackPopper != null && EsmWebpackPopper.Defaults != null) {
	  Popper = Popper.default;
	}

	// Create a new popper object for a core or element target
	function getPopper(target, opts) {
	  var refObject = getRef(target, opts);
	  var content = getContent(target, opts.content);
	  var popperOpts = assign({}, popperDefaults, opts.popper);

	  return new Popper(refObject, content, popperOpts);
	}

	module.exports = { getPopper: getPopper };

	/***/ }),
	/* 3 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	var assign = __webpack_require__(0);

	var _require = __webpack_require__(2),
	    getPopper = _require.getPopper;

	var _require2 = __webpack_require__(1),
	    getRef = _require2.getRef;

	function popper(opts) {
	  checkForWarning(this);

	  return getPopper(this[0], createOptionsObject(this[0], opts));
	}

	function popperRef(opts) {
	  checkForWarning(this);

	  return getRef(this[0], createOptionsObject(this[0], opts));
	}

	function createOptionsObject(target, opts) {
	  var renderedDimensions = function renderedDimensions(el) {
	    return el.isNode() ? { w: el.renderedWidth(), h: el.renderedHeight() } : { w: 3, h: 3 };
	  };
	  var renderedPosition = function renderedPosition(el) {
	    return el.isNode() ? getRenderedCenter(el, renderedDimensions) : getRenderedMidpoint(el);
	  };
	  var popper = {};
	  var cy = target.cy();

	  var defaults = { renderedDimensions: renderedDimensions, renderedPosition: renderedPosition, popper: popper, cy: cy };

	  return assign({}, defaults, opts);
	}

	//Get the rendered center
	function getRenderedCenter(target, renderedDimensions) {
	  var pos = target.renderedPosition();
	  var dimensions = renderedDimensions(target);
	  var offsetX = dimensions.w / 2;
	  var offsetY = dimensions.h / 2;

	  return {
	    x: pos.x - offsetX,
	    y: pos.y - offsetY
	  };
	}

	//Get the rendered position of the midpoint
	function getRenderedMidpoint(target) {
	  var p = target.midpoint();
	  var pan = target.cy().pan();
	  var zoom = target.cy().zoom();

	  return {
	    x: p.x * zoom + pan.x,
	    y: p.y * zoom + pan.y
	  };
	}

	//Warn user about misuse of the plugin
	function checkForWarning(elements) {
	  /* eslint-disable no-console */

	  //Popper.js Should only be used on 1 element
	  if (elements.length > 1) {
	    console.warn("Popper.js Extension should only be used on one element.");
	    console.warn("Ignoring all subsequent elements");
	  }

	  /* eslint-enable */
	}

	module.exports = { popper: popper, popperRef: popperRef };

	/***/ }),
	/* 4 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	var assign = __webpack_require__(0);

	var _require = __webpack_require__(2),
	    getPopper = _require.getPopper;

	var _require2 = __webpack_require__(1),
	    getRef = _require2.getRef;

	function popper(opts) {
	  return getPopper(this, createOptionsObject(this, opts));
	}

	function popperRef(opts) {
	  return getRef(this, createOptionsObject(this, opts));
	}

	//Create a options object with required default values
	function createOptionsObject(target, opts) {
	  var defaults = {
	    boundingBox: {
	      top: 0,
	      left: 0,
	      right: 0,
	      bottom: 0,
	      w: 3,
	      h: 3
	    },
	    renderedDimensions: function renderedDimensions() {
	      return { w: 3, h: 3 };
	    },
	    redneredPosition: function redneredPosition() {
	      return { x: 0, y: 0 };
	    },
	    popper: {},
	    cy: target
	  };

	  return assign({}, defaults, opts);
	}

	module.exports = { popper: popper, popperRef: popperRef };

	/***/ }),
	/* 5 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	function getBoundingBox(target, opts) {
	  var renderedPosition = opts.renderedPosition,
	      cy = opts.cy,
	      renderedDimensions = opts.renderedDimensions;

	  var offset = cy.container().getBoundingClientRect();
	  var dims = renderedDimensions(target);
	  var pos = renderedPosition(target);

	  return {
	    top: pos.y + offset.top,
	    left: pos.x + offset.left,
	    right: pos.x + dims.w + offset.left,
	    bottom: pos.y + dims.h + offset.top,
	    width: dims.w,
	    height: dims.h
	  };
	}

	module.exports = { getBoundingBox: getBoundingBox };

	/***/ }),
	/* 6 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	function getContent(target, content) {
	  var contentObject = null;

	  if (typeof content === "function") {
	    //Execute function if user opted for a dyanamic target
	    contentObject = content(target);
	  } else if (content instanceof HTMLElement) {
	    //Target option is an HTML element
	    return content;
	  } else {
	    throw new Error("Can not create popper from 'target' with unknown type");
	  }

	  // Check validity of parsed target
	  if (contentObject === null) {
	    throw new Error("No 'target' specified to create popper");
	  } else {
	    return contentObject;
	  }
	}

	module.exports = { getContent: getContent };

	/***/ }),
	/* 7 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	/* global cytoscape */

	var coreImpl = __webpack_require__(4);
	var collectionImpl = __webpack_require__(3);

	// registers the extension on a cytoscape lib ref
	var register = function register(cytoscape) {
	  if (!cytoscape) {
	    return;
	  } // can't register if cytoscape unspecified

	  // register with cytoscape.js
	  cytoscape('core', 'popper', coreImpl.popper); //Cytoscape Core
	  cytoscape('collection', 'popper', collectionImpl.popper); //Cytoscape Collections
	  cytoscape('core', 'popperRef', coreImpl.popperRef); //Cytoscape Core for References
	  cytoscape('collection', 'popperRef', collectionImpl.popperRef); //Cytoscape Collections for References
	};

	if (typeof cytoscape !== 'undefined') {
	  // expose to global cytoscape (i.e. window.cytoscape)
	  register(cytoscape);
	}

	module.exports = register;

	/***/ }),
	/* 8 */
	/***/ (function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_8__;

	/***/ })
	/******/ ]);
	});

/***/ }),
/* 308 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {/**!
	 * @fileOverview Kickass library to create and place poppers near their reference elements.
	 * @version 1.16.1
	 * @license
	 * Copyright (c) 2016 Federico Zivolo and contributors
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in all
	 * copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
	 * SOFTWARE.
	 */
	(function (global, factory) {
		 true ? module.exports = factory() :
		typeof define === 'function' && define.amd ? define(factory) :
		(global.Popper = factory());
	}(this, (function () { 'use strict';

	var isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined' && typeof navigator !== 'undefined';

	var timeoutDuration = function () {
	  var longerTimeoutBrowsers = ['Edge', 'Trident', 'Firefox'];
	  for (var i = 0; i < longerTimeoutBrowsers.length; i += 1) {
	    if (isBrowser && navigator.userAgent.indexOf(longerTimeoutBrowsers[i]) >= 0) {
	      return 1;
	    }
	  }
	  return 0;
	}();

	function microtaskDebounce(fn) {
	  var called = false;
	  return function () {
	    if (called) {
	      return;
	    }
	    called = true;
	    window.Promise.resolve().then(function () {
	      called = false;
	      fn();
	    });
	  };
	}

	function taskDebounce(fn) {
	  var scheduled = false;
	  return function () {
	    if (!scheduled) {
	      scheduled = true;
	      setTimeout(function () {
	        scheduled = false;
	        fn();
	      }, timeoutDuration);
	    }
	  };
	}

	var supportsMicroTasks = isBrowser && window.Promise;

	/**
	* Create a debounced version of a method, that's asynchronously deferred
	* but called in the minimum time possible.
	*
	* @method
	* @memberof Popper.Utils
	* @argument {Function} fn
	* @returns {Function}
	*/
	var debounce = supportsMicroTasks ? microtaskDebounce : taskDebounce;

	/**
	 * Check if the given variable is a function
	 * @method
	 * @memberof Popper.Utils
	 * @argument {Any} functionToCheck - variable to check
	 * @returns {Boolean} answer to: is a function?
	 */
	function isFunction(functionToCheck) {
	  var getType = {};
	  return functionToCheck && getType.toString.call(functionToCheck) === '[object Function]';
	}

	/**
	 * Get CSS computed property of the given element
	 * @method
	 * @memberof Popper.Utils
	 * @argument {Eement} element
	 * @argument {String} property
	 */
	function getStyleComputedProperty(element, property) {
	  if (element.nodeType !== 1) {
	    return [];
	  }
	  // NOTE: 1 DOM access here
	  var window = element.ownerDocument.defaultView;
	  var css = window.getComputedStyle(element, null);
	  return property ? css[property] : css;
	}

	/**
	 * Returns the parentNode or the host of the element
	 * @method
	 * @memberof Popper.Utils
	 * @argument {Element} element
	 * @returns {Element} parent
	 */
	function getParentNode(element) {
	  if (element.nodeName === 'HTML') {
	    return element;
	  }
	  return element.parentNode || element.host;
	}

	/**
	 * Returns the scrolling parent of the given element
	 * @method
	 * @memberof Popper.Utils
	 * @argument {Element} element
	 * @returns {Element} scroll parent
	 */
	function getScrollParent(element) {
	  // Return body, `getScroll` will take care to get the correct `scrollTop` from it
	  if (!element) {
	    return document.body;
	  }

	  switch (element.nodeName) {
	    case 'HTML':
	    case 'BODY':
	      return element.ownerDocument.body;
	    case '#document':
	      return element.body;
	  }

	  // Firefox want us to check `-x` and `-y` variations as well

	  var _getStyleComputedProp = getStyleComputedProperty(element),
	      overflow = _getStyleComputedProp.overflow,
	      overflowX = _getStyleComputedProp.overflowX,
	      overflowY = _getStyleComputedProp.overflowY;

	  if (/(auto|scroll|overlay)/.test(overflow + overflowY + overflowX)) {
	    return element;
	  }

	  return getScrollParent(getParentNode(element));
	}

	/**
	 * Returns the reference node of the reference object, or the reference object itself.
	 * @method
	 * @memberof Popper.Utils
	 * @param {Element|Object} reference - the reference element (the popper will be relative to this)
	 * @returns {Element} parent
	 */
	function getReferenceNode(reference) {
	  return reference && reference.referenceNode ? reference.referenceNode : reference;
	}

	var isIE11 = isBrowser && !!(window.MSInputMethodContext && document.documentMode);
	var isIE10 = isBrowser && /MSIE 10/.test(navigator.userAgent);

	/**
	 * Determines if the browser is Internet Explorer
	 * @method
	 * @memberof Popper.Utils
	 * @param {Number} version to check
	 * @returns {Boolean} isIE
	 */
	function isIE(version) {
	  if (version === 11) {
	    return isIE11;
	  }
	  if (version === 10) {
	    return isIE10;
	  }
	  return isIE11 || isIE10;
	}

	/**
	 * Returns the offset parent of the given element
	 * @method
	 * @memberof Popper.Utils
	 * @argument {Element} element
	 * @returns {Element} offset parent
	 */
	function getOffsetParent(element) {
	  if (!element) {
	    return document.documentElement;
	  }

	  var noOffsetParent = isIE(10) ? document.body : null;

	  // NOTE: 1 DOM access here
	  var offsetParent = element.offsetParent || null;
	  // Skip hidden elements which don't have an offsetParent
	  while (offsetParent === noOffsetParent && element.nextElementSibling) {
	    offsetParent = (element = element.nextElementSibling).offsetParent;
	  }

	  var nodeName = offsetParent && offsetParent.nodeName;

	  if (!nodeName || nodeName === 'BODY' || nodeName === 'HTML') {
	    return element ? element.ownerDocument.documentElement : document.documentElement;
	  }

	  // .offsetParent will return the closest TH, TD or TABLE in case
	  // no offsetParent is present, I hate this job...
	  if (['TH', 'TD', 'TABLE'].indexOf(offsetParent.nodeName) !== -1 && getStyleComputedProperty(offsetParent, 'position') === 'static') {
	    return getOffsetParent(offsetParent);
	  }

	  return offsetParent;
	}

	function isOffsetContainer(element) {
	  var nodeName = element.nodeName;

	  if (nodeName === 'BODY') {
	    return false;
	  }
	  return nodeName === 'HTML' || getOffsetParent(element.firstElementChild) === element;
	}

	/**
	 * Finds the root node (document, shadowDOM root) of the given element
	 * @method
	 * @memberof Popper.Utils
	 * @argument {Element} node
	 * @returns {Element} root node
	 */
	function getRoot(node) {
	  if (node.parentNode !== null) {
	    return getRoot(node.parentNode);
	  }

	  return node;
	}

	/**
	 * Finds the offset parent common to the two provided nodes
	 * @method
	 * @memberof Popper.Utils
	 * @argument {Element} element1
	 * @argument {Element} element2
	 * @returns {Element} common offset parent
	 */
	function findCommonOffsetParent(element1, element2) {
	  // This check is needed to avoid errors in case one of the elements isn't defined for any reason
	  if (!element1 || !element1.nodeType || !element2 || !element2.nodeType) {
	    return document.documentElement;
	  }

	  // Here we make sure to give as "start" the element that comes first in the DOM
	  var order = element1.compareDocumentPosition(element2) & Node.DOCUMENT_POSITION_FOLLOWING;
	  var start = order ? element1 : element2;
	  var end = order ? element2 : element1;

	  // Get common ancestor container
	  var range = document.createRange();
	  range.setStart(start, 0);
	  range.setEnd(end, 0);
	  var commonAncestorContainer = range.commonAncestorContainer;

	  // Both nodes are inside #document

	  if (element1 !== commonAncestorContainer && element2 !== commonAncestorContainer || start.contains(end)) {
	    if (isOffsetContainer(commonAncestorContainer)) {
	      return commonAncestorContainer;
	    }

	    return getOffsetParent(commonAncestorContainer);
	  }

	  // one of the nodes is inside shadowDOM, find which one
	  var element1root = getRoot(element1);
	  if (element1root.host) {
	    return findCommonOffsetParent(element1root.host, element2);
	  } else {
	    return findCommonOffsetParent(element1, getRoot(element2).host);
	  }
	}

	/**
	 * Gets the scroll value of the given element in the given side (top and left)
	 * @method
	 * @memberof Popper.Utils
	 * @argument {Element} element
	 * @argument {String} side `top` or `left`
	 * @returns {number} amount of scrolled pixels
	 */
	function getScroll(element) {
	  var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'top';

	  var upperSide = side === 'top' ? 'scrollTop' : 'scrollLeft';
	  var nodeName = element.nodeName;

	  if (nodeName === 'BODY' || nodeName === 'HTML') {
	    var html = element.ownerDocument.documentElement;
	    var scrollingElement = element.ownerDocument.scrollingElement || html;
	    return scrollingElement[upperSide];
	  }

	  return element[upperSide];
	}

	/*
	 * Sum or subtract the element scroll values (left and top) from a given rect object
	 * @method
	 * @memberof Popper.Utils
	 * @param {Object} rect - Rect object you want to change
	 * @param {HTMLElement} element - The element from the function reads the scroll values
	 * @param {Boolean} subtract - set to true if you want to subtract the scroll values
	 * @return {Object} rect - The modifier rect object
	 */
	function includeScroll(rect, element) {
	  var subtract = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

	  var scrollTop = getScroll(element, 'top');
	  var scrollLeft = getScroll(element, 'left');
	  var modifier = subtract ? -1 : 1;
	  rect.top += scrollTop * modifier;
	  rect.bottom += scrollTop * modifier;
	  rect.left += scrollLeft * modifier;
	  rect.right += scrollLeft * modifier;
	  return rect;
	}

	/*
	 * Helper to detect borders of a given element
	 * @method
	 * @memberof Popper.Utils
	 * @param {CSSStyleDeclaration} styles
	 * Result of `getStyleComputedProperty` on the given element
	 * @param {String} axis - `x` or `y`
	 * @return {number} borders - The borders size of the given axis
	 */

	function getBordersSize(styles, axis) {
	  var sideA = axis === 'x' ? 'Left' : 'Top';
	  var sideB = sideA === 'Left' ? 'Right' : 'Bottom';

	  return parseFloat(styles['border' + sideA + 'Width']) + parseFloat(styles['border' + sideB + 'Width']);
	}

	function getSize(axis, body, html, computedStyle) {
	  return Math.max(body['offset' + axis], body['scroll' + axis], html['client' + axis], html['offset' + axis], html['scroll' + axis], isIE(10) ? parseInt(html['offset' + axis]) + parseInt(computedStyle['margin' + (axis === 'Height' ? 'Top' : 'Left')]) + parseInt(computedStyle['margin' + (axis === 'Height' ? 'Bottom' : 'Right')]) : 0);
	}

	function getWindowSizes(document) {
	  var body = document.body;
	  var html = document.documentElement;
	  var computedStyle = isIE(10) && getComputedStyle(html);

	  return {
	    height: getSize('Height', body, html, computedStyle),
	    width: getSize('Width', body, html, computedStyle)
	  };
	}

	var classCallCheck = function (instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	};

	var createClass = function () {
	  function defineProperties(target, props) {
	    for (var i = 0; i < props.length; i++) {
	      var descriptor = props[i];
	      descriptor.enumerable = descriptor.enumerable || false;
	      descriptor.configurable = true;
	      if ("value" in descriptor) descriptor.writable = true;
	      Object.defineProperty(target, descriptor.key, descriptor);
	    }
	  }

	  return function (Constructor, protoProps, staticProps) {
	    if (protoProps) defineProperties(Constructor.prototype, protoProps);
	    if (staticProps) defineProperties(Constructor, staticProps);
	    return Constructor;
	  };
	}();





	var defineProperty = function (obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	  } else {
	    obj[key] = value;
	  }

	  return obj;
	};

	var _extends = Object.assign || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];

	    for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }

	  return target;
	};

	/**
	 * Given element offsets, generate an output similar to getBoundingClientRect
	 * @method
	 * @memberof Popper.Utils
	 * @argument {Object} offsets
	 * @returns {Object} ClientRect like output
	 */
	function getClientRect(offsets) {
	  return _extends({}, offsets, {
	    right: offsets.left + offsets.width,
	    bottom: offsets.top + offsets.height
	  });
	}

	/**
	 * Get bounding client rect of given element
	 * @method
	 * @memberof Popper.Utils
	 * @param {HTMLElement} element
	 * @return {Object} client rect
	 */
	function getBoundingClientRect(element) {
	  var rect = {};

	  // IE10 10 FIX: Please, don't ask, the element isn't
	  // considered in DOM in some circumstances...
	  // This isn't reproducible in IE10 compatibility mode of IE11
	  try {
	    if (isIE(10)) {
	      rect = element.getBoundingClientRect();
	      var scrollTop = getScroll(element, 'top');
	      var scrollLeft = getScroll(element, 'left');
	      rect.top += scrollTop;
	      rect.left += scrollLeft;
	      rect.bottom += scrollTop;
	      rect.right += scrollLeft;
	    } else {
	      rect = element.getBoundingClientRect();
	    }
	  } catch (e) {}

	  var result = {
	    left: rect.left,
	    top: rect.top,
	    width: rect.right - rect.left,
	    height: rect.bottom - rect.top
	  };

	  // subtract scrollbar size from sizes
	  var sizes = element.nodeName === 'HTML' ? getWindowSizes(element.ownerDocument) : {};
	  var width = sizes.width || element.clientWidth || result.width;
	  var height = sizes.height || element.clientHeight || result.height;

	  var horizScrollbar = element.offsetWidth - width;
	  var vertScrollbar = element.offsetHeight - height;

	  // if an hypothetical scrollbar is detected, we must be sure it's not a `border`
	  // we make this check conditional for performance reasons
	  if (horizScrollbar || vertScrollbar) {
	    var styles = getStyleComputedProperty(element);
	    horizScrollbar -= getBordersSize(styles, 'x');
	    vertScrollbar -= getBordersSize(styles, 'y');

	    result.width -= horizScrollbar;
	    result.height -= vertScrollbar;
	  }

	  return getClientRect(result);
	}

	function getOffsetRectRelativeToArbitraryNode(children, parent) {
	  var fixedPosition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

	  var isIE10 = isIE(10);
	  var isHTML = parent.nodeName === 'HTML';
	  var childrenRect = getBoundingClientRect(children);
	  var parentRect = getBoundingClientRect(parent);
	  var scrollParent = getScrollParent(children);

	  var styles = getStyleComputedProperty(parent);
	  var borderTopWidth = parseFloat(styles.borderTopWidth);
	  var borderLeftWidth = parseFloat(styles.borderLeftWidth);

	  // In cases where the parent is fixed, we must ignore negative scroll in offset calc
	  if (fixedPosition && isHTML) {
	    parentRect.top = Math.max(parentRect.top, 0);
	    parentRect.left = Math.max(parentRect.left, 0);
	  }
	  var offsets = getClientRect({
	    top: childrenRect.top - parentRect.top - borderTopWidth,
	    left: childrenRect.left - parentRect.left - borderLeftWidth,
	    width: childrenRect.width,
	    height: childrenRect.height
	  });
	  offsets.marginTop = 0;
	  offsets.marginLeft = 0;

	  // Subtract margins of documentElement in case it's being used as parent
	  // we do this only on HTML because it's the only element that behaves
	  // differently when margins are applied to it. The margins are included in
	  // the box of the documentElement, in the other cases not.
	  if (!isIE10 && isHTML) {
	    var marginTop = parseFloat(styles.marginTop);
	    var marginLeft = parseFloat(styles.marginLeft);

	    offsets.top -= borderTopWidth - marginTop;
	    offsets.bottom -= borderTopWidth - marginTop;
	    offsets.left -= borderLeftWidth - marginLeft;
	    offsets.right -= borderLeftWidth - marginLeft;

	    // Attach marginTop and marginLeft because in some circumstances we may need them
	    offsets.marginTop = marginTop;
	    offsets.marginLeft = marginLeft;
	  }

	  if (isIE10 && !fixedPosition ? parent.contains(scrollParent) : parent === scrollParent && scrollParent.nodeName !== 'BODY') {
	    offsets = includeScroll(offsets, parent);
	  }

	  return offsets;
	}

	function getViewportOffsetRectRelativeToArtbitraryNode(element) {
	  var excludeScroll = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

	  var html = element.ownerDocument.documentElement;
	  var relativeOffset = getOffsetRectRelativeToArbitraryNode(element, html);
	  var width = Math.max(html.clientWidth, window.innerWidth || 0);
	  var height = Math.max(html.clientHeight, window.innerHeight || 0);

	  var scrollTop = !excludeScroll ? getScroll(html) : 0;
	  var scrollLeft = !excludeScroll ? getScroll(html, 'left') : 0;

	  var offset = {
	    top: scrollTop - relativeOffset.top + relativeOffset.marginTop,
	    left: scrollLeft - relativeOffset.left + relativeOffset.marginLeft,
	    width: width,
	    height: height
	  };

	  return getClientRect(offset);
	}

	/**
	 * Check if the given element is fixed or is inside a fixed parent
	 * @method
	 * @memberof Popper.Utils
	 * @argument {Element} element
	 * @argument {Element} customContainer
	 * @returns {Boolean} answer to "isFixed?"
	 */
	function isFixed(element) {
	  var nodeName = element.nodeName;
	  if (nodeName === 'BODY' || nodeName === 'HTML') {
	    return false;
	  }
	  if (getStyleComputedProperty(element, 'position') === 'fixed') {
	    return true;
	  }
	  var parentNode = getParentNode(element);
	  if (!parentNode) {
	    return false;
	  }
	  return isFixed(parentNode);
	}

	/**
	 * Finds the first parent of an element that has a transformed property defined
	 * @method
	 * @memberof Popper.Utils
	 * @argument {Element} element
	 * @returns {Element} first transformed parent or documentElement
	 */

	function getFixedPositionOffsetParent(element) {
	  // This check is needed to avoid errors in case one of the elements isn't defined for any reason
	  if (!element || !element.parentElement || isIE()) {
	    return document.documentElement;
	  }
	  var el = element.parentElement;
	  while (el && getStyleComputedProperty(el, 'transform') === 'none') {
	    el = el.parentElement;
	  }
	  return el || document.documentElement;
	}

	/**
	 * Computed the boundaries limits and return them
	 * @method
	 * @memberof Popper.Utils
	 * @param {HTMLElement} popper
	 * @param {HTMLElement} reference
	 * @param {number} padding
	 * @param {HTMLElement} boundariesElement - Element used to define the boundaries
	 * @param {Boolean} fixedPosition - Is in fixed position mode
	 * @returns {Object} Coordinates of the boundaries
	 */
	function getBoundaries(popper, reference, padding, boundariesElement) {
	  var fixedPosition = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;

	  // NOTE: 1 DOM access here

	  var boundaries = { top: 0, left: 0 };
	  var offsetParent = fixedPosition ? getFixedPositionOffsetParent(popper) : findCommonOffsetParent(popper, getReferenceNode(reference));

	  // Handle viewport case
	  if (boundariesElement === 'viewport') {
	    boundaries = getViewportOffsetRectRelativeToArtbitraryNode(offsetParent, fixedPosition);
	  } else {
	    // Handle other cases based on DOM element used as boundaries
	    var boundariesNode = void 0;
	    if (boundariesElement === 'scrollParent') {
	      boundariesNode = getScrollParent(getParentNode(reference));
	      if (boundariesNode.nodeName === 'BODY') {
	        boundariesNode = popper.ownerDocument.documentElement;
	      }
	    } else if (boundariesElement === 'window') {
	      boundariesNode = popper.ownerDocument.documentElement;
	    } else {
	      boundariesNode = boundariesElement;
	    }

	    var offsets = getOffsetRectRelativeToArbitraryNode(boundariesNode, offsetParent, fixedPosition);

	    // In case of HTML, we need a different computation
	    if (boundariesNode.nodeName === 'HTML' && !isFixed(offsetParent)) {
	      var _getWindowSizes = getWindowSizes(popper.ownerDocument),
	          height = _getWindowSizes.height,
	          width = _getWindowSizes.width;

	      boundaries.top += offsets.top - offsets.marginTop;
	      boundaries.bottom = height + offsets.top;
	      boundaries.left += offsets.left - offsets.marginLeft;
	      boundaries.right = width + offsets.left;
	    } else {
	      // for all the other DOM elements, this one is good
	      boundaries = offsets;
	    }
	  }

	  // Add paddings
	  padding = padding || 0;
	  var isPaddingNumber = typeof padding === 'number';
	  boundaries.left += isPaddingNumber ? padding : padding.left || 0;
	  boundaries.top += isPaddingNumber ? padding : padding.top || 0;
	  boundaries.right -= isPaddingNumber ? padding : padding.right || 0;
	  boundaries.bottom -= isPaddingNumber ? padding : padding.bottom || 0;

	  return boundaries;
	}

	function getArea(_ref) {
	  var width = _ref.width,
	      height = _ref.height;

	  return width * height;
	}

	/**
	 * Utility used to transform the `auto` placement to the placement with more
	 * available space.
	 * @method
	 * @memberof Popper.Utils
	 * @argument {Object} data - The data object generated by update method
	 * @argument {Object} options - Modifiers configuration and options
	 * @returns {Object} The data object, properly modified
	 */
	function computeAutoPlacement(placement, refRect, popper, reference, boundariesElement) {
	  var padding = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;

	  if (placement.indexOf('auto') === -1) {
	    return placement;
	  }

	  var boundaries = getBoundaries(popper, reference, padding, boundariesElement);

	  var rects = {
	    top: {
	      width: boundaries.width,
	      height: refRect.top - boundaries.top
	    },
	    right: {
	      width: boundaries.right - refRect.right,
	      height: boundaries.height
	    },
	    bottom: {
	      width: boundaries.width,
	      height: boundaries.bottom - refRect.bottom
	    },
	    left: {
	      width: refRect.left - boundaries.left,
	      height: boundaries.height
	    }
	  };

	  var sortedAreas = Object.keys(rects).map(function (key) {
	    return _extends({
	      key: key
	    }, rects[key], {
	      area: getArea(rects[key])
	    });
	  }).sort(function (a, b) {
	    return b.area - a.area;
	  });

	  var filteredAreas = sortedAreas.filter(function (_ref2) {
	    var width = _ref2.width,
	        height = _ref2.height;
	    return width >= popper.clientWidth && height >= popper.clientHeight;
	  });

	  var computedPlacement = filteredAreas.length > 0 ? filteredAreas[0].key : sortedAreas[0].key;

	  var variation = placement.split('-')[1];

	  return computedPlacement + (variation ? '-' + variation : '');
	}

	/**
	 * Get offsets to the reference element
	 * @method
	 * @memberof Popper.Utils
	 * @param {Object} state
	 * @param {Element} popper - the popper element
	 * @param {Element} reference - the reference element (the popper will be relative to this)
	 * @param {Element} fixedPosition - is in fixed position mode
	 * @returns {Object} An object containing the offsets which will be applied to the popper
	 */
	function getReferenceOffsets(state, popper, reference) {
	  var fixedPosition = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

	  var commonOffsetParent = fixedPosition ? getFixedPositionOffsetParent(popper) : findCommonOffsetParent(popper, getReferenceNode(reference));
	  return getOffsetRectRelativeToArbitraryNode(reference, commonOffsetParent, fixedPosition);
	}

	/**
	 * Get the outer sizes of the given element (offset size + margins)
	 * @method
	 * @memberof Popper.Utils
	 * @argument {Element} element
	 * @returns {Object} object containing width and height properties
	 */
	function getOuterSizes(element) {
	  var window = element.ownerDocument.defaultView;
	  var styles = window.getComputedStyle(element);
	  var x = parseFloat(styles.marginTop || 0) + parseFloat(styles.marginBottom || 0);
	  var y = parseFloat(styles.marginLeft || 0) + parseFloat(styles.marginRight || 0);
	  var result = {
	    width: element.offsetWidth + y,
	    height: element.offsetHeight + x
	  };
	  return result;
	}

	/**
	 * Get the opposite placement of the given one
	 * @method
	 * @memberof Popper.Utils
	 * @argument {String} placement
	 * @returns {String} flipped placement
	 */
	function getOppositePlacement(placement) {
	  var hash = { left: 'right', right: 'left', bottom: 'top', top: 'bottom' };
	  return placement.replace(/left|right|bottom|top/g, function (matched) {
	    return hash[matched];
	  });
	}

	/**
	 * Get offsets to the popper
	 * @method
	 * @memberof Popper.Utils
	 * @param {Object} position - CSS position the Popper will get applied
	 * @param {HTMLElement} popper - the popper element
	 * @param {Object} referenceOffsets - the reference offsets (the popper will be relative to this)
	 * @param {String} placement - one of the valid placement options
	 * @returns {Object} popperOffsets - An object containing the offsets which will be applied to the popper
	 */
	function getPopperOffsets(popper, referenceOffsets, placement) {
	  placement = placement.split('-')[0];

	  // Get popper node sizes
	  var popperRect = getOuterSizes(popper);

	  // Add position, width and height to our offsets object
	  var popperOffsets = {
	    width: popperRect.width,
	    height: popperRect.height
	  };

	  // depending by the popper placement we have to compute its offsets slightly differently
	  var isHoriz = ['right', 'left'].indexOf(placement) !== -1;
	  var mainSide = isHoriz ? 'top' : 'left';
	  var secondarySide = isHoriz ? 'left' : 'top';
	  var measurement = isHoriz ? 'height' : 'width';
	  var secondaryMeasurement = !isHoriz ? 'height' : 'width';

	  popperOffsets[mainSide] = referenceOffsets[mainSide] + referenceOffsets[measurement] / 2 - popperRect[measurement] / 2;
	  if (placement === secondarySide) {
	    popperOffsets[secondarySide] = referenceOffsets[secondarySide] - popperRect[secondaryMeasurement];
	  } else {
	    popperOffsets[secondarySide] = referenceOffsets[getOppositePlacement(secondarySide)];
	  }

	  return popperOffsets;
	}

	/**
	 * Mimics the `find` method of Array
	 * @method
	 * @memberof Popper.Utils
	 * @argument {Array} arr
	 * @argument prop
	 * @argument value
	 * @returns index or -1
	 */
	function find(arr, check) {
	  // use native find if supported
	  if (Array.prototype.find) {
	    return arr.find(check);
	  }

	  // use `filter` to obtain the same behavior of `find`
	  return arr.filter(check)[0];
	}

	/**
	 * Return the index of the matching object
	 * @method
	 * @memberof Popper.Utils
	 * @argument {Array} arr
	 * @argument prop
	 * @argument value
	 * @returns index or -1
	 */
	function findIndex(arr, prop, value) {
	  // use native findIndex if supported
	  if (Array.prototype.findIndex) {
	    return arr.findIndex(function (cur) {
	      return cur[prop] === value;
	    });
	  }

	  // use `find` + `indexOf` if `findIndex` isn't supported
	  var match = find(arr, function (obj) {
	    return obj[prop] === value;
	  });
	  return arr.indexOf(match);
	}

	/**
	 * Loop trough the list of modifiers and run them in order,
	 * each of them will then edit the data object.
	 * @method
	 * @memberof Popper.Utils
	 * @param {dataObject} data
	 * @param {Array} modifiers
	 * @param {String} ends - Optional modifier name used as stopper
	 * @returns {dataObject}
	 */
	function runModifiers(modifiers, data, ends) {
	  var modifiersToRun = ends === undefined ? modifiers : modifiers.slice(0, findIndex(modifiers, 'name', ends));

	  modifiersToRun.forEach(function (modifier) {
	    if (modifier['function']) {
	      // eslint-disable-line dot-notation
	      console.warn('`modifier.function` is deprecated, use `modifier.fn`!');
	    }
	    var fn = modifier['function'] || modifier.fn; // eslint-disable-line dot-notation
	    if (modifier.enabled && isFunction(fn)) {
	      // Add properties to offsets to make them a complete clientRect object
	      // we do this before each modifier to make sure the previous one doesn't
	      // mess with these values
	      data.offsets.popper = getClientRect(data.offsets.popper);
	      data.offsets.reference = getClientRect(data.offsets.reference);

	      data = fn(data, modifier);
	    }
	  });

	  return data;
	}

	/**
	 * Updates the position of the popper, computing the new offsets and applying
	 * the new style.<br />
	 * Prefer `scheduleUpdate` over `update` because of performance reasons.
	 * @method
	 * @memberof Popper
	 */
	function update() {
	  // if popper is destroyed, don't perform any further update
	  if (this.state.isDestroyed) {
	    return;
	  }

	  var data = {
	    instance: this,
	    styles: {},
	    arrowStyles: {},
	    attributes: {},
	    flipped: false,
	    offsets: {}
	  };

	  // compute reference element offsets
	  data.offsets.reference = getReferenceOffsets(this.state, this.popper, this.reference, this.options.positionFixed);

	  // compute auto placement, store placement inside the data object,
	  // modifiers will be able to edit `placement` if needed
	  // and refer to originalPlacement to know the original value
	  data.placement = computeAutoPlacement(this.options.placement, data.offsets.reference, this.popper, this.reference, this.options.modifiers.flip.boundariesElement, this.options.modifiers.flip.padding);

	  // store the computed placement inside `originalPlacement`
	  data.originalPlacement = data.placement;

	  data.positionFixed = this.options.positionFixed;

	  // compute the popper offsets
	  data.offsets.popper = getPopperOffsets(this.popper, data.offsets.reference, data.placement);

	  data.offsets.popper.position = this.options.positionFixed ? 'fixed' : 'absolute';

	  // run the modifiers
	  data = runModifiers(this.modifiers, data);

	  // the first `update` will call `onCreate` callback
	  // the other ones will call `onUpdate` callback
	  if (!this.state.isCreated) {
	    this.state.isCreated = true;
	    this.options.onCreate(data);
	  } else {
	    this.options.onUpdate(data);
	  }
	}

	/**
	 * Helper used to know if the given modifier is enabled.
	 * @method
	 * @memberof Popper.Utils
	 * @returns {Boolean}
	 */
	function isModifierEnabled(modifiers, modifierName) {
	  return modifiers.some(function (_ref) {
	    var name = _ref.name,
	        enabled = _ref.enabled;
	    return enabled && name === modifierName;
	  });
	}

	/**
	 * Get the prefixed supported property name
	 * @method
	 * @memberof Popper.Utils
	 * @argument {String} property (camelCase)
	 * @returns {String} prefixed property (camelCase or PascalCase, depending on the vendor prefix)
	 */
	function getSupportedPropertyName(property) {
	  var prefixes = [false, 'ms', 'Webkit', 'Moz', 'O'];
	  var upperProp = property.charAt(0).toUpperCase() + property.slice(1);

	  for (var i = 0; i < prefixes.length; i++) {
	    var prefix = prefixes[i];
	    var toCheck = prefix ? '' + prefix + upperProp : property;
	    if (typeof document.body.style[toCheck] !== 'undefined') {
	      return toCheck;
	    }
	  }
	  return null;
	}

	/**
	 * Destroys the popper.
	 * @method
	 * @memberof Popper
	 */
	function destroy() {
	  this.state.isDestroyed = true;

	  // touch DOM only if `applyStyle` modifier is enabled
	  if (isModifierEnabled(this.modifiers, 'applyStyle')) {
	    this.popper.removeAttribute('x-placement');
	    this.popper.style.position = '';
	    this.popper.style.top = '';
	    this.popper.style.left = '';
	    this.popper.style.right = '';
	    this.popper.style.bottom = '';
	    this.popper.style.willChange = '';
	    this.popper.style[getSupportedPropertyName('transform')] = '';
	  }

	  this.disableEventListeners();

	  // remove the popper if user explicitly asked for the deletion on destroy
	  // do not use `remove` because IE11 doesn't support it
	  if (this.options.removeOnDestroy) {
	    this.popper.parentNode.removeChild(this.popper);
	  }
	  return this;
	}

	/**
	 * Get the window associated with the element
	 * @argument {Element} element
	 * @returns {Window}
	 */
	function getWindow(element) {
	  var ownerDocument = element.ownerDocument;
	  return ownerDocument ? ownerDocument.defaultView : window;
	}

	function attachToScrollParents(scrollParent, event, callback, scrollParents) {
	  var isBody = scrollParent.nodeName === 'BODY';
	  var target = isBody ? scrollParent.ownerDocument.defaultView : scrollParent;
	  target.addEventListener(event, callback, { passive: true });

	  if (!isBody) {
	    attachToScrollParents(getScrollParent(target.parentNode), event, callback, scrollParents);
	  }
	  scrollParents.push(target);
	}

	/**
	 * Setup needed event listeners used to update the popper position
	 * @method
	 * @memberof Popper.Utils
	 * @private
	 */
	function setupEventListeners(reference, options, state, updateBound) {
	  // Resize event listener on window
	  state.updateBound = updateBound;
	  getWindow(reference).addEventListener('resize', state.updateBound, { passive: true });

	  // Scroll event listener on scroll parents
	  var scrollElement = getScrollParent(reference);
	  attachToScrollParents(scrollElement, 'scroll', state.updateBound, state.scrollParents);
	  state.scrollElement = scrollElement;
	  state.eventsEnabled = true;

	  return state;
	}

	/**
	 * It will add resize/scroll events and start recalculating
	 * position of the popper element when they are triggered.
	 * @method
	 * @memberof Popper
	 */
	function enableEventListeners() {
	  if (!this.state.eventsEnabled) {
	    this.state = setupEventListeners(this.reference, this.options, this.state, this.scheduleUpdate);
	  }
	}

	/**
	 * Remove event listeners used to update the popper position
	 * @method
	 * @memberof Popper.Utils
	 * @private
	 */
	function removeEventListeners(reference, state) {
	  // Remove resize event listener on window
	  getWindow(reference).removeEventListener('resize', state.updateBound);

	  // Remove scroll event listener on scroll parents
	  state.scrollParents.forEach(function (target) {
	    target.removeEventListener('scroll', state.updateBound);
	  });

	  // Reset state
	  state.updateBound = null;
	  state.scrollParents = [];
	  state.scrollElement = null;
	  state.eventsEnabled = false;
	  return state;
	}

	/**
	 * It will remove resize/scroll events and won't recalculate popper position
	 * when they are triggered. It also won't trigger `onUpdate` callback anymore,
	 * unless you call `update` method manually.
	 * @method
	 * @memberof Popper
	 */
	function disableEventListeners() {
	  if (this.state.eventsEnabled) {
	    cancelAnimationFrame(this.scheduleUpdate);
	    this.state = removeEventListeners(this.reference, this.state);
	  }
	}

	/**
	 * Tells if a given input is a number
	 * @method
	 * @memberof Popper.Utils
	 * @param {*} input to check
	 * @return {Boolean}
	 */
	function isNumeric(n) {
	  return n !== '' && !isNaN(parseFloat(n)) && isFinite(n);
	}

	/**
	 * Set the style to the given popper
	 * @method
	 * @memberof Popper.Utils
	 * @argument {Element} element - Element to apply the style to
	 * @argument {Object} styles
	 * Object with a list of properties and values which will be applied to the element
	 */
	function setStyles(element, styles) {
	  Object.keys(styles).forEach(function (prop) {
	    var unit = '';
	    // add unit if the value is numeric and is one of the following
	    if (['width', 'height', 'top', 'right', 'bottom', 'left'].indexOf(prop) !== -1 && isNumeric(styles[prop])) {
	      unit = 'px';
	    }
	    element.style[prop] = styles[prop] + unit;
	  });
	}

	/**
	 * Set the attributes to the given popper
	 * @method
	 * @memberof Popper.Utils
	 * @argument {Element} element - Element to apply the attributes to
	 * @argument {Object} styles
	 * Object with a list of properties and values which will be applied to the element
	 */
	function setAttributes(element, attributes) {
	  Object.keys(attributes).forEach(function (prop) {
	    var value = attributes[prop];
	    if (value !== false) {
	      element.setAttribute(prop, attributes[prop]);
	    } else {
	      element.removeAttribute(prop);
	    }
	  });
	}

	/**
	 * @function
	 * @memberof Modifiers
	 * @argument {Object} data - The data object generated by `update` method
	 * @argument {Object} data.styles - List of style properties - values to apply to popper element
	 * @argument {Object} data.attributes - List of attribute properties - values to apply to popper element
	 * @argument {Object} options - Modifiers configuration and options
	 * @returns {Object} The same data object
	 */
	function applyStyle(data) {
	  // any property present in `data.styles` will be applied to the popper,
	  // in this way we can make the 3rd party modifiers add custom styles to it
	  // Be aware, modifiers could override the properties defined in the previous
	  // lines of this modifier!
	  setStyles(data.instance.popper, data.styles);

	  // any property present in `data.attributes` will be applied to the popper,
	  // they will be set as HTML attributes of the element
	  setAttributes(data.instance.popper, data.attributes);

	  // if arrowElement is defined and arrowStyles has some properties
	  if (data.arrowElement && Object.keys(data.arrowStyles).length) {
	    setStyles(data.arrowElement, data.arrowStyles);
	  }

	  return data;
	}

	/**
	 * Set the x-placement attribute before everything else because it could be used
	 * to add margins to the popper margins needs to be calculated to get the
	 * correct popper offsets.
	 * @method
	 * @memberof Popper.modifiers
	 * @param {HTMLElement} reference - The reference element used to position the popper
	 * @param {HTMLElement} popper - The HTML element used as popper
	 * @param {Object} options - Popper.js options
	 */
	function applyStyleOnLoad(reference, popper, options, modifierOptions, state) {
	  // compute reference element offsets
	  var referenceOffsets = getReferenceOffsets(state, popper, reference, options.positionFixed);

	  // compute auto placement, store placement inside the data object,
	  // modifiers will be able to edit `placement` if needed
	  // and refer to originalPlacement to know the original value
	  var placement = computeAutoPlacement(options.placement, referenceOffsets, popper, reference, options.modifiers.flip.boundariesElement, options.modifiers.flip.padding);

	  popper.setAttribute('x-placement', placement);

	  // Apply `position` to popper before anything else because
	  // without the position applied we can't guarantee correct computations
	  setStyles(popper, { position: options.positionFixed ? 'fixed' : 'absolute' });

	  return options;
	}

	/**
	 * @function
	 * @memberof Popper.Utils
	 * @argument {Object} data - The data object generated by `update` method
	 * @argument {Boolean} shouldRound - If the offsets should be rounded at all
	 * @returns {Object} The popper's position offsets rounded
	 *
	 * The tale of pixel-perfect positioning. It's still not 100% perfect, but as
	 * good as it can be within reason.
	 * Discussion here: https://github.com/FezVrasta/popper.js/pull/715
	 *
	 * Low DPI screens cause a popper to be blurry if not using full pixels (Safari
	 * as well on High DPI screens).
	 *
	 * Firefox prefers no rounding for positioning and does not have blurriness on
	 * high DPI screens.
	 *
	 * Only horizontal placement and left/right values need to be considered.
	 */
	function getRoundedOffsets(data, shouldRound) {
	  var _data$offsets = data.offsets,
	      popper = _data$offsets.popper,
	      reference = _data$offsets.reference;
	  var round = Math.round,
	      floor = Math.floor;

	  var noRound = function noRound(v) {
	    return v;
	  };

	  var referenceWidth = round(reference.width);
	  var popperWidth = round(popper.width);

	  var isVertical = ['left', 'right'].indexOf(data.placement) !== -1;
	  var isVariation = data.placement.indexOf('-') !== -1;
	  var sameWidthParity = referenceWidth % 2 === popperWidth % 2;
	  var bothOddWidth = referenceWidth % 2 === 1 && popperWidth % 2 === 1;

	  var horizontalToInteger = !shouldRound ? noRound : isVertical || isVariation || sameWidthParity ? round : floor;
	  var verticalToInteger = !shouldRound ? noRound : round;

	  return {
	    left: horizontalToInteger(bothOddWidth && !isVariation && shouldRound ? popper.left - 1 : popper.left),
	    top: verticalToInteger(popper.top),
	    bottom: verticalToInteger(popper.bottom),
	    right: horizontalToInteger(popper.right)
	  };
	}

	var isFirefox = isBrowser && /Firefox/i.test(navigator.userAgent);

	/**
	 * @function
	 * @memberof Modifiers
	 * @argument {Object} data - The data object generated by `update` method
	 * @argument {Object} options - Modifiers configuration and options
	 * @returns {Object} The data object, properly modified
	 */
	function computeStyle(data, options) {
	  var x = options.x,
	      y = options.y;
	  var popper = data.offsets.popper;

	  // Remove this legacy support in Popper.js v2

	  var legacyGpuAccelerationOption = find(data.instance.modifiers, function (modifier) {
	    return modifier.name === 'applyStyle';
	  }).gpuAcceleration;
	  if (legacyGpuAccelerationOption !== undefined) {
	    console.warn('WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!');
	  }
	  var gpuAcceleration = legacyGpuAccelerationOption !== undefined ? legacyGpuAccelerationOption : options.gpuAcceleration;

	  var offsetParent = getOffsetParent(data.instance.popper);
	  var offsetParentRect = getBoundingClientRect(offsetParent);

	  // Styles
	  var styles = {
	    position: popper.position
	  };

	  var offsets = getRoundedOffsets(data, window.devicePixelRatio < 2 || !isFirefox);

	  var sideA = x === 'bottom' ? 'top' : 'bottom';
	  var sideB = y === 'right' ? 'left' : 'right';

	  // if gpuAcceleration is set to `true` and transform is supported,
	  //  we use `translate3d` to apply the position to the popper we
	  // automatically use the supported prefixed version if needed
	  var prefixedProperty = getSupportedPropertyName('transform');

	  // now, let's make a step back and look at this code closely (wtf?)
	  // If the content of the popper grows once it's been positioned, it
	  // may happen that the popper gets misplaced because of the new content
	  // overflowing its reference element
	  // To avoid this problem, we provide two options (x and y), which allow
	  // the consumer to define the offset origin.
	  // If we position a popper on top of a reference element, we can set
	  // `x` to `top` to make the popper grow towards its top instead of
	  // its bottom.
	  var left = void 0,
	      top = void 0;
	  if (sideA === 'bottom') {
	    // when offsetParent is <html> the positioning is relative to the bottom of the screen (excluding the scrollbar)
	    // and not the bottom of the html element
	    if (offsetParent.nodeName === 'HTML') {
	      top = -offsetParent.clientHeight + offsets.bottom;
	    } else {
	      top = -offsetParentRect.height + offsets.bottom;
	    }
	  } else {
	    top = offsets.top;
	  }
	  if (sideB === 'right') {
	    if (offsetParent.nodeName === 'HTML') {
	      left = -offsetParent.clientWidth + offsets.right;
	    } else {
	      left = -offsetParentRect.width + offsets.right;
	    }
	  } else {
	    left = offsets.left;
	  }
	  if (gpuAcceleration && prefixedProperty) {
	    styles[prefixedProperty] = 'translate3d(' + left + 'px, ' + top + 'px, 0)';
	    styles[sideA] = 0;
	    styles[sideB] = 0;
	    styles.willChange = 'transform';
	  } else {
	    // othwerise, we use the standard `top`, `left`, `bottom` and `right` properties
	    var invertTop = sideA === 'bottom' ? -1 : 1;
	    var invertLeft = sideB === 'right' ? -1 : 1;
	    styles[sideA] = top * invertTop;
	    styles[sideB] = left * invertLeft;
	    styles.willChange = sideA + ', ' + sideB;
	  }

	  // Attributes
	  var attributes = {
	    'x-placement': data.placement
	  };

	  // Update `data` attributes, styles and arrowStyles
	  data.attributes = _extends({}, attributes, data.attributes);
	  data.styles = _extends({}, styles, data.styles);
	  data.arrowStyles = _extends({}, data.offsets.arrow, data.arrowStyles);

	  return data;
	}

	/**
	 * Helper used to know if the given modifier depends from another one.<br />
	 * It checks if the needed modifier is listed and enabled.
	 * @method
	 * @memberof Popper.Utils
	 * @param {Array} modifiers - list of modifiers
	 * @param {String} requestingName - name of requesting modifier
	 * @param {String} requestedName - name of requested modifier
	 * @returns {Boolean}
	 */
	function isModifierRequired(modifiers, requestingName, requestedName) {
	  var requesting = find(modifiers, function (_ref) {
	    var name = _ref.name;
	    return name === requestingName;
	  });

	  var isRequired = !!requesting && modifiers.some(function (modifier) {
	    return modifier.name === requestedName && modifier.enabled && modifier.order < requesting.order;
	  });

	  if (!isRequired) {
	    var _requesting = '`' + requestingName + '`';
	    var requested = '`' + requestedName + '`';
	    console.warn(requested + ' modifier is required by ' + _requesting + ' modifier in order to work, be sure to include it before ' + _requesting + '!');
	  }
	  return isRequired;
	}

	/**
	 * @function
	 * @memberof Modifiers
	 * @argument {Object} data - The data object generated by update method
	 * @argument {Object} options - Modifiers configuration and options
	 * @returns {Object} The data object, properly modified
	 */
	function arrow(data, options) {
	  var _data$offsets$arrow;

	  // arrow depends on keepTogether in order to work
	  if (!isModifierRequired(data.instance.modifiers, 'arrow', 'keepTogether')) {
	    return data;
	  }

	  var arrowElement = options.element;

	  // if arrowElement is a string, suppose it's a CSS selector
	  if (typeof arrowElement === 'string') {
	    arrowElement = data.instance.popper.querySelector(arrowElement);

	    // if arrowElement is not found, don't run the modifier
	    if (!arrowElement) {
	      return data;
	    }
	  } else {
	    // if the arrowElement isn't a query selector we must check that the
	    // provided DOM node is child of its popper node
	    if (!data.instance.popper.contains(arrowElement)) {
	      console.warn('WARNING: `arrow.element` must be child of its popper element!');
	      return data;
	    }
	  }

	  var placement = data.placement.split('-')[0];
	  var _data$offsets = data.offsets,
	      popper = _data$offsets.popper,
	      reference = _data$offsets.reference;

	  var isVertical = ['left', 'right'].indexOf(placement) !== -1;

	  var len = isVertical ? 'height' : 'width';
	  var sideCapitalized = isVertical ? 'Top' : 'Left';
	  var side = sideCapitalized.toLowerCase();
	  var altSide = isVertical ? 'left' : 'top';
	  var opSide = isVertical ? 'bottom' : 'right';
	  var arrowElementSize = getOuterSizes(arrowElement)[len];

	  //
	  // extends keepTogether behavior making sure the popper and its
	  // reference have enough pixels in conjunction
	  //

	  // top/left side
	  if (reference[opSide] - arrowElementSize < popper[side]) {
	    data.offsets.popper[side] -= popper[side] - (reference[opSide] - arrowElementSize);
	  }
	  // bottom/right side
	  if (reference[side] + arrowElementSize > popper[opSide]) {
	    data.offsets.popper[side] += reference[side] + arrowElementSize - popper[opSide];
	  }
	  data.offsets.popper = getClientRect(data.offsets.popper);

	  // compute center of the popper
	  var center = reference[side] + reference[len] / 2 - arrowElementSize / 2;

	  // Compute the sideValue using the updated popper offsets
	  // take popper margin in account because we don't have this info available
	  var css = getStyleComputedProperty(data.instance.popper);
	  var popperMarginSide = parseFloat(css['margin' + sideCapitalized]);
	  var popperBorderSide = parseFloat(css['border' + sideCapitalized + 'Width']);
	  var sideValue = center - data.offsets.popper[side] - popperMarginSide - popperBorderSide;

	  // prevent arrowElement from being placed not contiguously to its popper
	  sideValue = Math.max(Math.min(popper[len] - arrowElementSize, sideValue), 0);

	  data.arrowElement = arrowElement;
	  data.offsets.arrow = (_data$offsets$arrow = {}, defineProperty(_data$offsets$arrow, side, Math.round(sideValue)), defineProperty(_data$offsets$arrow, altSide, ''), _data$offsets$arrow);

	  return data;
	}

	/**
	 * Get the opposite placement variation of the given one
	 * @method
	 * @memberof Popper.Utils
	 * @argument {String} placement variation
	 * @returns {String} flipped placement variation
	 */
	function getOppositeVariation(variation) {
	  if (variation === 'end') {
	    return 'start';
	  } else if (variation === 'start') {
	    return 'end';
	  }
	  return variation;
	}

	/**
	 * List of accepted placements to use as values of the `placement` option.<br />
	 * Valid placements are:
	 * - `auto`
	 * - `top`
	 * - `right`
	 * - `bottom`
	 * - `left`
	 *
	 * Each placement can have a variation from this list:
	 * - `-start`
	 * - `-end`
	 *
	 * Variations are interpreted easily if you think of them as the left to right
	 * written languages. Horizontally (`top` and `bottom`), `start` is left and `end`
	 * is right.<br />
	 * Vertically (`left` and `right`), `start` is top and `end` is bottom.
	 *
	 * Some valid examples are:
	 * - `top-end` (on top of reference, right aligned)
	 * - `right-start` (on right of reference, top aligned)
	 * - `bottom` (on bottom, centered)
	 * - `auto-end` (on the side with more space available, alignment depends by placement)
	 *
	 * @static
	 * @type {Array}
	 * @enum {String}
	 * @readonly
	 * @method placements
	 * @memberof Popper
	 */
	var placements = ['auto-start', 'auto', 'auto-end', 'top-start', 'top', 'top-end', 'right-start', 'right', 'right-end', 'bottom-end', 'bottom', 'bottom-start', 'left-end', 'left', 'left-start'];

	// Get rid of `auto` `auto-start` and `auto-end`
	var validPlacements = placements.slice(3);

	/**
	 * Given an initial placement, returns all the subsequent placements
	 * clockwise (or counter-clockwise).
	 *
	 * @method
	 * @memberof Popper.Utils
	 * @argument {String} placement - A valid placement (it accepts variations)
	 * @argument {Boolean} counter - Set to true to walk the placements counterclockwise
	 * @returns {Array} placements including their variations
	 */
	function clockwise(placement) {
	  var counter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

	  var index = validPlacements.indexOf(placement);
	  var arr = validPlacements.slice(index + 1).concat(validPlacements.slice(0, index));
	  return counter ? arr.reverse() : arr;
	}

	var BEHAVIORS = {
	  FLIP: 'flip',
	  CLOCKWISE: 'clockwise',
	  COUNTERCLOCKWISE: 'counterclockwise'
	};

	/**
	 * @function
	 * @memberof Modifiers
	 * @argument {Object} data - The data object generated by update method
	 * @argument {Object} options - Modifiers configuration and options
	 * @returns {Object} The data object, properly modified
	 */
	function flip(data, options) {
	  // if `inner` modifier is enabled, we can't use the `flip` modifier
	  if (isModifierEnabled(data.instance.modifiers, 'inner')) {
	    return data;
	  }

	  if (data.flipped && data.placement === data.originalPlacement) {
	    // seems like flip is trying to loop, probably there's not enough space on any of the flippable sides
	    return data;
	  }

	  var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, options.boundariesElement, data.positionFixed);

	  var placement = data.placement.split('-')[0];
	  var placementOpposite = getOppositePlacement(placement);
	  var variation = data.placement.split('-')[1] || '';

	  var flipOrder = [];

	  switch (options.behavior) {
	    case BEHAVIORS.FLIP:
	      flipOrder = [placement, placementOpposite];
	      break;
	    case BEHAVIORS.CLOCKWISE:
	      flipOrder = clockwise(placement);
	      break;
	    case BEHAVIORS.COUNTERCLOCKWISE:
	      flipOrder = clockwise(placement, true);
	      break;
	    default:
	      flipOrder = options.behavior;
	  }

	  flipOrder.forEach(function (step, index) {
	    if (placement !== step || flipOrder.length === index + 1) {
	      return data;
	    }

	    placement = data.placement.split('-')[0];
	    placementOpposite = getOppositePlacement(placement);

	    var popperOffsets = data.offsets.popper;
	    var refOffsets = data.offsets.reference;

	    // using floor because the reference offsets may contain decimals we are not going to consider here
	    var floor = Math.floor;
	    var overlapsRef = placement === 'left' && floor(popperOffsets.right) > floor(refOffsets.left) || placement === 'right' && floor(popperOffsets.left) < floor(refOffsets.right) || placement === 'top' && floor(popperOffsets.bottom) > floor(refOffsets.top) || placement === 'bottom' && floor(popperOffsets.top) < floor(refOffsets.bottom);

	    var overflowsLeft = floor(popperOffsets.left) < floor(boundaries.left);
	    var overflowsRight = floor(popperOffsets.right) > floor(boundaries.right);
	    var overflowsTop = floor(popperOffsets.top) < floor(boundaries.top);
	    var overflowsBottom = floor(popperOffsets.bottom) > floor(boundaries.bottom);

	    var overflowsBoundaries = placement === 'left' && overflowsLeft || placement === 'right' && overflowsRight || placement === 'top' && overflowsTop || placement === 'bottom' && overflowsBottom;

	    // flip the variation if required
	    var isVertical = ['top', 'bottom'].indexOf(placement) !== -1;

	    // flips variation if reference element overflows boundaries
	    var flippedVariationByRef = !!options.flipVariations && (isVertical && variation === 'start' && overflowsLeft || isVertical && variation === 'end' && overflowsRight || !isVertical && variation === 'start' && overflowsTop || !isVertical && variation === 'end' && overflowsBottom);

	    // flips variation if popper content overflows boundaries
	    var flippedVariationByContent = !!options.flipVariationsByContent && (isVertical && variation === 'start' && overflowsRight || isVertical && variation === 'end' && overflowsLeft || !isVertical && variation === 'start' && overflowsBottom || !isVertical && variation === 'end' && overflowsTop);

	    var flippedVariation = flippedVariationByRef || flippedVariationByContent;

	    if (overlapsRef || overflowsBoundaries || flippedVariation) {
	      // this boolean to detect any flip loop
	      data.flipped = true;

	      if (overlapsRef || overflowsBoundaries) {
	        placement = flipOrder[index + 1];
	      }

	      if (flippedVariation) {
	        variation = getOppositeVariation(variation);
	      }

	      data.placement = placement + (variation ? '-' + variation : '');

	      // this object contains `position`, we want to preserve it along with
	      // any additional property we may add in the future
	      data.offsets.popper = _extends({}, data.offsets.popper, getPopperOffsets(data.instance.popper, data.offsets.reference, data.placement));

	      data = runModifiers(data.instance.modifiers, data, 'flip');
	    }
	  });
	  return data;
	}

	/**
	 * @function
	 * @memberof Modifiers
	 * @argument {Object} data - The data object generated by update method
	 * @argument {Object} options - Modifiers configuration and options
	 * @returns {Object} The data object, properly modified
	 */
	function keepTogether(data) {
	  var _data$offsets = data.offsets,
	      popper = _data$offsets.popper,
	      reference = _data$offsets.reference;

	  var placement = data.placement.split('-')[0];
	  var floor = Math.floor;
	  var isVertical = ['top', 'bottom'].indexOf(placement) !== -1;
	  var side = isVertical ? 'right' : 'bottom';
	  var opSide = isVertical ? 'left' : 'top';
	  var measurement = isVertical ? 'width' : 'height';

	  if (popper[side] < floor(reference[opSide])) {
	    data.offsets.popper[opSide] = floor(reference[opSide]) - popper[measurement];
	  }
	  if (popper[opSide] > floor(reference[side])) {
	    data.offsets.popper[opSide] = floor(reference[side]);
	  }

	  return data;
	}

	/**
	 * Converts a string containing value + unit into a px value number
	 * @function
	 * @memberof {modifiers~offset}
	 * @private
	 * @argument {String} str - Value + unit string
	 * @argument {String} measurement - `height` or `width`
	 * @argument {Object} popperOffsets
	 * @argument {Object} referenceOffsets
	 * @returns {Number|String}
	 * Value in pixels, or original string if no values were extracted
	 */
	function toValue(str, measurement, popperOffsets, referenceOffsets) {
	  // separate value from unit
	  var split = str.match(/((?:\-|\+)?\d*\.?\d*)(.*)/);
	  var value = +split[1];
	  var unit = split[2];

	  // If it's not a number it's an operator, I guess
	  if (!value) {
	    return str;
	  }

	  if (unit.indexOf('%') === 0) {
	    var element = void 0;
	    switch (unit) {
	      case '%p':
	        element = popperOffsets;
	        break;
	      case '%':
	      case '%r':
	      default:
	        element = referenceOffsets;
	    }

	    var rect = getClientRect(element);
	    return rect[measurement] / 100 * value;
	  } else if (unit === 'vh' || unit === 'vw') {
	    // if is a vh or vw, we calculate the size based on the viewport
	    var size = void 0;
	    if (unit === 'vh') {
	      size = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);
	    } else {
	      size = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);
	    }
	    return size / 100 * value;
	  } else {
	    // if is an explicit pixel unit, we get rid of the unit and keep the value
	    // if is an implicit unit, it's px, and we return just the value
	    return value;
	  }
	}

	/**
	 * Parse an `offset` string to extrapolate `x` and `y` numeric offsets.
	 * @function
	 * @memberof {modifiers~offset}
	 * @private
	 * @argument {String} offset
	 * @argument {Object} popperOffsets
	 * @argument {Object} referenceOffsets
	 * @argument {String} basePlacement
	 * @returns {Array} a two cells array with x and y offsets in numbers
	 */
	function parseOffset(offset, popperOffsets, referenceOffsets, basePlacement) {
	  var offsets = [0, 0];

	  // Use height if placement is left or right and index is 0 otherwise use width
	  // in this way the first offset will use an axis and the second one
	  // will use the other one
	  var useHeight = ['right', 'left'].indexOf(basePlacement) !== -1;

	  // Split the offset string to obtain a list of values and operands
	  // The regex addresses values with the plus or minus sign in front (+10, -20, etc)
	  var fragments = offset.split(/(\+|\-)/).map(function (frag) {
	    return frag.trim();
	  });

	  // Detect if the offset string contains a pair of values or a single one
	  // they could be separated by comma or space
	  var divider = fragments.indexOf(find(fragments, function (frag) {
	    return frag.search(/,|\s/) !== -1;
	  }));

	  if (fragments[divider] && fragments[divider].indexOf(',') === -1) {
	    console.warn('Offsets separated by white space(s) are deprecated, use a comma (,) instead.');
	  }

	  // If divider is found, we divide the list of values and operands to divide
	  // them by ofset X and Y.
	  var splitRegex = /\s*,\s*|\s+/;
	  var ops = divider !== -1 ? [fragments.slice(0, divider).concat([fragments[divider].split(splitRegex)[0]]), [fragments[divider].split(splitRegex)[1]].concat(fragments.slice(divider + 1))] : [fragments];

	  // Convert the values with units to absolute pixels to allow our computations
	  ops = ops.map(function (op, index) {
	    // Most of the units rely on the orientation of the popper
	    var measurement = (index === 1 ? !useHeight : useHeight) ? 'height' : 'width';
	    var mergeWithPrevious = false;
	    return op
	    // This aggregates any `+` or `-` sign that aren't considered operators
	    // e.g.: 10 + +5 => [10, +, +5]
	    .reduce(function (a, b) {
	      if (a[a.length - 1] === '' && ['+', '-'].indexOf(b) !== -1) {
	        a[a.length - 1] = b;
	        mergeWithPrevious = true;
	        return a;
	      } else if (mergeWithPrevious) {
	        a[a.length - 1] += b;
	        mergeWithPrevious = false;
	        return a;
	      } else {
	        return a.concat(b);
	      }
	    }, [])
	    // Here we convert the string values into number values (in px)
	    .map(function (str) {
	      return toValue(str, measurement, popperOffsets, referenceOffsets);
	    });
	  });

	  // Loop trough the offsets arrays and execute the operations
	  ops.forEach(function (op, index) {
	    op.forEach(function (frag, index2) {
	      if (isNumeric(frag)) {
	        offsets[index] += frag * (op[index2 - 1] === '-' ? -1 : 1);
	      }
	    });
	  });
	  return offsets;
	}

	/**
	 * @function
	 * @memberof Modifiers
	 * @argument {Object} data - The data object generated by update method
	 * @argument {Object} options - Modifiers configuration and options
	 * @argument {Number|String} options.offset=0
	 * The offset value as described in the modifier description
	 * @returns {Object} The data object, properly modified
	 */
	function offset(data, _ref) {
	  var offset = _ref.offset;
	  var placement = data.placement,
	      _data$offsets = data.offsets,
	      popper = _data$offsets.popper,
	      reference = _data$offsets.reference;

	  var basePlacement = placement.split('-')[0];

	  var offsets = void 0;
	  if (isNumeric(+offset)) {
	    offsets = [+offset, 0];
	  } else {
	    offsets = parseOffset(offset, popper, reference, basePlacement);
	  }

	  if (basePlacement === 'left') {
	    popper.top += offsets[0];
	    popper.left -= offsets[1];
	  } else if (basePlacement === 'right') {
	    popper.top += offsets[0];
	    popper.left += offsets[1];
	  } else if (basePlacement === 'top') {
	    popper.left += offsets[0];
	    popper.top -= offsets[1];
	  } else if (basePlacement === 'bottom') {
	    popper.left += offsets[0];
	    popper.top += offsets[1];
	  }

	  data.popper = popper;
	  return data;
	}

	/**
	 * @function
	 * @memberof Modifiers
	 * @argument {Object} data - The data object generated by `update` method
	 * @argument {Object} options - Modifiers configuration and options
	 * @returns {Object} The data object, properly modified
	 */
	function preventOverflow(data, options) {
	  var boundariesElement = options.boundariesElement || getOffsetParent(data.instance.popper);

	  // If offsetParent is the reference element, we really want to
	  // go one step up and use the next offsetParent as reference to
	  // avoid to make this modifier completely useless and look like broken
	  if (data.instance.reference === boundariesElement) {
	    boundariesElement = getOffsetParent(boundariesElement);
	  }

	  // NOTE: DOM access here
	  // resets the popper's position so that the document size can be calculated excluding
	  // the size of the popper element itself
	  var transformProp = getSupportedPropertyName('transform');
	  var popperStyles = data.instance.popper.style; // assignment to help minification
	  var top = popperStyles.top,
	      left = popperStyles.left,
	      transform = popperStyles[transformProp];

	  popperStyles.top = '';
	  popperStyles.left = '';
	  popperStyles[transformProp] = '';

	  var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, boundariesElement, data.positionFixed);

	  // NOTE: DOM access here
	  // restores the original style properties after the offsets have been computed
	  popperStyles.top = top;
	  popperStyles.left = left;
	  popperStyles[transformProp] = transform;

	  options.boundaries = boundaries;

	  var order = options.priority;
	  var popper = data.offsets.popper;

	  var check = {
	    primary: function primary(placement) {
	      var value = popper[placement];
	      if (popper[placement] < boundaries[placement] && !options.escapeWithReference) {
	        value = Math.max(popper[placement], boundaries[placement]);
	      }
	      return defineProperty({}, placement, value);
	    },
	    secondary: function secondary(placement) {
	      var mainSide = placement === 'right' ? 'left' : 'top';
	      var value = popper[mainSide];
	      if (popper[placement] > boundaries[placement] && !options.escapeWithReference) {
	        value = Math.min(popper[mainSide], boundaries[placement] - (placement === 'right' ? popper.width : popper.height));
	      }
	      return defineProperty({}, mainSide, value);
	    }
	  };

	  order.forEach(function (placement) {
	    var side = ['left', 'top'].indexOf(placement) !== -1 ? 'primary' : 'secondary';
	    popper = _extends({}, popper, check[side](placement));
	  });

	  data.offsets.popper = popper;

	  return data;
	}

	/**
	 * @function
	 * @memberof Modifiers
	 * @argument {Object} data - The data object generated by `update` method
	 * @argument {Object} options - Modifiers configuration and options
	 * @returns {Object} The data object, properly modified
	 */
	function shift(data) {
	  var placement = data.placement;
	  var basePlacement = placement.split('-')[0];
	  var shiftvariation = placement.split('-')[1];

	  // if shift shiftvariation is specified, run the modifier
	  if (shiftvariation) {
	    var _data$offsets = data.offsets,
	        reference = _data$offsets.reference,
	        popper = _data$offsets.popper;

	    var isVertical = ['bottom', 'top'].indexOf(basePlacement) !== -1;
	    var side = isVertical ? 'left' : 'top';
	    var measurement = isVertical ? 'width' : 'height';

	    var shiftOffsets = {
	      start: defineProperty({}, side, reference[side]),
	      end: defineProperty({}, side, reference[side] + reference[measurement] - popper[measurement])
	    };

	    data.offsets.popper = _extends({}, popper, shiftOffsets[shiftvariation]);
	  }

	  return data;
	}

	/**
	 * @function
	 * @memberof Modifiers
	 * @argument {Object} data - The data object generated by update method
	 * @argument {Object} options - Modifiers configuration and options
	 * @returns {Object} The data object, properly modified
	 */
	function hide(data) {
	  if (!isModifierRequired(data.instance.modifiers, 'hide', 'preventOverflow')) {
	    return data;
	  }

	  var refRect = data.offsets.reference;
	  var bound = find(data.instance.modifiers, function (modifier) {
	    return modifier.name === 'preventOverflow';
	  }).boundaries;

	  if (refRect.bottom < bound.top || refRect.left > bound.right || refRect.top > bound.bottom || refRect.right < bound.left) {
	    // Avoid unnecessary DOM access if visibility hasn't changed
	    if (data.hide === true) {
	      return data;
	    }

	    data.hide = true;
	    data.attributes['x-out-of-boundaries'] = '';
	  } else {
	    // Avoid unnecessary DOM access if visibility hasn't changed
	    if (data.hide === false) {
	      return data;
	    }

	    data.hide = false;
	    data.attributes['x-out-of-boundaries'] = false;
	  }

	  return data;
	}

	/**
	 * @function
	 * @memberof Modifiers
	 * @argument {Object} data - The data object generated by `update` method
	 * @argument {Object} options - Modifiers configuration and options
	 * @returns {Object} The data object, properly modified
	 */
	function inner(data) {
	  var placement = data.placement;
	  var basePlacement = placement.split('-')[0];
	  var _data$offsets = data.offsets,
	      popper = _data$offsets.popper,
	      reference = _data$offsets.reference;

	  var isHoriz = ['left', 'right'].indexOf(basePlacement) !== -1;

	  var subtractLength = ['top', 'left'].indexOf(basePlacement) === -1;

	  popper[isHoriz ? 'left' : 'top'] = reference[basePlacement] - (subtractLength ? popper[isHoriz ? 'width' : 'height'] : 0);

	  data.placement = getOppositePlacement(placement);
	  data.offsets.popper = getClientRect(popper);

	  return data;
	}

	/**
	 * Modifier function, each modifier can have a function of this type assigned
	 * to its `fn` property.<br />
	 * These functions will be called on each update, this means that you must
	 * make sure they are performant enough to avoid performance bottlenecks.
	 *
	 * @function ModifierFn
	 * @argument {dataObject} data - The data object generated by `update` method
	 * @argument {Object} options - Modifiers configuration and options
	 * @returns {dataObject} The data object, properly modified
	 */

	/**
	 * Modifiers are plugins used to alter the behavior of your poppers.<br />
	 * Popper.js uses a set of 9 modifiers to provide all the basic functionalities
	 * needed by the library.
	 *
	 * Usually you don't want to override the `order`, `fn` and `onLoad` props.
	 * All the other properties are configurations that could be tweaked.
	 * @namespace modifiers
	 */
	var modifiers = {
	  /**
	   * Modifier used to shift the popper on the start or end of its reference
	   * element.<br />
	   * It will read the variation of the `placement` property.<br />
	   * It can be one either `-end` or `-start`.
	   * @memberof modifiers
	   * @inner
	   */
	  shift: {
	    /** @prop {number} order=100 - Index used to define the order of execution */
	    order: 100,
	    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
	    enabled: true,
	    /** @prop {ModifierFn} */
	    fn: shift
	  },

	  /**
	   * The `offset` modifier can shift your popper on both its axis.
	   *
	   * It accepts the following units:
	   * - `px` or unit-less, interpreted as pixels
	   * - `%` or `%r`, percentage relative to the length of the reference element
	   * - `%p`, percentage relative to the length of the popper element
	   * - `vw`, CSS viewport width unit
	   * - `vh`, CSS viewport height unit
	   *
	   * For length is intended the main axis relative to the placement of the popper.<br />
	   * This means that if the placement is `top` or `bottom`, the length will be the
	   * `width`. In case of `left` or `right`, it will be the `height`.
	   *
	   * You can provide a single value (as `Number` or `String`), or a pair of values
	   * as `String` divided by a comma or one (or more) white spaces.<br />
	   * The latter is a deprecated method because it leads to confusion and will be
	   * removed in v2.<br />
	   * Additionally, it accepts additions and subtractions between different units.
	   * Note that multiplications and divisions aren't supported.
	   *
	   * Valid examples are:
	   * ```
	   * 10
	   * '10%'
	   * '10, 10'
	   * '10%, 10'
	   * '10 + 10%'
	   * '10 - 5vh + 3%'
	   * '-10px + 5vh, 5px - 6%'
	   * ```
	   * > **NB**: If you desire to apply offsets to your poppers in a way that may make them overlap
	   * > with their reference element, unfortunately, you will have to disable the `flip` modifier.
	   * > You can read more on this at this [issue](https://github.com/FezVrasta/popper.js/issues/373).
	   *
	   * @memberof modifiers
	   * @inner
	   */
	  offset: {
	    /** @prop {number} order=200 - Index used to define the order of execution */
	    order: 200,
	    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
	    enabled: true,
	    /** @prop {ModifierFn} */
	    fn: offset,
	    /** @prop {Number|String} offset=0
	     * The offset value as described in the modifier description
	     */
	    offset: 0
	  },

	  /**
	   * Modifier used to prevent the popper from being positioned outside the boundary.
	   *
	   * A scenario exists where the reference itself is not within the boundaries.<br />
	   * We can say it has "escaped the boundaries" — or just "escaped".<br />
	   * In this case we need to decide whether the popper should either:
	   *
	   * - detach from the reference and remain "trapped" in the boundaries, or
	   * - if it should ignore the boundary and "escape with its reference"
	   *
	   * When `escapeWithReference` is set to`true` and reference is completely
	   * outside its boundaries, the popper will overflow (or completely leave)
	   * the boundaries in order to remain attached to the edge of the reference.
	   *
	   * @memberof modifiers
	   * @inner
	   */
	  preventOverflow: {
	    /** @prop {number} order=300 - Index used to define the order of execution */
	    order: 300,
	    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
	    enabled: true,
	    /** @prop {ModifierFn} */
	    fn: preventOverflow,
	    /**
	     * @prop {Array} [priority=['left','right','top','bottom']]
	     * Popper will try to prevent overflow following these priorities by default,
	     * then, it could overflow on the left and on top of the `boundariesElement`
	     */
	    priority: ['left', 'right', 'top', 'bottom'],
	    /**
	     * @prop {number} padding=5
	     * Amount of pixel used to define a minimum distance between the boundaries
	     * and the popper. This makes sure the popper always has a little padding
	     * between the edges of its container
	     */
	    padding: 5,
	    /**
	     * @prop {String|HTMLElement} boundariesElement='scrollParent'
	     * Boundaries used by the modifier. Can be `scrollParent`, `window`,
	     * `viewport` or any DOM element.
	     */
	    boundariesElement: 'scrollParent'
	  },

	  /**
	   * Modifier used to make sure the reference and its popper stay near each other
	   * without leaving any gap between the two. Especially useful when the arrow is
	   * enabled and you want to ensure that it points to its reference element.
	   * It cares only about the first axis. You can still have poppers with margin
	   * between the popper and its reference element.
	   * @memberof modifiers
	   * @inner
	   */
	  keepTogether: {
	    /** @prop {number} order=400 - Index used to define the order of execution */
	    order: 400,
	    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
	    enabled: true,
	    /** @prop {ModifierFn} */
	    fn: keepTogether
	  },

	  /**
	   * This modifier is used to move the `arrowElement` of the popper to make
	   * sure it is positioned between the reference element and its popper element.
	   * It will read the outer size of the `arrowElement` node to detect how many
	   * pixels of conjunction are needed.
	   *
	   * It has no effect if no `arrowElement` is provided.
	   * @memberof modifiers
	   * @inner
	   */
	  arrow: {
	    /** @prop {number} order=500 - Index used to define the order of execution */
	    order: 500,
	    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
	    enabled: true,
	    /** @prop {ModifierFn} */
	    fn: arrow,
	    /** @prop {String|HTMLElement} element='[x-arrow]' - Selector or node used as arrow */
	    element: '[x-arrow]'
	  },

	  /**
	   * Modifier used to flip the popper's placement when it starts to overlap its
	   * reference element.
	   *
	   * Requires the `preventOverflow` modifier before it in order to work.
	   *
	   * **NOTE:** this modifier will interrupt the current update cycle and will
	   * restart it if it detects the need to flip the placement.
	   * @memberof modifiers
	   * @inner
	   */
	  flip: {
	    /** @prop {number} order=600 - Index used to define the order of execution */
	    order: 600,
	    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
	    enabled: true,
	    /** @prop {ModifierFn} */
	    fn: flip,
	    /**
	     * @prop {String|Array} behavior='flip'
	     * The behavior used to change the popper's placement. It can be one of
	     * `flip`, `clockwise`, `counterclockwise` or an array with a list of valid
	     * placements (with optional variations)
	     */
	    behavior: 'flip',
	    /**
	     * @prop {number} padding=5
	     * The popper will flip if it hits the edges of the `boundariesElement`
	     */
	    padding: 5,
	    /**
	     * @prop {String|HTMLElement} boundariesElement='viewport'
	     * The element which will define the boundaries of the popper position.
	     * The popper will never be placed outside of the defined boundaries
	     * (except if `keepTogether` is enabled)
	     */
	    boundariesElement: 'viewport',
	    /**
	     * @prop {Boolean} flipVariations=false
	     * The popper will switch placement variation between `-start` and `-end` when
	     * the reference element overlaps its boundaries.
	     *
	     * The original placement should have a set variation.
	     */
	    flipVariations: false,
	    /**
	     * @prop {Boolean} flipVariationsByContent=false
	     * The popper will switch placement variation between `-start` and `-end` when
	     * the popper element overlaps its reference boundaries.
	     *
	     * The original placement should have a set variation.
	     */
	    flipVariationsByContent: false
	  },

	  /**
	   * Modifier used to make the popper flow toward the inner of the reference element.
	   * By default, when this modifier is disabled, the popper will be placed outside
	   * the reference element.
	   * @memberof modifiers
	   * @inner
	   */
	  inner: {
	    /** @prop {number} order=700 - Index used to define the order of execution */
	    order: 700,
	    /** @prop {Boolean} enabled=false - Whether the modifier is enabled or not */
	    enabled: false,
	    /** @prop {ModifierFn} */
	    fn: inner
	  },

	  /**
	   * Modifier used to hide the popper when its reference element is outside of the
	   * popper boundaries. It will set a `x-out-of-boundaries` attribute which can
	   * be used to hide with a CSS selector the popper when its reference is
	   * out of boundaries.
	   *
	   * Requires the `preventOverflow` modifier before it in order to work.
	   * @memberof modifiers
	   * @inner
	   */
	  hide: {
	    /** @prop {number} order=800 - Index used to define the order of execution */
	    order: 800,
	    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
	    enabled: true,
	    /** @prop {ModifierFn} */
	    fn: hide
	  },

	  /**
	   * Computes the style that will be applied to the popper element to gets
	   * properly positioned.
	   *
	   * Note that this modifier will not touch the DOM, it just prepares the styles
	   * so that `applyStyle` modifier can apply it. This separation is useful
	   * in case you need to replace `applyStyle` with a custom implementation.
	   *
	   * This modifier has `850` as `order` value to maintain backward compatibility
	   * with previous versions of Popper.js. Expect the modifiers ordering method
	   * to change in future major versions of the library.
	   *
	   * @memberof modifiers
	   * @inner
	   */
	  computeStyle: {
	    /** @prop {number} order=850 - Index used to define the order of execution */
	    order: 850,
	    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
	    enabled: true,
	    /** @prop {ModifierFn} */
	    fn: computeStyle,
	    /**
	     * @prop {Boolean} gpuAcceleration=true
	     * If true, it uses the CSS 3D transformation to position the popper.
	     * Otherwise, it will use the `top` and `left` properties
	     */
	    gpuAcceleration: true,
	    /**
	     * @prop {string} [x='bottom']
	     * Where to anchor the X axis (`bottom` or `top`). AKA X offset origin.
	     * Change this if your popper should grow in a direction different from `bottom`
	     */
	    x: 'bottom',
	    /**
	     * @prop {string} [x='left']
	     * Where to anchor the Y axis (`left` or `right`). AKA Y offset origin.
	     * Change this if your popper should grow in a direction different from `right`
	     */
	    y: 'right'
	  },

	  /**
	   * Applies the computed styles to the popper element.
	   *
	   * All the DOM manipulations are limited to this modifier. This is useful in case
	   * you want to integrate Popper.js inside a framework or view library and you
	   * want to delegate all the DOM manipulations to it.
	   *
	   * Note that if you disable this modifier, you must make sure the popper element
	   * has its position set to `absolute` before Popper.js can do its work!
	   *
	   * Just disable this modifier and define your own to achieve the desired effect.
	   *
	   * @memberof modifiers
	   * @inner
	   */
	  applyStyle: {
	    /** @prop {number} order=900 - Index used to define the order of execution */
	    order: 900,
	    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
	    enabled: true,
	    /** @prop {ModifierFn} */
	    fn: applyStyle,
	    /** @prop {Function} */
	    onLoad: applyStyleOnLoad,
	    /**
	     * @deprecated since version 1.10.0, the property moved to `computeStyle` modifier
	     * @prop {Boolean} gpuAcceleration=true
	     * If true, it uses the CSS 3D transformation to position the popper.
	     * Otherwise, it will use the `top` and `left` properties
	     */
	    gpuAcceleration: undefined
	  }
	};

	/**
	 * The `dataObject` is an object containing all the information used by Popper.js.
	 * This object is passed to modifiers and to the `onCreate` and `onUpdate` callbacks.
	 * @name dataObject
	 * @property {Object} data.instance The Popper.js instance
	 * @property {String} data.placement Placement applied to popper
	 * @property {String} data.originalPlacement Placement originally defined on init
	 * @property {Boolean} data.flipped True if popper has been flipped by flip modifier
	 * @property {Boolean} data.hide True if the reference element is out of boundaries, useful to know when to hide the popper
	 * @property {HTMLElement} data.arrowElement Node used as arrow by arrow modifier
	 * @property {Object} data.styles Any CSS property defined here will be applied to the popper. It expects the JavaScript nomenclature (eg. `marginBottom`)
	 * @property {Object} data.arrowStyles Any CSS property defined here will be applied to the popper arrow. It expects the JavaScript nomenclature (eg. `marginBottom`)
	 * @property {Object} data.boundaries Offsets of the popper boundaries
	 * @property {Object} data.offsets The measurements of popper, reference and arrow elements
	 * @property {Object} data.offsets.popper `top`, `left`, `width`, `height` values
	 * @property {Object} data.offsets.reference `top`, `left`, `width`, `height` values
	 * @property {Object} data.offsets.arrow] `top` and `left` offsets, only one of them will be different from 0
	 */

	/**
	 * Default options provided to Popper.js constructor.<br />
	 * These can be overridden using the `options` argument of Popper.js.<br />
	 * To override an option, simply pass an object with the same
	 * structure of the `options` object, as the 3rd argument. For example:
	 * ```
	 * new Popper(ref, pop, {
	 *   modifiers: {
	 *     preventOverflow: { enabled: false }
	 *   }
	 * })
	 * ```
	 * @type {Object}
	 * @static
	 * @memberof Popper
	 */
	var Defaults = {
	  /**
	   * Popper's placement.
	   * @prop {Popper.placements} placement='bottom'
	   */
	  placement: 'bottom',

	  /**
	   * Set this to true if you want popper to position it self in 'fixed' mode
	   * @prop {Boolean} positionFixed=false
	   */
	  positionFixed: false,

	  /**
	   * Whether events (resize, scroll) are initially enabled.
	   * @prop {Boolean} eventsEnabled=true
	   */
	  eventsEnabled: true,

	  /**
	   * Set to true if you want to automatically remove the popper when
	   * you call the `destroy` method.
	   * @prop {Boolean} removeOnDestroy=false
	   */
	  removeOnDestroy: false,

	  /**
	   * Callback called when the popper is created.<br />
	   * By default, it is set to no-op.<br />
	   * Access Popper.js instance with `data.instance`.
	   * @prop {onCreate}
	   */
	  onCreate: function onCreate() {},

	  /**
	   * Callback called when the popper is updated. This callback is not called
	   * on the initialization/creation of the popper, but only on subsequent
	   * updates.<br />
	   * By default, it is set to no-op.<br />
	   * Access Popper.js instance with `data.instance`.
	   * @prop {onUpdate}
	   */
	  onUpdate: function onUpdate() {},

	  /**
	   * List of modifiers used to modify the offsets before they are applied to the popper.
	   * They provide most of the functionalities of Popper.js.
	   * @prop {modifiers}
	   */
	  modifiers: modifiers
	};

	/**
	 * @callback onCreate
	 * @param {dataObject} data
	 */

	/**
	 * @callback onUpdate
	 * @param {dataObject} data
	 */

	// Utils
	// Methods
	var Popper = function () {
	  /**
	   * Creates a new Popper.js instance.
	   * @class Popper
	   * @param {Element|referenceObject} reference - The reference element used to position the popper
	   * @param {Element} popper - The HTML / XML element used as the popper
	   * @param {Object} options - Your custom options to override the ones defined in [Defaults](#defaults)
	   * @return {Object} instance - The generated Popper.js instance
	   */
	  function Popper(reference, popper) {
	    var _this = this;

	    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
	    classCallCheck(this, Popper);

	    this.scheduleUpdate = function () {
	      return requestAnimationFrame(_this.update);
	    };

	    // make update() debounced, so that it only runs at most once-per-tick
	    this.update = debounce(this.update.bind(this));

	    // with {} we create a new object with the options inside it
	    this.options = _extends({}, Popper.Defaults, options);

	    // init state
	    this.state = {
	      isDestroyed: false,
	      isCreated: false,
	      scrollParents: []
	    };

	    // get reference and popper elements (allow jQuery wrappers)
	    this.reference = reference && reference.jquery ? reference[0] : reference;
	    this.popper = popper && popper.jquery ? popper[0] : popper;

	    // Deep merge modifiers options
	    this.options.modifiers = {};
	    Object.keys(_extends({}, Popper.Defaults.modifiers, options.modifiers)).forEach(function (name) {
	      _this.options.modifiers[name] = _extends({}, Popper.Defaults.modifiers[name] || {}, options.modifiers ? options.modifiers[name] : {});
	    });

	    // Refactoring modifiers' list (Object => Array)
	    this.modifiers = Object.keys(this.options.modifiers).map(function (name) {
	      return _extends({
	        name: name
	      }, _this.options.modifiers[name]);
	    })
	    // sort the modifiers by order
	    .sort(function (a, b) {
	      return a.order - b.order;
	    });

	    // modifiers have the ability to execute arbitrary code when Popper.js get inited
	    // such code is executed in the same order of its modifier
	    // they could add new properties to their options configuration
	    // BE AWARE: don't add options to `options.modifiers.name` but to `modifierOptions`!
	    this.modifiers.forEach(function (modifierOptions) {
	      if (modifierOptions.enabled && isFunction(modifierOptions.onLoad)) {
	        modifierOptions.onLoad(_this.reference, _this.popper, _this.options, modifierOptions, _this.state);
	      }
	    });

	    // fire the first update to position the popper in the right place
	    this.update();

	    var eventsEnabled = this.options.eventsEnabled;
	    if (eventsEnabled) {
	      // setup event listeners, they will take care of update the position in specific situations
	      this.enableEventListeners();
	    }

	    this.state.eventsEnabled = eventsEnabled;
	  }

	  // We can't use class properties because they don't get listed in the
	  // class prototype and break stuff like Sinon stubs


	  createClass(Popper, [{
	    key: 'update',
	    value: function update$$1() {
	      return update.call(this);
	    }
	  }, {
	    key: 'destroy',
	    value: function destroy$$1() {
	      return destroy.call(this);
	    }
	  }, {
	    key: 'enableEventListeners',
	    value: function enableEventListeners$$1() {
	      return enableEventListeners.call(this);
	    }
	  }, {
	    key: 'disableEventListeners',
	    value: function disableEventListeners$$1() {
	      return disableEventListeners.call(this);
	    }

	    /**
	     * Schedules an update. It will run on the next UI update available.
	     * @method scheduleUpdate
	     * @memberof Popper
	     */


	    /**
	     * Collection of utilities useful when writing custom modifiers.
	     * Starting from version 1.7, this method is available only if you
	     * include `popper-utils.js` before `popper.js`.
	     *
	     * **DEPRECATION**: This way to access PopperUtils is deprecated
	     * and will be removed in v2! Use the PopperUtils module directly instead.
	     * Due to the high instability of the methods contained in Utils, we can't
	     * guarantee them to follow semver. Use them at your own risk!
	     * @static
	     * @private
	     * @type {Object}
	     * @deprecated since version 1.8
	     * @member Utils
	     * @memberof Popper
	     */

	  }]);
	  return Popper;
	}();

	/**
	 * The `referenceObject` is an object that provides an interface compatible with Popper.js
	 * and lets you use it as replacement of a real DOM node.<br />
	 * You can use this method to position a popper relatively to a set of coordinates
	 * in case you don't have a DOM node to use as reference.
	 *
	 * ```
	 * new Popper(referenceObject, popperNode);
	 * ```
	 *
	 * NB: This feature isn't supported in Internet Explorer 10.
	 * @name referenceObject
	 * @property {Function} data.getBoundingClientRect
	 * A function that returns a set of coordinates compatible with the native `getBoundingClientRect` method.
	 * @property {number} data.clientWidth
	 * An ES6 getter that will return the width of the virtual reference element.
	 * @property {number} data.clientHeight
	 * An ES6 getter that will return the height of the virtual reference element.
	 */


	Popper.Utils = (typeof window !== 'undefined' ? window : global).PopperUtils;
	Popper.placements = placements;
	Popper.Defaults = Defaults;

	return Popper;

	})));
	//# sourceMappingURL=popper.js.map

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 309 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {(function (global, factory) {
	   true ? module.exports = factory() :
	  typeof define === 'function' && define.amd ? define('underscore', factory) :
	  (function() {
	  	var current = global._;
	  	var exports = factory();
	  	global._ = exports;
	  	exports.noConflict = function() { global._ = current; return exports; };
	  })();
	}(this, (function () {

	  //     Underscore.js 1.10.2
	  //     https://underscorejs.org
	  //     (c) 2009-2020 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	  //     Underscore may be freely distributed under the MIT license.

	  // Baseline setup
	  // --------------

	  // Establish the root object, `window` (`self`) in the browser, `global`
	  // on the server, or `this` in some virtual machines. We use `self`
	  // instead of `window` for `WebWorker` support.
	  var root = typeof self == 'object' && self.self === self && self ||
	            typeof global == 'object' && global.global === global && global ||
	            Function('return this')() ||
	            {};

	  // Save bytes in the minified (but not gzipped) version:
	  var ArrayProto = Array.prototype, ObjProto = Object.prototype;
	  var SymbolProto = typeof Symbol !== 'undefined' ? Symbol.prototype : null;

	  // Create quick reference variables for speed access to core prototypes.
	  var push = ArrayProto.push,
	      slice = ArrayProto.slice,
	      toString = ObjProto.toString,
	      hasOwnProperty = ObjProto.hasOwnProperty;

	  // All **ECMAScript 5** native function implementations that we hope to use
	  // are declared here.
	  var nativeIsArray = Array.isArray,
	      nativeKeys = Object.keys,
	      nativeCreate = Object.create;

	  // Create references to these builtin functions because we override them.
	  var _isNaN = root.isNaN,
	      _isFinite = root.isFinite;

	  // Naked function reference for surrogate-prototype-swapping.
	  var Ctor = function(){};

	  // The Underscore object. All exported functions below are added to it in the
	  // modules/index-all.js using the mixin function.
	  function _(obj) {
	    if (obj instanceof _) return obj;
	    if (!(this instanceof _)) return new _(obj);
	    this._wrapped = obj;
	  }

	  // Current version.
	  var VERSION = _.VERSION = '1.10.2';

	  // Internal function that returns an efficient (for current engines) version
	  // of the passed-in callback, to be repeatedly applied in other Underscore
	  // functions.
	  function optimizeCb(func, context, argCount) {
	    if (context === void 0) return func;
	    switch (argCount == null ? 3 : argCount) {
	      case 1: return function(value) {
	        return func.call(context, value);
	      };
	      // The 2-argument case is omitted because we’re not using it.
	      case 3: return function(value, index, collection) {
	        return func.call(context, value, index, collection);
	      };
	      case 4: return function(accumulator, value, index, collection) {
	        return func.call(context, accumulator, value, index, collection);
	      };
	    }
	    return function() {
	      return func.apply(context, arguments);
	    };
	  }

	  // An internal function to generate callbacks that can be applied to each
	  // element in a collection, returning the desired result — either `identity`,
	  // an arbitrary callback, a property matcher, or a property accessor.
	  function baseIteratee(value, context, argCount) {
	    if (value == null) return identity;
	    if (isFunction(value)) return optimizeCb(value, context, argCount);
	    if (isObject(value) && !isArray(value)) return matcher(value);
	    return property(value);
	  }

	  // External wrapper for our callback generator. Users may customize
	  // `_.iteratee` if they want additional predicate/iteratee shorthand styles.
	  // This abstraction hides the internal-only argCount argument.
	  _.iteratee = iteratee;
	  function iteratee(value, context) {
	    return baseIteratee(value, context, Infinity);
	  }

	  // The function we actually call internally. It invokes _.iteratee if
	  // overridden, otherwise baseIteratee.
	  function cb(value, context, argCount) {
	    if (_.iteratee !== iteratee) return _.iteratee(value, context);
	    return baseIteratee(value, context, argCount);
	  }

	  // Some functions take a variable number of arguments, or a few expected
	  // arguments at the beginning and then a variable number of values to operate
	  // on. This helper accumulates all remaining arguments past the function’s
	  // argument length (or an explicit `startIndex`), into an array that becomes
	  // the last argument. Similar to ES6’s "rest parameter".
	  function restArguments(func, startIndex) {
	    startIndex = startIndex == null ? func.length - 1 : +startIndex;
	    return function() {
	      var length = Math.max(arguments.length - startIndex, 0),
	          rest = Array(length),
	          index = 0;
	      for (; index < length; index++) {
	        rest[index] = arguments[index + startIndex];
	      }
	      switch (startIndex) {
	        case 0: return func.call(this, rest);
	        case 1: return func.call(this, arguments[0], rest);
	        case 2: return func.call(this, arguments[0], arguments[1], rest);
	      }
	      var args = Array(startIndex + 1);
	      for (index = 0; index < startIndex; index++) {
	        args[index] = arguments[index];
	      }
	      args[startIndex] = rest;
	      return func.apply(this, args);
	    };
	  }

	  // An internal function for creating a new object that inherits from another.
	  function baseCreate(prototype) {
	    if (!isObject(prototype)) return {};
	    if (nativeCreate) return nativeCreate(prototype);
	    Ctor.prototype = prototype;
	    var result = new Ctor;
	    Ctor.prototype = null;
	    return result;
	  }

	  function shallowProperty(key) {
	    return function(obj) {
	      return obj == null ? void 0 : obj[key];
	    };
	  }

	  function _has(obj, path) {
	    return obj != null && hasOwnProperty.call(obj, path);
	  }

	  function deepGet(obj, path) {
	    var length = path.length;
	    for (var i = 0; i < length; i++) {
	      if (obj == null) return void 0;
	      obj = obj[path[i]];
	    }
	    return length ? obj : void 0;
	  }

	  // Helper for collection methods to determine whether a collection
	  // should be iterated as an array or as an object.
	  // Related: https://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength
	  // Avoids a very nasty iOS 8 JIT bug on ARM-64. #2094
	  var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;
	  var getLength = shallowProperty('length');
	  function isArrayLike(collection) {
	    var length = getLength(collection);
	    return typeof length == 'number' && length >= 0 && length <= MAX_ARRAY_INDEX;
	  }

	  // Collection Functions
	  // --------------------

	  // The cornerstone, an `each` implementation, aka `forEach`.
	  // Handles raw objects in addition to array-likes. Treats all
	  // sparse array-likes as if they were dense.
	  function each(obj, iteratee, context) {
	    iteratee = optimizeCb(iteratee, context);
	    var i, length;
	    if (isArrayLike(obj)) {
	      for (i = 0, length = obj.length; i < length; i++) {
	        iteratee(obj[i], i, obj);
	      }
	    } else {
	      var _keys = keys(obj);
	      for (i = 0, length = _keys.length; i < length; i++) {
	        iteratee(obj[_keys[i]], _keys[i], obj);
	      }
	    }
	    return obj;
	  }

	  // Return the results of applying the iteratee to each element.
	  function map(obj, iteratee, context) {
	    iteratee = cb(iteratee, context);
	    var _keys = !isArrayLike(obj) && keys(obj),
	        length = (_keys || obj).length,
	        results = Array(length);
	    for (var index = 0; index < length; index++) {
	      var currentKey = _keys ? _keys[index] : index;
	      results[index] = iteratee(obj[currentKey], currentKey, obj);
	    }
	    return results;
	  }

	  // Create a reducing function iterating left or right.
	  function createReduce(dir) {
	    // Wrap code that reassigns argument variables in a separate function than
	    // the one that accesses `arguments.length` to avoid a perf hit. (#1991)
	    var reducer = function(obj, iteratee, memo, initial) {
	      var _keys = !isArrayLike(obj) && keys(obj),
	          length = (_keys || obj).length,
	          index = dir > 0 ? 0 : length - 1;
	      if (!initial) {
	        memo = obj[_keys ? _keys[index] : index];
	        index += dir;
	      }
	      for (; index >= 0 && index < length; index += dir) {
	        var currentKey = _keys ? _keys[index] : index;
	        memo = iteratee(memo, obj[currentKey], currentKey, obj);
	      }
	      return memo;
	    };

	    return function(obj, iteratee, memo, context) {
	      var initial = arguments.length >= 3;
	      return reducer(obj, optimizeCb(iteratee, context, 4), memo, initial);
	    };
	  }

	  // **Reduce** builds up a single result from a list of values, aka `inject`,
	  // or `foldl`.
	  var reduce = createReduce(1);

	  // The right-associative version of reduce, also known as `foldr`.
	  var reduceRight = createReduce(-1);

	  // Return the first value which passes a truth test.
	  function find(obj, predicate, context) {
	    var keyFinder = isArrayLike(obj) ? findIndex : findKey;
	    var key = keyFinder(obj, predicate, context);
	    if (key !== void 0 && key !== -1) return obj[key];
	  }

	  // Return all the elements that pass a truth test.
	  function filter(obj, predicate, context) {
	    var results = [];
	    predicate = cb(predicate, context);
	    each(obj, function(value, index, list) {
	      if (predicate(value, index, list)) results.push(value);
	    });
	    return results;
	  }

	  // Return all the elements for which a truth test fails.
	  function reject(obj, predicate, context) {
	    return filter(obj, negate(cb(predicate)), context);
	  }

	  // Determine whether all of the elements match a truth test.
	  function every(obj, predicate, context) {
	    predicate = cb(predicate, context);
	    var _keys = !isArrayLike(obj) && keys(obj),
	        length = (_keys || obj).length;
	    for (var index = 0; index < length; index++) {
	      var currentKey = _keys ? _keys[index] : index;
	      if (!predicate(obj[currentKey], currentKey, obj)) return false;
	    }
	    return true;
	  }

	  // Determine if at least one element in the object matches a truth test.
	  function some(obj, predicate, context) {
	    predicate = cb(predicate, context);
	    var _keys = !isArrayLike(obj) && keys(obj),
	        length = (_keys || obj).length;
	    for (var index = 0; index < length; index++) {
	      var currentKey = _keys ? _keys[index] : index;
	      if (predicate(obj[currentKey], currentKey, obj)) return true;
	    }
	    return false;
	  }

	  // Determine if the array or object contains a given item (using `===`).
	  function contains(obj, item, fromIndex, guard) {
	    if (!isArrayLike(obj)) obj = values(obj);
	    if (typeof fromIndex != 'number' || guard) fromIndex = 0;
	    return indexOf(obj, item, fromIndex) >= 0;
	  }

	  // Invoke a method (with arguments) on every item in a collection.
	  var invoke = restArguments(function(obj, path, args) {
	    var contextPath, func;
	    if (isFunction(path)) {
	      func = path;
	    } else if (isArray(path)) {
	      contextPath = path.slice(0, -1);
	      path = path[path.length - 1];
	    }
	    return map(obj, function(context) {
	      var method = func;
	      if (!method) {
	        if (contextPath && contextPath.length) {
	          context = deepGet(context, contextPath);
	        }
	        if (context == null) return void 0;
	        method = context[path];
	      }
	      return method == null ? method : method.apply(context, args);
	    });
	  });

	  // Convenience version of a common use case of `map`: fetching a property.
	  function pluck(obj, key) {
	    return map(obj, property(key));
	  }

	  // Convenience version of a common use case of `filter`: selecting only objects
	  // containing specific `key:value` pairs.
	  function where(obj, attrs) {
	    return filter(obj, matcher(attrs));
	  }

	  // Convenience version of a common use case of `find`: getting the first object
	  // containing specific `key:value` pairs.
	  function findWhere(obj, attrs) {
	    return find(obj, matcher(attrs));
	  }

	  // Return the maximum element (or element-based computation).
	  function max(obj, iteratee, context) {
	    var result = -Infinity, lastComputed = -Infinity,
	        value, computed;
	    if (iteratee == null || typeof iteratee == 'number' && typeof obj[0] != 'object' && obj != null) {
	      obj = isArrayLike(obj) ? obj : values(obj);
	      for (var i = 0, length = obj.length; i < length; i++) {
	        value = obj[i];
	        if (value != null && value > result) {
	          result = value;
	        }
	      }
	    } else {
	      iteratee = cb(iteratee, context);
	      each(obj, function(v, index, list) {
	        computed = iteratee(v, index, list);
	        if (computed > lastComputed || computed === -Infinity && result === -Infinity) {
	          result = v;
	          lastComputed = computed;
	        }
	      });
	    }
	    return result;
	  }

	  // Return the minimum element (or element-based computation).
	  function min(obj, iteratee, context) {
	    var result = Infinity, lastComputed = Infinity,
	        value, computed;
	    if (iteratee == null || typeof iteratee == 'number' && typeof obj[0] != 'object' && obj != null) {
	      obj = isArrayLike(obj) ? obj : values(obj);
	      for (var i = 0, length = obj.length; i < length; i++) {
	        value = obj[i];
	        if (value != null && value < result) {
	          result = value;
	        }
	      }
	    } else {
	      iteratee = cb(iteratee, context);
	      each(obj, function(v, index, list) {
	        computed = iteratee(v, index, list);
	        if (computed < lastComputed || computed === Infinity && result === Infinity) {
	          result = v;
	          lastComputed = computed;
	        }
	      });
	    }
	    return result;
	  }

	  // Shuffle a collection.
	  function shuffle(obj) {
	    return sample(obj, Infinity);
	  }

	  // Sample **n** random values from a collection using the modern version of the
	  // [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher–Yates_shuffle).
	  // If **n** is not specified, returns a single random element.
	  // The internal `guard` argument allows it to work with `map`.
	  function sample(obj, n, guard) {
	    if (n == null || guard) {
	      if (!isArrayLike(obj)) obj = values(obj);
	      return obj[random(obj.length - 1)];
	    }
	    var sample = isArrayLike(obj) ? clone(obj) : values(obj);
	    var length = getLength(sample);
	    n = Math.max(Math.min(n, length), 0);
	    var last = length - 1;
	    for (var index = 0; index < n; index++) {
	      var rand = random(index, last);
	      var temp = sample[index];
	      sample[index] = sample[rand];
	      sample[rand] = temp;
	    }
	    return sample.slice(0, n);
	  }

	  // Sort the object's values by a criterion produced by an iteratee.
	  function sortBy(obj, iteratee, context) {
	    var index = 0;
	    iteratee = cb(iteratee, context);
	    return pluck(map(obj, function(value, key, list) {
	      return {
	        value: value,
	        index: index++,
	        criteria: iteratee(value, key, list)
	      };
	    }).sort(function(left, right) {
	      var a = left.criteria;
	      var b = right.criteria;
	      if (a !== b) {
	        if (a > b || a === void 0) return 1;
	        if (a < b || b === void 0) return -1;
	      }
	      return left.index - right.index;
	    }), 'value');
	  }

	  // An internal function used for aggregate "group by" operations.
	  function group(behavior, partition) {
	    return function(obj, iteratee, context) {
	      var result = partition ? [[], []] : {};
	      iteratee = cb(iteratee, context);
	      each(obj, function(value, index) {
	        var key = iteratee(value, index, obj);
	        behavior(result, value, key);
	      });
	      return result;
	    };
	  }

	  // Groups the object's values by a criterion. Pass either a string attribute
	  // to group by, or a function that returns the criterion.
	  var groupBy = group(function(result, value, key) {
	    if (_has(result, key)) result[key].push(value); else result[key] = [value];
	  });

	  // Indexes the object's values by a criterion, similar to `groupBy`, but for
	  // when you know that your index values will be unique.
	  var indexBy = group(function(result, value, key) {
	    result[key] = value;
	  });

	  // Counts instances of an object that group by a certain criterion. Pass
	  // either a string attribute to count by, or a function that returns the
	  // criterion.
	  var countBy = group(function(result, value, key) {
	    if (_has(result, key)) result[key]++; else result[key] = 1;
	  });

	  var reStrSymbol = /[^\ud800-\udfff]|[\ud800-\udbff][\udc00-\udfff]|[\ud800-\udfff]/g;
	  // Safely create a real, live array from anything iterable.
	  function toArray(obj) {
	    if (!obj) return [];
	    if (isArray(obj)) return slice.call(obj);
	    if (isString(obj)) {
	      // Keep surrogate pair characters together
	      return obj.match(reStrSymbol);
	    }
	    if (isArrayLike(obj)) return map(obj, identity);
	    return values(obj);
	  }

	  // Return the number of elements in an object.
	  function size(obj) {
	    if (obj == null) return 0;
	    return isArrayLike(obj) ? obj.length : keys(obj).length;
	  }

	  // Split a collection into two arrays: one whose elements all satisfy the given
	  // predicate, and one whose elements all do not satisfy the predicate.
	  var partition = group(function(result, value, pass) {
	    result[pass ? 0 : 1].push(value);
	  }, true);

	  // Array Functions
	  // ---------------

	  // Get the first element of an array. Passing **n** will return the first N
	  // values in the array. The **guard** check allows it to work with `map`.
	  function first(array, n, guard) {
	    if (array == null || array.length < 1) return n == null ? void 0 : [];
	    if (n == null || guard) return array[0];
	    return initial(array, array.length - n);
	  }

	  // Returns everything but the last entry of the array. Especially useful on
	  // the arguments object. Passing **n** will return all the values in
	  // the array, excluding the last N.
	  function initial(array, n, guard) {
	    return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));
	  }

	  // Get the last element of an array. Passing **n** will return the last N
	  // values in the array.
	  function last(array, n, guard) {
	    if (array == null || array.length < 1) return n == null ? void 0 : [];
	    if (n == null || guard) return array[array.length - 1];
	    return rest(array, Math.max(0, array.length - n));
	  }

	  // Returns everything but the first entry of the array. Especially useful on
	  // the arguments object. Passing an **n** will return the rest N values in the
	  // array.
	  function rest(array, n, guard) {
	    return slice.call(array, n == null || guard ? 1 : n);
	  }

	  // Trim out all falsy values from an array.
	  function compact(array) {
	    return filter(array, Boolean);
	  }

	  // Internal implementation of a recursive `flatten` function.
	  function _flatten(input, shallow, strict, output) {
	    output = output || [];
	    var idx = output.length;
	    for (var i = 0, length = getLength(input); i < length; i++) {
	      var value = input[i];
	      if (isArrayLike(value) && (isArray(value) || isArguments(value))) {
	        // Flatten current level of array or arguments object.
	        if (shallow) {
	          var j = 0, len = value.length;
	          while (j < len) output[idx++] = value[j++];
	        } else {
	          _flatten(value, shallow, strict, output);
	          idx = output.length;
	        }
	      } else if (!strict) {
	        output[idx++] = value;
	      }
	    }
	    return output;
	  }

	  // Flatten out an array, either recursively (by default), or just one level.
	  function flatten(array, shallow) {
	    return _flatten(array, shallow, false);
	  }

	  // Return a version of the array that does not contain the specified value(s).
	  var without = restArguments(function(array, otherArrays) {
	    return difference(array, otherArrays);
	  });

	  // Produce a duplicate-free version of the array. If the array has already
	  // been sorted, you have the option of using a faster algorithm.
	  // The faster algorithm will not work with an iteratee if the iteratee
	  // is not a one-to-one function, so providing an iteratee will disable
	  // the faster algorithm.
	  function uniq(array, isSorted, iteratee, context) {
	    if (!isBoolean(isSorted)) {
	      context = iteratee;
	      iteratee = isSorted;
	      isSorted = false;
	    }
	    if (iteratee != null) iteratee = cb(iteratee, context);
	    var result = [];
	    var seen = [];
	    for (var i = 0, length = getLength(array); i < length; i++) {
	      var value = array[i],
	          computed = iteratee ? iteratee(value, i, array) : value;
	      if (isSorted && !iteratee) {
	        if (!i || seen !== computed) result.push(value);
	        seen = computed;
	      } else if (iteratee) {
	        if (!contains(seen, computed)) {
	          seen.push(computed);
	          result.push(value);
	        }
	      } else if (!contains(result, value)) {
	        result.push(value);
	      }
	    }
	    return result;
	  }

	  // Produce an array that contains the union: each distinct element from all of
	  // the passed-in arrays.
	  var union = restArguments(function(arrays) {
	    return uniq(_flatten(arrays, true, true));
	  });

	  // Produce an array that contains every item shared between all the
	  // passed-in arrays.
	  function intersection(array) {
	    var result = [];
	    var argsLength = arguments.length;
	    for (var i = 0, length = getLength(array); i < length; i++) {
	      var item = array[i];
	      if (contains(result, item)) continue;
	      var j;
	      for (j = 1; j < argsLength; j++) {
	        if (!contains(arguments[j], item)) break;
	      }
	      if (j === argsLength) result.push(item);
	    }
	    return result;
	  }

	  // Take the difference between one array and a number of other arrays.
	  // Only the elements present in just the first array will remain.
	  var difference = restArguments(function(array, rest) {
	    rest = _flatten(rest, true, true);
	    return filter(array, function(value){
	      return !contains(rest, value);
	    });
	  });

	  // Complement of zip. Unzip accepts an array of arrays and groups
	  // each array's elements on shared indices.
	  function unzip(array) {
	    var length = array && max(array, getLength).length || 0;
	    var result = Array(length);

	    for (var index = 0; index < length; index++) {
	      result[index] = pluck(array, index);
	    }
	    return result;
	  }

	  // Zip together multiple lists into a single array -- elements that share
	  // an index go together.
	  var zip = restArguments(unzip);

	  // Converts lists into objects. Pass either a single array of `[key, value]`
	  // pairs, or two parallel arrays of the same length -- one of keys, and one of
	  // the corresponding values. Passing by pairs is the reverse of pairs.
	  function object(list, values) {
	    var result = {};
	    for (var i = 0, length = getLength(list); i < length; i++) {
	      if (values) {
	        result[list[i]] = values[i];
	      } else {
	        result[list[i][0]] = list[i][1];
	      }
	    }
	    return result;
	  }

	  // Generator function to create the findIndex and findLastIndex functions.
	  function createPredicateIndexFinder(dir) {
	    return function(array, predicate, context) {
	      predicate = cb(predicate, context);
	      var length = getLength(array);
	      var index = dir > 0 ? 0 : length - 1;
	      for (; index >= 0 && index < length; index += dir) {
	        if (predicate(array[index], index, array)) return index;
	      }
	      return -1;
	    };
	  }

	  // Returns the first index on an array-like that passes a predicate test.
	  var findIndex = createPredicateIndexFinder(1);
	  var findLastIndex = createPredicateIndexFinder(-1);

	  // Use a comparator function to figure out the smallest index at which
	  // an object should be inserted so as to maintain order. Uses binary search.
	  function sortedIndex(array, obj, iteratee, context) {
	    iteratee = cb(iteratee, context, 1);
	    var value = iteratee(obj);
	    var low = 0, high = getLength(array);
	    while (low < high) {
	      var mid = Math.floor((low + high) / 2);
	      if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;
	    }
	    return low;
	  }

	  // Generator function to create the indexOf and lastIndexOf functions.
	  function createIndexFinder(dir, predicateFind, sortedIndex) {
	    return function(array, item, idx) {
	      var i = 0, length = getLength(array);
	      if (typeof idx == 'number') {
	        if (dir > 0) {
	          i = idx >= 0 ? idx : Math.max(idx + length, i);
	        } else {
	          length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;
	        }
	      } else if (sortedIndex && idx && length) {
	        idx = sortedIndex(array, item);
	        return array[idx] === item ? idx : -1;
	      }
	      if (item !== item) {
	        idx = predicateFind(slice.call(array, i, length), isNaN);
	        return idx >= 0 ? idx + i : -1;
	      }
	      for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {
	        if (array[idx] === item) return idx;
	      }
	      return -1;
	    };
	  }

	  // Return the position of the first occurrence of an item in an array,
	  // or -1 if the item is not included in the array.
	  // If the array is large and already in sort order, pass `true`
	  // for **isSorted** to use binary search.
	  var indexOf = createIndexFinder(1, findIndex, sortedIndex);
	  var lastIndexOf = createIndexFinder(-1, findLastIndex);

	  // Generate an integer Array containing an arithmetic progression. A port of
	  // the native Python `range()` function. See
	  // [the Python documentation](https://docs.python.org/library/functions.html#range).
	  function range(start, stop, step) {
	    if (stop == null) {
	      stop = start || 0;
	      start = 0;
	    }
	    if (!step) {
	      step = stop < start ? -1 : 1;
	    }

	    var length = Math.max(Math.ceil((stop - start) / step), 0);
	    var range = Array(length);

	    for (var idx = 0; idx < length; idx++, start += step) {
	      range[idx] = start;
	    }

	    return range;
	  }

	  // Chunk a single array into multiple arrays, each containing `count` or fewer
	  // items.
	  function chunk(array, count) {
	    if (count == null || count < 1) return [];
	    var result = [];
	    var i = 0, length = array.length;
	    while (i < length) {
	      result.push(slice.call(array, i, i += count));
	    }
	    return result;
	  }

	  // Function (ahem) Functions
	  // ------------------

	  // Determines whether to execute a function as a constructor
	  // or a normal function with the provided arguments.
	  function executeBound(sourceFunc, boundFunc, context, callingContext, args) {
	    if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);
	    var self = baseCreate(sourceFunc.prototype);
	    var result = sourceFunc.apply(self, args);
	    if (isObject(result)) return result;
	    return self;
	  }

	  // Create a function bound to a given object (assigning `this`, and arguments,
	  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if
	  // available.
	  var bind = restArguments(function(func, context, args) {
	    if (!isFunction(func)) throw new TypeError('Bind must be called on a function');
	    var bound = restArguments(function(callArgs) {
	      return executeBound(func, bound, context, this, args.concat(callArgs));
	    });
	    return bound;
	  });

	  // Partially apply a function by creating a version that has had some of its
	  // arguments pre-filled, without changing its dynamic `this` context. _ acts
	  // as a placeholder by default, allowing any combination of arguments to be
	  // pre-filled. Set `partial.placeholder` for a custom placeholder argument.
	  var partial = restArguments(function(func, boundArgs) {
	    var placeholder = partial.placeholder;
	    var bound = function() {
	      var position = 0, length = boundArgs.length;
	      var args = Array(length);
	      for (var i = 0; i < length; i++) {
	        args[i] = boundArgs[i] === placeholder ? arguments[position++] : boundArgs[i];
	      }
	      while (position < arguments.length) args.push(arguments[position++]);
	      return executeBound(func, bound, this, this, args);
	    };
	    return bound;
	  });

	  partial.placeholder = _;

	  // Bind a number of an object's methods to that object. Remaining arguments
	  // are the method names to be bound. Useful for ensuring that all callbacks
	  // defined on an object belong to it.
	  var bindAll = restArguments(function(obj, _keys) {
	    _keys = _flatten(_keys, false, false);
	    var index = _keys.length;
	    if (index < 1) throw new Error('bindAll must be passed function names');
	    while (index--) {
	      var key = _keys[index];
	      obj[key] = bind(obj[key], obj);
	    }
	  });

	  // Memoize an expensive function by storing its results.
	  function memoize(func, hasher) {
	    var memoize = function(key) {
	      var cache = memoize.cache;
	      var address = '' + (hasher ? hasher.apply(this, arguments) : key);
	      if (!_has(cache, address)) cache[address] = func.apply(this, arguments);
	      return cache[address];
	    };
	    memoize.cache = {};
	    return memoize;
	  }

	  // Delays a function for the given number of milliseconds, and then calls
	  // it with the arguments supplied.
	  var delay = restArguments(function(func, wait, args) {
	    return setTimeout(function() {
	      return func.apply(null, args);
	    }, wait);
	  });

	  // Defers a function, scheduling it to run after the current call stack has
	  // cleared.
	  var defer = partial(delay, _, 1);

	  // Returns a function, that, when invoked, will only be triggered at most once
	  // during a given window of time. Normally, the throttled function will run
	  // as much as it can, without ever going more than once per `wait` duration;
	  // but if you'd like to disable the execution on the leading edge, pass
	  // `{leading: false}`. To disable execution on the trailing edge, ditto.
	  function throttle(func, wait, options) {
	    var timeout, context, args, result;
	    var previous = 0;
	    if (!options) options = {};

	    var later = function() {
	      previous = options.leading === false ? 0 : now();
	      timeout = null;
	      result = func.apply(context, args);
	      if (!timeout) context = args = null;
	    };

	    var throttled = function() {
	      var _now = now();
	      if (!previous && options.leading === false) previous = _now;
	      var remaining = wait - (_now - previous);
	      context = this;
	      args = arguments;
	      if (remaining <= 0 || remaining > wait) {
	        if (timeout) {
	          clearTimeout(timeout);
	          timeout = null;
	        }
	        previous = _now;
	        result = func.apply(context, args);
	        if (!timeout) context = args = null;
	      } else if (!timeout && options.trailing !== false) {
	        timeout = setTimeout(later, remaining);
	      }
	      return result;
	    };

	    throttled.cancel = function() {
	      clearTimeout(timeout);
	      previous = 0;
	      timeout = context = args = null;
	    };

	    return throttled;
	  }

	  // Returns a function, that, as long as it continues to be invoked, will not
	  // be triggered. The function will be called after it stops being called for
	  // N milliseconds. If `immediate` is passed, trigger the function on the
	  // leading edge, instead of the trailing.
	  function debounce(func, wait, immediate) {
	    var timeout, result;

	    var later = function(context, args) {
	      timeout = null;
	      if (args) result = func.apply(context, args);
	    };

	    var debounced = restArguments(function(args) {
	      if (timeout) clearTimeout(timeout);
	      if (immediate) {
	        var callNow = !timeout;
	        timeout = setTimeout(later, wait);
	        if (callNow) result = func.apply(this, args);
	      } else {
	        timeout = delay(later, wait, this, args);
	      }

	      return result;
	    });

	    debounced.cancel = function() {
	      clearTimeout(timeout);
	      timeout = null;
	    };

	    return debounced;
	  }

	  // Returns the first function passed as an argument to the second,
	  // allowing you to adjust arguments, run code before and after, and
	  // conditionally execute the original function.
	  function wrap(func, wrapper) {
	    return partial(wrapper, func);
	  }

	  // Returns a negated version of the passed-in predicate.
	  function negate(predicate) {
	    return function() {
	      return !predicate.apply(this, arguments);
	    };
	  }

	  // Returns a function that is the composition of a list of functions, each
	  // consuming the return value of the function that follows.
	  function compose() {
	    var args = arguments;
	    var start = args.length - 1;
	    return function() {
	      var i = start;
	      var result = args[start].apply(this, arguments);
	      while (i--) result = args[i].call(this, result);
	      return result;
	    };
	  }

	  // Returns a function that will only be executed on and after the Nth call.
	  function after(times, func) {
	    return function() {
	      if (--times < 1) {
	        return func.apply(this, arguments);
	      }
	    };
	  }

	  // Returns a function that will only be executed up to (but not including) the Nth call.
	  function before(times, func) {
	    var memo;
	    return function() {
	      if (--times > 0) {
	        memo = func.apply(this, arguments);
	      }
	      if (times <= 1) func = null;
	      return memo;
	    };
	  }

	  // Returns a function that will be executed at most one time, no matter how
	  // often you call it. Useful for lazy initialization.
	  var once = partial(before, 2);

	  // Object Functions
	  // ----------------

	  // Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.
	  var hasEnumBug = !{toString: null}.propertyIsEnumerable('toString');
	  var nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString',
	    'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];

	  function collectNonEnumProps(obj, _keys) {
	    var nonEnumIdx = nonEnumerableProps.length;
	    var constructor = obj.constructor;
	    var proto = isFunction(constructor) && constructor.prototype || ObjProto;

	    // Constructor is a special case.
	    var prop = 'constructor';
	    if (_has(obj, prop) && !contains(_keys, prop)) _keys.push(prop);

	    while (nonEnumIdx--) {
	      prop = nonEnumerableProps[nonEnumIdx];
	      if (prop in obj && obj[prop] !== proto[prop] && !contains(_keys, prop)) {
	        _keys.push(prop);
	      }
	    }
	  }

	  // Retrieve the names of an object's own properties.
	  // Delegates to **ECMAScript 5**'s native `Object.keys`.
	  function keys(obj) {
	    if (!isObject(obj)) return [];
	    if (nativeKeys) return nativeKeys(obj);
	    var _keys = [];
	    for (var key in obj) if (_has(obj, key)) _keys.push(key);
	    // Ahem, IE < 9.
	    if (hasEnumBug) collectNonEnumProps(obj, _keys);
	    return _keys;
	  }

	  // Retrieve all the property names of an object.
	  function allKeys(obj) {
	    if (!isObject(obj)) return [];
	    var _keys = [];
	    for (var key in obj) _keys.push(key);
	    // Ahem, IE < 9.
	    if (hasEnumBug) collectNonEnumProps(obj, _keys);
	    return _keys;
	  }

	  // Retrieve the values of an object's properties.
	  function values(obj) {
	    var _keys = keys(obj);
	    var length = _keys.length;
	    var values = Array(length);
	    for (var i = 0; i < length; i++) {
	      values[i] = obj[_keys[i]];
	    }
	    return values;
	  }

	  // Returns the results of applying the iteratee to each element of the object.
	  // In contrast to map it returns an object.
	  function mapObject(obj, iteratee, context) {
	    iteratee = cb(iteratee, context);
	    var _keys = keys(obj),
	        length = _keys.length,
	        results = {};
	    for (var index = 0; index < length; index++) {
	      var currentKey = _keys[index];
	      results[currentKey] = iteratee(obj[currentKey], currentKey, obj);
	    }
	    return results;
	  }

	  // Convert an object into a list of `[key, value]` pairs.
	  // The opposite of object.
	  function pairs(obj) {
	    var _keys = keys(obj);
	    var length = _keys.length;
	    var pairs = Array(length);
	    for (var i = 0; i < length; i++) {
	      pairs[i] = [_keys[i], obj[_keys[i]]];
	    }
	    return pairs;
	  }

	  // Invert the keys and values of an object. The values must be serializable.
	  function invert(obj) {
	    var result = {};
	    var _keys = keys(obj);
	    for (var i = 0, length = _keys.length; i < length; i++) {
	      result[obj[_keys[i]]] = _keys[i];
	    }
	    return result;
	  }

	  // Return a sorted list of the function names available on the object.
	  function functions(obj) {
	    var names = [];
	    for (var key in obj) {
	      if (isFunction(obj[key])) names.push(key);
	    }
	    return names.sort();
	  }

	  // An internal function for creating assigner functions.
	  function createAssigner(keysFunc, defaults) {
	    return function(obj) {
	      var length = arguments.length;
	      if (defaults) obj = Object(obj);
	      if (length < 2 || obj == null) return obj;
	      for (var index = 1; index < length; index++) {
	        var source = arguments[index],
	            _keys = keysFunc(source),
	            l = _keys.length;
	        for (var i = 0; i < l; i++) {
	          var key = _keys[i];
	          if (!defaults || obj[key] === void 0) obj[key] = source[key];
	        }
	      }
	      return obj;
	    };
	  }

	  // Extend a given object with all the properties in passed-in object(s).
	  var extend = createAssigner(allKeys);

	  // Assigns a given object with all the own properties in the passed-in object(s).
	  // (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)
	  var extendOwn = createAssigner(keys);

	  // Returns the first key on an object that passes a predicate test.
	  function findKey(obj, predicate, context) {
	    predicate = cb(predicate, context);
	    var _keys = keys(obj), key;
	    for (var i = 0, length = _keys.length; i < length; i++) {
	      key = _keys[i];
	      if (predicate(obj[key], key, obj)) return key;
	    }
	  }

	  // Internal pick helper function to determine if `obj` has key `key`.
	  function keyInObj(value, key, obj) {
	    return key in obj;
	  }

	  // Return a copy of the object only containing the whitelisted properties.
	  var pick = restArguments(function(obj, _keys) {
	    var result = {}, iteratee = _keys[0];
	    if (obj == null) return result;
	    if (isFunction(iteratee)) {
	      if (_keys.length > 1) iteratee = optimizeCb(iteratee, _keys[1]);
	      _keys = allKeys(obj);
	    } else {
	      iteratee = keyInObj;
	      _keys = _flatten(_keys, false, false);
	      obj = Object(obj);
	    }
	    for (var i = 0, length = _keys.length; i < length; i++) {
	      var key = _keys[i];
	      var value = obj[key];
	      if (iteratee(value, key, obj)) result[key] = value;
	    }
	    return result;
	  });

	  // Return a copy of the object without the blacklisted properties.
	  var omit = restArguments(function(obj, _keys) {
	    var iteratee = _keys[0], context;
	    if (isFunction(iteratee)) {
	      iteratee = negate(iteratee);
	      if (_keys.length > 1) context = _keys[1];
	    } else {
	      _keys = map(_flatten(_keys, false, false), String);
	      iteratee = function(value, key) {
	        return !contains(_keys, key);
	      };
	    }
	    return pick(obj, iteratee, context);
	  });

	  // Fill in a given object with default properties.
	  var defaults = createAssigner(allKeys, true);

	  // Creates an object that inherits from the given prototype object.
	  // If additional properties are provided then they will be added to the
	  // created object.
	  function create(prototype, props) {
	    var result = baseCreate(prototype);
	    if (props) extendOwn(result, props);
	    return result;
	  }

	  // Create a (shallow-cloned) duplicate of an object.
	  function clone(obj) {
	    if (!isObject(obj)) return obj;
	    return isArray(obj) ? obj.slice() : extend({}, obj);
	  }

	  // Invokes interceptor with the obj, and then returns obj.
	  // The primary purpose of this method is to "tap into" a method chain, in
	  // order to perform operations on intermediate results within the chain.
	  function tap(obj, interceptor) {
	    interceptor(obj);
	    return obj;
	  }

	  // Returns whether an object has a given set of `key:value` pairs.
	  function isMatch(object, attrs) {
	    var _keys = keys(attrs), length = _keys.length;
	    if (object == null) return !length;
	    var obj = Object(object);
	    for (var i = 0; i < length; i++) {
	      var key = _keys[i];
	      if (attrs[key] !== obj[key] || !(key in obj)) return false;
	    }
	    return true;
	  }


	  // Internal recursive comparison function for `isEqual`.
	  function eq(a, b, aStack, bStack) {
	    // Identical objects are equal. `0 === -0`, but they aren't identical.
	    // See the [Harmony `egal` proposal](https://wiki.ecmascript.org/doku.php?id=harmony:egal).
	    if (a === b) return a !== 0 || 1 / a === 1 / b;
	    // `null` or `undefined` only equal to itself (strict comparison).
	    if (a == null || b == null) return false;
	    // `NaN`s are equivalent, but non-reflexive.
	    if (a !== a) return b !== b;
	    // Exhaust primitive checks
	    var type = typeof a;
	    if (type !== 'function' && type !== 'object' && typeof b != 'object') return false;
	    return deepEq(a, b, aStack, bStack);
	  }

	  // Internal recursive comparison function for `isEqual`.
	  function deepEq(a, b, aStack, bStack) {
	    // Unwrap any wrapped objects.
	    if (a instanceof _) a = a._wrapped;
	    if (b instanceof _) b = b._wrapped;
	    // Compare `[[Class]]` names.
	    var className = toString.call(a);
	    if (className !== toString.call(b)) return false;
	    switch (className) {
	      // Strings, numbers, regular expressions, dates, and booleans are compared by value.
	      case '[object RegExp]':
	      // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')
	      case '[object String]':
	        // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
	        // equivalent to `new String("5")`.
	        return '' + a === '' + b;
	      case '[object Number]':
	        // `NaN`s are equivalent, but non-reflexive.
	        // Object(NaN) is equivalent to NaN.
	        if (+a !== +a) return +b !== +b;
	        // An `egal` comparison is performed for other numeric values.
	        return +a === 0 ? 1 / +a === 1 / b : +a === +b;
	      case '[object Date]':
	      case '[object Boolean]':
	        // Coerce dates and booleans to numeric primitive values. Dates are compared by their
	        // millisecond representations. Note that invalid dates with millisecond representations
	        // of `NaN` are not equivalent.
	        return +a === +b;
	      case '[object Symbol]':
	        return SymbolProto.valueOf.call(a) === SymbolProto.valueOf.call(b);
	    }

	    var areArrays = className === '[object Array]';
	    if (!areArrays) {
	      if (typeof a != 'object' || typeof b != 'object') return false;

	      // Objects with different constructors are not equivalent, but `Object`s or `Array`s
	      // from different frames are.
	      var aCtor = a.constructor, bCtor = b.constructor;
	      if (aCtor !== bCtor && !(isFunction(aCtor) && aCtor instanceof aCtor &&
	                               isFunction(bCtor) && bCtor instanceof bCtor)
	                          && ('constructor' in a && 'constructor' in b)) {
	        return false;
	      }
	    }
	    // Assume equality for cyclic structures. The algorithm for detecting cyclic
	    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.

	    // Initializing stack of traversed objects.
	    // It's done here since we only need them for objects and arrays comparison.
	    aStack = aStack || [];
	    bStack = bStack || [];
	    var length = aStack.length;
	    while (length--) {
	      // Linear search. Performance is inversely proportional to the number of
	      // unique nested structures.
	      if (aStack[length] === a) return bStack[length] === b;
	    }

	    // Add the first object to the stack of traversed objects.
	    aStack.push(a);
	    bStack.push(b);

	    // Recursively compare objects and arrays.
	    if (areArrays) {
	      // Compare array lengths to determine if a deep comparison is necessary.
	      length = a.length;
	      if (length !== b.length) return false;
	      // Deep compare the contents, ignoring non-numeric properties.
	      while (length--) {
	        if (!eq(a[length], b[length], aStack, bStack)) return false;
	      }
	    } else {
	      // Deep compare objects.
	      var _keys = keys(a), key;
	      length = _keys.length;
	      // Ensure that both objects contain the same number of properties before comparing deep equality.
	      if (keys(b).length !== length) return false;
	      while (length--) {
	        // Deep compare each member
	        key = _keys[length];
	        if (!(_has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;
	      }
	    }
	    // Remove the first object from the stack of traversed objects.
	    aStack.pop();
	    bStack.pop();
	    return true;
	  }

	  // Perform a deep comparison to check if two objects are equal.
	  function isEqual(a, b) {
	    return eq(a, b);
	  }

	  // Is a given array, string, or object empty?
	  // An "empty" object has no enumerable own-properties.
	  function isEmpty(obj) {
	    if (obj == null) return true;
	    if (isArrayLike(obj) && (isArray(obj) || isString(obj) || isArguments(obj))) return obj.length === 0;
	    return keys(obj).length === 0;
	  }

	  // Is a given value a DOM element?
	  function isElement(obj) {
	    return !!(obj && obj.nodeType === 1);
	  }

	  // Internal function for creating a toString-based type tester.
	  function tagTester(name) {
	    return function(obj) {
	      return toString.call(obj) === '[object ' + name + ']';
	    };
	  }

	  // Is a given value an array?
	  // Delegates to ECMA5's native Array.isArray
	  var isArray = nativeIsArray || tagTester('Array');

	  // Is a given variable an object?
	  function isObject(obj) {
	    var type = typeof obj;
	    return type === 'function' || type === 'object' && !!obj;
	  }

	  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp, isError, isMap, isWeakMap, isSet, isWeakSet.
	  var isArguments = tagTester('Arguments');
	  var isFunction = tagTester('Function');
	  var isString = tagTester('String');
	  var isNumber = tagTester('Number');
	  var isDate = tagTester('Date');
	  var isRegExp = tagTester('RegExp');
	  var isError = tagTester('Error');
	  var isSymbol = tagTester('Symbol');
	  var isMap = tagTester('Map');
	  var isWeakMap = tagTester('WeakMap');
	  var isSet = tagTester('Set');
	  var isWeakSet = tagTester('WeakSet');

	  // Define a fallback version of the method in browsers (ahem, IE < 9), where
	  // there isn't any inspectable "Arguments" type.
	  (function() {
	    if (!isArguments(arguments)) {
	      isArguments = function(obj) {
	        return _has(obj, 'callee');
	      };
	    }
	  }());

	  // Optimize `isFunction` if appropriate. Work around some typeof bugs in old v8,
	  // IE 11 (#1621), Safari 8 (#1929), and PhantomJS (#2236).
	  var nodelist = root.document && root.document.childNodes;
	  if (typeof /./ != 'function' && typeof Int8Array != 'object' && typeof nodelist != 'function') {
	    isFunction = function(obj) {
	      return typeof obj == 'function' || false;
	    };
	  }

	  // Is a given object a finite number?
	  function isFinite(obj) {
	    return !isSymbol(obj) && _isFinite(obj) && !_isNaN(parseFloat(obj));
	  }

	  // Is the given value `NaN`?
	  function isNaN(obj) {
	    return isNumber(obj) && _isNaN(obj);
	  }

	  // Is a given value a boolean?
	  function isBoolean(obj) {
	    return obj === true || obj === false || toString.call(obj) === '[object Boolean]';
	  }

	  // Is a given value equal to null?
	  function isNull(obj) {
	    return obj === null;
	  }

	  // Is a given variable undefined?
	  function isUndefined(obj) {
	    return obj === void 0;
	  }

	  // Shortcut function for checking if an object has a given property directly
	  // on itself (in other words, not on a prototype).
	  function has(obj, path) {
	    if (!isArray(path)) {
	      return _has(obj, path);
	    }
	    var length = path.length;
	    for (var i = 0; i < length; i++) {
	      var key = path[i];
	      if (obj == null || !hasOwnProperty.call(obj, key)) {
	        return false;
	      }
	      obj = obj[key];
	    }
	    return !!length;
	  }

	  // Utility Functions
	  // -----------------

	  // Keep the identity function around for default iteratees.
	  function identity(value) {
	    return value;
	  }

	  // Predicate-generating functions. Often useful outside of Underscore.
	  function constant(value) {
	    return function() {
	      return value;
	    };
	  }

	  function noop(){}

	  // Creates a function that, when passed an object, will traverse that object’s
	  // properties down the given `path`, specified as an array of keys or indexes.
	  function property(path) {
	    if (!isArray(path)) {
	      return shallowProperty(path);
	    }
	    return function(obj) {
	      return deepGet(obj, path);
	    };
	  }

	  // Generates a function for a given object that returns a given property.
	  function propertyOf(obj) {
	    if (obj == null) {
	      return function(){};
	    }
	    return function(path) {
	      return !isArray(path) ? obj[path] : deepGet(obj, path);
	    };
	  }

	  // Returns a predicate for checking whether an object has a given set of
	  // `key:value` pairs.
	  function matcher(attrs) {
	    attrs = extendOwn({}, attrs);
	    return function(obj) {
	      return isMatch(obj, attrs);
	    };
	  }

	  // Run a function **n** times.
	  function times(n, iteratee, context) {
	    var accum = Array(Math.max(0, n));
	    iteratee = optimizeCb(iteratee, context, 1);
	    for (var i = 0; i < n; i++) accum[i] = iteratee(i);
	    return accum;
	  }

	  // Return a random integer between min and max (inclusive).
	  function random(min, max) {
	    if (max == null) {
	      max = min;
	      min = 0;
	    }
	    return min + Math.floor(Math.random() * (max - min + 1));
	  }

	  // A (possibly faster) way to get the current timestamp as an integer.
	  var now = Date.now || function() {
	    return new Date().getTime();
	  };

	  // List of HTML entities for escaping.
	  var escapeMap = {
	    '&': '&amp;',
	    '<': '&lt;',
	    '>': '&gt;',
	    '"': '&quot;',
	    "'": '&#x27;',
	    '`': '&#x60;'
	  };
	  var unescapeMap = invert(escapeMap);

	  // Functions for escaping and unescaping strings to/from HTML interpolation.
	  function createEscaper(map) {
	    var escaper = function(match) {
	      return map[match];
	    };
	    // Regexes for identifying a key that needs to be escaped.
	    var source = '(?:' + keys(map).join('|') + ')';
	    var testRegexp = RegExp(source);
	    var replaceRegexp = RegExp(source, 'g');
	    return function(string) {
	      string = string == null ? '' : '' + string;
	      return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;
	    };
	  }
	  var escape = createEscaper(escapeMap);
	  var unescape = createEscaper(unescapeMap);

	  // Traverses the children of `obj` along `path`. If a child is a function, it
	  // is invoked with its parent as context. Returns the value of the final
	  // child, or `fallback` if any child is undefined.
	  function result(obj, path, fallback) {
	    if (!isArray(path)) path = [path];
	    var length = path.length;
	    if (!length) {
	      return isFunction(fallback) ? fallback.call(obj) : fallback;
	    }
	    for (var i = 0; i < length; i++) {
	      var prop = obj == null ? void 0 : obj[path[i]];
	      if (prop === void 0) {
	        prop = fallback;
	        i = length; // Ensure we don't continue iterating.
	      }
	      obj = isFunction(prop) ? prop.call(obj) : prop;
	    }
	    return obj;
	  }

	  // Generate a unique integer id (unique within the entire client session).
	  // Useful for temporary DOM ids.
	  var idCounter = 0;
	  function uniqueId(prefix) {
	    var id = ++idCounter + '';
	    return prefix ? prefix + id : id;
	  }

	  // By default, Underscore uses ERB-style template delimiters, change the
	  // following template settings to use alternative delimiters.
	  var templateSettings = _.templateSettings = {
	    evaluate: /<%([\s\S]+?)%>/g,
	    interpolate: /<%=([\s\S]+?)%>/g,
	    escape: /<%-([\s\S]+?)%>/g
	  };

	  // When customizing `templateSettings`, if you don't want to define an
	  // interpolation, evaluation or escaping regex, we need one that is
	  // guaranteed not to match.
	  var noMatch = /(.)^/;

	  // Certain characters need to be escaped so that they can be put into a
	  // string literal.
	  var escapes = {
	    "'": "'",
	    '\\': '\\',
	    '\r': 'r',
	    '\n': 'n',
	    '\u2028': 'u2028',
	    '\u2029': 'u2029'
	  };

	  var escapeRegExp = /\\|'|\r|\n|\u2028|\u2029/g;

	  var escapeChar = function(match) {
	    return '\\' + escapes[match];
	  };

	  // JavaScript micro-templating, similar to John Resig's implementation.
	  // Underscore templating handles arbitrary delimiters, preserves whitespace,
	  // and correctly escapes quotes within interpolated code.
	  // NB: `oldSettings` only exists for backwards compatibility.
	  function template(text, settings, oldSettings) {
	    if (!settings && oldSettings) settings = oldSettings;
	    settings = defaults({}, settings, _.templateSettings);

	    // Combine delimiters into one regular expression via alternation.
	    var matcher = RegExp([
	      (settings.escape || noMatch).source,
	      (settings.interpolate || noMatch).source,
	      (settings.evaluate || noMatch).source
	    ].join('|') + '|$', 'g');

	    // Compile the template source, escaping string literals appropriately.
	    var index = 0;
	    var source = "__p+='";
	    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
	      source += text.slice(index, offset).replace(escapeRegExp, escapeChar);
	      index = offset + match.length;

	      if (escape) {
	        source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
	      } else if (interpolate) {
	        source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
	      } else if (evaluate) {
	        source += "';\n" + evaluate + "\n__p+='";
	      }

	      // Adobe VMs need the match returned to produce the correct offset.
	      return match;
	    });
	    source += "';\n";

	    // If a variable is not specified, place data values in local scope.
	    if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';

	    source = "var __t,__p='',__j=Array.prototype.join," +
	      "print=function(){__p+=__j.call(arguments,'');};\n" +
	      source + 'return __p;\n';

	    var render;
	    try {
	      render = new Function(settings.variable || 'obj', '_', source);
	    } catch (e) {
	      e.source = source;
	      throw e;
	    }

	    var template = function(data) {
	      return render.call(this, data, _);
	    };

	    // Provide the compiled source as a convenience for precompilation.
	    var argument = settings.variable || 'obj';
	    template.source = 'function(' + argument + '){\n' + source + '}';

	    return template;
	  }

	  // Add a "chain" function. Start chaining a wrapped Underscore object.
	  function chain(obj) {
	    var instance = _(obj);
	    instance._chain = true;
	    return instance;
	  }

	  // OOP
	  // ---------------
	  // If Underscore is called as a function, it returns a wrapped object that
	  // can be used OO-style. This wrapper holds altered versions of all the
	  // underscore functions. Wrapped objects may be chained.

	  // Helper function to continue chaining intermediate results.
	  function chainResult(instance, obj) {
	    return instance._chain ? _(obj).chain() : obj;
	  }

	  // Add your own custom functions to the Underscore object.
	  function mixin(obj) {
	    each(functions(obj), function(name) {
	      var func = _[name] = obj[name];
	      _.prototype[name] = function() {
	        var args = [this._wrapped];
	        push.apply(args, arguments);
	        return chainResult(this, func.apply(_, args));
	      };
	    });
	    return _;
	  }

	  // Add all mutator Array functions to the wrapper.
	  each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {
	    var method = ArrayProto[name];
	    _.prototype[name] = function() {
	      var obj = this._wrapped;
	      method.apply(obj, arguments);
	      if ((name === 'shift' || name === 'splice') && obj.length === 0) delete obj[0];
	      return chainResult(this, obj);
	    };
	  });

	  // Add all accessor Array functions to the wrapper.
	  each(['concat', 'join', 'slice'], function(name) {
	    var method = ArrayProto[name];
	    _.prototype[name] = function() {
	      return chainResult(this, method.apply(this._wrapped, arguments));
	    };
	  });

	  // Extracts the result from a wrapped and chained object.
	  _.prototype.value = function() {
	    return this._wrapped;
	  };

	  // Provide unwrapping proxy for some methods used in engine operations
	  // such as arithmetic and JSON stringification.
	  _.prototype.valueOf = _.prototype.toJSON = _.prototype.value;

	  _.prototype.toString = function() {
	    return String(this._wrapped);
	  };

	  var allExports = ({
	    'default': _,
	    VERSION: VERSION,
	    iteratee: iteratee,
	    restArguments: restArguments,
	    each: each,
	    forEach: each,
	    map: map,
	    collect: map,
	    reduce: reduce,
	    foldl: reduce,
	    inject: reduce,
	    reduceRight: reduceRight,
	    foldr: reduceRight,
	    find: find,
	    detect: find,
	    filter: filter,
	    select: filter,
	    reject: reject,
	    every: every,
	    all: every,
	    some: some,
	    any: some,
	    contains: contains,
	    includes: contains,
	    include: contains,
	    invoke: invoke,
	    pluck: pluck,
	    where: where,
	    findWhere: findWhere,
	    max: max,
	    min: min,
	    shuffle: shuffle,
	    sample: sample,
	    sortBy: sortBy,
	    groupBy: groupBy,
	    indexBy: indexBy,
	    countBy: countBy,
	    toArray: toArray,
	    size: size,
	    partition: partition,
	    first: first,
	    head: first,
	    take: first,
	    initial: initial,
	    last: last,
	    rest: rest,
	    tail: rest,
	    drop: rest,
	    compact: compact,
	    flatten: flatten,
	    without: without,
	    uniq: uniq,
	    unique: uniq,
	    union: union,
	    intersection: intersection,
	    difference: difference,
	    unzip: unzip,
	    zip: zip,
	    object: object,
	    findIndex: findIndex,
	    findLastIndex: findLastIndex,
	    sortedIndex: sortedIndex,
	    indexOf: indexOf,
	    lastIndexOf: lastIndexOf,
	    range: range,
	    chunk: chunk,
	    bind: bind,
	    partial: partial,
	    bindAll: bindAll,
	    memoize: memoize,
	    delay: delay,
	    defer: defer,
	    throttle: throttle,
	    debounce: debounce,
	    wrap: wrap,
	    negate: negate,
	    compose: compose,
	    after: after,
	    before: before,
	    once: once,
	    keys: keys,
	    allKeys: allKeys,
	    values: values,
	    mapObject: mapObject,
	    pairs: pairs,
	    invert: invert,
	    functions: functions,
	    methods: functions,
	    extend: extend,
	    extendOwn: extendOwn,
	    assign: extendOwn,
	    findKey: findKey,
	    pick: pick,
	    omit: omit,
	    defaults: defaults,
	    create: create,
	    clone: clone,
	    tap: tap,
	    isMatch: isMatch,
	    isEqual: isEqual,
	    isEmpty: isEmpty,
	    isElement: isElement,
	    isArray: isArray,
	    isObject: isObject,
	    isArguments: isArguments,
	    isFunction: isFunction,
	    isString: isString,
	    isNumber: isNumber,
	    isDate: isDate,
	    isRegExp: isRegExp,
	    isError: isError,
	    isSymbol: isSymbol,
	    isMap: isMap,
	    isWeakMap: isWeakMap,
	    isSet: isSet,
	    isWeakSet: isWeakSet,
	    isFinite: isFinite,
	    isNaN: isNaN,
	    isBoolean: isBoolean,
	    isNull: isNull,
	    isUndefined: isUndefined,
	    has: has,
	    identity: identity,
	    constant: constant,
	    noop: noop,
	    property: property,
	    propertyOf: propertyOf,
	    matcher: matcher,
	    matches: matcher,
	    times: times,
	    random: random,
	    now: now,
	    escape: escape,
	    unescape: unescape,
	    result: result,
	    uniqueId: uniqueId,
	    templateSettings: templateSettings,
	    template: template,
	    chain: chain,
	    mixin: mixin
	  });

	  // Add all of the Underscore functions to the wrapper object.
	  var _$1 = mixin(allExports);
	  // Legacy Node.js API
	  _$1._ = _$1;

	  return _$1;

	})));
	//# sourceMappingURL=underscore.js.map

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 310 */
/***/ (function(module, exports, __webpack_require__) {

	(function webpackUniversalModuleDefinition(root, factory) {
		if(true)
			module.exports = factory(__webpack_require__(311));
		else if(typeof define === 'function' && define.amd)
			define(["klayjs"], factory);
		else if(typeof exports === 'object')
			exports["cytoscapeKlay"] = factory(require("klayjs"));
		else
			root["cytoscapeKlay"] = factory(root["$klay"]);
	})(this, function(__WEBPACK_EXTERNAL_MODULE_4__) {
	return /******/ (function(modules) { // webpackBootstrap
	/******/ 	// The module cache
	/******/ 	var installedModules = {};
	/******/
	/******/ 	// The require function
	/******/ 	function __webpack_require__(moduleId) {
	/******/
	/******/ 		// Check if module is in cache
	/******/ 		if(installedModules[moduleId]) {
	/******/ 			return installedModules[moduleId].exports;
	/******/ 		}
	/******/ 		// Create a new module (and put it into the cache)
	/******/ 		var module = installedModules[moduleId] = {
	/******/ 			i: moduleId,
	/******/ 			l: false,
	/******/ 			exports: {}
	/******/ 		};
	/******/
	/******/ 		// Execute the module function
	/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
	/******/
	/******/ 		// Flag the module as loaded
	/******/ 		module.l = true;
	/******/
	/******/ 		// Return the exports of the module
	/******/ 		return module.exports;
	/******/ 	}
	/******/
	/******/
	/******/ 	// expose the modules object (__webpack_modules__)
	/******/ 	__webpack_require__.m = modules;
	/******/
	/******/ 	// expose the module cache
	/******/ 	__webpack_require__.c = installedModules;
	/******/
	/******/ 	// identity function for calling harmony imports with the correct context
	/******/ 	__webpack_require__.i = function(value) { return value; };
	/******/
	/******/ 	// define getter function for harmony exports
	/******/ 	__webpack_require__.d = function(exports, name, getter) {
	/******/ 		if(!__webpack_require__.o(exports, name)) {
	/******/ 			Object.defineProperty(exports, name, {
	/******/ 				configurable: false,
	/******/ 				enumerable: true,
	/******/ 				get: getter
	/******/ 			});
	/******/ 		}
	/******/ 	};
	/******/
	/******/ 	// getDefaultExport function for compatibility with non-harmony modules
	/******/ 	__webpack_require__.n = function(module) {
	/******/ 		var getter = module && module.__esModule ?
	/******/ 			function getDefault() { return module['default']; } :
	/******/ 			function getModuleExports() { return module; };
	/******/ 		__webpack_require__.d(getter, 'a', getter);
	/******/ 		return getter;
	/******/ 	};
	/******/
	/******/ 	// Object.prototype.hasOwnProperty.call
	/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
	/******/
	/******/ 	// __webpack_public_path__
	/******/ 	__webpack_require__.p = "";
	/******/
	/******/ 	// Load entry module and return exports
	/******/ 	return __webpack_require__(__webpack_require__.s = 3);
	/******/ })
	/************************************************************************/
	/******/ ([
	/* 0 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	var klay = __webpack_require__(4);
	var assign = __webpack_require__(1);
	var defaults = __webpack_require__(2);

	var klayNSLookup = {
	  'addUnnecessaryBendpoints': 'de.cau.cs.kieler.klay.layered.unnecessaryBendpoints',
	  'alignment': 'de.cau.cs.kieler.alignment',
	  'aspectRatio': 'de.cau.cs.kieler.aspectRatio',
	  'borderSpacing': 'borderSpacing',
	  'compactComponents': 'de.cau.cs.kieler.klay.layered.components.compact',
	  'compactionStrategy': 'de.cau.cs.kieler.klay.layered.nodeplace.compactionStrategy',
	  'contentAlignment': 'de.cau.cs.kieler.klay.layered.contentAlignment',
	  'crossingMinimization': 'de.cau.cs.kieler.klay.layered.crossMin',
	  'cycleBreaking': 'de.cau.cs.kieler.klay.layered.cycleBreaking',
	  'debugMode': 'de.cau.cs.kieler.debugMode',
	  'direction': 'de.cau.cs.kieler.direction',
	  'edgeLabelSideSelection': 'de.cau.cs.kieler.klay.layered.edgeLabelSideSelection',
	  // <broken> 'de.cau.cs.kieler.klay.layered.edgeNodeSpacingFactor': options.edgeNodeSpacingFactor,
	  'edgeRouting': 'de.cau.cs.kieler.edgeRouting',
	  'edgeSpacingFactor': 'de.cau.cs.kieler.klay.layered.edgeSpacingFactor',
	  'feedbackEdges': 'de.cau.cs.kieler.klay.layered.feedBackEdges',
	  'fixedAlignment': 'de.cau.cs.kieler.klay.layered.fixedAlignment',
	  'greedySwitchCrossingMinimization': 'de.cau.cs.kieler.klay.layered.greedySwitch',
	  'hierarchyHandling': 'de.cau.cs.kieler.hierarchyHandling',
	  'inLayerSpacingFactor': 'de.cau.cs.kieler.klay.layered.inLayerSpacingFactor',
	  'interactiveReferencePoint': 'de.cau.cs.kieler.klay.layered.interactiveReferencePoint',
	  'layerConstraint': 'de.cau.cs.kieler.klay.layered.layerConstraint',
	  'layoutHierarchy': 'de.cau.cs.kieler.layoutHierarchy',
	  'linearSegmentsDeflectionDampening': 'de.cau.cs.kieler.klay.layered.linearSegmentsDeflectionDampening',
	  'mergeEdges': 'de.cau.cs.kieler.klay.layered.mergeEdges',
	  'mergeHierarchyCrossingEdges': 'de.cau.cs.kieler.klay.layered.mergeHierarchyEdges',
	  'noLayout': 'de.cau.cs.kieler.noLayout',
	  'nodeLabelPlacement': 'de.cau.cs.kieler.nodeLabelPlacement',
	  'nodeLayering': 'de.cau.cs.kieler.klay.layered.nodeLayering',
	  'nodePlacement': 'de.cau.cs.kieler.klay.layered.nodePlace',
	  'portAlignment': 'de.cau.cs.kieler.portAlignment',
	  'portAlignmentEastern': 'de.cau.cs.kieler.portAlignment.east',
	  'portAlignmentNorth': 'de.cau.cs.kieler.portAlignment.north',
	  'portAlignmentSouth': 'de.cau.cs.kieler.portAlignment.south',
	  'portAlignmentWest': 'de.cau.cs.kieler.portAlignment.west',
	  'portConstraints': 'de.cau.cs.kieler.portConstraints',
	  'portLabelPlacement': 'de.cau.cs.kieler.portLabelPlacement',
	  'portOffset': 'de.cau.cs.kieler.offset',
	  'portSide': 'de.cau.cs.kieler.portSide',
	  'portSpacing': 'de.cau.cs.kieler.portSpacing',
	  'postCompaction': 'de.cau.cs.kieler.klay.layered.postCompaction',
	  'priority': 'de.cau.cs.kieler.priority',
	  'randomizationSeed': 'de.cau.cs.kieler.randomSeed',
	  'routeSelfLoopInside': 'de.cau.cs.kieler.selfLoopInside',
	  'separateConnectedComponents': 'de.cau.cs.kieler.separateConnComp',
	  'sizeConstraint': 'de.cau.cs.kieler.sizeConstraint',
	  'sizeOptions': 'de.cau.cs.kieler.sizeOptions',
	  'spacing': 'de.cau.cs.kieler.spacing',
	  'splineSelfLoopPlacement': 'de.cau.cs.kieler.klay.layered.splines.selfLoopPlacement',
	  'thoroughness': 'de.cau.cs.kieler.klay.layered.thoroughness',
	  'wideNodesOnMultipleLayers': 'de.cau.cs.kieler.klay.layered.wideNodesOnMultipleLayers'
	};

	var mapToKlayNS = function mapToKlayNS(klayOpts) {
	  var keys = Object.keys(klayOpts);
	  var ret = {};

	  for (var i = 0; i < keys.length; i++) {
	    var key = keys[i];
	    var nsKey = klayNSLookup[key];
	    var val = klayOpts[key];

	    ret[nsKey] = val;
	  }

	  return ret;
	};

	var klayOverrides = {
	  interactiveReferencePoint: 'CENTER' // Determines which point of a node is considered by interactive layout phases.
	};

	var getPos = function getPos(ele) {
	  var parent = ele.parent();
	  var k = ele.scratch('klay');
	  var p = {
	    x: k.x,
	    y: k.y
	  };

	  if (parent.nonempty()) {
	    var kp = parent.scratch('klay');

	    p.x += kp.x;
	    p.y += kp.y;
	  }

	  return p;
	};

	var makeNode = function makeNode(node, options) {
	  var dims = node.layoutDimensions(options);
	  var padding = node.numericStyle('padding');

	  var k = {
	    _cyEle: node,
	    id: node.id(),
	    padding: {
	      top: padding,
	      left: padding,
	      bottom: padding,
	      right: padding
	    }
	  };

	  if (!node.isParent()) {
	    k.width = dims.w;
	    k.height = dims.h;
	  }

	  node.scratch('klay', k);

	  return k;
	};

	var makeEdge = function makeEdge(edge, options) {
	  var k = {
	    _cyEle: edge,
	    id: edge.id(),
	    source: edge.data('source'),
	    target: edge.data('target'),
	    properties: {}
	  };

	  var priority = options.priority(edge);

	  if (priority != null) {
	    k.properties.priority = priority;
	  }

	  edge.scratch('klay', k);

	  return k;
	};

	var makeGraph = function makeGraph(nodes, edges, options) {
	  var klayNodes = [];
	  var klayEdges = [];
	  var klayEleLookup = {};
	  var graph = {
	    id: 'root',
	    children: [],
	    edges: []
	  };

	  // map all nodes
	  for (var i = 0; i < nodes.length; i++) {
	    var n = nodes[i];
	    var k = makeNode(n, options);

	    klayNodes.push(k);

	    klayEleLookup[n.id()] = k;
	  }

	  // map all edges
	  for (var _i = 0; _i < edges.length; _i++) {
	    var e = edges[_i];
	    var _k = makeEdge(e, options);

	    klayEdges.push(_k);

	    klayEleLookup[e.id()] = _k;
	  }

	  // make hierarchy
	  for (var _i2 = 0; _i2 < klayNodes.length; _i2++) {
	    var _k2 = klayNodes[_i2];
	    var _n = _k2._cyEle;

	    if (!_n.isChild()) {
	      graph.children.push(_k2);
	    } else {
	      var parent = _n.parent();
	      var parentK = klayEleLookup[parent.id()];

	      var children = parentK.children = parentK.children || [];

	      children.push(_k2);
	    }
	  }

	  for (var _i3 = 0; _i3 < klayEdges.length; _i3++) {
	    var _k3 = klayEdges[_i3];
	    var _e = _k3._cyEle;
	    var parentSrc = _e.source().parent();
	    var parentTgt = _e.target().parent();

	    // put all edges in the top level for now
	    // TODO does this cause issues in certain edgecases?
	    if (false) {
	      var kp = klayEleLookup[parentSrc.id()];

	      kp.edges = kp.edges || [];

	      kp.edges.push(_k3);
	    } else {
	      graph.edges.push(_k3);
	    }
	  }

	  return graph;
	};

	function Layout(options) {
	  var klayOptions = options.klay;

	  this.options = assign({}, defaults, options);

	  this.options.klay = assign({}, defaults.klay, klayOptions, klayOverrides);
	}

	Layout.prototype.run = function () {
	  var layout = this;
	  var options = this.options;

	  var eles = options.eles;
	  var nodes = eles.nodes();
	  var edges = eles.edges();

	  var graph = makeGraph(nodes, edges, options);

	  klay.layout({
	    graph: graph,
	    options: mapToKlayNS(options.klay),
	    success: function success() {},
	    error: function error(_error) {
	      throw _error;
	    }
	  });

	  nodes.filter(function (n) {
	    return !n.isParent();
	  }).layoutPositions(layout, options, getPos);

	  return this;
	};

	Layout.prototype.stop = function () {
	  return this; // chaining
	};

	Layout.prototype.destroy = function () {
	  return this; // chaining
	};

	module.exports = Layout;

	/***/ }),
	/* 1 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	// Simple, internal Object.assign() polyfill for options objects etc.

	module.exports = Object.assign != null ? Object.assign.bind(Object) : function (tgt) {
	  for (var _len = arguments.length, srcs = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	    srcs[_key - 1] = arguments[_key];
	  }

	  srcs.filter(function (src) {
	    return src != null;
	  }).forEach(function (src) {
	    Object.keys(src).forEach(function (k) {
	      return tgt[k] = src[k];
	    });
	  });

	  return tgt;
	};

	/***/ }),
	/* 2 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	var defaults = {
	  nodeDimensionsIncludeLabels: false, // Boolean which changes whether label dimensions are included when calculating node dimensions
	  fit: true, // Whether to fit
	  padding: 20, // Padding on fit
	  animate: false, // Whether to transition the node positions
	  animateFilter: function animateFilter(node, i) {
	    return true;
	  }, // Whether to animate specific nodes when animation is on; non-animated nodes immediately go to their final positions
	  animationDuration: 500, // Duration of animation in ms if enabled
	  animationEasing: undefined, // Easing of animation if enabled
	  transform: function transform(node, pos) {
	    return pos;
	  }, // A function that applies a transform to the final node position
	  ready: undefined, // Callback on layoutready
	  stop: undefined, // Callback on layoutstop
	  klay: {
	    // Following descriptions taken from http://layout.rtsys.informatik.uni-kiel.de:9444/Providedlayout.html?algorithm=de.cau.cs.kieler.klay.layered
	    addUnnecessaryBendpoints: false, // Adds bend points even if an edge does not change direction.
	    aspectRatio: 1.6, // The aimed aspect ratio of the drawing, that is the quotient of width by height
	    borderSpacing: 20, // Minimal amount of space to be left to the border
	    compactComponents: false, // Tries to further compact components (disconnected sub-graphs).
	    crossingMinimization: 'LAYER_SWEEP', // Strategy for crossing minimization.
	    /* LAYER_SWEEP The layer sweep algorithm iterates multiple times over the layers, trying to find node orderings that minimize the number of crossings. The algorithm uses randomization to increase the odds of finding a good result. To improve its results, consider increasing the Thoroughness option, which influences the number of iterations done. The Randomization seed also influences results.
	    INTERACTIVE Orders the nodes of each layer by comparing their positions before the layout algorithm was started. The idea is that the relative order of nodes as it was before layout was applied is not changed. This of course requires valid positions for all nodes to have been set on the input graph before calling the layout algorithm. The interactive layer sweep algorithm uses the Interactive Reference Point option to determine which reference point of nodes are used to compare positions. */
	    cycleBreaking: 'GREEDY', // Strategy for cycle breaking. Cycle breaking looks for cycles in the graph and determines which edges to reverse to break the cycles. Reversed edges will end up pointing to the opposite direction of regular edges (that is, reversed edges will point left if edges usually point right).
	    /* GREEDY This algorithm reverses edges greedily. The algorithm tries to avoid edges that have the Priority property set.
	    INTERACTIVE The interactive algorithm tries to reverse edges that already pointed leftwards in the input graph. This requires node and port coordinates to have been set to sensible values.*/
	    direction: 'UNDEFINED', // Overall direction of edges: horizontal (right / left) or vertical (down / up)
	    /* UNDEFINED, RIGHT, LEFT, DOWN, UP */
	    edgeRouting: 'ORTHOGONAL', // Defines how edges are routed (POLYLINE, ORTHOGONAL, SPLINES)
	    edgeSpacingFactor: 0.5, // Factor by which the object spacing is multiplied to arrive at the minimal spacing between edges.
	    feedbackEdges: false, // Whether feedback edges should be highlighted by routing around the nodes.
	    fixedAlignment: 'NONE', // Tells the BK node placer to use a certain alignment instead of taking the optimal result.  This option should usually be left alone.
	    /* NONE Chooses the smallest layout from the four possible candidates.
	    LEFTUP Chooses the left-up candidate from the four possible candidates.
	    RIGHTUP Chooses the right-up candidate from the four possible candidates.
	    LEFTDOWN Chooses the left-down candidate from the four possible candidates.
	    RIGHTDOWN Chooses the right-down candidate from the four possible candidates.
	    BALANCED Creates a balanced layout from the four possible candidates. */
	    inLayerSpacingFactor: 1.0, // Factor by which the usual spacing is multiplied to determine the in-layer spacing between objects.
	    layoutHierarchy: false, // Whether the selected layouter should consider the full hierarchy
	    linearSegmentsDeflectionDampening: 0.3, // Dampens the movement of nodes to keep the diagram from getting too large.
	    mergeEdges: false, // Edges that have no ports are merged so they touch the connected nodes at the same points.
	    mergeHierarchyCrossingEdges: true, // If hierarchical layout is active, hierarchy-crossing edges use as few hierarchical ports as possible.
	    nodeLayering: 'NETWORK_SIMPLEX', // Strategy for node layering.
	    /* NETWORK_SIMPLEX This algorithm tries to minimize the length of edges. This is the most computationally intensive algorithm. The number of iterations after which it aborts if it hasn't found a result yet can be set with the Maximal Iterations option.
	    LONGEST_PATH A very simple algorithm that distributes nodes along their longest path to a sink node.
	    INTERACTIVE Distributes the nodes into layers by comparing their positions before the layout algorithm was started. The idea is that the relative horizontal order of nodes as it was before layout was applied is not changed. This of course requires valid positions for all nodes to have been set on the input graph before calling the layout algorithm. The interactive node layering algorithm uses the Interactive Reference Point option to determine which reference point of nodes are used to compare positions. */
	    nodePlacement: 'BRANDES_KOEPF', // Strategy for Node Placement
	    /* BRANDES_KOEPF Minimizes the number of edge bends at the expense of diagram size: diagrams drawn with this algorithm are usually higher than diagrams drawn with other algorithms.
	    LINEAR_SEGMENTS Computes a balanced placement.
	    INTERACTIVE Tries to keep the preset y coordinates of nodes from the original layout. For dummy nodes, a guess is made to infer their coordinates. Requires the other interactive phase implementations to have run as well.
	    SIMPLE Minimizes the area at the expense of... well, pretty much everything else. */
	    randomizationSeed: 1, // Seed used for pseudo-random number generators to control the layout algorithm; 0 means a new seed is generated
	    routeSelfLoopInside: false, // Whether a self-loop is routed around or inside its node.
	    separateConnectedComponents: true, // Whether each connected component should be processed separately
	    spacing: 20, // Overall setting for the minimal amount of space to be left between objects
	    thoroughness: 7 // How much effort should be spent to produce a nice layout..
	  },
	  priority: function priority(edge) {
	    return null;
	  } // Edges with a non-nil value are skipped when geedy edge cycle breaking is enabled
	};

	module.exports = defaults;

	/***/ }),
	/* 3 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	var impl = __webpack_require__(0);

	// registers the extension on a cytoscape lib ref
	var register = function register(cytoscape) {
	  if (!cytoscape) {
	    return;
	  } // can't register if cytoscape unspecified

	  cytoscape('layout', 'klay', impl); // register with cytoscape.js
	};

	if (typeof cytoscape !== 'undefined') {
	  // expose to global cytoscape (i.e. window.cytoscape)
	  register(cytoscape);
	}

	module.exports = register;

	/***/ }),
	/* 4 */
	/***/ (function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_4__;

	/***/ })
	/******/ ]);
	});

/***/ }),
/* 311 */
/***/ (function(module, exports) {

	/** klay.js version 0.4.1 build 201604131004 */
	var klayregister;
	var klaycallback;
	(function(){
	var $wnd, $doc;if(typeof(window) !== 'undefined'){ $wnd = window; $doc = $wnd.document; }
	else { $wnd = { Array: function(){} }; }
	function kI(){}
	function iI(){}
	function pb(){}
	function Ab(){}
	function Tt(){}
	function Jt(){}
	function Jq(){}
	function Vq(){}
	function Vs(){}
	function yl(){}
	function Yl(){}
	function gm(){}
	function Cu(){}
	function tJ(){}
	function NJ(){}
	function PJ(){}
	function PS(){}
	function sS(){}
	function yS(){}
	function AS(){}
	function MS(){}
	function RS(){}
	function TS(){}
	function lR(){}
	function HR(){}
	function IR(){}
	function KR(){}
	function WR(){}
	function AT(){}
	function FT(){}
	function HT(){}
	function JT(){}
	function LT(){}
	function NT(){}
	function sU(){}
	function uV(){}
	function xV(){}
	function EV(){}
	function HW(){}
	function UX(){}
	function XX(){}
	function ZX(){}
	function _X(){}
	function bY(){}
	function dY(){}
	function wY(){}
	function zY(){}
	function SY(){}
	function VY(){}
	function qZ(){}
	function tZ(){}
	function wZ(){}
	function AZ(){}
	function d$(){}
	function g$(){}
	function j$(){}
	function w$(){}
	function z$(){}
	function C$(){}
	function F$(){}
	function I$(){}
	function L$(){}
	function N$(){}
	function R$(){}
	function X$(){}
	function _$(){}
	function k0(){}
	function m0(){}
	function s0(){}
	function w0(){}
	function A0(){}
	function C0(){}
	function E0(){}
	function G0(){}
	function V0(){}
	function Z0(){}
	function _0(){}
	function _1(){}
	function b1(){}
	function e1(){}
	function k1(){}
	function q1(){}
	function u1(){}
	function R1(){}
	function X1(){}
	function Z1(){}
	function c2(){}
	function f2(){}
	function h2(){}
	function k2(){}
	function n2(){}
	function q2(){}
	function x2(){}
	function A2(){}
	function H2(){}
	function H4(){}
	function z4(){}
	function B4(){}
	function D4(){}
	function U4(){}
	function i3(){}
	function l3(){}
	function u3(){}
	function C3(){}
	function I3(){}
	function $5(){}
	function d7(){}
	function V7(){}
	function q8(){}
	function smb(){}
	function Wbb(){}
	function rcb(){}
	function Mcb(){}
	function Vdb(){}
	function hkb(){}
	function Kpb(){}
	function Spb(){}
	function aqb(){}
	function iqb(){}
	function pqb(){}
	function isb(){}
	function mvb(){}
	function zwb(){}
	function yfb(a){}
	function sP(a){}
	function XW(a){}
	function _t(){Wt()}
	function lI(){GP()}
	function J8(){G8()}
	function m8(){k8()}
	function CQ(){zQ()}
	function CV(){AV()}
	function q0(){p0()}
	function S0(){J0()}
	function y9(){w9()}
	function Bab(){zab()}
	function Qab(){Hab()}
	function cbb(){abb()}
	function sbb(){rbb()}
	function Ycb(){Xcb()}
	function Wfb(){Mfb()}
	function ft(){_s(this)}
	function uP(){sP(this)}
	function GU(){tU(this)}
	function ZW(){XW(this)}
	function ic(a){this.a=a}
	function sc(a){this.a=a}
	function $c(a){this.a=a}
	function sf(a){this.a=a}
	function Qg(a){this.a=a}
	function qh(a){this.a=a}
	function Vj(a){this.a=a}
	function Nk(a){this.a=a}
	function km(a){this.a=a}
	function dm(a){this.b=a}
	function En(a){this.a=a}
	function Hn(a){this.a=a}
	function Yp(a){this.a=a}
	function bq(a){this.a=a}
	function eq(a){this.a=a}
	function tq(a){this.a=a}
	function wq(a){this.a=a}
	function ku(a){this.a=a}
	function uu(a){this.a=a}
	function Gu(a){this.a=a}
	function Uu(a){this.a=a}
	function WJ(a){this.a=a}
	function rP(a){this.a=a}
	function $V(a){this.a=a}
	function tW(a){this.a=a}
	function yW(a){this.e=a}
	function fY(a){this.a=a}
	function hY(a){this.a=a}
	function lY(a){this.a=a}
	function nY(a){this.a=a}
	function CY(a){this.a=a}
	function JY(a){this.a=a}
	function SZ(a){this.a=a}
	function Z$(a){this.a=a}
	function b_(a){this.a=a}
	function d_(a){this.a=a}
	function f_(a){this.a=a}
	function w1(a){this.a=a}
	function y1(a){this.a=a}
	function E3(a){this.a=a}
	function q4(a){this.a=a}
	function x4(a){this.a=a}
	function F4(a){this.a=a}
	function $8(a){this.a=a}
	function a9(a){this.a=a}
	function l9(a){this.a=a}
	function C9(a){this.a=a}
	function k9(a){this.c=a}
	function wlb(a){this.a=a}
	function nxb(a){this.a=a}
	function wcb(a){this.a=a}
	function tdb(a){this.a=a}
	function ydb(a){this.a=a}
	function Ddb(a){this.a=a}
	function lkb(a){this.a=a}
	function klb(a){this.a=a}
	function llb(a){this.a=a}
	function inb(a){this.a=a}
	function wnb(a){this.d=a}
	function Snb(a){this.a=a}
	function Ynb(a){this.a=a}
	function aob(a){this.a=a}
	function fob(a){this.a=a}
	function Bob(a){this.b=a}
	function Gob(a){this.a=a}
	function Mob(a){this.a=a}
	function Tob(a){this.c=a}
	function opb(a){this.a=a}
	function Ipb(a){this.a=a}
	function rqb(a){this.a=a}
	function zqb(a){this.b=a}
	function Nqb(a){this.b=a}
	function mrb(a){this.c=a}
	function Trb(a){this.a=a}
	function Xrb(a){this.a=a}
	function Fsb(a){this.a=a}
	function ju(){this.a=[]}
	function ytb(a){this.a=a}
	function Lub(a){this.a=a}
	function u5(a){a.b=a.a}
	function vg(a){a.c=a.d.d}
	function sX(a,b){a.g=b}
	function bfb(a,b){a.k=b}
	function qfb(a,b){a.a=b}
	function rfb(a,b){a.b=b}
	function qW(a,b){a.e.k=b}
	function qu(a){return a.a}
	function yu(a){return a.a}
	function Mu(a){return a.a}
	function $u(a){return a.a}
	function rv(a){return a.a}
	function jv(){return null}
	function Fu(){return null}
	function Rh(){this.c=this}
	function tkb(){_s(this)}
	function ntb(){Ymb(this)}
	function b5(a){a5(this,a)}
	function GO(a){IO();$O(a)}
	function mI(a){a.a=new aJ}
	function IZ(a,b){a.a=b-a.a}
	function KZ(a,b){a.b=b-a.b}
	function Dq(){Dq=iI;new Jq}
	function nW(){nW=iI;new HW}
	function ni(){throw new Hmb}
	function ii(){throw new Hmb}
	function ji(){throw new Hmb}
	function li(){throw new Hmb}
	function mi(){throw new Hmb}
	function dd(){throw new Hmb}
	function pj(){throw new Hmb}
	function Wn(){throw new Hmb}
	function $n(){throw new Hmb}
	function qT(){this.a=new GU}
	function fU(){this.a=new GU}
	function cV(){this.a=new GU}
	function pV(){this.a=new GU}
	function l7(){this.a=new GU}
	function k7(){this.a=new d7}
	function A7(){this.a=new n7}
	function t8(){this.b=new GU}
	function jJ(){aJ.call(this)}
	function ZN(){UN.call(this)}
	function AP(){uP.call(this)}
	function DP(){uP.call(this)}
	function q7(){GU.call(this)}
	function alb(){ft.call(this)}
	function rlb(){ft.call(this)}
	function nkb(){ft.call(this)}
	function qkb(){ft.call(this)}
	function tlb(){ft.call(this)}
	function Vlb(){ft.call(this)}
	function Hmb(){ft.call(this)}
	function Wab(){this.f=new GU}
	function Ybb(){this.d=new GU}
	function jV(){this.a=new vtb}
	function vqb(){throw new Hmb}
	function wqb(){throw new Hmb}
	function xqb(){throw new Hmb}
	function yqb(){throw new Hmb}
	function Mqb(){throw new Hmb}
	function Uvb(){this.a=new GU}
	function it(){it=iI;ht=new pb}
	function bmb(){bmb=iI;new smb}
	function zb(){zb=iI;yb=new Ab}
	function Tq(){Tq=iI;Sq=new Vq}
	function dr(){dr=iI;cr=new er}
	function Gt(){Gt=iI;Ft=new Jt}
	function Bu(){Bu=iI;Au=new Cu}
	function fR(){fR=iI;eR=new lR}
	function VR(){VR=iI;UR=new WR}
	function jS(a){dS(a);return a}
	function jl(a){Gi();this.a=a}
	function vi(a){hi();this.a=a}
	function Uk(a){hi();this.a=a}
	function Zk(a){hi();this.a=a}
	function ds(a,b){a.i=b;b.f=a}
	function ycb(a,b){stb(a.b,b)}
	function nsb(){ft.call(this)}
	function osb(){ft.call(this)}
	function nvb(){ft.call(this)}
	function Ccb(){Bcb.call(this)}
	function Jcb(){Bcb.call(this)}
	function pkb(){nkb.call(this)}
	function Xlb(){rlb.call(this)}
	function gt(a){et.call(this,a)}
	function Vd(a){Md.call(this,a)}
	function uh(a){Md.call(this,a)}
	function Bk(a){Hj.call(this,a)}
	function Jk(a){dk.call(this,a)}
	function Lm(a){Em.call(this,a)}
	function nq(a){vm.call(this,a)}
	function ap(a){Ro.call(this,a)}
	function ir(a){Hj.call(this,a)}
	function Op(a,b){a.a.W().nb(b)}
	function emb(a,b){return a===b}
	function Zr(a){return !a?0:a.a}
	function Rs(a){return !a?0:a.d}
	function Ts(a){return !a?0:a.j}
	function zu(a){gt.call(this,a)}
	function $J(a){gt.call(this,a)}
	function _J(a){gt.call(this,a)}
	function EQ(a){_J.call(this,a)}
	function Tu(){Uu.call(this,{})}
	function y5(a){b5.call(this,a)}
	function H5(a){b5.call(this,a)}
	function WP(a,b,c){XP(a,b.b,c)}
	function a7(a,b,c){f6(a.c,b,c)}
	function qV(a,b,c){a.b.Fc(b,c)}
	function M9(a){$8.call(this,a)}
	function P9(a){$8.call(this,a)}
	function YY(){this.a=(sK(),qK)}
	function cZ(){this.a=(sK(),qK)}
	function vtb(){this.a=new ntb}
	function Vwb(){this.a=new iwb}
	function vT(){vT=iI;uT=new AT}
	function AV(){AV=iI;zV=new EV}
	function p0(){p0=iI;o0=new s0}
	function Ckb(a){xkb();return a}
	function Ixb(a){Dxb(a);return a}
	function ikb(a){et.call(this,a)}
	function okb(a){gt.call(this,a)}
	function slb(a){gt.call(this,a)}
	function Kb(a){this.c=$v(_b(a))}
	function FI(){this.a=0;this.b=0}
	function aJ(){OI(this);_I(this)}
	function cI(){aI==null&&(aI=[])}
	function Vvb(a){a.b=null;a.c=0}
	function mS(a,b){a.b=b;return a}
	function nS(a,b){a.c=b;return a}
	function oS(a,b){a.f=b;return a}
	function pS(a,b){a.g=b;return a}
	function S7(a,b){a.a=b;return a}
	function T7(a,b){a.f=b;return a}
	function U7(a,b){a.k=b;return a}
	function xc(a,b){return a.e-b.e}
	function H3(a,b){return a.d-b.d}
	function Klb(a){return a<0?-a:a}
	function hlb(a){return isNaN(a)}
	function gv(a){return new Gu(a)}
	function iv(a){return new lv(a)}
	function rkb(a){gt.call(this,a)}
	function ulb(a){gt.call(this,a)}
	function Ulb(a){gt.call(this,a)}
	function Wlb(a){gt.call(this,a)}
	function Imb(a){gt.call(this,a)}
	function et(a){this.f=a;_s(this)}
	function _2(){this.b=0;this.a=0}
	function Ws(){Ws=iI;Math.log(2)}
	function Ytb(){Ytb=iI;Xtb=$tb()}
	function Vtb(c,a,b){c.set(a,b)}
	function Wtb(c,a,b){c.set(a,b)}
	function Ot(a,b){Nt();Mt.dc(a,b)}
	function tv(a,b){return Skb(a,b)}
	function zm(a,b){return a.a.B(b)}
	function aP(a,b){return a.g[b.e]}
	function bP(a,b){return a.i[b.e]}
	function cP(a,b){return a.j[b.e]}
	function dP(a,b){return a.n[b.e]}
	function eP(a,b){return a.o[b.e]}
	function Ou(b,a){return a in b.a}
	function Tab(a,b){return a.b-b.b}
	function ndb(a,b){return a.d-b.d}
	function jgb(a,b){return a.i-b.i}
	function Nlb(a,b){return a>b?a:b}
	function Olb(a,b){return a>b?a:b}
	function Plb(a,b){return a>b?a:b}
	function Qlb(a,b){return a<b?a:b}
	function Rlb(a,b){return a<b?a:b}
	function Slb(a,b){return a<b?a:b}
	function awb(a){return !!a&&a.b}
	function $ob(a){_ob(a,a.length)}
	function bpb(a){apb(a,a.length)}
	function dpb(a){cpb(a,a.length)}
	function Cmb(a){okb.call(this,a)}
	function Bmb(a){lkb.call(this,a)}
	function oxb(a){nxb.call(this,a)}
	function Ylb(a){slb.call(this,a)}
	function Frb(a){zqb.call(this,a)}
	function Nrb(a){Frb.call(this,a)}
	function csb(a){Rqb.call(this,a)}
	function zmb(){lkb.call(this,'')}
	function Amb(){lkb.call(this,'')}
	function Ikb(a){Gkb(a);return a.n}
	function Jkb(a){Gkb(a);return a.j}
	function Hkb(a){return a.e&&a.e()}
	function Lk(a,b){return a.a.sb(b)}
	function Sb(a,b){return a?a:_b(b)}
	function vW(a,b){return rJ(a.a,b)}
	function w4(a,b){return t4(a.a,b)}
	function VH(a,b){return RH(a,b)<0}
	function Dlb(a){return bmb(),''+a}
	function qe(a){return !a?null:a.d}
	function Gr(a){hi();this.a=_b(a)}
	function I9(){F9();this.g=new Um}
	function J0(){J0=iI;I0=(kP(),hP)}
	function Et(){ut!=0&&(ut=0);wt=-1}
	function bS(a){cS(a,a.d);return a}
	function i7(a,b){a.a.d=b;return a}
	function g7(a,b){a.a.a=b;return a}
	function h7(a,b){a.a.c=b;return a}
	function j7(a,b){a.a.f=b;return a}
	function z7(a,b){a.a.f=b;return a}
	function y7(a,b){a.a.b=b;return a}
	function hxb(a,b,c){a.splice(b,c)}
	function oqb(a,b){return Akb(b,a)}
	function Drb(a,b){return a.b.t(b)}
	function jrb(a,b){return a.c.t(b)}
	function ttb(a,b){return a.a.R(b)}
	function Ttb(b,a){return b.get(a)}
	function Utb(b,a){return b.get(a)}
	function elb(a,b){return a.test(b)}
	function Jlb(a){return a<=0?0-a:a}
	function ilb(a){return bmb(),''+a}
	function qlb(a){return bmb(),''+a}
	function wtb(a){this.a=new otb(a)}
	function Wwb(a){this.a=new jwb(a)}
	function nc(a){this.a=Wv(_b(a),19)}
	function Bf(a){this.b=Wv(_b(a),57)}
	function Ch(a){this.d=Wv(_b(a),56)}
	function Ac(a,b){this.d=a;this.e=b}
	function Ie(a,b){this.b=a;this.a=b}
	function tm(a,b){this.b=a;this.a=b}
	function Pf(a,b){this.b=a;this.c=b}
	function Fk(a,b){this.a=a;this.b=b}
	function Bn(a,b){this.a=a;this.b=b}
	function Sn(a,b){this.a=a;this.f=b}
	function Mc(a,b){Ac.call(this,a,b)}
	function Hh(a,b){Ac.call(this,a,b)}
	function yp(a,b){Ac.call(this,a,b)}
	function bp(a,b){this.b=a;this.c=b}
	function Oq(a,b){this.e=a;this.c=b}
	function Yq(a,b){this.a=a;this.b=b}
	function fs(a,b){this.a=a;this.b=b}
	function rs(a,b){Ac.call(this,a,b)}
	function _u(a,b){this.a=a;this.b=b}
	function Mo(a){this.a=Wv(_b(a),20)}
	function Ro(a){this.a=Wv(_b(a),20)}
	function Fp(a){this.a=Wv(_b(a),57)}
	function vm(a){this.b=Wv(_b(a),35)}
	function HI(a,b){this.a=a;this.b=b}
	function RJ(a,b){this.a=a;this.b=b}
	function jK(a,b){Ac.call(this,a,b)}
	function Qm(a,b){return Qmb(a.b,b)}
	function fv(a){return tu(),a?su:ru}
	function tK(a){return a==oK||a==pK}
	function uK(a){return a==rK||a==nK}
	function RI(a,b){TI(a,b,a.a,a.a.a)}
	function SI(a,b){TI(a,b,a.c.b,a.c)}
	function wK(a,b){Ac.call(this,a,b)}
	function FK(a,b){Ac.call(this,a,b)}
	function OK(a,b){Ac.call(this,a,b)}
	function ZK(a,b){Ac.call(this,a,b)}
	function fL(a,b){Ac.call(this,a,b)}
	function pM(a,b){Ac.call(this,a,b)}
	function AM(a,b){Ac.call(this,a,b)}
	function NM(a,b){Ac.call(this,a,b)}
	function VM(a,b){Ac.call(this,a,b)}
	function uN(a,b){Ac.call(this,a,b)}
	function EN(a,b){Ac.call(this,a,b)}
	function NN(a,b){Ac.call(this,a,b)}
	function EO(a,b){Ac.call(this,a,b)}
	function lP(a,b){Ac.call(this,a,b)}
	function OS(a,b){this.b=a;this.a=b}
	function VS(a,b){this.c=a;this.d=b}
	function wW(a,b){this.a=a;this.c=b}
	function BW(a,b){this.e=a;this.c=b}
	function FW(a,b){this.e=a;this.d=b}
	function fT(a,b){Ac.call(this,a,b)}
	function DX(a,b){Ac.call(this,a,b)}
	function MY(a,b){this.a=a;this.b=b}
	function PY(a,b){this.a=a;this.b=b}
	function YZ(a,b){Ac.call(this,a,b)}
	function f0(a,b){Ac.call(this,a,b)}
	function J1(a,b){Ac.call(this,a,b)}
	function Y3(a,b){Ac.call(this,a,b)}
	function h4(a,b){Ac.call(this,a,b)}
	function $7(a,b){Ac.call(this,a,b)}
	function y8(a,b){Ac.call(this,a,b)}
	function q9(a,b){Ac.call(this,a,b)}
	function MR(a,b){return Zsb(a.c,b)}
	function Bnb(a){return a.b<a.d.Y()}
	function Zmb(a){return a.d.c+a.e.c}
	function hrb(a,b){return a.c.ab(b)}
	function Brb(a,b){return a.b.kb(b)}
	function Crb(a,b){return a.b.lb(b)}
	function Erb(a,b){return a.b.pb(b)}
	function Irb(a,b){return a.b.kb(b)}
	function Jrb(a,b){return a.b.lb(b)}
	function dT(a){return a==$S||a==bT}
	function eT(a){return a==$S||a==_S}
	function MM(a){return a!=IM&&a!=JM}
	function lg(a){return Yf(a),a.d.Y()}
	function jtb(a){this.c=a;gtb(this)}
	function otb(a){$mb.call(this,a,0)}
	function iwb(){jwb.call(this,null)}
	function xk(){uh.call(this,new ntb)}
	function Ap(){yp.call(this,'KEY',0)}
	function lr(a){kr();dk.call(this,a)}
	function Dt(a){$wnd.clearTimeout(a)}
	function um(a){return a.Vb(a.b.H())}
	function Pp(a){this.a=Wv(_b(a),144)}
	function Um(){this.b=(mp(),new ntb)}
	function hsb(){hsb=iI;gsb=new isb}
	function Rpb(){Rpb=iI;Qpb=new Spb}
	function nqb(){nqb=iI;mqb=new pqb}
	function hc(){hc=iI;gc=new Kb(',')}
	function nJ(){nJ=iI;Math.pow(2,-65)}
	function UN(){VN.call(this,0,0,0,0)}
	function wab(a,b){Ac.call(this,a,b)}
	function lbb(a,b){Ac.call(this,a,b)}
	function Hbb(a,b){Ac.call(this,a,b)}
	function Mbb(a,b){Ac.call(this,a,b)}
	function xQ(a){wJ();CJ.call(this,a)}
	function mcb(a,b){Ac.call(this,a,b)}
	function gab(a,b){this.c=a;this.b=b}
	function Qbb(a,b){this.a=a;this.b=b}
	function Fcb(a,b){this.b=a;this.d=b}
	function ggb(a,b){Ac.call(this,a,b)}
	function Agb(a,b){Ac.call(this,a,b)}
	function Igb(a,b){Ac.call(this,a,b)}
	function Rgb(a,b){Ac.call(this,a,b)}
	function ahb(a,b){Ac.call(this,a,b)}
	function phb(a,b){Ac.call(this,a,b)}
	function Ihb(a,b){Ac.call(this,a,b)}
	function Nhb(a,b){Ac.call(this,a,b)}
	function Yib(a,b){Ac.call(this,a,b)}
	function ejb(a,b){Ac.call(this,a,b)}
	function Rjb(a,b){Ac.call(this,a,b)}
	function dkb(a,b){Ac.call(this,a,b)}
	function fxb(a,b,c){a.splice(b,0,c)}
	function Yjb(a,b,c){a.g[b.e][b.e]=c}
	function D6(a,b){a.a=b;a.g=0;a.f=0}
	function BI(a){a.a=0;a.b=0;return a}
	function rY(a){return zU(a.b.c,a,0)}
	function Llb(a){return Math.ceil(a)}
	function Tlb(a){return Math.sqrt(a)}
	function cub(a,b){return Utb(a.a,b)}
	function vob(a,b){return !!Wvb(a,b)}
	function Yob(a,b){Zob(a,a.length,b)}
	function Gwb(a,b){Ac.call(this,a,b)}
	function Psb(a,b){this.b=a;this.a=b}
	function qob(a,b){this.d=a;this.e=b}
	function dcb(){$bb();this.c=new vtb}
	function Rdb(){Ndb();this.a=new vtb}
	function aub(){Ytb();return new Xtb}
	function Xb(a){if(!a){throw new rlb}}
	function dc(a){if(!a){throw new tlb}}
	function Vm(a){if(!a){throw new nvb}}
	function SV(){this.b=(mp(),new ntb)}
	function Q4(){this.b=(mp(),new ntb)}
	function II(a){this.a=a.a;this.b=a.b}
	function gw(a){return a==null?null:a}
	function re(a){return !a?null:a.zb()}
	function $i(a,b){return a.Nb().sb(b)}
	function aq(a,b){return a.a.a.a.U(b)}
	function nl(a,b){return Ll(a.mb(),b)}
	function B3(a,b){return glb(b.b,a.b)}
	function h3(a,b){return glb(b.k,a.k)}
	function Mlb(a){return Math.floor(a)}
	function vmb(a,b){return a.a+=''+b,a}
	function xmb(a,b){a.a+=''+b;return a}
	function ymb(a,b){a.a+=''+b;return a}
	function iw(a){Hxb(a==null);return a}
	function T2(a){a.d&&Z2(a);return a.a}
	function U2(a){a.d&&Z2(a);return a.b}
	function V2(a){a.d&&Z2(a);return a.c}
	function Tvb(a,b){vU(a.a,b);return b}
	function ptb(a){Ymb(this);he(this,a)}
	function _4(a){this.c=a;this.e=false}
	function Jh(){Hh.call(this,'OPEN',0)}
	function ts(){rs.call(this,'SIZE',0)}
	function qxb(){nxb.call(this,'UTF-8')}
	function Nxb(){Nxb=iI;Kxb={};Mxb={}}
	function IO(){IO=iI;HO=new DJ(yzb,0)}
	function Sh(a){_b(a);return new Vh(a)}
	function pmb(a){bmb();return a.length}
	function Jmb(a,b){return cmb(a.a,b.a)}
	function vlb(a,b){return xlb(a.a,b.a)}
	function Ys(a,b){return a==b?0:a?1:-1}
	function Cs(a){return Rs(a.e)-Rs(a.g)}
	function xI(a){return new HI(a.a,a.b)}
	function RN(a){return new HI(a.d,a.e)}
	function tU(a){a.c=xv(UF,syb,1,0,4,1)}
	function Cp(){yp.call(this,'VALUE',1)}
	function dX(a){cX.call(this);this.a=a}
	function Q2(a){this.a=new $2;this.b=a}
	function Vh(a){this.a=a;Rh.call(this)}
	function vl(a){this.a=a;Rh.call(this)}
	function U8(){P8();this.d=(ckb(),bkb)}
	function zxb(a){if(!a){throw new qkb}}
	function uxb(a){if(!a){throw new tlb}}
	function vxb(a){if(!a){throw new rlb}}
	function Hxb(a){if(!a){throw new alb}}
	function Bxb(a){if(!a){throw new nvb}}
	function Wub(){ytb.call(this,new wub)}
	function Kh(){Hh.call(this,'CLOSED',1)}
	function Im(a){Em.call(this,new Lm(a))}
	function p7(a,b){++a.d;return BU(a,b)}
	function kkb(a,b){return gmb(a.a,0,b)}
	function jlb(a,b){return glb(a.a,b.a)}
	function Al(a){return Pl(a.b.mb(),a.a)}
	function Dl(a){return Wl(a.a.mb(),a.b)}
	function q6(a,b){return b==a.c?a.d:a.c}
	function Zs(a,b){return a<b?-1:a>b?1:0}
	function xlb(a,b){return a<b?-1:a>b?1:0}
	function pvb(a){return a!=null?vb(a):0}
	function Ntb(a){this.a=aub();this.b=a}
	function fub(a){this.a=aub();this.b=a}
	function Cg(a){this.a=a;xg.call(this,a)}
	function o4(){n4();this.b=new q4(this)}
	function Oh(){Oh=iI;Nh=Jb(new Kb(', '))}
	function Gh(){Gh=iI;Fh=new Jh;Eh=new Kh}
	function Il(){Il=iI;Gl=new Yl;Hl=new gm}
	function xp(){xp=iI;vp=new Ap;wp=new Cp}
	function qs(){qs=iI;ps=new ts;os=new ws}
	function wJ(){wJ=iI;uJ=new NJ;vJ=new PJ}
	function Teb(a){a.g=new GU;a.b=new GU}
	function OI(a){a.a=new mvb;a.c=new mvb}
	function n4(){n4=iI;m4=new U4;l4=new u4}
	function Uc(){Mc.call(this,'IS_NULL',2)}
	function Kwb(){Gwb.call(this,'Head',1)}
	function Pwb(){Gwb.call(this,'Tail',3)}
	function pR(a,b){qR.call(this,a,b,null)}
	function lpb(a,b){ipb(a,0,a.length,b)}
	function x7(a,b){vU(b.a,a.a);return a.a}
	function CI(a,b){a.a*=b;a.b*=b;return a}
	function gl(a,b){Gi();this.a=a;this.b=b}
	function i9(a,b){return a.a[b.d.k][b.k]}
	function W9(a,b){return a.a[b.d.k][b.k]}
	function xJ(a,b){return kmb(a.b,b.mc())}
	function Swb(a,b){return qe(Xvb(a.a,b))}
	function Twb(a,b){return qe(Yvb(a.a,b))}
	function $T(a,b){return Wv(Dd(a.a,b),20)}
	function aw(a,b){return a!=null&&Vv(a,b)}
	function Qob(a){return a.a<a.c.c.length}
	function htb(a){return a.a<a.c.a.length}
	function y$(a,b){return glb(a.i.a,b.i.a)}
	function S$(a,b){return a.i.b=(Dxb(b),b)}
	function T$(a,b){return a.i.b=(Dxb(b),b)}
	function utb(a,b){return a.a.eb(b)!=null}
	function Vjb(a,b,c){return a.g[b.e][c.e]}
	function Bkb(a){xkb();return bmb(),''+a}
	function Mwb(){Gwb.call(this,'Range',2)}
	function ws(){rs.call(this,'DISTINCT',1)}
	function Xc(){Mc.call(this,'NOT_NULL',3)}
	function mp(){mp=iI;lp=new Rb((Oh(),Nh))}
	function Hj(a){this.d=(ypb(),new mrb(a))}
	function Hb(a,b){return Gb(a,new zmb,b).a}
	function Mb(a,b){return b==null?a.b:Ib(b)}
	function mt(a){return a==null?null:a.name}
	function cw(a){return typeof a==='number'}
	function ew(a){return typeof a==='string'}
	function Hi(a,b){return new Mk(a,a.Y(),b)}
	function An(a,b){return new no(a.a,a.b,b)}
	function Jb(a){_b(Wxb);return new Nb(a,a)}
	function Do(a){Mh(a,Vyb);return new HU(a)}
	function Am(a,b){this.a=b;vm.call(this,a)}
	function tp(a,b){this.a=b;vm.call(this,a)}
	function If(a,b){this.a=a;Bf.call(this,b)}
	function ks(a){this.c=a;this.a=Qr(this.c)}
	function MZ(a){var b;b=a.a;a.a=a.b;a.b=b}
	function pW(a,b){a.e.j.a=b.a;a.e.j.b=b.b}
	function xvb(a,b,c){a.a=b^1502;a.b=c^_Ab}
	function uI(a,b,c){a.a+=b;a.b+=c;return a}
	function DI(a,b,c){a.a-=b;a.b-=c;return a}
	function zI(a){a.a=-a.a;a.b=-a.b;return a}
	function UI(a){Bxb(a.b!=0);return a.a.a.c}
	function VI(a){Bxb(a.b!=0);return a.c.b.c}
	function uub(a,b){if(a.a){Hub(b);Gub(b)}}
	function rn(a,b,c){var d;d=a.ub(b);d.J(c)}
	function Iq(a,b){return Zs(b.Yb(),a.Yb())}
	function o5(a){return Wv(yU(a.a,a.b),128)}
	function EU(a){return cxb(a.c,a.c.length)}
	function Fv(a){return a.l+a.m*czb+a.h*dzb}
	function LM(a){return a==EM||a==GM||a==FM}
	function UH(a){return typeof a==='number'}
	function Zsb(a,b){return !!b&&a.b[b.e]==b}
	function lsb(a,b){var c;c=a[WAb];b[WAb]=c}
	function FQ(a,b){_J.call(this,a);this.b=b}
	function Rqb(a){zqb.call(this,a);this.a=a}
	function arb(a){Nqb.call(this,a);this.a=a}
	function dsb(a){Frb.call(this,a);this.a=a}
	function Xub(a){ytb.call(this,new xub(a))}
	function wwb(a){this.a=a;Bob.call(this,a)}
	function v5(a){this.c=a;this.a=1;this.b=1}
	function Rb(a){this.a=a;this.b=$v(_b('='))}
	function B5(){this.a=new aJ;this.e=new aJ}
	function tV(){this.a=new fU;this.c=new uV}
	function cX(){this.i=new FI;this.j=new FI}
	function Md(a){Xb(a.d.c+a.e.c==0);this.b=a}
	function _s(a){a.g=null;Ot(a,a.f);return a}
	function Nl(a){Il();_b(a);return new om(a)}
	function St(a){Nt();return parseInt(a)||-1}
	function Uwb(a,b){return cwb(a.a,b)!=null}
	function ok(a,b){return !rk(a,b)&&!qk(a,b)}
	function txb(a){return a.$H||(a.$H=++sxb)}
	function yc(a){return a.d!=null?a.d:''+a.e}
	function zc(a){return a.d!=null?a.d:''+a.e}
	function pwb(a){return a.b=Wv(Cnb(a.a),21)}
	function bw(a){return typeof a==='boolean'}
	function pub(a){a.b=new Iub(a);a.c=new ntb}
	function oab(){this.a=new GU;this.d=new GU}
	function Iub(a){Jub.call(this,a,null,null)}
	function ug(a,b,c,d){mg.call(this,a,b,c,d)}
	function BP(a,b,c,d){vP.call(this,a,b,c,d)}
	function EP(a,b,c,d){vP.call(this,a,b,c,d)}
	function Kg(a,b,c){_f.call(this,a,b,c,null)}
	function Lg(a,b,c){_f.call(this,a,b,c,null)}
	function es(a,b,c){a.i=b;b.f=a;b.i=c;c.f=b}
	function tI(a,b){mI(this);this.e=a;this.f=b}
	function yg(a,b){this.d=a;vg(this);this.b=b}
	function kJ(a){OI(this);_I(this);Ue(this,a)}
	function Xv(a){Hxb(a==null||bw(a));return a}
	function Yv(a){Hxb(a==null||cw(a));return a}
	function $v(a){Hxb(a==null||ew(a));return a}
	function vI(a,b){a.a+=b.a;a.b+=b.b;return a}
	function EI(a,b){a.a-=b.a;a.b-=b.b;return a}
	function U$(a,b){return a.i.a=(Dxb(b),b)+10}
	function V$(a,b){return a.i.a=(Dxb(b),b)+10}
	function h6(a,b){return Wv(Smb(a.k,b),24).a}
	function Bj(a,b){return Lh(a,b),new zr(a,b)}
	function Web(a,b){return Wv(a.b.sb(b),92).a}
	function WX(a){return Wv(a,7).b.c.length!=0}
	function TX(a){return Wv(a,7).e.c.length!=0}
	function jX(a){return !a.d?-1:zU(a.d.a,a,0)}
	function lt(a){return a==null?null:a.message}
	function Gkb(a){if(a.n!=null){return}Wkb(a)}
	function wmb(a,b,c,d){jkb(a,b,c,d);return a}
	function mmb(a,b){bmb();return a.indexOf(b)}
	function QX(a,b){if(!b){throw new Vlb}a.g=b}
	function Mn(a){if(a.e.c!=a.b){throw new nsb}}
	function Xn(a){if(a.f.c!=a.b){throw new nsb}}
	function Uq(a,b){_b(a);_b(b);return Akb(a,b)}
	function U6(a,b){this.a=a;this.c=b;this.b=2}
	function sI(){mI(this);this.e=-1;this.f=true}
	function Dh(){Vd.call(this,new ntb);this.a=3}
	function CP(a){vP.call(this,a.d,a.b,a.a,a.c)}
	function FP(a){vP.call(this,a.d,a.b,a.a,a.c)}
	function r6(a){k6.call(this,a);this.c=new GU}
	function Oc(){Mc.call(this,'ALWAYS_TRUE',0)}
	function Rc(){Mc.call(this,'ALWAYS_FALSE',1)}
	function _T(a){XT();this.a=new Dh;YT(this,a)}
	function Y9(a){!a.e&&(a.e=new GU);return a.e}
	function W7(a){var b;b=new V7;b.e=a;return b}
	function msb(a){var b;b=a[WAb]|0;a[WAb]=b+1}
	function Anb(a,b){a.a.rb(a.b,b);++a.b;a.c=-1}
	function Enb(a,b){uxb(a.c!=-1);a.a.wb(a.c,b)}
	function zkb(a,b){xkb();return a==b?0:a?1:-1}
	function Wjb(a,b,c){return a.g[b.e][c.e]*a.d}
	function xt(a,b,c){return a.apply(b,c);var d}
	function ssb(a,b,c){return rsb(a,Wv(b,17),c)}
	function m5(a,b){return b==(sN(),rN)?a.c:a.d}
	function Zi(a,b){return b!=null&&a.Nb().kb(b)}
	function skb(a,b){this.e=b;this.f=a;_s(this)}
	function om(a){this.b=a;this.a=(Il(),Il(),Hl)}
	function dk(a){hi();this.a=(ypb(),new Frb(a))}
	function hi(){hi=iI;new vi((ypb(),ypb(),vpb))}
	function e8(){e8=iI;d8=PQ(new WQ,(d0(),X_))}
	function rwb(a){swb.call(this,a,(Fwb(),Bwb))}
	function IU(a){tU(this);gxb(this.c,0,a.ob())}
	function tr(a,b,c){this.b=a;this.a=b;this.c=c}
	function WS(a,b,c){VS.call(this,a,b);this.b=c}
	function XV(a,b,c){this.b=a;this.a=b;this.c=c}
	function job(a,b){var c;c=a.e;a.e=b;return c}
	function qub(a){Ymb(a.c);a.b.b=a.b;a.b.a=a.b}
	function Vf(a){a.b?Vf(a.b):Umb(a.f.b,a.e,a.d)}
	function YI(a){Bxb(a.b!=0);return $I(a,a.a.a)}
	function ZI(a){Bxb(a.b!=0);return $I(a,a.c.b)}
	function Wl(a,b){Il();_b(b);return new Am(a,b)}
	function np(a,b){mp();return new tp(a.mb(),b)}
	function jmb(a,b){bmb();return a.charCodeAt(b)}
	function imb(a,b,c){bmb();return a.substr(b,c)}
	function qmb(a){bmb();return a==null?Wxb:xb(a)}
	function Xjb(a,b,c){return Vjb(a,b.g,c.g)*a.d}
	function Ev(a,b,c){return {'l':a,'m':b,'h':c}}
	function YU(a,b){return ZU(a,new VS(b.a,b.b))}
	function SN(a,b,c,d,e){a.d=b;a.e=c;a.c=d;a.b=e}
	function wS(a,b,c,d,e){a.b=b;a.c=c;a.d=d;a.a=e}
	function QI(a,b){TI(a,b,a.c.b,a.c);return true}
	function vU(a,b){a.c[a.c.length]=b;return true}
	function DJ(a,b){wJ();CJ.call(this,a);this.a=b}
	function g8(){e8();this.e=new aJ;this.d=new aJ}
	function Fmb(){Fmb=iI;Dmb=new hkb;Emb=new hkb}
	function zab(){zab=iI;yab=VQ(new WQ,(d0(),v_))}
	function abb(){abb=iI;_ab=VQ(new WQ,(d0(),v_))}
	function rbb(){rbb=iI;qbb=VQ(new WQ,(d0(),v_))}
	function $bb(){$bb=iI;Zbb=VQ(new WQ,(d0(),v_))}
	function Wt(){Wt=iI;Error.stackTraceLimit=64}
	function xS(){wS(this,false,false,false,false)}
	function Bo(a){var b;b=new GU;Jl(b,a);return b}
	function Eo(a){var b;b=new aJ;ml(b,a);return b}
	function XQ(a){var b;b=new WQ;QQ(b,a);return b}
	function Ocb(a){var b;b=new Mcb;b.a=a;return b}
	function Wv(a,b){Hxb(a==null||Vv(a,b));return a}
	function Dvb(a,b){if(a<0||a>=b){throw new pkb}}
	function pl(a,b){_b(a);_b(b);return new Bl(a,b)}
	function ul(a,b){_b(a);_b(b);return new El(a,b)}
	function nmb(a,b){bmb();return a.lastIndexOf(b)}
	function rgb(a,b,c){return a<b?c<=a:a<=c||a==b}
	function cvb(a,b,c){this.d=a;this.b=c;this.a=b}
	function atb(a,b,c){this.a=a;this.b=b;this.c=c}
	function lub(a,b,c){this.a=a;this.b=b;this.c=c}
	function Nb(a,b){this.a=a;this.b=Wxb;this.c=b.c}
	function z3(a){this.c=a.c;this.a=a.e;this.b=a.b}
	function xg(a){this.d=a;vg(this);this.b=Ed(a.d)}
	function u4(){FS.call(this);this.a=new x4(this)}
	function FS(){this.c=new PS;this.d=new KS(this)}
	function qr(a){var b;b=new vtb;Jl(b,a);return b}
	function qwb(a){vnb(a.a);dwb(a.c,a.b);a.b=null}
	function n5(a){return a.c-Wv(yU(a.a,a.b),128).b}
	function t5(a,b){return a.c<b.c?-1:a.c==b.c?0:1}
	function t4(a,b){return tK(a.b.d)?b.xc():b.wc()}
	function gmb(a,b,c){return bmb(),a.substr(b,c-b)}
	function gxb(a,b,c){dxb(c,0,a,b,c.length,false)}
	function Jub(a,b,c){this.c=a;qob.call(this,b,c)}
	function Bl(a,b){this.b=a;this.a=b;Rh.call(this)}
	function El(a,b){this.a=a;this.b=b;Rh.call(this)}
	function Lq(a,b){this.b=a;this.a=b;Mh(b,'count')}
	function dl(a){this.b=a;this.a=nj(this.b.a).Kb()}
	function CJ(a){wJ();this.c=uJ;this.d=vJ;this.b=a}
	function iab(a,b,c){gab.call(this,a,b);this.a=c}
	function mab(a,b,c){gab.call(this,a,b);this.a=c}
	function yU(a,b){Cxb(b,a.c.length);return a.c[b]}
	function PQ(a,b){Wv(yU(a.a,5),18).ib(b);return a}
	function RQ(a,b){Wv(yU(a.a,0),18).ib(b);return a}
	function SQ(a,b){Wv(yU(a.a,1),18).ib(b);return a}
	function TQ(a,b){Wv(yU(a.a,2),18).ib(b);return a}
	function UQ(a,b){Wv(yU(a.a,3),18).ib(b);return a}
	function VQ(a,b){Wv(yU(a.a,4),18).ib(b);return a}
	function iS(a){gS(a,(sK(),oK));a.e=true;return a}
	function Pt(a){Nt();var b;b=Mt.ec(a);return Qt(b)}
	function Pkb(a,b){var c;c=Mkb(a,b);c.g=2;return c}
	function _ob(a,b){var c;for(c=0;c<b;++c){a[c]=0}}
	function YW(a,b){a.b=b.b;a.c=b.c;a.d=b.d;a.a=b.a}
	function Hub(a){a.a.b=a.b;a.b.a=a.a;a.a=a.b=null}
	function NX(a){return a.b.c.length+a.e.c.length}
	function zv(a){return Array.isArray(a)&&a.ad===kI}
	function ol(a,b){return Il(),Tl(new Tob(a),b)!=-1}
	function vv(a,b,c,d,e,f){return wv(a,b,c,d,e,0,f)}
	function BJ(a,b,c){wJ();FJ.call(this,a.b,b,c,a.d)}
	function AJ(a,b){wJ();FJ.call(this,a.b,b,a.c,a.d)}
	function uU(a,b,c){Fxb(b,a.c.length);fxb(a.c,b,c)}
	function mpb(a,b){Cxb(b,a.a.length);return a.a[b]}
	function kpb(c){c.sort(function(a,b){return a-b})}
	function _b(a){if(a==null){throw new Vlb}return a}
	function lv(a){if(a==null){throw new Vlb}this.a=a}
	function Us(a,b,c){if(a.a!=b){throw new nsb}a.a=c}
	function wxb(a,b){if(!a){throw new slb((bmb(),b))}}
	function Axb(a,b){if(!a){throw new rkb((bmb(),b))}}
	function Dxb(a){if(a==null){throw new Vlb}return a}
	function Yub(a){ytb.call(this,new wub);Ue(this,a)}
	function xtb(a){this.a=new otb(a.Y());Ue(this,a)}
	function Lsb(a){this.c=a;this.a=new jtb(this.c.a)}
	function Er(a){Gi();this.a=(ypb(),new rqb(_b(a)))}
	function xkb(){xkb=iI;vkb=(xkb(),false);wkb=true}
	function Glb(){Glb=iI;Flb=xv(PF,Txb,24,256,0,1)}
	function k8(){k8=iI;j8=PQ(RQ(new WQ,(d0(),z_)),X_)}
	function aS(){aS=iI;ZR=new yS;_R=new FS;$R=new AS}
	function dw(a){return a!=null&&fw(a)&&!(a.ad===kI)}
	function _v(a){return !Array.isArray(a)&&a.ad===kI}
	function Wmb(a,b){return ew(b)?Xmb(a,b):Mtb(a.d,b)}
	function Ysb(a,b){return aw(b,17)&&Zsb(a,Wv(b,17))}
	function $sb(a,b){return aw(b,17)&&_sb(a,Wv(b,17))}
	function bub(a,b){return !(Utb(a.a,b)===undefined)}
	function Vsb(a,b){var c;c=Usb(a);zpb(c,b);return c}
	function Kt(a,b){!a&&(a=[]);a[a.length]=b;return a}
	function rsb(a,b,c){Wsb(a.a,b);return usb(a,b.e,c)}
	function omb(a,b,c){bmb();return a.lastIndexOf(b,c)}
	function xxb(a,b,c){if(!a){throw new slb(Jxb(b,c))}}
	function Zob(a,b,c){var d;for(d=0;d<b;++d){a[d]=c}}
	function Qo(a,b){var c;c=a.a.Y();bc(b,c);return c-b}
	function ud(a){var b;b=a.i;return !b?(a.i=a.T()):b}
	function Ae(a){var b;b=a.c;return !b?(a.c=a.gb()):b}
	function ki(a){var b;b=a.c;return !b?(a.c=a.Jb()):b}
	function nj(a){if(a.e){return a.e}return a.e=a.Ob()}
	function oj(a){if(a.f){return a.f}return a.f=a.Pb()}
	function Hv(a,b){return Ev(a.l&b.l,a.m&b.m,a.h&b.h)}
	function flb(a,b){return glb((Dxb(a),a),(Dxb(b),b))}
	function Ed(a){return aw(a,20)?Wv(a,20).tb():a.mb()}
	function Ml(a){Il();_b(a);while(a.G()){a.H();a.I()}}
	function Uab(a){var b;b=a;while(b.g){b=b.g}return b}
	function LY(a){a.b.i.a+=a.a.f*(a.a.a-1);return null}
	function Sob(a){uxb(a.b!=-1);a.c.vb(a.a=a.b);a.b=-1}
	function Dnb(a){Bxb(a.b>0);return a.a.sb(a.c=--a.b)}
	function $f(a){a.b?$f(a.b):a.d.V()&&Wmb(a.f.b,a.e)}
	function wg(a){Yf(a.d);if(a.d.d!=a.c){throw new nsb}}
	function ksb(a,b){if(b[WAb]!=a[WAb]){throw new nsb}}
	function Pl(a,b){Il();_b(a);_b(b);return new tm(a,b)}
	function Zq(a,b){Gi();Yq.call(this,a,Yi(new opb(b)))}
	function mg(a,b,c,d){this.a=a;_f.call(this,a,b,c,d)}
	function GI(a){this.a=Math.cos(a);this.b=Math.sin(a)}
	function GQ(a,b,c){_J.call(this,a);this.b=b;this.a=c}
	function NR(a){this.b=new GU;this.a=new GU;this.c=a}
	function sY(a){this.c=new FI;this.a=new GU;this.b=a}
	function tu(){tu=iI;ru=new uu(false);su=new uu(true)}
	function o7(a,b){++a.d;return a.c[a.c.length]=b,true}
	function $ub(a,b){TI(a.d,b,a.b.b,a.b);++a.a;a.c=null}
	function stb(a,b){var c;c=a.a.db(b,a);return c==null}
	function cxb(a,b){var c;c=a.slice(0,b);return Cv(c,a)}
	function exb(a,b){var c;c=new Array(b);return Cv(c,a)}
	function usb(a,b,c){var d;d=a.b[b];a.b[b]=c;return d}
	function apb(a,b){var c;for(c=0;c<b;++c){a[c]=null}}
	function cpb(a,b){var c;for(c=0;c<b;++c){a[c]=false}}
	function r1(a,b){return xkb(),Wv(b.b,24).a<a?wkb:vkb}
	function s1(a,b){return xkb(),Wv(b.a,24).a<a?wkb:vkb}
	function Tk(a,b){return Wv(ki(nj(a.a)).sb(b),21).yb()}
	function dq(a){return mp(),Wl(Rm(a.a).mb(),(xp(),vp))}
	function Uh(a){return Il(),new Im(Dl(ul(a.a,new yl)))}
	function fw(a){return typeof a===Sxb||typeof a===Zxb}
	function Ct(a){$wnd.setTimeout(function(){throw a},0)}
	function oI(a,b){return a>0?new tI(a-1,b):new tI(a,b)}
	function Ib(a){_b(a);return aw(a,345)?Wv(a,345):xb(a)}
	function Rwb(a,b){return bwb(a.a,b,(xkb(),vkb))==null}
	function Po(a,b){var c;c=a.a.Y();$b(b,c);return c-1-b}
	function hu(a,b,c){var d;d=gu(a,b);iu(a,b,c);return d}
	function Nkb(a,b,c){var d;d=Mkb(a,b);$kb(c,d);return d}
	function Mkb(a,b){var c;c=new Kkb;c.i=a;c.d=b;return c}
	function Mk(a,b,c){this.a=a;bc(c,b);this.c=b;this.b=c}
	function Av(a,b,c){zxb(c==null||sv(a,c));return a[b]=c}
	function Pm(a){a.a=null;a.e=null;Ymb(a.b);a.d=0;++a.c}
	function Pmb(a){slb.call(this,(bmb(),a==null?Wxb:a))}
	function Omb(a){slb.call(this,(bmb(),a==null?Wxb:a))}
	function Om(a){var b;return b=a.f,!b?(a.f=new Pp(a)):b}
	function Jd(a){var b;return b=a.k,!b?(a.k=new Qg(a)):b}
	function Be(a){var b;b=a.e;return !b?(a.e=new Fp(a)):b}
	function Vg(a){var b;b=a.e;!b&&(a.e=b=a.gb());return b}
	function d6(a){var b,c;b=a.c.f.d;c=a.d.f.d;return b==c}
	function Gfb(a,b){var c;c=new Dfb(a);Afb(c,b);return c}
	function umb(a,b){a.a+=String.fromCharCode(b);return a}
	function hX(a){if(!a.a&&!!a.d){return a.d.b}return a.a}
	function _H(a){if(UH(a)){return a|0}return a.l|a.m<<22}
	function xo(a){Mh(a,Uyb);return $s(PH(PH(5,a),a/10|0))}
	function Smb(a,b){return ew(b)?Tmb(a,b):re(Ktb(a.d,b))}
	function tl(a){return aw(a,19)?Wv(a,19).Y():Ul(a.mb())}
	function pr(a){return a?new xtb((Oh(),a)):qr(null.mb())}
	function Tb(a,b){return gw(a)===gw(b)||a!=null&&rb(a,b)}
	function zT(a,b){return vT(),glb(Ixb(Yv(a)),Ixb(Yv(b)))}
	function Ep(a){return mp(),Wl(a.a.bb().mb(),(xp(),wp))}
	function Gi(){Gi=iI;hi();Fi=new gr((ypb(),ypb(),vpb))}
	function kr(){kr=iI;hi();jr=new lr((ypb(),ypb(),xpb))}
	function Exb(a,b){if(a==null){throw new Wlb((bmb(),b))}}
	function Zfb(a,b){Mfb();return (a-b<=0?0-(a-b):a-b)<0.2}
	function U0(a,b){return a.i.b<b.i.b?-1:a.i.b==b.i.b?0:1}
	function Zjb(a,b,c,d){a.g[b.e][c.e]=d;a.g[c.e][b.e]=d}
	function vnb(a){uxb(a.c!=-1);a.d.vb(a.c);a.b=a.c;a.c=-1}
	function Sub(a){this.c=a;this.b=a.a.b.a;lsb(a.a.c,this)}
	function ufb(a){efb.call(this,new opb(a));this.a=new FI}
	function er(){Bk.call(this,new ir(new ntb));this.a=this}
	function OQ(){JQ();this.b=(mp(),new ntb);this.a=new ntb}
	function zp(){xp();return Bv(tv(jy,1),uyb,188,0,[vp,wp])}
	function Ih(){Gh();return Bv(tv(dx,1),uyb,159,0,[Fh,Eh])}
	function ss(){qs();return Bv(tv(Ty,1),uyb,205,0,[ps,os])}
	function psb(a){We(a.a);a.b=xv(UF,syb,1,a.b.length,4,1)}
	function krb(a){!a.b&&(a.b=new Frb(a.c.W()));return a.b}
	function cwb(a,b){var c;c=new zwb;ewb(a,b,c);return c.d}
	function Qkb(a,b){var c;c=Mkb('',a);c.k=b;c.g=1;return c}
	function We(a){var b;for(b=a.mb();b.G();){b.H();b.I()}}
	function yJ(a,b){return aw(b,79)&&emb(a.b,Wv(b,79).mc())}
	function Z3(){X3();return Bv(tv(iD,1),uyb,175,0,[V3,W3])}
	function a8(){Z7();return Bv(tv(WD,1),uyb,193,0,[X7,Y7])}
	function s9(){p9();return Bv(tv(hE,1),uyb,192,0,[o9,n9])}
	function Umb(a,b,c){return ew(b)?Vmb(a,b,c):Ltb(a.d,b,c)}
	function h5(a,b,c){a.i=0;a.e=0;if(b==c){return}d5(a,b,c)}
	function g5(a,b,c){a.i=0;a.e=0;if(b==c){return}c5(a,b,c)}
	function t6(a,b,c,d){this.d=a;this.b=b;this.a=c;this.c=d}
	function VN(a,b,c,d){this.d=a;this.e=b;this.c=c;this.b=d}
	function E5(a,b,c,d){this.a=a;this.c=b;this.b=c;this.d=d}
	function vO(a,b,c,d){Ac.call(this,a,b);this.a=c;this.b=d}
	function Jtb(a,b){var c;c=Ttb(a.a,b);return c==null?[]:c}
	function kmb(a,b){bmb();if(a==b){return 0}return a<b?-1:1}
	function CR(a,b){var c;c=hR(a.f,b);return vI(zI(c),a.f.d)}
	function qsb(a,b){return Ysb(a.a,b)?a.b[Wv(b,17).e]:null}
	function ovb(a,b){return gw(a)===gw(b)||a!=null&&rb(a,b)}
	function Pu(a,b){if(b==null){throw new Vlb}return Qu(a,b)}
	function Zv(a){Hxb(a==null||fw(a)&&!(a.ad===kI));return a}
	function irb(a){!a.a&&(a.a=new Nrb(a.c.bb()));return a.a}
	function lrb(a){!a.d&&(a.d=new zqb(a.c.fb()));return a.d}
	function _I(a){a.a.a=a.c;a.c.b=a.a;a.a.b=a.c.a=null;a.b=0}
	function Cnb(a){return Bxb(a.b<a.d.Y()),a.d.sb(a.c=a.b++)}
	function Xmb(a,b){return b==null?Mtb(a.d,null):eub(a.e,b)}
	function $9(a,b){this.g=a;this.d=Bv(tv(qB,1),Nzb,9,0,[b])}
	function KS(a){this.c=a;this.b=new Wwb(Wv(_b(new MS),56))}
	function hW(){this.a=new jJ;this.b=(Mh(3,Vyb),new HU(3))}
	function Dg(a,b){this.a=a;yg.call(this,a,Wv(a.d,20).ub(b))}
	function rab(a,b,c,d){this.a=a;this.c=b;this.b=c;this.d=d}
	function Zlb(a,b,c){this.a=Yxb;this.d=a;this.b=b;this.c=c}
	function $W(){XW(this);this.d=0;this.b=0;this.a=0;this.c=0}
	function Bcb(){this.b=new vtb;this.d=new aJ;this.e=new Uvb}
	function ypb(){ypb=iI;vpb=new Kpb;wpb=new aqb;xpb=new iqb}
	function Lc(){Lc=iI;Ic=new Oc;Hc=new Rc;Jc=new Uc;Kc=new Xc}
	function Z7(){Z7=iI;X7=new $7('GREEDY',0);Y7=new $7(zAb,1)}
	function zQ(){zQ=iI;yQ=new AJ((eM(),EL),(xkb(),xkb(),wkb))}
	function w9(){w9=iI;v9=PQ(UQ(TQ(new WQ,(d0(),N_)),B_),M_)}
	function N6(a,b){var c;c=M6(b);return Wv(Smb(a.c,c),24).a}
	function PR(a,b){var c;c=utb(a.a,b);c&&(b.f=null);return c}
	function Krb(a){var b;b=a.b.ob();Mrb(b,b.length);return b}
	function NP(a){if(a<0){return -1}if(a>0){return 1}return 0}
	function mP(){kP();return Bv(tv(Rz,1),uyb,171,0,[jP,gP,hP])}
	function gL(){eL();return Bv(tv(Fz,1),uyb,166,0,[cL,bL,dL])}
	function WM(){UM();return Bv(tv(Jz,1),uyb,149,0,[TM,SM,RM])}
	function FO(){DO();return Bv(tv(Pz,1),uyb,225,0,[BO,AO,CO])}
	function ZZ(){XZ();return Bv(tv(VB,1),uyb,221,0,[VZ,WZ,UZ])}
	function A8(){x8();return Bv(tv(_D,1),uyb,173,0,[w8,v8,u8])}
	function QH(a,b){return SH(Hv(UH(a)?YH(a):a,UH(b)?YH(b):b))}
	function XI(a){return a.b==0?null:(Bxb(a.b!=0),$I(a,a.a.a))}
	function zfb(a){a.d=a.d-15;a.b=a.b-15;a.c=a.c+15;a.a=a.a+15}
	function Rn(a){this.b=a;this.c=a;a.e=null;a.c=null;this.a=1}
	function nZ(a,b,c){this.d=a;this.b=new GU;this.c=b;this.a=c}
	function sfb(a,b){qfb(this,new HI(a.a,a.b));rfb(this,Eo(b))}
	function Xf(a,b){if(b===a){return true}Yf(a);return a.d.t(b)}
	function Oeb(a){if(a==neb||a==keb){return true}return false}
	function VO(a){if(!Qob(new Tob(zW(a.e)))){return}OO(a);QO(a)}
	function Y2(a,b){var c;c=Wv(vub(a.e,b),116);!!c&&(a.d=true)}
	function Lrb(a,b){var c;c=a.b.pb(b);Mrb(c,a.b.Y());return c}
	function a6(a){var b;b=e6(a,(sN(),rN));b+=e6(a,ZM);return b}
	function f6(a,b,c){j6(a,b,c,(sN(),ZM),a.f);j6(a,b,c,rN,a.n)}
	function PX(a,b){!!a.f&&BU(a.f.f,a);a.f=b;!!a.f&&vU(a.f.f,a)}
	function rX(a,b){!!a.d&&BU(a.d.a,a);a.d=b;!!a.d&&vU(a.d.a,a)}
	function eW(a,b){!!a.d&&BU(a.d.b,a);a.d=b;!!a.d&&vU(a.d.b,a)}
	function dW(a,b){!!a.c&&BU(a.c.e,a);a.c=b;!!a.c&&vU(a.c.e,a)}
	function Zdb(a){var b;b=Eo(a.b);Ue(b,a.c);Ue(b,a.i);return b}
	function Qxb(){if(Lxb==256){Kxb=Mxb;Mxb={};Lxb=0}++Lxb}
	function Gbb(){Gbb=iI;Fbb=new Hbb(pzb,0);Ebb=new Hbb(ozb,1)}
	function fgb(){fgb=iI;dgb=new ggb(ozb,0);egb=new ggb(pzb,1)}
	function hgb(){fgb();return Bv(tv(fF,1),uyb,223,0,[dgb,egb])}
	function xab(){vab();return Bv(tv(rE,1),uyb,242,0,[uab,tab])}
	function Ibb(){Gbb();return Bv(tv(BE,1),uyb,248,0,[Fbb,Ebb])}
	function Nbb(){Lbb();return Bv(tv(CE,1),uyb,247,0,[Jbb,Kbb])}
	function ncb(){lcb();return Bv(tv(JE,1),uyb,194,0,[jcb,kcb])}
	function Ohb(){Mhb();return Bv(tv(pF,1),uyb,174,0,[Khb,Lhb])}
	function Hpb(a){ypb();return aw(a,63)?new csb(a):new Rqb(a)}
	function Rm(a){var b;return b=a.g,Wv(!b?(a.g=new En(a)):b,20)}
	function Ktb(a,b){return Itb(a,b,Jtb(a,b==null?0:a.b.Vc(b)))}
	function tX(a){var b;return b=lX(a),'n_'+(b==null?Dlb(a.k):b)}
	function ob(a){return Ikb(tb(a))+'@'+(vb(a)>>>0).toString(16)}
	function ykb(a,b){return zkb(Ckb((Dxb(a),a)),Ckb((Dxb(b),b)))}
	function Tmb(a,b){return b==null?re(Ktb(a.d,null)):cub(a.e,b)}
	function Rr(a,b,c){return new Ur(a.c,pk(a.b,wk(a.d,b,c)),a.a)}
	function hw(a){return Math.max(Math.min(a,$xb),-2147483648)|0}
	function Ptb(a){this.e=a;this.b=this.e.a.entries();this.a=[]}
	function xf(a){this.c=a;this.b=new rnb((new inb(this.c.a)).a)}
	function Em(a){this.b=(Il(),Il(),Il(),Gl);this.a=Wv(_b(a),35)}
	function EJ(a,b,c){wJ();DJ.call(this,a,b);c!=null&&(this.c=c)}
	function cc(a,b,c){if(a<0||b<a||b>c){throw new okb(Wb(a,b,c))}}
	function $b(a,b){if(a<0||a>=b){throw new okb(Ub(a,b))}return a}
	function ac(a,b){if(a==null){throw new Wlb((bmb(),b))}return a}
	function Dm(a){if(!Cm(a)){throw new nvb}a.c=a.b;return a.b.H()}
	function jI(a){function b(){}
	;b.prototype=a||{};return new b}
	function rr(a){var b;b=new wtb(op(a.length));zpb(b,a);return b}
	function Gub(a){var b;b=a.c.b.b;a.b=b;a.a=a.c.b;b.a=a.c.b.b=a}
	function jwb(a){this.b=null;!a&&(a=(hsb(),hsb(),gsb));this.a=a}
	function W6(a){this.b=a;this.a=new Fnb(this.b,this.b.c.length)}
	function Li(a){Gi();_b(a);return a?Ki(a):Ki(Bo(new Tob(null)))}
	function rt(a,b){var c=qt[a.charCodeAt(0)];return c==null?a:c}
	function Skb(a,b){var c=a.a=a.a||[];return c[b]||(c[b]=a.Oc(b))}
	function CU(a,b,c){var d;Gxb(b,c,a.c.length);d=c-b;hxb(a.c,b,d)}
	function Ur(a,b,c){Ch.call(this,b.a);this.c=a;this.b=b;this.a=c}
	function ko(a){Vm(a.c);a.e=a.a=a.c;a.c=a.c.c;++a.d;return a.a.f}
	function lo(a){Vm(a.e);a.c=a.a=a.e;a.e=a.e.e;--a.d;return a.a.f}
	function MX(a){return MI(Bv(tv(qz,1),Fzb,10,0,[a.f.i,a.i,a.a]))}
	function GK(){EK();return Bv(tv(Cz,1),uyb,107,0,[DK,AK,BK,CK])}
	function PK(){NK();return Bv(tv(Dz,1),uyb,122,0,[MK,KK,JK,LK])}
	function ON(){MN();return Bv(tv(Mz,1),uyb,139,0,[KN,LN,JN,IN])}
	function FN(){DN();return Bv(tv(Lz,1),uyb,150,0,[BN,CN,AN,zN])}
	function Nc(){Lc();return Bv(tv(Bw,1),uyb,136,0,[Ic,Hc,Jc,Kc])}
	function iT(){cT();return Bv(tv(yA,1),uyb,201,0,[$S,bT,_S,aT])}
	function wN(){sN();return Bv(tv(Kz,1),uyb,32,0,[qN,$M,ZM,pN,rN])}
	function xK(){sK();return Bv(tv(Bz,1),uyb,59,0,[qK,pK,oK,nK,rK])}
	function c8(){c8=iI;b8=Cc((Z7(),Bv(tv(WD,1),uyb,193,0,[X7,Y7])))}
	function _3(){_3=iI;$3=Cc((X3(),Bv(tv(iD,1),uyb,175,0,[V3,W3])))}
	function u9(){u9=iI;t9=Cc((p9(),Bv(tv(hE,1),uyb,192,0,[o9,n9])))}
	function Jhb(){Hhb();return Bv(tv(oF,1),uyb,140,0,[Fhb,Ghb,Ehb])}
	function Jgb(){Hgb();return Bv(tv(jF,1),uyb,218,0,[Fgb,Egb,Ggb])}
	function fjb(){djb();return Bv(tv(rF,1),uyb,219,0,[cjb,ajb,bjb])}
	function Sjb(){Qjb();return Bv(tv(sF,1),uyb,153,0,[Njb,Pjb,Ojb])}
	function ekb(){ckb();return Bv(tv(uF,1),uyb,172,0,[_jb,akb,bkb])}
	function Vmb(a,b,c){return b==null?Ltb(a.d,null,c):dub(a.e,b,c)}
	function wk(a,b,c){return new sk(a,false,null,(Gh(),Fh),true,b,c)}
	function tsb(a,b){return $sb(a.a,b)?usb(a,Wv(b,17).e,null):null}
	function ql(a){_b(a);return Ql((Il(),new Im(Dl(ul(a.a,new yl)))))}
	function Epb(a){ypb();if(!a){return nqb(),mqb}return new Ipb(a)}
	function Oo(a,b){var c,d;d=Qo(a,b);c=a.a.ub(d);return new bp(a,c)}
	function Cpb(a,b){var c,d;d=a.Y();for(c=0;c<d;c++){a.wb(c,b[c])}}
	function Xbb(a,b,c){var d;d=new Wbb;d.b=b;d.a=c;++b.b;vU(a.d,d)}
	function fW(a,b,c){!!a.d&&BU(a.d.b,a);a.d=b;!!a.d&&uU(a.d.b,c,a)}
	function Mnb(a,b,c){Gxb(b,c,a.Y());this.c=a;this.a=b;this.b=c-b}
	function vP(a,b,c,d){sP(this);this.d=a;this.b=b;this.a=c;this.c=d}
	function zr(a,b){Bk.call(this,Fpb(_b(a),_b(b)));this.b=a;this.c=b}
	function Fnb(a,b){this.a=a;wnb.call(this,a);Fxb(b,a.Y());this.b=b}
	function FJ(a,b,c,d){wJ();EJ.call(this,a,b,c);d!=null&&(this.d=d)}
	function e5(a,b,c){a.i=0;a.e=0;if(b==c){return}d5(a,b,c);c5(a,b,c)}
	function Rob(a){Bxb(a.a<a.c.c.length);a.b=a.a++;return a.c.c[a.b]}
	function avb(a){Bxb(a.b.b!=a.d.a);a.c=a.b=a.b.b;--a.a;return a.c.c}
	function gwb(a,b){var c;c=1-b;a.a[c]=hwb(a.a[c],c);return hwb(a,b)}
	function S2(a){var b;b=(Ieb(),Ieb(),heb);a.d&&Z2(a);ni();return b}
	function ZH(a){var b;if(UH(a)){b=a;return b==-0.?0:b}return Nv(a)}
	function Ii(a){var b;b=(_b(a),new IU((Oh(),a)));Dpb(b);return Yi(b)}
	function Rl(a){Il();var b;while(true){b=a.H();if(!a.G()){return b}}}
	function Yn(a){Xn(a);Vm(a.c);a.e=a.a=a.c;a.c=a.c.b;++a.d;return a.a}
	function Zn(a){Xn(a);Vm(a.e);a.c=a.a=a.e;a.e=a.e.d;--a.d;return a.a}
	function Wf(a){var b;b=a.Y();if(b==0){return}a.d.Q();a.f.c-=b;$f(a)}
	function At(a,b,c){var d;d=yt();try{return xt(a,b,c)}finally{Bt(d)}}
	function zt(b){return function(){return At(b,this,arguments);var a}}
	function sl(a){if(aw(a,19)){return Wv(a,19).V()}return !a.mb().G()}
	function gr(a){Gi();this.a=(ypb(),aw(a,63)?new csb(a):new Rqb(a))}
	function Mhb(){Mhb=iI;Khb=new Nhb(qzb,0);Lhb=new Nhb('TOP_LEFT',1)}
	function Lbb(){Lbb=iI;Jbb=new Mbb('DOWN',0);Kbb=new Mbb('UP',1)}
	function p9(){p9=iI;o9=new q9('LAYER_SWEEP',0);n9=new q9(zAb,1)}
	function vab(){vab=iI;uab=new wab('UPPER',0);tab=new wab('LOWER',1)}
	function yxb(a){if(a<0){throw new Ulb('Negative array size: '+a)}}
	function hnb(a,b){if(aw(b,21)){return ee(a.a,Wv(b,21))}return false}
	function Esb(a,b){if(aw(b,21)){return ee(a.a,Wv(b,21))}return false}
	function Kub(a,b){if(aw(b,21)){return ee(a.a,Wv(b,21))}return false}
	function IV(a){var b;b=new hW;qJ(b,a);sJ(b,(eM(),CL),null);return b}
	function je(a,b){return b===a?'(this Map)':(bmb(),b==null?Wxb:xb(b))}
	function Ld(a,b,c,d){return aw(c,63)?new ug(a,b,c,d):new mg(a,b,c,d)}
	function BM(){zM();return Bv(tv(Hz,1),uyb,100,0,[yM,xM,uM,vM,wM])}
	function OM(){KM();return Bv(tv(Iz,1),uyb,28,0,[JM,IM,HM,EM,GM,FM])}
	function kK(){iK();return Bv(tv(Az,1),uyb,103,0,[cK,fK,gK,hK,dK,eK])}
	function $K(){YK();return Bv(tv(Ez,1),uyb,133,0,[WK,UK,XK,SK,VK,TK])}
	function YM(){YM=iI;XM=Cc((UM(),Bv(tv(Jz,1),uyb,149,0,[TM,SM,RM])))}
	function iL(){iL=iI;hL=Cc((eL(),Bv(tv(Fz,1),uyb,166,0,[cL,bL,dL])))}
	function C8(){C8=iI;B8=Cc((x8(),Bv(tv(_D,1),uyb,173,0,[w8,v8,u8])))}
	function EX(){CX();return Bv(tv(pB,1),uyb,132,0,[AX,zX,xX,BX,yX,wX])}
	function i4(){g4();return Bv(tv(jD,1),uyb,125,0,[e4,b4,f4,d4,c4,a4])}
	function Vl(a){Il();return umb(Gb((Oh(),Nh),umb(new zmb,91),a),93).a}
	function Gpb(a,b){ypb();var c;c=a.ob();ipb(c,0,c.length,b);Cpb(a,c)}
	function G3(a,b,c,d,e){this.c=a;this.e=b;this.d=c;this.b=d;this.a=e}
	function Peb(a,b,c,d,e){Ac.call(this,a,b);this.a=c;this.b=d;this.c=e}
	function Ahb(a,b,c,d,e){Ac.call(this,a,b);this.a=c;this.b=d;this.c=e}
	function QT(a,b,c){this.a=b;this.c=a;this.b=(_b(c),new IU((Oh(),c)))}
	function $U(){tU(this);this.b=new HI(Uzb,Uzb);this.a=new HI(Vzb,Vzb)}
	function X3(){X3=iI;V3=new Y3('QUADRATIC',0);W3=new Y3('SCANLINE',1)}
	function Te(){throw new Imb('Add not supported on this collection')}
	function pq(a){var b,c;c=qmb(a.Zb());b=a.Yb();return b==1?c:c+' x '+b}
	function _ub(a){Bxb(a.b!=a.d.c);a.c=a.b;a.b=a.b.a;++a.a;return a.c.c}
	function Ukb(a){if(a.Tc()){return null}var b=a.k;var c=fI[b];return c}
	function bc(a,b){if(a<0||a>b){throw new okb(Vb(a,b,'index'))}return a}
	function Zf(a,b){var c;Yf(a);c=a.d.nb(b);if(c){--a.f.c;$f(a)}return c}
	function RT(a,b,c){var d;d=(_b(a),new IU((Oh(),a)));PT(new QT(d,b,c))}
	function cmb(a,b){return kmb((bmb(),a.toLowerCase()),b.toLowerCase())}
	function rmb(a,b){return kmb((bmb(),a.toLowerCase()),b.toLowerCase())}
	function Jwb(){Fwb();return Bv(tv(DH,1),uyb,138,0,[Bwb,Cwb,Dwb,Ewb])}
	function bxb(a,b,c,d){Array.prototype.splice.apply(a,[b,c].concat(d))}
	function TI(a,b,c,d){var e;e=new mvb;e.c=b;e.b=c;e.a=d;d.b=c.a=e;++a.b}
	function Sm(a,b){var c;c=Hpb(Bo(new mo(a,b)));Ml(new mo(a,b));return c}
	function Su(d,a,b){if(b){var c=b.gc();d.a[a]=c(b)}else{delete d.a[a]}}
	function iu(d,a,b){if(b){var c=b.gc();b=c(b)}else{b=undefined}d.a[a]=b}
	function Dfb(a){yfb(this);this.d=a.d;this.c=a.c;this.a=a.a;this.b=a.b}
	function n7(){this.g=new q7;this.c=new q7;this.a=new GU;this.k=new GU}
	function dR(){this.d=new OQ;this.a=new tV;this.c=new SV;this.b=new CV}
	function oR(){this.i=new GU;this.g=new FI;this.n=new xS;this.q=new xS}
	function _Y(a,b,c,d){this.e=a;this.b=new GU;this.d=b;this.a=c;this.c=d}
	function oT(){oT=iI;lT=new FT;mT=new HT;jT=new JT;kT=new LT;nT=new NT}
	function DO(){DO=iI;BO=new EO(ozb,0);AO=new EO(qzb,1);CO=new EO(pzb,2)}
	function IK(){IK=iI;HK=Cc((EK(),Bv(tv(Cz,1),uyb,107,0,[DK,AK,BK,CK])))}
	function RK(){RK=iI;QK=Cc((NK(),Bv(tv(Dz,1),uyb,122,0,[MK,KK,JK,LK])))}
	function QN(){QN=iI;PN=Cc((MN(),Bv(tv(Mz,1),uyb,139,0,[KN,LN,JN,IN])))}
	function HN(){HN=iI;GN=Cc((DN(),Bv(tv(Lz,1),uyb,150,0,[BN,CN,AN,zN])))}
	function pcb(){pcb=iI;ocb=Cc((lcb(),Bv(tv(JE,1),uyb,194,0,[jcb,kcb])))}
	function Qhb(){Qhb=iI;Phb=Cc((Mhb(),Bv(tv(pF,1),uyb,174,0,[Khb,Lhb])))}
	function Ao(a){_b(a);return aw(a,19)?new IU((Oh(),Wv(a,19))):Bo(a.mb())}
	function yY(a){return Ckb(Ixb(Xv(rJ(a,(Rib(),Vhb)))))&&rJ(a,uib)!=null}
	function UY(a){return Ckb(Ixb(Xv(rJ(a,(Rib(),Vhb)))))&&rJ(a,uib)!=null}
	function jkb(a,b,c,d){b==null&&(b=Wxb);a.a+=''+(bmb(),b.substr(c,d-c))}
	function Mrb(a,b){var c;for(c=0;c<b;++c){Av(a,c,new Xrb(Wv(a[c],21)))}}
	function Hd(a,b){var c,d;c=Wv(sp(a.b,b),19);if(c){d=c.Y();c.Q();a.c-=d}}
	function DU(a,b,c){var d;d=(Cxb(b,a.c.length),a.c[b]);a.c[b]=c;return d}
	function itb(a){Bxb(a.a<a.c.a.length);a.b=a.a;gtb(a);return a.c.b[a.b]}
	function Ul(a){Il();var b;b=0;while(a.G()){a.H();b=PH(b,1)}return $s(b)}
	function hub(a){this.d=a;this.b=this.d.a.entries();this.a=this.b.next()}
	function DT(a){this.g=a;this.f=new GU;this.a=Qlb(this.g.c.c,this.g.d.c)}
	function kt(a){it();this.e=null;this.f=null;this.a='';this.b=a;this.a=''}
	function wub(){ntb.call(this);pub(this);this.b.b=this.b;this.b.a=this.b}
	function Bt(a){a&&It((Gt(),Ft));--ut;if(a){if(wt!=-1){Dt(wt);wt=-1}}}
	function bW(a){if(!a.c||!a.d){return false}return !!a.c.f&&a.c.f==a.d.f}
	function pt(){if(Date.now){return Date.now()}return (new Date).getTime()}
	function lX(a){if(a.c.c.length!=0){return Wv(yU(a.c,0),33).a}return null}
	function OX(a){if(a.c.c.length!=0){return Wv(yU(a.c,0),33).a}return null}
	function qd(a){a.d=3;a.c=sm(a);if(a.d!=2){a.d=0;return true}return false}
	function bgb(a,b,c){this.a=a;this.b=b;this.c=c;vU(a.j,this);vU(b.d,this)}
	function VP(a,b,c,d){var e;a.c?(e=new Gu(hw(d))):(e=new Gu(d));Ru(b,c,e)}
	function Co(a){var b,c;_b(a);b=xo(a.length);c=new HU(b);zpb(c,a);return c}
	function Dv(a){var b,c,d;b=a&azb;c=a>>22&azb;d=a<0?bzb:0;return Ev(b,c,d)}
	function nbb(){kbb();return Bv(tv(zE,1),uyb,141,0,[jbb,gbb,hbb,fbb,ibb])}
	function Sgb(){Pgb();return Bv(tv(kF,1),uyb,115,0,[Lgb,Kgb,Ngb,Mgb,Ogb])}
	function Zib(){Xib();return Bv(tv(qF,1),uyb,85,0,[Wib,Sib,Tib,Uib,Vib])}
	function zK(){zK=iI;yK=Cc((sK(),Bv(tv(Bz,1),uyb,59,0,[qK,pK,oK,nK,rK])))}
	function yN(){yN=iI;xN=Cc((sN(),Bv(tv(Kz,1),uyb,32,0,[qN,$M,ZM,pN,rN])))}
	function DM(){DM=iI;CM=Cc((zM(),Bv(tv(Hz,1),uyb,100,0,[yM,xM,uM,vM,wM])))}
	function F9(){F9=iI;E9=PQ(UQ(UQ(UQ(TQ(new WQ,(d0(),N_)),U_),r_),B_),M_)}
	function TT(a,b){var c,d;for(d=b.mb();d.G();){c=Wv(d.H(),55);ST(a,c,0,0)}}
	function VT(a,b,c){var d,e;for(e=a.mb();e.G();){d=Wv(e.H(),55);UT(d,b,c)}}
	function X8(a,b,c){var d,e;d=0;for(e=0;e<b.length;e++){d+=a.Hc(b[e],d,c)}}
	function AU(a,b){var c;c=(Cxb(b,a.c.length),a.c[b]);hxb(a.c,b,1);return c}
	function Kl(a){var b;_b(a);Yb(true);for(b=0;b<0&&Cm(a);b++){Dm(a)}return b}
	function Ymb(a){var b;a.d=new Ntb(a);a.e=new fub(a);b=a[WAb]|0;a[WAb]=b+1}
	function igb(a){a.g=new vtb;a.o=new vtb;a.c=new vtb;a.j=new GU;a.d=new GU}
	function Fxb(a,b){if(a<0||a>b){throw new okb('Index: '+a+', Size: '+b)}}
	function Cxb(a,b){if(a<0||a>=b){throw new okb('Index: '+a+', Size: '+b)}}
	function uob(a,b){var c,d;c=b.yb();d=Wvb(a,c);return !!d&&ovb(d.e,b.zb())}
	function zbb(a,b){var c;c=a.d;if(b>0){return Wv(yU(c.a,b-1),9)}return null}
	function xv(a,b,c,d,e,f){var g;g=yv(e,d);e!=9&&Bv(tv(a,f),b,c,e,g);return g}
	function pd(a){var b;if(!od(a)){throw new nvb}a.d=1;b=a.c;a.c=null;return b}
	function _f(a,b,c,d){this.f=a;this.e=b;this.d=c;this.b=d;this.c=!d?null:d.d}
	function MH(b,c){if(b&&typeof b==Sxb){try{b.__gwt$exception=c}catch(a){}}}
	function wT(a,b){if(a.a.$b(b.d,a.b)>0){vU(a.c,new WS(b.c,b.d,a.d));a.b=b.d}}
	function W4(a,b){var c;c=glb(a.j,b.j);if(c==0){return glb(a.k,b.k)}return c}
	function C6(a){var b,c;c=Wv(yU(a.f,0),7);b=Wv(rJ(c,(Rib(),uib)),7);return b}
	function M6(a){var b,c;c=Wv(yU(a.f,0),7);b=Wv(rJ(c,(Rib(),uib)),7);return b}
	function B$(a,b){return glb(Ixb(Yv(rJ(a,(Rib(),Cib)))),Ixb(Yv(rJ(b,Cib))))}
	function Ujb(){Ujb=iI;Tjb=Cc((Qjb(),Bv(tv(sF,1),uyb,153,0,[Njb,Pjb,Ojb])))}
	function gkb(){gkb=iI;fkb=Cc((ckb(),Bv(tv(uF,1),uyb,172,0,[_jb,akb,bkb])))}
	function mK(){mK=iI;lK=Cc((iK(),Bv(tv(Az,1),uyb,103,0,[cK,fK,gK,hK,dK,eK])))}
	function aL(){aL=iI;_K=Cc((YK(),Bv(tv(Ez,1),uyb,133,0,[WK,UK,XK,SK,VK,TK])))}
	function QM(){QM=iI;PM=Cc((KM(),Bv(tv(Iz,1),uyb,28,0,[JM,IM,HM,EM,GM,FM])))}
	function k4(){k4=iI;j4=Cc((g4(),Bv(tv(jD,1),uyb,125,0,[e4,b4,f4,d4,c4,a4])))}
	function K1(){I1();return Bv(tv(GC,1),uyb,109,0,[G1,B1,E1,C1,D1,A1,F1,H1])}
	function qM(){oM();return Bv(tv(Gz,1),uyb,41,0,[gM,fM,iM,nM,mM,lM,jM,kM,hM])}
	function Bgb(){zgb();return Bv(tv(iF,1),uyb,123,0,[ygb,xgb,wgb,ugb,tgb,vgb])}
	function bhb(){_gb();return Bv(tv(lF,1),uyb,124,0,[Ygb,Xgb,$gb,Wgb,Zgb,Vgb])}
	function bK(){bK=iI;aK=new DJ('de.cau.cs.kieler.labels.labelManager',null)}
	function ixb(){if(Date.now){return Date.now()}return (new Date).getTime()}
	function Xsb(a){var b;b=Wv(cxb(a.b,a.b.length),11);return new atb(a.a,b,a.c)}
	function dmb(a,b){var c;c=(bmb(),b.length);return emb(imb(a,a.length-c,c),b)}
	function dwb(a,b){var c;c=new zwb;c.c=true;c.d=b.zb();return ewb(a,b.yb(),c)}
	function He(a,b){var c;c=b.yb();return mp(),new Fk(c,Kd(a.b,c,Wv(b.zb(),19)))}
	function BU(a,b){var c;c=zU(a,b,0);if(c==-1){return false}a.vb(c);return true}
	function Cv(a,b){uv(b)!=9&&Bv(tb(b),b._c,b.__elementTypeId$,uv(b),a);return a}
	function Rub(a){ksb(a.c.a.c,a);Bxb(a.b!=a.c.a.b);a.a=a.b;a.b=a.b.a;return a.a}
	function qnb(a){uxb(!!a.c);ksb(a.e,a);a.c.I();a.c=null;a.b=onb(a);lsb(a.e,a)}
	function Acb(a,b,c){a.a=b;a.c=c;a.b.a.Q();_I(a.d);a.e.a.c=xv(UF,syb,1,0,4,1)}
	function Ar(a,b,c){Bk.call(this,Fpb(_b(a),_b(b)));this.b=a;this.c=b;this.a=c}
	function j9(a,b,c,d){this.b=new l9(this);this.a=a;this.c=b;this.e=c;this.d=d}
	function xub(a){$mb.call(this,a,0);pub(this);this.b.b=this.b;this.b.a=this.b}
	function ywb(a,b){qob.call(this,a,b);this.a=xv(yH,syb,183,2,0,1);this.b=true}
	function Qmb(a,b){return ew(b)?b==null?!!Ktb(a.d,null):bub(a.e,b):!!Ktb(a.d,b)}
	function RR(a,b){return Ws(),(a-b>0?a-b:-(a-b))<=$yb||a==b||isNaN(a)&&isNaN(b)}
	function Xs(a,b){Ws();return (a-b>0?a-b:-(a-b))<=$yb||a==b||isNaN(a)&&isNaN(b)}
	function Z5(a){var b,c;b=true;do{b?(c=W5(a)):(c=U5(a));b=!b}while(c);S5(a,a.d)}
	function Ru(a,b,c){var d;if(b==null){throw new Vlb}d=Pu(a,b);Su(a,b,c);return d}
	function sJ(a,b,c){!a.n&&(a.n=new ntb);c==null?Wmb(a.n,b):Umb(a.n,b,c);return a}
	function zU(a,b,c){for(;c<a.c.length;++c){if(ovb(b,a.c[c])){return c}}return -1}
	function b2(a,b){while(b>=a.a.c.length){vU(a.a,new aJ)}return Wv(yU(a.a,b),20)}
	function Fe(a,b){var c;c=Wv(rp(a.a,b),19);if(!c){return null}return Kd(a.b,b,c)}
	function XP(a,b,c){var d;d=Pu(a,Gzb);if(!d){d=new Tu;Ru(a,Gzb,d)}Ru(d.kc(),b,c)}
	function Okb(a,b,c,d,e){var f;f=Mkb(a,b);$kb(c,f);f.g=e?8:0;f.f=d;f.e=e;return f}
	function mo(a,b){var c;this.f=a;this.b=b;c=Wv(Smb(a.b,b),126);this.c=!c?null:c.b}
	function fJ(a,b){var c,d,e;for(d=0,e=b.length;d<e;++d){c=b[d];TI(a,c,a.c.b,a.c)}}
	function GV(a,b,c,d,e,f){var g;g=IV(d);dW(g,e);eW(g,f);Fd(a.a,d,new XV(g,b,c.f))}
	function bab(a,b,c){var d;d=0;a.c[c]>0&&(d+=dab(b));a.b[c]&&(d+=eab(b));return d}
	function vub(a,b){var c;c=Wv(Wmb(a.c,b),176);if(c){Hub(c);return c.e}return null}
	function $s(a){if(RH(a,$xb)>0){return $xb}if(RH(a,eyb)<0){return eyb}return _H(a)}
	function Ph(a){Oh();Mh(a,'size');return _H(VH(WH(a,8),Nyb)?WH(a,8):Nyb),new Amb}
	function ukb(a){skb.call(this,(bmb(),a==null?Wxb:xb(a)),aw(a,46)?Wv(a,46):null)}
	function HU(a){tU(this);wxb(a>=0,'Initial capacity must not be negative')}
	function JQ(){JQ=iI;HQ=VQ(UQ(UQ(new WQ,(d0(),O_)),C_),J_);IQ=TQ(new WQ,G_)}
	function LX(){LX=iI;IX=new UX;GX=new XX;HX=new ZX;FX=new _X;JX=new bY;KX=new dY}
	function Fwb(){Fwb=iI;Bwb=new Gwb('All',0);Cwb=new Kwb;Dwb=new Mwb;Ewb=new Pwb}
	function x8(){x8=iI;w8=new y8(DAb,0);v8=new y8('LONGEST_PATH',1);u8=new y8(zAb,2)}
	function Rv(){Rv=iI;Ov=Ev(azb,azb,524287);Pv=Ev(0,0,524288);Dv(1);Dv(2);Qv=Dv(0)}
	function M1(){M1=iI;L1=Cc((I1(),Bv(tv(GC,1),uyb,109,0,[G1,B1,E1,C1,D1,A1,F1,H1])))}
	function pbb(){pbb=iI;obb=Cc((kbb(),Bv(tv(zE,1),uyb,141,0,[jbb,gbb,hbb,fbb,ibb])))}
	function Ugb(){Ugb=iI;Tgb=Cc((Pgb(),Bv(tv(kF,1),uyb,115,0,[Lgb,Kgb,Ngb,Mgb,Ogb])))}
	function _ib(){_ib=iI;$ib=Cc((Xib(),Bv(tv(qF,1),uyb,85,0,[Wib,Sib,Tib,Uib,Vib])))}
	function zvb(a){tvb();xvb(this,_H(QH(SH(Lv(UH(a)?YH(a):a,24)),bBb)),_H(QH(a,bBb)))}
	function tb(a){return ew(a)?$F:cw(a)?HF:bw(a)?EF:_v(a)?a.$c:zv(a)?a.$c:a.$c||$y}
	function uv(a){return a.__elementTypeCategory$==null?9:a.__elementTypeCategory$}
	function Ht(a){var b,c;if(a.a){c=null;do{b=a.a;a.a=null;c=Lt(b,c)}while(a.a);a.a=c}}
	function It(a){var b,c;if(a.b){c=null;do{b=a.b;a.b=null;c=Lt(b,c)}while(a.b);a.b=c}}
	function oJ(a){nJ();var b,c;c=jzb;for(b=0;b<a.length;b++){a[b]>c&&(c=a[b])}return c}
	function KQ(a,b){var c;c=Wv(Smb(a.b,b),106);if(!c){c=b.rc();Umb(a.b,b,c)}return c}
	function rub(a,b){var c;c=Wv(Smb(a.c,b),176);if(c){uub(a,c);return c.e}return null}
	function R2(a,b,c,d){var e;e=Wv(rub(a.e,b),116);e.b+=c;e.a+=d;tub(a.e,b,e);a.d=true}
	function gtb(a){var b;++a.a;for(b=a.c.a.length;a.a<b;++a.a){if(a.c.b[a.a]){return}}}
	function bt(a){var b,c,d;for(b=(a.g==null&&(a.g=Pt(a)),a.g),c=0,d=b.length;c<d;++c);}
	function Tf(a,b){var c,d;Yf(a);d=a.d.V();c=a.d.ib(b);if(c){++a.f.c;d&&Vf(a)}return c}
	function Mh(a,b){if(a<0){throw new slb(b+' cannot be negative but was: '+a)}return a}
	function Yb(a){if(!a){throw new slb((bmb(),'numberToAdvance must be nonnegative'))}}
	function nm(a){if(!a.a.G()){a.a=a.b.mb();if(!a.a.G()){throw new nvb}}return a.a.H()}
	function Xl(a){Il();var b;_b(a);if(aw(a,108)){b=Wv(a,108);return b}return new km(a)}
	function gu(d,a){var b=d.a[a];var c=(ev(),dv)[typeof b];return c?c(b):kv(typeof b)}
	function K2(a,b){var c,d;for(d=new Tob(a);d.a<d.c.c.length;){c=Wv(Rob(d),7);J2(c,b)}}
	function Z9(a,b){var c,d,e,f;for(d=a.d,e=0,f=d.length;e<f;++e){c=d[e];W9(a.g,c).a=b}}
	function hR(a,b){var c;c=EI(xI(Wv(Smb(a.g,b),10)),RN(Wv(Smb(a.f,b),198).b));return c}
	function sr(a){var b;return !od(Pl((b=(new Snb(a.b.a)).a.bb().mb(),new Ynb(b)),a.a))}
	function bvb(a){var b;uxb(!!a.c);b=a.c.a;$I(a.d,a.c);a.b==a.c?(a.b=b):--a.a;a.c=null}
	function gW(a){return !!a.c&&!!a.d?a.c.f+'('+a.c+')->'+a.d.f+'('+a.d+')':'e_'+txb(a)}
	function gT(a,b){cT();return a==$S&&b==bT||a==bT&&b==$S||a==aT&&b==_S||a==_S&&b==aT}
	function hT(a,b){cT();return a==$S&&b==_S||a==$S&&b==aT||a==bT&&b==aT||a==bT&&b==_S}
	function Bhb(){zhb();return Bv(tv(nF,1),uyb,110,0,[shb,whb,thb,xhb,uhb,yhb,vhb,rhb])}
	function sM(){sM=iI;rM=Cc((oM(),Bv(tv(Gz,1),uyb,41,0,[gM,fM,iM,nM,mM,lM,jM,kM,hM])))}
	function UM(){UM=iI;TM=new VM('OUTSIDE',0);SM=new VM('INSIDE',1);RM=new VM('FIXED',2)}
	function Hhb(){Hhb=iI;Fhb=new Ihb(tzb,0);Ghb=new Ihb('TOP',1);Ehb=new Ihb('BOTTOM',2)}
	function mxb(){mxb=iI;lxb=new qxb;kxb=new oxb('ISO-LATIN-1');jxb=new oxb('ISO-8859-1')}
	function lcb(){lcb=iI;jcb=new mcb('CLASSIC',0);kcb=new mcb('IMPROVE_STRAIGHTNESS',1)}
	function kW(){this.e=new FI;this.a=new $W;this.d=new FI;this.b=new GU;this.c=new GU}
	function kdb(a,b,c){this.b=b;this.a=a;this.c=c;vU(this.a.e,this);vU(this.b.b,this)}
	function Afb(a,b){a.d=Qlb(a.d,b.d);a.c=Nlb(a.c,b.c);a.a=Nlb(a.a,b.a);a.b=Qlb(a.b,b.b)}
	function $I(a,b){var c;c=b.c;b.a.b=b.b;b.b.a=b.a;b.a=b.b=null;b.c=null;--a.b;return c}
	function Jl(a,b){Il();var c;_b(a);_b(b);c=false;while(b.G()){c=c|a.ib(b.H())}return c}
	function pnb(a){var b;ksb(a.e,a);Bxb(a.b);a.c=a.a;b=Wv(a.a.H(),21);a.b=onb(a);return b}
	function sm(a){var b;while(a.b.G()){b=a.b.H();if(a.a.D(b)){return b}}return a.d=2,null}
	function _sb(a,b){if(!!b&&a.b[b.e]==b){Av(a.b,b.e,null);--a.c;return true}return false}
	function TH(a){if(ezb<a&&a<dzb){return a<0?Math.ceil(a):Math.floor(a)}return SH(Jv(a))}
	function rl(a){if(a){if(a.V()){throw new nvb}return a.sb(a.Y()-1)}return Rl(null.mb())}
	function ybb(a,b){var c;c=a.d;if(b<c.a.c.length-1){return Wv(yU(c.a,b+1),9)}return null}
	function $kb(a,b){var c;if(!a){return}b.k=a;var d=Ukb(b);if(!d){fI[a]=[b];return}d.$c=b}
	function O5(a,b){var c,d;d=false;do{a.i?(c=V5(a,b)):(c=X5(a,b));d=d|c}while(c);return d}
	function Bbb(a,b,c){var d,e;d=b;do{e=Ixb(a.n[d.k])+c;a.n[d.k]=e;d=a.a[d.k]}while(d!=b)}
	function M4(a){var b,c;for(c=new Tob(a.a.b);c.a<c.c.c.length;){b=Wv(Rob(c),25);b.vc()}}
	function bI(){cI();var a=aI;for(var b=0;b<arguments.length;b++){a.push(arguments[b])}}
	function dn(a,b){var c,d;for(c=0,d=a.Y();c<d;++c){if(ovb(b,a.sb(c))){return c}}return -1}
	function or(a,b){var c;ac(a,'set1');ac(b,'set2');c=(hc(),new nc(b));return new tr(a,c,b)}
	function Rt(a){var b=/function(?:\s+([\w$]+))?\s*\(/;var c=b.exec(a);return c&&c[1]||Xxb}
	function YQ(a,b,c){nI(c,Tzb,3);NV(a.c,b,rI(c,1));aR(a,b,rI(c,1));BV(b,rI(c,1));pI(c)}
	function Dgb(){Dgb=iI;Cgb=Cc((zgb(),Bv(tv(iF,1),uyb,123,0,[ygb,xgb,wgb,ugb,tgb,vgb])))}
	function dhb(){dhb=iI;chb=Cc((_gb(),Bv(tv(lF,1),uyb,124,0,[Ygb,Xgb,$gb,Wgb,Zgb,Vgb])))}
	function Ilb(){Ilb=iI;Hlb=Bv(tv(mw,1),Yyb,26,12,[0,8,4,12,2,10,6,14,1,9,5,13,3,11,7,15])}
	function djb(){djb=iI;cjb=new ejb(szb,0);ajb=new ejb('INPUT',1);bjb=new ejb('OUTPUT',2)}
	function de(a){this.c=a;this.b=new rnb((new inb(a.b)).a);this.a=null;this.d=(Il(),Il(),Hl)}
	function Nn(a){this.e=a;this.d=new wtb(op(ud(this.e).Y()));this.c=this.e.a;this.b=this.e.c}
	function qR(a,b,c){this.c=a;oR.call(this);this.b=b;this.j=new VN(b.d,b.e,b.c,b.b);this.a=c}
	function qI(a,b){if(a.j>0&&a.c<a.j){a.c+=b;!!a.g&&a.g.d>0&&a.e!=0&&qI(a.g,b/a.j*a.g.d)}}
	function WV(a){if(a.b.d.f.g==(CX(),xX)){return Wv(rJ(a.b.d.f,(Rib(),uib)),7)}return a.b.d}
	function VV(a){if(a.b.c.f.g==(CX(),xX)){return Wv(rJ(a.b.c.f,(Rib(),uib)),7)}return a.b.c}
	function od(a){dc(a.d!=3);switch(a.d){case 2:return false;case 0:return true;}return qd(a)}
	function CZ(a){switch(a.e){case 2:return sN(),rN;case 4:return sN(),ZM;default:return a;}}
	function DZ(a){switch(a.e){case 1:return sN(),pN;case 3:return sN(),$M;default:return a;}}
	function Km(a){var b;if(aw(a,90)){b=Wv(a,90);return new Lm(b.a)}else{return Il(),new dm(a)}}
	function Fpb(a,b){ypb();var c;c=new otb(1);ew(a)?Vmb(c,a,b):Ltb(c.d,a,b);return new mrb(c)}
	function Is(a,b){if(!a.g){return a.e}else{a.g=Is(a.g,b);--a.a;a.j=XH(a.j,b.c);return Gs(a)}}
	function Js(a,b){if(!a.e){return a.g}else{a.e=Js(a.e,b);--a.a;a.j=XH(a.j,b.c);return Gs(a)}}
	function Ue(a,b){var c,d,e;Dxb(b);c=false;for(e=b.mb();e.G();){d=e.H();c=c|a.ib(d)}return c}
	function nr(a){var b,c,d;b=0;for(d=a.mb();d.G();){c=d.H();b+=c!=null?vb(c):0;b=~~b}return b}
	function BY(a){var b,c,d,e;for(c=a.a,d=0,e=c.length;d<e;++d){b=c[d];b.B(null)}return null}
	function Xeb(a){var b,c,d;d=new jJ;for(c=a.b.mb();c.G();){b=Wv(c.H(),92);QI(d,b.a)}return d}
	function mfb(a){var b,c,d;b=0;for(d=a.mb();d.G();){c=Yv(d.H());b+=(Dxb(c),c)}return b/a.Y()}
	function Rbb(a,b){var c;c=Wv(Smb(a.c,b),200);if(!c){c=new Ybb;c.c=b;Umb(a.c,c.c,c)}return c}
	function Wsb(a,b){var c;Dxb(b);c=b.e;if(!a.b[c]){Av(a.b,c,b);++a.c;return true}return false}
	function hwb(a,b){var c,d;c=1-b;d=a.a[c];a.a[c]=d.a[b];d.a[b]=a;a.b=true;d.b=false;return d}
	function yI(a,b){var c;if(aw(b,10)){c=Wv(b,10);return a.a==c.a&&a.b==c.b}else{return false}}
	function Bs(a,b,c){a.g=new Os(b,c);es(a,a.g,a.i);a.d=Plb(2,a.d);++a.a;a.j=PH(a.j,c);return a}
	function As(a,b,c){a.e=new Os(b,c);es(a.f,a.e,a);a.d=Plb(2,a.d);++a.a;a.j=PH(a.j,c);return a}
	function Nu(e,a){var b=e.a;var c=0;for(var d in b){b.hasOwnProperty(d)&&(a[c++]=d)}return a}
	function he(a,b){var c,d;Dxb(b);for(d=b.bb().mb();d.G();){c=Wv(d.H(),21);a.db(c.yb(),c.zb())}}
	function vcb(a,b,c){var d;d=a.a.e[Wv(b.a,9).k]-a.a.e[Wv(c.a,9).k];return hw(d>0?1:d<0?-1:0)}
	function r5(a,b,c){this.g=a;this.d=b;this.e=c;this.a=new GU;p5(this);ypb();Gpb(this.a,null)}
	function Os(a,b){Xb(b>0);this.b=a;this.c=b;this.j=b;this.a=1;this.d=1;this.e=null;this.g=null}
	function qcb(a){a.a=null;a.e=null;a.b.c=xv(UF,syb,1,0,4,1);a.f.c=xv(UF,syb,1,0,4,1);a.c=null}
	function qhb(){ohb();return Bv(tv(mF,1),uyb,113,0,[fhb,hhb,ihb,jhb,khb,lhb,nhb,ehb,ghb,mhb])}
	function uvb(a){return wvb(a,26)*1.4901161193847656E-8+wvb(a,27)*1.1102230246251565E-16}
	function Fo(a){return aw(a,87)?Ii(Wv(a,87)):aw(a,88)?Wv(a,88).a:aw(a,63)?new ap(a):new Ro(a)}
	function Udb(a){var b;b=Wv(rJ(a,(Rib(),hib)),32);return a.g==(CX(),xX)&&(b==(sN(),rN)||b==ZM)}
	function YT(a,b){if(ZT(a,b)){Fd(a.a,Wv(rJ(b,(Rib(),fib)),18),b);return true}else{return false}}
	function QQ(a,b){var c;if(b){for(c=0;c<6;c++){Wv(yU(a.a,c),18).jb(Wv(yU(b.a,c),19))}}return a}
	function rI(a,b){var c;if(a.b){return null}else{c=oI(a.e,a.f);QI(a.a,c);c.g=a;a.d=b;return c}}
	function hJ(a,b){var c,d;for(d=WI(a,0);d.b!=d.d.c;){c=Wv(_ub(d),10);c.a+=b.a;c.b+=b.b}return a}
	function J9(a,b){var c,d;for(c=0;c<b.length;c++){for(d=0;d<b[c].length;d++){b[c][d]=a[c][d]}}}
	function P2(a){var b,c;for(c=new Tob(a.b.f);c.a<c.c.c.length;){b=Wv(Rob(c),7);Y2(a.a,Reb(b.g))}}
	function cT(){cT=iI;$S=new fT('Q1',0);bT=new fT('Q4',1);_S=new fT('Q2',2);aT=new fT('Q3',3)}
	function EK(){EK=iI;DK=new FK(szb,0);AK=new FK(qzb,1);BK=new FK('HEAD',2);CK=new FK('TAIL',3)}
	function ckb(){ckb=iI;_jb=new dkb('AGGRESSIVE',0);akb=new dkb('CAREFUL',1);bkb=new dkb('OFF',2)}
	function Dhb(){Dhb=iI;Chb=Cc((zhb(),Bv(tv(nF,1),uyb,110,0,[shb,whb,thb,xhb,uhb,yhb,vhb,rhb])))}
	function Akb(a,b){xkb();return ew(a)?kmb(a,$v(b)):cw(a)?flb(a,Yv(b)):bw(a)?ykb(a,Xv(b)):a.F(b)}
	function Es(a,b,c){var d;d=b.$b(c,a.b);return d<0?!a.e?0:Es(a.e,b,c):d>0?!a.g?0:Es(a.g,b,c):a.c}
	function rk(a,b){var c,d;if(!a.b){return false}d=a.e;c=a.a.$b(b,d);return c<0|c==0&a.d==(Gh(),Fh)}
	function qk(a,b){var c,d;if(!a.c){return false}d=a.g;c=a.a.$b(b,d);return c>0|c==0&a.f==(Gh(),Fh)}
	function SH(a){var b;b=a.h;if(b==0){return a.l+a.m*czb}if(b==bzb){return a.l+a.m*czb-dzb}return a}
	function MI(a){var b,c,d,e;b=new FI;for(d=0,e=a.length;d<e;++d){c=a[d];b.a+=c.a;b.b+=c.b}return b}
	function J6(a){var b,c,d,e;for(c=a.a,d=0,e=c.length;d<e;++d){b=c[d];Q6(a,b,(sN(),pN));Q6(a,b,$M)}}
	function zo(a){var b,c,d;b=1;for(d=a.mb();d.G();){c=d.H();b=31*b+(c==null?0:vb(c));b=~~b}return b}
	function Tsb(a){var b,c;b=Wv(a.e&&a.e(),11);c=Wv(cxb(b,b.length),11);return new atb(b,c,b.length)}
	function R6(a){this.e=gw(rJ(hX(a[0]),(eM(),uL)))===gw((NK(),JK));this.a=a;this.c=new ntb;J6(this)}
	function kR(a){fR();this.g=(mp(),new ntb);this.f=new ntb;this.b=new ntb;this.c=new xk;this.i=a}
	function odb(a){this.o=a;this.g=new GU;this.j=new aJ;this.n=new aJ;this.e=new GU;this.b=new GU}
	function OR(a,b){stb(a.a,b);if(b.f){throw new gt('CNode belongs to another CGroup.')}b.f=a}
	function eI(a,b){typeof window===Sxb&&typeof window['$gwt']===Sxb&&(window['$gwt'][a]=b)}
	function K5(a,b,c,d){var e,f;e=I5(a,b,c,d);e<0&&(e=-e-1);for(f=c-1;f>=e;f--){a[f+1]=a[f]}a[e]=d}
	function kab(a,b,c,d){var e,f;e=jab(a,b,c,d);e<0&&(e=-e-1);for(f=c-1;f>=e;f--){a[f+1]=a[f]}a[e]=d}
	function Xe(a,b){var c,d;Dxb(b);for(d=b.mb();d.G();){c=d.H();if(!a.kb(c)){return false}}return true}
	function Ll(a,b){Il();var c;_b(b);while(a.G()){c=a.H();if(!Udb(Wv(c,9))){return false}}return true}
	function wV(a,b){var c,d,e;c=b.k-a.k;if(c==0){d=a.e.a*a.e.b;e=b.e.a*b.e.b;return glb(d,e)}return c}
	function YH(a){var b,c,d,e;e=a;d=0;if(e<0){e+=dzb;d=bzb}c=hw(e/czb);b=hw(e-c*czb);return Ev(b,c,d)}
	function n6(a,b){a.c.c=xv(UF,syb,1,0,4,1);o6(a,a.e,b);o6(a,a.a,b);ypb();Gpb(a.c,null);return p6(a)}
	function c5(a,b,c){a.g=i5(a,b,(sN(),ZM),a.b);a.d=i5(a,c,ZM,a.b);if(a.g.c==0||a.d.c==0){return}f5(a)}
	function d5(a,b,c){a.g=i5(a,b,(sN(),rN),a.j);a.d=i5(a,c,rN,a.j);if(a.g.c==0||a.d.c==0){return}f5(a)}
	function pU(a,b,c){return new VN(Qlb(a.a,b.a)-c/2,Qlb(a.b,b.b)-c/2,Jlb(a.a-b.a)+c,Jlb(a.b-b.b)+c)}
	function onb(a){if(a.a.G()){return true}if(a.a!=a.d){return false}a.a=new Ptb(a.e.d);return a.a.G()}
	function xU(a,b){var c,d;c=b.ob();d=c.length;if(d==0){return false}gxb(a.c,a.c.length,c);return true}
	function S5(a,b){var c,d;for(c=0;c<a.a.length;c++){for(d=0;d<a.a[c].length;d++){a.a[c][d]=b[c][d]}}}
	function zpb(a,b){ypb();var c,d,e,f;f=false;for(d=0,e=b.length;d<e;++d){c=b[d];f=f|a.ib(c)}return f}
	function op(a){mp();if(a<3){Mh(a,'expectedSize');return a+1}if(a<Nyb){return hw(a/0.75+1)}return $xb}
	function ml(a,b){var c;if(aw(b,19)){c=(Oh(),Wv(b,19));return a.jb(c)}return Jl(a,Wv(_b(b),22).mb())}
	function Ufb(a,b){var c,d;d=a.d.f;if(d.g==(CX(),AX)){return}c=Uh(mX(d));Cm(c)&&Umb(b,a,Wv(Dm(c),12))}
	function Xob(a,b){var c,d;yxb(b);return c=epb(a,0,b),d=xv(mw,Yyb,26,b,12,1),dxb(a,0,d,0,c,true),d}
	function swb(a,b){var c;this.c=a;c=new GU;Zvb(a,c,b,a.b,null,false,null,false);this.a=new Fnb(c,0)}
	function is(a){if(!a.a){return false}else if(qk(a.c.b,a.a.b)){a.a=null;return false}else{return true}}
	function ec(a){if(!a){throw new ulb((bmb(),'no calls to next() since the last call to remove()'))}}
	function ev(){ev=iI;dv={'boolean':fv,'number':gv,'string':iv,'object':hv,'function':hv,'undefined':jv}}
	function xR(){xR=iI;vR=rr(Bv(tv(Bz,1),uyb,59,0,[(sK(),oK),pK]));wR=rr(Bv(tv(Bz,1),uyb,59,0,[rK,nK]))}
	function Apb(a){ypb();var b,c,d;d=0;for(c=a.mb();c.G();){b=c.H();d=d+(b!=null?vb(b):0);d=d|0}return d}
	function Hq(a){Dq();var b,c,d;d=0;for(c=Vg(a).mb();c.G();){b=Wv(c.H(),83);d=PH(d,b.Yb())}return $s(d)}
	function dS(a){var b,c;for(c=new Tob(a.a.b);c.a<c.c.c.length;){b=Wv(Rob(c),25);b.i.Q()}a.c.Dc(a);eS(a)}
	function eub(a,b){var c;c=Utb(a.a,b);if(c===undefined){++a.d}else{a.a[$Ab](b);--a.c;msb(a.b)}return c}
	function X5(a,b){var c,d,e,f;c=false;d=a.d[b].length;for(e=d-1;e>0;e--){f=e-1;c=c|Y5(a,b,f,e)}return c}
	function V5(a,b){var c,d,e,f;c=false;d=a.d[b].length;for(f=0;f<d-1;f++){e=f+1;c=c|Y5(a,b,f,e)}return c}
	function Gv(a,b){var c,d,e;c=a.l+b.l;d=a.m+b.m+(c>>22);e=a.h+b.h+(d>>22);return Ev(c&azb,d&azb,e&bzb)}
	function Mv(a,b){var c,d,e;c=a.l-b.l;d=a.m-b.m+(c>>22);e=a.h-b.h+(d>>22);return Ev(c&azb,d&azb,e&bzb)}
	function LI(a,b){var c;for(c=0;c<(bmb(),b.length);c++){if(a==b.charCodeAt(c)){return true}}return false}
	function yP(a,b){var c;for(c=0;c<(bmb(),b.length);c++){if(a==b.charCodeAt(c)){return true}}return false}
	function rJ(a,b){var c,d;if(a.n){d=Smb(a.n,b);if(d!=null){return d}}c=zJ(b);aw(c,5)&&sJ(a,b,c);return c}
	function lJ(a){var b,c,d;b=new jJ;for(d=WI(a,0);d.b!=d.d.c;){c=Wv(_ub(d),10);rn(b,0,new II(c))}return b}
	function Q6(a,b,c){var d,e,f,g;g=new U6(b,c);f=0;for(e=T6(g);e.G();){d=Wv(e.H(),7);Umb(a.c,d,Elb(f++))}}
	function Fb(a,b,c){_b(b);if(c.G()){vmb(b,a.C(c.H()));while(c.G()){vmb(b,a.c);vmb(b,a.C(c.H()))}}return b}
	function g9(a,b,c,d,e){if(d){h9(a,b)}else{d9(a,b,e);e9(a,b,c)}if(b.c.length>1){Gpb(b,a.b);V9(a.c,b)}}
	function Bv(a,b,c,d,e){e.$c=a;e._c=b;e.ad=kI;e.__elementTypeId$=c;e.__elementTypeCategory$=d;return e}
	function vS(a,b,c){switch(c.e){case 2:a.b=b;break;case 1:a.c=b;break;case 4:a.d=b;break;case 3:a.a=b;}}
	function B6(a,b,c){var d,e;e=C6(c).g;d=w6(a,b,e).a;return d-Klb(Wv(Smb(a.c,b),24).a-Wv(Smb(a.c,c),24).a)}
	function glb(a,b){if(a<b){return -1}if(a>b){return 1}if(a==b){return 0}return isNaN(a)?isNaN(b)?0:1:-1}
	function Yi(a){switch(a.Y()){case 0:return Fi;case 1:return new Er(a.mb().H());default:return new gr(a);}}
	function Nt(){Nt=iI;var a,b;b=!(!!Error.stackTraceLimit||'stack' in new Error);a=new _t;Mt=b?new Tt:a}
	function RP(){RP=iI;OP=new DJ('intCoordinates',(xkb(),xkb(),vkb));PP=new CJ('jsonObject');QP=new HI(0,0)}
	function XZ(){XZ=iI;VZ=new YZ('MIRROR_X',0);WZ=new YZ('TRANSPOSE',1);UZ=new YZ('MIRROR_AND_TRANSPOSE',2)}
	function Hgb(){Hgb=iI;Fgb=new Igb(tzb,0);Egb=new Igb('INCOMING_ONLY',1);Ggb=new Igb('OUTGOING_ONLY',2)}
	function Seb(){Ieb();return Bv(tv(_E,1),uyb,60,0,[meb,jeb,ieb,peb,oeb,Heb,Geb,neb,keb,leb,qeb,Eeb,Feb])}
	function b3(){b3=iI;var a,b,c,d;a3=new vsb(_E);for(b=Seb(),c=0,d=b.length;c<d;++c){a=b[c];ssb(a3,a,null)}}
	function Bpb(a){ypb();var b,c,d;d=1;for(c=a.mb();c.G();){b=c.H();d=31*d+(b!=null?vb(b):0);d=d|0}return d}
	function Tl(a,b){Il();var c,d;ac(b,'predicate');for(d=0;a.G();d++){c=a.H();if(b.D(c)){return d}}return -1}
	function Or(a,b){var c,d;c=a.c.a;d=b.ac(c);a.b.b&&(d=XH(d,Nr(a,b,c)));a.b.c&&(d=XH(d,Mr(a,b,c)));return d}
	function bwb(a,b,c){var d,e;d=new ywb(b,c);e=new zwb;a.b=_vb(a,a.b,d,e);e.b||++a.c;a.b.b=false;return e.d}
	function gJ(a,b,c){var d,e,f;d=new aJ;for(f=WI(c,0);f.b!=f.d.c;){e=Wv(_ub(f),10);QI(d,new II(e))}sn(a,b,d)}
	function Mp(a,b){var c;if(b===a){return true}if(aw(b,144)){c=Wv(b,144);return a.P().t(c.P())}return false}
	function Svb(a){var b;b=a.a.c.length;if(b>0){return Dvb(b-1,a.a.c.length),AU(a.a,b-1)}else{throw new osb}}
	function p2(a){if(a.b.c.length-a.e.c.length<0){QX(a,(sN(),ZM));a.a.a=a.j.a}else{QX(a,(sN(),rN));a.a.a=0}}
	function $mb(a,b){wxb(a>=0,'Negative initial capacity');wxb(b>=0,'Non-positive load factor');Ymb(this)}
	function rnb(a){var b;this.e=a;this.d=new hub(this.e.e);this.a=this.d;this.b=onb(this);b=a[WAb];this[WAb]=b}
	function Kkb(){++Fkb;this.n=null;this.j=null;this.i=null;this.d=null;this.b=null;this.k=null;this.a=null}
	function fpb(a){var b,c,d,e;e=1;for(c=0,d=a.length;c<d;++c){b=a[c];e=31*e+(b!=null?vb(b):0);e=e|0}return e}
	function Cc(a){var b,c,d,e;b={};for(d=0,e=a.length;d<e;++d){c=a[d];b[':'+(c.d!=null?c.d:''+c.e)]=c}return b}
	function wO(a){uO();var b,c,d,e;for(c=xO(),d=0,e=c.length;d<e;++d){b=c[d];if(Zi(b.a,a)){return b}}return tO}
	function Itb(a,b,c){var d,e,f;for(e=0,f=c.length;e<f;++e){d=c[e];if(a.b.Uc(b,d.yb())){return d}}return null}
	function Rmb(a,b,c){var d,e;for(e=c.mb();e.G();){d=Wv(e.H(),21);if(a.Uc(b,d.zb())){return true}}return false}
	function Wvb(a,b){var c,d,e;e=a.b;while(e){c=a.a.$b(b,e.d);if(c==0){return e}d=c<0?0:1;e=e.a[d]}return null}
	function Ge(a,b){var c,d;c=Wv(Wmb(a.a,b),19);if(!c){return null}d=a.b.Z();d.jb(c);a.b.c-=c.Y();c.Q();return d}
	function y0(a,b,c){var d;d=Wv(b.B(a),9);while(d.g==(CX(),zX)){!d.n&&(d.n=new ntb);Wmb(d.n,c);d=Wv(b.B(d),9)}}
	function RH(a,b){var c;if(UH(a)&&UH(b)){c=a-b;if(!isNaN(c)){return c}}return Iv(UH(a)?YH(a):a,UH(b)?YH(b):b)}
	function OH(a){var b;if(aw(a,46)){return a}b=a&&a.__gwt$exception;if(!b){b=new kt(a);Ot(b,a);MH(a,b)}return b}
	function p6(a){var b,c,d;b=0;for(d=new Tob(a.c);d.a<d.c.c.length;){c=Wv(Rob(d),226);b+=b6(a,c.a,c.b)}return b}
	function pT(a){var b;b=new DT(a);RT(a.a,nT,new opb(Bv(tv(JA,1),syb,160,0,[b])));!!b.d&&vU(b.f,b.d);return b.f}
	function w6(a,b,c){switch(c.e){case 1:return Wv(Smb(a.d,b),24);case 3:return Wv(Smb(a.j,b),24);}return Elb(0)}
	function M5(a,b,c){if(!a.d[b.k][c.k]){L5(a,b,c);a.d[b.k][c.k]=true;a.d[c.k][b.k]=true}return a.a[b.k][c.k]}
	function Ds(a,b,c){var d;d=b.$b(c,a.b);return d<0?!a.e?a:Wv(Sb(Ds(a.e,b,c),a),206):d==0?a:!a.g?null:Ds(a.g,b,c)}
	function rb(a,b){return ew(a)?emb(a,b):cw(a)?(Dxb(a),a===b):bw(a)?(Dxb(a),a===b):_v(a)?a.t(b):zv(a)?a===b:a===b}
	function vQ(a,b){return emb(a.b,b)||dmb(a.b,b)&&((bmb(),b.length)==pmb(a.b)||jmb(a.b,pmb(a.b)-b.length-1)==46)}
	function L6(a,b){var c,d,e;c=0;for(e=nX(a,b).mb();e.G();){d=Wv(e.H(),7);c+=rJ(d,(Rib(),Bib))!=null?1:0}return c}
	function Xvb(a,b){var c,d,e;d=null;e=a.b;while(e){c=a.a.$b(b,e.d);if(c>=0){e=e.a[1]}else{d=e;e=e.a[0]}}return d}
	function Yvb(a,b){var c,d,e;d=null;e=a.b;while(e){c=a.a.$b(b,e.d);if(c<=0){e=e.a[0]}else{d=e;e=e.a[1]}}return d}
	function u0(a,b,c,d){var e,f;for(f=a.mb();f.G();){e=Wv(f.H(),33);e.i.a=b.a+(d.a-e.j.a)/2;e.i.b=b.b;b.b+=e.j.b+c}}
	function o$(a,b){var c;if(a.c.length==0){return}c=Wv(FU(a,xv(qB,Nzb,9,a.c.length,0,1)),51);lpb(c,new z$);l$(c,b)}
	function t$(a,b){var c;if(a.c.length==0){return}c=Wv(FU(a,xv(qB,Nzb,9,a.c.length,0,1)),51);lpb(c,new C$);l$(c,b)}
	function _Z(a){var b,c;b=a.g;if(b==(CX(),xX)){c=Wv(rJ(a,(Rib(),hib)),32);return c==(sN(),$M)||c==pN}return false}
	function Gc(a,b){var c;Dxb(b);c=a[':'+b];xxb(!!c,'Enum constant undefined: %s',Bv(tv(UF,1),syb,1,4,[b]));return c}
	function Zb(a,b,c){if(!a){throw new slb(fc('lowerEndpoint (%s) > upperEndpoint (%s)',Bv(tv(UF,1),syb,1,4,[b,c])))}}
	function kv(a){ev();throw new zu("Unexpected typeof result '"+a+"'; please report this bug to the GWT team")}
	function tN(a){switch(a.e){case 1:return pN;case 2:return rN;case 3:return $M;case 4:return ZM;default:return qN;}}
	function vK(a){switch(a.e){case 2:return pK;case 1:return oK;case 4:return nK;case 3:return rK;default:return qK;}}
	function Dkb(a){if(a>=48&&a<58){return a-48}if(a>=97&&a<97){return a-97+10}if(a>=65&&a<65){return a-65+10}return -1}
	function td(a,b){var c,d;for(d=Ep(Be(a.P()));d.b.G();){c=Wv(zm(d,d.b.H()),19);if(c.kb(b)){return true}}return false}
	function js(a){var b;if(!is(a)){throw new nvb}b=new fs(a.c,a.a);a.b=b;a.a.i==a.c.a?(a.a=null):(a.a=a.a.i);return b}
	function pp(a,b){mp();var c;if(a===b){return true}else if(aw(b,57)){c=Wv(b,57);return mr(nj(a),c.bb())}return false}
	function Gq(a,b,c,d){Dq();Mh(c,'oldCount');Mh(d,'newCount');if(a.Cb(b)==c){a.Gb(b,d);return true}else{return false}}
	function Bh(a,b,c,d,e){_b(c);_b(e);return Rr(new Ur(a.c,pk(a.b,new sk(a.d,true,b,c,false,null,(Gh(),Fh))),a.a),d,e)}
	function ck(a){hi();switch(a.Y()){case 0:return kr(),jr;case 1:return new Gr(a.mb().H());default:return new lr(a);}}
	function PH(a,b){var c;if(UH(a)&&UH(b)){c=a+b;if(ezb<c&&c<dzb){return c}}return SH(Gv(UH(a)?YH(a):a,UH(b)?YH(b):b))}
	function WH(a,b){var c;if(UH(a)&&UH(b)){c=a*b;if(ezb<c&&c<dzb){return c}}return SH(Kv(UH(a)?YH(a):a,UH(b)?YH(b):b))}
	function XH(a,b){var c;if(UH(a)&&UH(b)){c=a-b;if(ezb<c&&c<dzb){return c}}return SH(Mv(UH(a)?YH(a):a,UH(b)?YH(b):b))}
	function sK(){sK=iI;qK=new wK(szb,0);pK=new wK(pzb,1);oK=new wK(ozb,2);nK=new wK('DOWN',3);rK=new wK('UP',4)}
	function NK(){NK=iI;MK=new OK(szb,0);KK=new OK('POLYLINE',1);JK=new OK('ORTHOGONAL',2);LK=new OK('SPLINES',3)}
	function eL(){eL=iI;cL=new fL('INHERIT',0);bL=new fL('INCLUDE_CHILDREN',1);dL=new fL('SEPARATE_CHILDREN',2)}
	function G8(){G8=iI;D8=TQ(RQ(new WQ,(d0(),p_)),I_);E8=PQ(TQ(SQ(new WQ,j_),h_),i_);F8=PQ(UQ(new WQ,k_),i_)}
	function P8(){P8=iI;M8=TQ(RQ(new WQ,(d0(),p_)),I_);N8=PQ(TQ(SQ(new WQ,j_),h_),i_);O8=PQ(UQ(new WQ,k_),i_)}
	function deb(a){this.a=new Wub;this.d=new Wub;this.b=new Wub;this.c=new Wub;this.g=new Wub;this.i=new Wub;this.f=a}
	function UV(a,b,c,d,e,f){this.e=new GU;this.f=(djb(),cjb);vU(this.e,a);this.d=b;this.a=c;this.b=d;this.f=e;this.c=f}
	function hpb(a,b,c,d,e,f,g,h){var i;i=c;while(f<g){i>=d||b<c&&h.$b(a[b],a[i])<=0?Av(e,f++,a[b++]):Av(e,f++,a[i++])}}
	function v0(a,b,c,d,e){var f,g;for(g=a.mb();g.G();){f=Wv(g.H(),33);f.i.a=b.a;f.i.b=e?b.b:b.b+d.b-f.j.b;b.a+=f.j.a+c}}
	function gcb(a,b){$bb();var c,d;for(d=Uh(gX(a));Cm(d);){c=Wv(Dm(d),12);if(c.d.f==b||c.c.f==b){return c}}return null}
	function fdb(a,b,c){var d,e,f;d=0;for(f=WI(a,0);f.b!=f.d.c;){e=Ixb(Yv(_ub(f)));if(e>c){break}else e>=b&&++d}return d}
	function sn(a,b,c){var d,e,f,g;Dxb(c);g=false;f=WI(a,b);for(e=WI(c,0);e.b!=e.d.c;){d=_ub(e);$ub(f,d);g=true}return g}
	function Uf(a,b){var c,d,e;if(b.V()){return false}e=a.Y();c=a.d.jb(b);if(c){d=a.d.Y();a.f.c+=d-e;e==0&&Vf(a)}return c}
	function qJ(a,b){var c;if(!b){return a}c=!b.n?(ypb(),ypb(),wpb):b.n;c.V()||(!a.n?(a.n=new ptb(c)):he(a.n,c));return a}
	function Gb(b,c,d){var e;try{Fb(b,c,d)}catch(a){a=OH(a);if(aw(a,181)){e=a;throw new ukb(e)}else throw NH(a)}return c}
	function Qb(b,c,d){var e;try{Pb(b,c,d)}catch(a){a=OH(a);if(aw(a,181)){e=a;throw new ukb(e)}else throw NH(a)}return c}
	function NH(a){var b;if(aw(a,164)){b=Wv(a,164);if(gw(b.b)!==gw((it(),ht))){return gw(b.b)===gw(ht)?null:b.b}}return a}
	function SW(a,b){var c;c=Wv(rJ(hX(a),(Rib(),zib)),9);while(c){if(c==b){return true}c=Wv(rJ(hX(c),zib),9)}return false}
	function EZ(a){switch(Wv(rJ(a,(Rib(),mib)),140).e){case 1:sJ(a,mib,(Hhb(),Ehb));break;case 2:sJ(a,mib,(Hhb(),Ghb));}}
	function Kk(a){hi();switch(a.c){case 0:return kr(),jr;case 1:return new Gr(Sl(new jtb(a)));default:return new Jk(a);}}
	function Ti(a){Gi();var b,c;for(b=0,c=a.length;b<c;b++){if(a[b]==null){throw new Wlb('at index '+b)}}return new opb(a)}
	function $4(a,b,c){if(b.length==0||c.length==0){return 0}a.e?(a.b=new y5(a.c)):(a.b=new H5(a.c));return a.b.Gc(b,c)}
	function pI(a){if(a.i==null){throw new ulb('The task has not begun yet.')}if(!a.b){a.c<a.j&&qI(a,a.j-a.c);a.b=true}}
	function DR(a,b){var c,d;for(d=new Tob(b);d.a<d.c.c.length;){c=Wv(Rob(d),27);BU(a.b.b,c.b);PR(Wv(c.a,78),Wv(c.b,25))}}
	function aU(a,b){var c,d;for(d=new Tob(a.a);d.a<d.c.c.length;){c=Wv(Rob(d),222);if(YT(c,b)){return}}vU(a.a,new _T(b))}
	function aV(a){var b,c,d;b=new GU;for(d=new Tob(a.b);d.a<d.c.c.length;){c=Wv(Rob(d),251);xU(b,Wv(c.Ac(),19))}return b}
	function Q0(a,b){var c,d,e;e=new GU;for(d=nX(a,b).mb();d.G();){c=Wv(d.H(),7);e.c[e.c.length]=c}Gpb(e,new V0);return e}
	function iX(a){var b,c,d;b=new GU;for(d=new Tob(a.f);d.a<d.c.c.length;){c=Wv(Rob(d),7);vU(b,c.b)}return _b(b),new Vh(b)}
	function mX(a){var b,c,d;b=new GU;for(d=new Tob(a.f);d.a<d.c.c.length;){c=Wv(Rob(d),7);vU(b,c.e)}return _b(b),new Vh(b)}
	function Elb(a){var b,c;if(a>-129&&a<128){b=a+128;c=(Glb(),Flb)[b];!c&&(c=Flb[b]=new wlb(a));return c}return new wlb(a)}
	function R5(a){var b,c;b=Z4(a.b,a.d);c=$xb;while(c>b){S5(a,a.d);if(b==0){c=0;break}W5(a);U5(a);c=b;b=Z4(a.b,a.d)}a.c=c}
	function yvb(){tvb();var a,b,c;c=svb+++ixb();a=hw(Math.floor(c*FAb))&bBb;b=hw(c-a*aBb);this.a=a^1502;this.b=b^_Ab}
	function vb(a){return ew(a)?Pxb(a):cw(a)?hw((Dxb(a),a)):bw(a)?Ckb((Dxb(a),a))?1231:1237:_v(a)?a.v():zv(a)?txb(a):txb(a)}
	function AQ(a,b,c){var d,e,f;e=new jQ;e.d=c;d=UP(e,b);f=new dR;Ckb(Ixb(Xv(rJ(d,yQ))))?YQ(f,d,new sI):BQ(a,f,d);ZP(e,d)}
	function E6(a,b,c,d){var e,f,g,h;h=new U6(b,d);g=0;for(f=T6(h);f.G();){e=Wv(f.H(),7);Umb(a.i,e,Elb(g++))}Umb(c,b,Elb(g))}
	function c6(a,b){var c,d,e,f,g;c=0;g=0;for(e=0,f=b.length;e<f;++e){d=b[e];c=i6(a,c,d,(sN(),ZM),a.f);g=i6(a,g,d,rN,a.n)}}
	function pJ(a,b){var c,d,e,f;if(!a.n){return}for(d=0,e=b.length;d<e;++d){c=b[d];f=Smb(a.n,c);if(f!=null){c.nc();c.oc()}}}
	function L2(a,b){var c,d,e;for(d=new Tob(b);d.a<d.c.c.length;){c=Wv(Rob(d),75);e=X2(a.a);R2(a.a,e,c.k,c.j);aeb(c,e,true)}}
	function M2(a,b){var c,d,e;for(d=new Tob(b);d.a<d.c.c.length;){c=Wv(Rob(d),75);e=W2(a.a);R2(a.a,e,c.k,c.j);aeb(c,e,true)}}
	function PW(a){var b,c;c=Wv(rJ(a,(eM(),sL)),59);if(c==(sK(),qK)){b=Wv(rJ(a,(Rib(),Rhb)),15).a;return b>=1?pK:nK}return c}
	function Cm(a){_b(a.b);if(a.b.G()){return true}while(a.a.G()){_b(a.b=a.Wb(a.a.H()));if(a.b.G()){return true}}return false}
	function m7(a){if(a.d!=a.c.d||a.i!=a.g.d){a.a.c=xv(UF,syb,1,0,4,1);xU(a.a,a.c);xU(a.a,a.g);a.d=a.c.d;a.i=a.g.d}return a.a}
	function Yf(a){var b;if(a.b){Yf(a.b);if(a.b.d!=a.c){throw new nsb}}else if(a.d.V()){b=Wv(Smb(a.f.b,a.e),19);!!b&&(a.d=b)}}
	function H9(a,b,c,d,e){var f,g,h,i;i=Co(a);g9(b,i,d,e,c);f=0;for(h=new Tob(i);h.a<h.c.c.length;){g=Wv(Rob(h),9);a[f++]=g}}
	function oP(a){var b,c,d;d=Wv(vW(a.a,(eM(),DL)),15).a;for(c=new Tob(uW(a.a));c.a<c.c.c.length;){b=Wv(Rob(c),626);qP(a,b,d)}}
	function WQ(){var a,b;this.a=new HU(6);for(b=0;b<6;b++){vU(this.a,(a=Wv(Hkb(mC),11),new atb(a,Wv(exb(a,a.length),11),0)))}}
	function W5(a){var b,c,d;d=false;for(c=0;c<a.d.length;c++){a.j=(b=new N5(a.e,a.d,c,0),new b7(c,a.d,b));d=d|O5(a,c)}return d}
	function H8(a,b,c){var d,e;e=a.a.c;for(d=e.c.length;d<c;d++){uU(e,0,new sY(a.a))}rX(b,Wv(yU(e,e.c.length-c),16));a.b[b.k]=c}
	function hdb(a,b){var c,d;c=WI(a,0);while(c.b!=c.d.c){d=Ixb(Yv(_ub(c)));if(d==b){return}else if(d>b){avb(c);break}}$ub(c,b)}
	function dub(a,b,c){var d;d=Utb(a.a,b);Wtb(a.a,b,c===undefined?null:c);if(d===undefined){++a.c;msb(a.b)}else{++a.d}return d}
	function qgb(a,b,c){if((b-a<=0?0-(b-a):b-a)<uAb||(c-a<=0?0-(c-a):c-a)<uAb){return true}return b-a>uAb?a-c>uAb:c-a>uAb}
	function Qgb(a){switch(a.e){case 0:return Kgb;case 1:return Lgb;case 2:return Mgb;case 3:return Ngb;default:return Ogb;}}
	function uS(a,b){switch(b.e){case 2:return a.b;case 1:return a.c;case 4:return a.d;case 3:return a.a;default:return false;}}
	function vN(a){sN();switch(a.e){case 4:return $M;case 1:return ZM;case 3:return pN;case 2:return rN;default:return qN;}}
	function c7(a,b){if(b==a.c){return a.d}else if(b==a.d){return a.c}else{throw new slb('Node '+b+' not part of edge '+a)}}
	function zO(a,b){var c;if(Zsb(a.a,b)){return Wv(Zsb(a.a,b)?a.b[b.e]:null,62)}else{c=new ZN;Wsb(a.a,b);usb(a,b.e,c);return c}}
	function Zeb(a,b){var c,d,e,f;f=a.g.tb();c=0;while(f.G()){d=Ixb(Yv(f.H()));e=d-b;if(e>RAb){return c}else e>SAb&&++c}return c}
	function Usb(a){var b,c,d,e;c=(b=Wv(Hkb((d=a.$c,e=d.f,e==IF?d:e)),11),new atb(b,Wv(exb(b,b.length),11),0));Wsb(c,a);return c}
	function yR(a,b){var c,d;for(d=new Tob(b);d.a<d.c.c.length;){c=Wv(Rob(d),27);vU(a.b.b,Wv(c.b,25));OR(Wv(c.a,78),Wv(c.b,25))}}
	function gpb(a,b,c,d){var e,f,g;for(e=b+1;e<c;++e){for(f=e;f>b&&d.$b(a[f-1],a[f])>0;--f){g=a[f];Av(a,f,a[f-1]);Av(a,f-1,g)}}}
	function k3(a){var b,c;if(!MM(Wv(rJ(a,(eM(),TL)),28))){for(c=new Tob(a.f);c.a<c.c.c.length;){b=Wv(Rob(c),7);QX(b,(sN(),qN))}}}
	function oX(a,b){switch(b.e){case 1:return pl(a.f,(LX(),GX));case 2:return pl(a.f,(LX(),IX));default:return ypb(),ypb(),vpb;}}
	function oW(a,b){if(yJ(b,(eM(),cM))){return rJ(a.e,(Rib(),Jib))}else if(yJ(b,LL)){return rJ(a.e,(Rib(),tib))}return rJ(a.e,b)}
	function I5(a,b,c,d){var e,f,g;f=b;e=c-1;while(f<=e){g=(f+e)/2|0;if(a[g]==d){return g}else a[g]<d?(f=g+1):(e=g-1)}return -f-1}
	function Ve(a,b,c){var d,e;for(e=a.mb();e.G();){d=e.H();if(gw(b)===gw(d)||b!=null&&rb(b,d)){c&&e.I();return true}}return false}
	function epb(a,b,c){var d;xxb(b<=c,'%s > %s',Bv(tv(UF,1),syb,1,4,[Elb(b),Elb(c)]));d=a.length;c=c<d?c:d;Gxb(b,c,d);return c-b}
	function aW(a,b){var c,d,e;c=a;e=0;do{if(c==b){return e}d=Wv(rJ(c,(Rib(),zib)),9);if(!d){throw new rlb}c=hX(d);++e}while(true)}
	function U5(a){var b,c,d;d=false;for(c=a.d.length-1;c>=0;c--){a.j=(b=new N5(a.e,a.d,c,1),new b7(c,a.d,b));d=d|O5(a,c)}return d}
	function k6(a){this.f=(mp(),new ntb);this.n=new ntb;this.k=new ntb;this.g=new vtb;this.i=new Vr((Tq(),Sq));this.j=a;c6(this,a)}
	function vsb(a){var b;this.a=(b=Wv(a.e&&a.e(),11),new atb(b,Wv(exb(b,b.length),11),0));this.b=xv(UF,syb,1,this.a.a.length,4,1)}
	function jf(a,b){var c;if(b===a){return true}if(!aw(b,18)){return false}c=Wv(b,18);if(c.Y()!=a.Y()){return false}return a.lb(c)}
	function Reb(a){Ieb();switch(a.e){case 1:return meb;case 2:return ieb;case 3:return oeb;case 4:return Geb;default:return Feb;}}
	function pgb(a,b){switch(b.e){case 1:return a.e.d;case 2:return a.e.c;case 3:return a.e.a;case 4:return a.e.b;default:return 0;}}
	function xO(){uO();return Bv(tv(Oz,1),uyb,67,0,[rO,qO,sO,iO,hO,jO,mO,lO,kO,pO,oO,nO,fO,eO,gO,cO,bO,dO,_N,$N,aO,tO])}
	function zM(){zM=iI;yM=new AM(szb,0);xM=new AM('JUSTIFIED',1);uM=new AM('BEGIN',2);vM=new AM(qzb,3);wM=new AM('END',4)}
	function DN(){DN=iI;BN=new EN('PORTS',0);CN=new EN('PORT_LABELS',1);AN=new EN('NODE_LABELS',2);zN=new EN('MINIMUM_SIZE',3)}
	function kP(){kP=iI;jP=new lP('UNKNOWN',0);gP=new lP('ABOVE',1);hP=new lP('BELOW',2);iP=new DJ('de.cau.cs.kieler.labelSide',jP)}
	function Qjb(){Qjb=iI;Njb=new Rjb('EQUALLY_DISTRIBUTED',0);Pjb=new Rjb('NORTH_STACKED',1);Ojb=new Rjb('NORTH_SEQUENCE',2)}
	function gI(){fI={};!Array.isArray&&(Array.isArray=function(a){return Object.prototype.toString.call(a)==='[object Array]'})}
	function SR(a,b){return Ws(),Ws(),((a-b>0?a-b:-(a-b))<=$yb||a==b||isNaN(a)&&isNaN(b)?0:a<b?-1:a>b?1:Ys(isNaN(a),isNaN(b)))>0}
	function TR(a,b){return Ws(),Ws(),((a-b>0?a-b:-(a-b))<=$yb||a==b||isNaN(a)&&isNaN(b)?0:a<b?-1:a>b?1:Ys(isNaN(a),isNaN(b)))<0}
	function Veb(a){var b,c;a.d||cfb(a);c=new jJ;b=a.b.mb();b.H();while(b.G()){QI(c,Wv(b.H(),92).a)}Bxb(c.b!=0);$I(c,c.c.b);return c}
	function $db(a){var b,c,d,e;e=new Wub;b=new IU(a.c);Dpb(b);for(d=new Tob(b);d.a<d.c.c.length;){c=Wv(Rob(d),7);e.a.db(c,e)}return e}
	function Np(a,b){var c,d,e;_b(b);for(d=(e=a.g,Wv(!e?(a.g=new En(a)):e,20)).mb();d.G();){c=Wv(d.H(),21);Fd(b,c.zb(),c.yb())}return b}
	function mf(a,b){var c,d,e;if(aw(b,21)){c=Wv(b,21);d=c.yb();e=rp(a.qb(),d);return Tb(e,c.zb())&&(e!=null||a.qb().R(d))}return false}
	function Yeb(a,b){var c,d,e;e=a.g.tb();while(e.G()){c=Ixb(Yv(e.H()));d=c-b<=0?0-(c-b):c-b;if(d<RAb){return e.L()-1}}return a.g.Y()}
	function Vfb(a){var b,c;for(c=new Tob(a.a);c.a<c.c.c.length;){b=Wv(Rob(c),9);if(b.g==(CX(),AX)||b.g==wX){return false}}return true}
	function nI(a,b,c){if(a.b){throw new ulb('The task is already done.')}else if(a.i!=null){return false}else{a.i=b;a.j=c;return true}}
	function A5(a,b){if(a.f<b.f){return -1}else if(a.f>b.f){return 1}else if(a.g<b.g){return -1}else if(a.g>b.g){return 1}return a.b-b.b}
	function S8(a,b){if(b.c==a){return b.d}else if(b.d==a){return b.c}throw new slb('Input edge is not connected to the input port.')}
	function q5(a){var b;if(a.c==0){return}b=Wv(yU(a.a,a.b),128);b.b==1?(++a.b,a.b<a.a.c.length&&u5(Wv(yU(a.a,a.b),128))):--b.b;--a.c}
	function ZU(a,b){a.b.a=Qlb(a.b.a,b.c);a.b.b=Qlb(a.b.b,b.d);a.a.a=Nlb(a.a.a,b.c);a.a.b=Nlb(a.a.b,b.d);return a.c[a.c.length]=b,true}
	function vbb(a,b,c){var d,e;d=Ixb(a.n[b.f.k])+Ixb(a.d[b.f.k])+b.i.b+b.a.b;e=Ixb(a.n[c.f.k])+Ixb(a.d[c.f.k])+c.i.b+c.a.b;return e-d}
	function Y5(a,b,c,d){var e,f,g;e=false;if($6(a.j,c,d)){a7(a.j,a.d[b][c],a.d[b][d]);f=a.d[b];g=f[d];f[d]=f[c];f[c]=g;e=true}return e}
	function fX(a,b,c){var d,e,f,g,h;h=hX(a);e=h.a;d=Wv(rJ(h,(Rib(),Xhb)),15).a;f=h.d;g=a.i;b&&(g.a=g.a-e.b-d-f.a);c&&(g.b=g.b-e.d-d-f.b)}
	function Q$(a,b){var c,d,e;for(d=Uh(gX(a));Cm(d);){c=Wv(Dm(d),12);e=Wv(b.B(c),9);return new $c(_b(e.i.b+e.j.b/2))}return zb(),zb(),yb}
	function ifb(a){var b,c,d,e,f;d=gfb(a);b=rAb;f=0;e=0;while(b>0.5&&f<50){e=ofb(d);c=$eb(d,e,true);b=Jlb(c.b);++f}return $eb(a,e,false)}
	function jfb(a){var b,c,d,e,f;d=gfb(a);b=rAb;f=0;e=0;while(b>0.5&&f<50){e=nfb(d);c=$eb(d,e,true);b=Jlb(c.a);++f}return $eb(a,e,false)}
	function QR(a){var b,c,d;this.a=new Wub;this.e=new vtb;this.f=0;for(c=0,d=a.length;c<d;++c){b=a[c];!this.g&&(this.g=b);OR(this,b)}}
	function dfb(a){Teb(this);this.c=a.c;this.f=a.f;this.e=a.e;this.k=a.k;this.d=a.d;this.g=Eo(a.g);this.j=a.j;this.i=a.i;this.b=Eo(a.b)}
	function oU(a){switch(a.e){case 1:return sK(),rK;case 4:return sK(),oK;case 2:return sK(),pK;case 3:return sK(),nK;}return sK(),qK}
	function Xdb(a,b){if(_db(a,b)){stb(a.g,b);return true}b.g!=(sN(),qN)&&stb(a.i,b);b.e.c.length==0?stb(a.c,b):stb(a.b,b);return false}
	function wU(a,b){var c,d;Fxb(0,a.c.length);c=Ye(b,xv(UF,syb,1,b.a.Y(),4,1));d=c.length;if(d==0){return false}gxb(a.c,0,c);return true}
	function Zkb(a,b){var c=0;while(!b[c]||b[c]==''){c++}var d=b[c++];for(;c<b.length;c++){if(!b[c]||b[c]==''){continue}d+=a+b[c]}return d}
	function yt(){var a;if(ut!=0){a=pt();if(a-vt>2000){vt=a;wt=$wnd.setTimeout(Et,10)}}if(ut++==0){Ht((Gt(),Ft));return true}return false}
	function kS(a){var b,c;for(c=new Tob(a.a.b);c.a<c.c.c.length;){b=Wv(Rob(c),25);b.j.d=-b.j.d-b.j.c;!!b.o&&(b.g.a=-b.g.a+b.o.j.c)}fS(a)}
	function D2(a,b){var c;c=a;while(b.b<b.d.Y()&&c==a){c=(Bxb(b.b<b.d.Y()),Wv(b.d.sb(b.c=b.b++),7)).g}c==a||(Bxb(b.b>0),b.a.sb(b.c=--b.b))}
	function a$(a){var b;if(!LM(Wv(rJ(a,(eM(),TL)),28))){return}b=a.c;b$((Cxb(0,b.c.length),Wv(b.c[0],16)));b$(Wv(yU(b,b.c.length-1),16))}
	function NV(a,b,c){nI(c,'Compound graph preprocessor',1);a.a=new xk;RV(a,b,null);MV(a,b);sJ(b,(Rib(),bib),a.a);a.a=null;Ymb(a.b);pI(c)}
	function P0(a){var b,c;b=Wv(Dm(Uh(iX(a))),12);c=Wv(Dm(Uh(mX(a))),12);return !Ckb(Ixb(Xv(rJ(b,(Rib(),Iib)))))||!Ckb(Ixb(Xv(rJ(c,Iib))))}
	function O6(a,b,c){if(b.g==(CX(),AX)&&c.g==zX){a.d=L6(b,(sN(),pN));a.b=L6(b,$M)}if(c.g==AX&&b.g==zX){a.d=L6(c,(sN(),$M));a.b=L6(c,pN)}}
	function _8(a,b,c){var d,e,f,g;f=b.g;g=c.g;if(f!=g){return f.e-g.e}else{d=a.a[b.k];e=a.a[c.k];return !d&&!e?0:!d?-1:!e?1:glb(d.a,e.a)}}
	function jab(a,b,c,d){var e,f,g,h;f=b;e=c-1;while(f<=e){g=f+e>>>1;h=a[g];if(h<d){f=g+1}else if(h>d){e=g-1}else{return g}}return -(f+1)}
	function Id(a){return aw(a,137)?(ypb(),new dsb(Wv(a,137))):aw(a,18)?(ypb(),new Frb(Wv(a,18))):aw(a,20)?Hpb(Wv(a,20)):(ypb(),new zqb(a))}
	function Kd(a,b,c){return aw(c,137)?new Lg(a,b,Wv(c,137)):aw(c,18)?new Kg(a,b,Wv(c,18)):aw(c,20)?Ld(a,b,Wv(c,20),null):new _f(a,b,c,null)}
	function tn(b,c){var d;d=b.ub(c);try{return d.H()}catch(a){a=OH(a);if(aw(a,74)){throw new okb("Can't get element "+c)}else throw NH(a)}}
	function rp(b,c){mp();_b(b);try{return b.cb(c)}catch(a){a=OH(a);if(aw(a,119)){return null}else if(aw(a,76)){return null}else throw NH(a)}}
	function Qu(f,a){var b=f.a;var c;a=String(a);b.hasOwnProperty(a)&&(c=b[a]);var d=(ev(),dv)[typeof c];var e=d?d(c):kv(typeof c);return e}
	function kgb(a,b,c,d){if(b<c){a.b=0.5*(b+c);a.p=UAb*a.b+0.9*b;a.a=UAb*a.b+0.9*c}else{a.b=0.5*(b+d);a.p=UAb*a.b+0.9*d;a.a=UAb*a.b+0.9*b}}
	function Vr(a){Ch.call(this,a);this.b=new sk(a,false,null,(Gh(),Fh),false,null,Fh);this.a=new Os(null,1);ds(this.a,this.a);this.c=new Vs}
	function xT(a){vT();this.c=new GU;this.d=a;switch(a.e){case 0:case 2:this.a=Epb(uT);this.b=Uzb;break;case 3:case 1:this.a=uT;this.b=Vzb;}}
	function iK(){iK=iI;cK=new jK('AUTOMATIC',0);fK=new jK(ozb,1);gK=new jK(pzb,2);hK=new jK('TOP',3);dK=new jK('BOTTOM',4);eK=new jK(qzb,5)}
	function Pxb(a){Nxb();var b,c,d;c=':'+a;d=Mxb[c];if(!(d===undefined)){return d}d=Kxb[c];b=d===undefined?Oxb(a):d;Qxb();Mxb[c]=b;return b}
	function bk(a,b,c,d,e,f,g){hi();var h,i;i=g.length+6;h=new HU(i);zpb(h,Bv(tv(UF,1),syb,1,4,[a,b,c,d,e,f]));zpb(h,g);return Yj(new Tob(h))}
	function GZ(a){var b;b=Wv(rJ(a,(eM(),JL)),18);if(b.V()){return}if(b.kb((oM(),gM))){b.nb(gM);b.ib(iM)}else if(b.kb(iM)){b.nb(iM);b.ib(gM)}}
	function HZ(a){var b;b=Wv(rJ(a,(eM(),JL)),18);if(b.V()){return}if(b.kb((oM(),nM))){b.nb(nM);b.ib(lM)}else if(b.kb(lM)){b.nb(lM);b.ib(nM)}}
	function f$(a,b){var c,d,e,f;e=a.g;c=Ixb(Yv(rJ(a,(Rib(),Cib))));f=b.g;d=Ixb(Yv(rJ(b,Cib)));return f!=(CX(),xX)?-1:e!=xX?1:c==d?0:c<d?-1:1}
	function g6(a,b,c){var d,e;d=Slb(h6(a,b.d),h6(a,b.c));e=Plb(h6(a,b.d),h6(a,b.c));return $s(Or(Bh(c,Elb(d),(Gh(),Fh),Elb(e),Fh),(qs(),ps)))}
	function qp(b,c){mp();_b(b);try{return b.R(c)}catch(a){a=OH(a);if(aw(a,119)){return false}else if(aw(a,76)){return false}else throw NH(a)}}
	function Qh(b,c){Oh();_b(b);try{return hnb(b,c)}catch(a){a=OH(a);if(aw(a,119)){return false}else if(aw(a,76)){return false}else throw NH(a)}}
	function nab(a,b){if(a.e<b.e){return -1}else if(a.e>b.e){return 1}else if(a.f<b.f){return -1}else if(a.f>b.f){return 1}return txb(a)-txb(b)}
	function QZ(a){switch(a.e){case 1:return sN(),rN;case 4:return sN(),$M;case 3:return sN(),ZM;case 2:return sN(),pN;default:return sN(),qN;}}
	function Ki(a){var b,c;b=cxb(a.c,a.c.length);switch(b.length){case 0:return Fi;case 1:c=new Er(b[0]);return c;default:return new gr(Ti(b));}}
	function EY(a){var b,c,d,e;d=xv(ow,syb,64,a.c.length,0,1);e=0;for(c=new Tob(a);c.a<c.c.c.length;){b=Wv(Rob(c),64);d[e++]=b}return new CY(d)}
	function sW(a){var b,c;if(!a.b){a.b=Do(a.a.b.c.length);for(c=new Tob(a.a.b);c.a<c.c.c.length;){b=Wv(Rob(c),33);vU(a.b,new yW(b))}}return a.b}
	function K6(a,b){var c,d,e;if(a.e){return 1}c=0;for(e=new Tob(b.f);e.a<e.c.c.length;){d=Wv(Rob(e),7);c+=d.b.c.length+d.e.c.length}return c}
	function I6(a){var b,c,d,e;b=false;e=false;for(d=new Tob(a.f);d.a<d.c.c.length;){c=Wv(Rob(d),7);b=b|c.g==(sN(),ZM);e=e|c.g==rN}return b&&e}
	function bV(a){var b,c;this.b=new GU;this.c=a;this.a=false;for(c=new Tob(a.b);c.a<c.c.c.length;){b=Wv(Rob(c),9);this.a=this.a|b.g==(CX(),AX)}}
	function uX(a){cX.call(this);this.g=(CX(),AX);this.f=(Mh(6,Vyb),new HU(6));this.c=(Mh(2,Vyb),new HU(2));this.e=new ZW;this.b=new ZW;this.a=a}
	function ffb(a,b,c,d,e,f){Teb(this);this.e=a;this.f=b;this.d=c;this.c=d;this.g=e;this.b=f;this.j=Ixb(Yv(e.mb().H()));this.i=Ixb(Yv(rl(e)))}
	function Lh(a,b){if(a==null){throw new Wlb('null key in entry: null='+b)}else if(b==null){throw new Wlb('null value in entry: '+a+'=null')}}
	function Hab(){Hab=iI;Eab=VQ(new WQ,(d0(),v_));Fab=new DJ('linearSegments.inputPrio',Elb(0));Gab=new DJ('linearSegments.outputPrio',Elb(0))}
	function Cd(a){var b,c,d,e;for(c=(e=(new aob(a.b)).a.bb().mb(),new fob(e));c.a.G();){b=(d=Wv(c.a.H(),21),Wv(d.zb(),19));b.Q()}Ymb(a.b);a.c=0}
	function WI(a,b){var c,d;Fxb(b,a.b);if(b>=a.b>>1){d=a.c;for(c=a.b;c>b;--c){d=d.b}}else{d=a.a.a;for(c=0;c<b;++c){d=d.a}}return new cvb(a,b,d)}
	function cU(a,b){var c,d,e;e=new FI;for(d=a.mb();d.G();){c=Wv(d.H(),55);UT(c,e.a,0);e.a+=c.e.a+b;e.b=Nlb(e.b,c.e.b)}e.b>0&&(e.b+=b);return e}
	function eU(a,b){var c,d,e;e=new FI;for(d=a.mb();d.G();){c=Wv(d.H(),55);UT(c,0,e.b);e.b+=c.e.b+b;e.a=Nlb(e.a,c.e.a)}e.a>0&&(e.a+=b);return e}
	function tub(a,b,c){var d,e,f;e=Wv(Smb(a.c,b),176);if(!e){d=new Jub(a,b,c);Umb(a.c,b,d);Gub(d);return null}else{f=job(e,c);uub(a,e);return f}}
	function y3(a,b){if(!Keb(a.b).kb(b.c)){return false}return Oeb(a.b)?!(rgb(b.d,a.c,a.a)&&rgb(b.a,a.c,a.a)):rgb(b.d,a.c,a.a)&&rgb(b.a,a.c,a.a)}
	function s6(a,b){return a.c<b.c||a.c==b.c&&d6(a.a)&&d6(b.a)&&h6(a.d,q6(a.a,a.b))>h6(a.d,q6(b.a,b.b))?-1:a.c==b.c&&q6(a.a,a.b)==q6(a.a,a.b)?0:1}
	function L5(a,b,c){if(a.e){switch(a.b){case 1:g5(a.c,b,c);break;case 0:h5(a.c,b,c);}}else{e5(a.c,b,c)}a.a[b.k][c.k]=a.c.i;a.a[c.k][b.k]=a.c.e}
	function LW(a,b,c){switch(c.e){case 1:a.a=b.a/2;a.b=0;break;case 2:a.a=b.a;a.b=b.b/2;break;case 3:a.a=b.a/2;a.b=b.b;break;case 4:a.a=0;a.b=b.b/2;}}
	function Jeb(a){switch(a.e){case 8:return sN(),$M;case 9:return sN(),pN;case 10:return sN(),ZM;case 11:return sN(),rN;default:return sN(),qN;}}
	function Qt(a){var b,c,d;b='Ot';d=Slb(a.length,5);for(c=0;c<d;c++){if(emb(a[c].d,b)){a.length>=c+1&&(a.splice(0,c+1),undefined);break}}return a}
	function Vv(a,b){if(ew(a)){return !!Uv[b]}else if(a._c){return !!a._c[b]}else if(cw(a)){return !!Tv[b]}else if(bw(a)){return !!Sv[b]}return false}
	function jQ(){RP();this.i=(mp(),new ntb);this.a=new ntb;this.k=new ntb;this.j=new ntb;this.b=new ntb;this.n=new ntb;this.f=new ntb;this.e=new ntb}
	function r$(a,b){var c,d;if(b.a.R(a)){return}else{d=Wv(rJ(a,(Rib(),hib)),32);c=Wv(yU(a.f,0),7);d==(sN(),$M)?QX(c,pN):d==pN&&QX(c,$M);b.a.db(a,b)}}
	function bbb(a){var b,c;c=Plb(1,Wv(rJ(a,(Rib(),Eib)),24).a);a.c.f.g==(CX(),AX)&&a.d.f.g==AX?(b=1):a.c.f.g==AX||a.d.f.g==AX?(b=2):(b=8);return c*b}
	function P1(a){var b,c,d,e,f;f=Wv(rJ(a,(Rib(),uib)),7);b=Wv(FU(a.b,xv(dB,gAb,12,a.b.c.length,0,1)),47);for(d=0,e=b.length;d<e;++d){c=b[d];eW(c,f)}}
	function Q1(a){var b,c,d,e,f;c=Wv(rJ(a,(Rib(),uib)),7);b=Wv(FU(a.e,xv(dB,gAb,12,a.e.c.length,0,1)),47);for(e=0,f=b.length;e<f;++e){d=b[e];dW(d,c)}}
	function Cfb(a){var b,c;yfb(this);c=a.i;b=vI(new HI(c.a,c.b),a.j);this.d=Qlb(c.b,b.b);this.a=Nlb(c.b,b.b);this.b=Qlb(c.a,b.a);this.c=Nlb(c.a,b.a)}
	function ipb(a,b,c,d){var e,f,g,h;!d&&(d=(hsb(),hsb(),gsb));e=(f=epb(a,b,c),g=(h=new Array(c-b),Cv(h,a)),dxb(a,b,g,0,f,true),g);jpb(e,a,b,c,-b,d)}
	function FU(a,b){var c,d,e;e=a.c.length;b.length<e&&(b=(d=new Array(e),Cv(d,b)));for(c=0;c<e;++c){Av(b,c,a.c[c])}b.length>e&&Av(b,e,null);return b}
	function npb(a,b){var c,d,e;e=a.a.length;b.length<e&&(b=(d=new Array(e),Cv(d,b)));for(c=0;c<e;++c){Av(b,c,a.a[c])}b.length>e&&Av(b,e,null);return b}
	function xb(a){return ew(a)?a:cw(a)?ilb((Dxb(a),a)):bw(a)?Bkb(Ckb((Dxb(a),a))):_v(a)?a.w():zv(a)?ob(a):a.toString?a.toString():'[JavaScriptObject]'}
	function A6(a){var b,c,d,e,f;f=0;for(c=a.b,d=0,e=c.length;d<e;++d){b=c[d];b.g==(CX(),zX)||Umb(a.c,b,Elb(f++));E6(a,b,a.d,(sN(),$M));E6(a,b,a.j,pN)}}
	function kbb(){kbb=iI;jbb=new lbb('SIMPLE',0);gbb=new lbb(zAb,1);hbb=new lbb('LINEAR_SEGMENTS',2);fbb=new lbb('BRANDES_KOEPF',3);ibb=new lbb(DAb,4)}
	function Xib(){Xib=iI;Wib=new Yib(tzb,0);Sib=new Yib('FIRST',1);Tib=new Yib('FIRST_SEPARATE',2);Uib=new Yib('LAST',3);Vib=new Yib('LAST_SEPARATE',4)}
	function Ndb(){Ndb=iI;Mdb=new Vdb;Kdb=TQ(new WQ,(d0(),A_));Ldb=PQ(TQ(new WQ,R_),Q_);Idb=PQ(UQ(TQ(SQ(new WQ,D_),F_),H_),E_);Jdb=PQ(UQ(new WQ,H_),q_)}
	function ceb(a){var b,c,d,e;for(c=(e=(new Snb(a.d.a)).a.bb().mb(),new Ynb(e));c.a.G();){b=(d=Wv(c.a.H(),21),Wv(d.yb(),12));vU(b.c.e,b);vU(b.d.b,b)}}
	function vvb(a,b){var c,d;vxb(b>0);if((b&-b)==b){return hw(b*wvb(a,31)*4.6566128730773926E-10)}do{c=wvb(a,31);d=c%b}while(c-d+(b-1)<0);return hw(d)}
	function zcb(a,b){if(a.c.f==b){return a.d.f}else if(a.d.f==b){return a.c.f}else{throw new slb('Node '+b+' is neither source nor target of edge '+a)}}
	function Ekb(a,b,c){vxb(a>=0&&a<=1114111);if(a>=ayb){b[c++]=55296+(a-ayb>>10&1023)&byb;b[c]=56320+(a-ayb&1023)&byb;return 2}else{b[c]=a&byb;return 1}}
	function Ol(a,b){Il();var c,d;while(a.G()){if(!b.G()){return false}c=a.H();d=b.H();if(!(gw(c)===gw(d)||c!=null&&rb(c,d))){return false}}return !b.G()}
	function JS(a){var b,c,d;Vvb(a.b.a);a.a=xv(kA,syb,25,a.c.b.a.b.c.length,0,1);b=0;for(d=new Tob(a.c.b.a.b);d.a<d.c.c.length;){c=Wv(Rob(d),25);c.k=b++}}
	function PT(a){var b,c,d,e;Gpb(a.c,a.a);for(e=new Tob(a.c);e.a<e.c.c.length;){d=Rob(e);for(c=new Tob(a.b);c.a<c.c.c.length;){b=Wv(Rob(c),160);b.Ec(d)}}}
	function zW(a){var b,c;if(!a.a){a.a=Do(Wv(a.e,9).c.c.length);for(c=new Tob(Wv(a.e,9).c);c.a<c.c.c.length;){b=Wv(Rob(c),33);vU(a.a,new yW(b))}}return a.a}
	function DW(a){var b,c;if(!a.b){a.b=Do(Wv(a.e,7).c.c.length);for(c=new Tob(Wv(a.e,7).c);c.a<c.c.c.length;){b=Wv(Rob(c),33);vU(a.b,new yW(b))}}return a.b}
	function F6(a){this.b=a;this.c=(mp(),new ntb);this.i=new ntb;this.d=new ntb;this.j=new ntb;this.k=gw(rJ(hX(a[0]),(eM(),uL)))===gw((NK(),JK));A6(this)}
	function sgb(a){switch(a.e){case 1:return 4.71238898038469;default:case 2:return 0;case 3:return 1.5707963267948966;case 4:return 3.141592653589793;}}
	function Ql(a){Il();var b;b=Kl(a);if(!Cm(a)){throw new okb('position (0) must be less than the number of elements that remained ('+b+')')}return Dm(a)}
	function un(b,c){var d,e;d=b.ub(c);try{e=d.H();d.I();return e}catch(a){a=OH(a);if(aw(a,74)){throw new okb("Can't remove element "+c)}else throw NH(a)}}
	function Ye(a,b){var c,d,e,f;f=a.Y();b.length<f&&(b=(e=new Array(f),Cv(e,b)));d=a.mb();for(c=0;c<f;++c){Av(b,c,d.H())}b.length>f&&Av(b,f,null);return b}
	function qX(a,b,c){if(!!c&&(b<0||b>c.a.c.length)){throw new slb('index must be >= 0 and <= layer node count')}!!a.d&&BU(a.d.a,a);a.d=c;!!c&&uU(c.a,b,a)}
	function Zvb(a,b,c,d,e,f,g,h){var i,j;if(!d){return}i=d.a[0];!!i&&Zvb(a,b,c,i,e,f,g,h);$vb(a,c,d.d,e,f,g,h)&&b.ib(d);j=d.a[1];!!j&&Zvb(a,b,c,j,e,f,g,h)}
	function Gxb(a,b,c){if(a<0){throw new okb(jyb+a+' < 0')}if(b>c){throw new okb('toIndex: '+b+' > size '+c)}if(a>b){throw new slb(jyb+a+' > toIndex: '+b)}}
	function ee(a,b){var c,d,e;c=b.yb();e=b.zb();d=a.cb(c);if(!(gw(e)===gw(d)||e!=null&&rb(e,d))){return false}if(d==null&&!a.R(c)){return false}return true}
	function h1(a,b,c){var d;d=b.c.f;if(d.g==(CX(),zX)){sJ(a,(Rib(),qib),Wv(rJ(d,qib),7));sJ(a,rib,Wv(rJ(d,rib),7))}else{sJ(a,(Rib(),qib),b.c);sJ(a,rib,c.d)}}
	function w2(a,b,c){var d;d=b.c.f;if(d.g==(CX(),zX)){sJ(a,(Rib(),qib),Wv(rJ(d,qib),7));sJ(a,rib,Wv(rJ(d,rib),7))}else{sJ(a,(Rib(),qib),b.c);sJ(a,rib,c.d)}}
	function at(a,b,c){var d,e,f,g,h;bt(a);for(e=(a.i==null&&(a.i=xv(_F,Txb,46,0,0,1)),a.i),f=0,g=e.length;f<g;++f){d=e[f];at(d,b,'\t'+c)}h=a.e;!!h&&at(h,b,c)}
	function yv(a,b){var c=new Array(b);var d;switch(a){case 11:case 12:d=0;break;case 13:d=false;break;default:return c;}for(var e=0;e<b;++e){c[e]=d}return c}
	function P5(a){var b,c,d,e;e=xv(qB,Txb,51,a.a.length,0,2);for(c=0;c<e.length;c++){d=a.a[c].length;b=xv(qB,Nzb,9,d,0,1);Gmb(a.a[c],0,b,0,d);e[c]=b}return e}
	function AW(a){var b,c;if(!a.b){a.b=Do(Wv(a.e,9).f.c.length);for(c=new Tob(Wv(a.e,9).f);c.a<c.c.c.length;){b=Wv(Rob(c),7);vU(a.b,new FW(b,a.c))}}return a.b}
	function sp(b,c){mp();_b(b);try{return ew(c)?Xmb(b,c):Mtb(b.d,c)}catch(a){a=OH(a);if(aw(a,119)){return null}else if(aw(a,76)){return null}else throw NH(a)}}
	function Blb(a){var b;b=(Ilb(),Hlb);return b[a>>>28]|b[a>>24&15]<<4|b[a>>20&15]<<8|b[a>>16&15]<<12|b[a>>12&15]<<16|b[a>>8&15]<<20|b[a>>4&15]<<24|b[a&15]<<28}
	function ZV(a,b,c){var d,e;if(b.c==(djb(),bjb)&&c.c==ajb){return -1}else if(b.c==ajb&&c.c==bjb){return 1}d=aW(b.a,a.a);e=aW(c.a,a.a);return b.c==bjb?e-d:d-e}
	function L7(a){var b,c,d,e,f;e=$xb;f=null;for(d=new Tob(a.d);d.a<d.c.c.length;){c=Wv(Rob(d),89);if(c.c.j^c.d.j){b=c.d.e-c.c.e-c.a;if(b<e){e=b;f=c}}}return f}
	function $vb(a,b,c,d,e,f,g){var h,i;if(b.Xc()&&(i=a.a.$b(c,d),i<0||!e&&i==0)){return false}if(b.Yc()&&(h=a.a.$b(c,f),h>0||!g&&h==0)){return false}return true}
	function Yj(a){hi();var b,c;if(!a.G()){return kr(),jr}c=a.H();if(!a.G()){return new Gr(c)}b=new Wub;stb(b,_b(c));do{stb(b,_b(a.H()))}while(a.G());return ck(b)}
	function m6(a,b,c){a.e=b;a.a=c;a.d=n6(a,(sN(),ZM));a.d+=n6(a,rN);j6(a,b,c,ZM,a.f);j6(a,b,c,rN,a.n);a.b=n6(a,ZM);a.b+=n6(a,rN);j6(a,c,b,ZM,a.f);j6(a,c,b,rN,a.n)}
	function hmb(a){var b,c,d;c=(bmb(),a.length);d=0;while(d<c&&a.charCodeAt(d)<=32){++d}b=c;while(b>d&&a.charCodeAt(b-1)<=32){--b}return d>0||b<c?a.substr(d,b-d):a}
	function dxb(a,b,c,d,e,f){var g,h,i;if(gw(a)===gw(c)){a=a.slice(b,b+e);b=0}for(h=b,i=b+e;h<i;){g=h+10000<i?h+10000:i;e=g-h;bxb(c,d,f?e:0,a.slice(h,g));h=g;d+=e}}
	function Nv(a){var b,c,d;if(Iv(a,(Rv(),Qv))<0){return -Fv((b=~a.l+1&azb,c=~a.m+(b==0?1:0)&azb,d=~a.h+(b==0&&c==0?1:0)&bzb,Ev(b,c,d)))}return a.l+a.m*czb+a.h*dzb}
	function JW(a,b){var c;c=a.f;switch(b.e){case 1:return -(a.i.b+a.j.b);case 2:return a.i.a-c.j.a;case 3:return a.i.b-c.j.b;case 4:return -(a.i.a+a.j.a);}return 0}
	function KM(){KM=iI;JM=new NM(szb,0);IM=new NM('FREE',1);HM=new NM('FIXED_SIDE',2);EM=new NM('FIXED_ORDER',3);GM=new NM('FIXED_RATIO',4);FM=new NM('FIXED_POS',5)}
	function ZT(a,b){var c,d,e,f;c=Wv(rJ(b,(Rib(),fib)),18);f=Wv(Dd(WT,c),18);for(e=f.mb();e.G();){d=Wv(e.H(),18);if(!Wv(Dd(a.a,d),20).V()){return false}}return true}
	function HY(a,b,c){this.b=new Dh;this.i=new GU;this.d=new JY(this);this.g=a;this.a=b.c.length;this.c=b;this.e=Wv(yU(this.c,this.c.c.length-1),9);this.f=c;FY(this)}
	function Pgb(){Pgb=iI;Lgb=new Rgb('ALWAYS_UP',0);Kgb=new Rgb('ALWAYS_DOWN',1);Ngb=new Rgb('DIRECTION_UP',2);Mgb=new Rgb('DIRECTION_DOWN',3);Ogb=new Rgb('SMART',4)}
	function Iv(a,b){var c,d,e,f,g,h,i,j;i=a.h>>19;j=b.h>>19;if(i!=j){return j-i}e=a.h;h=b.h;if(e!=h){return e-h}d=a.m;g=b.m;if(d!=g){return d-g}c=a.l;f=b.l;return c-f}
	function K7(a){var b,c,d,e;for(c=(e=(new Snb(a.p.a)).a.bb().mb(),new Ynb(e));c.a.G();){b=(d=Wv(c.a.H(),21),Wv(d.yb(),89));if(b.e&&a.b[b.b]<0){return b}}return null}
	function TN(a,b){var c,d,e,f,g;d=Qlb(a.d,b.d);f=Qlb(a.e,b.e);e=Nlb(a.d+a.c,b.d+b.c);g=Nlb(a.e+a.b,b.e+b.b);if(e<d){c=d;d=e;e=c}if(g<f){c=f;f=g;g=c}SN(a,d,f,e-d,g-f)}
	function hQ(a,b){var c;if(Gzb in a.a){c=Pu(a,Gzb);if(!c.kc()){throw new GQ("The 'properties' property of a graph element must be an object.",c,a)}iQ(c.kc(),b,true)}}
	function HS(a,b){var c,d,e;d=a.b.j.e;a.a||(d+=a.b.j.b);e=b.b.j.e;b.a||(e+=b.b.j.b);c=glb(d,e);if(c==0){if(!a.a&&b.a){return -1}else if(!b.a&&a.a){return 1}}return c}
	function kX(a){var b,c;switch(Wv(rJ(hX(a),(Mjb(),ujb)),174).e){case 0:b=a.i;c=a.j;return new HI(b.a+c.a/2,b.b+c.b/2);case 1:return new II(a.i);default:return null;}}
	function RX(){LX();cX.call(this);this.g=(sN(),qN);this.a=new FI;this.d=new ZW;this.c=(Mh(2,Vyb),new HU(2));this.b=(Mh(4,Vyb),new HU(4));this.e=(Mh(4,Vyb),new HU(4))}
	function G6(a,b,c){a.d=0;a.b=0;P6(a,b,c);b.g==(CX(),BX)&&c.g==zX?M6(b).g==(sN(),$M)?(a.d=1):(a.b=1):c.g==BX&&b.g==zX&&(M6(c).g==(sN(),$M)?(a.b=1):(a.d=1));O6(a,b,c)}
	function h9(a,b){var c,d;for(d=new Tob(b);d.a<d.c.c.length;){c=Wv(Rob(d),9);a.a[c.d.k][c.k].a=uvb(a.e);a.a[c.d.k][c.k].d=Ixb(a.a[c.d.k][c.k].a);a.a[c.d.k][c.k].b=1}}
	function d9(a,b,c){var d,e,f;for(f=new Tob(b);f.a<f.c.c.length;){d=Wv(Rob(f),9);a.a[d.d.k][d.k].e=false}for(e=new Tob(b);e.a<e.c.c.length;){d=Wv(Rob(e),9);c9(a,d,c)}}
	function Ydb(a,b){var c,d,e,f;c=0;d=0;for(f=new Tob(b.b);f.a<f.c.c.length;){e=Wv(Rob(f),33);c=Nlb(c,e.j.a);d+=e.j.b}sJ(b,(Rib(),Lib),new HI(c,d));a.k<c&&(a.k=c);a.j+=d}
	function Vbb(a,b){this.c=(mp(),new ntb);this.a=a;this.b=b;this.d=Wv(rJ(a,(Rib(),Kib)),134);gw(rJ(a,(Mjb(),hjb)))===gw((lcb(),kcb))?(this.e=new Jcb):(this.e=new Ccb)}
	function Z4(a,b){var c,d,e,f;e=0;for(d=0;d<b.length;d++){c=b[d];if(d<b.length-1){f=b[d+1];e+=$4(a,c,f)}e+=(a.d=new F6(c),x6(a.d));e+=(a.a=new k6(c),a6(a.a))}return e}
	function S6(a){switch(a.c.e){case 1:return LX(),HX;case 2:return LX(),FX;case 3:return LX(),JX;case 4:return LX(),KX;}throw new Imb("Can't filter on undefined side")}
	function Pr(b,c){var d;try{d=b.c.a;if(!ok(b.b,c)||!d){return 0}return Es(d,b.d,c)}catch(a){a=OH(a);if(aw(a,119)){return 0}else if(aw(a,76)){return 0}else throw NH(a)}}
	function J4(a){var b,c,d,e,f;for(d=new rnb((new inb(a.b)).a);d.b;){c=pnb(d);b=Wv(c.yb(),9);f=Wv(Wv(c.zb(),27).a,9);e=Wv(Wv(c.zb(),27).b,10);vI(BI(b.i),vI(xI(f.i),e))}}
	function B9(a,b,c){var d,e,f;d=glb(a.a[b.k],a.a[c.k]);if(d==0){e=Wv(rJ(b,(Rib(),oib)),20);f=Wv(rJ(c,oib),20);if(e.kb(c)){return -1}else if(f.kb(b)){return 1}}return d}
	function ogb(a,b){var c,d;d=vI(xI(a.i),a.a);c=a.f.j;switch(b.e){case 1:return -d.b;case 2:return -d.a+c.a;case 3:return -d.b+c.b;case 4:return -d.a;default:return 0;}}
	function Z8(a,b){var c,d,e,f;for(e=0;e<b.length;e++){e+1<b.length&&X8(a,b[e+1],(djb(),ajb));f=b[e];c=0;for(d=0;d<f.length;d++){Y8(a,f[d]);c+=a.Hc(f[d],c,(djb(),bjb))}}}
	function Mfb(){Mfb=iI;Lfb=UQ(UQ(RQ(new WQ,(d0(),__)),$_),a0);Hfb=PQ(UQ(TQ(SQ(new WQ,D_),F_),H_),E_);Jfb=TQ(new WQ,A_);Kfb=PQ(TQ(new WQ,R_),Q_);Ifb=PQ(UQ(new WQ,H_),q_)}
	function dI(b,c,d,e){cI();var f=aI;$moduleName=c;$moduleBase=d;LH=e;function g(){for(var a=0;a<f.length;a++){f[a]()}}
	if(b){try{Rxb(g)()}catch(a){b(c,a)}}else{Rxb(g)()}}
	function clb(a){blb==null&&(blb=/^\s*[+-]?(NaN|Infinity|((\d+\.?\d*)|(\.\d+))([eE][+-]?\d+)?[dDfF]?)\s*$/);if(!elb(blb,a)){throw new Ylb(dyb+a+'"')}return parseFloat(a)}
	function _gb(){_gb=iI;Ygb=new ahb(tzb,0);Xgb=new ahb('LEFTUP',1);$gb=new ahb('RIGHTUP',2);Wgb=new ahb('LEFTDOWN',3);Zgb=new ahb('RIGHTDOWN',4);Vgb=new ahb('BALANCED',5)}
	function zgb(){zgb=iI;ygb=new Agb('V_TOP',0);xgb=new Agb('V_CENTER',1);wgb=new Agb('V_BOTTOM',2);ugb=new Agb('H_LEFT',3);tgb=new Agb('H_CENTER',4);vgb=new Agb('H_RIGHT',5)}
	function YK(){YK=iI;WK=new ZK(tzb,0);UK=new ZK('DIRECTED',1);XK=new ZK('UNDIRECTED',2);SK=new ZK('ASSOCIATION',3);VK=new ZK('GENERALIZATION',4);TK=new ZK('DEPENDENCY',5)}
	function CX(){CX=iI;AX=new DX('NORMAL',0);zX=new DX('LONG_EDGE',1);xX=new DX('EXTERNAL_PORT',2);BX=new DX('NORTH_SOUTH_PORT',3);yX=new DX('LABEL',4);wX=new DX('BIG_NODE',5)}
	function wv(a,b,c,d,e,f,g){var h,i,j,k,l;k=e[f];j=f==g-1;h=j?d:0;l=yv(h,k);d!=9&&Bv(tv(a,g-f),b[f],c[f],h,l);if(!j){++f;for(i=0;i<k;++i){l[i]=wv(a,b,c,d,e,f,g)}}return l}
	function gX(a){var b,c,d;b=new GU;for(d=new Tob(a.f);d.a<d.c.c.length;){c=Wv(Rob(d),7);vU(b,Sh((Gi(),new gr(Ti(Bv(tv(UF,1),syb,1,4,[c.b,c.e]))))))}return _b(b),new Vh(b)}
	function b7(a,b,c){this.a=c;if(a>=b.length){throw new okb('Greedy SwitchDecider: Free layer layer not in graph.')}this.b=b[a];this.c=new r6(this.b);this.d=new R6(this.b)}
	function _n(a,b){var c;this.f=a;this.b=this.f.c;c=a.d;bc(b,c);if(b>=(c/2|0)){this.e=a.e;this.d=c;while(b++<c){Zn(this)}}else{this.c=a.a;while(b-->0){Yn(this)}}this.a=null}
	function qS(a){var b,c,d;for(c=new Tob(a.a.b);c.a<c.c.c.length;){b=Wv(Rob(c),25);d=b.j.d;b.j.d=b.j.e;b.j.e=d;d=b.j.c;b.j.c=b.j.b;b.j.b=d;d=b.g.a;b.g.a=b.g.b;b.g.b=d}fS(a)}
	function f1(a,b){var c,d,e;d=new Fnb(a.b,0);while(d.b<d.d.Y()){c=(Bxb(d.b<d.d.Y()),Wv(d.d.sb(d.c=d.b++),33));e=Wv(rJ(c,(eM(),tL)),107);if(e==(EK(),BK)){vnb(d);vU(b.b,c)}}}
	function Vab(a,b,c){var d,e,f,g;g=zU(a.f,b,0);f=new Wab;f.b=c;d=new Fnb(a.f,g);while(d.b<d.d.Y()){e=(Bxb(d.b<d.d.Y()),Wv(d.d.sb(d.c=d.b++),9));e.k=c;vU(f.f,e);vnb(d)}return f}
	function Eq(a,b){Dq();var c,d,e;if(b.V()){return false}if(aw(b,207)){e=Wv(b,207);for(d=e.bb().mb();d.G();){c=Wv(d.H(),83);a.Bb(c.Zb(),c.Yb())}}else{Jl(a,b.mb())}return true}
	function MN(){MN=iI;KN=new NN('DEFAULT_MINIMUM_SIZE',0);LN=new NN('MINIMUM_SIZE_ACCOUNTS_FOR_INSETS',1);JN=new NN('COMPUTE_INSETS',2);IN=new NN('APPLY_ADDITIONAL_INSETS',3)}
	function MP(a){var b,c,d,e;c=a.a.b+2;e=xv(qz,Fzb,10,c,0,1);e[0]=xI(MX(a.c));d=WI(a.a,0);while(d.b!=d.d.c){b=Wv(_ub(d),10);e[d.a]=new HI(b.a,b.b)}e[c-1]=xI(MX(a.d));return e}
	function ge(a,b,c){var d,e,f;for(e=a.bb().mb();e.G();){d=Wv(e.H(),21);f=d.yb();if(gw(b)===gw(f)||b!=null&&rb(b,f)){if(c){d=new qob(d.yb(),d.zb());e.I()}return d}}return null}
	function f9(a,b,c){var d,e;d=a.a[b.d.k][b.k];e=a.a[c.d.k][c.k];if(d.a!=null&&e.a!=null){return flb(d.a,e.a)}else if(d.a!=null){return -1}else if(e.a!=null){return 1}return 0}
	function beb(a,b,c){var d,e,f;e=b.c;f=b.d;d=c;if(stb(a.a,b)){Xdb(a,e)&&(d=true);Xdb(a,f)&&(d=true);if(d){BU(b.c.e,b);BU(b.d.b,b);stb(a.d,b)}Ydb(a,b);return true}return false}
	function $eb(a,b,c){var d,e;e=Zeb(a,b);if(e==a.c){return Web(a,Yeb(a,b))}if(c){_eb(a,b,a.c-e);return Web(a,Yeb(a,b))}else{d=new dfb(a);_eb(d,b,a.c-e);return Web(d,Yeb(d,b))}}
	function $tb(){function b(){try{return (new Map).entries().next().done}catch(a){return false}}
	if(typeof Map===Zxb&&Map.prototype.entries&&b()){return Map}else{return _tb()}}
	function Dd(a,b){var c;c=Wv(Smb(a.b,b),19);!c&&(c=a.Z());return aw(c,137)?new Lg(a,b,Wv(c,137)):aw(c,18)?new Kg(a,b,Wv(c,18)):aw(c,20)?Ld(a,b,Wv(c,20),null):new _f(a,b,c,null)}
	function Gs(a){switch(Rs(a.e)-Rs(a.g)){case -2:Cs(a.g)>0&&(a.g=Ls(a.g));return Ks(a);case 2:Cs(a.e)<0&&(a.e=Ks(a.e));return Ls(a);default:a.d=1+Plb(Rs(a.e),Rs(a.g));return a;}}
	function k5(a,b){this.f=(mp(),new ntb);this.b=new ntb;this.j=new ntb;this.a=a;this.c=b;this.c>0&&j5(this,this.c-1,(sN(),ZM));this.c<this.a.length-1&&j5(this,this.c+1,(sN(),rN))}
	function jt(a){var b;if(a.c==null){b=gw(a.b)===gw(ht)?null:a.b;a.d=b==null?Wxb:dw(b)?mt(Zv(b)):ew(b)?'String':Ikb(tb(b));a.a=a.a+': '+(dw(b)?lt(Zv(b)):b+'');a.c='('+a.d+') '+a.a}}
	function IY(a){var b,c,d,e;for(c=new Tob(a.a.c);c.a<c.c.c.length;){b=Wv(Rob(c),9);for(e=WI(Eo(b.c),0);e.b!=e.d.c;){d=Wv(_ub(e),33);rJ(d,(Rib(),uib))==null&&BU(b.c,d)}}return null}
	function e3(a,b){var c,d,e,f,g;g=new GU;for(d=Wv(qsb(a3,a),20).mb();d.G();){c=Wv(d.H(),75);xU(g,c.b)}Dpb(g);K2(g,a.a);for(f=new Tob(g);f.a<f.c.c.length;){e=Wv(Rob(f),7);Anb(b,e)}}
	function P7(a){var b,c,d,e;while(a.o.a.c.length!=0){c=Wv(Svb(a.o),27);d=Wv(c.a,61);b=Wv(c.b,89);e=c7(b,d);if(b.d==d){o7(e.g,b);d.e=e.e+b.a}else{o7(e.c,b);d.e=e.e-b.a}vU(a.e.a,d)}}
	function Tr(a,b,c){var d,e,f;Mh(c,'count');if(!ok(a.b,b)){Xb(c==0);return 0}f=a.c.a;if(!f){c>0&&Lr(a,b,c);return 0}e=xv(mw,Yyb,26,1,12,1);d=Ns(f,a.d,b,c,e);Us(a.c,f,d);return e[0]}
	function l$(a,b){var c,d,e,f,g;e=Wv(rJ(b,(Rib(),Jib)),15).a*Wv(rJ(b,(Mjb(),qjb)),15).a;g=a[0].i.a+a[0].j.a;for(f=1;f<a.length;f++){c=a[f].i;d=a[f].j;c.a<=g+e&&(c.a=g+e);g=c.a+d.a}}
	function tvb(){tvb=iI;var a,b,c,d;qvb=xv(kw,hyb,26,25,12,1);rvb=xv(kw,hyb,26,33,12,1);d=1.52587890625E-5;for(b=32;b>=0;b--){rvb[b]=d;d*=0.5}c=1;for(a=24;a>=0;a--){qvb[a]=c;c*=0.5}}
	function f5(a){while(a.g.c!=0&&a.d.c!=0){if(o5(a.g).c>o5(a.d).c){a.i+=a.g.c;q5(a.d)}else if(o5(a.d).c>o5(a.g).c){a.e+=a.d.c;q5(a.g)}else{a.i+=n5(a.g);a.e+=n5(a.d);q5(a.g);q5(a.d)}}}
	function TP(a){if(!a){throw new EQ('An element is null. The origin of an edge could not be determined, this might be due to an inconsistency within the internal element mappings.')}}
	function UP(a,b){var c,d;Ymb(a.i);Ymb(a.a);Ymb(a.k);Ymb(a.j);Ymb(a.b);Ymb(a.n);Ymb(a.f);Ymb(a.e);if(a.d){d=Pu(a.d,OP.b);!!d&&!!d.ic()&&(a.c=d.ic().a)}c=fQ(a,b,null);bQ(a,b);return c}
	function kfb(a){var b,c,d,e,f,g;d=hfb(gfb(a));b=rAb;f=0;e=0;while(b>0.5&&f<50){e=ofb(d);c=$eb(d,e,true);b=Jlb(c.b);++f}g=Yv(tn(Eo(a.g),Eo(a.g).b-1));return $eb(a,(Dxb(g),g)-e,false)}
	function lfb(a){var b,c,d,e,f,g;d=hfb(gfb(a));b=rAb;f=0;e=0;while(b>0.5&&f<50){e=nfb(d);c=$eb(d,e,true);b=Jlb(c.a);++f}g=Yv(tn(Eo(a.g),Eo(a.g).b-1));return $eb(a,(Dxb(g),g)-e,false)}
	function Ze(a){var b,c,d,e;e=new Bmb('[');b=false;for(d=a.mb();d.G();){c=d.H();b?(e.a+=', ',e):(b=true);ymb(e,c===a?'(this Collection)':(bmb(),c==null?Wxb:xb(c)))}e.a+=']';return e.a}
	function ie(a){var b,c,d,e;e=new Bmb('{');b=false;for(d=a.bb().mb();d.G();){c=Wv(d.H(),21);b?(e.a+=', ',e):(b=true);ymb(e,je(a,c.yb()));e.a+='=';ymb(e,je(a,c.zb()))}e.a+='}';return e.a}
	function Ks(a){var b;dc(!!a.g);b=a.g;a.g=b.e;b.e=a;b.j=a.j;b.a=a.a;a.a=1+Zr(a.e)+Zr(a.g);a.j=PH(PH(a.c,Ts(a.e)),Ts(a.g));a.d=1+Plb(Rs(a.e),Rs(a.g));b.d=1+Plb(Rs(b.e),Rs(b.g));return b}
	function Ls(a){var b;dc(!!a.e);b=a.e;a.e=b.g;b.g=a;b.j=a.j;b.a=a.a;a.a=1+Zr(a.e)+Zr(a.g);a.j=PH(PH(a.c,Ts(a.e)),Ts(a.g));a.d=1+Plb(Rs(a.e),Rs(a.g));b.d=1+Plb(Rs(b.e),Rs(b.g));return b}
	function ZO(a){var b;if(!Qob(new Tob(AW(a.e)))){return}b=Wv(oW(a.e,(eM(),TL)),28);b==(KM(),FM)?SO(a.e):b==GM?TO(a.e):Ckb(Ixb(Xv(oW(a.e,AL))))||a.e.e.j.a==0&&a.e.e.j.b==0?UO(a.e):WO(a)}
	function s3(a,b,c){var d,e,f;e=new Tob(a);if(e.a<e.c.c.length){f=Wv(Rob(e),33);d=r3(f,b,c);while(e.a<e.c.c.length){f=Wv(Rob(e),33);Afb(d,r3(f,b,c))}return new Dfb(d)}else{return null}}
	function u2(a,b){var c,d,e,f,g,h;e=0;for(d=new Tob(b.c);d.a<d.c.c.length;){c=Wv(Rob(d),16);for(g=new Tob(c.a);g.a<g.c.c.length;){f=Wv(Rob(g),9);h=f.j.a+f.e.c+f.e.b+a.b;e=e>h?e:h}}return e}
	function sT(a,b){oT();var c;if(a.c==b.c){if(a.b==b.b||gT(a.b,b.b)){c=dT(a.b)?1:-1;if(a.a&&!b.a){return c}else if(!a.a&&b.a){return -c}}return xlb(a.b.e,b.b.e)}else{return glb(a.c,b.c)}}
	function nU(a){var b,c;c=xI(MI(Bv(tv(qz,1),Fzb,10,0,[a.f.i,a.i,a.a])));b=a.f.e;switch(a.g.e){case 1:c.b-=b.d;break;case 2:c.a+=b.c;break;case 3:c.b+=b.a;break;case 4:c.a-=b.b;}return c}
	function z6(a,b){var c;c=0;if(b.g==(CX(),BX)){if(C6(b).f!=a.a){D6(a,C6(b).f);a.e=true}a.e?++a.g:(c+=a.f)}else if(b.g==zX){a.e?(c+=a.g):++a.f}else if(b.g==AX){D6(a,b);a.e=false}return c}
	function HV(a,b,c,d,e){var f,g,h,i;i=null;for(h=new Tob(d);h.a<h.c.c.length;){g=Wv(Rob(h),187);if(g!=c&&zU(g.e,e,0)!=-1){i=g;break}}f=IV(e);dW(f,c.b);eW(f,i.b);Fd(a.a,e,new XV(f,b,c.f))}
	function FZ(a){switch(Wv(rJ(a,(Mjb(),vjb)),85).e){case 1:sJ(a,vjb,(Xib(),Uib));break;case 2:sJ(a,vjb,(Xib(),Vib));break;case 3:sJ(a,vjb,(Xib(),Sib));break;case 4:sJ(a,vjb,(Xib(),Tib));}}
	function iQ(a,b,c){var d,e,f,g;if(a){for(e=(f=Nu(a,xv($F,Txb,2,0,5,1)),new wnb(new opb((new _u(a,f)).b)));e.b<e.d.Y();){d=(Bxb(e.b<e.d.Y()),$v(e.d.sb(e.c=e.b++)));g=Pu(a,d);wQ(b,d,g,c)}}}
	function G5(a,b,c){var d,e,f,g,h,i;e=1;while(e<a){e*=2}i=2*e-1;e-=1;h=xv(mw,Yyb,26,i,12,1);d=0;for(g=0;g<b;g++){f=c[g]+e;++h[f];while(f>0){f%2>0&&(d+=h[f+1]);f=(f-1)/2|0;++h[f]}}return d}
	function aeb(a,b,c){var d,e,f,g;a.e=b;if(c){for(e=(g=(new Snb(a.a.a)).a.bb().mb(),new Ynb(g));e.a.G();){d=(f=Wv(e.a.H(),21),Wv(f.yb(),12));sJ(d,(Rib(),Mib),a.e);QX(d.c,b.a);QX(d.d,b.b)}}}
	function g4(){g4=iI;e4=new h4(tzb,0);b4=new h4(ozb,1);f4=new h4(pzb,2);d4=new h4('LEFT_RIGHT_CONSTRAINT_LOCKING',3);c4=new h4('LEFT_RIGHT_CONNECTION_LOCKING',4);a4=new h4('EDGE_LENGTH',5)}
	function N5(a,b,c,d){var e;this.b=d;this.e=a.a;e=b[c];this.d=vv(KH,[Txb,xAb],[227,26],13,[e.length,e.length],2);this.a=vv(mw,[Txb,Yyb],[52,26],12,[e.length,e.length],2);this.c=new k5(b,c)}
	function fwb(a,b,c,d){var e,f;f=b;e=f.d==null||a.a.$b(c.d,f.d)>0?1:0;while(f.a[e]!=c){f=f.a[e];e=a.a.$b(c.d,f.d)>0?1:0}f.a[e]=d;d.b=c.b;d.a[0]=c.a[0];d.a[1]=c.a[1];c.a[0]=null;c.a[1]=null}
	function ZQ(a,b,c){var d,e,f,g;nI(c,Tzb,1);NQ(a.d,b);g=sV(a.a,b);if(g.Y()==1){_Q(Wv(g.sb(0),55),c)}else{f=1/g.Y();for(e=g.mb();e.G();){d=Wv(e.H(),55);_Q(d,rI(c,f))}}qV(a.a,g,b);bR(b);pI(c)}
	function o6(a,b,c){var d,e,f,g,h;h=new U6(b,c);for(g=T6(h);g.G();){f=Wv(g.H(),7);for(e=Uh(Sh((Gi(),new gr(Ti(Bv(tv(UF,1),syb,1,4,[f.b,f.e]))))));Cm(e);){d=Wv(Dm(e),12);bW(d)||l6(a,b,f,d)}}}
	function _6(a,b){var c,d,e;e=nX(a,b);for(d=e.mb();d.G();){c=Wv(d.H(),7);if(rJ(c,(Rib(),Bib))!=null||Cm(Uh(Sh((Gi(),new gr(Ti(Bv(tv(UF,1),syb,1,4,[c.b,c.e])))))))){return true}}return false}
	function Efb(a){var b,c;if(sl(a)){throw new slb(TAb)}for(c=WI(a,0);c.b!=c.d.c;){b=Wv(_ub(c),10);this.d=Qlb(this.d,b.b);this.c=Nlb(this.c,b.a);this.a=Nlb(this.a,b.b);this.b=Qlb(this.b,b.a)}}
	function wI(a,b,c){if(b<0||c<0){throw new slb('The highx must be bigger then lowx and the highy must be bigger then lowy')}a.a<0?(a.a=0):a.a>b&&(a.a=b);a.b<0?(a.b=0):a.b>c&&(a.b=c);return a}
	function nX(a,b){switch(b.e){case 1:return pl(a.f,(LX(),HX));case 2:return pl(a.f,(LX(),FX));case 3:return pl(a.f,(LX(),JX));case 4:return pl(a.f,(LX(),KX));default:return ypb(),ypb(),vpb;}}
	function K0(a){var b,c,d,e;for(e=(Il(),new Im(Dl(ul(a.a,new yl))));Cm(e);){d=Wv(Dm(e),9);d.g==(CX(),yX)&&sJ(d,(Rib(),pib),(kP(),hP));for(c=Uh(mX(d));Cm(c);){b=Wv(Dm(c),12);M0(b,(kP(),hP))}}}
	function L0(a){var b,c,d,e;for(e=(Il(),new Im(Dl(ul(a.a,new yl))));Cm(e);){d=Wv(Dm(e),9);d.g==(CX(),yX)&&sJ(d,(Rib(),pib),(kP(),gP));for(c=Uh(mX(d));Cm(c);){b=Wv(Dm(c),12);M0(b,(kP(),gP))}}}
	function cdb(a,b){this.b=new vtb;switch(a){case 0:this.d=new Ddb(this);break;case 1:this.d=new tdb(this);break;case 2:this.d=new ydb(this);break;default:throw new rlb;}this.c=b;this.a=0.2*b}
	function uW(a){var b,c,d,e;if(!a.b){a.b=new GU;for(c=new Tob(a.a.c);c.a<c.c.c.length;){b=Wv(Rob(c),16);for(e=new Tob(b.a);e.a<e.c.c.length;){d=Wv(Rob(e),9);vU(a.b,new BW(d,a.c))}}}return a.b}
	function l5(a,b){var c,d,e;c=m5(b,a.e);d=Wv(Smb(a.g.f,c),24).a;e=a.a.c.length-1;if(a.a.c.length!=0&&Wv(yU(a.a,e),128).c==d){++Wv(yU(a.a,e),128).a;++Wv(yU(a.a,e),128).b}else{vU(a.a,new v5(d))}}
	function lmb(a){bmb();var b,c;if(a>=ayb){b=55296+(a-ayb>>10&1023)&byb;c=56320+(a-ayb&1023)&byb;return String.fromCharCode(b)+(''+String.fromCharCode(c))}else{return String.fromCharCode(a&byb)}}
	function KV(a,b,c,d){var e,f,g;e=hX(c);f=PW(e);g=new RX;PX(g,c);switch(d.e){case 1:QX(g,tN(vN(f)));break;case 2:QX(g,vN(f));}sJ(g,(Rib(),tib),Wv(rJ(b,tib),15));sJ(b,uib,g);Umb(a.b,g,b);return g}
	function l6(a,b,c,d){var e;vU(a.c,new t6(a,c,d,Wv(Smb(a.k,c),24).a));if(d6(d)&&(b==a.e?d.d.f!=a.a&&d.c.f!=a.a:d.d.f!=a.e&&d.c.f!=a.e)){e=c==d.c?d.d:d.c;vU(a.c,new t6(a,e,d,Wv(Smb(a.k,e),24).a))}}
	function fe(a,b){var c,d,e;if(b===a){return true}if(!aw(b,57)){return false}e=Wv(b,57);if(a.Y()!=e.Y()){return false}for(d=e.bb().mb();d.G();){c=Wv(d.H(),21);if(!a._(c)){return false}}return true}
	function $Z(a,b){var c,d,e;d=new uX(a);qJ(d,b);sJ(d,(Rib(),gib),b);sJ(d,(eM(),TL),(KM(),FM));sJ(d,lL,(iK(),eK));sX(d,(CX(),xX));c=new RX;PX(c,d);QX(c,(sN(),rN));e=new RX;PX(e,d);QX(e,ZM);return d}
	function O7(a,b){var c,d,e;e=$xb;for(d=new Tob(m7(b));d.a<d.c.c.length;){c=Wv(Rob(d),89);if(c.e&&!a.c[c.b]){a.c[c.b]=true;e=Slb(e,O7(a,c7(c,b)))}}a.i[b.b]=a.j;a.g[b.b]=Slb(e,a.j++);return a.g[b.b]}
	function _eb(a,b,c){var d,e,f,g;g=a.g.tb();if(a.e){for(e=0;e<a.c;e++){g.H()}}else{for(e=0;e<a.c-1;e++){g.H()}}f=a.b.tb();d=Ixb(Yv(g.H()));while(d-b<RAb){d=Ixb(Yv(g.H()));f.H()}g.M();afb(a,c,b,f,g)}
	function Lt(b,c){var d,e,f,g;for(e=0,f=b.length;e<f;e++){g=b[e];try{g[1]?g[0].bd()&&(c=Kt(c,g)):g[0].bd()}catch(a){a=OH(a);if(aw(a,46)){d=a;Ct(aw(d,164)?Wv(d,164).cc():d)}else throw NH(a)}}return c}
	function Qr(a){var b,c,d;d=a.c.a;if(!d){return null}if(a.b.b){b=a.b.e;c=Ds(a.c.a,a.d,b);if(!c){return null}a.b.d==(Gh(),Fh)&&a.d.$b(b,c.b)==0&&(c=c.i)}else{c=a.a.i}return c==a.a||!ok(a.b,c.b)?null:c}
	function t2(a,b){var c,d,e,f,g,h;f=0;for(d=new Tob(b.c);d.a<d.c.c.length;){c=Wv(Rob(d),16);e=0;for(h=new Tob(c.a);h.a<h.c.c.length;){g=Wv(Rob(h),9);e+=g.j.b+g.e.a+g.e.d+a.a}e-=a.a;f=f>e?f:e}return f}
	function M7(a){var b,c,d,e,f;f=$xb;e=$xb;for(d=new Tob(m7(a));d.a<d.c.c.length;){c=Wv(Rob(d),89);b=c.d.e-c.c.e;c.d==a&&b<e?(e=b):b<f&&(f=b)}e==$xb&&(e=-1);f==$xb&&(f=-1);return new RJ(Elb(e),Elb(f))}
	function l8(a,b,c){var d,e,f,g,h;b.k=-1;for(h=oX(b,(djb(),bjb)).mb();h.G();){g=Wv(h.H(),7);for(e=new Tob(g.e);e.a<e.c.c.length;){d=Wv(Rob(e),12);f=d.d.f;b!=f&&(f.k<0?c.ib(d):f.k>0&&l8(a,f,c))}}b.k=0}
	function Bfb(a,b){yfb(this);if(0>b){throw new slb('Top must be smaller or equal to bottom.')}else if(0>a){throw new slb('Left must be smaller or equal to right.')}this.d=0;this.c=a;this.a=b;this.b=0}
	function Ffb(a){var b,c,d;yfb(this);if(a.length==0){throw new slb(TAb)}for(c=0,d=a.length;c<d;++c){b=a[c];this.d=Qlb(this.d,b.b);this.c=Nlb(this.c,b.a);this.a=Nlb(this.a,b.b);this.b=Qlb(this.b,b.a)}}
	function g0(){d0();return Bv(tv(mC,1),uyb,37,0,[L_,o_,c0,m_,p_,__,z_,T_,j_,D_,S_,P_,I_,s_,h_,N_,W_,F_,G_,A_,Z_,V_,R_,r_,U_,$_,Y_,B_,x_,H_,k_,C_,a0,O_,t_,v_,J_,i_,l_,y_,u_,M_,Q_,E_,w_,X_,K_,n_,b0,q_])}
	function a5(a,b){var c,d,e,f,g,h,i,j,k;k=0;for(d=0,e=b.length;d<e;++d){c=b[d];for(g=0,h=c.length;g<h;++g){f=c[g];for(j=new Tob(f.f);j.a<j.c.c.length;){i=Wv(Rob(j),7);i.k=k++}}}a.a=xv(mw,Yyb,26,k,12,1)}
	function Sl(a){Il();var b,c,d;b=a.H();if(!a.G()){return b}d=new zmb;d.a+='expected one element but was: <'+b;for(c=0;c<4&&a.G();c++){ymb(d,', '+a.H())}a.G()&&(d.a+=', ...',d);d.a+='>';throw new slb(d.a)}
	function x6(a){var b,c,d,e,f;b=0;for(d=a.b,e=0,f=d.length;e<f;++e){c=d[e];b+=z6(a,c);if(LM(Wv(rJ(c,(eM(),TL)),28))){nX(c,(sN(),$M)).mb().G()&&(b+=y6(a,c,$M));nX(c,pN).mb().G()&&(b+=y6(a,c,pN))}}return b}
	function i5(a,b,c,d){var e,f,g,h,i;if(d.d.c+d.e.c==0){for(g=a.a[a.c],h=0,i=g.length;h<i;++h){f=g[h];Umb(d,f,new r5(a,f,c))}}e=Wv(re(Ktb(d.d,b)),284);e.b=0;e.c=e.f;e.c==0||u5(Wv(yU(e.a,e.b),128));return e}
	function Dpb(a){var h;ypb();var b,c,d,e,f,g;if(aw(a,63)){for(e=0,d=a.Y()-1;e<d;++e,--d){h=a.sb(e);a.wb(e,a.sb(d));a.wb(d,h)}}else{b=a.tb();f=a.ub(a.Y());while(b.L()<f.N()){c=b.H();g=f.M();b.O(g);f.O(c)}}}
	function Wb(a,b,c){if(a<0||a>c){return Vb(a,c,'start index')}if(b<0||b>c){return Vb(b,c,'end index')}return fc('end index (%s) must not be less than start index (%s)',Bv(tv(UF,1),syb,1,4,[Elb(b),Elb(a)]))}
	function SP(a){if(!('id' in a.a)){throw new FQ("Every graph element must specify an 'id' property.",a)}if(!Pu(a,'id').lc()){throw new FQ("Invalid format for 'id'. Must be a string, was "+Pu(a,'id').$c,a)}}
	function f3(a,b){var c,d,e,f,g,h,i;i=a.b;for(d=Wv(qsb(a3,a),20).mb();d.G();){c=Wv(d.H(),75);for(h=(f=(new Snb(c.c.a)).a.bb().mb(),new Ynb(f));h.a.G();){g=(e=Wv(h.a.H(),21),Wv(e.yb(),7));Anb(b,g);J2(g,i)}}}
	function _db(a,b){var c,d,e;for(e=new Tob(b.e);e.a<e.c.c.length;){c=Wv(Rob(e),12);if(c.d.f!=a.f){return true}}for(d=new Tob(b.b);d.a<d.c.c.length;){c=Wv(Rob(d),12);if(c.c.f!=a.f){return true}}return false}
	function Z2(a){var b,c,d,e;We(a.c);We(a.b);We(a.a);for(e=(c=(new Snb(a.e)).a.bb().mb(),new Ynb(c));e.a.G();){d=(b=Wv(e.a.H(),21),Wv(b.yb(),60));if(d.c!=2){Wsb(a.a,d);d.c==0&&Wsb(a.c,d)}Wsb(a.b,d)}a.d=false}
	function mr(b,c){var d;if(b===c){return true}if(aw(c,18)){d=Wv(c,18);try{return b.Y()==d.Y()&&b.lb(d)}catch(a){a=OH(a);if(aw(a,76)){return false}else if(aw(a,119)){return false}else throw NH(a)}}return false}
	function Ltb(a,b,c){var d,e,f,g;g=b==null?0:a.b.Vc(b);e=(d=Ttb(a.a,g),d==null?[]:d);if(e.length==0){Vtb(a.a,g,e)}else{f=Itb(a,b,e);if(f){return f.Ab(c)}}Av(e,e.length,new qob(b,c));++a.c;msb(a.b);return null}
	function Vb(a,b,c){if(a<0){return fc(ryb,Bv(tv(UF,1),syb,1,4,[c,Elb(a)]))}else if(b<0){throw new slb(tyb+b)}else{return fc('%s (%s) must not be greater than size (%s)',Bv(tv(UF,1),syb,1,4,[c,Elb(a),Elb(b)]))}}
	function Ub(a,b){if(a<0){return fc(ryb,Bv(tv(UF,1),syb,1,4,['index',Elb(a)]))}else if(b<0){throw new slb(tyb+b)}else{return fc('%s (%s) must be less than size (%s)',Bv(tv(UF,1),syb,1,4,['index',Elb(a),Elb(b)]))}}
	function jW(a){var b,c,d,e;e=xv(qB,Txb,51,a.c.c.length,0,2);d=new Fnb(a.c,0);while(d.b<d.d.Y()){b=(Bxb(d.b<d.d.Y()),Wv(d.d.sb(d.c=d.b++),16));c=d.b-1;e[c]=Wv(FU(b.a,xv(qB,Nzb,9,b.a.c.length,0,1)),51)}return e}
	function w3(a,b,c,d,e){this.c=e;this.d=b;this.a=c;switch(e.e){case 4:this.b=Jlb(a.b);break;case 1:this.b=Jlb(a.d);break;case 2:this.b=Jlb(a.c-d.j.a);break;case 3:this.b=Jlb(a.a-d.j.b);break;default:this.b=0;}}
	function adb(a,b,c,d,e){var f,g,h,i,j;if(b){for(h=b.mb();h.G();){g=Wv(h.H(),9);for(j=pX(g,(djb(),bjb),c).mb();j.G();){i=Wv(j.H(),7);f=Wv(re(Ktb(e.d,i)),80);if(!f){f=new odb(a);d.c[d.c.length]=f;mdb(f,i,e)}}}}}
	function Ofb(a,b){var c,d,e;c=a.c;if(c.a.Y()>1){throw new slb('In straight hyperEdges there may be only one edge.')}QI((e=(new Snb(c.a)).a.bb().mb(),d=Wv((new Ynb(e)).a.H(),21),Wv(d.yb(),12)).a,new HI(b,a.b))}
	function no(a,b,c){var d,e;this.f=a;d=Wv(Smb(a.b,b),126);e=!d?0:d.a;bc(c,e);if(c>=(e/2|0)){this.e=!d?null:d.c;this.d=e;while(c++<e){lo(this)}}else{this.c=!d?null:d.b;while(c-->0){ko(this)}}this.b=b;this.a=null}
	function HP(a,b){if(typeof klaycallback===Zxb){klaycallback(b)}else{typeof document!==Czb?Rxb(a(b)):typeof module===Sxb&&module.exports&&Rxb(a(b));typeof document===Czb&&typeof self!==Czb&&self.postMessage(b)}}
	function _P(a,b){var c,d,e,f;if('x' in a.a){e=Wv(Pu(a,'x'),104);b.i.a=e.a}if('y' in a.a){f=Wv(Pu(a,'y'),104);b.i.b=f.a}if(Jzb in a.a){d=Wv(Pu(a,Jzb),104);b.j.a=d.a}if(Kzb in a.a){c=Wv(Pu(a,Kzb),104);b.j.b=c.a}}
	function lgb(a,b,c){var d,e;igb(this);b==(fgb(),dgb)?stb(this.g,a.c):stb(this.o,a.c);c==dgb?stb(this.g,a.d):stb(this.o,a.d);stb(this.c,a);d=MX(a.c).b;e=MX(a.d).b;kgb(this,d,e,e);this.f=Zfb(MX(a.c).b,MX(a.d).b)}
	function p5(a){var b,c,d,e,f,g;g=new U6(a.d,a.e);for(f=T6(g);f.G();){e=Wv(f.H(),7);d=a.e==(sN(),rN)?e.b:e.e;for(c=new Tob(d);c.a<c.c.c.length;){b=Wv(Rob(c),12);if(!bW(b)&&b.c.f.d!=b.d.f.d){l5(a,b);++a.f;++a.c}}}}
	function LQ(a,b,c){var d,e,f,g,h;g=(ypb(),new Frb(Wv(yU(b.a,c),18)));h=new HU(g.b.Y());for(e=new Nqb(g.b.mb());e.b.G();){d=Wv(e.b.H(),37);f=Wv(Smb(a.a,d),31);if(!f){f=e0(d);Umb(a.a,d,f)}h.c[h.c.length]=f}return h}
	function T5(a,b){var c,d,e,f;d=new Fnb(a.f.c,0);while(d.b<d.d.Y()){c=(Bxb(d.b<d.d.Y()),Wv(d.d.sb(d.c=d.b++),16));f=b[d.b-1];e=new Fnb(c.a,0);while(e.b<e.d.Y()){Bxb(e.b<e.d.Y());e.d.sb(e.c=e.b++);Enb(e,f[e.b-1])}}}
	function m2(a){var b,c;if(MM(Wv(rJ(a,(eM(),TL)),28))){for(c=new Tob(a.f);c.a<c.c.c.length;){b=Wv(Rob(c),7);b.g==(sN(),qN)&&p2(b)}}else{for(c=new Tob(a.f);c.a<c.c.c.length;){b=Wv(Rob(c),7);p2(b)}sJ(a,TL,(KM(),HM))}}
	function jpb(a,b,c,d,e,f){var g,h,i,j;g=d-c;if(g<7){gpb(b,c,d,f);return}i=c+e;h=d+e;j=i+(h-i>>1);jpb(b,a,i,j,-e,f);jpb(b,a,j,h,-e,f);if(f.$b(a[j-1],a[j])<=0){while(c<d){Av(b,c++,a[i++])}return}hpb(a,i,j,h,b,c,d,f)}
	function hv(a){if(!a){return Bu(),Au}var b=a.valueOf?a.valueOf():a;if(b!==a){var c=dv[typeof b];return c?c(b):kv(typeof b)}else if(a instanceof Array||a instanceof $wnd.Array){return new ku(a)}else{return new Uu(a)}}
	function I7(a,b,c){var d,e;d=c.c;e=c.d;if(a.g[d.b]<=a.i[b.b]&&a.i[b.b]<=a.i[d.b]&&a.g[e.b]<=a.i[b.b]&&a.i[b.b]<=a.i[e.b]){if(a.i[d.b]<a.i[e.b]){return false}return true}if(a.i[d.b]<a.i[e.b]){return true}return false}
	function j5(a,b,c){var d,e,f,g,h,i,j,k;j=0;for(e=a.a[b],f=0,g=e.length;f<g;++f){d=e[f];k=new U6(d,c);for(i=T6(k);i.G();){h=Wv(i.H(),7);Umb(a.f,h,Elb(j));LM(Wv(rJ(d,(eM(),TL)),28))&&++j}LM(Wv(rJ(d,(eM(),TL)),28))||++j}}
	function Pb(a,b,c){var d,e;_b(b);if(c.G()){e=Wv(c.H(),21);vmb(b,Mb(a.a,e.yb()));vmb(b,a.b);vmb(b,Mb(a.a,e.zb()));while(c.G()){vmb(b,a.a.c);d=Wv(c.H(),21);vmb(b,Mb(a.a,d.yb()));vmb(b,a.b);vmb(b,Mb(a.a,d.zb()))}}return b}
	function Gd(a,b){var c,d;c=Wv(Wmb(a.b,b),19);if(!c){return a.$()}d=a.Z();d.jb(c);a.c-=c.Y();c.Q();return aw(d,137)?(ypb(),new dsb(Wv(d,137))):aw(d,18)?(ypb(),new Frb(Wv(d,18))):aw(d,20)?Hpb(Wv(d,20)):(ypb(),new zqb(d))}
	function Tm(a,b){var c;b.d?(b.d.b=b.b):(a.a=b.b);b.b?(b.b.d=b.d):(a.e=b.d);if(!b.e&&!b.c){c=Wv(Wmb(a.b,b.a),126);c.a=0;++a.c}else{c=Wv(Smb(a.b,b.a),126);--c.a;!b.e?(c.b=b.c):(b.e.c=b.c);!b.c?(c.c=b.e):(b.c.e=b.e)}--a.d}
	function mU(a,b,c){switch(c.e){case 1:return new HI(b.a,Qlb(a.d.b,b.b));case 2:return new HI(Nlb(a.c.a,b.a),b.b);case 3:return new HI(b.a,Nlb(a.c.b,b.b));case 4:return new HI(Qlb(b.a,a.d.a),b.b);}return new HI(b.a,b.b)}
	function Oxb(a){var b,c,d,e;b=0;d=(bmb(),a.length);e=d-4;c=0;while(c<e){b=a.charCodeAt(c+3)+31*(a.charCodeAt(c+2)+31*(a.charCodeAt(c+1)+31*(a.charCodeAt(c)+31*b)));b=b|0;c+=4}while(c<d){b=b*31+jmb(a,c++)}b=b|0;return b}
	function X9(a,b){var c,d,e;this.a=a;this.c=b;this.b=xv(nE,Txb,673,a.length,0,2);for(c=0;c<a.length;++c){e=a[c].length;this.b[c]=xv(nE,{673:1,3:1,5:1,6:1},102,e,0,1);for(d=0;d<e;++d){this.b[c][d]=new $9(this,a[c][d].c)}}}
	function sk(a,b,c,d,e,f,g){var h;this.a=Wv(_b(a),56);this.b=b;this.c=e;this.e=c;this.d=Wv(_b(d),159);this.g=f;this.f=Wv(_b(g),159);b&&a.$b(c,c);e&&a.$b(f,f);if(b&&e){h=a.$b(c,f);Zb(h<=0,c,f);h==0&&Xb(d!=(Gh(),Fh)|g!=Fh)}}
	function eV(a){this.a=a;if(a.c.f.g==(CX(),xX)){this.c=a.c;this.d=Wv(rJ(a.c.f,(Rib(),hib)),32)}else if(a.d.f.g==xX){this.c=a.d;this.d=Wv(rJ(a.d.f,(Rib(),hib)),32)}else{throw new slb('Edge '+a+' is not an external edge.')}}
	function Xcb(){Xcb=iI;Scb=UQ(new WQ,(d0(),x_));Ucb=TQ(new WQ,A_);Vcb=PQ(TQ(new WQ,R_),Q_);Rcb=PQ(UQ(TQ(new WQ,s_),t_),u_);Wcb=TQ(new WQ,Z_);Tcb=PQ(new WQ,y_);Pcb=PQ(UQ(TQ(SQ(new WQ,D_),F_),H_),E_);Qcb=PQ(UQ(new WQ,H_),q_)}
	function Lr(a,b,c){var d,e,f,g;Mh(c,Xyb);if(c==0){return Pr(a,b)}Xb(ok(a.b,b));g=a.c.a;if(!g){a.d.$b(b,b);e=new Os(b,c);es(a.a,e,a.a);Us(a.c,null,e);return 0}f=xv(mw,Yyb,26,1,12,1);d=zs(g,a.d,b,c,f);Us(a.c,g,d);return f[0]}
	function i$(a,b,c){var d,e,f,g,h,i;d=0;i=c;if(!b){d=c*(a.c.length-1);i*=-1}for(f=new Tob(a);f.a<f.c.c.length;){e=Wv(Rob(f),9);sJ(e,(eM(),lL),(iK(),eK));e.j.a=d;for(h=nX(e,(sN(),ZM)).mb();h.G();){g=Wv(h.H(),7);g.i.a=d}d+=i}}
	function Fd(a,b,c){var d;d=Wv(Smb(a.b,b),19);if(!d){d=a.Z();if(d.ib(c)){++a.c;Umb(a.b,b,d);return true}else{throw new ukb('New Collection violated the Collection spec')}}else if(d.ib(c)){++a.c;return true}else{return false}}
	function ES(a,b,c){var d,e,f;CS(a,b,c);f=new GU;for(e=new Tob(a.b.a.b);e.a<e.c.c.length;){d=Wv(Rob(e),25);if(b.D(d)){vU(f,new OS(d,true));vU(f,new OS(d,false))}}JS(a.d);RT(f,a.c,new opb(Bv(tv(JA,1),syb,160,0,[a.d])));DS(a,b,c)}
	function R8(a,b){var c,d,e,f,g;a.c[b.k]=true;vU(a.a,b);for(g=new Tob(b.f);g.a<g.c.c.length;){f=Wv(Rob(g),7);for(d=Uh(Sh((Gi(),new gr(Ti(Bv(tv(UF,1),syb,1,4,[f.b,f.e]))))));Cm(d);){c=Wv(Dm(d),12);e=S8(f,c).f;a.c[e.k]||R8(a,e)}}}
	function dQ(a,b,c,d){var e,f,g;if('labels' in b.a){g=Pu(b,'labels');if(!g.hc()){throw new GQ("The 'labels' property of a node must be an array.",g,b)}f=g.hc();for(e=0;e<f.a.length;++e){aw(gu(f,e),69)&&cQ(a,Wv(gu(f,e),69),c,d)}}}
	function j0(a,b,c){var d,e,f,g,h,i;f=Wv(yU(b.b,0),12).c;d=f.f;e=d.g;i=Wv(yU(c.e,0),12).d;g=i.f;h=g.g;e==(CX(),zX)?sJ(a,(Rib(),qib),Wv(rJ(d,qib),7)):sJ(a,(Rib(),qib),f);h==zX?sJ(a,(Rib(),rib),Wv(rJ(g,rib),7)):sJ(a,(Rib(),rib),i)}
	function oM(){oM=iI;gM=new pM('H_LEFT',0);fM=new pM('H_CENTER',1);iM=new pM('H_RIGHT',2);nM=new pM('V_TOP',3);mM=new pM('V_CENTER',4);lM=new pM('V_BOTTOM',5);jM=new pM('INSIDE',6);kM=new pM('OUTSIDE',7);hM=new pM('H_PRIORITY',8)}
	function rS(a){aS();var b,c,d;this.b=ZR;this.c=_R;this.d=(sK(),qK);this.g=(VR(),UR);this.a=a;oS(this,new sS);fS(this);for(d=new Tob(a.b);d.a<d.c.c.length;){c=Wv(Rob(d),25);if(!c.f){b=new QR(Bv(tv(kA,1),syb,25,0,[c]));vU(a.a,b)}}}
	function R7(a,b){var c,d,e,f;e=1;b.j=true;for(d=new Tob(m7(b));d.a<d.c.c.length;){c=Wv(Rob(d),89);if(!a.c[c.b]){a.c[c.b]=true;f=c7(c,b);if(c.e){e+=R7(a,f)}else if(!f.j&&c.a==c.d.e-c.c.e){c.e=true;stb(a.p,c);e+=R7(a,f)}}}return e}
	function Abb(a){var b,c,d,e,f,g,h,i;e=Uzb;d=Vzb;for(c=new Tob(a.e.c);c.a<c.c.c.length;){b=Wv(Rob(c),16);for(g=new Tob(b.a);g.a<g.c.c.length;){f=Wv(Rob(g),9);i=Ixb(a.n[f.k]);h=i+Ixb(a.b[a.f[f.k].k]);e=e<i?e:i;d=d>h?d:h}}return d-e}
	function DQ(a){var b;b=new Tu;Ru(b,'type',new lv((Gkb($z),$z.n)));Ru(b,Dzb,new lv(a.f));!!a.b&&Ru(b,'value',a.b);!!a.a&&Ru(b,'context',a.a);Ru(b,Ezb,new lv(Hb(new Kb('\n'),new wnb(new opb((a.g==null&&(a.g=Pt(a)),a.g))))));return b}
	function D5(a,b){if(a.c<b.c){return -1}else if(a.c>b.c){return 1}else if(a.b<b.b){return -1}else if(a.b>b.b){return 1}else if(a.a!=b.a){return a.a.b-b.a.b}else if(a.d==0&&b.d==1){return -1}else if(a.d==1&&b.d==0){return 1}return 0}
	function cn(a,b){var c,d,e,f,g;if(b===a){return true}if(!aw(b,20)){return false}g=Wv(b,20);if(a.Y()!=g.Y()){return false}f=g.mb();for(d=a.mb();d.G();){c=d.H();e=f.H();if(!(gw(c)===gw(e)||c!=null&&rb(c,e))){return false}}return true}
	function st(b){var c=(!qt&&(qt=tt()),qt);var d=b.replace(/[\x00-\x1f\xad\u0600-\u0603\u06dd\u070f\u17b4\u17b5\u200b-\u200f\u2028-\u202e\u2060-\u2064\u206a-\u206f\ufeff\ufff9-\ufffb"\\]/g,function(a){return rt(a,c)});return '"'+d+'"'}
	function ER(a,b){var c,d,e,f,g,h,i;e=b==1?wR:vR;for(d=(g=(new Snb(e.a)).a.bb().mb(),new Ynb(g));d.a.G();){c=(f=Wv(d.a.H(),21),Wv(f.yb(),59));for(i=Wv(Dd(a.f.c,c),18).mb();i.G();){h=Wv(i.H(),27);BU(a.b.b,h.b);BU(a.b.a,Wv(h.b,25).f)}}}
	function aR(a,b,c){var d,e,f,g;nI(c,'Recursive layout',2);if(b.b.c.length!=0){g=1/b.b.c.length;for(f=new Tob(b.b);f.a<f.c.c.length;){e=Wv(Rob(f),9);d=Wv(rJ(e,(Rib(),sib)),55);if(d){aR(a,d,rI(c,g));$Q(e,d)}}NQ(a.d,b);_Q(b,c)}bR(b);pI(c)}
	function L3(a,b){oR.call(this);this.d=new vtb;this.b=Wv(rJ(b,(Rib(),Jib)),15).a*Wv(rJ(b,(Mjb(),qjb)),15).a;this.e=this.b*Wv(rJ(b,Ejb),15).a;this.a=new jJ;this.c=new jJ;this.j=new VN(a.j,a.k,0,a.n-a.k);this.o=a.g;this.g.a=a.i;K3(this,a)}
	function Mtb(a,b){var c,d,e,f,g;f=b==null?0:a.b.Vc(b);d=(c=Ttb(a.a,f),c==null?[]:c);for(g=0;g<d.length;g++){e=d[g];if(a.b.Uc(b,e.yb())){if(d.length==1){d.length=0;a.a[$Ab](f)}else{d.splice(g,1)}--a.c;msb(a.b);return e.zb()}}return null}
	function hU(a,b,c){var d;d=null;!!b&&(d=b.e);ZU(a,new VS(b.i.a-d.b+c.a,b.i.b-d.d+c.b));ZU(a,new VS(b.i.a-d.b+c.a,b.i.b+b.j.b+d.a+c.b));ZU(a,new VS(b.i.a+b.j.a+d.c+c.a,b.i.b-d.d+c.b));ZU(a,new VS(b.i.a+b.j.a+d.c+c.a,b.i.b+b.j.b+d.a+c.b))}
	function J2(a,b){switch(b.e){case 2:QX(a,(sN(),ZM));a.a.a=a.j.a;a.a.b=a.j.b/2;break;case 4:QX(a,(sN(),rN));a.a.a=0;a.a.b=a.j.b/2;break;case 1:QX(a,(sN(),$M));a.a.a=a.j.a/2;a.a.b=0;break;case 3:QX(a,(sN(),pN));a.a.a=a.j.a/2;a.a.b=a.j.b;}}
	function Fq(a,b){Dq();var c,d,e;if(b===a){return true}if(aw(b,207)){e=Wv(b,207);if(a.Y()!=e.Y()||Vg(a).Y()!=e.bb().Y()){return false}for(d=e.bb().mb();d.G();){c=Wv(d.H(),83);if(a.Cb(c.Zb())!=c.Yb()){return false}}return true}return false}
	function wvb(a,b){var c,d,e,f,g,h;f=a.a*_Ab+a.b*1502;h=a.b*_Ab+11;c=Math.floor(h*FAb);f+=c;h-=c*aBb;f%=aBb;a.a=f;a.b=h;if(b<=24){return Mlb(a.a*qvb[b])}else{e=a.a*(1<<b-24);g=Mlb(a.b*rvb[b]);d=e+g;d>=2147483648&&(d-=4294967296);return d}}
	function MW(a,b,c){var d,e,f;if(b==c){return}d=b;do{vI(a,d.d);f=Wv(rJ(d,(Rib(),zib)),9);if(f){e=d.a;uI(a,e.b,e.d);vI(a,f.i);d=hX(f)}}while(f);d=c;do{EI(a,d.d);f=Wv(rJ(d,(Rib(),zib)),9);if(f){e=d.a;DI(a,e.b,e.d);EI(a,f.i);d=hX(f)}}while(f)}
	function n3(a,b){var c,d,e,f,g,h;c=new GU;h=new Um;for(e=(g=(new Snb(a.a)).a.bb().mb(),new Ynb(g));e.a.G();){d=(f=Wv(e.a.H(),21),Wv(f.yb(),12));Nm(h,d.c,d,null);Nm(h,d.d,d,null)}while(h.a){vU(c,m3(h,b,LM(Wv(rJ(b,(eM(),TL)),28))))}return c}
	function B7(a,b){var c,d,e,f,g;for(f=new Tob(a.e.a);f.a<f.c.c.length;){e=Wv(Rob(f),61);if(e.c.c.length==e.g.c.length){d=e.e;g=M7(e);for(c=e.e-Wv(g.a,24).a+1;c<e.e+Wv(g.b,24).a;c++){b[c]<b[d]&&(d=c)}if(b[d]<b[e.e]){--b[e.e];++b[d];e.e=d}}}}
	function zR(a,b){var c,d,e,f,g,h,i;e=b==1?wR:vR;for(d=(g=(new Snb(e.a)).a.bb().mb(),new Ynb(g));d.a.G();){c=(f=Wv(d.a.H(),21),Wv(f.yb(),59));for(i=Wv(Dd(a.f.c,c),18).mb();i.G();){h=Wv(i.H(),27);vU(a.b.b,Wv(h.b,25));vU(a.b.a,Wv(h.b,25).f)}}}
	function ecb(a){$bb();var b,c,d,e,f,g,h;c=(mp(),new wub);for(e=new Tob(a.e.c);e.a<e.c.c.length;){d=Wv(Rob(e),16);for(g=new Tob(d.a);g.a<g.c.c.length;){f=Wv(Rob(g),9);h=a.f[f.k];b=Wv(rub(c,h),20);if(!b){b=new GU;tub(c,h,b)}b.ib(f)}}return c}
	function cS(a,b){var c,d,e,f;for(d=new Tob(a.a.a);d.a<d.c.c.length;){c=Wv(Rob(d),78);c.i=true}for(f=new Tob(a.a.b);f.a<f.c.c.length;){e=Wv(Rob(f),25);e.p=Ckb(Ixb(Xv(a.f.B(new RJ(e,b)))));e.f.i=e.f.i&Ckb(Ixb(Xv(a.f.B(new RJ(e,b)))))}return a}
	function RY(a,b){var c,d,e,f;e=Eo(mX(b));for(d=WI(e,0);d.b!=d.d.c;){c=Wv(_ub(d),12);f=c.d.f;if(f.g==(CX(),wX)&&!(Ckb(Ixb(Xv(rJ(f,(Rib(),Vhb)))))&&rJ(f,uib)!=null)){BU(f.d.a,f);PX(c.c,null);PX(c.d,null);return RY(a,f)}else{return b}}return b}
	function D7(a,b){var c,d,e,f,g,h,i;if(!b.e){throw new slb('The input edge is not a tree edge.')}f=null;e=$xb;for(d=new Tob(a.d);d.a<d.c.c.length;){c=Wv(Rob(d),89);h=c.c;i=c.d;if(I7(a,h,b)&&!I7(a,i,b)){g=i.e-h.e-c.a;if(g<e){e=g;f=c}}}return f}
	function Icb(a,b){var c,d,e,f,g;f=b.a;f.c.f==b.b?(g=f.d):(g=f.c);f.c.f==b.b?(d=f.c):(d=f.d);e=vbb(a.a,g,d);if(e>0&&e<rAb){c=wbb(a.a,d.f,e);Bbb(a.a,d.f,-c);return c>0}else if(e<0&&-e<rAb){c=xbb(a.a,d.f,-e);Bbb(a.a,d.f,c);return c>0}return false}
	function Odb(a,b,c,d,e){var f,g;if(!yI(MI(Bv(tv(qz,1),Fzb,10,0,[e.f.i,e.i,e.a])),c)){b.c==e?rn(b.a,0,new II(c)):QI(b.a,new II(c));if(d&&!ttb(a.a,c)){g=Wv(rJ(b,(eM(),CL)),44);if(!g){g=new jJ;sJ(b,CL,g)}f=new II(c);TI(g,f,g.c.b,g.c);stb(a.a,f)}}}
	function Pdb(a){var b,c,d,e,f,g,h;b=0;for(d=new Tob(a.a);d.a<d.c.c.length;){c=Wv(Rob(d),9);for(f=Uh(mX(c));Cm(f);){e=Wv(Dm(f),12);if(a==e.d.f.d&&e.c.g==(sN(),rN)){g=MX(e.c).b;h=MX(e.d).b;b=b>(h-g<=0?0-(h-g):h-g)?b:h-g<=0?0-(h-g):h-g}}}return b}
	function yo(a,b){var c,d,e;if(gw(b)===gw(_b(a))){return true}if(!aw(b,20)){return false}d=Wv(b,20);e=a.Y();if(e!=d.Y()){return false}if(aw(d,63)){for(c=0;c<e;c++){if(!Tb(a.sb(c),d.sb(c))){return false}}return true}else{return Ol(a.mb(),d.mb())}}
	function I8(a,b){var c,d,e,f,g,h,i,j;e=a.b[b.k];if(e>=0){return e}else{f=1;for(h=new Tob(b.f);h.a<h.c.c.length;){g=Wv(Rob(h),7);for(d=new Tob(g.e);d.a<d.c.c.length;){c=Wv(Rob(d),12);j=c.d.f;if(b!=j){i=I8(a,j);f=f>i+1?f:i+1}}}H8(a,b,f);return f}}
	function edb(a,b,c){var d,e,f,g,h,i;d=0;if(a.b!=0&&b.b!=0){f=WI(a,0);g=WI(b,0);h=Ixb(Yv(_ub(f)));i=Ixb(Yv(_ub(g)));e=true;do{h>i-c&&h<i+c&&++d;h<=i&&f.b!=f.d.c?(h=Ixb(Yv(_ub(f)))):i<=h&&g.b!=g.d.c?(i=Ixb(Yv(_ub(g)))):(e=false)}while(e)}return d}
	function sv(a,b){switch(uv(a)){case 5:return ew(b);case 6:return cw(b);case 7:return bw(b);case 0:return Vv(b,a.__elementTypeId$);case 2:return fw(b)&&!(b.ad===kI);case 1:return fw(b)&&!(b.ad===kI)||Vv(b,a.__elementTypeId$);default:return true;}}
	function Lv(a,b){var c,d,e,f,g;b&=63;c=a.h;d=(c&524288)!=0;d&&(c|=-1048576);if(b<22){g=c>>b;f=a.m>>b|c<<22-b;e=a.l>>b|a.m<<22-b}else if(b<44){g=d?bzb:0;f=c>>b-22;e=a.m>>b-22|c<<44-b}else{g=d?bzb:0;f=d?azb:0;e=c>>b-44}return Ev(e&azb,f&azb,g&bzb)}
	function O9(a,b){switch(a.e){case 1:switch(b.e){case 1:return 1;case 4:return 2;case 3:return 3;case 2:return 4;}break;case 2:switch(b.e){case 1:return 1;case 2:return 2;case 3:return 3;case 4:return 4;}break;default:throw new slb(GAb);}return 0}
	function hZ(a,b,c){var d,e,f,g,h,i;d=new GU;d.c[d.c.length]=b;i=b;h=0;do{i=mZ(a,i);!!i&&(d.c[d.c.length]=i,true);++h}while(i);g=(c-(d.c.length-1)*a.d.d)/d.c.length;for(f=new Tob(d);f.a<f.c.c.length;){e=Wv(Rob(f),9);e.j.a=g}return new RJ(Elb(h),g)}
	function kZ(a,b,c){var d,e,f,g,h,i;d=new GU;d.c[d.c.length]=b;i=b;h=0;do{i=lZ(a,i);!!i&&(d.c[d.c.length]=i,true);++h}while(i);g=(c-(d.c.length-1)*a.d.d)/d.c.length;for(f=new Tob(d);f.a<f.c.c.length;){e=Wv(Rob(f),9);e.j.a=g}return new RJ(Elb(h),g)}
	function m$(a){var b,c,d,e,f,g;e=Wv(yU(a.f,0),7);g=0;for(d=Uh(Sh((Gi(),new gr(Ti(Bv(tv(UF,1),syb,1,4,[new fY(e),new lY(e)]))))));Cm(d);){c=Wv(Dm(d),7);g+=c.f.i.a+c.i.a+c.a.a}b=Wv(rJ(a,(eM(),SL)),10);f=!b?0:b.a;a.i.a=g/(e.b.c.length+e.e.c.length)-f}
	function Ueb(a,b){var c,d,e,f;if(b<2*a.c){throw new slb('The knot vector must have at least two time the dimension elements.')}a.j=0;a.i=1;for(d=0;d<a.c;d++){a.g.ib(0)}f=b+1-2*a.c;for(e=1;e<f;e++){a.g.ib(e/f)}if(a.e){for(c=0;c<a.c;c++){a.g.ib(1)}}}
	function Fs(a){var b,c;c=a.c;a.c=0;ds(a.f,a.i);if(!a.e){return a.g}else if(!a.g){return a.e}else if(a.e.d>=a.g.d){b=a.f;b.e=Is(a.e,b);b.g=a.g;b.a=a.a-1;b.j=XH(a.j,c);return Gs(b)}else{b=a.i;b.g=Js(a.g,b);b.e=a.e;b.a=a.a-1;b.j=XH(a.j,c);return Gs(b)}}
	function e2(a){var b,c,d,e,f,g;for(e=new Tob(a.a);e.a<e.c.c.length;){d=Wv(Rob(e),9);if(d.g==(CX(),BX)){f=Wv(rJ(d,(Rib(),nib)),9);c=d.f;b=(Cxb(0,c.c.length),Wv(c.c[0],7));g=Wv(rJ(b,uib),7);g.g==(sN(),$M)&&d.k>f.k?QX(g,pN):g.g==pN&&f.k>d.k&&QX(g,$M)}}}
	function q3(a,b,c){var d,e,f,g,h,i,j;j=a.b;g=0;for(f=new Tob(a.a.b);f.a<f.c.c.length;){e=Wv(Rob(f),33);g=Nlb(g,e.j.a)}i=wfb(a.a.c,a.a.d,b,c,g);Ue(a.a.a,Veb(i));h=s3(a.a.b,i.a,j);d=new Dfb((!i.k&&(i.k=new Efb(Xeb(i))),i.k));zfb(d);return !h?d:Gfb(d,h)}
	function wbb(a,b,c){var d,e,f,g,h,i,j;d=c;e=b;do{e=a.a[e.k];g=(j=a.f[e.k],Ixb(a.n[j.k])+Ixb(a.d[e.k])-e.e.d);h=zbb(e,!e.d?-1:zU(e.d.a,e,0));if(h){f=(i=a.f[h.k],Ixb(a.n[i.k])+Ixb(a.d[h.k])+h.j.b+h.e.a);d=Qlb(d,g-(f+Xjb(a.j,e,h)))}}while(b!=e);return d}
	function xbb(a,b,c){var d,e,f,g,h,i,j;d=c;e=b;do{e=a.a[e.k];f=(j=a.f[e.k],Ixb(a.n[j.k])+Ixb(a.d[e.k])+e.j.b+e.e.a);h=ybb(e,!e.d?-1:zU(e.d.a,e,0));if(h){g=(i=a.f[h.k],Ixb(a.n[i.k])+Ixb(a.d[h.k])-h.e.d);d=Qlb(d,g-(f+Xjb(a.j,e,h)))}}while(b!=e);return d}
	function Sr(b,c,d){var e,f,g;Mh(d,Xyb);if(d==0){return Pr(b,c)}g=b.c.a;f=xv(mw,Yyb,26,1,12,1);try{if(!ok(b.b,c)||!g){return 0}e=Hs(g,b.d,c,d,f)}catch(a){a=OH(a);if(aw(a,119)){return 0}else if(aw(a,76)){return 0}else throw NH(a)}Us(b.c,g,e);return f[0]}
	function MO(a,b){var c,d,e,f,g;if(a.b){d=Wv(oW(a.e,(eM(),jL)),65);e=d.b+d.c;c=d.d+d.a}else{e=b*2;c=b*2}g=Nlb(a.o[1]>0?e+a.i[1]*b+a.n[1]:0,a.o[3]>0?e+a.i[3]*b+a.n[3]:0);f=Nlb(a.o[4]>0?c+a.i[4]*b+a.n[4]:0,a.o[2]>0?c+a.i[2]*b+a.n[2]:0);return new HI(g,f)}
	function b$(a){var b,c,d,e,f,g;g=Wv(FU(a.a,xv(qB,Nzb,9,a.a.c.length,0,1)),51);lpb(g,new g$);c=null;for(e=0,f=g.length;e<f;++e){d=g[e];if(d.g!=(CX(),xX)){break}b=Wv(rJ(d,(Rib(),hib)),32);if(b!=(sN(),rN)&&b!=ZM){continue}!!c&&Wv(rJ(c,oib),20).ib(d);c=d}}
	function j6(a,b,c,d,e){var f,g,h,i;i=new U6(b,d);for(h=T6(i);h.G();){f=Wv(h.H(),7);Umb(a.k,f,Elb(Wv(Smb(a.k,f),24).a+Wv(re(Ktb(e.d,c)),24).a))}i=new U6(c,d);for(g=T6(i);g.G();){f=Wv(g.H(),7);Umb(a.k,f,Elb(Wv(Smb(a.k,f),24).a-Wv(re(Ktb(e.d,b)),24).a))}}
	function hI(a,b,c){var d=fI,h;var e=d[a];var f=e instanceof Array?e[0]:null;if(e&&!f){_=e}else{_=(h=b&&b.prototype,!h&&(h=fI[b]),jI(h));_._c=c;_.constructor=_;!b&&(_.ad=kI);d[a]=_}for(var g=3;g<arguments.length;++g){arguments[g].prototype=_}f&&(_.$c=f)}
	function Wkb(a){if(a.Sc()){var b=a.c;b.Tc()?(a.n='['+b.k):!b.Sc()?(a.n='[L'+b.Qc()+';'):(a.n='['+b.Qc());a.b=b.Pc()+'[]';a.j=b.Rc()+'[]';return}var c=a.i;var d=a.d;d=d.split('/');a.n=Zkb('.',[c,Zkb('$',d)]);a.b=Zkb('.',[c,Zkb('.',d)]);a.j=d[d.length-1]}
	function Mr(a,b,c){var d;if(!c){return 0}d=a.d.$b(a.b.g,c.b);if(d>0){return Mr(a,b,c.g)}else if(d==0){switch(a.b.f.e){case 0:return PH(b._b(c),b.ac(c.g));case 1:return b.ac(c.g);default:throw new tkb;}}else{return PH(PH(b.ac(c.g),b._b(c)),Mr(a,b,c.e))}}
	function Nr(a,b,c){var d;if(!c){return 0}d=a.d.$b(a.b.e,c.b);if(d<0){return Nr(a,b,c.e)}else if(d==0){switch(a.b.d.e){case 0:return PH(b._b(c),b.ac(c.e));case 1:return b.ac(c.e);default:throw new tkb;}}else{return PH(PH(b.ac(c.e),b._b(c)),Nr(a,b,c.g))}}
	function z2(a,b,c,d){var e,f,g,h;g=new uX(a);sX(g,(CX(),zX));sJ(g,(Rib(),uib),b);sJ(g,(eM(),TL),(KM(),FM));sJ(g,qib,c);sJ(g,rib,d);f=new RX;QX(f,(sN(),rN));PX(f,g);h=new RX;QX(h,ZM);PX(h,g);eW(b,f);e=new hW;qJ(e,b);sJ(e,CL,null);dW(e,h);eW(e,d);return g}
	function e6(a,b){var c,d,e,f,g,h,i,j,k,l;c=0;for(g=a.j,h=0,i=g.length;h<i;++h){f=g[h];l=new U6(f,b);for(k=T6(l);k.G();){j=Wv(k.H(),7);for(e=Uh(Sh((Gi(),new gr(Ti(Bv(tv(UF,1),syb,1,4,[j.b,j.e]))))));Cm(e);){d=Wv(Dm(e),12);bW(d)||(c+=b6(a,d,j))}}}return c}
	function qab(a,b){if(a.c<b.c){return -1}else if(a.c>b.c){return 1}else if(a.b<b.b){return -1}else if(a.b>b.b){return 1}else if(a.a!=b.a){return txb(a.a)-txb(b.a)}else if(a.d==(vab(),uab)&&b.d==tab){return -1}else if(a.d==tab&&b.d==uab){return 1}return 0}
	function R4(a){var b,c,d,e,f,g;e=new aJ;for(d=new Tob(a.d.a);d.a<d.c.c.length;){c=Wv(Rob(d),61);c.c.c.length==0&&(TI(e,c,e.c.b,e.c),true)}if(e.b>1){b=x7(y7(new A7,a.b++),a.d);for(g=WI(e,0);g.b!=g.d.c;){f=Wv(_ub(g),61);f7(i7(h7(j7(g7(new k7,1),0),b),f))}}}
	function p3(a,b,c,d){var e,f,g,h,i,j;j=0;for(g=new Tob(a.a.b);g.a<g.c.c.length;){f=Wv(Rob(g),33);j=Nlb(j,f.j.a)}i=vfb(a.a.c,b,a.a.d,d,Jeb(a.b),c);Ue(a.a.a,Veb(i));h=s3(a.a.b,i.a,a.b);e=new Dfb((!i.k&&(i.k=new Efb(Xeb(i))),i.k));zfb(e);return !h?e:Gfb(e,h)}
	function M0(a,b){var c,d,e,f,g;for(d=new Tob(a.b);d.a<d.c.c.length;){c=Wv(Rob(d),33);sJ(c,(Rib(),pib),b)}for(g=new Tob(a.c.c);g.a<g.c.c.length;){e=Wv(Rob(g),33);sJ(e,(Rib(),pib),b)}for(f=new Tob(a.d.c);f.a<f.c.c.length;){e=Wv(Rob(f),33);sJ(e,(Rib(),pib),b)}}
	function I1(){I1=iI;G1=new J1(tzb,0);B1=new J1('NIKOLOV',1);E1=new J1('NIKOLOV_PIXEL',2);C1=new J1('NIKOLOV_IMPROVED',3);D1=new J1('NIKOLOV_IMPROVED_PIXEL',4);A1=new J1('DUMMYNODE_PERCENTAGE',5);F1=new J1('NODECOUNT_PERCENTAGE',6);H1=new J1('NO_BOUNDARY',7)}
	function cab(a,b){var c,d,e,f,g;f=0;g=Wv(re(Ktb(b.d,a)),24);if(!g){return 0}for(e=Uh(Sh((Gi(),new gr(Ti(Bv(tv(UF,1),syb,1,4,[a.b,a.e]))))));Cm(e);){d=Wv(Dm(e),12);d.c==a?(c=Wv(Smb(b,d.d),24)):(c=Wv(Smb(b,d.c),24));!!c&&g.a>c.a&&(f=Plb(f,g.a-c.a-1))}return f}
	function RZ(a){var b,c;b=Wv(rJ(a,(eM(),HL)),15).a;c=Wv(rJ(a,IL),15).a;sJ(a,IL,new llb(b));sJ(a,HL,new llb(c));switch(Wv(rJ(a,lL),103).e){case 1:sJ(a,lL,(iK(),hK));break;case 2:sJ(a,lL,(iK(),dK));break;case 3:sJ(a,lL,(iK(),fK));break;case 4:sJ(a,lL,(iK(),gK));}}
	function N0(a){var b,c,d,e,f;for(e=(Il(),new Im(Dl(ul(a.a,new yl))));Cm(e);){d=Wv(Dm(e),9);if(d.g==(CX(),yX)){f=P0(d)?(kP(),hP):(kP(),gP);sJ(d,(Rib(),pib),f)}for(c=Uh(mX(d));Cm(c);){b=Wv(Dm(c),12);f=Ckb(Ixb(Xv(rJ(b,(Rib(),Iib)))))?(kP(),gP):(kP(),hP);M0(b,f)}}}
	function O0(a){var b,c,d,e,f;for(e=(Il(),new Im(Dl(ul(a.a,new yl))));Cm(e);){d=Wv(Dm(e),9);if(d.g==(CX(),yX)){f=P0(d)?(kP(),gP):(kP(),hP);sJ(d,(Rib(),pib),f)}for(c=Uh(mX(d));Cm(c);){b=Wv(Dm(c),12);f=Ckb(Ixb(Xv(rJ(b,(Rib(),Iib)))))?(kP(),hP):(kP(),gP);M0(b,f)}}}
	function jdb(a,b,c){var d,e,f;for(f=new Tob(a.e);f.a<f.c.c.length;){d=Wv(Rob(f),118);if(d.b.d<0&&d.c>0){d.b.c-=d.c;d.b.c<=0&&d.b.f>0&&QI(b,d.b)}}for(e=new Tob(a.b);e.a<e.c.c.length;){d=Wv(Rob(e),118);if(d.a.d<0&&d.c>0){d.a.f-=d.c;d.a.f<=0&&d.a.c>0&&QI(c,d.a)}}}
	function agb(a,b,c){var d,e,f;for(f=new Tob(a.j);f.a<f.c.c.length;){d=Wv(Rob(f),117);if(d.b.i<0&&d.c>0){d.b.e-=d.c;d.b.e<=0&&d.b.k>0&&QI(b,d.b)}}for(e=new Tob(a.d);e.a<e.c.c.length;){d=Wv(Rob(e),117);if(d.a.i<0&&d.c>0){d.a.k-=d.c;d.a.k<=0&&d.a.e>0&&QI(c,d.a)}}}
	function tj(a){var b,c,d,e,f;f=a.d.c+a.e.c;switch(f){case 0:return dr(),cr;case 1:d=Wv(Sl(new rnb((new inb(a)).a)),21);return Bj(d.yb(),d.zb());default:e=(mp(),new wub);for(c=new rnb((new inb(a)).a);c.b;){b=pnb(c);tub(e,_b(b.yb()),_b(b.zb()))}return new ir(e);}}
	function DS(a,b,c){var d,e,f;for(e=new Tob(a.b.a.b);e.a<e.c.c.length;){d=Wv(Rob(e),25);if(!b.D(d)){continue}f=Ixb(Yv(c.B(d)));if(f>0){!(tK(a.b.d)&&d.q.d)&&!(uK(a.b.d)&&d.q.b)&&(d.j.e+=0>f/2-0.5?0:f/2-0.5);!(tK(a.b.d)&&d.q.a)&&!(uK(a.b.d)&&d.q.c)&&(d.j.b-=f-1)}}}
	function R9(a,b){switch(a.e){case 1:switch(b.e){case 1:return HAb;case 4:return 0.5;case 3:return IAb;case 2:return JAb;}break;case 2:switch(b.e){case 1:return HAb;case 2:return 0.5;case 3:return IAb;case 4:return JAb;}break;default:throw new slb(GAb);}return 0}
	function rT(a,b){var c,d,e,f;f=new Fnb(a,0);c=(Bxb(f.b<f.d.Y()),Wv(f.d.sb(f.c=f.b++),48));while(f.b<f.d.Y()){d=(Bxb(f.b<f.d.Y()),Wv(f.d.sb(f.c=f.b++),48));e=new WS(d.c,c.d,b);Bxb(f.b>0);f.a.sb(f.c=--f.b);Anb(f,e);Bxb(f.b<f.d.Y());f.d.sb(f.c=f.b++);e.a=false;c=d}}
	function oZ(a){var b,c,d,e,f,g;e=Wv(rJ(a,(Rib(),Zhb)),7);for(g=new Tob(a.f);g.a<g.c.c.length;){f=Wv(Rob(g),7);for(d=new Tob(f.e);d.a<d.c.c.length;){b=Wv(Rob(d),12);eW(b,e);return f}for(c=new Tob(f.b);c.a<c.c.c.length;){b=Wv(Rob(c),12);dW(b,e);return f}}return null}
	function i6(a,b,c,d,e){var f,g,h,i,j,k;g=b;f=0;h=false;k=new U6(c,d);for(j=T6(k);j.G();){i=Wv(j.H(),7);h=true;Umb(a.k,i,Elb(g));if(LM(Wv(rJ(c,(eM(),TL)),28))||i.b.c.length+i.e.c.length>1){++f;++g}}if(!LM(Wv(rJ(c,(eM(),TL)),28))&&h){++f;++g}Umb(e,c,Elb(f));return g}
	function nfb(a){var b,c,d,e,f,g,h,i,j,k,l,m;g=a.b.mb();h=Wv(g.H(),92);k=h.a.a;j=k>RAb;i=k<SAb;while(g.G()){c=h;f=k;e=j;d=i;h=Wv(g.H(),92);k=h.a.a;j=k>RAb;i=k<SAb;if(!(j||i)){return mfb(h.b)}if(e&&i||d&&j){b=f/(f-k);l=mfb(c.b);m=mfb(h.b);return b*l+(1-b)*m}}return 0}
	function ofb(a){var b,c,d,e,f,g,h,i,j,k,l,m;g=a.b.mb();h=Wv(g.H(),92);k=h.a.b;j=k>RAb;i=k<SAb;while(g.G()){c=h;f=k;e=j;d=i;h=Wv(g.H(),92);k=h.a.b;j=k>RAb;i=k<SAb;if(!(j||i)){return mfb(h.b)}if(e&&i||d&&j){b=f/(f-k);l=mfb(c.b);m=mfb(h.b);return b*l+(1-b)*m}}return 0}
	function b6(a,b,c){var d,e;d=0;if(d6(b)){if(ttb(a.g,b)){Sr(a.i,Elb(h6(a,b.c)),1)>0;Sr(a.i,Elb(h6(a,b.d)),1)>0;utb(a.g,b);d+=g6(a,b,a.i)}else{stb(a.g,b);Lr(a.i,Elb(h6(a,b.c)),1);Lr(a.i,Elb(h6(a,b.d)),1)}}else{e=Pr(a.i,Elb(Wv(Smb(a.k,c),24).a));d+=a.g.a.Y()-e}return d}
	function Keb(a){switch(a.e){case 0:return veb;case 1:return seb;case 2:return reb;case 3:return yeb;case 4:return xeb;case 5:return Deb;case 6:return Ceb;case 7:return web;case 8:return teb;case 9:return ueb;case 11:return Aeb;case 10:return zeb;default:return Beb;}}
	function Leb(a){switch(a.e){case 0:return neb;case 1:return meb;case 2:return jeb;case 3:return ieb;case 4:return peb;case 5:return oeb;case 6:return Heb;case 7:return Geb;case 8:return leb;case 9:return keb;case 10:return Eeb;case 11:return qeb;default:return Feb;}}
	function Meb(a){switch(a.e){case 0:return oeb;case 1:return Heb;case 2:return Geb;case 3:return neb;case 4:return meb;case 5:return jeb;case 6:return ieb;case 7:return peb;case 8:return leb;case 9:return keb;case 10:return Eeb;case 11:return qeb;default:return Feb;}}
	function Neb(a){switch(a.e){case 0:return jeb;case 1:return ieb;case 2:return peb;case 3:return oeb;case 4:return Heb;case 5:return Geb;case 6:return neb;case 7:return meb;case 8:return leb;case 9:return keb;case 10:return Eeb;case 11:return qeb;default:return Feb;}}
	function fcb(a){var b,c,d,e,f,g,h,i;c=(mp(),new wub);h=new Yub((Oh(),new opb(a.f)));for(g=(e=(new Snb(h.a)).a.bb().mb(),new Ynb(e));g.a.G();){f=(d=Wv(g.a.H(),21),Wv(d.yb(),9));if(!f){Fmb();break}i=a.i[f.k];b=Wv(rub(c,i),20);if(!b){b=new GU;tub(c,i,b)}b.ib(f)}return c}
	function CS(a,b,c){var d,e,f;for(e=new Tob(a.b.a.b);e.a<e.c.c.length;){d=Wv(Rob(e),25);if(!b.D(d)){continue}f=Ixb(Yv(c.B(d)));if(f>0){!(tK(a.b.d)&&d.q.d)&&!(uK(a.b.d)&&d.q.b)&&(d.j.e-=0>f/2-0.5?0:f/2-0.5);!(tK(a.b.d)&&d.q.a)&&!(uK(a.b.d)&&d.q.c)&&(d.j.b+=0>f-1?0:f-1)}}}
	function T6(a){var b,c,d;d=a.a.f;switch(a.b){case 0:return new Tob(a.a.f);case 1:return Pl((c=new W6(d),c),S6(a));case 2:switch(a.c.e){case 2:case 1:return Pl(new Tob(d),S6(a));case 3:case 4:return Pl((b=new W6(d),b),S6(a));}}throw new Imb('PortOrder not implemented.')}
	function CT(a,b){var c;if(!!a.d&&(b.c!=a.e.c||hT(a.e.b,b.b))){vU(a.f,a.d);a.a=a.d.d+a.d.c;a.d=null;a.e=null}eT(b.b)?(a.c=b):(a.b=b);if(b.b==(cT(),$S)&&!b.a||b.b==_S&&b.a||b.b==aT&&b.a||b.b==bT&&!b.a){if(!!a.c&&!!a.b){c=new VN(a.a,a.c.d,b.c-a.a,a.b.d-a.c.d);a.d=c;a.e=b}}}
	function Cbb(a,b,c,d){this.e=a;this.j=Wv(rJ(a,(Rib(),Kib)),134);this.f=xv(qB,Nzb,9,b,0,1);this.b=xv(HF,Txb,184,b,6,1);this.a=xv(qB,Nzb,9,b,0,1);this.d=xv(HF,Txb,184,b,6,1);this.i=xv(qB,Nzb,9,b,0,1);this.g=xv(HF,Txb,184,b,6,1);this.n=xv(HF,Txb,184,b,6,1);this.k=c;this.c=d}
	function P6(a,b,c){var d,e;if(b.g==(CX(),BX)&&c.g==BX){if(!LM(Wv(rJ(Wv(rJ(b,(Rib(),uib)),9),(eM(),TL)),28))||Wv(rJ(b,uib),9)!=Wv(rJ(c,uib),9)){return}if(I6(b)||I6(c)){a.d=1;a.b=1;return}e=Wv(yU(b.f,0),7).g;d=Wv(yU(c.f,0),7).g;M6(b).g==(sN(),$M)?H6(a,b,c,e,d):H6(a,c,b,d,e)}}
	function f7(a){if(!a.a.c||!a.a.d){throw new ulb((Gkb(QD),QD.j+' must have a source and target '+(Gkb(UD),UD.j)+' specified.'))}if(a.a.c==a.a.d){throw new ulb('Network simplex does not support self-loops: '+a.a+' '+a.a.c+' '+a.a.d)}o7(a.a.c.g,a.a);o7(a.a.d.c,a.a);return a.a}
	function H6(a,b,c,d,e){if(d==(sN(),ZM)&&e==ZM){N6(a,b)>N6(a,c)?(a.d=K6(a,c)):(a.b=K6(a,b))}else if(d==rN&&e==rN){N6(a,b)<N6(a,c)?(a.d=K6(a,c)):(a.b=K6(a,b))}else if(d==rN&&e==ZM){if(N6(a,b)>N6(a,c)){a.d=K6(a,c);a.b=K6(a,b)}}else{if(N6(a,b)<N6(a,c)){a.d=K6(a,c);a.b=K6(a,b)}}}
	function W1(a){var b,c,d,e,f,g,h,i;i=a.f.c.length;c=0;b=i;e=2*i;for(h=new Tob(a.f);h.a<h.c.c.length;){g=Wv(Rob(h),7);switch(g.g.e){case 2:case 4:g.k=-1;break;case 1:case 3:d=g.b.c.length;f=g.e.c.length;d>0&&f>0?(g.k=b++):d>0?(g.k=c++):f>0?(g.k=e++):(g.k=c++);}}Gpb(a.f,new Z1)}
	function i0(a,b,c,d){var e,f,g,h,i;if(c.d.f==b.f){return}e=new uX(a);sX(e,(CX(),zX));sJ(e,(Rib(),uib),c);sJ(e,(eM(),TL),(KM(),FM));d.c[d.c.length]=e;g=new RX;PX(g,e);QX(g,(sN(),rN));h=new RX;PX(h,e);QX(h,ZM);i=c.d;eW(c,g);f=new hW;qJ(f,c);sJ(f,CL,null);dW(f,h);eW(f,i);j0(e,g,h)}
	function W2(a){var b,c,d,e,f,g,h,i,j;g=rAb;i=rAb;h=null;for(c=new Sub(new Lub(a.e));c.b!=c.c.a.b;){b=Rub(c);if(Wv(b.d,60).c==1){d=Wv(b.e,116).a;j=Wv(b.e,116).b;e=g-d>uAb;f=d-g<uAb&&i-j>uAb;if(e||f){i=Wv(b.e,116).b;g=Wv(b.e,116).a;h=Wv(b.d,60);if(i==0&&g==0){return h}}}}return h}
	function i1(a,b){var c,d,e,f,g,h;f=a.d;h=Wv(rJ(a,(eM(),dM)),15).a;if(h<0){h=0;sJ(a,dM,new llb(h))}b.j.b=h;g=Math.floor(h/2);d=new RX;QX(d,(sN(),rN));PX(d,b);d.i.b=g;e=new RX;QX(e,ZM);PX(e,b);e.i.b=g;eW(a,d);c=new hW;qJ(c,a);sJ(c,CL,null);dW(c,e);eW(c,f);h1(b,a,c);f1(a,c);return c}
	function OZ(a){var b,c;c=Wv(rJ(a,(Mjb(),vjb)),85);b=Wv(rJ(a,(Rib(),mib)),140);if(c==(Xib(),Tib)){sJ(a,vjb,Wib);sJ(a,mib,(Hhb(),Ghb))}else if(c==Vib){sJ(a,vjb,Wib);sJ(a,mib,(Hhb(),Ehb))}else if(b==(Hhb(),Ghb)){sJ(a,vjb,Tib);sJ(a,mib,Fhb)}else if(b==Ehb){sJ(a,vjb,Vib);sJ(a,mib,Fhb)}}
	function QO(a){var b,c,d,e,f;for(d=new Tob(zW(a.e));d.a<d.c.c.length;){c=Wv(Rob(d),129);f=new II(c.e.i);e=xO()[c.e.k];b=Wv(qsb(a.c,e),283);f.b=b.e+b.a;e.b==(DO(),BO)?(f.a=b.d):e.b==AO?(f.a=b.d+(b.c-c.e.j.a)/2):e.b==CO&&(f.a=b.d+b.c-c.e.j.a);c.e.i.a=f.a;c.e.i.b=f.b;b.a+=c.e.j.b+a.d}}
	function UO(a){var b,c,d;for(c=new Tob(AW(a));c.a<c.c.c.length;){b=Wv(Rob(c),161);d=new II(b.e.i);switch(Wv(b.e,7).g.e){case 4:d.a=0;d.b=a.e.j.b/2;break;case 2:d.a=a.e.j.a;d.b=a.e.j.b/2;break;case 1:d.a=a.e.j.a/2;d.b=0;break;case 3:d.a=a.e.j.a/2;d.b=a.e.j.b;}b.e.i.a=d.a;b.e.i.b=d.b}}
	function oV(){this.c=xv(kw,hyb,26,(sN(),Bv(tv(Kz,1),uyb,32,0,[qN,$M,ZM,pN,rN])).length,12,1);this.b=xv(kw,hyb,26,Bv(tv(Kz,1),uyb,32,0,[qN,$M,ZM,pN,rN]).length,12,1);this.a=xv(kw,hyb,26,Bv(tv(Kz,1),uyb,32,0,[qN,$M,ZM,pN,rN]).length,12,1);Yob(this.c,Uzb);Yob(this.b,Vzb);Yob(this.a,Vzb)}
	function tfb(a,b,c){var d,e,f,g,h,i,j,k;f=Ixb(Yv(a.b.mb().H()));j=Ixb(Yv(rl(b.b)));d=CI(xI(a.a),j-c);e=CI(xI(b.a),c-f);k=vI(d,e);CI(k,1/(j-f));this.a=k;this.b=new GU;h=true;g=a.b.mb();g.H();while(g.G()){i=Ixb(Yv(g.H()));if(h&&i-c>RAb){this.b.ib(c);h=false}this.b.ib(i)}h&&this.b.ib(c)}
	function G7(a){var b,c,d,e;J7(a,a.n);if(a.d.c.length>0){dpb(a.c);while(R7(a,Wv(Rob(new Tob(a.e.a)),61))<a.e.a.c.length){b=L7(a);e=b.d.e-b.c.e-b.a;b.d.j&&(e=-e);for(d=new Tob(a.e.a);d.a<d.c.c.length;){c=Wv(Rob(d),61);c.j&&(c.e+=e)}dpb(a.c)}dpb(a.c);O7(a,Wv(Rob(new Tob(a.e.a)),61));C7(a)}}
	function Aab(a,b){var c,d,e,f,g,h,i;c=Vzb;h=(CX(),AX);for(e=new Tob(b.a);e.a<e.c.c.length;){d=Wv(Rob(e),9);f=d.g;if(f!=AX){g=Yv(rJ(d,(Rib(),wib)));if(g==null){c=c>0?c:0;d.i.b=c+Wjb(a.a,f,h)}else{d.i.b=(Dxb(g),g)}}i=Wjb(a.a,f,h);d.i.b<c+i+d.e.d&&(d.i.b=c+i+d.e.d);c=d.i.b+d.j.b+d.e.a;h=f}}
	function mdb(a,b,c){var d,e,f;c.db(b,a);vU(a.g,b);f=a.o.d.Lc(b);hlb(a.k)?(a.k=f):(a.k=Qlb(a.k,f));hlb(a.a)?(a.a=f):(a.a=Nlb(a.a,f));b.g==a.o.d.Mc()?hdb(a.j,f):hdb(a.n,f);for(e=Uh(Sh((Gi(),new gr(Ti(Bv(tv(UF,1),syb,1,4,[new fY(b),new lY(b)]))))));Cm(e);){d=Wv(Dm(e),7);c.R(d)||mdb(a,d,c)}}
	function dlb(a){var b,c,d,e,f;d=(bmb(),a.length);e=d>0&&(a.charCodeAt(0)==45||a.charCodeAt(0)==43)?1:0;for(b=e;b<d;b++){if(Dkb(a.charCodeAt(b))==-1){throw new Ylb(dyb+a+'"')}}f=parseInt(a,10);c=f<eyb;if(isNaN(f)){throw new Ylb(dyb+a+'"')}else if(c||f>$xb){throw new Ylb(dyb+a+'"')}return f}
	function H$(a,b,c,d){var e,f,g,h;e=Wv(nX(b,(sN(),rN)).mb().H(),7);f=Wv(nX(b,ZM).mb().H(),7);for(h=new Tob(a.f);h.a<h.c.c.length;){g=Wv(Rob(h),7);while(g.b.c.length!=0){eW(Wv(yU(g.b,0),12),e)}while(g.e.c.length!=0){dW(Wv(yU(g.e,0),12),f)}}c||sJ(b,(Rib(),qib),null);d||sJ(b,(Rib(),rib),null)}
	function jU(a){var b,c,d,e,f,g,h;h=new $U;for(g=new Tob(a.b);g.a<g.c.c.length;){f=Wv(Rob(g),9);if(f.g==(CX(),xX)){continue}hU(h,f,new FI);for(e=Uh(mX(f));Cm(e);){d=Wv(Dm(e),12);if(d.c.f.g==xX||d.d.f.g==xX){continue}for(c=WI(d.a,0);c.b!=c.d.c;){b=Wv(_ub(c),10);ZU(h,new VS(b.a,b.b))}}}return h}
	function X4(a,b,c,d){var e,f,g;this.e=new jJ;this.a=a;this.b=b;if(a.b<b.b){this.j=a.a;this.k=a.b;this.n=b.b}else{this.j=b.a;this.k=b.b;this.n=a.b}e=Wv(rJ(d,(eM(),CL)),44);if(e){for(g=WI(e,0);g.b!=g.d.c;){f=Wv(_ub(g),10);RR(f.a,a.a)&&QI(this.e,f)}}this.g=c;!!this.g&&(this.i=this.j-c.j.d);this.f=d}
	function Zj(a){hi();var b,c,d,e,f,g;g=new Wub;zpb(g,a);for(c=(f=(new Snb(g.a)).a.bb().mb(),new Ynb(f));c.a.G();){b=(d=Wv(c.a.H(),21),d.yb());_b(b)}switch(g.a.Y()){case 0:return kr(),jr;case 1:return new Gr((e=(new Snb(g.a)).a.bb().mb(),d=Wv((new Ynb(e)).a.H(),21),d.yb()));default:return new lr(g);}}
	function $P(a,b,c,d){var e,f,g;VP(a,c,'x',b.i.a+d.a);VP(a,c,'y',b.i.b+d.b);VP(a,c,Jzb,b.j.a);VP(a,c,Kzb,b.j.b);if(aw(b,9)){if(Wv(rJ(b,(eM(),bM)),86).kb((MN(),JN))){e=Wv(b,9).b;g=Pu(c,Lzb);if(!g){g=new Tu;Ru(c,Lzb,g)}f=g.kc();VP(a,f,'left',e.b);VP(a,f,'top',e.d);VP(a,f,'right',e.c);VP(a,f,Azb,e.a)}}}
	function GR(a,b){var c,d,e,f,g,h,i,j,k,l;g=b==1?wR:vR;for(f=(i=(new Snb(g.a)).a.bb().mb(),new Ynb(i));f.a.G();){e=(h=Wv(f.a.H(),21),Wv(h.yb(),59));for(k=Wv(Dd(a.f.c,e),18).mb();k.G();){j=Wv(k.H(),27);d=Wv(j.b,25);l=Wv(j.a,78);c=l.c;switch(e.e){case 2:case 1:d.j.e+=c;break;case 4:case 3:d.j.d+=c;}}}}
	function IS(a,b){var c,d,e;b.a?(Rwb(a.b,b.b),a.a[b.b.k]=Wv(Twb(a.b,b.b),25),c=Wv(Swb(a.b,b.b),25),!!c&&(a.a[c.k]=b.b),undefined):(d=Wv(Twb(a.b,b.b),25),!!d&&d==a.a[b.b.k]&&!!d.f&&d.f!=b.b.f&&d.i.ib(b.b),e=Wv(Swb(a.b,b.b),25),!!e&&a.a[e.k]==b.b&&!!e.f&&e.f!=b.b.f&&b.b.i.ib(e),Uwb(a.b,b.b),undefined)}
	function p1(a,b){var c,d,e,f,g,h,i;e=new GU;for(c=0;c<=a.i;c++){d=new sY(b);d.k=a.i-c;e.c[e.c.length]=d}for(h=new Tob(a.o);h.a<h.c.c.length;){g=Wv(Rob(h),9);rX(g,Wv(yU(e,a.i-a.f[g.k]),16))}f=new Tob(e);while(f.a<f.c.c.length){i=Wv(Rob(f),16);i.a.c.length==0&&Sob(f)}b.c.c=xv(UF,syb,1,0,4,1);xU(b.c,e)}
	function N4(a){var b,c,d,e;a.a.a.c=xv(UF,syb,1,0,4,1);for(d=new Tob(a.a.b);d.a<d.c.c.length;){b=Wv(Rob(d),25);b.f=null}for(e=new Tob(a.a.b);e.a<e.c.c.length;){b=Wv(Rob(e),25);!b.o&&vU(a.a.a,new QR(Bv(tv(kA,1),syb,25,0,[b])))}for(c=new Tob(a.a.b);c.a<c.c.c.length;){b=Wv(Rob(c),25);!!b.o&&OR(b.o.f,b)}}
	function fc(a,b){var c,d,e,f;a=(bmb(),a==null?Wxb:a);c=(a.length+16*b.length,new Amb);f=0;d=0;while(d<b.length){e=a.indexOf('%s',f);if(e==-1){break}jkb(c,a,f,e);xmb(c,b[d++]);f=e+2}wmb(c,a,f,a.length);if(d<b.length){c.a+=' [';xmb(c,b[d++]);while(d<b.length){c.a+=', ';xmb(c,b[d++])}c.a+=']'}return c.a}
	function _vb(a,b,c,d){var e,f;if(!b){return c}else{e=a.a.$b(c.d,b.d);if(e==0){d.d=job(b,c.e);d.b=true;return b}f=e<0?0:1;b.a[f]=_vb(a,b.a[f],c,d);if(awb(b.a[f])){if(awb(b.a[1-f])){b.b=true;b.a[0].b=false;b.a[1].b=false}else{awb(b.a[f].a[f])?(b=hwb(b,1-f)):awb(b.a[f].a[1-f])&&(b=gwb(b,1-f))}}}return b}
	function GY(a,b){var c,d,e,f,g,h,i,j,k,l;i=pmb(b.a);h=hw(Llb(i/a.a));l=b.a;g=0;j=h;for(f=0;f<a.a;++f){k=(bmb(),l.substr((0>g?0:g)<i?0>g?0:g:i,(0>(j<i?j:i)?0:j<i?j:i)-((0>g?0:g)<i?0>g?0:g:i)));g=j;j+=h;d=Wv(yU(a.c,f),9);c=new dX(k);c.j.b=b.j.b;Fd(a.b,b,c);vU(d.c,c)}BU(a.g.c,b);vU(a.i,(e=new PY(a,b),e))}
	function p8(a,b,c){var d,e,f,g,h,i,j,k,l;b.k=1;f=b.d;for(l=oX(b,(djb(),bjb)).mb();l.G();){k=Wv(l.H(),7);for(e=new Tob(k.e);e.a<e.c.c.length;){d=Wv(Rob(e),12);j=d.d.f;if(b!=j){g=j.d;if(g.k<=f.k){h=f.k+1;if(h==c.c.c.length){i=new sY(c);i.k=h;vU(c.c,i);rX(j,i)}else{i=Wv(yU(c.c,h),16);rX(j,i)}p8(a,j,c)}}}}}
	function SO(a){var b,c,d,e,f;b=a.e.j;for(d=new Tob(AW(a));d.a<d.c.c.length;){c=Wv(Rob(d),161);e=Wv(oW(c,(eM(),LL)),15);!e&&(e=new llb(0));f=new II(c.e.i);switch(Wv(c.e,7).g.e){case 4:f.a=-c.e.j.a-e.a;break;case 2:f.a=b.a+e.a;break;case 1:f.b=-c.e.j.b-e.a;break;case 3:f.b=b.b+e.a;}c.e.i.a=f.a;c.e.i.b=f.b}}
	function PZ(a){var b,c,d;d=Wv(rJ(a,(eM(),JL)),18);if(d.V()){return}c=(b=Wv(Hkb(Gz),11),new atb(b,Wv(exb(b,b.length),11),0));d.kb((oM(),jM))?Wsb(c,jM):Wsb(c,kM);d.kb(hM)||Wsb(c,hM);d.kb(gM)?Wsb(c,nM):d.kb(fM)?Wsb(c,mM):d.kb(iM)&&Wsb(c,lM);d.kb(nM)?Wsb(c,gM):d.kb(mM)?Wsb(c,fM):d.kb(lM)&&Wsb(c,iM);sJ(a,JL,c)}
	function afb(a,b,c,d,e){var f,g,h,i,j,k,l,m,n,o;m=Zeb(a,c);for(i=0;i<b;i++){e.J(c);n=new GU;o=Wv(d.H(),92);for(k=m+i;k<a.c;k++){h=o;o=Wv(d.H(),92);vU(n,new tfb(h,o,c))}for(l=m+i;l<a.c;l++){d.M();l>m+i&&d.I()}for(g=new Tob(n);g.a<g.c.c.length;){f=Wv(Rob(g),92);d.J(f)}if(i<b-1){for(j=m+i;j<a.c;j++){d.M()}}}}
	function CW(a){var b,c,d,e;if(a.d&&Wv(a.e,7).f.g==(CX(),BX)){return ypb(),ypb(),vpb}else if(!a.a){a.a=new GU;for(d=new Tob(Wv(a.e,7).b);d.a<d.c.c.length;){b=Wv(Rob(d),12);vU(a.a,new tW(b))}if(a.d){e=Wv(rJ(Wv(a.e,7),(Rib(),Bib)),9);if(e){for(c=Uh(iX(e));Cm(c);){b=Wv(Dm(c),12);vU(a.a,new tW(b))}}}}return a.a}
	function EW(a){var b,c,d,e;if(a.d&&Wv(a.e,7).f.g==(CX(),BX)){return ypb(),ypb(),vpb}else if(!a.c){a.c=new GU;for(d=new Tob(Wv(a.e,7).e);d.a<d.c.c.length;){b=Wv(Rob(d),12);vU(a.c,new tW(b))}if(a.d){e=Wv(rJ(Wv(a.e,7),(Rib(),Bib)),9);if(e){for(c=Uh(mX(e));Cm(c);){b=Wv(Dm(c),12);vU(a.c,new tW(b))}}}}return a.c}
	function N1(a,b){var c,d,e,f,g,h,i,j;h=Wv(rJ(a,(Rib(),uib)),7);i=MI(Bv(tv(qz,1),Fzb,10,0,[h.f.i,h.i,h.a])).a;j=a.f.i.b;c=Wv(FU(a.b,xv(dB,gAb,12,a.b.c.length,0,1)),47);for(e=0,f=c.length;e<f;++e){d=c[e];eW(d,h);SI(d.a,new HI(i,j));if(b){g=Wv(rJ(d,(eM(),CL)),44);if(!g){g=new jJ;sJ(d,CL,g)}QI(g,new HI(i,j))}}}
	function O1(a,b){var c,d,e,f,g,h,i,j;e=Wv(rJ(a,(Rib(),uib)),7);i=MI(Bv(tv(qz,1),Fzb,10,0,[e.f.i,e.i,e.a])).a;j=a.f.i.b;c=Wv(FU(a.e,xv(dB,gAb,12,a.e.c.length,0,1)),47);for(g=0,h=c.length;g<h;++g){f=c[g];dW(f,e);RI(f.a,new HI(i,j));if(b){d=Wv(rJ(f,(eM(),CL)),44);if(!d){d=new jJ;sJ(f,CL,d)}QI(d,new HI(i,j))}}}
	function X2(a){var b,c,d,e,f,g,h,i,j;g=rAb;i=rAb;h=null;for(c=new Sub(new Lub(a.e));c.b!=c.c.a.b;){b=Rub(c);if(gw(b.d)===gw((Ieb(),keb))||gw(b.d)===gw(leb)){d=Wv(b.e,116).a;j=Wv(b.e,116).b;e=g-d>uAb;f=d-g<uAb&&i-j>uAb;if(e||f){i=Wv(b.e,116).b;g=Wv(b.e,116).a;h=Wv(b.d,60);if(i==0&&g==0){return h}}}}return h}
	function P4(a,b){var c,d,e,f,g;a.d=b;Ymb(a.b);a.c=false;h:for(d=new Tob(a.d.c);d.a<d.c.c.length;){c=Wv(Rob(d),16);for(f=new Tob(c.a);f.a<f.c.c.length;){e=Wv(Rob(f),9);if(!sl(gX(e))){a.c=true;break h}}}g=Vsb((sK(),qK),Bv(tv(Bz,1),uyb,59,0,[oK,pK]));if(!a.c){Wsb(g,rK);Wsb(g,nK)}a.a=new NR(g);O4(a);return a.a}
	function $2(){var a,b,c,d,e;this.e=(mp(),new wub);this.b=(c=Wv(Hkb(_E),11),new atb(c,Wv(exb(c,c.length),11),0));this.c=(d=Wv(Hkb(_E),11),new atb(d,Wv(exb(d,d.length),11),0));this.a=(e=Wv(Hkb(_E),11),new atb(e,Wv(exb(e,e.length),11),0));for(b=(Ieb(),Ieb(),feb).mb();b.G();){a=Wv(b.H(),60);tub(this.e,a,new _2)}}
	function gdb(a,b,c){var d,e,f,g,h,i;if(Jlb(a.k-a.a)<dAb||Jlb(b.k-b.a)<dAb){return}d=edb(a.n,b.j,c);e=edb(b.n,a.j,c);f=fdb(a.n,b.k,b.a)+fdb(b.j,a.k,a.a);g=fdb(b.n,a.k,a.a)+fdb(a.j,b.k,b.a);h=16*d+f;i=16*e+g;if(h<i){new kdb(a,b,i-h)}else if(h>i){new kdb(b,a,h-i)}else if(h>0&&i>0){new kdb(a,b,0);new kdb(b,a,0)}}
	function c3(a,b){var c,d,e,f,g,h,i,j,k;j=new GU;k=null;for(d=Wv(qsb(a3,a),20).mb();d.G();){c=Wv(d.H(),75);for(i=(f=(new Snb(c.c.a)).a.bb().mb(),new Ynb(f));i.a.G();){g=(e=Wv(i.a.H(),21),Wv(e.yb(),7));Anb(b,g);J2(g,a.b)}xU(j,c.b);k=a.a}Dpb(j);K2(j,k);for(h=new Tob(j);h.a<h.c.c.length;){g=Wv(Rob(h),7);Anb(b,g)}}
	function GP(){var b={'layout':function(a){Rxb(IP(a))}};if(typeof klayregister===Zxb){klayregister(b)}else{typeof document!==Czb&&($wnd.$klay=b);typeof module===Sxb&&module.exports&&(module.exports=b);typeof document===Czb&&typeof self!==Czb&&self.addEventListener('message',function(a){b.layout(a.data)},false)}}
	function _cb(a,b,c,d,e){var f,g,h;h=e?d.b:d.a;if(h>c.k&&h<c.a||c.j.b!=0&&c.n.b!=0&&(Jlb(h-Ixb(Yv(UI(c.j))))<dAb&&Jlb(h-Ixb(Yv(UI(c.n))))<dAb||Jlb(h-Ixb(Yv(VI(c.j))))<dAb&&Jlb(h-Ixb(Yv(VI(c.n))))<dAb)){if(!ttb(a.b,d)){g=Wv(rJ(b,(eM(),CL)),44);if(!g){g=new jJ;sJ(b,CL,g)}f=new II(d);TI(g,f,g.c.b,g.c);stb(a.b,f)}}}
	function lU(a,b,c){var d,e,f,g,h,i,j,k,l;d=c.c;e=c.d;h=MX(b.c);i=MX(b.d);if(d==b.c){h=mU(a,h,e);i=nU(b.d)}else{h=nU(b.c);i=mU(a,i,e)}j=new kJ(b.a);TI(j,h,j.a,j.a.a);TI(j,i,j.c.b,j.c);g=b.c==d;l=new pV;for(f=0;f<j.b-1;++f){k=new RJ(Wv(tn(j,f),10),Wv(tn(j,f+1),10));g&&f==0||!g&&f==j.b-2?(l.b=k):vU(l.a,k)}return l}
	function GW(a,b){var c,d,e,f;f=a.g.e-b.g.e;if(f!=0){return f}c=Wv(rJ(a,(eM(),UL)),24);d=Wv(rJ(b,UL),24);if(!!c&&!!d){e=c.a-d.a;if(e!=0){return e}}switch(a.g.e){case 1:return glb(a.i.a,b.i.a);case 2:return glb(a.i.b,b.i.b);case 3:return glb(b.i.a,a.i.a);case 4:return glb(b.i.b,a.i.b);default:throw new ulb(iAb);}}
	function KO(a,b){var c,d,e,f,g;g=new FI;for(f=new Tob(AW(a));f.a<f.c.c.length;){e=Wv(Rob(f),161);switch(Wv(e.e,7).g.e){case 4:case 2:g.b=Nlb(g.b,e.e.i.b+e.e.j.b+(b?(d=Wv(e.e,7).d,new EP(d.d,d.b,d.a,d.c)).a:0));break;case 1:case 3:g.a=Nlb(g.a,e.e.i.a+e.e.j.a+(b?(c=Wv(e.e,7).d,new EP(c.d,c.b,c.a,c.c)).c:0));}}return g}
	function d3(a,b){var c,d,e,f,g,h,i;e=new GU;i=new GU;c=Wv(qsb(a3,a),20).mb();while(c.G()){d=Wv(c.H(),75);wU(e,d.b);wU(e,$db(d));if(c.G()){d=Wv(c.H(),75);xU(i,$db(d));xU(i,d.b)}}K2(e,a.b);K2(i,a.a);for(h=new Tob(e);h.a<h.c.c.length;){f=Wv(Rob(h),7);Anb(b,f)}for(g=new Tob(i);g.a<g.c.c.length;){f=Wv(Rob(g),7);Anb(b,f)}}
	function ohb(){ohb=iI;fhb=new phb('COMMENTS',0);hhb=new phb('EXTERNAL_PORTS',1);ihb=new phb('HYPEREDGES',2);jhb=new phb('HYPERNODES',3);khb=new phb('NON_FREE_PORTS',4);lhb=new phb('NORTH_SOUTH_PORTS',5);nhb=new phb('SELF_LOOPS',6);ehb=new phb('CENTER_LABELS',7);ghb=new phb('END_LABELS',8);mhb=new phb('PARTITIONS',9)}
	function Jxb(a,b){var c,d,e,f;a=(bmb(),a==null?Wxb:a);c=(a.length+16*b.length,new Amb);f=0;d=0;while(d<b.length){e=a.indexOf('%s',f);if(e==-1){break}ymb(c,a.substr(f,e-f));xmb(c,b[d++]);f=e+2}ymb(c,imb(a,f,a.length-f));if(d<b.length){c.a+=' [';xmb(c,b[d++]);while(d<b.length){c.a+=', ';xmb(c,b[d++])}c.a+=']'}return c.a}
	function pX(a,b,c){var d,e;e=null;switch(b.e){case 1:e=(LX(),GX);break;case 2:e=(LX(),IX);}d=null;switch(c.e){case 1:d=(LX(),HX);break;case 2:d=(LX(),FX);break;case 3:d=(LX(),JX);break;case 4:d=(LX(),KX);}return !!e&&!!d?pl(a.f,(hc(),new ic(new opb(Bv(tv(tw,1),syb,68,0,[Wv(_b(e),68),Wv(_b(d),68)]))))):(ypb(),ypb(),vpb)}
	function vY(a,b,c){var d,e,f,g,h,i,j;i=Eo(mX(b));for(e=WI(i,0);e.b!=e.d.c;){d=Wv(_ub(e),12);j=d.d.f;if(!(Ckb(Ixb(Xv(rJ(j,(Rib(),Vhb)))))&&rJ(j,uib)!=null)&&j.g==(CX(),wX)&&!Ckb(Ixb(Xv(rJ(d,Iib))))&&d.d.g==(sN(),rN)){f=rY(j.d)-rY(b.d);if(f>1){c?(g=rY(b.d)+1):(g=rY(j.d)-1);h=Wv(yU(a.a.c,g),16);rX(j,h)}vY(a,j,c)}}return b}
	function Hcb(a,b){var c,d,e,f;b.d?(e=a.a.c==(Gbb(),Fbb)?iX(b.b):mX(b.b)):(e=a.a.c==(Gbb(),Ebb)?iX(b.b):mX(b.b));f=false;for(d=(Il(),new Im(Dl(ul(e.a,new yl))));Cm(d);){c=Wv(Dm(d),12);if(a.c.a[c.c.f.d.k]===a.c.a[c.d.f.d.k]){continue}f=true;if(ttb(a.b,a.a.f[zcb(c,b.b).k])){b.c=true;b.a=c;return b}}b.c=f;b.a=null;return b}
	function K4(a,b,c){var d,e,f,g;d=Wv(rJ(a.d,(eM(),pL)),15).a;for(f=new Tob(a.a.b);f.a<f.c.c.length;){e=Wv(Rob(f),25);if(aw(e,93)){g=Wv(e,93).b;if(g.g==(CX(),xX)){switch(Wv(rJ(g,(Rib(),hib)),32).e){case 4:g.i.a=b.a-d;break;case 2:g.i.a=c.a+d-(g.j.a+g.e.c);break;case 1:g.i.b=b.b-d;break;case 3:g.i.b=c.b+d-(g.j.b+g.e.a);}}}}}
	function Ztb(){if(!Object.create||!Object.getOwnPropertyNames){return false}var a='__proto__';var b=Object.create(null);if(b[a]!==undefined){return false}var c=Object.getOwnPropertyNames(b);if(c.length!=0){return false}b[a]=42;if(b[a]!==42){return false}if(Object.getOwnPropertyNames(b).length==0){return false}return true}
	function eS(a){var b,c,d,e,f,g,h,i,j;for(g=new Tob(a.a.a);g.a<g.c.c.length;){e=Wv(Rob(g),78);e.f=0;e.e.a.Q()}for(f=new Tob(a.a.a);f.a<f.c.c.length;){e=Wv(Rob(f),78);for(c=(j=(new Snb(e.a.a)).a.bb().mb(),new Ynb(j));c.a.G();){b=(d=Wv(c.a.H(),21),Wv(d.yb(),25));for(i=b.i.mb();i.G();){h=Wv(i.H(),25);if(h.f!=e){stb(e.e,h);++h.f.f}}}}}
	function bcb(a,b,c,d){var e,f,g,h;if(b.g==(CX(),wX)){for(f=Uh(iX(b));Cm(f);){e=Wv(Dm(f),12);g=e.c.f;if((g.g==wX||Ckb(Ixb(Xv(rJ(g,(Rib(),Vhb))))))&&a.d.a[e.c.f.d.k]==d&&a.d.a[b.d.k]==c){return true}}}if(b.g==zX){for(f=Uh(iX(b));Cm(f);){e=Wv(Dm(f),12);h=e.c.f.g;if(h==zX&&a.d.a[e.c.f.d.k]==d&&a.d.a[b.d.k]==c){return true}}}return false}
	function cfb(a){var b,c,d,e,f,g;e=a.g.tb();d=a.b.tb();if(a.e){for(c=0;c<a.c;c++){e.H()}}else{for(c=0;c<a.c-1;c++){e.H();e.I()}}b=Ixb(Yv(e.H()));while(a.i-b>RAb){f=b;g=0;while((b-f<=0?0-(b-f):b-f)<RAb){++g;b=Ixb(Yv(e.H()));d.H()}if(g<a.c){e.M();afb(a,a.c-g,f,d,e);e.H()}d.M()}if(!a.e){for(c=0;c<a.c-1;c++){e.H();e.I()}}a.e=true;a.d=true}
	function O2(a){var b,c,d,e;switch(V2(a.a).c){case 4:return Ieb(),oeb;case 3:return Wv(S2(a.a).mb().H(),60);case 2:d=V2(a.a);c=new jtb(d);b=Wv(itb(c),60);e=Wv(itb(c),60);return Meb(b)==e?Zsb(d,(Ieb(),oeb))?ieb:oeb:Leb(Leb(b))==e?Leb(b):Neb(b);case 1:d=V2(a.a);return Meb(Wv(itb(new jtb(d)),60));case 0:return Ieb(),peb;default:return null;}}
	function Q3(a,b){var c;oR.call(this);this.a=Wv(rJ(b,(Rib(),Jib)),15).a;this.c=this.a*Wv(rJ(b,(Mjb(),Ejb)),15).a;this.b=a;this.j=new VN(a.i.a-a.e.b,a.i.b-a.e.d,a.j.a+a.e.b+a.e.c,a.j.b+a.e.d+a.e.a);BI(this.g);c=tl(iX(a))-tl(mX(a));c<0?vS(this.n,true,(sK(),oK)):c>0&&vS(this.n,true,(sK(),pK));a.g==(CX(),xX)&&wS(this.n,false,false,false,false)}
	function UT(a,b,c){var d,e,f,g,h,i,j,k,l,m;f=new HI(b,c);for(k=new Tob(a.b);k.a<k.c.c.length;){j=Wv(Rob(k),9);vI(j.i,f);for(m=new Tob(j.f);m.a<m.c.c.length;){l=Wv(Rob(m),7);for(e=new Tob(l.e);e.a<e.c.c.length;){d=Wv(Rob(e),12);hJ(d.a,f);g=Wv(rJ(d,(eM(),CL)),44);!!g&&hJ(g,f);for(i=new Tob(d.b);i.a<i.c.c.length;){h=Wv(Rob(i),33);vI(h.i,f)}}}}}
	function TW(a,b,c){var d,e,f,g,h,i,j,k,l,m;f=new HI(b,c);for(k=new Tob(a.b);k.a<k.c.c.length;){j=Wv(Rob(k),9);vI(j.i,f);for(m=new Tob(j.f);m.a<m.c.c.length;){l=Wv(Rob(m),7);for(e=new Tob(l.e);e.a<e.c.c.length;){d=Wv(Rob(e),12);hJ(d.a,f);g=Wv(rJ(d,(eM(),CL)),44);!!g&&hJ(g,f);for(i=new Tob(d.b);i.a<i.c.c.length;){h=Wv(Rob(i),33);vI(h.i,f)}}}}}
	function X0(a,b){var c,d,e,f,g;for(g=new Tob(a.f);g.a<g.c.c.length;){f=Wv(Rob(g),7);if(b){if(f.b.c.length!=0){throw new $J((e=lX(a),nAb+(e==null?Dlb(a.k):e)+oAb+pAb+qAb))}}else{for(d=new Tob(f.b);d.a<d.c.c.length;){c=Wv(Rob(d),12);if(gw(rJ(c.c.f,(Mjb(),vjb)))!==gw((Xib(),Tib))){throw new $J((e=lX(a),nAb+(e==null?Dlb(a.k):e)+oAb+pAb+qAb))}}}}}
	function y6(a,b,c){var d,e,f,g,h,i,j;d=0;j=nX(b,c);for(i=j.mb();i.G();){h=Wv(i.H(),7);if(Wv(rJ(h,(Rib(),Bib)),9)){g=Wv(rJ(h,Bib),9);nX(g,(sN(),ZM)).mb().G()&&(d+=(f=a.k?1:NX(Wv(yU(g.f,0),7)),f*Slb(w6(a,b,c).a-1-Wv(Smb(a.i,h),24).a,B6(a,b,g))));nX(g,rN).mb().G()&&(d+=(e=a.k?1:NX(Wv(yU(g.f,0),7)),e*Slb(Wv(Smb(a.i,h),24).a,B6(a,b,g))))}}return d}
	function J7(a,b){var c,d,e,f,g,h,i;e=xv(mw,Yyb,26,a.e.a.c.length,12,1);for(g=new Tob(a.e.a);g.a<g.c.c.length;){f=Wv(Rob(g),61);e[f.b]+=f.c.c.length}h=Eo(b);while(h.b!=0){f=Wv(h.b==0?null:(Bxb(h.b!=0),$I(h,h.a.a)),61);for(d=new Tob(f.g);d.a<d.c.c.length;){c=Wv(Rob(d),89);i=c.d;i.e=Plb(i.e,f.e+c.a);--e[i.b];e[i.b]==0&&(TI(h,i,h.c.b,h.c),true)}}}
	function nP(a,b,c,d,e,f,g){a.d=d.e.i.a;a.e=d.e.i.b;if(e){a.d+=e.e.i.a;a.e+=e.e.i.b}a.c=b.e.j.a;a.b=b.e.j.b;if(!e){c?(a.d-=g+b.e.j.a):(a.d+=d.e.j.a+g)}else{switch(Wv(e.e,7).g.e){case 0:case 2:a.d+=e.e.j.a+g+f.a+g;break;case 4:a.d-=g+f.a+g+b.e.j.a;break;case 1:a.d+=e.e.j.a+g;a.e-=g+f.b+g+b.e.j.b;break;case 3:a.d+=e.e.j.a+g;a.e+=e.e.j.b+g+f.b+g;}}}
	function V9(a,b){var c,d,e,f,g,h,i,j,k;e=new GU;for(i=new Tob(b);i.a<i.c.c.length;){f=Wv(Rob(i),9);vU(e,a.b[f.d.k][f.k])}S9(a,e);while(k=T9(e)){U9(a,Wv(k.a,102),Wv(k.b,102),e)}b.c=xv(UF,syb,1,0,4,1);for(d=new Tob(e);d.a<d.c.c.length;){c=Wv(Rob(d),102);for(g=c.d,h=0,j=g.length;h<j;++h){f=g[h];b.c[b.c.length]=f;a.a[f.d.k][f.k].a=W9(c.g,c.d[0]).a}}}
	function lS(a){var b,c,d,e,f,g,h;h=(mp(),new ntb);for(d=new Tob(a.a.b);d.a<d.c.c.length;){b=Wv(Rob(d),25);Umb(h,b,new GU)}for(e=new Tob(a.a.b);e.a<e.c.c.length;){b=Wv(Rob(e),25);b.r=Vzb;for(g=b.i.mb();g.G();){f=Wv(g.H(),25);Wv(re(Ktb(h.d,f)),20).ib(b)}}for(c=new Tob(a.a.b);c.a<c.c.c.length;){b=Wv(Rob(c),25);b.i.Q();b.i=Wv(re(Ktb(h.d,b)),20)}eS(a)}
	function kU(a){var b,c,d,e,f;e=Wv(yU(a.b,0),9);b=new uX(a);vU(a.b,b);b.j.a=Nlb(1,e.j.a);b.j.b=Nlb(1,e.j.b);b.i.a=e.i.a;b.i.b=e.i.b;switch(Wv(rJ(e,(Rib(),hib)),32).e){case 4:b.i.a+=2;break;case 1:b.i.b+=2;break;case 2:b.i.a-=2;break;case 3:b.i.b-=2;}d=new RX;PX(d,b);c=new hW;f=Wv(yU(e.f,0),7);dW(c,f);eW(c,d);vI(BI(d.i),f.i);vI(BI(d.a),f.a);return b}
	function T8(a){var b,c,d,e,f,g,h,i,j;j=(mp(),new ntb);b=0;c=new l7;for(h=a.mb();h.G();){f=Wv(h.H(),9);i=x7(z7(y7(new A7,b++),f),c);Ltb(j.d,f,i)}for(g=a.mb();g.G();){f=Wv(g.H(),9);for(e=Uh(mX(f));Cm(e);){d=Wv(Dm(e),12);if(bW(d)){continue}f7(i7(h7(g7(j7(new k7,Plb(1,Wv(rJ(d,(Rib(),Eib)),24).a)),1),Wv(Smb(j,d.c.f),61)),Wv(Smb(j,d.d.f),61)))}}return c}
	function E2(a){var b,c;if(a.V()){return}c=Wv(a.sb(0),75).f;new g3(a);b=new Fnb(c.f,0);e3((Ieb(),neb),b);f3(Eeb,b);D2((sN(),$M),b);d3(meb,b);f3(qeb,b);c3(jeb,b);e3(keb,b);D2(ZM,b);d3(ieb,b);e3(leb,b);c3(peb,b);e3(qeb,b);D2(pN,b);d3(oeb,b);e3(Eeb,b);c3(Heb,b);f3(leb,b);while(b.b<b.d.Y()){Bxb(b.b<b.d.Y());b.d.sb(b.c=b.b++)}d3(Geb,b);f3(keb,b);f3(neb,b)}
	function F2(a){var b,c;if(a.V()){return}c=Wv(a.sb(0),75).f;new g3(a);b=new Fnb(c.f,0);e3((Ieb(),neb),b);f3(Eeb,b);D2((sN(),$M),b);c3(meb,b);f3(qeb,b);c3(jeb,b);e3(keb,b);D2(ZM,b);c3(ieb,b);e3(leb,b);c3(peb,b);e3(qeb,b);D2(pN,b);c3(oeb,b);e3(Eeb,b);c3(Heb,b);f3(leb,b);while(b.b<b.d.Y()){Bxb(b.b<b.d.Y());b.d.sb(b.c=b.b++)}c3(Geb,b);f3(keb,b);f3(neb,b)}
	function N7(a){var b,c,d,e,f,g,h,i,j;e=eyb;g=$xb;for(j=new Tob(a.e.a);j.a<j.c.c.length;){h=Wv(Rob(j),61);g=Slb(g,h.e);e=Plb(e,h.e)}f=0;d=xv(mw,Yyb,26,e-g+1,12,1);for(i=new Tob(a.e.a);i.a<i.c.c.length;){h=Wv(Rob(i),61);h.e-=g;++d[h.e]}if(a.k){for(c=new Tob(a.k.c);c.a<c.c.c.length;){b=Wv(Rob(c),16);d[f++]+=b.a.c.length;if(d.length==f){break}}}return d}
	function L4(a){var b,c,d,e;M4(a);J4(a);e=new HI(Uzb,Uzb);b=new HI(Vzb,Vzb);for(d=new Tob(a.a.b);d.a<d.c.c.length;){c=Wv(Rob(d),25);e.a=Qlb(e.a,c.j.d);e.b=Qlb(e.b,c.j.e);b.a=Nlb(b.a,c.j.d+c.j.c);b.b=Nlb(b.b,c.j.e+c.j.b)}vI(BI(a.d.d),zI(new HI(e.a,e.b)));vI(BI(a.d.e),EI(new HI(b.a,b.b),e));K4(a,e,b);a.a.a.c=xv(UF,syb,1,0,4,1);a.a.b.c=xv(UF,syb,1,0,4,1)}
	function j1(a,b){var c,d,e,f,g,h,i,j,k,l;g=a.e;k=Wv(rJ(a,(Rib(),Qib)),20);l=0;if(k){i=0;for(f=k.mb();f.G();){e=Wv(f.H(),9);i=Nlb(i,e.j.b);l+=e.j.a}l+=b/2*(k.Y()-1);g.d+=i+b}c=Wv(rJ(a,Yhb),20);d=0;if(c){i=0;for(f=c.mb();f.G();){e=Wv(f.H(),9);i=Nlb(i,e.j.b);d+=e.j.a}d+=b/2*(c.Y()-1);g.a+=i+b}h=l>d?l:d;if(h>a.j.a){j=(h-a.j.a)/2;g.b=Nlb(g.b,j);g.c=Nlb(g.c,j)}}
	function ST(a,b,c,d){var e,f,g,h,i,j,k,l,m,n;g=uI(b.d,c,d);for(l=new Tob(b.b);l.a<l.c.c.length;){k=Wv(Rob(l),9);vI(k.i,g);for(n=new Tob(k.f);n.a<n.c.c.length;){m=Wv(Rob(n),7);for(f=new Tob(m.e);f.a<f.c.c.length;){e=Wv(Rob(f),12);hJ(e.a,g);h=Wv(rJ(e,(eM(),CL)),44);!!h&&hJ(h,g);for(j=new Tob(e.b);j.a<j.c.c.length;){i=Wv(Rob(j),33);vI(i.i,g)}}}vU(a.b,k);k.a=a}}
	function Q8(a,b){var c,d,e,f,g;a.c==null||a.c.length<b.c.length?(a.c=xv(KH,xAb,26,b.c.length,13,1)):dpb(a.c);a.a=new GU;d=0;for(g=new Tob(b);g.a<g.c.c.length;){e=Wv(Rob(g),9);e.k=d++}c=new aJ;for(f=new Tob(b);f.a<f.c.c.length;){e=Wv(Rob(f),9);if(!a.c[e.k]){R8(a,e);c.b==0||(Bxb(c.b!=0),Wv(c.a.a.c,20)).Y()<a.a.c.length?RI(c,a.a):SI(c,a.a);a.a=new GU}}return c}
	function xfb(a,b,c){var d,e,f,g,h,i,j,k,l;d=sgb(a.g);j=vI(xI(a.i),a.a);k=vI(xI(b.i),b.a);e=vI(new II(j),CI(new GI(d),c));l=vI(new II(k),CI(new GI(d),c));g=CI(EI(new II(e),l),0.5);i=vI(vI(new II(l),g),CI(new GI(d),Tlb(g.a*g.a+g.b*g.b)));h=new ufb(Bv(tv(qz,1),Fzb,10,0,[j,e,i,l,k]));f=$eb(h,0.5,false);h.a=f;bfb(h,new Ffb(Bv(tv(qz,1),Fzb,10,0,[f,j,k])));return h}
	function F7(a,b){var c,d,e,f,g;nI(b,'Network simplex',1);if(a.e.a.c.length<1){pI(b);return}for(f=new Tob(a.e.a);f.a<f.c.c.length;){e=Wv(Rob(f),61);e.e=0}g=a.e.a.c.length>=40;g&&Q7(a);H7(a);G7(a);c=K7(a);d=0;while(!!c&&d<a.f){E7(a,c,D7(a,c));c=K7(a);++d}g&&P7(a);a.a?B7(a,N7(a)):N7(a);a.b=null;a.d=null;a.p=null;a.c=null;a.g=null;a.i=null;a.n=null;a.o=null;pI(b)}
	function uQ(a){var b,c,d,e,f,g,h,i,j,k;j=new vtb;e=(mp(),new ntb);for(h=0,i=a.length;h<i;++h){g=a[h];b=g.mc();j.a.db(b,j);b==null?Ltb(e.d,null,g):dub(e.e,b,g);k=gmb(b,(bmb(),b.lastIndexOf('.'))+1,b.length);if(!ttb(sQ,k)){j.a.db(k,j);k==null?Ltb(e.d,null,g):dub(e.e,k,g);stb(sQ,k)}}d=(hi(),Yj((f=(new Snb(j.a)).a.bb().mb(),new Ynb(f))));c=tj(e);return new RJ(d,c)}
	function E7(a,b,c){var d,e,f;if(!b.e){throw new slb('Given leave edge is no tree edge.')}if(c.e){throw new slb('Given enter edge is a tree edge already.')}b.e=false;utb(a.p,b);c.e=true;stb(a.p,c);d=c.d.e-c.c.e-c.a;I7(a,c.d,b)||(d=-d);for(f=new Tob(a.e.a);f.a<f.c.c.length;){e=Wv(Rob(f),61);I7(a,e,b)||(e.e+=d)}a.j=1;dpb(a.c);O7(a,Wv(Rob(new Tob(a.e.a)),61));C7(a)}
	function dU(a,b){var c,d,e,f,g,h,i,j,k,l,m,n;if(a.V()){return new FI}j=0;l=0;for(e=a.mb();e.G();){d=Wv(e.H(),55);f=d.e;j=Nlb(j,f.a);l+=f.a*f.b}j=Nlb(j,Math.sqrt(l)*Wv(rJ(Wv(a.mb().H(),55),(Rib(),Rhb)),15).a);m=0;n=0;i=0;c=b;for(h=a.mb();h.G();){g=Wv(h.H(),55);k=g.e;if(m+k.a>j){m=0;n+=i+b;i=0}UT(g,m,n);c=Nlb(c,m+k.a);i=Nlb(i,k.b);m+=k.a+b}return new HI(c+b,n+i+b)}
	function Nm(a,b,c,d){var e,f,g;g=new Sn(b,c);if(!a.a){a.a=a.e=g;Umb(a.b,b,new Rn(g));++a.c}else if(!d){a.e.b=g;g.d=a.e;a.e=g;e=Wv(Smb(a.b,b),126);if(!e){Umb(a.b,b,new Rn(g));++a.c}else{++e.a;f=e.c;f.c=g;g.e=f;e.c=g}}else{e=Wv(Smb(a.b,b),126);++e.a;g.d=d.d;g.e=d.e;g.b=d;g.c=d;!d.e?(Wv(Smb(a.b,b),126).b=g):(d.e.c=g);!d.d?(a.a=g):(d.d.b=g);d.d=g;d.e=g}++a.d;return g}
	function hS(a){var b,c,d,e,f,g,h,i;if(a.e){throw new ulb((Gkb(nA),'The '+nA.j+Yzb))}a.d==(sK(),qK)&&gS(a,oK);for(c=new Tob(a.a.a);c.a<c.c.c.length;){b=Wv(Rob(c),78);b.f=0}for(g=new Tob(a.a.b);g.a<g.c.c.length;){f=Wv(Rob(g),25);f.r=Vzb;for(e=f.i.mb();e.G();){d=Wv(e.H(),25);++d.f.f}}a.b.Cc(a);for(i=new Tob(a.a.b);i.a<i.c.c.length;){h=Wv(Rob(i),25);h.p=true}return a}
	function V1(a,b,c,d,e){var f,g,h,i;f=new uX(a);sX(f,(CX(),BX));sJ(f,(eM(),TL),(KM(),FM));sJ(f,(Rib(),uib),b.c.f);g=new RX;sJ(g,uib,b.c);QX(g,e);PX(g,f);sJ(b.c,Bib,f);h=new uX(a);sX(h,BX);sJ(h,TL,FM);sJ(h,uib,b.d.f);i=new RX;sJ(i,uib,b.d);QX(i,e);PX(i,h);sJ(b.d,Bib,h);dW(b,g);eW(b,i);Fxb(0,c.c.length);fxb(c.c,0,f);d.c[d.c.length]=h;sJ(f,aib,Elb(1));sJ(h,aib,Elb(1))}
	function j2(a,b){var c,d,e,f,g;g=Wv(rJ(a.f,(eM(),TL)),28);f=a.g.e-b.g.e;if(f!=0||g==(KM(),HM)){return f}if(g==(KM(),EM)){c=Wv(rJ(a,UL),24);d=Wv(rJ(b,UL),24);if(!!c&&!!d){e=c.a-d.a;if(e!=0){return e}}}switch(a.g.e){case 1:return glb(a.i.a,b.i.a);case 2:return glb(a.i.b,b.i.b);case 3:return glb(b.i.a,a.i.a);case 4:return glb(b.i.b,a.i.b);default:throw new ulb(iAb);}}
	function hfb(a){var b,c,d,e,f,g,h,i,j,k,l;h=new GU;f=Ixb(Yv(a.g.sb(a.g.Y()-1)));for(l=a.g.mb();l.G();){k=Yv(l.H());uU(h,0,f-(Dxb(k),k))}g=lJ(Xeb(a));j=new GU;e=new Tob(h);i=new GU;for(b=0;b<a.c-1;b++){vU(j,Yv(Rob(e)))}for(d=WI(g,0);d.b!=d.d.c;){c=Wv(_ub(d),10);vU(j,Yv(Rob(e)));vU(i,new sfb(c,j));Cxb(0,j.c.length);j.c.splice(0,1)}return new ffb(a.e,a.f,a.d,a.c,h,i)}
	function zs(a,b,c,d,e){var f,g,h,i,j;f=b.$b(c,a.b);if(f<0){h=a.e;if(!h){e[0]=0;return As(a,c,d)}g=h.d;a.e=zs(h,b,c,d,e);e[0]==0&&++a.a;a.j=PH(a.j,d);return a.e.d==g?a:Gs(a)}else if(f>0){i=a.g;if(!i){e[0]=0;return Bs(a,c,d)}g=i.d;a.g=zs(i,b,c,d,e);e[0]==0&&++a.a;a.j=PH(a.j,d);return a.g.d==g?a:Gs(a)}e[0]=a.c;j=PH(a.c,d);Xb(RH(j,$xb)<=0);a.c+=d;a.j=PH(a.j,d);return a}
	function iJ(b,c){var d,e,f,g,h,i;f=fmb(c,',|;|\\(|\\)|\\[|\\]|\\{|\\}| |\t|\n');_I(b);try{e=0;h=0;g=0;i=0;while(e<f.length){if(f[e]!=null&&pmb(hmb(f[e]))>0){h%2==0?(g=clb(f[e])):(i=clb(f[e]));h>0&&h%2!=0&&QI(b,new HI(g,i));++h}++e}}catch(a){a=OH(a);if(aw(a,130)){d=a;throw new slb('The given string does not match the expected format for vectors.'+d)}else throw NH(a)}}
	function _bb(a,b,c){var d,e,f,g,h,i,j,k;e=true;for(g=new Tob(b.c);g.a<g.c.c.length;){f=Wv(Rob(g),16);j=Vzb;for(i=new Tob(f.a);i.a<i.c.c.length;){h=Wv(Rob(i),9);k=Ixb(c.n[h.k])+Ixb(c.d[h.k])-h.e.d;d=Ixb(c.n[h.k])+Ixb(c.d[h.k])+h.j.b+h.e.a;if(k>j&&d>j){j=Ixb(c.n[h.k])+Ixb(c.d[h.k])+h.j.b+h.e.a}else{e=false;a.a&&(Fmb(),Emb);break}}if(!e){break}}a.a&&(Fmb(),Emb);return e}
	function Jv(a){var b,c,d,e,f,g,h,i;if(isNaN(a)){return Rv(),Qv}if(a<-9223372036854775808){return Rv(),Pv}if(a>=9223372036854775807){return Rv(),Ov}e=false;if(a<0){e=true;a=-a}d=0;if(a>=dzb){d=hw(a/dzb);a-=d*dzb}c=0;if(a>=czb){c=hw(a/czb);a-=c*czb}b=hw(a);f=Ev(b,c,d);e&&(g=~f.l+1&azb,h=~f.m+(g==0?1:0)&azb,i=~f.h+(g==0&&h==0?1:0)&bzb,f.l=g,f.m=h,f.h=i,undefined);return f}
	function JO(a){var b,c,d,e,f,g,h;e=DW(a);if(Qob(new Tob(e))){h=new VN(0,0,a.e.j.a,a.e.j.b);for(c=new Tob(e);c.a<c.c.c.length;){b=Wv(Rob(c),129);d=new VN(b.e.i.a,b.e.i.b,b.e.j.a,b.e.j.b);TN(h,d)}g=new FP((f=Wv(a.e,7).d,new EP(f.d,f.b,f.a,f.c)));g.d=-h.e;g.a=h.e+h.b-a.e.j.b;g.b=-h.d;g.c=h.d+h.c-a.e.j.a;Wv(a.e,7).d.b=g.b;Wv(a.e,7).d.d=g.d;Wv(a.e,7).d.c=g.c;Wv(a.e,7).d.a=g.a}}
	function Y0(a){var b,c,d,e,f;for(f=new Tob(a.f);f.a<f.c.c.length;){e=Wv(Rob(f),7);for(d=new Tob(e.e);d.a<d.c.c.length;){c=Wv(Rob(d),12);if(gw(rJ(c.d.f,(Mjb(),vjb)))!==gw((Xib(),Vib))){throw new $J((b=lX(a),nAb+(b==null?Dlb(a.k):b)+"' has its layer constraint set to LAST or LAST_SEPARATE, but has "+'at least one outgoing edge. Connections between nodes with these '+qAb))}}}}
	function Rfb(a,b,c,d){var e,f,g,h,i,j;for(f=new Tob(a);f.a<f.c.c.length;){e=Wv(Rob(f),12);g=e.c;if(b.a.R(g)){h=(fgb(),dgb)}else if(c.a.R(g)){h=(fgb(),egb)}else{throw new slb('Source port must be in one of the port sets.')}i=e.d;if(b.a.R(i)){j=(fgb(),dgb)}else if(c.a.R(i)){j=(fgb(),egb)}else{throw new slb('Target port must be in one of the port sets.')}vU(d,new lgb(e,h,j))}}
	function bQ(a,b){var c,d,e,f,g,h;if('edges' in b.a){h=Pu(b,'edges');if(!h.hc()){throw new GQ("The 'edges' property of a node has to be an array.",h,b)}f=h.hc();for(g=0;g<f.a.length;++g){e=gu(f,g);if(!e.kc()){throw new GQ("All elements of the 'edges' property must be objects.",e,b)}aQ(a,e.kc())}}if(Mzb in b.a){d=Pu(b,Mzb).hc();for(g=0;g<d.a.length;++g){c=gu(d,g).kc();bQ(a,c)}}}
	function fS(a){var b,c,d,e,f,g,h,i;for(d=new Tob(a.a.a);d.a<d.c.c.length;){c=Wv(Rob(d),78);c.g=null;for(g=(i=(new Snb(c.a.a)).a.bb().mb(),new Ynb(i));g.a.G();){e=(b=Wv(g.a.H(),21),Wv(b.yb(),25));BI(e.g);(!c.g||e.j.d<c.g.j.d)&&(c.g=e)}for(f=(h=(new Snb(c.a.a)).a.bb().mb(),new Ynb(h));f.a.G();){e=(b=Wv(f.a.H(),21),Wv(b.yb(),25));e.g.a=e.j.d-c.g.j.d;e.g.b=e.j.e-c.g.j.e}}return a}
	function Nab(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o;c=false;n=$yb*a.b.f*a.b.d;for(e=new Tob(b.c);e.a<e.c.c.length;){d=Wv(Rob(e),16);j=new Tob(d.a);f=Wv(Rob(j),9);k=Uab(a.a[f.k]);while(j.a<j.c.c.length){h=Wv(Rob(j),9);l=Uab(a.a[h.k]);if(k!=l){m=Xjb(a.b,f,h);g=f.i.b+f.j.b+f.e.a+k.a+m;i=h.i.b-h.e.d+l.a;if(g>i+n){o=k.i+l.i;l.a=(l.i*l.a+k.i*k.a)/o;l.i=o;k.g=l;c=true}}f=h;k=l}}return c}
	function XY(a){var b,c,d,e,f,g;if(gw(rJ(a,(eM(),TL)))===gw((KM(),GM))||gw(rJ(a,TL))===gw(FM)){for(g=new Tob(a.f);g.a<g.c.c.length;){f=Wv(Rob(g),7);if(f.g==(sN(),$M)||f.g==pN){return false}}}if(MM(Wv(rJ(a,TL),28))){for(e=nX(a,(sN(),ZM)).mb();e.G();){d=Wv(e.H(),7);if(d.b.c.length!=0){return false}}}for(c=Uh(mX(a));Cm(c);){b=Wv(Dm(c),12);if(b.c.f==b.d.f){return false}}return true}
	function KW(a,b){var c,d,e,f,g,h,i,j,k;e=a.f;g=e.j.a;f=e.j.b;if(g<=0&&f<=0){return sN(),qN}j=a.i.a;k=a.i.b;h=a.j.a;c=a.j.b;switch(b.e){case 2:case 1:if(j<0){return sN(),rN}else if(j+h>g){return sN(),ZM}break;case 4:case 3:if(k<0){return sN(),$M}else if(k+c>f){return sN(),pN}}i=(j+h/2)/g;d=(k+c/2)/f;return i+d<=1&&i-d<=0?(sN(),rN):i+d>=1&&i-d>=0?(sN(),ZM):d<0.5?(sN(),$M):(sN(),pN)}
	function pP(a,b,c,d,e,f,g){var h,i,j,k,l,m;m=new UN;for(j=b.mb();j.G();){h=Wv(j.H(),627);for(l=new Tob(sW(h));l.a<l.c.c.length;){k=Wv(Rob(l),129);if(gw(oW(k,(eM(),tL)))===gw((EK(),CK))){nP(m,k,false,d,e,f,g);TN(a,m)}}}for(i=c.mb();i.G();){h=Wv(i.H(),627);for(l=new Tob(sW(h));l.a<l.c.c.length;){k=Wv(Rob(l),129);if(gw(oW(k,(eM(),tL)))===gw((EK(),BK))){nP(m,k,true,d,e,f,g);TN(a,m)}}}}
	function f8(a,b){var c,d,e,f,g,h,i,j;for(i=new Tob(b.f);i.a<i.c.c.length;){h=Wv(Rob(i),7);for(e=Uh(Sh((Gi(),new gr(Ti(Bv(tv(UF,1),syb,1,4,[h.b,h.e]))))));Cm(e);){d=Wv(Dm(e),12);c=d.c==h?d.d:d.c;f=c.f;if(b==f){continue}j=Wv(rJ(d,(Rib(),Eib)),24).a;j<0&&(j=0);g=f.k;if(a.b[g]==0){if(d.d==c){a.a[g]-=j+1;a.a[g]<=0&&a.c[g]>0&&QI(a.e,f)}else{a.c[g]-=j+1;a.c[g]<=0&&a.a[g]>0&&QI(a.d,f)}}}}}
	function tcb(a,b){var c,d,e,f,g,h,i,j,k;for(g=new Tob(b.c);g.a<g.c.c.length;){f=Wv(Rob(g),16);for(j=new Tob(f.a);j.a<j.c.c.length;){i=Wv(Rob(j),9);k=new GU;h=0;for(e=Uh(iX(i));Cm(e);){c=Wv(Dm(e),12);Wv(rJ(c,(Rib(),Eib)),24).a>h&&(h=Wv(rJ(c,Eib),24).a)}for(d=Uh(iX(i));Cm(d);){c=Wv(Dm(d),12);i.d!=c.c.f.d&&Wv(rJ(c,(Rib(),Eib)),24).a==h&&vU(k,new RJ(c.c.f,c))}Gpb(k,a.c);uU(a.b,i.k,k)}}}
	function ucb(a,b){var c,d,e,f,g,h,i,j,k;for(g=new Tob(b.c);g.a<g.c.c.length;){f=Wv(Rob(g),16);for(j=new Tob(f.a);j.a<j.c.c.length;){i=Wv(Rob(j),9);k=new GU;h=0;for(e=Uh(mX(i));Cm(e);){c=Wv(Dm(e),12);Wv(rJ(c,(Rib(),Eib)),24).a>h&&(h=Wv(rJ(c,Eib),24).a)}for(d=Uh(mX(i));Cm(d);){c=Wv(Dm(d),12);i.d!=c.d.f.d&&Wv(rJ(c,(Rib(),Eib)),24).a==h&&vU(k,new RJ(c.d.f,c))}Gpb(k,a.c);uU(a.f,i.k,k)}}}
	function g3(a){b3();var b,c,d,e,f,g,h,i,j,k;this.b=new i3;this.c=new GU;this.a=new GU;for(i=Seb(),j=0,k=i.length;j<k;++j){h=i[j];ssb(a3,h,new GU)}for(c=a.mb();c.G();){b=Wv(c.H(),75);xU(this.a,Zdb(b));b.g.a.Y()==0?Wv(qsb(a3,b.e),20).ib(b):vU(this.c,b)}for(f=(g=(new aob(a3)).a.bb().mb(),new fob(g));f.a.G();){e=(d=Wv(f.a.H(),21),Wv(d.zb(),20));Gpb(e,this.b)}Dpb(Wv(qsb(a3,(Ieb(),neb)),20))}
	function E$(a,b){var c,d,e,f,g,h,i;i=Wv(rJ(b,(eM(),TL)),28);if(!(i==(KM(),GM)||i==FM)){return}f=(c=Wv(rJ(b,(Rib(),Xhb)),15).a,new HI(b.e.a+b.a.b+b.a.c+2*c,b.e.b+b.a.d+b.a.a+2*c)).b;for(h=new Tob(a.a);h.a<h.c.c.length;){g=Wv(Rob(h),9);if(g.g!=(CX(),xX)){continue}d=Wv(rJ(g,hib),32);if(d!=(sN(),ZM)&&d!=rN){continue}e=Ixb(Yv(rJ(g,Cib)));i==GM&&(e*=f);g.i.b=e-Wv(rJ(g,SL),10).b;fX(g,false,true)}}
	function fZ(a,b){var c,d,e,f,g,h,i,j;c=new uX(a.d.c);sX(c,(CX(),wX));sJ(c,(eM(),TL),Wv(rJ(b,TL),28));sJ(c,JL,Wv(rJ(b,JL),86));c.k=a.d.b++;vU(a.b,c);c.j.b=b.j.b;c.j.a=0;j=(sN(),ZM);f=Ao(nX(b,j));for(i=new Tob(f);i.a<i.c.c.length;){h=Wv(Rob(i),7);PX(h,c)}g=new RX;QX(g,j);PX(g,b);g.i.a=c.j.a;g.i.b=c.j.b/2;e=new RX;QX(e,tN(j));PX(e,c);e.i.b=c.j.b/2;e.i.a=-e.j.a;d=new hW;dW(d,g);eW(d,e);return c}
	function m3(a,b,c){var d,e,f,g,h,i,j,k,l,m,n,o;i=new Dh;Np(a,i);e=new deb(b);n=new GU;vU(n,(o=a.j,Wv(um(dq(!o?(a.j=new eq(a)):o)),7)));m=new GU;while(n.c.length!=0){h=Wv(Rob(new Tob(n)),7);m.c[m.c.length]=h;d=Sm(a,h);for(g=new Nqb(d.b.mb());g.b.G();){f=Wv(g.b.H(),12);if(beb(e,f,c)){l=Wv(Gd(i,f),20);for(k=l.mb();k.G();){j=Wv(k.H(),7);zU(m,j,0)!=-1||(n.c[n.c.length]=j,true)}}}BU(n,h)}return e}
	function fmb(a,b){var c,d,e,f,g,h,i;c=RegExp(b,'g');h=xv($F,Txb,2,0,5,1);d=0;i=a;f=null;while(true){g=c.exec(i);if(g==null||i==''){h[d]=i;break}else{h[d]=gmb(i,0,g.index);i=gmb(i,g.index+g[0].length,(bmb(),i.length));c.lastIndex=0;if(f==i){h[d]=i.substr(0,1);i=imb(i,1,i.length-1)}f=i;++d}}if((bmb(),a.length)>0){e=h.length;while(e>0&&h[e-1]==''){--e}e<h.length&&(h.length=e,undefined)}return h}
	function NO(a){var b,c,d,e,f,g;for(g=new Tob(AW(a.e));g.a<g.c.c.length;){f=Wv(Rob(g),161);switch(Wv(f.e,7).g.e){case 4:a.q.b=Nlb(a.q.b,(c=Wv(f.e,7).d,new EP(c.d,c.b,c.a,c.c)).c);break;case 2:a.q.c=Nlb(a.q.c,(d=Wv(f.e,7).d,new EP(d.d,d.b,d.a,d.c)).b);break;case 1:a.q.d=Nlb(a.q.d,(e=Wv(f.e,7).d,new EP(e.d,e.b,e.a,e.c)).a);break;case 3:a.q.a=Nlb(a.q.a,(b=Wv(f.e,7).d,new EP(b.d,b.b,b.a,b.c)).d);}}}
	function Ns(a,b,c,d,e){var f,g,h;f=b.$b(c,a.b);if(f<0){g=a.e;if(!g){e[0]=0;return d>0?As(a,c,d):a}a.e=Ns(g,b,c,d,e);d==0&&e[0]!=0?--a.a:d>0&&e[0]==0&&++a.a;a.j=PH(a.j,d-e[0]);return Gs(a)}else if(f>0){h=a.g;if(!h){e[0]=0;return d>0?Bs(a,c,d):a}a.g=Ns(h,b,c,d,e);d==0&&e[0]!=0?--a.a:d>0&&e[0]==0&&++a.a;a.j=PH(a.j,d-e[0]);return Gs(a)}e[0]=a.c;if(d==0){return Fs(a)}a.j=PH(a.j,d-a.c);a.c=d;return a}
	function Q7(a){var b,c,d,e,f,g,h;a.o=new Uvb;d=new aJ;for(g=new Tob(a.e.a);g.a<g.c.c.length;){f=Wv(Rob(g),61);m7(f).c.length==1&&(TI(d,f,d.c.b,d.c),true)}while(d.b!=0){f=Wv(d.b==0?null:(Bxb(d.b!=0),$I(d,d.a.a)),61);if(m7(f).c.length==0){continue}b=Wv(yU(m7(f),0),89);c=f.g.c.length>0;h=c7(b,f);c?p7(h.c,b):p7(h.g,b);m7(h).c.length==1&&(TI(d,h,d.c.b,d.c),true);e=new RJ(f,b);Tvb(a.o,e);BU(a.e.a,f)}}
	function Hs(a,b,c,d,e){var f,g,h;f=b.$b(c,a.b);if(f<0){g=a.e;if(!g){e[0]=0;return a}a.e=Hs(g,b,c,d,e);if(e[0]>0){if(d>=e[0]){--a.a;a.j=XH(a.j,e[0])}else{a.j=XH(a.j,d)}}return e[0]==0?a:Gs(a)}else if(f>0){h=a.g;if(!h){e[0]=0;return a}a.g=Hs(h,b,c,d,e);if(e[0]>0){if(d>=e[0]){--a.a;a.j=XH(a.j,e[0])}else{a.j=XH(a.j,d)}}return Gs(a)}e[0]=a.c;if(d>=a.c){return Fs(a)}else{a.c-=d;a.j=XH(a.j,d);return a}}
	function BQ(a,b,c){var d,e,f,g,h,i,j,k;for(i=new Tob(c.b);i.a<i.c.c.length;){h=Wv(Rob(i),9);g=Wv(rJ(h,(Rib(),sib)),55);if(g){k=BQ(a,b,g);h.j.a=(f=Wv(rJ(k,Xhb),15).a,new HI(k.e.a+k.a.b+k.a.c+2*f,k.e.b+k.a.d+k.a.a+2*f)).a;h.j.b=(e=Wv(rJ(k,Xhb),15).a,new HI(k.e.a+k.a.b+k.a.c+2*e,k.e.b+k.a.d+k.a.a+2*e)).b}}j=new sI;d=$v(rJ(c,(eM(),kL)));d!=null&&emb(d,'de.cau.cs.kieler.fixed')?JP(c,j):ZQ(b,c,j);return c}
	function bR(a){var b,c,d,e,f,g,h,i;h=Wv(rJ(a,(eM(),aM)),18);i=Wv(rJ(a,bM),18);d=Wv(rJ(a,(Rib(),Xhb)),15).a;a.d.a+=d;a.d.b+=d;a.e.a+=2*d;a.e.b+=2*d;sJ(a,Xhb,new llb(0));e=(c=Wv(rJ(a,Xhb),15).a,new HI(a.e.a+a.a.b+a.a.c+2*c,a.e.b+a.a.d+a.a.a+2*c));b=new II(e);if(h.kb((DN(),zN))){g=Wv(rJ(a,IL),15).a;f=Wv(rJ(a,HL),15).a;if(i.kb((MN(),KN))){g<=0&&(g=20);f<=0&&(f=20)}b.a=Nlb(e.a,g);b.b=Nlb(e.b,f)}cR(a,e,b)}
	function rV(a,b,c){var d,e,f,g,h,i,j,k;if(b.k==0){b.k=1;g=c;if(!c){e=new GU;f=(d=Wv(Hkb(Kz),11),new atb(d,Wv(exb(d,d.length),11),0));g=new RJ(e,f)}Wv(g.a,20).ib(b);b.g==(CX(),xX)&&Wv(g.b,18).ib(Wv(rJ(b,(Rib(),hib)),32));for(i=new Tob(b.f);i.a<i.c.c.length;){h=Wv(Rob(i),7);for(k=Uh(Sh((Gi(),new gr(Ti(Bv(tv(UF,1),syb,1,4,[new fY(h),new lY(h)]))))));Cm(k);){j=Wv(Dm(k),7);rV(a,j.f,g)}}return g}return null}
	function QW(a,b,c,d){var e,f,g,h,i;i=new II(b.i);i.a+=b.j.a/2;i.b+=b.j.b/2;h=Wv(rJ(b,(Rib(),tib)),15).a;f=a.e;g=a.a;e=a.d;switch(Wv(rJ(b,hib),32).e){case 1:i.a+=g.b+e.a-c/2;i.b=-d-h;b.i.b=-(g.d+h+e.b);break;case 2:i.a=f.a+g.b+g.c+h;i.b+=g.d+e.b-d/2;b.i.a=f.a+g.c+h-e.a;break;case 3:i.a+=g.b+e.a-c/2;i.b=f.b+g.d+g.a+h;b.i.b=f.b+g.a+h-e.b;break;case 4:i.a=-c-h;i.b+=g.d+e.b-d/2;b.i.a=-(g.b+h+e.a);}return i}
	function $Q(a,b){var c,d,e,f,g,h,i;for(f=new Tob(b.b);f.a<f.c.c.length;){e=Wv(Rob(f),9);g=rJ(e,(Rib(),uib));if(aw(g,7)){h=Wv(g,7);i=QW(b,e,h.j.a,h.j.b);h.i.a=i.a;h.i.b=i.b;QX(h,Wv(rJ(e,hib),32))}}c=(d=Wv(rJ(b,(Rib(),Xhb)),15).a,new HI(b.e.a+b.a.b+b.a.c+2*d,b.e.b+b.a.d+b.a.a+2*d));if(Wv(rJ(b,jib),18).kb((ohb(),hhb))){sJ(a,(eM(),TL),(KM(),FM));Wv(rJ(hX(a),jib),18).ib(khb);WW(a,c,false)}else{WW(a,c,true)}}
	function VW(a,b,c){var d,e,f,g,h;h=null;switch(b.e){case 1:for(e=new Tob(a.f);e.a<e.c.c.length;){d=Wv(Rob(e),7);if(Ckb(Ixb(Xv(rJ(d,(Rib(),kib)))))){return d}}h=new RX;sJ(h,(Rib(),kib),(xkb(),xkb(),wkb));break;case 2:for(g=new Tob(a.f);g.a<g.c.c.length;){f=Wv(Rob(g),7);if(Ckb(Ixb(Xv(rJ(f,(Rib(),yib)))))){return f}}h=new RX;sJ(h,(Rib(),yib),(xkb(),xkb(),wkb));}if(h){PX(h,a);QX(h,c);LW(h.i,a.j,c)}return h}
	function pk(a,b){var c,d,e,f,g,h,i;_b(b);Xb(a.a.t(b.a));d=a.b;f=a.e;g=a.d;if(a.b){if(b.b){c=a.a.$b(a.e,b.e);if(c<0||c==0&&b.d==(Gh(),Fh)){f=b.e;g=b.d}}}else{d=b.b;f=b.e;g=b.d}e=a.c;h=a.g;i=a.f;if(a.c){if(b.c){c=a.a.$b(a.g,b.g);if(c>0||c==0&&b.f==(Gh(),Fh)){h=b.g;i=b.f}}}else{e=b.c;h=b.g;i=b.f}if(d&&e){c=a.a.$b(f,h);if(c>0||c==0&&g==(Gh(),Fh)&&i==(Gh(),Fh)){f=h;g=(Gh(),Fh);i=Eh}}return new sk(a.a,d,f,g,e,h,i)}
	function h0(a,b,c,d){var e,f,g,h,i,j,k;if(c.c.f==b.f){return}e=new uX(a);sX(e,(CX(),zX));sJ(e,(Rib(),uib),c);sJ(e,(eM(),TL),(KM(),FM));d.c[d.c.length]=e;g=new RX;PX(g,e);QX(g,(sN(),rN));h=new RX;PX(h,e);QX(h,ZM);eW(c,g);f=new hW;qJ(f,c);sJ(f,CL,null);dW(f,h);eW(f,b);j0(e,g,h);j=new Fnb(c.b,0);while(j.b<j.d.Y()){i=(Bxb(j.b<j.d.Y()),Wv(j.d.sb(j.c=j.b++),33));k=Wv(rJ(i,tL),107);if(k==(EK(),BK)){vnb(j);vU(f.b,i)}}}
	function Pfb(a,b,c,d){var e,f,g,h,i,j,k,l,m,n,o,p,q;f=c+(b.n+1)*a.a;g=b.b;e=new HI(f,g);for(i=(k=(new Snb(b.c.a)).a.bb().mb(),new Ynb(k));i.a.G();){h=(j=Wv(i.a.H(),21),Wv(j.yb(),12));o=MX(h.d);l=MX(h.c);n=new HI(f,l.b);q=new HI(f,o.b);m=new HI(c-10,l.b);p=new HI(d,o.b);o.a>=d&&l.a>=d&&(m.a=d);o.a<=c&&l.a<=c&&(p.a=c-10);b.c.a.Y()==1?fJ(h.a,Bv(tv(qz,1),Fzb,10,0,[m,n,q,p])):fJ(h.a,Bv(tv(qz,1),Fzb,10,0,[m,n,e,q,p]))}}
	function cW(a,b){var c,d,e,f,g,h;f=a.c;g=a.d;dW(a,null);eW(a,null);b&&Ckb(Ixb(Xv(rJ(g,(Rib(),kib)))))?dW(a,VW(g.f,(djb(),bjb),(sN(),ZM))):dW(a,g);b&&Ckb(Ixb(Xv(rJ(f,(Rib(),yib)))))?eW(a,VW(f.f,(djb(),ajb),(sN(),rN))):eW(a,f);for(d=new Tob(a.b);d.a<d.c.c.length;){c=Wv(Rob(d),33);e=Wv(rJ(c,(eM(),tL)),107);e==(EK(),CK)?sJ(c,tL,BK):e==BK&&sJ(c,tL,CK)}h=Ckb(Ixb(Xv(rJ(a,(Rib(),Iib)))));sJ(a,Iib,(xkb(),h?vkb:wkb));a.a=lJ(a.a)}
	function efb(a){var b,c,d,e,f,g;Teb(this);for(c=a.Y()-1;c<3;c++){a.rb(0,Wv(a.sb(0),10))}if(a.Y()<4){throw new slb('At (least dimension + 1) control points are necessary!')}else{this.c=3;this.e=true;this.f=true;this.d=false;Ueb(this,a.Y()+this.c-1);g=new GU;f=this.g.mb();for(b=0;b<this.c-1;b++){vU(g,Yv(f.H()))}for(e=a.mb();e.G();){d=Wv(e.H(),10);vU(g,Yv(f.H()));this.b.ib(new sfb(d,g));Cxb(0,g.c.length);g.c.splice(0,1)}}}
	function scb(a){var b,c,d,e,f,g,h,i,j,k,l;l=new rcb;l.d=0;for(g=new Tob(a.c);g.a<g.c.c.length;){f=Wv(Rob(g),16);l.d+=f.a.c.length}d=0;e=0;l.a=xv(mw,Yyb,26,a.c.c.length,12,1);j=0;l.e=xv(mw,Yyb,26,l.d,12,1);for(c=new Tob(a.c);c.a<c.c.c.length;){b=Wv(Rob(c),16);b.k=d++;l.a[b.k]=e++;k=0;for(i=new Tob(b.a);i.a<i.c.c.length;){h=Wv(Rob(i),9);h.k=j++;l.e[h.k]=k++}}l.c=new wcb(l);l.b=Do(l.d);tcb(l,a);l.f=Do(l.d);ucb(l,a);return l}
	function Lab(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o,p;h=xv(mw,Yyb,26,b.c.c.length,12,1);j=xv(pB,uyb,132,b.c.c.length,0,1);for(l=a.a,m=0,n=l.length;m<n;++m){k=l[m];p=0;for(g=new Tob(k.f);g.a<g.c.c.length;){e=Wv(Rob(g),9);i=e.g;d=rY(e.d);++h[d];o=a.b.a*a.b.d;h[d]>0&&!!j[d]&&(o=Wjb(a.b,j[d],i));p=Nlb(p,e.d.c.b+o)}for(f=new Tob(k.f);f.a<f.c.c.length;){e=Wv(Rob(f),9);e.i.b=p+e.e.d;c=e.d;c.c.b=p+e.e.d+e.j.b+e.e.a;j[zU(c.b.c,c,0)]=e.g}}}
	function n$(a){var b,c,d,e,f,g,h,i,j,k;for(i=new Tob(a.a);i.a<i.c.c.length;){h=Wv(Rob(i),9);if(h.g!=(CX(),xX)){continue}e=Wv(rJ(h,(Rib(),hib)),32);if(e==(sN(),ZM)||e==rN){for(d=Uh(gX(h));Cm(d);){c=Wv(Dm(d),12);b=c.a;if(b.b==0){continue}j=c.c;if(j.f==h){f=(Bxb(b.b!=0),Wv(b.a.a.c,10));f.b=MI(Bv(tv(qz,1),Fzb,10,0,[j.f.i,j.i,j.a])).b}k=c.d;if(k.f==h){g=(Bxb(b.b!=0),Wv(b.c.b.c,10));g.b=MI(Bv(tv(qz,1),Fzb,10,0,[k.f.i,k.i,k.a])).b}}}}}
	function U9(a,b,c,d){var e,f,g,h,i,j;g=new _9(a,b,c);i=new Fnb(d,0);e=false;while(i.b<i.d.Y()){h=(Bxb(i.b<i.d.Y()),Wv(i.d.sb(i.c=i.b++),102));if(h==b||h==c){vnb(i)}else if(!e&&Ixb(W9(h.g,h.d[0]).a)>Ixb(W9(g.g,g.d[0]).a)){Bxb(i.b>0);i.a.sb(i.c=--i.b);Anb(i,g);e=true}else if(!!h.e&&h.e.Y()>0){f=(!h.e&&(h.e=new GU),h.e).nb(b);j=(!h.e&&(h.e=new GU),h.e).nb(c);if(f||j){(!h.e&&(h.e=new GU),h.e).ib(g);++g.c}}}e||(d.c[d.c.length]=g,true)}
	function s2(a,b,c,d){var e,f,g,h,i,j,k,l,m,n,o;if(c.d.f==b.f){return}e=new uX(a);sX(e,(CX(),zX));sJ(e,(Rib(),uib),c);sJ(e,(eM(),TL),(KM(),FM));d.c[d.c.length]=e;g=new RX;PX(g,e);QX(g,(sN(),rN));h=new RX;PX(h,e);QX(h,ZM);i=c.d;eW(c,g);f=new hW;qJ(f,c);sJ(f,CL,null);dW(f,h);eW(f,i);j=Wv(yU(g.b,0),12).c;k=j.f;l=k.g;m=Wv(yU(h.e,0),12).d;n=m.f;o=n.g;l==zX?sJ(e,qib,Wv(rJ(k,qib),7)):sJ(e,qib,j);o==zX?sJ(e,rib,Wv(rJ(n,rib),7)):sJ(e,rib,m)}
	function $6(a,b,c){var d,e,f,g,h,i,j,k,l,m,n,o,p,q,r;if(h=a.b[b],i=a.b[c],(j=Wv(rJ(h,(Rib(),oib)),20),!!j&&j.Y()!=0&&j.kb(i))||(k=h.g!=(CX(),zX)&&i.g!=zX,l=Wv(rJ(h,nib),9),m=Wv(rJ(i,nib),9),n=!!l&&l!=h||!!m&&m!=i,o=l!=m,p=_6(h,(sN(),$M)),q=_6(i,pN),r=n&&o||p||q,k&&r)||h.g==(CX(),BX)&&i.g==AX||i.g==(CX(),BX)&&h.g==AX){return false}g=a.b[b];d=a.b[c];m6(a.c,g,d);G6(a.d,g,d);f=M5(a.a,g,d)+a.c.d+a.d.d;e=M5(a.a,d,g)+a.c.b+a.d.b;return f>e}
	function v2(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o,p;g=b;m=b.d;k=b.c.f;n=b.d.f;l=rY(k.d);o=rY(n.d);for(h=l;h<o;h++){e=new uX(a);sX(e,(CX(),zX));sJ(e,(Rib(),uib),g);sJ(e,(eM(),TL),(KM(),FM));i=Wv(yU(a.c,h+1),16);rX(e,i);p=Wv(rJ(g,dM),15).a;if(p<0){p=0;sJ(g,dM,new llb(p))}e.j.b=p;j=Math.floor(p/2);d=new RX;QX(d,(sN(),rN));PX(d,e);d.i.b=j;f=new RX;QX(f,ZM);PX(f,e);f.i.b=j;eW(g,d);c=new hW;qJ(c,g);sJ(c,CL,null);dW(c,f);eW(c,m);w2(e,g,c);g=c}}
	function Qeb(a,b){Ieb();if(a==b){return Reb(a)}switch(a.e){case 1:switch(b.e){case 4:return neb;case 1:return meb;case 2:return jeb;case 3:return qeb;}case 2:switch(b.e){case 1:return jeb;case 2:return ieb;case 3:return peb;case 4:return keb;}case 3:switch(b.e){case 2:return peb;case 3:return oeb;case 4:return Heb;case 1:return qeb;}case 4:switch(b.e){case 3:return Heb;case 4:return Geb;case 1:return neb;case 2:return keb;}}return Feb}
	function s$(a){var b,c,d,e,f,g,h,i,j,k,l,m,n,o,p;l=new Wub;e=null;for(g=new Tob(a.c);g.a<g.c.c.length;){f=Wv(Rob(g),16);for(i=new Tob(f.a);i.a<i.c.c.length;){h=Wv(Rob(i),9);if(h.g!=(CX(),xX)){continue}k=Wv(rJ(h,(Rib(),gib)),9);if(k){r$(k,l);m=new RX;PX(m,h);n=Wv(rJ(h,hib),32);QX(m,n);o=Wv(yU(k.f,0),7);p=new hW;dW(p,m);eW(p,o)}}e=f}for(c=(j=(new Snb(l.a)).a.bb().mb(),new Ynb(j));c.a.G();){b=(d=Wv(c.a.H(),21),Wv(d.yb(),9));rX(b,e)}return l}
	function RV(a,b,c){var d,e,f,g,h,i,j,k,l;e=new GU;for(j=new Tob(b.b);j.a<j.c.c.length;){i=Wv(Rob(j),9);h=Wv(rJ(i,(Rib(),sib)),55);if(h){d=RV(a,h,i);xU(e,d);PV(a,h,i);if(Wv(rJ(h,jib),18).kb((ohb(),hhb))){for(l=new Tob(i.f);l.a<l.c.c.length;){k=Wv(Rob(l),7);if(Smb(a.b,k)==null){f=NW(k,(KM(),IM),k.g,-(k.b.c.length-k.e.c.length),k.j,Wv(rJ(h,(eM(),sL)),59),h);sJ(f,uib,k);Umb(a.b,k,f);vU(h.b,f)}}}}}g=new GU;OV(a,b,c,e,g);!!c&&QV(a,b,c,g);return g}
	function Obb(a){var b,c,d,e,f,g,h,i,j,k,l,m;b=ecb(a);for(k=(h=(new Snb(b)).a.bb().mb(),new Ynb(h));k.a.G();){j=(e=Wv(k.a.H(),21),Wv(e.yb(),9));l=j.e.d;m=j.j.b+j.e.a;a.d[j.k]=0;c=j;while((f=a.a[c.k])!=j){d=gcb(c,f);a.c==(Gbb(),Ebb)?(i=d.d.i.b+d.d.a.b-d.c.i.b-d.c.a.b):(i=d.c.i.b+d.c.a.b-d.d.i.b-d.d.a.b);g=Ixb(a.d[c.k])+i;a.d[f.k]=g;l=Nlb(l,f.e.d-g);m=Nlb(m,g+f.j.b+f.e.a);c=f}c=j;do{a.d[c.k]=Ixb(a.d[c.k])+l;c=a.a[c.k]}while(c!=j);a.b[j.k]=l+m}}
	function Gcb(a,b,c){var d,e,f,g,h,i,j,k;d=a.a.k==(Lbb(),Kbb)?Uzb:Vzb;h=Hcb(a,new Fcb(b,c));if(!h.a&&h.c){QI(a.d,h);return d}else if(h.a){e=h.a.c;i=h.a.d;if(c){j=a.a.c==(Gbb(),Fbb)?i:e;f=a.a.c==Fbb?e:i;g=a.a.f[f.f.k];k=Ixb(a.a.n[g.k])+Ixb(a.a.d[f.f.k])+f.i.b+f.a.b-Ixb(a.a.d[j.f.k])-j.i.b-j.a.b}else{j=a.a.c==(Gbb(),Ebb)?i:e;f=a.a.c==Ebb?e:i;k=Ixb(a.a.n[a.a.f[f.f.k].k])+Ixb(a.a.d[f.f.k])+f.i.b+f.a.b-Ixb(a.a.d[j.f.k])-j.i.b-j.a.b}return k}return d}
	function FY(a){var b,c,d,e,f;sJ(a.g,(Rib(),Thb),Eo(a.g.c));for(b=1;b<a.c.c.length-1;++b){sJ(Wv(yU(a.c,b),9),(eM(),JL),(oM(),Vsb(jM,Bv(tv(Gz,1),uyb,41,0,[mM,fM]))))}for(d=WI(Eo(a.g.c),0);d.b!=d.d.c;){c=Wv(_ub(d),33);e=Wv(rJ(a.g,(eM(),JL)),86);if(Xe(e,Vsb((oM(),kM),Bv(tv(Gz,1),uyb,41,0,[gM,mM]))));else if(Xe(e,Vsb(kM,Bv(tv(Gz,1),uyb,41,0,[iM,mM])))){vU(a.e.c,c);BU(a.g.c,c);f=new MY(a,c);sJ(a.g,Uhb,f)}else{GY(a,c);vU(a.i,a.d);sJ(a.g,Uhb,EY(a.i))}}}
	function OW(a,b,c,d){var e,f,g,h,i,j,k;f=PW(d);h=Ckb(Ixb(Xv(rJ(d,(Mjb(),xjb)))));if((h||Ckb(Ixb(Xv(rJ(a,(eM(),AL))))))&&!MM(Wv(rJ(a,(eM(),TL)),28))){e=vN(f);i=VW(a,c,c==(djb(),bjb)?e:tN(e))}else{i=new RX;PX(i,a);k=i.i;k.a=b.a-a.i.a;k.b=b.b-a.i.b;wI(k,a.j.a,a.j.b);QX(i,KW(i,f));g=Wv(rJ(d,(Rib(),jib)),18);j=i.g;switch(f.e){case 2:case 1:(j==(sN(),$M)||j==pN)&&g.ib((ohb(),lhb));break;case 4:case 3:(j==(sN(),ZM)||j==rN)&&g.ib((ohb(),lhb));}}return i}
	function G2(a){var b,c,d,e,f,g,h,i;d=Nl(Ao(a.a));e=(b=Wv(Hkb(_E),11),new atb(b,Wv(exb(b,b.length),11),0));while(d.a.G()||d.b.mb().G()){c=Wv(nm(d),12);h=c.c.g;i=c.d.g;if(h==(sN(),qN)){if(i!=qN){g=Reb(i);sJ(c,(Rib(),Mib),g);QX(c.c,i);Wsb(e,g);d.a.I()}}else{if(i==qN){g=Reb(h);sJ(c,(Rib(),Mib),g);QX(c.d,h);Wsb(e,g);d.a.I()}else{g=Qeb(h,i);sJ(c,(Rib(),Mib),g);Wsb(e,g);d.a.I()}}}e.c==1?(f=Wv(itb(new jtb(e)),60)):(f=(Ieb(),Feb));aeb(a,f,false);return f}
	function AI(b,c){var d,e,f,g;f=0;while(f<(bmb(),c.length)&&LI(c.charCodeAt(f),fzb)){++f}d=c.length;while(d>0&&LI(c.charCodeAt(d-1),gzb)){--d}if(f>=d){throw new slb('The given string does not contain any numbers.')}g=fmb(c.substr(f,d-f),',|;|\r|\n');if(g.length!=2){throw new slb('Exactly two numbers are expected, '+g.length+' were found.')}try{b.a=clb(hmb(g[0]));b.b=clb(hmb(g[1]))}catch(a){a=OH(a);if(aw(a,130)){e=a;throw new slb(hzb+e)}else throw NH(a)}}
	function Qdb(a,b,c){var d,e,f,g,h,i,j,k,l;i=c+b.d.c.a;for(l=new Tob(b.f);l.a<l.c.c.length;){k=Wv(Rob(l),7);d=MI(Bv(tv(qz,1),Fzb,10,0,[k.f.i,k.i,k.a]));f=new HI(0,d.b);if(k.g==(sN(),ZM)){f.a=i}else if(k.g==rN){f.a=c}else{continue}if(d.a==f.a){continue}e=k.e.c.length+k.b.c.length>1;for(h=Uh(Sh((Gi(),new gr(Ti(Bv(tv(UF,1),syb,1,4,[k.b,k.e]))))));Cm(h);){g=Wv(Dm(h),12);j=g.c==k?g.d:g.c;Jlb(MI(Bv(tv(qz,1),Fzb,10,0,[j.f.i,j.i,j.a])).b-f.b)>1&&Odb(a,g,f,e,k)}}}
	function FR(a,b){var c,d,e,f,g,h;for(g=new rnb((new inb(a.f.b)).a);g.b;){f=pnb(g);e=Wv(f.yb(),251);if(b==1){if(e.yc()!=(sK(),rK)&&e.yc()!=nK){continue}}else{if(e.yc()!=(sK(),oK)&&e.yc()!=pK){continue}}d=Wv(Wv(f.zb(),27).b,25);h=Wv(Wv(f.zb(),27).a,78);c=h.c;switch(e.yc().e){case 2:d.j.d=a.e.a;d.j.c=Nlb(1,d.j.c+c);break;case 1:d.j.d=d.j.d+c;d.j.c=Nlb(1,d.j.c-c);break;case 4:d.j.e=a.e.b;d.j.b=Nlb(1,d.j.b+c);break;case 3:d.j.e=d.j.e+c;d.j.b=Nlb(1,d.j.b-c);}}}
	function bdb(a,b,c,d,e){var f,g,h,i,j,k,l,m,n;m=(mp(),new ntb);h=new GU;adb(a,c,a.d.Mc(),h,m);adb(a,d,a.d.Nc(),h,m);i=new Fnb(h,0);while(i.b<i.d.Y()){f=(Bxb(i.b<i.d.Y()),Wv(i.d.sb(i.c=i.b++),80));j=new Fnb(h,i.b);while(j.b<j.d.Y()){g=(Bxb(j.b<j.d.Y()),Wv(j.d.sb(j.c=j.b++),80));gdb(f,g,a.a)}}ddb(h,Wv(rJ(b,(Rib(),Gib)),154));idb(h);n=-1;for(l=new Tob(h);l.a<l.c.c.length;){k=Wv(Rob(l),80);if(Jlb(k.k-k.a)<dAb){continue}n=Plb(n,k.i);a.d.Kc(k,e)}a.b.a.Q();return n+1}
	function r3(a,b,c){var d,e;e=new II(b);d=new II(a.j);switch(c.e){case 1:case 8:case 7:uI(e,-d.a/2,-d.b);uI(b,0,-(0.5+d.b));break;case 3:case 4:case 5:uI(e,-d.a/2,0);uI(b,0,0.5+d.b);break;case 0:uI(e,-d.a/2,-d.b);uI(b,0,-(0.5+-d.b));break;case 10:case 2:uI(e,0,-d.b/2);uI(b,0,-(0.5+d.b));break;case 6:uI(e,-d.a,d.b/2);uI(b,0,-(0.5+d.b));break;case 9:uI(e,-d.a/2,0);uI(b,0,-(0.5+d.b));break;case 11:uI(e,-d.a,-d.b/2);uI(b,0,-(0.5+d.b));}vI(BI(a.i),e);return new Cfb(a)}
	function Gmb(a,b,c,d,e){Fmb();var f,g,h,i,j,k,l;Exb(a,'src');Exb(c,'dest');k=tb(a);h=tb(c);Axb((k.g&4)!=0,'srcType is not an array');Axb((h.g&4)!=0,'destType is not an array');j=k.c;f=h.c;Axb((j.g&1)!=0?j==f:(f.g&1)==0,"Array types don't match");l=a.length;i=c.length;if(b<0||d<0||e<0||b+e>l||d+e>i){throw new nkb}if(((j.g&1)==0||(j.g&4)!=0)&&k!=h){if(a===c&&b<d){b+=e;for(g=d+e;g-->d;){c[g]=a[--b]}}else{for(g=d+e;d<g;){c[d++]=a[b++]}}}else e>0&&dxb(a,b,c,d,e,true)}
	function cR(a,b,c){var d,e,f,g,h;d=Wv(rJ(a,(Mjb(),jjb)),18);c.a>b.a&&(d.kb((zgb(),tgb))?(a.d.a+=(c.a-b.a)/2):d.kb(vgb)&&(a.d.a+=c.a-b.a));c.b>b.b&&(d.kb((zgb(),xgb))?(a.d.b+=(c.b-b.b)/2):d.kb(wgb)&&(a.d.b+=c.b-b.b));if(Wv(rJ(a,(Rib(),jib)),18).kb((ohb(),hhb))&&(c.a>b.a||c.b>b.b)){for(h=new Tob(a.b);h.a<h.c.c.length;){g=Wv(Rob(h),9);if(g.g==(CX(),xX)){e=Wv(rJ(g,hib),32);e==(sN(),ZM)?(g.i.a+=c.a-b.a):e==pN&&(g.i.b+=c.b-b.b)}}}f=a.a;a.e.a=c.a-f.b-f.c;a.e.b=c.b-f.d-f.a}
	function Ms(a,b,c,d,e,f){var g,h,i;g=b.$b(c,a.b);if(g<0){h=a.e;if(!h){f[0]=0;if(d==0&&e>0){return As(a,c,e)}return a}a.e=Ms(h,b,c,d,e,f);if(f[0]==d){e==0&&f[0]!=0?--a.a:e>0&&f[0]==0&&++a.a;a.j=PH(a.j,e-f[0])}return Gs(a)}else if(g>0){i=a.g;if(!i){f[0]=0;if(d==0&&e>0){return Bs(a,c,e)}return a}a.g=Ms(i,b,c,d,e,f);if(f[0]==d){e==0&&f[0]!=0?--a.a:e>0&&f[0]==0&&++a.a;a.j=PH(a.j,e-f[0])}return Gs(a)}f[0]=a.c;if(d==a.c){if(e==0){return Fs(a)}a.j=PH(a.j,e-a.c);a.c=e}return a}
	function gfb(a){var b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q;i=a.e;n=a.f;g=a.d;o=a.c;k=o-1;p=a.g;l=Eo(a.g.xb(1,a.g.Y()-1));j=new GU;for(c=0;c<a.b.Y()-1;c++){h=CI(EI(xI(Wv(a.b.sb(c+1),92).a),Wv(a.b.sb(c),92).a),o/(Ixb(Yv(p.sb(c+o)))-Ixb(Yv(p.sb(c)))));j.c[j.c.length]=h}q=new GU;f=WI(l,0);m=new GU;for(b=0;b<k-1;b++){vU(q,Yv(_ub(f)))}for(e=new Tob(j);e.a<e.c.c.length;){d=Wv(Rob(e),10);vU(q,Yv(_ub(f)));vU(m,new sfb(d,q));Cxb(0,q.c.length);q.c.splice(0,1)}return new ffb(i,n,g,k,l,m)}
	function fP(a){this.q=new AP;this.p=new AP;this.o=xv(mw,Yyb,26,(sN(),Bv(tv(Kz,1),uyb,32,0,[qN,$M,ZM,pN,rN])).length,12,1);this.i=xv(mw,Yyb,26,Bv(tv(Kz,1),uyb,32,0,[qN,$M,ZM,pN,rN]).length,12,1);this.j=xv(kw,hyb,26,Bv(tv(Kz,1),uyb,32,0,[qN,$M,ZM,pN,rN]).length,12,1);this.n=xv(kw,hyb,26,Bv(tv(Kz,1),uyb,32,0,[qN,$M,ZM,pN,rN]).length,12,1);this.g=xv(Hz,uyb,100,Bv(tv(Kz,1),uyb,32,0,[qN,$M,ZM,pN,rN]).length,0,1);this.c=new vsb(Oz);this.e=a;$ob(this.o);$ob(this.i);Yob(this.n,0)}
	function _Q(a,b){var c,d,e,f,g,h,i,j,k,l;g=b.i!=null&&!b.b;g||nI(b,'Component Layout',1);c=Wv(rJ(a,(Rib(),Fib)),20);f=1/c.Y();if(Ckb(Ixb(Xv(rJ(a,(eM(),rL)))))){l=0;for(k=c.mb();k.G();){j=Wv(k.H(),31);++l;Jkb(tb(j));j.sc(a,rI(b,f))}}else{for(k=c.mb();k.G();){j=Wv(k.H(),31);j.sc(a,rI(b,f))}}for(e=new Tob(a.c);e.a<e.c.c.length;){d=Wv(Rob(e),16);xU(a.b,d.a);d.a.c=xv(UF,syb,1,0,4,1)}for(i=new Tob(a.b);i.a<i.c.c.length;){h=Wv(Rob(i),9);rX(h,null)}a.c.c=xv(UF,syb,1,0,4,1);g||pI(b)}
	function S9(a,b){var c,d,e,f,g,h,i,j,k,l,m;for(g=new Tob(b);g.a<g.c.c.length;){e=Wv(Rob(g),102);e.e=null;e.c=0}h=null;for(f=new Tob(b);f.a<f.c.c.length;){e=Wv(Rob(f),102);k=e.d[0];for(m=Wv(rJ(k,(Rib(),oib)),20).mb();m.G();){l=Wv(m.H(),9);(!e.e&&(e.e=new GU),e.e).ib(a.b[l.d.k][l.k]);++a.b[l.d.k][l.k].c}if(k.g==(CX(),AX)){if(h){for(j=An(new Bn(a.c,h),0);j.c;){i=Wv(ko(j),9);for(d=An(new Bn(a.c,k),0);d.c;){c=Wv(ko(d),9);Y9(a.b[i.d.k][i.k]).ib(a.b[c.d.k][c.k]);++a.b[c.d.k][c.k].c}}}h=k}}}
	function gQ(a,b,c,d){var e,f,g,h,i,j;SP(b);f=Wv(rJ(d,(Rib(),jib)),18);h=(eM(),KL).b;if(h in b.a&&Pu(b,h).ic().a){return}i=new RX;sJ(i,uib,b);PX(i,c);g=Wv(Pu(b,'id'),97);Vmb(a.k,g.a,i);Umb(a.n,i,b);_P(b,i);hQ(b,i);dQ(a,b,i,d);QX(i,Wv(rJ(i,WL),32));j=Wv(rJ(c,TL),28);j==(KM(),JM)&&(j=IM);e=Wv(rJ(d,sL),59);e==(sK(),qK)&&(e=pK);RW(i,j,e,Wv(rJ(i,SL),10));switch(e.e){case 2:case 1:(i.g==(sN(),$M)||i.g==pN)&&f.ib((ohb(),lhb));break;case 4:case 3:(i.g==(sN(),ZM)||i.g==rN)&&f.ib((ohb(),lhb));}}
	function Q5(a,b){var c,d,e,f,g,h,i,j;a.f=b;e=b.c.c.length;a.a=xv(qB,Txb,51,e,0,2);a.d=xv(qB,Txb,51,e,0,2);a.g=xv(qB,Txb,51,e,0,2);g=new Fnb(b.c,0);while(g.b<g.d.Y()){d=(Bxb(g.b<g.d.Y()),Wv(g.d.sb(g.c=g.b++),16));h=d.a.c.length;f=g.b-1;a.a[f]=xv(qB,Nzb,9,h,0,1);a.d[f]=xv(qB,Nzb,9,h,0,1);a.g[f]=xv(qB,Nzb,9,h,0,1);j=new Fnb(d.a,0);c=0;while(j.b<j.d.Y()){i=(Bxb(j.b<j.d.Y()),Wv(j.d.sb(j.c=j.b++),9));i.k=c++;a.d[f][j.b-1]=i;a.a[f][j.b-1]=i;a.g[f][j.b-1]=i}}a.b=new _4(a.d);a.e.c&&(a.b.e=true)}
	function gZ(a){var b,c,d,e,f,g;e=new GU;for(g=new Tob(a.c.f);g.a<g.c.c.length;){f=Wv(Rob(g),7);f.g==(sN(),ZM)&&(e.c[e.c.length]=f,true)}if(a.d.a==(sK(),pK)&&!MM(Wv(rJ(a.c,(eM(),TL)),28))){for(d=Uh(mX(a.c));Cm(d);){c=Wv(Dm(d),12);vU(e,c.c)}}sJ(a.c,(Rib(),Whb),new llb(a.c.j.a));sJ(a.c,Vhb,(xkb(),xkb(),wkb));vU(a.b,a.c);b=null;a.e==1?(b=jZ(a,a.c,rY(a.c.d),a.c.j.a)):a.e==0?(b=iZ(a,a.c,rY(a.c.d),a.c.j.a)):a.e==3?(b=kZ(a,a.c,a.c.j.a)):a.e==2&&(b=hZ(a,a.c,a.c.j.a));!!b&&new HY(a.c,a.b,Ixb(Yv(b.b)))}
	function Mab(a,b,c){var d,e,f,g,h,i,j,k;e=b.g;Ckb(Ixb(Xv(rJ(b,(Rib(),Vhb)))))&&(e=(CX(),wX));if(b.k>=0){return false}else if(!!c.e&&e==(CX(),wX)&&e!=c.e){return false}else{b.k=c.b;vU(c.f,b)}c.e=e;if(e==(CX(),zX)||e==BX||e==wX){for(g=new Tob(b.f);g.a<g.c.c.length;){f=Wv(Rob(g),7);for(k=(d=new Tob((new lY(f)).a.e),new nY(d));Qob(k.a);){j=Wv(Rob(k.a),12).d;h=j.f;i=h.g;if(b.d!=h.d){if(e==wX){if(i==wX){if(Mab(a,h,c)){return true}}}else{if(i==zX||i==BX){if(Mab(a,h,c)){return true}}}}}}}return true}
	function K3(a,b){var c,d,e,f,g,h,i,j,k;fJ(a.a,Bv(tv(qz,1),Fzb,10,0,[b.a,b.b]));Ue(a.c,b.e);a.q.d=a.q.d|b.d;a.q.a=a.q.a|b.c;h=Qlb(a.j.e,b.k);i=Nlb(a.j.e+a.j.b,b.n);SN(a.j,b.j,h,0,i-h);stb(a.d,b.f);b.f.c.f==b.f.d.f&&wS(a.n,true,true,true,true);g=new vtb;j=new vtb;for(e=(k=(new Snb(a.d.a)).a.bb().mb(),new Ynb(k));e.a.G();){d=(f=Wv(e.a.H(),21),Wv(f.yb(),12));stb(g,d.c);stb(j,d.d)}c=g.a.Y()-j.a.Y();if(c<0){vS(a.n,true,(sK(),oK));vS(a.n,false,pK)}else if(c>0){vS(a.n,false,(sK(),oK));vS(a.n,true,pK)}}
	function tP(b,c){var d,e,f,g,h,i,j,k,l,m;h=0;while(h<(bmb(),c.length)&&yP(c.charCodeAt(h),fzb)){++h}d=c.length;while(d>0&&yP(c.charCodeAt(d-1),gzb)){--d}if(h<d){l=fmb(c.substr(h,d-h),',|;');try{for(j=0,k=l.length;j<k;++j){i=l[j];g=fmb(i,'=');if(g.length!=2){throw new slb('Expecting a list of key-value pairs.')}f=hmb(g[0]);m=clb(hmb(g[1]));emb(f,'top')?(b.d=m):emb(f,'left')?(b.b=m):emb(f,Azb)?(b.a=m):emb(f,'right')&&(b.c=m)}}catch(a){a=OH(a);if(aw(a,130)){e=a;throw new slb(hzb+e)}else throw NH(a)}}}
	function Ubb(a,b){var c,d,e,f,g,h,i,j,k;k=new aJ;for(h=(j=(new aob(a.c)).a.bb().mb(),new fob(j));h.a.G();){f=(e=Wv(h.a.H(),21),Wv(e.zb(),200));f.b==0&&(TI(k,f,k.c.b,k.c),true)}while(k.b!=0){f=Wv(k.b==0?null:(Bxb(k.b!=0),$I(k,k.a.a)),200);for(d=new Tob(f.d);d.a<d.c.c.length;){c=Wv(Rob(d),279);b.k==(Lbb(),Jbb)?(c.b.a=Qlb(c.b.a,f.a+c.a)):(c.b.a=Nlb(c.b.a,f.a+c.a));--c.b.b;c.b.b==0&&QI(k,c.b)}}for(g=(i=(new aob(a.c)).a.bb().mb(),new fob(i));g.a.G();){f=(e=Wv(g.a.H(),21),Wv(e.zb(),200));b.g[f.c.k]=f.a}}
	function yZ(a,b,c){var d,e,f,g;f=a.i;e=MI(Bv(tv(qz,1),Fzb,10,0,[b.i,b.f.i]));d=MI(Bv(tv(qz,1),Fzb,10,0,[b.f.i,b.i,b.a]));g=b.d;switch(b.g.e){case 4:f.a=Qlb(e.a,d.a)-g.b-a.j.a-c;f.b=MI(Bv(tv(qz,1),Fzb,10,0,[b.f.i,b.i,b.a])).b+c;break;case 2:f.a=Nlb(e.a+b.j.a,d.a)+g.c+c;f.b=MI(Bv(tv(qz,1),Fzb,10,0,[b.f.i,b.i,b.a])).b+c;break;case 1:f.a=MI(Bv(tv(qz,1),Fzb,10,0,[b.f.i,b.i,b.a])).a+c;f.b=Qlb(e.b,d.b)-g.d-a.j.b-c;break;case 3:f.a=MI(Bv(tv(qz,1),Fzb,10,0,[b.f.i,b.i,b.a])).a+c;f.b=Nlb(e.b+b.j.b,d.b)+g.a+c;}}
	function zZ(a,b,c){var d,e,f,g;f=a.i;e=MI(Bv(tv(qz,1),Fzb,10,0,[b.i,b.f.i]));d=MI(Bv(tv(qz,1),Fzb,10,0,[b.f.i,b.i,b.a]));g=b.d;switch(b.g.e){case 4:f.a=Qlb(e.a,d.a)-g.b-a.j.a-c;f.b=MI(Bv(tv(qz,1),Fzb,10,0,[b.f.i,b.i,b.a])).b-a.j.b-c;break;case 2:f.a=Nlb(e.a+b.j.a,d.a)+g.c+c;f.b=MI(Bv(tv(qz,1),Fzb,10,0,[b.f.i,b.i,b.a])).b-a.j.b-c;break;case 1:f.a=MI(Bv(tv(qz,1),Fzb,10,0,[b.f.i,b.i,b.a])).a+c;f.b=Qlb(e.b,d.b)-g.d-a.j.b-c;break;case 3:f.a=MI(Bv(tv(qz,1),Fzb,10,0,[b.f.i,b.i,b.a])).a+c;f.b=Nlb(e.b+b.j.b,d.b)+g.a+c;}}
	function MQ(a){var b,c;c=Wv(rJ(a,(Rib(),jib)),18);b=XQ(HQ);Ckb(Ixb(Xv(rJ(a,(Mjb(),rjb)))))?RQ(b,(d0(),W_)):TQ(b,(d0(),W_));rJ(a,(bK(),aK))!=null&&QQ(b,IQ);switch(Wv(rJ(a,(eM(),sL)),59).e){case 2:PQ(RQ(b,(d0(),L_)),K_);break;case 3:PQ(RQ(b,(d0(),o_)),n_);break;case 4:PQ(RQ(b,(d0(),c0)),b0);}c.kb((ohb(),fhb))&&PQ(RQ(b,(d0(),m_)),l_);gw(rJ(a,Bjb))!==gw((I1(),G1))&&TQ(b,(d0(),P_));gw(rJ(a,Fjb))!==gw((g4(),e4))&&gw(rJ(a,eib))===gw((NK(),JK))&&PQ(b,(d0(),w_));if(c.kb(mhb)){RQ(b,(d0(),T_));TQ(b,S_)}return b}
	function zhb(){zhb=iI;shb=new Ahb('ONE_SIDED',0,true,false,false);whb=new Ahb('TWO_SIDED',1,false,false,false);thb=new Ahb('ONE_SIDED_BEST_OF_UP_OR_DOWN',2,true,true,false);xhb=new Ahb('TWO_SIDED_BEST_OF_UP_OR_DOWN',3,false,true,false);uhb=new Ahb('ONE_SIDED_BEST_OF_UP_OR_DOWN_ORTHOGONAL_HYPEREDGES',4,true,true,true);yhb=new Ahb('TWO_SIDED_BEST_OF_UP_OR_DOWN_ORTHOGONAL_HYPEREDGES',5,false,true,true);vhb=new Ahb('ONE_SIDED_ORTHOGONAL_HYPEREDGES',6,true,false,true);rhb=new Ahb('OFF',7,false,false,false)}
	function LV(a,b,c,d,e,f,g){var h,i,j,k,l,m,n;l=Ckb(Ixb(Xv(rJ(b,(Mjb(),yjb)))));m=null;f==(djb(),ajb)&&d.c.f==c?(m=d.c):f==bjb&&d.d.f==c&&(m=d.d);j=g;if(!g||!l||!!m){k=(sN(),qN);m?(k=m.g):MM(Wv(rJ(c,(eM(),TL)),28))&&(k=f==ajb?rN:ZM);i=JV(a,b,c,f,k,d);h=IV((hX(c),d));if(f==ajb){dW(h,Wv(yU(i.f,0),7));eW(h,e)}else{dW(h,e);eW(h,Wv(yU(i.f,0),7))}j=new UV(d,h,i,Wv(rJ(i,(Rib(),uib)),7),f,!m)}else{vU(g.e,d);n=Olb(Wv(rJ(g.d,(eM(),dM)),15).a,Wv(rJ(d,dM),15).a);sJ(g.d,dM,new llb(n))}Fd(a.a,d,new XV(j.d,b,f));return j}
	function T1(a,b,c,d){var e,f,g,h,i,j,k,l;f=new uX(a);sX(f,(CX(),BX));sJ(f,(eM(),TL),(KM(),FM));e=0;if(b){g=new RX;sJ(g,(Rib(),uib),b);sJ(f,uib,b.f);QX(g,(sN(),rN));PX(g,f);l=Wv(FU(b.b,xv(dB,gAb,12,b.b.c.length,0,1)),47);for(j=0,k=l.length;j<k;++j){i=l[j];eW(i,g)}sJ(b,Bib,f);++e}if(c){h=new RX;sJ(f,(Rib(),uib),c.f);sJ(h,uib,c);QX(h,(sN(),ZM));PX(h,f);l=Wv(FU(c.e,xv(dB,gAb,12,c.e.c.length,0,1)),47);for(j=0,k=l.length;j<k;++j){i=l[j];dW(i,h)}sJ(c,Bib,f);++e}sJ(f,(Rib(),aib),Elb(e));d.c[d.c.length]=f;return f}
	function MV(a,b){var c,d,e,f,g,h,i;for(g=ud(a.a).mb();g.G();){f=Wv(g.H(),12);if(f.b.c.length>0){d=new IU(Wv(Dd(a.a,f),18));Gpb(d,new $V(b));e=new Fnb(f.b,0);while(e.b<e.d.Y()){c=(Bxb(e.b<e.d.Y()),Wv(e.d.sb(e.c=e.b++),33));h=-1;switch(Wv(rJ(c,(eM(),tL)),107).e){case 2:h=d.c.length-1;break;case 1:h=d.c.length/2|0;break;case 3:h=0;}if(h!=-1){i=(Cxb(h,d.c.length),Wv(d.c[h],114));vU(i.b.b,c);Wv(rJ(hX(i.b.c.f),(Rib(),jib)),18).ib((ohb(),ghb));Wv(rJ(hX(i.b.c.f),jib),18).ib(ehb);vnb(e);sJ(c,xib,f)}}}dW(f,null);eW(f,null)}}
	function H7(a){var b,c,d,e,f,g,h,i,j,k,l;k=a.e.a.c.length;for(g=new Tob(a.e.a);g.a<g.c.c.length;){f=Wv(Rob(g),61);f.j=false}a.i=xv(mw,Yyb,26,k,12,1);a.g=xv(mw,Yyb,26,k,12,1);a.n=new GU;e=0;l=new GU;for(i=new Tob(a.e.a);i.a<i.c.c.length;){h=Wv(Rob(i),61);h.b=e++;h.c.c.length==0&&vU(a.n,h);xU(l,h.g)}b=0;for(d=new Tob(l);d.a<d.c.c.length;){c=Wv(Rob(d),89);c.b=b++;c.e=false}j=l.c.length;if(a.b==null||a.b.length<j){a.b=xv(kw,hyb,26,j,12,1);a.c=xv(KH,xAb,26,j,13,1)}else{dpb(a.c)}a.d=l;a.p=new Xub(op(a.d.c.length));a.j=1}
	function z0(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u;p=a.d;q=b.d;n=Wv(oX(a,(djb(),ajb)).mb().H(),7);t=Wv(oX(a,bjb).mb().H(),7);o=Wv(oX(b,ajb).mb().H(),7);u=Wv(oX(b,bjb).mb().H(),7);l=Wv(FU(n.b,xv(dB,gAb,12,1,0,1)),47);r=Wv(FU(t.e,xv(dB,gAb,12,1,0,1)),47);m=Wv(FU(o.b,xv(dB,gAb,12,1,0,1)),47);s=Wv(FU(u.e,xv(dB,gAb,12,1,0,1)),47);rX(a,q);for(e=0,i=m.length;e<i;++e){c=m[e];eW(c,n)}for(f=0,j=s.length;f<j;++f){c=s[f];dW(c,t)}rX(b,p);for(g=0,k=l.length;g<k;++g){c=l[g];eW(c,o)}for(d=0,h=r.length;d<h;++d){c=r[d];dW(c,u)}}
	function gR(a){var b,c,d,e,f,g,h,i;for(f=new Tob(a.a.b);f.a<f.c.c.length;){e=Wv(Rob(f),25);e.vc()}i=new HI(Uzb,Uzb);b=new HI(Vzb,Vzb);for(d=new Tob(a.a.b);d.a<d.c.c.length;){c=Wv(Rob(d),25);i.a=Qlb(i.a,c.j.d);i.b=Qlb(i.b,c.j.e);b.a=Nlb(b.a,c.j.d+c.j.c);b.b=Nlb(b.b,c.j.e+c.j.b)}for(h=Jd(a.c).mb();h.G();){g=Wv(h.H(),27);c=Wv(g.b,25);i.a=Qlb(i.a,c.j.d);i.b=Qlb(i.b,c.j.e);b.a=Nlb(b.a,c.j.d+c.j.c);b.b=Nlb(b.b,c.j.e+c.j.b)}a.d=zI(new HI(i.a,i.b));a.e=EI(new HI(b.a,b.b),i);a.a.a.c=xv(UF,syb,1,0,4,1);a.a.b.c=xv(UF,syb,1,0,4,1)}
	function P$(a){var b,c,d,e,f,g,h;h=Wv(yU(a.f,0),7);if(h.e.c.length!=0&&h.b.c.length!=0){throw new ulb('Interactive layout does not support NORTH/SOUTH ports with incoming _and_ outgoing edges.')}if(h.e.c.length!=0){f=Uzb;for(c=new Tob(h.e);c.a<c.c.c.length;){b=Wv(Rob(c),12);g=b.d.f;d=Wv(rJ(g,(eM(),GL)),65);f=Qlb(f,g.i.a-d.b)}return new $c(_b(f))}if(h.b.c.length!=0){e=Vzb;for(c=new Tob(h.b);c.a<c.c.c.length;){b=Wv(Rob(c),12);g=b.c.f;d=Wv(rJ(g,(eM(),GL)),65);e=Nlb(e,g.i.a+g.j.a+d.c)}return new $c(_b(e))}return zb(),zb(),yb}
	function JV(a,b,c,d,e,f){var g,h,i,j,k,l,m;j=d==(djb(),ajb)?f.c:f.d;i=PW(b);if(j.f==c){g=Wv(Smb(a.b,j),9);if(!g){g=NW(j,Wv(rJ(c,(eM(),TL)),28),e,d==ajb?-1:1,j.j,i,b);sJ(g,(Rib(),uib),j);Umb(a.b,j,g)}}else{k=Wv(rJ(f,(eM(),dM)),15).a;g=NW((l=new tJ,m=Wv(rJ(b,(Rib(),Jib)),15).a*Wv(rJ(b,(Mjb(),qjb)),15).a/2,sJ(l,tib,new llb(m)),l),Wv(rJ(c,TL),28),e,d==ajb?-1:1,new HI(k,k),i,b);h=KV(a,g,c,d);sJ(g,uib,h);Umb(a.b,h,g)}Wv(rJ(b,(Rib(),jib)),18).ib((ohb(),hhb));MM(Wv(rJ(b,(eM(),TL)),28))?sJ(b,TL,(KM(),HM)):sJ(b,TL,(KM(),IM));return g}
	function Iab(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,A;d=Wv(rJ(b,(Mjb(),wjb)),15).a;v=Wv(rJ(b,Kjb),24).a;m=4;e=3;w=20/v;n=false;i=0;g=$xb;do{f=i!=1;l=i!=0;A=0;for(q=a.a,s=0,u=q.length;s<u;++s){o=q[s];o.g=null;Jab(a,o,f,l,d);A+=Jlb(o.a)}do{h=Nab(a,b)}while(h);for(p=a.a,r=0,t=p.length;r<t;++r){o=p[r];c=Uab(o).a;if(c!=0){for(k=new Tob(o.f);k.a<k.c.c.length;){j=Wv(Rob(k),9);j.i.b+=c}}}if(i==0||i==1){--m;if(m<=0&&(A<g||-m>v)){i=2;g=$xb}else if(i==0){i=1;g=A}else{i=0;g=A}}else{n=A>=g||g-A<w;g=A;n&&--e}}while(!(n&&e<=0))}
	function vZ(a,b,c){var d,e,f,g,h,i,j,k,l,m,n;l=Wv(FU(a.f,xv(BB,mAb,7,a.f.c.length,0,1)),346);for(j=0,k=l.length;j<k;++j){i=l[j];if(c!=(djb(),ajb)){h=Wv(FU(i.e,xv(dB,gAb,12,i.e.c.length,0,1)),47);for(e=0,f=h.length;e<f;++e){d=h[e];n=Wv(rJ(d.d.f,(Mjb(),vjb)),85);!Ckb(Ixb(Xv(rJ(d,(Rib(),Iib)))))&&!(b==(Xib(),Uib)&&n==Vib)&&cW(d,true)}}if(c!=bjb){g=Wv(FU(i.b,xv(dB,gAb,12,i.b.c.length,0,1)),47);for(e=0,f=g.length;e<f;++e){d=g[e];m=Wv(rJ(d.c.f,(Mjb(),vjb)),85);!Ckb(Ixb(Xv(rJ(d,(Rib(),Iib)))))&&!(b==(Xib(),Sib)&&m==Tib)&&cW(d,true)}}}}
	function RW(a,b,c,d){var e,f,g,h,i;g=a.g;if(g==(sN(),qN)&&b!=(KM(),IM)&&b!=(KM(),JM)){g=KW(a,c);QX(a,g);rJ(a,(eM(),LL))==null&&g!=qN&&(a.i.a!=0||a.i.b!=0)&&sJ(a,LL,new llb(JW(a,g)))}if(b==(KM(),GM)){i=0;switch(g.e){case 1:case 3:f=a.f.j.a;f>0&&(i=a.i.a/f);break;case 2:case 4:e=a.f.j.b;e>0&&(i=a.i.b/e);}sJ(a,(Rib(),Cib),i)}h=a.j;if(d){a.a.a=d.a;a.a.b=d.b}else if(b!=IM&&b!=JM&&g!=qN){switch(g.e){case 1:a.a.a=h.a/2;break;case 2:a.a.a=h.a;a.a.b=h.b/2;break;case 3:a.a.a=h.a/2;a.a.b=h.b;break;case 4:a.a.b=h.b/2;}}else{a.a.a=h.a/2;a.a.b=h.b/2}}
	function zJ(a){var b,c,d,e;if(aw(a.a,10)){return xI(Wv(a.a,10))}else if(aw(a.a,66)){return Xsb(Wv(a.a,86))}else if(aw(a.a,50)){return Wv(a.a,50).Wc()}else if(aw(a.a,191)){b=new Vwb;e=(d=new rwb((new wwb((new Gob(Wv(a.a,191).a)).a)).b),new Mob(d));while(Bnb(e.a.a)){Rwb(b,(c=pwb(e.a),c.yb()))}return b}else if(aw(a.a,13)){return new IU(Wv(a.a,13))}else if(aw(a.a,44)){b=new jJ;e=WI(Wv(a.a,44),0);while(e.b!=e.d.c){QI(b,Wv(_ub(e),10))}return b}else if(aw(a.a,58)){b=new aJ;e=WI(Wv(a.a,58),0);while(e.b!=e.d.c){QI(b,_ub(e))}return b}else{return a.a}}
	function o1(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o;h=0;o=0;i=Xob(a.f,a.f.length);f=a.d;g=a.i;d=a.a;e=a.b;do{n=0;for(k=new Tob(a.p);k.a<k.c.c.length;){j=Wv(Rob(k),9);m=n1(a,j);c=true;(a.q==(I1(),B1)||a.q==E1)&&(c=Ckb(Ixb(Xv(m.b))));if(Wv(m.a,24).a<0&&c){++n;i=Xob(a.f,a.f.length);a.d=a.d+Wv(m.a,24).a;o+=f-a.d;f=a.d+Wv(m.a,24).a;g=a.i;d=Ao(a.a);e=Ao(a.b)}else{a.f=Xob(i,i.length);a.d=f;a.a=(_b(d),d?new IU((Oh(),d)):Bo(new Tob(null)));a.b=(_b(e),e?new IU((Oh(),e)):Bo(new Tob(null)));a.i=g}}++h;l=n!=0&&Ckb(Ixb(Xv(b.B(new RJ(Elb(o),Elb(h))))))}while(l)}
	function yO(a,b,c,d){var e,f,g,h,i,j,k;if(!Qob(new Tob(zW(a)))){return d}k=wO(Wv(oW(a,(eM(),JL)),86));for(i=new Tob(zW(a));i.a<i.c.c.length;){h=Wv(Rob(i),129);j=wO(Wv(oW(h,JL),86));j==(uO(),tO)&&(j=k);qW(h,j.e);e=zO(c,j);e.c=Nlb(e.c,h.e.j.a);e.b+=h.e.j.b+b}for(g=new Lsb((new Fsb(c)).a);htb(g.a);){f=(g.b=itb(g.a),new Psb(g.c,g.b));e=Wv(f.b.b[f.a.e],62);e.b-=b;switch(Wv(f.a,67).e){case 12:case 13:case 14:d.d=Nlb(d.d,e.b+b);break;case 15:d.b=Nlb(d.b,e.c+b);break;case 17:d.c=Nlb(d.c,e.c+b);break;case 18:case 19:case 20:d.a=Nlb(d.a,e.b+b);}}return d}
	function mgb(a,b,c){var d,e,f,g,h,i,j,k,l,m,n,o,p;igb(this);c==(fgb(),dgb)?stb(this.g,a):stb(this.o,a);n=rAb;m=4.9E-324;for(j=(g=(new Snb(b.a)).a.bb().mb(),new Ynb(g));j.a.G();){h=(e=Wv(j.a.H(),21),Wv(e.yb(),27));k=Wv(h.a,223);d=Wv(h.b,12);l=d.c;l==a&&(l=d.d);k==dgb?stb(this.g,l):stb(this.o,l);p=MI(Bv(tv(qz,1),Fzb,10,0,[l.f.i,l.i,l.a])).b;n=n<p?n:p;m=m>p?m:p}o=MI(Bv(tv(qz,1),Fzb,10,0,[a.f.i,a.i,a.a])).b;kgb(this,o,n,m);for(i=(f=(new Snb(b.a)).a.bb().mb(),new Ynb(f));i.a.G();){h=(e=Wv(i.a.H(),21),Wv(e.yb(),27));stb(this.c,Wv(h.b,12))}this.f=false}
	function cQ(a,b,c,d){var e,f,g,h,i,j;h=(eM(),KL).b;if(h in b.a&&Pu(b,h).ic().a){return}j=Pu(b,Dzb);if(!j){throw new GQ("Labels must have a property 'text'.",null,b)}else if(!j.lc()){throw new GQ("A label's 'text' property must be a string.",j,b)}i=j.lc().a;f=new dX(i);sJ(f,(Rib(),uib),b);Umb(a.f,f,b);_P(b,f);hQ(b,f);aw(c,9)?vU(Wv(c,9).c,f):aw(c,12)?vU(Wv(c,12).b,f):aw(c,7)&&vU(Wv(c,7).c,f);if(aw(c,12)){g=Wv(rJ(f,tL),107);_P(b,f);sJ(f,tL,g);e=Wv(rJ(d,jib),18);switch(g.e){case 2:case 3:e.ib((ohb(),ghb));case 1:case 0:e.ib((ohb(),ehb));sJ(f,tL,(EK(),AK));}}}
	function UW(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r;f=0;g=0;for(j=new Tob(a.a);j.a<j.c.c.length;){h=Wv(Rob(j),9);f=Nlb(f,h.e.b);g=Nlb(g,h.e.c)}for(i=new Tob(a.a);i.a<i.c.c.length;){h=Wv(Rob(i),9);c=Wv(rJ(h,(eM(),lL)),103);switch(c.e){case 1:o=0;break;case 2:o=1;break;case 5:o=0.5;break;default:d=0;l=0;for(n=new Tob(h.f);n.a<n.c.c.length;){m=Wv(Rob(n),7);m.b.c.length==0||++d;m.e.c.length==0||++l}d+l==0?(o=0.5):(o=l/(d+l));}q=a.c;k=h.j.a;r=(q.a-k)*o;o>0.5?(r-=g*2*(o-0.5)):o<0.5&&(r+=f*2*(0.5-o));e=h.e.b;r<e&&(r=e);p=h.e.c;r>q.a-p-k&&(r=q.a-p-k);h.i.a=b+r}}
	function Kv(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,A,B,C,D,F,G;c=a.l&8191;d=a.l>>13|(a.m&15)<<9;e=a.m>>4&8191;f=a.m>>17|(a.h&255)<<5;g=(a.h&1048320)>>8;h=b.l&8191;i=b.l>>13|(b.m&15)<<9;j=b.m>>4&8191;k=b.m>>17|(b.h&255)<<5;l=(b.h&1048320)>>8;B=c*h;C=d*h;D=e*h;F=f*h;G=g*h;if(i!=0){C+=c*i;D+=d*i;F+=e*i;G+=f*i}if(j!=0){D+=c*j;F+=d*j;G+=e*j}if(k!=0){F+=c*k;G+=d*k}l!=0&&(G+=c*l);n=B&azb;o=(C&511)<<13;m=n+o;q=B>>22;r=C>>9;s=(D&262143)<<4;t=(F&31)<<17;p=q+r+s+t;v=D>>18;w=F>>5;A=(G&4095)<<8;u=v+w+A;p+=m>>22;m&=azb;u+=p>>22;p&=azb;u&=bzb;return Ev(m,p,u)}
	function jZ(a,b,c,d){var e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w;q=a.d.c.c.c.length;if(c>=q-1){return null}e=new GU;e.c[e.c.length]=b;u=b;g=c;o=-1;h=Wv(yU(a.d.c.c,c),16);for(n=0;n<h.a.c.length;++n){r=Wv(yU(h.a,n),9);if(r==b){o=n;break}}p=eZ(a,1,o,c,q,a.a);if(!p){return null}v=a.a;m=0;f=0;while(!!u&&v>1&&g<q-1){k=fZ(a,u);l=Wv(yU(a.d.c.c,g+1),16);w=Wv(p.sb(m++),24).a;s=Slb(w,l.a.c.length);qX(k,s,l);!!u&&(e.c[e.c.length]=u,true);u=k;--v;++f;++g}t=(d-(e.c.length-1)*a.d.d)/e.c.length;for(j=new Tob(e);j.a<j.c.c.length;){i=Wv(Rob(j),9);i.j.a=t}return new RJ(Elb(f),t)}
	function iZ(a,b,c,d){var e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w;if(c<=0){return null}e=new GU;e.c[e.c.length]=b;u=b;g=c;o=-1;h=Wv(yU(a.d.c.c,c),16);for(n=0;n<h.a.c.length;++n){q=Wv(yU(h.a,n),9);if(q==b){o=n;break}}p=eZ(a,0,o,c,a.d.c.c.c.length,a.a);if(!p){return null}v=a.a;m=0;f=0;t=o;while(!!u&&v>1&&g>1){k=fZ(a,u);h=Wv(yU(a.d.c.c,g),16);l=Wv(yU(a.d.c.c,g-1),16);w=Wv(p.sb(m++),24).a;r=Slb(w,l.a.c.length);qX(u,r,l);qX(k,t,h);t=r;!!u&&(e.c[e.c.length]=u,true);u=k;--v;++f;--g}s=(d-(e.c.length-1)*a.d.d)/e.c.length;for(j=new Tob(e);j.a<j.c.c.length;){i=Wv(Rob(j),9);i.j.a=s}return new RJ(Elb(f),s)}
	function sV(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o;a.b=a.c;o=Xv(rJ(b,(eM(),_L)));n=o==null||Ckb((Dxb(o),o));f=Wv(rJ(b,(Rib(),jib)),18).kb((ohb(),hhb));e=Wv(rJ(b,TL),28);c=!(e==(KM(),EM)||e==GM||e==FM);if(n&&(c||!f)){for(l=new Tob(b.b);l.a<l.c.c.length;){j=Wv(Rob(l),9);j.k=0}m=new GU;for(k=new Tob(b.b);k.a<k.c.c.length;){j=Wv(Rob(k),9);d=rV(a,j,null);if(d){i=new kW;qJ(i,b);sJ(i,fib,Wv(d.b,18));YW(i.a,b.a);for(h=Wv(d.a,20).mb();h.G();){g=Wv(h.H(),9);vU(i.b,g);g.a=i}m.ib(i)}}f&&(a.b=a.a)}else{m=new opb(Bv(tv(mB,1),{38:1,39:1,42:1,3:1,8:1,5:1,6:1},55,0,[b]))}return m}
	function T4(a){var b,c,d,e,f,g,h,i,j;for(c=new Tob(a.a.a.b);c.a<c.c.c.length;){b=Wv(Rob(c),25);for(g=b.i.mb();g.G();){f=Wv(g.H(),25);if(b.f==f.f){continue}tK(a.a.d)?(i=a.a.g.tc(b,f)):(i=a.a.g.uc(b,f));d=b.g.a+b.j.c+i-f.g.a;d=Math.ceil(d);d=0>d?0:d;if(!!b.o&&!!f.o&&aw(b,82)&&aw(f,82)&&!sr(or(Wv(b,82).d,Wv(f,82).d))){e=x7(new A7,a.d);h=hw(Llb(f.g.a-b.g.a));f7(i7(h7(j7(g7(new k7,0>h?0:h),1),e),a.c[b.f.d]));f7(i7(h7(j7(g7(new k7,0>-h?0:-h),1),e),a.c[f.f.d]))}else{j=1;(aw(b,82)&&aw(f,93)||aw(f,82)&&aw(b,93))&&(j=2);f7(i7(h7(j7(g7(new k7,hw(d)),j),a.c[b.f.d]),a.c[f.f.d]))}}}}
	function tQ(){tQ=iI;sQ=new vtb;rQ=uQ(Bv(tv(rz,1),syb,79,0,[(eM(),kL),xL]));oQ=uQ(Bv(tv(rz,1),syb,79,0,[ML,UL,(Mjb(),Hjb),yL,(Rib(),Eib),Kjb,Cjb]));kQ=uQ(Bv(tv(rz,1),syb,79,0,[mL,qL,KL,wL,BL,EL,FL,$L,_L,AL,gjb,mjb,njb,xjb,rjb,yjb,Ijb,Djb,ijb]));nQ=uQ(Bv(tv(rz,1),syb,79,0,[IL,HL,DL,dM,LL,Dib,Xhb,Rhb,Jib,Ejb,qjb,wjb]));mQ=uQ(Bv(tv(rz,1),syb,79,0,[WL,lL,sL,uL,tL,vL,zL,NL,OL,PL,QL,RL,TL,VL,hjb,ljb,zjb,ojb,kjb,Ajb,Bjb,sjb,tjb,vjb,Fjb,Gjb,Jjb,Ljb,ujb]));lQ=uQ(Bv(tv(rz,1),syb,79,0,[JL,aM,bM,jjb]));qQ=uQ(Bv(tv(rz,1),syb,79,0,[jL,oL,CL,GL,SL,YL]));pQ=uQ(Bv(tv(rz,1),syb,79,0,[(RP(),OP)]))}
	function AR(a){var b,c,d,e,f,g,h;b=0;for(f=new Tob(a.b.a);f.a<f.c.c.length;){d=Wv(Rob(f),78);d.b=0;d.c=0}zR(a,0);yR(a,a.g);fS(a.c);jS(a.c);c=(sK(),oK);hS(bS(gS(hS(bS(gS(hS(gS(a.c,c)),vK(c)))),c)));gS(a.c,oK);DR(a,a.g);ER(a,0);FR(a,0);GR(a,1);zR(a,1);yR(a,a.d);fS(a.c);for(g=new Tob(a.b.a);g.a<g.c.c.length;){d=Wv(Rob(g),78);b+=Jlb(d.c)}for(h=new Tob(a.b.a);h.a<h.c.c.length;){d=Wv(Rob(h),78);d.b=0;d.c=0}c=rK;hS(bS(gS(hS(bS(gS(hS(jS(gS(a.c,c))),vK(c)))),c)));gS(a.c,oK);DR(a,a.d);ER(a,1);FR(a,1);GR(a,0);jS(a.c);for(e=new Tob(a.b.a);e.a<e.c.c.length;){d=Wv(Rob(e),78);b+=Jlb(d.c)}return b}
	function BR(a){var b,c,d,e,f,g,h;b=new GU;a.g=new GU;a.d=new GU;for(g=new rnb((new inb(a.f.b)).a);g.b;){f=pnb(g);vU(b,Wv(Wv(f.zb(),27).b,25));tK(Wv(f.yb(),251).yc())?vU(a.d,Wv(f.zb(),27)):vU(a.g,Wv(f.zb(),27))}yR(a,a.d);yR(a,a.g);a.c=new rS(a.b);pS(a.c,(fR(),eR));DR(a,a.d);DR(a,a.g);xU(b,a.c.a.b);a.e=new HI(Uzb,Uzb);a.a=new HI(Vzb,Vzb);for(d=new Tob(b);d.a<d.c.c.length;){c=Wv(Rob(d),25);a.e.a=Qlb(a.e.a,c.j.d);a.e.b=Qlb(a.e.b,c.j.e);a.a.a=Nlb(a.a.a,c.j.d+c.j.c);a.a.b=Nlb(a.a.b,c.j.e+c.j.b)}oS(a.c,new IR);h=0;do{e=AR(a);++h}while((h<2||e>$yb)&&h<10);oS(a.c,new KR);AR(a);iS(a.c);gR(a.f)}
	function tT(a){oT();var b,c,d,e,f,g,h;h=new qT;for(c=new Tob(a);c.a<c.c.c.length;){b=Wv(Rob(c),48);(!h.b||b.c>=h.b.c)&&(h.b=b);if(!h.c||b.c<=h.c.c){h.d=h.c;h.c=b}(!h.e||b.d>=h.e.d)&&(h.e=b);(!h.f||b.d<=h.f.d)&&(h.f=b)}d=new xT((cT(),$S));RT(a,mT,new opb(Bv(tv(JA,1),syb,160,0,[d])));g=new xT(bT);RT(a,lT,new opb(Bv(tv(JA,1),syb,160,0,[g])));e=new xT(_S);RT(a,kT,new opb(Bv(tv(JA,1),syb,160,0,[e])));f=new xT(aT);RT(a,jT,new opb(Bv(tv(JA,1),syb,160,0,[f])));rT(d.c,$S);rT(e.c,_S);rT(f.c,aT);rT(g.c,bT);h.a.c=xv(UF,syb,1,0,4,1);xU(h.a,d.c);xU(h.a,Fo(e.c));xU(h.a,f.c);xU(h.a,Fo(g.c));return h}
	function $O(a){var b,c,d,e,f,g,h,i,j,k;e=Wv(vW(a,(eM(),DL)),15).a;for(h=new Tob(uW(a));h.a<h.c.c.length;){g=Wv(Rob(h),626);c=new fP(g);c.d=e;c.k=Wv(oW(g,XL),15).a;d=Wv(oW(g,VL),149);b=Ckb(Ixb(Xv(rJ(Wv(g.e,9),(Rib(),$hb)))));for(k=new Tob(AW(g));k.a<k.c.c.length;){j=Wv(Rob(k),161);d==(UM(),SM)?XO(j,b,e):d==TM&&YO(j,e);JO(j)}LO(c,Wv(oW(g,aM),86).kb((DN(),CN)));NO(c);yO(c.e,c.d,c.c,c.p);_O(c);ZO(c);VO(c);i=new CP((f=Wv(g.e,9).b,new BP(f.d,f.b,f.a,f.c)));i.b=c.p.b+c.q.b;i.c=c.p.c+c.q.c;i.d=c.p.d+c.q.d;i.a=c.p.a+c.q.a;Wv(g.e,9).b.b=i.b;Wv(g.e,9).b.d=i.d;Wv(g.e,9).b.c=i.c;Wv(g.e,9).b.a=i.a}}
	function c1(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t;i=Wv(nX(a,(sN(),rN)).mb().H(),7).b;n=Wv(nX(a,ZM).mb().H(),7).e;h=i.c.length;t=MX(Wv(yU(a.f,0),7));while(h-->0){p=(Cxb(0,i.c.length),Wv(i.c[0],12));e=(Cxb(0,n.c.length),Wv(n.c[0],12));s=e.d.b;f=zU(s,e,0);fW(p,e.d,f);dW(e,null);eW(e,null);o=p.a;b&&QI(o,new II(t));for(d=WI(e.a,0);d.b!=d.d.c;){c=Wv(_ub(d),10);QI(o,new II(c))}r=p.b;for(m=new Tob(e.b);m.a<m.c.c.length;){l=Wv(Rob(m),33);r.c[r.c.length]=l}q=Wv(rJ(p,(eM(),CL)),44);g=Wv(rJ(e,CL),44);if(g){if(!q){q=new jJ;sJ(p,CL,q)}for(k=WI(g,0);k.b!=k.d.c;){j=Wv(_ub(k),10);QI(q,new II(j))}}}}
	function XO(a,b,c){var d,e,f,g,h;f=Li(DW(a));if(f.Nb().V()){return}h=0;switch(Wv(a.e,7).g.e){case 4:case 2:h=b&&Ckb(Ixb(Xv(rJ(Wv(a.e,7),(Rib(),lib)))))?a.e.j.b:(a.e.j.b-Wv(f.Nb().sb(0),129).pc().b)/2-c;break;case 1:h=a.e.j.b;break;case 3:h=0;}Wv(a.e,7).g==(sN(),pN)&&Ii(f);for(e=new Tob(DW(a));e.a<e.c.c.length;){d=Wv(Rob(e),129);g=new II(a.e.i);switch(Wv(a.e,7).g.e){case 4:g.a=a.e.j.a+c;g.b=h+c;h+=c+d.e.j.b;break;case 2:g.a=-d.e.j.a-c;g.b=h+c;h+=c+d.e.j.b;break;case 1:g.a=(a.e.j.a-d.e.j.a)/2;g.b=h+c;h+=c+d.e.j.b;break;case 3:g.a=(a.e.j.a-d.e.j.a)/2;g.b=h-c-d.e.j.b;h-=c+d.e.j.b;}d.e.i.a=g.a;d.e.i.b=g.b}}
	function jR(a,b){var c,d,e,f,g,h,i,j,k,l;a.a=new NR(Tsb(Bz));for(d=new Tob(b.a);d.a<d.c.c.length;){c=Wv(Rob(d),347);h=new QR(Bv(tv(kA,1),syb,25,0,[]));vU(a.a.a,h);for(j=new Tob(c.d);j.a<j.c.c.length;){i=Wv(Rob(j),62);k=new pR(a,i);iR(k,Wv(rJ(c.c,(Rib(),fib)),18));if(!Qmb(a.g,c)){Umb(a.g,c,new HI(i.d,i.e));Umb(a.f,c,k)}vU(a.a.b,k);OR(h,k)}for(g=new Tob(c.b);g.a<g.c.c.length;){f=Wv(Rob(g),251);k=new pR(a,f.Bc());Umb(a.b,f,new RJ(h,k));iR(k,Wv(rJ(c.c,(Rib(),fib)),18));if(f.zc()){l=new qR(a,f.zc(),1);iR(l,Wv(rJ(c.c,fib),18));e=new QR(Bv(tv(kA,1),syb,25,0,[]));OR(e,l);Fd(a.c,f.yc(),new RJ(h,l))}}}return a.a}
	function ccb(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t;p=b.c.c.length;if(p<3){return}n=xv(mw,Yyb,26,p,12,1);l=0;for(k=new Tob(b.c);k.a<k.c.c.length;){j=Wv(Rob(k),16);n[l++]=j.a.c.length}m=new Fnb(b.c,2);for(d=1;d<p-1;d++){c=(Bxb(m.b<m.d.Y()),Wv(m.d.sb(m.c=m.b++),16));o=new Tob(c.a);f=0;h=0;for(i=0;i<n[d+1];i++){t=Wv(Rob(o),9);if(i==n[d+1]-1||bcb(a,t,d+1,d)){g=n[d]-1;bcb(a,t,d+1,d)&&(g=a.d.e[Wv(Wv(Wv(yU(a.d.b,t.k),20).sb(0),27).a,9).k]);while(h<=i){s=Wv(yU(c.a,h),9);if(!bcb(a,s,d+1,d)){for(r=Wv(yU(a.d.b,s.k),20).mb();r.G();){q=Wv(r.H(),27);e=a.d.e[Wv(q.a,9).k];(e<f||e>g)&&stb(a.c,Wv(q.b,12))}}++h}f=g}}}}
	function _9(a,b,c){var d,e,f,g,h,i;this.g=a;h=b.d.length;i=c.d.length;this.d=xv(qB,Nzb,9,h+i,0,1);for(g=0;g<h;g++){this.d[g]=b.d[g]}for(f=0;f<i;f++){this.d[h+f]=c.d[f]}if(b.e){this.e=Eo(b.e);this.e.nb(c);if(c.e){for(e=c.e.mb();e.G();){d=Wv(e.H(),102);if(d==b){continue}else this.e.kb(d)?--d.c:this.e.ib(d)}}}else if(c.e){this.e=Eo(c.e);this.e.nb(b)}this.f=b.f+c.f;this.a=b.a+c.a;this.a>0?Z9(this,this.f/this.a):W9(b.g,b.d[0]).a!=null&&W9(c.g,c.d[0]).a!=null?Z9(this,(Ixb(W9(b.g,b.d[0]).a)+Ixb(W9(c.g,c.d[0]).a))/2):W9(b.g,b.d[0]).a!=null?Z9(this,W9(b.g,b.d[0]).a):W9(c.g,c.d[0]).a!=null&&Z9(this,W9(c.g,c.d[0]).a)}
	function x9(a,b){var c,d,e,f,g,h,i,j,k,l,m;switch(a.g.e){case 1:d=Wv(rJ(a,(Rib(),uib)),12);c=Wv(rJ(d,vib),44);!c?(c=new jJ):Ckb(Ixb(Xv(rJ(d,Iib))))&&(c=lJ(c));j=Wv(rJ(a,qib),7);k=MI(Bv(tv(qz,1),Fzb,10,0,[j.f.i,j.i,j.a]));if(b<=k.a){return k.b}TI(c,k,c.a,c.a.a);l=Wv(rJ(a,rib),7);m=MI(Bv(tv(qz,1),Fzb,10,0,[l.f.i,l.i,l.a]));if(m.a<=b){return m.b}TI(c,m,c.c.b,c.c);i=WI(c,0);g=Wv(_ub(i),10);h=Wv(_ub(i),10);while(h.a<b&&i.b!=i.d.c){g=h;h=Wv(_ub(i),10)}return g.b+(b-g.a)/(h.a-g.a)*(h.b-g.b);case 3:f=Wv(rJ(Wv(yU(a.f,0),7),(Rib(),uib)),7);e=f.f;switch(f.g.e){case 1:return e.i.b;case 3:return e.i.b+e.j.b;}}return kX(a).b}
	function KP(a){var b,c,d,e,f,g,h,i,j,k,l,m;k=gw(rJ(a.c.f,(Rib(),sib)))===gw(rJ(a.d.f,sib));g=new FI;c=Wv(rJ(a,(eM(),oL)),44);if(!!c&&c.b>=2){_I(a.a);d=0;for(m=WI(c,0);m.b!=m.d.c;){l=Wv(_ub(m),10);if(d==0){b=EI(EI(new HI(l.a,l.b),a.c.i),a.c.f.i);a.c.a.a=b.a;a.c.a.b=b.b}else if(d==c.b-1){b=EI(EI(new HI(l.a,l.b),a.d.i),a.d.f.i);a.d.a.a=b.a;a.d.a.b=b.b}else{QI(a.a,l)}++d}}if(k){for(i=WI(a.a,0);i.b!=i.d.c;){h=Wv(_ub(i),10);g.a=Nlb(g.a,h.a);g.b=Nlb(g.b,h.b)}}for(f=new Tob(a.b);f.a<f.c.c.length;){e=Wv(Rob(f),33);j=Wv(rJ(e,YL),10);if(j){e.i.a=j.a;e.i.b=j.b}if(k){g.a=Nlb(g.a,e.i.a+e.j.a);g.b=Nlb(g.b,e.i.b+e.j.b)}}return g}
	function eQ(a,b,c){var d,e,f,g,h,i,j;SP(b);d=Wv(rJ(c,(Rib(),jib)),18);g=new uX(c);sJ(g,uib,b);vU(c.b,g);f=Wv(Pu(b,'id'),97);Vmb(a.i,f.a,g);Umb(a.j,g,b);_P(b,g);hQ(b,g);if('ports' in b.a){j=Pu(b,'ports');if(!j.hc()){throw new GQ("The 'ports' property of the node must be an array.",j,b)}i=j.hc();for(e=0;e<i.a.length;++e){aw(gu(i,e),69)&&gQ(a,Wv(gu(i,e),69),g,c)}}dQ(a,b,g,c);Mzb in b.a&&Pu(b,Mzb).hc().a.length>0&&sJ(g,$hb,(xkb(),xkb(),wkb));h=Wv(rJ(g,(eM(),TL)),28);h==(KM(),JM)?IM:h!=IM&&d.ib((ohb(),khb));Ckb(Ixb(Xv(rJ(g,qL))))&&d.ib((ohb(),fhb));if(Ckb(Ixb(Xv(rJ(g,AL))))){d.ib((ohb(),jhb));d.ib(ihb);sJ(g,TL,IM)}return g}
	function iR(a,b){b.V()&&wS(a.n,true,true,true,true);b.t((sN(),eN))&&wS(a.n,true,true,true,false);b.t(_M)&&wS(a.n,false,true,true,true);b.t(mN)&&wS(a.n,true,true,false,true);b.t(oN)&&wS(a.n,true,false,true,true);b.t(fN)&&wS(a.n,false,true,true,false);b.t(aN)&&wS(a.n,false,true,false,true);b.t(nN)&&wS(a.n,true,false,false,true);b.t(lN)&&wS(a.n,true,false,true,false);b.t(jN)&&wS(a.n,true,true,true,true);b.t(cN)&&wS(a.n,true,true,true,true);b.t(jN)&&wS(a.n,true,true,true,true);b.t(bN)&&wS(a.n,true,true,true,true);b.t(kN)&&wS(a.n,true,true,true,true);b.t(iN)&&wS(a.n,true,true,true,true);b.t(hN)&&wS(a.n,true,true,true,true)}
	function n1(a,b){var c,d,e,f,g,h,i,j,k,l;i=true;e=0;j=a.f[b.k];k=b.j.b+a.n;c=a.c[b.k][2];DU(a.a,j,Elb(Wv(yU(a.a,j),24).a-1+c));DU(a.b,j,Ixb(Yv(yU(a.b,j)))-k+c*a.e);++j;if(j>=a.i){++a.i;vU(a.a,Elb(1));vU(a.b,k)}else{d=a.c[b.k][1];DU(a.a,j,Elb(Wv(yU(a.a,j),24).a+1-d));DU(a.b,j,Ixb(Yv(yU(a.b,j)))+k-d*a.e)}(a.q==(I1(),B1)&&(Wv(yU(a.a,j),24).a>a.j||Wv(yU(a.a,j-1),24).a>a.j)||a.q==E1&&(Ixb(Yv(yU(a.b,j)))>a.k||Ixb(Yv(yU(a.b,j-1)))>a.k))&&(i=false);for(g=Uh(iX(b));Cm(g);){f=Wv(Dm(g),12);h=f.c.f;if(a.f[h.k]==j){l=n1(a,h);e=e+Wv(l.a,24).a;i=i&&Ckb(Ixb(Xv(l.b)))}}a.f[b.k]=j;e=e+a.c[b.k][0];return new RJ(Elb(e),(xkb(),i?wkb:vkb))}
	function WW(a,b,c){var d,e,f,g,h,i,j,k,l,m,n,o,p,q,r;m=new II(a.j);r=b.a/m.a;h=b.b/m.b;p=b.a-m.a;f=b.b-m.b;if(c){e=gw(rJ(a,(eM(),TL)))===gw((KM(),FM));for(o=new Tob(a.f);o.a<o.c.c.length;){n=Wv(Rob(o),7);switch(n.g.e){case 1:e||(n.i.a*=r);break;case 2:n.i.a+=p;e||(n.i.b*=h);break;case 3:e||(n.i.a*=r);n.i.b+=f;break;case 4:e||(n.i.b*=h);}}}for(j=new Tob(a.c);j.a<j.c.c.length;){i=Wv(Rob(j),33);k=i.i.a+i.j.a/2;l=i.i.b+i.j.b/2;q=k/m.a;g=l/m.b;if(q+g>=1){if(q-g>0&&l>=0){i.i.a+=p;i.i.b+=f*g}else if(q-g<0&&k>=0){i.i.a+=p*q;i.i.b+=f}}}a.j.a=b.a;a.j.b=b.b;sJ(a,(eM(),aM),(DN(),d=Wv(Hkb(Lz),11),new atb(d,Wv(exb(d,d.length),11),0)))}
	function C7(a){var b,c,d,e,f,g,h,i,j,k;d=new GU;for(g=new Tob(a.e.a);g.a<g.c.c.length;){e=Wv(Rob(g),61);k=0;e.k.c=xv(UF,syb,1,0,4,1);for(c=new Tob(m7(e));c.a<c.c.c.length;){b=Wv(Rob(c),89);if(b.e){vU(e.k,b);++k}}k==1&&(d.c[d.c.length]=e,true)}for(f=new Tob(d);f.a<f.c.c.length;){e=Wv(Rob(f),61);while(e.k.c.length==1){j=Wv(Rob(new Tob(e.k)),89);a.b[j.b]=j.f;h=j.c;i=j.d;for(c=new Tob(m7(e));c.a<c.c.c.length;){b=Wv(Rob(c),89);b==j||(b.e?h==b.c||i==b.d?(a.b[j.b]-=a.b[b.b]-b.f):(a.b[j.b]+=a.b[b.b]-b.f):e==h?b.c==e?(a.b[j.b]+=b.f):(a.b[j.b]-=b.f):b.c==e?(a.b[j.b]-=b.f):(a.b[j.b]+=b.f))}BU(h.k,j);BU(i.k,j);h==e?(e=j.d):(e=j.c)}}}
	function _fb(a){var b,c,d,e,f,g,h,i,j,k;j=new aJ;h=new aJ;for(f=new Tob(a);f.a<f.c.c.length;){d=Wv(Rob(f),77);d.e=d.d.c.length;d.k=d.j.c.length;d.e==0&&(TI(j,d,j.c.b,j.c),true);d.k==0&&d.g.a.Y()==0&&(TI(h,d,h.c.b,h.c),true)}g=-1;while(j.b!=0){d=Wv(un(j,0),77);for(c=new Tob(d.j);c.a<c.c.c.length;){b=Wv(Rob(c),117);k=b.b;k.n=Plb(k.n,d.n+1);g=Plb(g,k.n);--k.e;k.e==0&&(TI(j,k,j.c.b,j.c),true)}}if(g>-1){for(e=WI(h,0);e.b!=e.d.c;){d=Wv(_ub(e),77);d.n=g}while(h.b!=0){d=Wv(un(h,0),77);for(c=new Tob(d.d);c.a<c.c.c.length;){b=Wv(Rob(c),117);i=b.a;if(i.g.a.Y()!=0){continue}i.n=Slb(i.n,d.n-1);--i.k;i.k==0&&(TI(h,i,h.c.b,h.c),true)}}}}
	function QV(a,b,c,d){var e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v;i=new GU;for(f=new Tob(b.b);f.a<f.c.c.length;){e=Wv(Rob(f),9);for(h=new Tob(e.f);h.a<h.c.c.length;){g=Wv(Rob(h),7);k=null;for(t=Wv(FU(g.e,xv(dB,gAb,12,0,0,1)),47),u=0,v=t.length;u<v;++u){s=t[u];if(!SW(s.d.f,c)){r=LV(a,b,c,s,s.c,(djb(),bjb),k);r!=k&&(i.c[i.c.length]=r,true);r.c&&(k=r)}}j=null;for(o=Wv(FU(g.b,xv(dB,gAb,12,0,0,1)),47),p=0,q=o.length;p<q;++p){n=o[p];if(!SW(n.c.f,c)){r=LV(a,b,c,n,n.d,(djb(),ajb),j);r!=j&&(i.c[i.c.length]=r,true);r.c&&(j=r)}}}}for(m=new Tob(i);m.a<m.c.c.length;){l=Wv(Rob(m),187);zU(b.b,l.a,0)!=-1||vU(b.b,l.a);l.c&&(d.c[d.c.length]=l,true)}}
	function WO(a){var b,c,d,e,f,g,h,i,j;d=a.e.e.j;b=Wv(oW(a.e,(eM(),aM)),86).kb((DN(),CN));PO(a);for(f=new Tob(AW(a.e));f.a<f.c.c.length;){e=Wv(Rob(f),161);h=Wv(oW(e,LL),15);!h&&(h=new llb(0));i=e.e.j;g=(c=Wv(e.e,7).d,new EP(c.d,c.b,c.a,c.c));j=new II(e.e.i);switch(Wv(e.e,7).g.e){case 4:j.a=-i.a-h.a;j.b=a.s-i.b-(b?g.a:0);a.s-=cP(a,(sN(),rN))+i.b+(b?g.d+g.a:0);break;case 2:j.a=d.a+h.a;j.b=a.a+(b?g.d:0);a.a+=cP(a,(sN(),ZM))+i.b+(b?g.d+g.a:0);break;case 1:j.a=a.f+(b?g.b:0);j.b=-e.e.j.b-h.a;a.f+=cP(a,(sN(),$M))+i.a+(b?g.b+g.c:0);break;case 3:j.a=a.r-i.a-(b?g.c:0);j.b=d.b+h.a;a.r-=cP(a,(sN(),pN))+i.a+(b?g.b+g.c:0);}e.e.i.a=j.a;e.e.i.b=j.b}}
	function u$(a,b,c){var d,e,f,g,h,i,j,k,l,m,n,o,p,q,r;k=new Wub;l=new Wub;q=new Wub;r=new Wub;j=Wv(rJ(b,(Rib(),Jib)),15).a;f=j*Wv(rJ(b,(Mjb(),qjb)),15).a;Ckb(Ixb(Xv(rJ(b,(eM(),rL)))));for(i=(m=(new Snb(c.a)).a.bb().mb(),new Ynb(m));i.a.G();){h=(g=Wv(i.a.H(),21),Wv(g.yb(),9));n=Wv(rJ(h,hib),32);if(n==(sN(),$M)){l.a.db(h,l);for(e=Uh(iX(h));Cm(e);){d=Wv(Dm(e),12);stb(k,d.c.f)}}else if(n==pN){r.a.db(h,r);for(e=Uh(iX(h));Cm(e);){d=Wv(Dm(e),12);stb(q,d.c.f)}}}if(k.a.Y()!=0){o=new cdb(2,f);p=bdb(o,b,k,l,-j-b.d.b);if(p>0){a.a=j+(p-1)*f;b.d.b+=a.a;b.e.b+=a.a}}if(q.a.Y()!=0){o=new cdb(1,f);p=bdb(o,b,q,r,b.e.b+j-b.d.b);p>0&&(b.e.b+=j+(p-1)*f)}}
	function Xt(a,b){var c,d,e,f,g,h,i,j,k;if((bmb(),b.length)==0){return a.fc(Yxb,Xxb,-1,-1)}k=hmb(b);emb(k.substr(0,3),'at ')&&(k=imb(k,3,k.length-3));k=k.replace(/\[.*?\]/g,'');g=k.indexOf('(');if(g==-1){g=k.indexOf('@');if(g==-1){j=k;k=''}else{j=hmb(imb(k,g+1,k.length-(g+1)));k=hmb(k.substr(0,g))}}else{c=k.indexOf(')',g);j=k.substr(g+1,c-(g+1));k=hmb(k.substr(0,g))}g=mmb(k,lmb(46));g!=-1&&(k=imb(k,g+1,k.length-(g+1)));(k.length==0||emb(k,'Anonymous function'))&&(k=Xxb);h=nmb(j,lmb(58));e=omb(j,lmb(58),h-1);i=-1;d=-1;f=Yxb;if(h!=-1&&e!=-1){f=j.substr(0,e);i=St(j.substr(e+1,h-(e+1)));d=St(imb(j,h+1,j.length-(h+1)))}return a.fc(f,k,i,d)}
	function idb(a){var b,c,d,e,f,g,h,i,j,k;j=new GU;h=new GU;for(g=new Tob(a);g.a<g.c.c.length;){e=Wv(Rob(g),80);e.c=e.b.c.length;e.f=e.e.c.length;e.c==0&&(j.c[j.c.length]=e,true);e.f==0&&e.j.b==0&&(h.c[h.c.length]=e,true)}d=-1;while(j.c.length!=0){e=Wv(AU(j,0),80);for(c=new Tob(e.e);c.a<c.c.c.length;){b=Wv(Rob(c),118);k=b.b;k.i=Plb(k.i,e.i+1);d=Plb(d,k.i);--k.c;k.c==0&&(j.c[j.c.length]=k,true)}}if(d>-1){for(f=new Tob(h);f.a<f.c.c.length;){e=Wv(Rob(f),80);e.i=d}while(h.c.length!=0){e=Wv(AU(h,0),80);for(c=new Tob(e.b);c.a<c.c.c.length;){b=Wv(Rob(c),118);i=b.a;if(i.j.b>0){continue}i.i=Slb(i.i,e.i-1);--i.f;i.f==0&&(h.c[h.c.length]=i,true)}}}}
	function PV(a,b,c){var d,e,f,g,h,i,j,k,l,m,n,o,p;if(!Ckb(Ixb(Xv(rJ(c,(eM(),$L)))))){return}for(h=new Tob(c.f);h.a<h.c.c.length;){g=Wv(Rob(h),7);l=Wv(FU(g.e,xv(dB,gAb,12,g.e.c.length,0,1)),47);for(j=0,k=l.length;j<k;++j){i=l[j];f=i.d.f==c;e=f&&Ckb(Ixb(Xv(rJ(i,$L))));if(e){n=i.c;m=Wv(Smb(a.b,n),9);if(!m){m=NW(n,(KM(),IM),n.g,-1,n.j,Wv(rJ(b,sL),59),b);sJ(m,(Rib(),uib),n);Umb(a.b,n,m);vU(b.b,m)}p=i.d;o=Wv(Smb(a.b,p),9);if(!o){o=NW(p,(KM(),IM),p.g,1,p.j,Wv(rJ(b,sL),59),b);sJ(o,(Rib(),uib),p);Umb(a.b,p,o);vU(b.b,o)}d=IV(i);dW(d,Wv(yU(m.f,0),7));eW(d,Wv(yU(o.f,0),7));Fd(a.a,i,new XV(d,b,(djb(),bjb)));Wv(rJ(b,(Rib(),jib)),18).ib((ohb(),hhb))}}}}
	function vfb(a,b,c,d,e,f){var g,h,i,j,k,l,m,n,o,p,q,r,s,t;n=sgb(a.g);p=sgb(c.g);o=vI(xI(a.i),a.a);q=vI(xI(c.i),c.a);g=vI(new II(o),CI(new GI(n),b));h=vI(new II(q),CI(new GI(p),d));j=ogb(a,e);e==(sN(),pN)||e==ZM?(j+=f):(j-=f);m=new FI;r=new FI;switch(e.e){case 1:case 3:m.a=g.a;m.b=o.b+j;r.a=h.a;r.b=m.b;break;case 2:case 4:m.a=o.a+j;m.b=g.b;r.a=m.a;r.b=h.b;break;default:return null;}k=CI(vI(new HI(m.a,m.b),r),0.5);l=new ufb(Bv(tv(qz,1),Fzb,10,0,[o,g,m,k,r,h,q]));i=ifb(l);t=jfb(l);switch(e.e){case 1:case 3:l.a=i;s=lfb(l);break;case 2:case 4:l.a=t;s=kfb(l);break;default:return null;}bfb(l,new Ffb(Bv(tv(qz,1),Fzb,10,0,[i,t,s,o,q])));return l}
	function qU(a,b,c,d){var e,f,g,h,i,j,k,l,m,n;f=new eV(b);l=lU(a,b,f);n=Nlb(Wv(rJ(b,(eM(),dM)),15).a,1);for(k=new Tob(l.a);k.a<k.c.c.length;){j=Wv(Rob(k),27);i=pU(Wv(j.a,10),Wv(j.b,10),n);o=true;o=o&YU(c,new HI(i.d,i.e));o=o&YU(c,uI(new HI(i.d,i.e),i.c,0));o=o&YU(c,uI(new HI(i.d,i.e),0,i.b));o&YU(c,uI(new HI(i.d,i.e),i.c,i.b))}m=f.d;h=pU(Wv(l.b.a,10),Wv(l.b.b,10),n);if(m==(sN(),rN)||m==ZM){d.c[m.e]=Qlb(d.c[m.e],h.e);d.b[m.e]=Nlb(d.b[m.e],h.e+h.b)}else{d.c[m.e]=Qlb(d.c[m.e],h.d);d.b[m.e]=Nlb(d.b[m.e],h.d+h.c)}e=Vzb;g=f.c.f.e;switch(m.e){case 4:e=g.c;break;case 2:e=g.b;break;case 1:e=g.a;break;case 3:e=g.d;}d.a[m.e]=Nlb(d.a[m.e],e);return f}
	function OV(a,b,c,d,e){var f,g,h,i,j,k,l,m,n,o,p,q;f=new GU;for(j=new Tob(d);j.a<j.c.c.length;){h=Wv(Rob(j),187);g=null;if(h.f==(djb(),bjb)){for(o=new Tob(h.e);o.a<o.c.c.length;){n=Wv(Rob(o),12);q=n.d.f;if(hX(q)==b){GV(a,b,h,n,h.b,n.d)}else if(!c||SW(q,c)){HV(a,b,h,d,n)}else{m=LV(a,b,c,n,h.b,bjb,g);m!=g&&(f.c[f.c.length]=m,true);m.c&&(g=m)}}}else{for(l=new Tob(h.e);l.a<l.c.c.length;){k=Wv(Rob(l),12);p=k.c.f;if(hX(p)==b){GV(a,b,h,k,k.c,h.b)}else if(!c||SW(p,c)){continue}else{m=LV(a,b,c,k,h.b,ajb,g);m!=g&&(f.c[f.c.length]=m,true);m.c&&(g=m)}}}}for(i=new Tob(f);i.a<i.c.c.length;){h=Wv(Rob(i),187);zU(b.b,h.a,0)!=-1||vU(b.b,h.a);h.c&&(e.c[e.c.length]=h,true)}}
	function TO(a){var b,c,d,e;b=a.e.j;for(d=new Tob(AW(a));d.a<d.c.c.length;){c=Wv(Rob(d),161);e=Wv(oW(c,(eM(),LL)),15);!e&&(e=new llb(0));switch(Wv(c.e,7).g.e){case 4:c.e.i.b=b.b*Ixb(Yv(oW(c,HO)));c.e.i.a=-c.e.j.a-e.a;break;case 2:c.e.i.b=b.b*Ixb(Yv(oW(c,HO)));c.e.i.a=b.a+e.a;break;case 1:c.e.i.a=b.a*Ixb(Yv(oW(c,HO)));c.e.i.b=-c.e.j.b-e.a;break;case 3:c.e.i.a=b.a*Ixb(Yv(oW(c,HO)));c.e.i.b=b.b+e.a;}switch(Wv(c.e,7).g.e){case 4:c.e.i.b=b.b*Ixb(Yv(oW(c,HO)));c.e.i.a=-c.e.j.a-e.a;break;case 2:c.e.i.b=b.b*Ixb(Yv(oW(c,HO)));c.e.i.a=b.a+e.a;break;case 1:c.e.i.a=b.a*Ixb(Yv(oW(c,HO)));c.e.i.b=-c.e.j.b-e.a;break;case 3:c.e.i.a=b.a*Ixb(Yv(oW(c,HO)));c.e.i.b=b.b+e.a;}}}
	function C2(a){var b,c,d,e,f,g,h,i,j;f=a.f;e=pr(Zdb(a));j=WI(Eo(a.g),0);while(j.b!=j.d.c){i=Wv(_ub(j),7);if(i.e.c.length==0){for(c=new Tob(i.b);c.a<c.c.c.length;){b=Wv(Rob(c),12);d=b.c;if(e.a.R(d)){g=new Fnb(f.f,0);h=(Bxb(g.b<g.d.Y()),Wv(g.d.sb(g.c=g.b++),7));while(h!=i){h=(Bxb(g.b<g.d.Y()),Wv(g.d.sb(g.c=g.b++),7))}Anb(g,d);$ub(j,d);J2(d,i.g);avb(j);avb(j);e.a.eb(d)!=null}}}else{for(c=new Tob(i.e);c.a<c.c.c.length;){b=Wv(Rob(c),12);d=b.d;if(e.a.R(d)){g=new Fnb(f.f,0);h=(Bxb(g.b<g.d.Y()),Wv(g.d.sb(g.c=g.b++),7));while(h!=i){h=(Bxb(g.b<g.d.Y()),Wv(g.d.sb(g.c=g.b++),7))}Bxb(g.b>0);g.a.sb(g.c=--g.b);Anb(g,d);$ub(j,d);J2(d,i.g);avb(j);avb(j);e.a.eb(d)!=null}}}}}
	function IP(b){var c,d,e,f,g,h,i,j,k;g=new Uu(b);f=Pu(g,'graph');j=Pu(g,'success');e=Pu(g,'error');h=Pu(g,'options');try{if(!f||!f.kc()){throw new $J("Mandatory parameter missing, 'graph' must be specified")}AQ(new CQ,f.kc(),h?h.kc():null);i=f.kc().a;!!j&&!!j.kc()?HP(j.kc().a,i):HP(null,i)}catch(a){a=OH(a);if(aw(a,73)){k=a;!!e&&!!e.kc()?HP(e.kc().a,DQ(k).a):HP(null,DQ(k).a)}else if(aw(a,54)){c=a;d=new Tu;Ru(d,'type',new lv(Ikb(c.$c)));c.bc()!=null?Ru(d,Dzb,new lv(c.bc())):Ru(d,Dzb,new lv('null (sic)'));Ru(d,Ezb,new lv(Hb(new Kb('\n'),new wnb(new opb((c.g==null&&(c.g=Pt(c)),c.g))))));!!e&&!!e.kc()?HP(e.kc().a,d.a):HP(null,d.a);at(c,(Fmb(),Dmb),'')}else throw NH(a)}}
	function e9(a,b,c){var d,e,f,g,h,i,j,k,l,m;if(c){d=-1;k=new Fnb(b,0);while(k.b<k.d.Y()){h=(Bxb(k.b<k.d.Y()),Wv(k.d.sb(k.c=k.b++),9));l=a.a[h.d.k][h.k].a;if(l==null){g=d+1;f=new Fnb(b,k.b);while(f.b<f.d.Y()){m=i9(a,(Bxb(f.b<f.d.Y()),Wv(f.d.sb(f.c=f.b++),9))).a;if(m!=null){g=(Dxb(m),m);break}}l=(d+g)/2;a.a[h.d.k][h.k].a=l;a.a[h.d.k][h.k].d=(Dxb(l),l);a.a[h.d.k][h.k].b=1}d=(Dxb(l),l)}}else{e=0;for(j=new Tob(b);j.a<j.c.c.length;){h=Wv(Rob(j),9);a.a[h.d.k][h.k].a!=null&&(e=Nlb(e,Ixb(a.a[h.d.k][h.k].a)))}e+=2;for(i=new Tob(b);i.a<i.c.c.length;){h=Wv(Rob(i),9);if(a.a[h.d.k][h.k].a==null){l=wvb(a.e,24)*FAb*e-1;a.a[h.d.k][h.k].a=l;a.a[h.d.k][h.k].d=l;a.a[h.d.k][h.k].b=1}}}}
	function RO(a,b,c){var d,e,f,g,h,i,j,k,l,m,n,o;i=0;j=0;o=0;n=0;g=0;m=0;l=0;k=0;for(f=new Lsb((new Fsb(a.c)).a);htb(f.a);){e=(f.b=itb(f.a),new Psb(f.c,f.b));d=Wv(e.b.b[e.a.e],62);switch(Wv(e.a,67).e){case 12:case 13:case 14:m+=d.c+b;break;case 15:case 16:case 17:l+=d.c+b;g=Nlb(g,d.b+b);break;case 18:case 19:case 20:k+=d.c+b;break;case 0:case 1:case 2:o+=d.c+b;break;case 3:case 4:case 5:n+=d.c+b;break;case 6:case 7:case 8:i+=d.b+b;break;case 9:case 10:case 11:j+=d.b+b;}}i-=b;j-=b;o-=b;n-=b;m+=m!=0?b:0;l+=l!=0?b:0;k+=k!=0?b:0;h=a.p.d+g+a.p.a;h+=h!=0?b:0;c.a=Nlb(c.a,o);c.a=Nlb(c.a,m);c.a=Nlb(c.a,l);c.a=Nlb(c.a,k);c.a=Nlb(c.a,n);c.b=Nlb(c.b,i);c.b=Nlb(c.b,h);c.b=Nlb(c.b,j)}
	function T9(a){var b,c,d,e,f,g,h,i;b=null;for(d=new Tob(a);d.a<d.c.c.length;){c=Wv(Rob(d),102);Ixb(W9(c.g,c.d[0]).a);c.b=null;if(!!c.e&&c.e.Y()>0&&c.c==0){!b&&(b=new GU);b.c[b.c.length]=c}}if(b){while(b.c.length!=0){c=Wv(AU(b,0),102);if(!!c.b&&c.b.c.length>0){for(f=(!c.b&&(c.b=new GU),new Tob(c.b));f.a<f.c.c.length;){e=Wv(Rob(f),102);if(Ixb(W9(e.g,e.d[0]).a)==Ixb(W9(c.g,c.d[0]).a)){if(zU(a,e,0)>zU(a,c,0)){return new RJ(e,c)}}else if(Ixb(W9(e.g,e.d[0]).a)>Ixb(W9(c.g,c.d[0]).a)){return new RJ(e,c)}}}for(h=(!c.e&&(c.e=new GU),c.e).mb();h.G();){g=Wv(h.H(),102);i=(!g.b&&(g.b=new GU),g.b);Fxb(0,i.c.length);fxb(i.c,0,c);g.c==i.c.length&&(b.c[b.c.length]=g,true)}}}return null}
	function R0(a){var b,c,d,e,f,g,h,i,j,k,l,m,n,o,p;l=(mp(),new ntb);for(k=(Il(),new Im(Dl(ul(a.a,new yl))));Cm(k);){j=Wv(Dm(k),9);e=Q0(j,(sN(),ZM));for(d=new Tob(e);d.a<d.c.c.length;){c=Wv(Rob(d),7);for(g=new Tob(c.e);g.a<g.c.c.length;){f=Wv(Rob(g),12);kP();p=f.d.f;(p.g==(CX(),zX)||p.g==yX)&&(p=Wv(rJ(p,(Rib(),rib)),7).f);if(Ktb(l.d,p)){b=Wv(re(Ktb(l.d,p)),171)}else{e.c.length==2?gw(c)===gw((Cxb(0,e.c.length),e.c[0]))?(b=gP):(b=hP):(b=gP);Ltb(l.d,p,b)}for(i=new Tob(f.b);i.a<i.c.c.length;){h=Wv(Rob(i),33);sJ(h,(Rib(),pib),b)}for(o=new Tob(f.c.c);o.a<o.c.c.length;){m=Wv(Rob(o),33);sJ(m,(Rib(),pib),b)}for(n=new Tob(f.d.c);n.a<n.c.c.length;){m=Wv(Rob(n),33);sJ(m,(Rib(),pib),b)}}}}}
	function lZ(a,b){var c,d,e,f,g,h,i,j,k;if(tl(mX(b))!=1||Wv(ql(mX(b)),12).d.f.g!=(CX(),zX)){return null}f=Wv(ql(mX(b)),12);c=f.d.f;sX(c,(CX(),wX));sJ(c,(Rib(),qib),null);sJ(c,rib,null);sJ(c,(eM(),TL),Wv(rJ(b,TL),28));sJ(c,JL,Wv(rJ(b,JL),86));e=rJ(f.c,uib);g=null;for(j=nX(c,(sN(),ZM)).mb();j.G();){h=Wv(j.H(),7);if(h.e.c.length!=0){sJ(h,uib,e);k=f.c;h.j.a=k.j.a;h.j.b=k.j.b;h.a.a=k.a.a;h.a.b=k.a.b;xU(h.c,k.c);k.c.c=xv(UF,syb,1,0,4,1);g=h;break}}sJ(f.c,uib,null);if(!sl(nX(b,ZM))){for(i=new Tob(Ao(nX(b,ZM)));i.a<i.c.c.length;){h=Wv(Rob(i),7);if(h.e.c.length==0){d=new RX;QX(d,ZM);d.j.a=h.j.a;d.j.b=h.j.b;PX(d,c);sJ(d,uib,rJ(h,uib));PX(h,null)}else{PX(g,c)}}}c.j.b=b.j.b;vU(a.b,c);return c}
	function _O(a){var b,c,d,e,f,g,h,i,j;f=a.e.e.j;g=new II(f);i=Wv(oW(a.e,(eM(),aM)),86);j=Wv(oW(a.e,bM),86);h=Wv(oW(a.e,TL),28);b=Zsb(i,(DN(),CN));if(i.c==0){return}f.a=0;f.b=0;d=null;switch(h.e){case 1:case 2:case 3:d=MO(a,a.k);break;case 4:d=new II(g);break;case 5:d=KO(a.e,b);}if(Zsb(i,BN)){if(d){f.a=Nlb(f.a,d.a);f.b=Nlb(f.b,d.b)}if(b){f.a=Nlb(f.a,a.q.b+a.q.c+a.k);f.b=Nlb(f.b,a.q.d+a.q.a+a.k)}}Zsb(i,AN)&&Qob(new Tob(zW(a.e)))&&RO(a,a.d,f);if(Zsb(i,zN)){e=Wv(oW(a.e,IL),15).a;c=Wv(oW(a.e,HL),15).a;if(Zsb(j,(MN(),KN))){e<=0&&(e=20);c<=0&&(c=20)}if(Zsb(j,LN)){e>0&&(f.a=Nlb(f.a,e+a.q.b+a.q.c));c>0&&(f.b=Nlb(f.b,c+a.q.d+a.q.a))}else{e>0&&(f.a=Nlb(f.a,e));c>0&&(f.b=Nlb(f.b,c))}}pW(a.e,f)}
	function ewb(a,b,c){var d,e,f,g,h,i,j,k,l,m,n;if(!a.b){return false}g=null;m=null;i=new ywb(null,null);e=1;i.a[1]=a.b;l=i;while(l.a[e]){j=e;h=m;m=l;l=l.a[e];d=a.a.$b(b,l.d);e=d<0?0:1;d==0&&(!c.c||ovb(l.e,c.d))&&(g=l);if(!(!!l&&l.b)&&!awb(l.a[e])){if(awb(l.a[1-e])){m=m.a[j]=hwb(l,e)}else if(!awb(l.a[1-e])){n=m.a[1-j];if(n){if(!awb(n.a[1-j])&&!awb(n.a[j])){m.b=false;n.b=true;l.b=true}else{f=h.a[1]==m?1:0;awb(n.a[j])?(h.a[f]=gwb(m,j)):awb(n.a[1-j])&&(h.a[f]=hwb(m,j));l.b=h.a[f].b=true;h.a[f].a[0].b=false;h.a[f].a[1].b=false}}}}}if(g){c.b=true;c.d=g.e;if(l!=g){k=new ywb(l.d,l.e);fwb(a,i,g,k);m==g&&(m=k)}m.a[m.a[1]==l?1:0]=l.a[!l.a[0]?1:0];--a.c}a.b=i.a[1];!!a.b&&(a.b.b=false);return c.b}
	function v$(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s;d=Wv(rJ(a,(eM(),TL)),28);i=a.e;h=a.a;c=Wv(rJ(a,(Rib(),Xhb)),15).a;j=i.a+h.b+h.c+2*c;k=0-h.d-c-a.d.b;n=i.b+h.d+h.a+2*c-a.d.b;l=new GU;o=new GU;for(f=(m=(new Snb(b.a)).a.bb().mb(),new Ynb(m));f.a.G();){e=(g=Wv(f.a.H(),21),Wv(g.yb(),9));switch(d.e){case 1:case 2:case 3:m$(e);break;case 4:p=Wv(rJ(e,SL),10);q=!p?0:p.a;e.i.a=j*Ixb(Yv(rJ(e,Cib)))-q;fX(e,true,false);break;case 5:r=Wv(rJ(e,SL),10);s=!r?0:r.a;e.i.a=Ixb(Yv(rJ(e,Cib)))-s;fX(e,true,false);i.a=Nlb(i.a,e.i.a+e.j.a/2);}switch(Wv(rJ(e,hib),32).e){case 1:e.i.b=k;l.c[l.c.length]=e;break;case 3:e.i.b=n;o.c[o.c.length]=e;}}switch(d.e){case 1:case 2:o$(l,a);o$(o,a);break;case 3:t$(l,a);t$(o,a);}}
	function OY(a){var b,c,d,e,f,g;d=Wv(rJ(a.a.g,(eM(),JL)),86);if(jf(d,(oM(),b=Wv(Hkb(Gz),11),new atb(b,Wv(exb(b,b.length),11),0))));else if(Xe(d,Usb(gM))){c=Wv(Wv(Dd(a.a.b,a.b),20).sb(0),33);a.b.i.a=c.i.a;a.b.i.b=c.i.b}else if(Xe(d,Usb(iM))){e=Wv(yU(a.a.c,a.a.c.c.length-1),9);f=Wv(Wv(Dd(a.a.b,a.b),20).sb(Wv(Dd(a.a.b,a.b),20).Y()-1),33);g=e.j.a-(f.i.a+f.j.a);a.b.i.a=a.a.g.j.a-g-a.b.j.a;a.b.i.b=f.i.b}else if(Xe(d,Vsb(mM,Bv(tv(Gz,1),uyb,41,0,[fM])))){c=Wv(Wv(Dd(a.a.b,a.b),20).sb(0),33);a.b.i.a=(a.a.g.j.a-a.b.j.a)/2;a.b.i.b=c.i.b}else if(Xe(d,Usb(mM))){c=Wv(Wv(Dd(a.a.b,a.b),20).sb(0),33);a.b.i.b=c.i.b}else if(Xe(d,Usb(fM))){c=Wv(Wv(Dd(a.a.b,a.b),20).sb(0),33);a.b.i.a=(a.a.g.j.a-a.b.j.a)/2;a.b.i.b=c.i.b}return null}
	function NZ(a){var b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q;for(o=new Tob(a);o.a<o.c.c.length;){n=Wv(Rob(o),9);MZ(n.i);MZ(n.j);PZ(n);RZ(n);for(q=new Tob(n.f);q.a<q.c.c.length;){p=Wv(Rob(q),7);MZ(p.i);MZ(p.a);MZ(p.j);QX(p,QZ(p.g));f=Wv(rJ(p,(eM(),UL)),24);!!f&&sJ(p,UL,Elb(-f.a));for(e=new Tob(p.e);e.a<e.c.c.length;){d=Wv(Rob(e),12);for(c=WI(d.a,0);c.b!=c.d.c;){b=Wv(_ub(c),10);MZ(b)}i=Wv(rJ(d,CL),44);if(i){for(h=WI(i,0);h.b!=h.d.c;){g=Wv(_ub(h),10);MZ(g)}}for(l=new Tob(d.b);l.a<l.c.c.length;){j=Wv(Rob(l),33);MZ(j.i);MZ(j.j)}}for(m=new Tob(p.c);m.a<m.c.c.length;){j=Wv(Rob(m),33);MZ(j.i);MZ(j.j)}}if(n.g==(CX(),xX)){sJ(n,(Rib(),hib),QZ(Wv(rJ(n,hib),32)));OZ(n)}for(k=new Tob(n.c);k.a<k.c.c.length;){j=Wv(Rob(k),33);MZ(j.j);MZ(j.i)}}}
	function YP(a,b,c,d){var e,f,g,h,i,j,k,l,m,n,o,p,q,r,s;TP(c);if(SW(b.d.f,b.c.f)){k=b.c;l=MI(Bv(tv(qz,1),Fzb,10,0,[k.i,k.a]));j=k.f.b;uI(l,-j.b,-j.d);l.a-=d.a;l.b-=d.b}else{l=MX(b.c)}l.a+=d.a;l.b+=d.b;m=new Tu;VP(a,m,'x',l.a);VP(a,m,'y',l.b);Ru(c,'sourcePoint',m);n=MX(b.d);rJ(b,(Rib(),Pib))!=null&&vI(n,Wv(rJ(b,Pib),10));vI(n,d);o=new Tu;VP(a,o,'x',n.a);VP(a,o,'y',n.b);Ru(c,'targetPoint',o);e=new ju;s=hJ(b.a,d);f=0;for(r=WI(s,0);r.b!=r.d.c;){p=Wv(_ub(r),10);i=new Tu;VP(a,i,'x',p.a);VP(a,i,'y',p.b);hu(e,f++,i)}s.b==0?Ru(c,Hzb,null):Ru(c,Hzb,e);g=Wv(rJ(b,(eM(),CL)),44);f=0;if(g){hJ(g,d);h=new ju;for(q=WI(g,0);q.b!=q.d.c;){p=Wv(_ub(q),10);i=new Tu;VP(a,i,'x',p.a);VP(a,i,'y',p.b);hu(h,f++,i)}Ru(c,Izb,h)}else{Ru(c,Izb,null)}}
	function pZ(a,b,c,d){var e,f,g,h,i,j,k,l,m,n,o,p,q,r;p=a.i;q=a.j;m=a.e;if(b){l=d/2*(b.Y()-1);n=0;for(j=b.mb();j.G();){h=Wv(j.H(),9);l+=h.j.a;n=Nlb(n,h.j.b)}r=p.a-(l-q.a)/2;g=p.b-m.d+n;e=q.a/(b.Y()+1);f=e;for(i=b.mb();i.G();){h=Wv(i.H(),9);h.i.a=r;h.i.b=g-h.j.b;r+=h.j.a+d/2;k=oZ(h);k.i.a=h.j.a/2-k.a.a;k.i.b=h.j.b;o=Wv(rJ(h,(Rib(),Zhb)),7);if(o.b.c.length+o.e.c.length==1){o.i.a=f-o.a.a;o.i.b=0;PX(o,a)}f+=e}}if(c){l=d/2*(c.Y()-1);n=0;for(j=c.mb();j.G();){h=Wv(j.H(),9);l+=h.j.a;n=Nlb(n,h.j.b)}r=p.a-(l-q.a)/2;g=p.b+q.b+m.a-n;e=q.a/(c.Y()+1);f=e;for(i=c.mb();i.G();){h=Wv(i.H(),9);h.i.a=r;h.i.b=g;r+=h.j.a+d/2;k=oZ(h);k.i.a=h.j.a/2-k.a.a;k.i.b=0;o=Wv(rJ(h,(Rib(),Zhb)),7);if(o.b.c.length+o.e.c.length==1){o.i.a=f-o.a.a;o.i.b=q.b;PX(o,a)}f+=e}}}
	function Jab(a,b,c,d,e){var f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w;w=0;n=0;for(l=new Tob(b.f);l.a<l.c.c.length;){k=Wv(Rob(l),9);m=0;h=0;i=c?Wv(rJ(k,Fab),24).a:eyb;r=d?Wv(rJ(k,Gab),24).a:eyb;j=i>r?i:r;for(t=new Tob(k.f);t.a<t.c.c.length;){s=Wv(Rob(t),7);u=k.i.b+s.i.b+s.a.b;if(d){for(g=new Tob(s.e);g.a<g.c.c.length;){f=Wv(Rob(g),12);p=f.d;o=p.f;if(b!=a.a[o.k]){q=Plb(Wv(rJ(o,Fab),24).a,Wv(rJ(o,Gab),24).a);v=Wv(rJ(f,(Rib(),Eib)),24).a;if(v>=j&&v>=q){m+=o.i.b+p.i.b+p.a.b-u;++h}}}}if(c){for(g=new Tob(s.b);g.a<g.c.c.length;){f=Wv(Rob(g),12);p=f.c;o=p.f;if(b!=a.a[o.k]){q=Plb(Wv(rJ(o,Fab),24).a,Wv(rJ(o,Gab),24).a);v=Wv(rJ(f,(Rib(),Eib)),24).a;if(v>=j&&v>=q){m+=o.i.b+p.i.b+p.a.b-u;++h}}}}}if(h>0){w+=m/h;++n}}if(n>0){b.a=e*w/n;b.i=n}else{b.a=0;b.i=0}}
	function Kab(a,b,c,d){var e,f,g,h,i,j,k,l,m,n,o,p,q,r,s;n=b.c.length;m=0;for(l=new Tob(a.c);l.a<l.c.c.length;){k=Wv(Rob(l),16);r=k.a;if(r.c.length==0){continue}q=new Tob(r);j=0;s=null;e=Wv(Rob(q),9);while(e){f=Wv(yU(b,e.k),111);if(f.c>=0){i=null;h=new Fnb(k.a,j+1);while(h.b<h.d.Y()){g=(Bxb(h.b<h.d.Y()),Wv(h.d.sb(h.c=h.b++),9));i=Wv(yU(b,g.k),111);if(i.d==f.d&&i.c<f.c){break}else{i=null}}if(i){if(s){DU(d,e.k,Elb(Wv(yU(d,e.k),24).a-1));Wv(yU(c,s.k),20).nb(f)}f=Vab(f,e,n++);b.c[b.c.length]=f;vU(c,new GU);if(s){Wv(yU(c,s.k),20).ib(f);vU(d,Elb(1))}else{vU(d,Elb(0))}}}o=null;if(q.a<q.c.c.length){o=Wv(Rob(q),9);p=Wv(yU(b,o.k),111);Wv(yU(c,e.k),20).ib(p);DU(d,o.k,Elb(Wv(yU(d,o.k),24).a+1))}f.d=m;f.c=j++;s=e;e=o}++m}Ckb(Ixb(Xv(rJ(a,(eM(),rL)))))&&undefined}
	function gS(a,b){var c;if(a.e){throw new ulb((Gkb(nA),'The '+nA.j+Yzb))}if(!MR(a.a,b)){throw new gt('The direction '+b+' is not supported by the CGraph instance.')}if(b==a.d){return a}c=a.d;a.d=b;switch(c.e){case 0:switch(b.e){case 2:dS(a);break;case 1:kS(a);dS(a);break;case 4:qS(a);dS(a);break;case 3:qS(a);kS(a);dS(a);}break;case 2:switch(b.e){case 1:kS(a);lS(a);break;case 4:qS(a);dS(a);break;case 3:qS(a);kS(a);dS(a);}break;case 1:switch(b.e){case 2:kS(a);lS(a);break;case 4:kS(a);qS(a);dS(a);break;case 3:kS(a);qS(a);kS(a);dS(a);}break;case 4:switch(b.e){case 2:qS(a);dS(a);break;case 1:qS(a);kS(a);dS(a);break;case 3:kS(a);lS(a);}break;case 3:switch(b.e){case 2:kS(a);qS(a);dS(a);break;case 1:kS(a);qS(a);kS(a);dS(a);break;case 4:kS(a);lS(a);}}return a}
	function c9(a,b,c){var d,e,f,g,h,i,j,k,l;if(a.a[b.d.k][b.k].e){return}else{a.a[b.d.k][b.k].e=true}a.a[b.d.k][b.k].b=0;a.a[b.d.k][b.k].d=0;a.a[b.d.k][b.k].a=null;for(k=new Tob(b.f);k.a<k.c.c.length;){j=Wv(Rob(k),7);l=c?new fY(j):new lY(j);for(i=l.mb();i.G();){h=Wv(i.H(),7);g=h.f;if(g.d==b.d){if(g!=b){c9(a,g,c);a.a[b.d.k][b.k].b+=a.a[g.d.k][g.k].b;a.a[b.d.k][b.k].d+=a.a[g.d.k][g.k].d}}else{a.a[b.d.k][b.k].d+=a.d[h.k];++a.a[b.d.k][b.k].b}}}f=Wv(rJ(b,(Rib(),Shb)),20);if(f){for(e=f.mb();e.G();){d=Wv(e.H(),9);if(b.d==d.d){c9(a,d,c);a.a[b.d.k][b.k].b+=a.a[d.d.k][d.k].b;a.a[b.d.k][b.k].d+=a.a[d.d.k][d.k].d}}}if(a.a[b.d.k][b.k].b>0){a.a[b.d.k][b.k].d+=wvb(a.e,24)*FAb*0.07000000029802322-0.03500000014901161;a.a[b.d.k][b.k].a=a.a[b.d.k][b.k].d/a.a[b.d.k][b.k].b}}
	function Sbb(a,b){var c,d,e,f,g,h,i,j,k,l,m;for(e=new Tob(a.a.c);e.a<e.c.c.length;){c=Wv(Rob(e),16);for(i=new Tob(c.a);i.a<i.c.c.length;){h=Wv(Rob(i),9);b.i[h.k]=h;b.g[h.k]=b.k==(Lbb(),Kbb)?Vzb:Uzb}}g=a.a.c;b.c==(Gbb(),Ebb)&&(g=aw(g,87)?Ii(Wv(g,87)):aw(g,88)?Wv(g,88).a:aw(g,63)?new ap(g):new Ro(g));Acb(a.e,b,a.b);bpb(b.n);for(f=g.mb();f.G();){c=Wv(f.H(),16);j=c.a;b.k==(Lbb(),Kbb)&&(j=aw(j,87)?Ii(Wv(j,87)):aw(j,88)?Wv(j,88).a:aw(j,63)?new ap(j):new Ro(j));for(m=j.mb();m.G();){l=Wv(m.H(),9);b.f[l.k]==l&&Tbb(a,l,b)}}Ubb(a,b);for(d=g.mb();d.G();){c=Wv(d.H(),16);for(m=new Tob(c.a);m.a<m.c.c.length;){l=Wv(Rob(m),9);b.n[l.k]=b.n[b.f[l.k].k];if(l==b.f[l.k]){k=Ixb(b.g[b.i[l.k].k]);(b.k==(Lbb(),Kbb)&&k>Vzb||b.k==Jbb&&k<Uzb)&&(b.n[l.k]=Ixb(b.n[l.k])+k)}}}a.e.Jc()}
	function NQ(a,b){var c,d,e,f,g,h,i,j,k,l,m;pJ(b,Bv(tv(rz,1),syb,79,0,[(Rib(),Jib),Xhb,(Mjb(),Kjb),Rhb]));j=Wv(rJ(b,Jib),15).a;Wv(rJ(b,qjb),15).a*j<2&&sJ(b,qjb,new llb(2/j));k=Wv(rJ(b,(eM(),sL)),59);k==(sK(),qK)&&sJ(b,sL,PW(b));l=Wv(rJ(b,Hjb),24);l.a==0?sJ(b,Gib,new yvb):sJ(b,Gib,new zvb(l.a));m=new $jb(b);sJ(b,Kib,m);e=KQ(a,Wv(rJ(b,ljb),180));h=KQ(a,Wv(rJ(b,zjb),180));d=KQ(a,Wv(rJ(b,kjb),180));i=KQ(a,Wv(rJ(b,Ajb),180));f=KQ(a,Ocb(Wv(rJ(b,eib),122)));g=new WQ;sJ(b,_hb,g);QQ(QQ(QQ(QQ(QQ(QQ(g,e.qc(b)),h.qc(b)),d.qc(b)),i.qc(b)),f.qc(b)),MQ(b));c=(Mh(30,Vyb),new HU(30));sJ(b,Fib,c);xU(c,LQ(a,g,0));c.c[c.c.length]=e;xU(c,LQ(a,g,1));c.c[c.c.length]=h;xU(c,LQ(a,g,2));c.c[c.c.length]=d;xU(c,LQ(a,g,3));c.c[c.c.length]=i;xU(c,LQ(a,g,4));c.c[c.c.length]=f;xU(c,LQ(a,g,5))}
	function YO(a,b){var c,d,e,f,g,h;f=Li(DW(a));if(f.Nb().V()){return}e=Wv(rJ(Wv(Wv(Wv(f.Nb().sb(0),129),224).e,33),(kP(),iP)),171);e=e==jP?hP:e;h=0;switch(Wv(a.e,7).g.e){case 4:case 2:e==hP&&(h=a.e.j.b);break;case 3:h=a.e.j.b;}(Wv(a.e,7).g==(sN(),$M)||e==gP)&&(f=Ii(f));for(d=Xl(f.Nb().mb());d.G();){c=Wv(d.H(),129);g=new II(c.e.i);if(e==gP){switch(Wv(a.e,7).g.e){case 1:case 4:g.a=-c.e.j.a-b;g.b=h-b-c.e.j.b;h-=b+c.e.j.b;break;case 2:g.a=a.e.j.a+b;g.b=h-b-c.e.j.b;h-=b+c.e.j.b;break;case 3:g.a=-c.e.j.a-b;g.b=h+b;h+=b+c.e.j.b;}}else{switch(Wv(a.e,7).g.e){case 4:g.a=-c.e.j.a-b;g.b=h+b;h+=b+c.e.j.b;break;case 2:g.a=a.e.j.a+b;g.b=h+b;h+=b+c.e.j.b;break;case 1:g.a=a.e.j.a+b;g.b=h-b-c.e.j.b;h-=b+c.e.j.b;break;case 3:g.a=a.e.j.a+b;g.b=h+b;h+=b+c.e.j.b;}}c.e.i.a=g.a;c.e.i.b=g.b}}
	function fab(a,b,c){var d,e,f,g,h,i,j,k,l,m,n;d=0;e=0;for(k=0;k<a.length;k++){i=a[k];if(LM(Wv(rJ(i,(eM(),TL)),28))){for(g=nX(i,(sN(),ZM)).mb();g.G();){f=Wv(g.H(),7);if(f.b.c.length+f.e.c.length>0){d+=f.b.c.length+f.e.c.length;Umb(b,f,Elb(d))}}}else{for(h=nX(i,(sN(),ZM)).mb();h.G();){f=Wv(h.H(),7);d+=f.b.c.length+f.e.c.length}for(g=nX(i,ZM).mb();g.G();){f=Wv(g.H(),7);f.b.c.length+f.e.c.length>0&&Umb(b,f,Elb(d))}}}for(j=a.length-1;j>=0;j--){i=a[j];if(LM(Wv(rJ(i,(eM(),TL)),28))){for(m=nX(i,(sN(),rN)).mb();m.G();){l=Wv(m.H(),7);if(l.b.c.length+l.e.c.length>0){e+=l.b.c.length+l.e.c.length;Umb(c,l,Elb(e))}}}else{for(n=nX(i,(sN(),rN)).mb();n.G();){l=Wv(n.H(),7);e+=l.b.c.length+l.e.c.length}for(m=nX(i,rN).mb();m.G();){l=Wv(m.H(),7);l.b.c.length+l.e.c.length>0&&Umb(c,l,Elb(e))}}}}
	function wfb(a,b,c,d,e){var f,g,h,i,j,k,l,m,n,o,p,q,r;m=sgb(a.g);o=sgb(b.g);n=vI(xI(a.i),a.a);p=vI(xI(b.i),b.a);i=vI(new HI(n.a,n.b),CI(new GI(m),1.3*c));q=vI(new HI(p.a,p.b),CI(new GI(o),1.3*d));h=Jlb(i.a-q.a);h<e&&(a.g==(sN(),rN)||a.g==ZM?i.a<q.a?(i.a=q.a-e):(i.a=q.a+e):i.a<q.a?(q.a=i.a+e):(q.a=i.a-e));f=0;g=0;switch(a.g.e){case 4:f=2*(n.a-c)-0.5*(i.a+q.a);break;case 2:f=2*(n.a+c)-0.5*(i.a+q.a);break;case 1:g=2*(n.b-c)-0.5*(i.b+q.b);break;case 3:g=2*(n.b+c)-0.5*(i.b+q.b);}switch(b.g.e){case 4:f=2*(p.a-d)-0.5*(q.a+i.a);break;case 2:f=2*(p.a+d)-0.5*(q.a+i.a);break;case 1:g=2*(p.b-d)-0.5*(q.b+i.b);break;case 3:g=2*(p.b+d)-0.5*(q.b+i.b);}l=new HI(f,g);k=new ufb(Bv(tv(qz,1),Fzb,10,0,[n,i,l,q,p]));j=ifb(k);r=jfb(k);k.a=j;bfb(k,new Ffb(Bv(tv(qz,1),Fzb,10,0,[j,r,n,p])));return k}
	function p$(a,b,c){var d,e,f,g,h,i,j,k,l,m,n,o,p,q;i=c.a;e=Wv(rJ(c,(Rib(),Xhb)),15).a;o=c.d;h=(d=Wv(rJ(c,Xhb),15).a,new HI(c.e.a+c.a.b+c.a.c+2*d,c.e.b+c.a.d+c.a.a+2*d));j=h.b;for(m=new Tob(a.a);m.a<m.c.c.length;){k=Wv(Rob(m),9);if(k.g!=(CX(),xX)){continue}f=Wv(rJ(k,hib),32);g=Wv(rJ(k,iib),10);n=k.i;switch(f.e){case 2:n.a=c.e.a+e+i.c-o.a;break;case 4:n.a=-o.a-e-i.b;}q=0;switch(f.e){case 2:case 4:if(b==(KM(),GM)){p=Ixb(Yv(rJ(k,Cib)));n.b=h.b*p-Wv(rJ(k,(eM(),SL)),10).b;q=n.b+g.b;fX(k,false,true)}else if(b==FM){n.b=Ixb(Yv(rJ(k,Cib)))-Wv(rJ(k,(eM(),SL)),10).b;q=n.b+g.b;fX(k,false,true)}}j=j>q?j:q}c.e.b+=j-h.b;for(l=new Tob(a.a);l.a<l.c.c.length;){k=Wv(Rob(l),9);if(k.g!=(CX(),xX)){continue}f=Wv(rJ(k,hib),32);n=k.i;switch(f.e){case 1:n.b=-o.b-e-i.d;break;case 3:n.b=c.e.b+e+i.a-o.b;}}}
	function $Y(a){var b,c,d,e,f,g,h,i,j,k,l,m,n,o;e=new GU;for(i=new Tob(a.d.f);i.a<i.c.c.length;){g=Wv(Rob(i),7);g.g==(sN(),ZM)&&(e.c[e.c.length]=g,true)}if(a.e.a==(sK(),pK)&&!MM(Wv(rJ(a.d,(eM(),TL)),28))){for(d=Uh(mX(a.d));Cm(d);){c=Wv(Dm(d),12);vU(e,c.c)}}f=a.d.j.a;sJ(a.d,(Rib(),Whb),new llb(a.d.j.a));a.d.j.a=a.c;sJ(a.d,Vhb,(xkb(),xkb(),wkb));vU(a.b,a.d);j=a.d;f-=a.c;k=a.a;while(k>1){b=Qlb(f,a.c);j=(l=new uX(a.e.c),sX(l,(CX(),wX)),sJ(l,(eM(),TL),Wv(rJ(j,TL),28)),sJ(l,JL,Wv(rJ(j,JL),86)),l.k=a.e.b++,vU(a.b,l),l.j.b=j.j.b,l.j.a=b,m=new RX,QX(m,(sN(),ZM)),PX(m,j),m.i.a=l.j.a,m.i.b=l.j.b/2,n=new RX,QX(n,rN),PX(n,l),n.i.b=l.j.b/2,n.i.a=-n.j.a,o=new hW,dW(o,m),eW(o,n),l);vU(a.e.c.b,j);--k;f-=a.c+a.e.d}new HY(a.d,a.b,a.c);for(h=new Tob(e);h.a<h.c.c.length;){g=Wv(Rob(h),7);BU(a.d.f,g);PX(g,j)}}
	function Qfb(a,b){var c,d,e,f,g,h,i,j,k,l,m,n;if(a.p>b.a||b.p>a.a){return}c=0;d=0;for(l=(g=(new Snb(a.o.a)).a.bb().mb(),new Ynb(g));l.a.G();){j=(e=Wv(l.a.H(),21),Wv(e.yb(),7));qgb(MI(Bv(tv(qz,1),Fzb,10,0,[j.f.i,j.i,j.a])).b,b.p,b.a)&&++c}for(m=(h=(new Snb(a.g.a)).a.bb().mb(),new Ynb(h));m.a.G();){j=(e=Wv(m.a.H(),21),Wv(e.yb(),7));qgb(MI(Bv(tv(qz,1),Fzb,10,0,[j.f.i,j.i,j.a])).b,b.p,b.a)&&--c}for(n=(i=(new Snb(b.o.a)).a.bb().mb(),new Ynb(i));n.a.G();){j=(e=Wv(n.a.H(),21),Wv(e.yb(),7));qgb(MI(Bv(tv(qz,1),Fzb,10,0,[j.f.i,j.i,j.a])).b,a.p,a.a)&&++d}for(k=(f=(new Snb(b.g.a)).a.bb().mb(),new Ynb(f));k.a.G();){j=(e=Wv(k.a.H(),21),Wv(e.yb(),7));qgb(MI(Bv(tv(qz,1),Fzb,10,0,[j.f.i,j.i,j.a])).b,a.p,a.a)&&--d}if(c<d){new bgb(a,b,d-c)}else if(d<c){new bgb(b,a,c-d)}else{new bgb(b,a,0);new bgb(a,b,0)}}
	function $jb(a){var b;this.f=Wv(rJ(a,(Rib(),Jib)),15).a;this.d=Wv(rJ(a,(Mjb(),Ejb)),15).a;this.a=this.f*Wv(rJ(a,qjb),15).a;this.b=this.f*Wv(rJ(a,pjb),15).a;Wv(rJ(a,Dib),15);this.c=Wv(rJ(a,Dib),15).a;this.e=Wv(rJ(a,(eM(),DL)),15).a;b=(CX(),Bv(tv(pB,1),uyb,132,0,[AX,zX,xX,BX,yX,wX])).length;this.g=vv(lw,[Txb,tAb],[250,26],12,[b,b],2);Yjb(this,AX,this.f);Zjb(this,AX,zX,this.b);Zjb(this,AX,BX,this.b);Zjb(this,AX,xX,this.c);Zjb(this,AX,yX,this.b);Zjb(this,AX,wX,this.b);Yjb(this,zX,this.a);Zjb(this,zX,BX,this.a);Zjb(this,zX,xX,this.c);Zjb(this,zX,yX,this.e);Zjb(this,zX,wX,this.b);Yjb(this,BX,this.a);Zjb(this,BX,xX,this.c);Zjb(this,BX,yX,this.e);Zjb(this,BX,wX,this.b);Yjb(this,xX,this.c);Zjb(this,xX,yX,this.c);Zjb(this,xX,wX,this.c);Yjb(this,yX,this.e);Zjb(this,yX,wX,this.e);Yjb(this,wX,this.f)}
	function mZ(a,b){var c,d,e,f,g,h,i,j,k;if(tl(iX(b))!=1||Wv(ql(iX(b)),12).c.f.g!=(CX(),zX)){return null}c=Wv(ql(iX(b)),12);d=c.c.f;sX(d,(CX(),AX));sJ(d,(Rib(),qib),null);sJ(d,rib,null);sJ(d,Whb,Wv(rJ(b,Whb),15));sJ(d,Vhb,(xkb(),xkb(),wkb));sJ(d,uib,rJ(b,uib));d.j.b=b.j.b;f=rJ(c.d,uib);g=null;for(j=nX(d,(sN(),rN)).mb();j.G();){h=Wv(j.H(),7);if(h.b.c.length!=0){sJ(h,uib,f);k=c.d;h.j.a=k.j.a;h.j.b=k.j.b;h.a.a=k.a.a;h.a.b=k.a.b;xU(h.c,k.c);k.c.c=xv(UF,syb,1,0,4,1);g=h;break}}sJ(c.d,uib,null);if(tl(nX(b,rN))>1){for(i=WI(Eo(nX(b,rN)),0);i.b!=i.d.c;){h=Wv(_ub(i),7);if(h.b.c.length==0){e=new RX;QX(e,rN);e.j.a=h.j.a;e.j.b=h.j.b;PX(e,d);sJ(e,uib,rJ(h,uib));PX(h,null)}else{PX(g,d)}}}sJ(b,uib,null);sJ(b,Vhb,(null,vkb));sX(b,wX);sJ(d,(eM(),TL),Wv(rJ(b,TL),28));sJ(d,JL,Wv(rJ(b,JL),86));uU(a.b,0,d);return d}
	function NW(a,b,c,d,e,f,g){var h,i,j,k,l,m;l=c;j=new uX(g);sX(j,(CX(),xX));sJ(j,(Rib(),iib),e);sJ(j,(eM(),TL),(KM(),FM));sJ(j,tib,Wv(rJ(a,LL),15));i=Wv(rJ(a,SL),10);!i&&(i=new HI(e.a/2,e.b/2));sJ(j,SL,i);k=new RX;PX(k,j);if(!(b!=IM&&b!=JM)){h=f!=(sK(),qK)?f:pK;d>0?(l=vN(h)):(l=tN(vN(h)));sJ(a,WL,l)}switch(l.e){case 4:sJ(j,(Mjb(),vjb),(Xib(),Tib));sJ(j,dib,(Hgb(),Ggb));j.j.b=e.b;QX(k,(sN(),ZM));k.i.b=i.b;break;case 2:sJ(j,(Mjb(),vjb),(Xib(),Vib));sJ(j,dib,(Hgb(),Egb));j.j.b=e.b;QX(k,(sN(),rN));k.i.b=i.b;break;case 1:sJ(j,mib,(Hhb(),Ghb));j.j.a=e.a;QX(k,(sN(),pN));k.i.a=i.a;break;case 3:sJ(j,mib,(Hhb(),Ehb));j.j.a=e.a;QX(k,(sN(),$M));k.i.a=i.a;}if(b==EM||b==GM||b==FM){m=0;switch(l.e){case 4:case 2:m=null.cd;b==GM&&(m/=null.cd);break;case 1:case 3:m=null.cd;b==GM&&(m/=null.cd);}sJ(j,Cib,m)}sJ(j,hib,l);return j}
	function LP(a){var b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t;j=new jJ;r=(mp(),new ntb);Umb(r,a,MP(a));d=(Mh(2,Vyb),new HU(2));!!a.c&&vU(d,a.c);!!a.d&&vU(d,a.d);for(n=new Tob(d);n.a<n.c.c.length;){m=Wv(Rob(n),7);b=new aJ;Ue(b,Ao(Sh((Gi(),new gr(Ti(Bv(tv(UF,1),syb,1,4,[m.b,m.e])))))));Ve(b,a,true);if(b.b!=0){t=Wv(re(Ktb(r.d,a)),34);if(m==a.d){o=t[t.length-1];s=true}else{o=t[0];s=false}for(i=1;i<t.length;i++){s?(p=t[t.length-1-i]):(p=t[i]);c=WI(b,0);while(c.b!=c.d.c){k=Wv(_ub(c),12);l=Wv(re(Ktb(r.d,k)),34);if(l==null){l=MP(k);Ltb(r.d,k,l)}if(l.length<=i){bvb(c)}else{s?(q=l[l.length-1-i]):(q=l[i]);if(p.a!=q.a||p.b!=q.b){e=p.a-o.a;g=p.b-o.b;f=q.a-o.a;h=q.b-o.b;f*g==h*e&&NP(e)==NP(f)&&NP(g)==NP(h)?((e<=0?0-e:e)<(f<=0?0-f:f)||(g<=0?0-g:g)<(h<=0?0-h:h))&&(TI(j,p,j.c.b,j.c),true):i>1&&(TI(j,o,j.c.b,j.c),true);bvb(c)}}}o=p}}}return j}
	function m1(a){var b,c,d,e,f,g,h,i,j,k,l,m,n,o,p;a.n=Wv(rJ(a.g,(Rib(),Jib)),15).a*Wv(rJ(a.g,(Mjb(),Ejb)),15).a;a.e=a.n*Wv(rJ(a.g,qjb),15).a;a.i=a.g.c.c.length;h=a.i-1;m=0;a.j=0;a.k=0;a.a=Co(xv(PF,Txb,24,a.i,0,1));a.b=Co(xv(HF,Txb,184,a.i,6,1));for(g=new Tob(a.g.c);g.a<g.c.c.length;){e=Wv(Rob(g),16);e.k=h;for(l=new Tob(e.a);l.a<l.c.c.length;){k=Wv(Rob(l),9);k.k=m;++m}--h}a.f=xv(mw,Yyb,26,m,12,1);a.c=vv(mw,[Txb,Yyb],[52,26],12,[m,3],2);a.o=new GU;a.p=new GU;b=0;a.d=0;for(f=new Tob(a.g.c);f.a<f.c.c.length;){e=Wv(Rob(f),16);h=e.k;d=0;p=0;i=e.a.c.length;j=0;for(l=new Tob(e.a);l.a<l.c.c.length;){k=Wv(Rob(l),9);m=k.k;a.f[m]=k.d.k;j+=k.j.b+a.n;c=tl(iX(k));o=tl(mX(k));a.c[m][0]=o-c;a.c[m][1]=c;a.c[m][2]=o;d+=c;p+=o;c>0&&vU(a.p,k);vU(a.o,k)}b-=d;n=i+b;j+=b*a.e;DU(a.a,h,Elb(n));DU(a.b,h,j);a.j=Plb(a.j,n);a.k=Nlb(a.k,j);a.d+=b;b+=p}}
	function sN(){sN=iI;var a;qN=new uN(szb,0);$M=new uN('NORTH',1);ZM=new uN('EAST',2);pN=new uN('SOUTH',3);rN=new uN('WEST',4);dN=(ypb(),new Frb((a=Wv(Hkb(Kz),11),new atb(a,Wv(exb(a,a.length),11),0))));eN=Kk(Vsb($M,Bv(tv(Kz,1),uyb,32,0,[])));_M=Kk(Vsb(ZM,Bv(tv(Kz,1),uyb,32,0,[])));mN=Kk(Vsb(pN,Bv(tv(Kz,1),uyb,32,0,[])));oN=Kk(Vsb(rN,Bv(tv(Kz,1),uyb,32,0,[])));jN=Kk(Vsb($M,Bv(tv(Kz,1),uyb,32,0,[pN])));cN=Kk(Vsb(ZM,Bv(tv(Kz,1),uyb,32,0,[rN])));lN=Kk(Vsb($M,Bv(tv(Kz,1),uyb,32,0,[rN])));fN=Kk(Vsb($M,Bv(tv(Kz,1),uyb,32,0,[ZM])));nN=Kk(Vsb(pN,Bv(tv(Kz,1),uyb,32,0,[rN])));aN=Kk(Vsb(ZM,Bv(tv(Kz,1),uyb,32,0,[pN])));iN=Kk(Vsb($M,Bv(tv(Kz,1),uyb,32,0,[ZM,rN])));bN=Kk(Vsb(ZM,Bv(tv(Kz,1),uyb,32,0,[pN,rN])));kN=Kk(Vsb($M,Bv(tv(Kz,1),uyb,32,0,[pN,rN])));gN=Kk(Vsb($M,Bv(tv(Kz,1),uyb,32,0,[ZM,pN])));hN=Kk(Vsb($M,Bv(tv(Kz,1),uyb,32,0,[ZM,pN,rN])))}
	function q$(a){var b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,A,B,C;u=new GU;for(m=new Tob(a.c);m.a<m.c.c.length;){l=Wv(Rob(m),16);for(p=new Tob(l.a);p.a<p.c.c.length;){n=Wv(Rob(p),9);if(n.g!=(CX(),xX)){continue}if(rJ(n,(Rib(),gib))==null){continue}q=null;s=null;r=null;for(A=new Tob(n.f);A.a<A.c.c.length;){w=Wv(Rob(A),7);switch(w.g.e){case 4:q=w;break;case 2:s=w;break;default:r=w;}}t=Wv(yU(r.e,0),12);i=new kJ(t.a);h=new II(r.i);vI(h,n.i);j=WI(i,0);$ub(j,h);v=lJ(t.a);k=new II(r.i);vI(k,n.i);TI(v,k,v.c.b,v.c);B=Wv(rJ(n,gib),9);C=Wv(yU(B.f,0),7);g=Wv(FU(q.b,xv(dB,gAb,12,0,0,1)),47);for(d=0,f=g.length;d<f;++d){b=g[d];eW(b,C);gJ(b.a,b.a.b,i)}g=Wv(FU(s.e,xv(dB,gAb,12,s.e.c.length,0,1)),47);for(c=0,e=g.length;c<e;++c){b=g[c];dW(b,C);gJ(b.a,0,v)}dW(t,null);eW(t,null);u.c[u.c.length]=n}}for(o=new Tob(u);o.a<o.c.c.length;){n=Wv(Rob(o),9);rX(n,null)}}
	function _tb(){function e(){this.obj=this.createObject()}
	;e.prototype.createObject=function(a){return Object.create(null)};e.prototype.get=function(a){return this.obj[a]};e.prototype.set=function(a,b){this.obj[a]=b};e.prototype[$Ab]=function(a){delete this.obj[a]};e.prototype.keys=function(){return Object.getOwnPropertyNames(this.obj)};e.prototype.entries=function(){var b=this.keys();var c=this;var d=0;return {'next':function(){if(d>=b.length)return {'done':true};var a=b[d++];return {'value':[a,c.get(a)],'done':false}}}};if(!Ztb()){e.prototype.createObject=function(){return {}};e.prototype.get=function(a){return this.obj[':'+a]};e.prototype.set=function(a,b){this.obj[':'+a]=b};e.prototype[$Ab]=function(a){delete this.obj[':'+a]};e.prototype.keys=function(){var a=[];for(var b in this.obj){b.charCodeAt(0)==58&&a.push(b.substring(1))}return a}}return e}
	function fQ(a,b,c){var d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u;k=new kW;sJ(k,PP,b);Umb(a.e,b,k);sJ(k,(Rib(),zib),c);!!a.d&&iQ(a.d,k,false);hQ(b,k);if(Lzb in b.a){q=k.a;r=Wv(Pu(b,Lzb),69);p=Wv(Pu(r,'left'),104);!!p&&(q.b=p.a);t=Wv(Pu(r,'top'),104);!!t&&(q.d=t.a);s=Wv(Pu(r,'right'),104);!!s&&(q.c=s.a);e=Wv(Pu(r,Azb),104);!!e&&(q.a=e.a)}l=(d=Wv(Hkb(mF),11),new atb(d,Wv(exb(d,d.length),11),0));sJ(k,jib,l);a.g==null&&(a.g=Xv(rJ(k,(zQ(),yQ))));if(Mzb in b.a){u=Pu(b,Mzb);if(!u.hc()){throw new GQ("The 'children' property of nodes must be an array.",u,b)}j=u.hc();if(j.a.length>0){!!c&&sJ(c,sib,k);h=xv(qB,Nzb,9,j.a.length,0,1);for(n=0;n<j.a.length;++n){i=gu(j,n);if(!i.kc()){throw new GQ("A 'children' array contains a non-object node element.",i,b)}f=eQ(a,i.kc(),k);h[n]=f}for(m=0;m<j.a.length;++m){o=gu(j,m).kc();g=h[m];Mzb in o.a&&!Ckb(Ixb(Xv(rJ(g,(eM(),KL)))))&&fQ(a,o,g)}}}return k}
	function LO(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o,p;if(!Qob(new Tob(AW(a.e)))){return}for(h=new Tob(AW(a.e));h.a<h.c.c.length;){g=Wv(Rob(h),161);j=Wv(g.e,7).g.e;++a.o[j];switch(Wv(g.e,7).g.e){case 4:case 2:a.n[j]+=g.e.j.b+(b?(d=Wv(g.e,7).d,new EP(d.d,d.b,d.a,d.c)).a+(e=Wv(g.e,7).d,new EP(e.d,e.b,e.a,e.c)).d:0);break;case 1:case 3:a.n[j]+=g.e.j.a+(b?(f=Wv(g.e,7).d,new EP(f.d,f.b,f.a,f.c)).b+(c=Wv(g.e,7).d,new EP(c.d,c.b,c.a,c.c)).c:0);}}i=Wv(oW(a.e,(eM(),NL)),100);i=i==(zM(),yM)?xM:i;a.g[1]=Wv(oW(a.e,PL),100);a.g[3]=Wv(oW(a.e,QL),100);a.g[4]=Wv(oW(a.e,RL),100);a.g[2]=Wv(oW(a.e,OL),100);for(l=(sN(),Bv(tv(Kz,1),uyb,32,0,[qN,$M,ZM,pN,rN])),n=0,p=l.length;n<p;++n){j=l[n];a.g[j.e]=a.g[j.e]==yM?i:a.g[j.e]}a.b=oW(a.e,jL)!=null;for(k=Bv(tv(Kz,1),uyb,32,0,[qN,$M,ZM,pN,rN]),m=0,o=k.length;m<o;++m){j=k[m];a.o[j.e]==1?(a.i[j.e]=2):!a.b&&a.g[j.e]==xM?(a.i[j.e]=a.o[j.e]+1):(a.i[j.e]=a.o[j.e]-1)}}
	function Tfb(a,b,c,d,e,f){var g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v;i=Wv(a.a,16);p=Wv(a.b,16);j=Wv(b.a,18);q=Wv(b.b,18);if(i){for(l=new Tob(i.a);l.a<l.c.c.length;){k=Wv(Rob(l),9);for(t=nX(k,(sN(),ZM)).mb();t.G();){s=Wv(t.H(),7);j.ib(s);for(h=new Tob(s.e);h.a<h.c.c.length;){g=Wv(Rob(h),12);if(bW(g)){continue}c.c[c.c.length]=g;Ufb(g,d);r=g.c.f.g;(r==(CX(),AX)||r==BX)&&(e.c[e.c.length]=g,true);v=g.d;u=v.f.d;u==p?q.ib(v):u==i?j.ib(v):BU(c,g)}}}}if(p){for(l=new Tob(p.a);l.a<l.c.c.length;){k=Wv(Rob(l),9);for(o=new Tob(k.f);o.a<o.c.c.length;){n=Wv(Rob(o),7);for(h=new Tob(n.e);h.a<h.c.c.length;){g=Wv(Rob(h),12);bW(g)&&(m=f.a.db(g,f),m==null)}}for(t=nX(k,(sN(),rN)).mb();t.G();){s=Wv(t.H(),7);q.ib(s);for(h=new Tob(s.e);h.a<h.c.c.length;){g=Wv(Rob(h),12);if(bW(g)){continue}c.c[c.c.length]=g;Ufb(g,d);r=g.c.f.g;(r==(CX(),AX)||r==BX)&&(e.c[e.c.length]=g,true);v=g.d;u=v.f.d;u==p?q.ib(v):u==i?j.ib(v):BU(c,g)}}}}}
	function acb(a,b,c){var d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,A,B;t=b.c.length;e=new Cbb(a.b,c,null,null);B=xv(kw,hyb,26,t,12,1);p=xv(kw,hyb,26,t,12,1);o=xv(kw,hyb,26,t,12,1);q=0;for(h=0;h<t;h++){p[h]=$xb;o[h]=eyb}for(i=0;i<t;i++){d=(Cxb(i,b.c.length),Wv(b.c[i],81));B[i]=Abb(d);B[q]>B[i]&&(q=i);for(l=new Tob(a.b.c);l.a<l.c.c.length;){k=Wv(Rob(l),16);for(s=new Tob(k.a);s.a<s.c.c.length;){r=Wv(Rob(s),9);w=Ixb(d.n[r.k])+Ixb(d.d[r.k]);p[i]=p[i]<w?p[i]:w;o[i]=Nlb(o[i],w+r.j.b)}}}A=xv(kw,hyb,26,t,12,1);for(j=0;j<t;j++){(Cxb(j,b.c.length),Wv(b.c[j],81)).k==(Lbb(),Jbb)?(A[j]=p[q]-p[j]):(A[j]=o[q]-o[j])}f=xv(kw,hyb,26,t,12,1);for(n=new Tob(a.b.c);n.a<n.c.c.length;){m=Wv(Rob(n),16);for(v=new Tob(m.a);v.a<v.c.c.length;){u=Wv(Rob(v),9);for(g=0;g<t;g++){f[g]=Ixb((Cxb(g,b.c.length),Wv(b.c[g],81)).n[u.k])+Ixb((Cxb(g,b.c.length),Wv(b.c[g],81)).d[u.k])+A[g]}kpb(f);e.n[u.k]=(f[1]+f[2])/2;e.d[u.k]=0}}return e}
	function Sfb(a,b,c,d,e,f){var g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v;p=null;c==(fgb(),dgb)?(p=a):c==egb&&(p=b);for(r=(m=(new Snb(p.a)).a.bb().mb(),new Ynb(m));r.a.G();){q=(k=Wv(r.a.H(),21),Wv(k.yb(),7));s=MI(Bv(tv(qz,1),Fzb,10,0,[q.f.i,q.i,q.a])).b;v=new vtb;g=new vtb;for(i=Uh(Sh((Gi(),new gr(Ti(Bv(tv(UF,1),syb,1,4,[q.b,q.e]))))));Cm(i);){h=Wv(Dm(i),12);if(Ckb(Ixb(Xv(rJ(h,(Rib(),Iib)))))!=d){continue}if(zU(e,h,0)!=-1){h.d==q?(t=h.c):(t=h.d);u=MI(Bv(tv(qz,1),Fzb,10,0,[t.f.i,t.i,t.a])).b;if((u-s<=0?0-(u-s):u-s)<0.2){continue}u<s?a.a.R(t)?stb(v,new RJ(dgb,h)):stb(v,new RJ(egb,h)):a.a.R(t)?stb(g,new RJ(dgb,h)):stb(g,new RJ(egb,h))}}if(v.a.Y()>1){vU(f,new mgb(q,v,c));for(o=(l=(new Snb(v.a)).a.bb().mb(),new Ynb(l));o.a.G();){n=(j=Wv(o.a.H(),21),Wv(j.yb(),27));BU(e,n.b)}}if(g.a.Y()>1){vU(f,new mgb(q,g,c));for(o=(l=(new Snb(g.a)).a.bb().mb(),new Ynb(l));o.a.G();){n=(j=Wv(o.a.H(),21),Wv(j.yb(),27));BU(e,n.b)}}}}
	function dab(a){var b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,A;e=0;s=0;r=(mp(),new ntb);d=new ntb;f=new ntb;A=new ntb;fab(a,f,A);b=null;q=0;w=0;t=true;i=true;for(m=0,o=a.length;m<o;++m){k=a[m];for(v=new Tob(k.f);v.a<v.c.c.length;){u=Wv(Rob(v),7);switch(u.g.e){case 2:e+=cab(u,f);break;case 4:e+=cab(u,A);}}p=k.g;if(i&&(p==(CX(),AX)||p==BX)){j=Wv(rJ(k,(Rib(),nib)),9);if(!j){i=false;continue}if(b!=j){!!b&&Umb(r,b,new RJ(Elb(q),Elb(w)));b=j;q=0;w=0;t=true}k==b&&(t=false);if(t){q+=Wv(rJ(k,aib),24).a;Umb(d,k,Elb(q))}else{w+=Wv(rJ(k,aib),24).a;Umb(d,k,Elb(w))}}}!!b&&Umb(r,b,new RJ(Elb(q),Elb(w)));if(i){h=null;g=0;c=0;t=true;for(l=0,n=a.length;l<n;++l){k=a[l];p=k.g;switch(p.e){case 0:g=Wv(re(Ktb(d.d,k)),24).a;c=Wv(Wv(re(Ktb(r.d,k)),27).b,24).a;h=k;t=false;break;case 3:g=Wv(re(Ktb(d.d,k)),24).a;j=Wv(rJ(k,(Rib(),nib)),9);if(j!=h){c=Wv(Wv(re(Ktb(r.d,j)),27).a,24).a;h=j;t=true}break;default:s+=t?g:c-g;}}}return e+s}
	function S4(a){var b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t;l=(mp(),new ntb);j=new xk;for(d=new Tob(a.a.a.b);d.a<d.c.c.length;){b=Wv(Rob(d),25);if(aw(b,93)){k=Wv(b,93).b;Ltb(l.d,k,b)}else if(aw(b,82)){for(f=(o=(new Snb(Wv(b,82).d.a)).a.bb().mb(),new Ynb(o));f.a.G();){e=(g=Wv(f.a.H(),21),Wv(g.yb(),12));Fd(j,e,b)}}}for(c=new Tob(a.a.a.b);c.a<c.c.c.length;){b=Wv(Rob(c),25);if(aw(b,93)){k=Wv(b,93).b;for(i=Uh(mX(k));Cm(i);){h=Wv(Dm(i),12);if(bW(h)){continue}q=h.c;t=h.d;if((sN(),jN).kb(h.c.g)&&jN.kb(h.d.g)){continue}r=Wv(Smb(l,h.d.f),25);f7(i7(h7(j7(g7(new k7,0),100),a.c[b.f.d]),a.c[r.f.d]));if(q.g==rN&&TX((LX(),IX,q))){for(n=Wv(Dd(j,h),18).mb();n.G();){m=Wv(n.H(),25);if(m.j.d<b.j.d){p=a.c[m.f.d];s=a.c[b.f.d];if(p==s){continue}f7(i7(h7(j7(g7(new k7,1),100),p),s))}}}if(t.g==ZM&&WX((LX(),GX,t))){for(n=Wv(Dd(j,h),18).mb();n.G();){m=Wv(n.H(),25);if(m.j.d>b.j.d){p=a.c[b.f.d];s=a.c[m.f.d];if(p==s){continue}f7(i7(h7(j7(g7(new k7,1),100),p),s))}}}}}}}
	function t3(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o;g=new z3(a);h=Ao(pl(b,g));Gpb(h,new C3);e=a.b;switch(e.c){case 2:i=new E3(e.a);c=Al(pl(h,i));od(c)?(j=Wv(pd(c),91).b):(j=15);i=new E3(Jeb(e));c=Al(pl(h,i));od(c)?(f=Wv(pd(c),91).b):(f=15);i=new E3(e.b);c=Al(pl(h,i));od(c)?(k=Wv(pd(c),91).b):(k=15);d=p3(a,j,f,k);stb(b,new w3(d,a.c,a.e,a.a.c.f,e.a));stb(b,new w3(d,a.c,a.e,a.a.c.f,Jeb(e)));stb(b,new w3(d,a.c,a.e,a.a.c.f,e.b));break;case 1:i=new E3(e.a);c=Al(pl(h,i));od(c)?(j=Wv(pd(c),91).b):(j=15);i=new E3(e.b);c=Al(pl(h,i));od(c)?(k=Wv(pd(c),91).b):(k=15);d=q3(a,j,k);stb(b,new w3(d,a.c,a.e,a.a.c.f,e.a));stb(b,new w3(d,a.c,a.e,a.a.c.f,e.b));break;case 0:i=new E3(e.a);c=Al(pl(h,i));od(c)?(j=Wv(pd(c),91).b):(j=15);d=(l=a.b,m=xfb(a.a.c,a.a.d,j),Ue(a.a.a,Veb(m)),n=s3(a.a.b,m.a,l),o=new Dfb((!m.k&&(m.k=new Efb(Xeb(m))),m.k)),zfb(o),!n?o:Gfb(o,n));stb(b,new w3(d,a.c,a.e,a.a.c.f,e.a));break;default:throw new slb('The loopside must be defined.');}return d}
	function Pbb(a,b,c){var d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v;for(h=new Tob(a.a.c);h.a<h.c.c.length;){f=Wv(Rob(h),16);for(t=new Tob(f.a);t.a<t.c.c.length;){s=Wv(Rob(t),9);b.f[s.k]=s;b.a[s.k]=s;b.d[s.k]=0}}i=a.a.c;b.c==(Gbb(),Ebb)&&(i=aw(i,87)?Ii(Wv(i,87)):aw(i,88)?Wv(i,88).a:aw(i,63)?new ap(i):new Ro(i));for(g=i.mb();g.G();){f=Wv(g.H(),16);n=-1;m=f.a;if(b.k==(Lbb(),Kbb)){n=$xb;m=aw(m,87)?Ii(Wv(m,87)):aw(m,88)?Wv(m,88).a:aw(m,63)?new ap(m):new Ro(m)}for(v=m.mb();v.G();){u=Wv(v.H(),9);b.c==Ebb?(l=Wv(yU(a.b.f,u.k),20)):(l=Wv(yU(a.b.b,u.k),20));if(l.Y()>0){d=l.Y();j=hw(Math.floor((d+1)/2))-1;e=hw(Math.ceil((d+1)/2))-1;if(b.k==Kbb){for(k=e;k>=j;k--){if(b.a[u.k]==u){p=Wv(l.sb(k),27);o=Wv(p.a,9);if(!ttb(c,p.b)&&n>a.b.e[o.k]){b.a[o.k]=u;b.f[u.k]=b.f[o.k];b.a[u.k]=b.f[u.k];n=a.b.e[o.k]}}}}else{for(k=j;k<=e;k++){if(b.a[u.k]==u){r=Wv(l.sb(k),27);q=Wv(r.a,9);if(!ttb(c,r.b)&&n<a.b.e[q.k]){b.a[q.k]=u;b.f[u.k]=b.f[q.k];b.a[u.k]=b.f[u.k];n=a.b.e[q.k]}}}}}}}}
	function Ieb(){Ieb=iI;meb=new Peb('N',0,(sN(),$M),$M,0);jeb=new Peb('EN',1,ZM,$M,1);ieb=new Peb('E',2,ZM,ZM,0);peb=new Peb('SE',3,pN,ZM,1);oeb=new Peb('S',4,pN,pN,0);Heb=new Peb('WS',5,rN,pN,1);Geb=new Peb('W',6,rN,rN,0);neb=new Peb('NW',7,$M,rN,1);keb=new Peb('ENW',8,ZM,rN,2);leb=new Peb('ESW',9,ZM,rN,2);qeb=new Peb('SEN',10,pN,$M,2);Eeb=new Peb('SWN',11,pN,$M,2);Feb=new Peb(szb,12,qN,qN,3);feb=bk(meb,jeb,ieb,peb,oeb,Heb,Bv(tv(_E,1),uyb,60,0,[Geb,neb,keb,leb,qeb,Eeb]));heb=(hi(),Zj(Bv(tv(UF,1),syb,1,4,[meb,ieb,oeb,Geb])));geb=Zj(Bv(tv(UF,1),syb,1,4,[jeb,peb,Heb,neb]));veb=new Gr($M);seb=Zj(Bv(tv(UF,1),syb,1,4,[ZM,$M]));reb=new Gr(ZM);yeb=Zj(Bv(tv(UF,1),syb,1,4,[pN,ZM]));xeb=new Gr(pN);Deb=Zj(Bv(tv(UF,1),syb,1,4,[rN,pN]));Ceb=new Gr(rN);web=Zj(Bv(tv(UF,1),syb,1,4,[$M,rN]));teb=Zj(Bv(tv(UF,1),syb,1,4,[ZM,$M,rN]));ueb=Zj(Bv(tv(UF,1),syb,1,4,[ZM,pN,rN]));Aeb=Zj(Bv(tv(UF,1),syb,1,4,[pN,rN,$M]));zeb=Zj(Bv(tv(UF,1),syb,1,4,[pN,ZM,$M]));Beb=(kr(),jr)}
	function JZ(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u;s=0;if(b.e.a==0){for(q=new Tob(a);q.a<q.c.c.length;){o=Wv(Rob(q),9);s=Nlb(s,o.i.a+o.j.a+o.e.c)}}else{s=b.e.a-b.d.a}s-=b.d.a;for(p=new Tob(a);p.a<p.c.c.length;){o=Wv(Rob(p),9);IZ(o.i,s-o.j.a);GZ(o);switch(Wv(rJ(o,(eM(),lL)),103).e){case 1:sJ(o,lL,(iK(),gK));break;case 2:sJ(o,lL,(iK(),fK));}r=o.j;for(u=new Tob(o.f);u.a<u.c.c.length;){t=Wv(Rob(u),7);IZ(t.i,r.a-t.j.a);IZ(t.a,t.j.a);QX(t,CZ(t.g));g=Wv(rJ(t,UL),24);!!g&&sJ(t,UL,Elb(-g.a));for(f=new Tob(t.e);f.a<f.c.c.length;){e=Wv(Rob(f),12);for(d=WI(e.a,0);d.b!=d.d.c;){c=Wv(_ub(d),10);c.a=s-c.a}j=Wv(rJ(e,CL),44);if(j){for(i=WI(j,0);i.b!=i.d.c;){h=Wv(_ub(i),10);h.a=s-h.a}}for(m=new Tob(e.b);m.a<m.c.c.length;){k=Wv(Rob(m),33);IZ(k.i,s-k.j.a)}}for(n=new Tob(t.c);n.a<n.c.c.length;){k=Wv(Rob(n),33);IZ(k.i,-k.j.a)}}if(o.g==(CX(),xX)){sJ(o,(Rib(),hib),CZ(Wv(rJ(o,hib),32)));FZ(o)}for(l=new Tob(o.c);l.a<l.c.c.length;){k=Wv(Rob(l),33);IZ(k.i,r.a-k.j.a)}}}
	function LZ(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u;s=0;if(b.e.b==0){for(q=new Tob(a);q.a<q.c.c.length;){o=Wv(Rob(q),9);s=Nlb(s,o.i.b+o.j.b+o.e.a)}}else{s=b.e.b-b.d.b}s-=b.d.b;for(p=new Tob(a);p.a<p.c.c.length;){o=Wv(Rob(p),9);KZ(o.i,s-o.j.b);HZ(o);switch(Wv(rJ(o,(eM(),lL)),103).e){case 3:sJ(o,lL,(iK(),dK));break;case 4:sJ(o,lL,(iK(),hK));}r=o.j;for(u=new Tob(o.f);u.a<u.c.c.length;){t=Wv(Rob(u),7);KZ(t.i,r.b-t.j.b);KZ(t.a,t.j.b);QX(t,DZ(t.g));g=Wv(rJ(t,UL),24);!!g&&sJ(t,UL,Elb(-g.a));for(f=new Tob(t.e);f.a<f.c.c.length;){e=Wv(Rob(f),12);for(d=WI(e.a,0);d.b!=d.d.c;){c=Wv(_ub(d),10);c.b=s-c.b}j=Wv(rJ(e,CL),44);if(j){for(i=WI(j,0);i.b!=i.d.c;){h=Wv(_ub(i),10);h.b=s-h.b}}for(m=new Tob(e.b);m.a<m.c.c.length;){k=Wv(Rob(m),33);KZ(k.i,s-k.j.b)}}for(n=new Tob(t.c);n.a<n.c.c.length;){k=Wv(Rob(n),33);KZ(k.i,-k.j.b)}}if(o.g==(CX(),xX)){sJ(o,(Rib(),hib),DZ(Wv(rJ(o,hib),32)));EZ(o)}for(l=new Tob(o.c);l.a<l.c.c.length;){k=Wv(Rob(l),33);KZ(k.i,r.b-k.j.b)}}}
	function qP(a,b,c){var d,e,f,g,h,i,j,k,l,m,n;d=new VN(b.e.i.a,b.e.i.b,b.e.j.a,b.e.j.b);e=new UN;if(a.c){for(g=new Tob(zW(b));g.a<g.c.c.length;){f=Wv(Rob(g),129);e.d=f.e.i.a+b.e.i.a;e.e=f.e.i.b+b.e.i.b;e.c=f.e.j.a;e.b=f.e.j.b;TN(d,e)}}for(k=new Tob(AW(b));k.a<k.c.c.length;){j=Wv(Rob(k),161);l=j.e.i.a+b.e.i.a;m=j.e.i.b+b.e.i.b;if(a.e){e.d=l;e.e=m;e.c=j.e.j.a;e.b=j.e.j.b;TN(d,e)}if(a.d){for(g=new Tob(DW(j));g.a<g.c.c.length;){f=Wv(Rob(g),129);e.d=f.e.i.a+l;e.e=f.e.i.b+m;e.c=f.e.j.a;e.b=f.e.j.b;TN(d,e)}}if(a.b){n=new HI(-c,-c);if(gw(oW(b,(eM(),VL)))===gw((UM(),TM))){for(g=new Tob(DW(j));g.a<g.c.c.length;){f=Wv(Rob(g),129);n.a+=f.e.j.a+c;n.b+=f.e.j.b+c}}n.a=Nlb(n.a,0);n.b=Nlb(n.b,0);pP(d,EW(j),CW(j),b,j,n,c)}}a.b&&pP(d,(ypb(),ypb(),vpb),(null,vpb),b,null,null,c);i=new FP((h=Wv(b.e,9).e,new EP(h.d,h.b,h.a,h.c)));i.d=b.e.i.b-d.e;i.a=d.e+d.b-(b.e.i.b+b.e.j.b);i.b=b.e.i.a-d.d;i.c=d.d+d.c-(b.e.i.a+b.e.j.a);Wv(b.e,9).e.b=i.b;Wv(b.e,9).e.d=i.d;Wv(b.e,9).e.c=i.c;Wv(b.e,9).e.a=i.a}
	function XT(){XT=iI;WT=new xk;Fd(WT,(sN(),dN),hN);Fd(WT,oN,kN);Fd(WT,oN,hN);Fd(WT,_M,gN);Fd(WT,_M,hN);Fd(WT,eN,iN);Fd(WT,eN,hN);Fd(WT,mN,bN);Fd(WT,mN,hN);Fd(WT,jN,cN);Fd(WT,jN,iN);Fd(WT,jN,bN);Fd(WT,jN,hN);Fd(WT,cN,jN);Fd(WT,cN,kN);Fd(WT,cN,gN);Fd(WT,cN,hN);Fd(WT,lN,lN);Fd(WT,lN,iN);Fd(WT,lN,kN);Fd(WT,fN,fN);Fd(WT,fN,iN);Fd(WT,fN,gN);Fd(WT,nN,nN);Fd(WT,nN,bN);Fd(WT,nN,kN);Fd(WT,aN,aN);Fd(WT,aN,bN);Fd(WT,aN,gN);Fd(WT,iN,eN);Fd(WT,iN,jN);Fd(WT,iN,lN);Fd(WT,iN,fN);Fd(WT,iN,iN);Fd(WT,iN,kN);Fd(WT,iN,gN);Fd(WT,iN,hN);Fd(WT,bN,mN);Fd(WT,bN,jN);Fd(WT,bN,nN);Fd(WT,bN,aN);Fd(WT,bN,bN);Fd(WT,bN,kN);Fd(WT,bN,gN);Fd(WT,bN,hN);Fd(WT,kN,oN);Fd(WT,kN,cN);Fd(WT,kN,lN);Fd(WT,kN,nN);Fd(WT,kN,iN);Fd(WT,kN,bN);Fd(WT,kN,kN);Fd(WT,kN,hN);Fd(WT,gN,_M);Fd(WT,gN,cN);Fd(WT,gN,fN);Fd(WT,gN,aN);Fd(WT,gN,iN);Fd(WT,gN,bN);Fd(WT,gN,gN);Fd(WT,gN,hN);Fd(WT,hN,dN);Fd(WT,hN,oN);Fd(WT,hN,_M);Fd(WT,hN,eN);Fd(WT,hN,mN);Fd(WT,hN,jN);Fd(WT,hN,cN);Fd(WT,hN,iN);Fd(WT,hN,bN);Fd(WT,hN,kN);Fd(WT,hN,gN);Fd(WT,hN,hN)}
	function Tbb(a,b,c){var d,e,f,g,h,i,j,k,l,m,n,o,p,q,r;if(c.n[b.k]!=null){return}i=true;c.n[b.k]=0;g=b;r=c.k==(Lbb(),Jbb)?Vzb:Uzb;do{e=a.b.e[g.k];f=g.d.a.c.length;h=g.g;if(c.k==Jbb&&e>0||c.k==Kbb&&e<f-1){c.k==Kbb?(j=Wv(yU(g.d.a,e+1),9)):(j=Wv(yU(g.d.a,e-1),9));l=c.f[j.k];k=j.g;Tbb(a,l,c);r=a.e.Ic(r,b,g);c.i[b.k]==b&&(c.i[b.k]=c.i[l.k]);if(c.i[b.k]==c.i[l.k]){q=Wjb(a.d,h,k);if(c.k==Kbb){d=Ixb(c.n[b.k]);n=Ixb(c.n[l.k])+Ixb(c.d[j.k])-j.e.d-q-g.e.a-g.j.b-Ixb(c.d[g.k]);if(i){i=false;c.n[b.k]=n<r?n:r}else{c.n[b.k]=d<(n<r?n:r)?d:n<r?n:r}}else{d=Ixb(c.n[b.k]);n=Ixb(c.n[l.k])+Ixb(c.d[j.k])+j.j.b+j.e.a+q+g.e.d-Ixb(c.d[g.k]);if(i){i=false;c.n[b.k]=n>r?n:r}else{c.n[b.k]=d>(n>r?n:r)?d:n>r?n:r}}}else{q=a.d.f;p=Rbb(a,c.i[b.k]);m=Rbb(a,c.i[l.k]);if(c.k==Kbb){o=Ixb(c.n[b.k])+Ixb(c.d[g.k])+g.j.b+g.e.a+q-(Ixb(c.n[l.k])+Ixb(c.d[j.k])-j.e.d);Xbb(p,m,o)}else{o=Ixb(c.n[b.k])+Ixb(c.d[g.k])-g.e.d-Ixb(c.n[l.k])-Ixb(c.d[j.k])-j.j.b-j.e.a-q;Xbb(p,m,o)}}}else{r=a.e.Ic(r,b,g)}g=c.a[g.k]}while(g!=b);ycb(a.e,b)}
	function sZ(a,b,c,d){var e,f,g,h,i,j,k,l,m,n,o,p,q,r,s;m=false;l=false;if(MM(Wv(rJ(d,(eM(),TL)),28))){g=false;h=false;t:for(o=new Tob(d.f);o.a<o.c.c.length;){n=Wv(Rob(o),7);for(q=Uh(Sh((Gi(),new gr(Ti(Bv(tv(UF,1),syb,1,4,[new fY(n),new lY(n)]))))));Cm(q);){p=Wv(Dm(q),7);if(!Ckb(Ixb(Xv(rJ(p.f,qL))))){if(n.g==(sN(),$M)){g=true;break t}if(n.g==pN){h=true;break t}}}}m=h&&!g;l=g&&!h}if(!m&&!l&&d.c.c.length!=0){k=0;for(j=new Tob(d.c);j.a<j.c.c.length;){i=Wv(Rob(j),33);k+=i.i.b+i.j.b/2}k/=d.c.c.length;s=k>=d.j.b/2}else{s=!l}if(s){r=Wv(rJ(d,(Rib(),Qib)),20);if(!r){f=new GU;sJ(d,Qib,f)}else if(m){f=r}else{e=Wv(rJ(d,Yhb),20);if(!e){f=new GU;sJ(d,Yhb,f)}else{r.Y()<=e.Y()?(f=r):(f=e)}}}else{e=Wv(rJ(d,(Rib(),Yhb)),20);if(!e){f=new GU;sJ(d,Yhb,f)}else if(l){f=e}else{r=Wv(rJ(d,Qib),20);if(!r){f=new GU;sJ(d,Qib,f)}else{e.Y()<=r.Y()?(f=e):(f=r)}}}f.ib(a);sJ(a,(Rib(),Zhb),c);if(b.d==c){eW(b,null);c.b.c.length+c.e.c.length==0&&PX(c,null)}else{dW(b,null);c.b.c.length+c.e.c.length==0&&PX(c,null)}_I(b.a)}
	function rU(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t;c=new bV(b);c.a||kU(b);j=jU(b);i=new xk;q=new oV;for(p=new Tob(b.b);p.a<p.c.c.length;){o=Wv(Rob(p),9);for(e=Uh(mX(o));Cm(e);){d=Wv(Dm(e),12);if(d.c.f.g==(CX(),xX)||d.d.f.g==xX){k=qU(a,d,j,q);Fd(i,oU(k.d),k.a)}}}g=new GU;for(t=Wv(rJ(c.c,(Rib(),fib)),18).mb();t.G();){s=Wv(t.H(),32);n=q.c[s.e];m=q.b[s.e];h=q.a[s.e];f=null;r=null;switch(s.e){case 4:f=new VN(a.d.a,n,j.b.a-a.d.a,m-n);r=new VN(a.d.a,n,h,m-n);YU(j,new HI(f.d+f.c,f.e));YU(j,new HI(f.d+f.c,f.e+f.b));break;case 2:f=new VN(j.a.a,n,a.c.a-j.a.a,m-n);r=new VN(a.c.a-h,n,h,m-n);YU(j,new HI(f.d,f.e));YU(j,new HI(f.d,f.e+f.b));break;case 1:f=new VN(n,a.d.b,m-n,j.b.b-a.d.b);r=new VN(n,a.d.b,m-n,h);YU(j,new HI(f.d,f.e+f.b));YU(j,new HI(f.d+f.c,f.e+f.b));break;case 3:f=new VN(n,j.a.b,m-n,a.c.b-j.a.b);r=new VN(n,a.c.b-h,m-n,h);YU(j,new HI(f.d,f.e));YU(j,new HI(f.d+f.c,f.e));}if(f){l=new jV;l.d=s;l.b=f;l.c=r;l.a=pr(Wv(Dd(i,oU(s)),18));g.c[g.c.length]=l}}xU(c.b,g);c.d=pT(tT(j));return c}
	function tt(){var a=['\\u0000','\\u0001','\\u0002','\\u0003','\\u0004','\\u0005','\\u0006','\\u0007','\\b','\\t','\\n','\\u000B','\\f','\\r','\\u000E','\\u000F','\\u0010','\\u0011','\\u0012','\\u0013','\\u0014','\\u0015','\\u0016','\\u0017','\\u0018','\\u0019','\\u001A','\\u001B','\\u001C','\\u001D','\\u001E','\\u001F'];a[34]='\\"';a[92]='\\\\';a[173]='\\u00ad';a[1536]='\\u0600';a[1537]='\\u0601';a[1538]='\\u0602';a[1539]='\\u0603';a[1757]='\\u06dd';a[1807]='\\u070f';a[6068]='\\u17b4';a[6069]='\\u17b5';a[8203]='\\u200b';a[8204]='\\u200c';a[8205]='\\u200d';a[8206]='\\u200e';a[8207]='\\u200f';a[8232]='\\u2028';a[8233]='\\u2029';a[8234]='\\u202a';a[8235]='\\u202b';a[8236]='\\u202c';a[8237]='\\u202d';a[8238]='\\u202e';a[8288]='\\u2060';a[8289]='\\u2061';a[8290]='\\u2062';a[8291]='\\u2063';a[8292]='\\u2064';a[8298]='\\u206a';a[8299]='\\u206b';a[8300]='\\u206c';a[8301]='\\u206d';a[8302]='\\u206e';a[8303]='\\u206f';a[65279]='\\ufeff';a[65529]='\\ufff9';a[65530]='\\ufffa';a[65531]='\\ufffb';return a}
	function eab(a){var b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w;b=0;r=true;w=null;for(d=0;d<a.length;d++){f=a[d];q=f.g;if(q==(CX(),AX)){w=f;r=false}else if(q==BX){if(aw(rJ(f,(Rib(),uib)),12)){continue}c=Wv(rJ(f,uib),9);if(w!=c){w=c;r=true}if(!LM(Wv(rJ(c,(eM(),TL)),28))){continue}m=null;o=null;for(t=new Tob(f.f);t.a<t.c.c.length;){s=Wv(Rob(t),7);s.b.c.length==0?s.e.c.length==0||(o=Wv(rJ(s,uib),7)):(m=Wv(rJ(s,uib),7))}for(e=d+1;e<a.length;e++){g=a[e];l=g.g;if(l==AX){break}else if(l==BX){if(gw(rJ(g,uib))!==gw(c)){break}h=null;j=null;for(v=new Tob(g.f);v.a<v.c.c.length;){u=Wv(Rob(v),7);u.b.c.length==0?u.e.c.length==0||(j=Wv(rJ(u,uib),7)):(h=Wv(rJ(u,uib),7))}if(r){n=false;p=false;if(!!o&&!!h&&o.k<h.k){++b;p=true}if(!!m&&!!j&&m.k>j.k){++b;n=true}if(!!o&&!!j&&o.k>j.k){++b;p=true}if(!!m&&!!h&&m.k<h.k){++b;n=true}n&&p&&m==o&&--b}else{i=false;k=false;if(!!m&&!!j&&m.k<j.k){++b;k=true}if(!!o&&!!h&&o.k>h.k){++b;i=true}if(!!m&&!!h&&m.k<h.k){++b;i=true}if(!!o&&!!j&&o.k>j.k){++b;k=true}i&&k&&h==j&&--b}}}}}return b}
	function Oab(a){var b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,A,B,C,D;for(t=a.a,u=0,v=t.length;u<v;++u){s=t[u];j=$xb;k=$xb;for(o=new Tob(s.f);o.a<o.c.c.length;){m=Wv(Rob(o),9);g=!m.d?-1:zU(m.d.a,m,0);if(g>0){l=Wv(yU(m.d.a,g-1),9);B=Xjb(a.b,m,l);q=m.i.b-m.e.d-(l.i.b+l.j.b+l.e.a+B)}else{q=m.i.b-m.e.d}j=q<j?q:j;if(g<m.d.a.c.length-1){l=Wv(yU(m.d.a,g+1),9);B=Xjb(a.b,m,l);r=l.i.b-l.e.d-(m.i.b+m.j.b+m.e.a+B)}else{r=2*m.i.b}k=r<k?r:k}i=$xb;f=false;e=Wv(yU(s.f,0),9);for(D=new Tob(e.f);D.a<D.c.c.length;){C=Wv(Rob(D),7);p=e.i.b+C.i.b+C.a.b;for(d=new Tob(C.b);d.a<d.c.c.length;){c=Wv(Rob(d),12);w=c.c;b=w.f.i.b+w.i.b+w.a.b-p;if((b<=0?0-b:b)<(i<=0?0-i:i)&&(b<=0?0-b:b)<(b<0?j:k)){i=b;f=true}}}h=Wv(yU(s.f,s.f.c.length-1),9);for(A=new Tob(h.f);A.a<A.c.c.length;){w=Wv(Rob(A),7);p=h.i.b+w.i.b+w.a.b;for(d=new Tob(w.e);d.a<d.c.c.length;){c=Wv(Rob(d),12);C=c.d;b=C.f.i.b+C.i.b+C.a.b-p;if((b<=0?0-b:b)<(i<=0?0-i:i)&&(b<=0?0-b:b)<(b<0?j:k)){i=b;f=true}}}if(f&&i!=0){for(n=new Tob(s.f);n.a<n.c.c.length;){m=Wv(Rob(n),9);m.i.b+=i}}}}
	function bU(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,A,B,C,D;l=dU($T(a,(sN(),dN)),b);o=cU($T(a,eN),b);u=cU($T(a,mN),b);B=eU($T(a,oN),b);m=eU($T(a,_M),b);s=cU($T(a,lN),b);p=cU($T(a,fN),b);w=cU($T(a,nN),b);v=cU($T(a,aN),b);C=eU($T(a,cN),b);r=cU($T(a,jN),b);t=cU($T(a,iN),b);A=cU($T(a,bN),b);D=eU($T(a,kN),b);n=eU($T(a,gN),b);q=cU($T(a,hN),b);c=oJ(Bv(tv(kw,1),hyb,26,12,[s.a,B.a,w.a,D.a]));d=oJ(Bv(tv(kw,1),hyb,26,12,[o.a,l.a,u.a,q.a]));e=r.a;f=oJ(Bv(tv(kw,1),hyb,26,12,[p.a,m.a,v.a,n.a]));j=oJ(Bv(tv(kw,1),hyb,26,12,[s.b,o.b,p.b,t.b]));i=oJ(Bv(tv(kw,1),hyb,26,12,[B.b,l.b,m.b,q.b]));k=C.b;h=oJ(Bv(tv(kw,1),hyb,26,12,[w.b,u.b,v.b,A.b]));VT($T(a,dN),c+e,j+k);VT($T(a,hN),c+e,j+k);VT($T(a,eN),c+e,0);VT($T(a,mN),c+e,j+k+i);VT($T(a,oN),0,j+k);VT($T(a,_M),c+e+d,j+k);VT($T(a,fN),c+e+d,0);VT($T(a,nN),0,j+k+i);VT($T(a,aN),c+e+d,j+k+i);VT($T(a,cN),0,j);VT($T(a,jN),c,0);VT($T(a,bN),0,j+k+i);VT($T(a,gN),c+e+d,0);g=new FI;g.a=oJ(Bv(tv(kw,1),hyb,26,12,[c+d+e+f,C.a,t.a,A.a]));g.b=oJ(Bv(tv(kw,1),hyb,26,12,[j+i+k+h,r.b,D.b,n.b]));return g}
	function Nfb(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o,p;d=new jJ;j=null;o=a.c;n=o.f.g;if(n!=(CX(),AX)&&n!=BX){throw new slb('The target node of the edge must be a normal node or a northSouthPort.')}if(n==BX){m=Wv(rJ(o,(Rib(),uib)),7);j=new HI(MI(Bv(tv(qz,1),Fzb,10,0,[m.f.i,m.i,m.a])).a,MI(Bv(tv(qz,1),Fzb,10,0,[o.f.i,o.i,o.a])).b);o=m}SI(d,MI(Bv(tv(qz,1),Fzb,10,0,[o.f.i,o.i,o.a])));g=Nlb(5,pgb(o.f,o.g));l=new GI(sgb(o.g));l.a*=g;l.b*=g;QI(d,vI(l,MI(Bv(tv(qz,1),Fzb,10,0,[o.f.i,o.i,o.a]))));!!j&&TI(d,j,d.c.b,d.c);f=a;i=a;h=null;c=false;while(f){e=f.a;if(e.b!=0){if(c){QI(d,CI(vI(h,(Bxb(e.b!=0),Wv(e.a.a.c,10))),0.5));c=false}else{c=true}h=xI((Bxb(e.b!=0),Wv(e.c.b.c,10)));Ue(d,e);_I(e)}i=f;f=Wv(re(Ktb(b.d,f)),12)}p=i.d;if(p.f.g==BX){m=Wv(rJ(p,(Rib(),uib)),7);QI(d,new HI(MI(Bv(tv(qz,1),Fzb,10,0,[m.f.i,m.i,m.a])).a,MI(Bv(tv(qz,1),Fzb,10,0,[p.f.i,p.i,p.a])).b));p=m}g=Nlb(5,pgb(p.f,p.g));l=new GI(sgb(p.g));CI(l,g);QI(d,vI(l,MI(Bv(tv(qz,1),Fzb,10,0,[p.f.i,p.i,p.a]))));SI(d,MI(Bv(tv(qz,1),Fzb,10,0,[p.f.i,p.i,p.a])));k=new efb(d);Ue(a.a,Veb(k))}
	function bZ(a){var b,c,d,e,f,g,h,i,j,k,l,m,n,o;if(gw(rJ(a.c,(eM(),TL)))===gw((KM(),GM))||gw(rJ(a.c,TL))===gw(FM)){for(k=new Tob(a.c.f);k.a<k.c.c.length;){j=Wv(Rob(k),7);if(j.g==(sN(),$M)||j.g==pN){return false}}}for(d=Uh(mX(a.c));Cm(d);){c=Wv(Dm(d),12);if(c.c.f==c.d.f){return false}}if(MM(Wv(rJ(a.c,TL),28))){n=new GU;for(i=nX(a.c,(sN(),rN)).mb();i.G();){g=Wv(i.H(),7);vU(n,Sh((Gi(),new gr(Ti(Bv(tv(UF,1),syb,1,4,[g.b,g.e]))))))}o=(_b(n),new Vh(n));n=new GU;for(h=nX(a.c,ZM).mb();h.G();){g=Wv(h.H(),7);vU(n,Sh((Gi(),new gr(Ti(Bv(tv(UF,1),syb,1,4,[g.b,g.e]))))))}b=(_b(n),new Vh(n))}else{o=iX(a.c);b=mX(a.c)}f=!sl(mX(a.c));e=!sl(iX(a.c));if(!f&&!e){return false}if(!f){a.e=1;return true}if(!e){a.e=0;return true}if(Ul((Il(),new Im(Dl(ul(o.a,new yl)))))==1){l=(_b(o),Wv(Ql(new Im(Dl(ul(o.a,new yl)))),12)).c.f;if(l.g==(CX(),zX)&&Wv(rJ(l,(Rib(),qib)),7).f!=a.c){a.e=2;return true}}if(Ul(new Im(Dl(ul(b.a,new yl))))==1){m=(_b(b),Wv(Ql(new Im(Dl(ul(b.a,new yl)))),12)).d.f;if(m.g==(CX(),zX)&&Wv(rJ(m,(Rib(),rib)),7).f!=a.c){a.e=3;return true}}return false}
	function K$(a,b,c){var d,e,f,g,h,i,j,k,l,m,n,o,p,q,r;d=new GU;e=$xb;f=$xb;g=$xb;if(c){e=a.e.a;for(p=new Tob(b.f);p.a<p.c.c.length;){o=Wv(Rob(p),7);for(i=new Tob(o.e);i.a<i.c.c.length;){h=Wv(Rob(i),12);if(h.a.b!=0){k=Wv(UI(h.a),10);if(k.a<e){f=e-k.a;g=$xb;d.c=xv(UF,syb,1,0,4,1);e=k.a}if(k.a<=e){d.c[d.c.length]=h;h.a.b>1&&(g=Qlb(g,Jlb(Wv(tn(h.a,1),10).b-k.b)))}}}}}else{for(p=new Tob(b.f);p.a<p.c.c.length;){o=Wv(Rob(p),7);for(i=new Tob(o.b);i.a<i.c.c.length;){h=Wv(Rob(i),12);if(h.a.b!=0){m=Wv(VI(h.a),10);if(m.a>e){f=m.a-e;g=$xb;d.c=xv(UF,syb,1,0,4,1);e=m.a}if(m.a>=e){d.c[d.c.length]=h;h.a.b>1&&(g=Qlb(g,Jlb(Wv(tn(h.a,h.a.b-2),10).b-m.b)))}}}}}if(d.c.length!=0&&f>b.j.a/2&&g>b.j.b/2){n=new RX;PX(n,b);QX(n,(sN(),$M));n.i.a=b.j.a/2;r=new RX;PX(r,b);QX(r,pN);r.i.a=b.j.a/2;r.i.b=b.j.b;for(i=new Tob(d);i.a<i.c.c.length;){h=Wv(Rob(i),12);if(c){j=Wv(YI(h.a),10);q=h.a.b==0?MX(h.d):Wv(UI(h.a),10);q.b>=j.b?dW(h,r):dW(h,n)}else{j=Wv(ZI(h.a),10);q=h.a.b==0?MX(h.c):Wv(VI(h.a),10);q.b>=j.b?eW(h,r):eW(h,n)}l=Wv(rJ(h,(eM(),CL)),44);!!l&&Ve(l,j,true)}b.i.a=e-b.j.a/2}}
	function N2(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t;r=new GU;s=new GU;t=new GU;for(f=new Tob(b);f.a<f.c.c.length;){e=Wv(Rob(f),75);e.k>50?(r.c[r.c.length]=e,true):e.k>0?(s.c[s.c.length]=e,true):(t.c[t.c.length]=e,true)}if(s.c.length==1&&r.c.length==0){xU(r,s);s.c=xv(UF,syb,1,0,4,1)}r.c.length!=0&&Zsb(U2(a.a),(Ieb(),meb))&&Zsb(U2(a.a),(Ieb(),oeb))?L2(a,r):xU(s,r);s.c.length==0||M2(a,s);if(t.c.length!=0){c=V2(a.a);if(c.c!=0){k=new Tob(t);i=(_b(c),Nl((new vl(c)).a));while(k.a<k.c.c.length){e=Wv(Rob(k),75);while(k.a<k.c.c.length&&e.a.a.Y()<2){e=Wv(Rob(k),75)}if(e.a.a.Y()>1){p=Wv(nm(i),60);aeb(e,p,true);Sob(k);Y2(a.a,p)}}}m=t.c.length;d=O2(a);n=new GU;g=m/T2(a.a).c|0;for(h=0;h<g;h++){xU(n,T2(a.a))}o=m%T2(a.a).c;if(o>3){xU(n,(Ieb(),Ieb(),geb));o-=4}switch(o){case 3:vU(n,Meb(d));case 2:q=Leb(Meb(d));do{q=Leb(q)}while(!Zsb(U2(a.a),q));n.c[n.c.length]=q;q=Neb(Meb(d));do{q=Neb(q)}while(!Zsb(U2(a.a),q));n.c[n.c.length]=q;break;case 1:vU(n,Meb(d));}l=new Tob(n);j=new Tob(t);while(l.a<l.c.c.length&&j.a<j.c.c.length){aeb(Wv(Rob(j),75),Wv(Rob(l),60),true)}}}
	function G9(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w;k=b.c.c.length;a.a=xv(qB,Txb,51,k,0,2);a.b=xv(qB,Txb,51,k,0,2);a.k=xv(qB,Txb,51,k,0,2);i=xv(mw,Yyb,26,k,12,1);g=xv(KH,xAb,26,k,13,1);a.c=xv(KH,xAb,26,k,13,1);a.d=xv(KH,xAb,26,k,13,1);r=0;v=0;m=new Fnb(b.c,0);while(m.b<m.d.Y()){j=(Bxb(m.b<m.d.Y()),Wv(m.d.sb(m.c=m.b++),16));l=m.b-1;n=j.a.c.length;a.a[l]=xv(qB,Nzb,9,n,0,1);a.k[l]=xv(qB,Nzb,9,n,0,1);a.b[l]=xv(qB,Nzb,9,n,0,1);i[l]=0;g[l]=false;s=new Fnb(j.a,0);while(s.b<s.d.Y()){q=(Bxb(s.b<s.d.Y()),Wv(s.d.sb(s.c=s.b++),9));a.b[l][s.b-1]=q;q.k=r++;o=Wv(rJ(q,(Rib(),nib)),9);!!o&&(Nm(a.g,o,q,null),true);for(u=new Tob(q.f);u.a<u.c.c.length;){t=Wv(Rob(u),7);t.k=v++;for(f=new Tob(t.e);f.a<f.c.c.length;){e=Wv(Rob(f),12);e.d.f.d==j&&++i[l]}t.g==(sN(),ZM)?t.e.c.length+t.b.c.length>1&&(a.c[l]=true):t.g==rN&&t.e.c.length+t.b.c.length>1&&(a.d[l]=true)}if(q.g==(CX(),BX)){++i[l];g[l]=true}}}c=true;p=true;for(h=0;h<a.d.length-1;h++){d=a.c[h]||a.d[h+1];c=c&d;p=p&!d}a.j=xv(lw,tAb,26,v,12,1);w=xv(mw,Yyb,26,v,12,1);if(!c){a.i=new iab(i,g,w);a.f=a.i}if(!p){a.e=new mab(i,g,w);a.f=a.e}}
	function iU(a,b,c){var d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,A,B;a.d=new HI(Uzb,Uzb);a.c=new HI(Vzb,Vzb);for(m=b.mb();m.G();){k=Wv(m.H(),55);for(t=new Tob(k.b);t.a<t.c.c.length;){s=Wv(Rob(t),9);a.d.a=Qlb(a.d.a,s.i.a-s.e.b);a.d.b=Qlb(a.d.b,s.i.b-s.e.d);a.c.a=Nlb(a.c.a,s.i.a+s.j.a+s.e.c);a.c.b=Nlb(a.c.b,s.i.b+s.j.b+s.e.a)}}h=new cV;for(l=b.mb();l.G();){k=Wv(l.H(),55);d=rU(a,k);vU(h.a,d);d.a=d.a|!Wv(rJ(d.c,(Rib(),fib)),18).V()}a.b=(xR(),B=new HR,B.f=new kR(c),B.b=jR(B.f,h),B);BR((o=a.b,new sI,o));a.e=new FI;a.a=a.b.f.e;for(g=new Tob(h.a);g.a<g.c.c.length;){e=Wv(Rob(g),347);u=CR(a.b,e);TW(e.c,u.a,u.b);for(q=new Tob(e.c.b);q.a<q.c.c.length;){p=Wv(Rob(q),9);if(p.g==(CX(),xX)){r=mU(a,p.i,Wv(rJ(p,(Rib(),hib)),32));vI(BI(p.i),r)}}}for(f=new Tob(h.a);f.a<f.c.c.length;){e=Wv(Rob(f),347);for(j=new Tob(aV(e));j.a<j.c.c.length;){i=Wv(Rob(j),12);A=new kJ(i.a);rn(A,0,MX(i.c));QI(A,MX(i.d));n=null;for(w=WI(A,0);w.b!=w.d.c;){v=Wv(_ub(w),10);if(!n){n=v;continue}if(Xs(n.a,v.a)){a.e.a=Qlb(a.e.a,n.a);a.a.a=Nlb(a.a.a,n.a)}else if(Xs(n.b,v.b)){a.e.b=Qlb(a.e.b,n.b);a.a.b=Nlb(a.a.b,n.b)}n=v}}}zI(a.e);vI(a.a,a.e)}
	function U1(a,b,c,d,e){var f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,A,B,C,D,F;p=new HU(b.b);u=new HU(b.b);m=new HU(b.b);B=new HU(b.b);q=new HU(b.b);for(A=WI(b,0);A.b!=A.d.c;){v=Wv(_ub(A),7);for(h=new Tob(v.e);h.a<h.c.c.length;){f=Wv(Rob(h),12);if(f.c.f==f.d.f){if(v.g==f.d.g){B.c[B.c.length]=f;continue}else if(v.g==(sN(),$M)&&f.d.g==pN){q.c[q.c.length]=f;continue}}}}for(i=new Tob(q);i.a<i.c.c.length;){f=Wv(Rob(i),12);V1(a,f,c,d,(sN(),ZM))}for(g=new Tob(B);g.a<g.c.c.length;){f=Wv(Rob(g),12);C=new uX(a);sX(C,(CX(),BX));sJ(C,(eM(),TL),(KM(),FM));sJ(C,(Rib(),uib),f);D=new RX;sJ(D,uib,f.d);QX(D,(sN(),rN));PX(D,C);F=new RX;sJ(F,uib,f.c);QX(F,ZM);PX(F,C);sJ(f.c,Bib,C);sJ(f.d,Bib,C);dW(f,null);eW(f,null);c.c[c.c.length]=C;sJ(C,aib,Elb(2))}for(w=WI(b,0);w.b!=w.d.c;){v=Wv(_ub(w),7);j=v.b.c.length>0;r=v.e.c.length>0;j&&r?(m.c[m.c.length]=v,true):j?(p.c[p.c.length]=v,true):r&&(u.c[u.c.length]=v,true)}for(o=new Tob(p);o.a<o.c.c.length;){n=Wv(Rob(o),7);vU(e,T1(a,n,null,c))}for(t=new Tob(u);t.a<t.c.c.length;){s=Wv(Rob(t),7);vU(e,T1(a,null,s,c))}for(l=new Tob(m);l.a<l.c.c.length;){k=Wv(Rob(l),7);vU(e,T1(a,k,k,c))}}
	function ZP(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,A;u=new II(b.d);i=new GU;for(t=new Tob(b.b);t.a<t.c.c.length;){r=Wv(Rob(t),9);n=Wv(Smb(a.j,r),69);if(n){$P(a,r,n,u);for(w=new Tob(r.f);w.a<w.c.c.length;){v=Wv(Rob(w),7);o=Wv(Smb(a.n,v),69);if(o){$P(a,v,o,QP);WP(o,(eM(),WL),new lv(yc(v.g)))}if(gw(rJ(r,(eM(),VL)))!==gw((UM(),RM))){for(q=new Tob(v.c);q.a<q.c.c.length;){p=Wv(Rob(q),33);m=Wv(Smb(a.f,p),69);$P(a,p,m,QP)}}}if(Wv(rJ(r,(eM(),JL)),86).Y()!=0){for(q=new Tob(r.c);q.a<q.c.c.length;){p=Wv(Rob(q),33);m=Wv(Smb(a.f,p),69);$P(a,p,m,QP)}}for(h=Uh(mX(r));Cm(h);){f=Wv(Dm(h),12);SW(f.d.f,r)||(i.c[i.c.length]=f,true)}}}A=Wv(rJ(b,(Rib(),zib)),9);if(A){for(h=Uh(mX(A));Cm(h);){f=Wv(Dm(h),12);SW(f.d.f,A)&&(i.c[i.c.length]=f,true)}}for(g=new Tob(i);g.a<g.c.c.length;){f=Wv(Rob(g),12);l=Wv(Smb(a.b,f),69);YP(a,f,l,u);for(q=new Tob(f.b);q.a<q.c.c.length;){p=Wv(Rob(q),33);m=Wv(Smb(a.f,p),69);$P(a,p,m,u)}}c=(d=Wv(rJ(b,Xhb),15).a,new HI(b.e.a+b.a.b+b.a.c+2*d,b.e.b+b.a.d+b.a.a+2*d));k=Wv(rJ(b,zib),9);if(k){k.j.a=c.a;k.j.b=c.b}j=Wv(rJ(b,PP),69);VP(a,j,Jzb,c.a);VP(a,j,Kzb,c.b);for(s=new Tob(b.b);s.a<s.c.c.length;){r=Wv(Rob(s),9);e=Wv(rJ(r,sib),55);!!e&&ZP(a,e)}}
	function Xfb(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,A,B,C,D,F,G,H;F=new aJ;B=new aJ;r=-1;for(i=new Tob(a);i.a<i.c.c.length;){g=Wv(Rob(i),77);g.i=r--;l=0;v=0;for(f=new Tob(g.j);f.a<f.c.c.length;){d=Wv(Rob(f),117);v+=d.c}for(e=new Tob(g.d);e.a<e.c.c.length;){d=Wv(Rob(e),117);l+=d.c}g.e=l;g.k=v;v==0?(TI(B,g,B.c.b,B.c),true):l==0&&(TI(F,g,F.c.b,F.c),true)}H=new Yub((Oh(),a));m=a.c.length;q=m+1;s=m-1;o=new GU;while(H.a.Y()!=0){while(B.b!=0){A=(Bxb(B.b!=0),Wv($I(B,B.a.a),77));H.a.eb(A)!=null;A.i=s--;agb(A,F,B)}while(F.b!=0){C=(Bxb(F.b!=0),Wv($I(F,F.a.a),77));H.a.eb(C)!=null;C.i=q++;agb(C,F,B)}p=eyb;for(j=(t=(new Snb(H.a)).a.bb().mb(),new Ynb(t));j.a.G();){g=(k=Wv(j.a.H(),21),Wv(k.yb(),77));u=g.k-g.e;if(u>=p){if(u>p){o.c=xv(UF,syb,1,0,4,1);p=u}o.c[o.c.length]=g}}if(o.c.length!=0){n=Wv(yU(o,vvb(b,o.c.length)),77);H.a.eb(n)!=null;n.i=q++;agb(n,F,B);o.c=xv(UF,syb,1,0,4,1)}}w=a.c.length+1;for(h=new Tob(a);h.a<h.c.c.length;){g=Wv(Rob(h),77);g.i<m&&(g.i+=w)}for(D=new Tob(a);D.a<D.c.c.length;){C=Wv(Rob(D),77);c=new Fnb(C.j,0);while(c.b<c.d.Y()){d=(Bxb(c.b<c.d.Y()),Wv(c.d.sb(c.c=c.b++),117));G=d.b;if(C.i>G.i){vnb(c);BU(G.d,d);if(d.c>0){d.a=G;vU(G.j,d);d.b=C;vU(C.d,d)}}}}}
	function OO(a){var b,c,d;for(d=new Lsb((new Fsb(a.c)).a);htb(d.a);){c=(d.b=itb(d.a),new Psb(d.c,d.b));b=Wv(c.b.b[c.a.e],62);switch(Wv(c.a,67).e){case 0:b.d=0;b.e=-(b.b+a.d);break;case 1:b.d=(a.e.e.j.a-b.c)/2;b.e=-(b.b+a.d);break;case 2:b.d=a.e.e.j.a-b.c;b.e=-(b.b+a.d);break;case 3:b.d=0;b.e=a.e.e.j.b+a.d;break;case 4:b.d=(a.e.e.j.a-b.c)/2;b.e=a.e.e.j.b+a.d;break;case 5:b.d=a.e.e.j.a-b.c;b.e=a.e.e.j.b+a.d;break;case 6:b.d=-(b.c+a.d);b.e=0;break;case 7:b.d=-(b.c+a.d);b.e=(a.e.e.j.b-b.b)/2;break;case 8:b.d=-(b.c+a.d);b.e=a.e.e.j.b-b.b;break;case 9:b.d=a.e.e.j.a+a.d;b.e=0;break;case 10:b.d=a.e.e.j.a+a.d;b.e=(a.e.e.j.b-b.b)/2;break;case 11:b.d=a.e.e.j.a+a.d;b.e=a.e.e.j.b-b.b;break;case 12:b.d=a.q.b+a.d;b.e=a.q.d+a.d;break;case 13:b.d=(a.e.e.j.a-b.c)/2;b.e=a.q.d+a.d;break;case 14:b.d=a.e.e.j.a-a.q.c-b.c-a.d;b.e=a.q.d+a.d;break;case 15:b.d=a.q.b+a.d;b.e=(a.e.e.j.b-b.b)/2;break;case 16:b.d=(a.e.e.j.a-b.c)/2;b.e=(a.e.e.j.b-b.b)/2;break;case 17:b.d=a.e.e.j.a-a.q.c-b.c-a.d;b.e=(a.e.e.j.b-b.b)/2;break;case 18:b.d=a.q.b+a.d;b.e=a.e.e.j.b-a.q.a-b.b-a.d;break;case 19:b.d=(a.e.e.j.a-b.c)/2;b.e=a.e.e.j.b-a.q.a-b.b-a.d;break;case 20:b.d=a.e.e.j.a-a.q.c-b.c-a.d;b.e=a.e.e.j.b-a.q.a-b.b-a.d;}}}
	function ddb(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,A,B,C,D,F,G,H,I;F=new aJ;B=new aJ;o=-1;for(s=new Tob(a);s.a<s.c.c.length;){q=Wv(Rob(s),80);q.d=o--;i=0;v=0;for(f=new Tob(q.e);f.a<f.c.c.length;){d=Wv(Rob(f),118);v+=d.c}for(e=new Tob(q.b);e.a<e.c.c.length;){d=Wv(Rob(e),118);i+=d.c}q.c=i;q.f=v;v==0?(TI(B,q,B.c.b,B.c),true):i==0&&(TI(F,q,F.c.b,F.c),true)}H=(I=new Vwb,ml(I,a),I);j=a.c.length;p=j-1;n=j+1;l=new GU;while(H.a.c!=0){while(B.b!=0){A=(Bxb(B.b!=0),Wv($I(B,B.a.a),80));cwb(H.a,A)!=null;A.d=p--;jdb(A,F,B)}while(F.b!=0){C=(Bxb(F.b!=0),Wv($I(F,F.a.a),80));cwb(H.a,C)!=null;C.d=n++;jdb(C,F,B)}m=eyb;for(t=(h=new rwb((new wwb((new Gob(H.a)).a)).b),new Mob(h));Bnb(t.a.a);){q=(g=pwb(t.a),Wv(g.yb(),80));u=q.f-q.c;if(u>=m){if(u>m){l.c=xv(UF,syb,1,0,4,1);m=u}l.c[l.c.length]=q}}if(l.c.length!=0){k=Wv(yU(l,vvb(b,l.c.length)),80);cwb(H.a,k)!=null;k.d=n++;jdb(k,F,B);l.c=xv(UF,syb,1,0,4,1)}}w=a.c.length+1;for(r=new Tob(a);r.a<r.c.c.length;){q=Wv(Rob(r),80);q.d<j&&(q.d+=w)}for(D=new Tob(a);D.a<D.c.c.length;){C=Wv(Rob(D),80);c=new Fnb(C.e,0);while(c.b<c.d.Y()){d=(Bxb(c.b<c.d.Y()),Wv(c.d.sb(c.c=c.b++),118));G=d.b;if(C.d>G.d){vnb(c);BU(G.b,d);if(d.c>0){d.a=G;vU(G.e,d);d.b=C;vU(C.b,d)}}}}}
	function e0(a){switch(a.e){case 14:return new wY;case 37:return new SY;case 8:return new YY;case 30:return new cZ;case 38:return new qZ;case 3:return new tZ;case 47:case 1:return new SZ((XZ(),WZ));case 4:return new wZ;case 49:return new AZ;case 23:return new $5;case 13:return new d$;case 34:return new j$;case 40:return new w$;case 35:return new F$;case 44:return new o4;case 28:return new I$;case 39:return new L$;case 27:return new N$;case 6:return new R$;case 31:return new m0;case 9:return new q0;case 43:return new w0;case 17:return new A0;case 18:return new G0;case 29:return new S0;case 11:return new q1;case 12:return new Z0;case 36:return new _0;case 46:case 0:return new SZ((XZ(),VZ));case 41:return new b1;case 15:return new e1;case 33:return new k1;case 42:return new R1;case 22:return new X1;case 19:return new k0;case 10:return new _1;case 7:return new c2;case 24:return new f2;case 21:return new h2;case 16:return new n2;case 45:return new q2;case 26:return new x2;case 20:return new A2;case 25:return new H2;case 5:return new l3;case 32:return new u3;case 48:case 2:return new SZ((XZ(),UZ));default:throw new slb('No implementation is available for the layout processor '+(a.d!=null?a.d:''+a.e));}}
	function PO(a){var b,c,d,e,f,g,h;c=a.e.e.j;a.b?(b=Wv(oW(a.e,(eM(),jL)),65)):(b=new EP(a.k,a.k,a.k,a.k));e=c.a;(a.b||a.g[1]!=(zM(),xM))&&(e-=b.b+b.c);f=c.a;(a.b||a.g[3]!=(zM(),xM))&&(f-=b.b+b.c);g=c.b;(a.b||a.g[4]!=(zM(),xM))&&(g-=b.d+b.a);d=c.b;(a.b||a.g[2]!=(zM(),xM))&&(d-=b.d+b.a);if(aP(a,(sN(),$M))==(zM(),xM)){a.j[1]=(e-dP(a,$M))/bP(a,$M);a.f=a.b?b.b+(eP(a,$M)==1?a.j[1]:0):a.j[1]}else{a.j[1]=a.k;h=dP(a,$M)+a.j[1]*(eP(a,$M)-1);switch(aP(a,$M).e){case 2:a.f=b.b;break;case 3:a.f=b.b+(e-h)/2;break;case 4:a.f=c.a-h-b.c;}}if(aP(a,pN)==xM){a.j[3]=(f-dP(a,pN))/bP(a,pN);a.r=c.a-(a.b?b.c+(eP(a,pN)==1?a.j[3]:0):a.j[3])}else{a.j[3]=a.k;h=dP(a,pN)+a.j[3]*(eP(a,pN)-1);switch(aP(a,pN).e){case 2:a.r=h+b.b;break;case 3:a.r=c.a-(f-h)/2-b.c;break;case 4:a.r=c.a-b.c;}}if(aP(a,rN)==xM){a.j[4]=(g-dP(a,rN))/bP(a,rN);a.s=c.b-(a.b?b.a+(eP(a,rN)==1?a.j[4]:0):a.j[4])}else{a.j[4]=a.k;h=dP(a,rN)+a.j[4]*(eP(a,rN)-1);switch(aP(a,rN).e){case 2:a.s=h+b.d;break;case 3:a.s=c.b-(g-h)/2-b.a;break;case 4:a.s=c.b-b.a;}}if(aP(a,ZM)==xM){a.j[2]=(d-dP(a,ZM))/bP(a,ZM);a.a=a.b?b.d+(eP(a,ZM)==1?a.j[2]:0):a.j[2]}else{a.j[2]=a.k;h=dP(a,ZM)+a.j[2]*(eP(a,ZM)-1);switch(aP(a,ZM).e){case 2:a.a=b.d;break;case 3:a.a=b.d+(d-h)/2;break;case 4:a.a=c.b-h-b.a;}}}
	function hab(a,b,c){var d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,A,B,C,D,F,G,H,I;G=0;g=0;l=b[0].d;B=c[0].d;for(o=0,q=c.length;o<q;++o){m=c[o];if(LM(Wv(rJ(m,(eM(),TL)),28))){s=0;for(v=new Tob(m.f);v.a<v.c.c.length;){u=Wv(Rob(v),7);if(u.g==(sN(),$M)){for(f=new Tob(u.b);f.a<f.c.c.length;){e=Wv(Rob(f),12);if(e.c.f.d==l){++s;break}}}else{break}}t=0;A=new Fnb(m.f,m.f.c.length);while(A.b>0){u=(Bxb(A.b>0),Wv(A.a.sb(A.c=--A.b),7));w=0;for(f=new Tob(u.b);f.a<f.c.c.length;){e=Wv(Rob(f),12);e.c.f.d==l&&++w}if(w>0){if(u.g==(sN(),$M)){a.a[u.k]=G;++G}else{a.a[u.k]=G+s+t;++t}g+=w}}G+=t}else{r=0;for(v=new Tob(m.f);v.a<v.c.c.length;){u=Wv(Rob(v),7);for(f=new Tob(u.b);f.a<f.c.c.length;){e=Wv(Rob(f),12);e.c.f.d==l&&++r}a.a[u.k]=G}if(r>0){++G;g+=r}}}C=xv(mw,Yyb,26,g,12,1);i=0;for(n=0,p=b.length;n<p;++n){m=b[n];if(LM(Wv(rJ(m,(eM(),TL)),28))){for(v=new Tob(m.f);v.a<v.c.c.length;){u=Wv(Rob(v),7);D=i;for(f=new Tob(u.e);f.a<f.c.c.length;){e=Wv(Rob(f),12);F=e.d;F.f.d==B&&kab(C,D,i++,a.a[F.k])}}}else{D=i;for(v=new Tob(m.f);v.a<v.c.c.length;){u=Wv(Rob(v),7);for(f=new Tob(u.e);f.a<f.c.c.length;){e=Wv(Rob(f),12);F=e.d;F.f.d==B&&kab(C,D,i++,a.a[F.k])}}}}h=1;while(h<G){h*=2}I=2*h-1;h-=1;H=xv(mw,Yyb,26,I,12,1);d=0;for(k=0;k<g;k++){j=C[k]+h;++H[j];while(j>0){j%2>0&&(d+=H[j+1]);j=(j-1)/2|0;++H[j]}}return d}
	function BV(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,A,B,C,D,F,G,H,I,J;nI(b,'Compound graph postprocessor',1);c=Ckb(Ixb(Xv(rJ(a,(Mjb(),gjb)))));h=Wv(rJ(a,(Rib(),bib)),144);l=new vtb;for(w=h.W().mb();w.G();){v=Wv(w.H(),12);g=new IU(h.U(v));Gpb(g,new $V(a));F=VV((Cxb(0,g.c.length),Wv(g.c[0],114)));H=WV(Wv(yU(g,g.c.length-1),114));_I(v.a);C=F.f;SW(H.f,C)?(B=Wv(rJ(C,sib),55)):(B=hX(C));o=Wv(rJ(v,(eM(),CL)),44);if(ol(g,zV)){if(!o){o=new jJ;sJ(v,CL,o)}else{_I(o)}}else !!o&&sJ(v,CL,null);q=null;for(f=new Tob(g);f.a<f.c.c.length;){e=Wv(Rob(f),114);u=new FI;MW(u,e.a,B);r=e.b;d=new jJ;gJ(d,0,r.a);hJ(d,u);D=new II(MX(r.c));G=new II(MX(r.d));D.a+=u.a;D.b+=u.b;G.a+=u.a;G.b+=u.b;if(q){d.b==0?(t=G):(t=(Bxb(d.b!=0),Wv(d.a.a.c,10)));I=Jlb(q.a-t.a)>dAb;J=Jlb(q.b-t.b)>dAb;(!c&&I&&J||c&&(I||J))&&QI(v.a,D)}Ue(v.a,d);d.b==0?(q=D):(q=(Bxb(d.b!=0),Wv(d.c.b.c,10)));s=Wv(rJ(r,CL),44);if(s){n=new jJ;gJ(n,0,s);hJ(n,u);Ue(o,n)}if(WV(e)==H){if(hX(H.f)!=e.a){u=new FI;MW(u,hX(H.f),B)}sJ(v,Pib,u)}p=new Fnb(r.b,0);while(p.b<p.d.Y()){i=(Bxb(p.b<p.d.Y()),Wv(p.d.sb(p.c=p.b++),33));if(gw(rJ(i,xib))!==gw(v)){continue}MW(i.i,hX(r.c.f),B);vnb(p);vU(v.b,i)}l.a.db(r,l)}dW(v,F);eW(v,H)}for(k=(A=(new Snb(l.a)).a.bb().mb(),new Ynb(A));k.a.G();){j=(m=Wv(k.a.H(),21),Wv(m.yb(),12));dW(j,null);eW(j,null)}pI(b)}
	function c$(a){var b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,A,B,C,D,F,G,H,I;C=Wv(rJ(a,(eM(),TL)),28);if(!(C!=(KM(),IM)&&C!=JM)){return}p=a.c;o=p.c.length;l=new HU((Mh(o+2,Uyb),$s(PH(PH(5,o+2),(o+2)/10|0))));q=new HU((Mh(o+2,Uyb),$s(PH(PH(5,o+2),(o+2)/10|0))));vU(l,new ntb);vU(l,new ntb);vU(q,new GU);vU(q,new GU);A=new vtb;for(b=0;b<o;b++){c=(Cxb(b,p.c.length),Wv(p.c[b],16));D=(Cxb(b,l.c.length),Wv(l.c[b],57));r=(mp(),new ntb);l.c[l.c.length]=r;G=(Cxb(b,q.c.length),Wv(q.c[b],20));t=new GU;q.c[q.c.length]=t;for(e=new Tob(c.a);e.a<e.c.c.length;){d=Wv(Rob(e),9);for(j=Uh(iX(d));Cm(j);){h=Wv(Dm(j),12);H=h.c.f;if(!_Z(H)){continue}A.a.db(H,A);F=Wv(D.cb(rJ(H,(Rib(),uib))),9);if(!F){F=$Z(a,H);D.db(rJ(H,uib),F);G.ib(F)}dW(h,Wv(yU(F.f,1),7))}for(i=Uh(mX(d));Cm(i);){h=Wv(Dm(i),12);I=h.d.f;if(!_Z(I)){continue}A.a.db(I,A);s=Wv(Smb(r,rJ(I,(Rib(),uib))),9);if(!s){s=$Z(a,I);Umb(r,rJ(I,uib),s);t.c[t.c.length]=s}eW(h,Wv(yU(s.f,0),7))}}}for(m=0;m<q.c.length;m++){u=(Cxb(m,q.c.length),Wv(q.c[m],20));if(u.V()){continue}if(m==0){n=new sY(a);Fxb(0,p.c.length);fxb(p.c,0,n)}else if(m==l.c.length-1){n=new sY(a);p.c[p.c.length]=n}else{n=(Cxb(m-1,p.c.length),Wv(p.c[m-1],16))}for(g=u.mb();g.G();){f=Wv(g.H(),9);rX(f,n)}}for(w=(B=(new Snb(A.a)).a.bb().mb(),new Ynb(B));w.a.G();){v=(k=Wv(w.a.H(),21),Wv(k.yb(),9));rX(v,null)}}
	function Pab(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,A,B,C,D,F,G,H,I,J,K;I=new GU;for(o=new Tob(b.c);o.a<o.c.c.length;){m=Wv(Rob(o),16);for(v=new Tob(m.a);v.a<v.c.c.length;){u=Wv(Rob(v),9);u.k=-1;l=eyb;B=eyb;for(D=new Tob(u.f);D.a<D.c.c.length;){C=Wv(Rob(D),7);for(e=new Tob(C.b);e.a<e.c.c.length;){c=Wv(Rob(e),12);F=Wv(rJ(c,(Rib(),Eib)),24).a;l=l>F?l:F}for(d=new Tob(C.e);d.a<d.c.c.length;){c=Wv(Rob(d),12);F=Wv(rJ(c,(Rib(),Eib)),24).a;B=B>F?B:F}}sJ(u,Fab,Elb(l));sJ(u,Gab,Elb(B))}}r=0;for(n=new Tob(b.c);n.a<n.c.c.length;){m=Wv(Rob(n),16);for(v=new Tob(m.a);v.a<v.c.c.length;){u=Wv(Rob(v),9);if(u.k<0){H=new Wab;H.b=r++;Mab(a,u,H);I.c[I.c.length]=H}}}A=Do(I.c.length);k=Do(I.c.length);for(g=0;g<I.c.length;g++){vU(A,new GU);vU(k,Elb(0))}Kab(b,I,A,k);J=Wv(FU(I,xv(wE,NAb,111,I.c.length,0,1)),625);w=Wv(FU(A,xv(sH,{3:1,5:1,6:1,672:1},20,A.c.length,0,1)),672);j=xv(mw,Yyb,26,k.c.length,12,1);for(h=0;h<j.length;h++){j[h]=(Cxb(h,k.c.length),Wv(k.c[h],24)).a}s=0;t=new GU;for(i=0;i<J.length;i++){j[i]==0&&vU(t,J[i])}q=xv(mw,Yyb,26,J.length,12,1);while(t.c.length!=0){H=Wv(AU(t,0),111);q[H.b]=s++;while(!w[H.b].V()){K=Wv(w[H.b].vb(0),111);--j[K.b];j[K.b]==0&&(t.c[t.c.length]=K,true)}}a.a=xv(wE,NAb,111,J.length,0,1);for(f=0;f<J.length;f++){p=J[f];G=q[f];a.a[G]=p;p.b=G;for(v=new Tob(p.f);v.a<v.c.c.length;){u=Wv(Rob(v),9);u.k=G}}return a.a}
	function JP(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,A,B,C;nI(b,'Fixed Layout',1);i=Wv(rJ(a,(eM(),uL)),122);p=0;q=0;for(t=new Tob(a.b);t.a<t.c.c.length;){r=Wv(Rob(t),9);B=Wv(rJ(r,YL),10);if(B){r.i.a=B.a;r.i.b=B.b;if(Wv(rJ(r,aM),86).kb((DN(),zN))){C=Wv(rJ(r,IL),15).a;j=Wv(rJ(r,HL),15).a;C>0&&j>0&&WW(r,new HI(C,j),true)}}p=Nlb(p,r.i.a+r.j.a);q=Nlb(q,r.i.b+r.j.b);for(n=new Tob(r.c);n.a<n.c.c.length;){l=Wv(Rob(n),33);B=Wv(rJ(l,YL),10);if(B){l.i.a=B.a;l.i.b=B.b}p=Nlb(p,r.i.a+l.i.a+l.j.a);q=Nlb(q,r.i.b+l.i.b+l.j.b)}for(v=new Tob(r.f);v.a<v.c.c.length;){u=Wv(Rob(v),7);B=Wv(rJ(u,YL),10);if(B){u.i.a=B.a;u.i.b=B.b}w=r.i.a+u.i.a;A=r.i.b+u.i.b;p=Nlb(p,w+u.j.a);q=Nlb(q,A+u.j.b);for(m=new Tob(u.c);m.a<m.c.c.length;){l=Wv(Rob(m),33);B=Wv(rJ(l,YL),10);if(B){l.i.a=B.a;l.i.b=B.b}p=Nlb(p,w+l.i.a+l.j.a);q=Nlb(q,A+l.i.b+l.j.b)}}for(h=Uh(mX(r));Cm(h);){f=Wv(Dm(h),12);o=KP(f);p=Nlb(p,o.a);q=Nlb(q,o.b)}for(g=Uh(iX(r));Cm(g);){f=Wv(Dm(g),12);if(gw(rJ(f.c.f,(Rib(),sib)))!==gw(a)){o=KP(f);p=Nlb(p,o.a);q=Nlb(q,o.b)}}}if(i==(NK(),JK)){for(s=new Tob(a.b);s.a<s.c.c.length;){r=Wv(Rob(s),9);for(g=Uh(mX(r));Cm(g);){f=Wv(Dm(g),12);k=LP(f);k.b==0?sJ(f,CL,null):sJ(f,CL,k)}}}a.e.a=p;a.e.b=q;sJ(a,aM,(DN(),d=Wv(Hkb(Lz),11),new atb(d,Wv(exb(d,d.length),11),0)));e=Wv(rJ(a,(Rib(),zib)),9);!!e&&sJ(e,aM,(c=Wv(Hkb(Lz),11),new atb(c,Wv(exb(c,c.length),11),0)));pI(b)}
	function Y8(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,A,B,C,D,F,G;if(!LM(Wv(rJ(b,(eM(),TL)),28))){if(b.f.c.length>1){A=xv(LF,Txb,15,a.a.length,0,1);j=Do(a.a.length);p=0;o=0;c=2*b.d.a.c.length+1;H:for(w=new Tob(b.f);w.a<w.c.c.length;){v=Wv(Rob(w),7);r=v.g==(sN(),$M)||v.g==pN;G=0;if(r){B=Wv(rJ(v,(Rib(),Bib)),9);if(!B){continue}m=false;u=false;for(D=new Tob(B.f);D.a<D.c.c.length;){C=Wv(Rob(D),7);gw(rJ(C,uib))===gw(v)&&(C.e.c.length==0?C.b.c.length==0||(m=true):(u=true))}m&&!u?(G=v.g==$M?-(!B.d?-1:zU(B.d.a,B,0)):c-(!B.d?-1:zU(B.d.a,B,0))):u&&!m?(G=(!B.d?-1:zU(B.d.a,B,0))+1):m&&u&&(G=v.g==$M?0:c/2)}else{for(t=new Tob(v.e);t.a<t.c.c.length;){s=Wv(Rob(t),12);e=s.d;if(e.f.d==b.d){j.c[j.c.length]=v;continue H}else{G+=a.a[e.k]}}for(l=new Tob(v.b);l.a<l.c.c.length;){k=Wv(Rob(l),12);e=k.c;if(e.f.d==b.d){j.c[j.c.length]=v;continue H}else{G-=a.a[e.k]}}}if(v.b.c.length+v.e.c.length>0){A[v.k]=new llb(G/(v.b.c.length+v.e.c.length));p=Rlb(p,A[v.k].a);o=Olb(o,A[v.k].a)}else r&&(A[v.k]=new llb(G))}q=(!b.d?-1:zU(b.d.a,b,0))+1;n=b.d.a.c.length+1;for(i=new Tob(j);i.a<i.c.c.length;){h=Wv(Rob(i),7);G=0;g=0;for(f=Uh(Sh((Gi(),new gr(Ti(Bv(tv(UF,1),syb,1,4,[new fY(h),new lY(h)]))))));Cm(f);){e=Wv(Dm(f),7);if(e.f.d==b.d){G+=jX(e.f)+1;++g}}d=G/g;F=h.g;F==(sN(),ZM)?d<q?(A[h.k]=new llb(p-d)):(A[h.k]=new llb(o+(n-d))):F==rN&&(d<q?(A[h.k]=new llb(o+d)):(A[h.k]=new llb(p-(n-d))))}Gpb(b.f,new a9(A))}sJ(b,TL,(KM(),EM))}}
	function O4(a){var b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,A,B,C;B=new GU;a.a.b.c=xv(UF,syb,1,0,4,1);u=(mp(),new ntb);for(r=new Tob(a.d.c);r.a<r.c.c.length;){p=Wv(Rob(r),16);for(t=new Tob(p.a);t.a<t.c.c.length;){s=Wv(Rob(t),9);if(Ckb(Ixb(Xv(rJ(s,(eM(),qL)))))){if(!sl(gX(s))){h=Wv(ql(gX(s)),12);v=h.c.f;v==s&&(v=h.d.f);w=new RJ(v,EI(xI(s.i),v.i));Umb(a.b,s,w);continue}}f=new Q3(s,a.d);vU(a.a.b,f);Ltb(u.d,s,f)}}for(q=new Tob(a.d.c);q.a<q.c.c.length;){p=Wv(Rob(q),16);for(t=new Tob(p.a);t.a<t.c.c.length;){s=Wv(Rob(t),9);f=Wv(re(Ktb(u.d,s)),25);for(k=Uh(mX(s));Cm(k);){i=Wv(Dm(k),12);d=WI(i.a,0);l=true;o=null;if(d.b!=d.d.c){b=Wv(_ub(d),10);if(i.c.g==(sN(),$M)){C=new X4(b,new HI(b.a,f.j.e),f,i);C.c=true;B.c[B.c.length]=C}if(i.c.g==pN){C=new X4(b,new HI(b.a,f.j.e+f.j.b),f,i);C.d=true;B.c[B.c.length]=C}while(d.b!=d.d.c){c=Wv(_ub(d),10);if(!RR(b.b,c.b)){o=new X4(b,c,null,i);B.c[B.c.length]=o;if(l){l=false;if(c.b<f.j.e){o.c=true}else if(c.b>f.j.e+f.j.b){o.d=true}else{o.d=true;o.c=true}}}d.b!=d.d.c&&(b=c)}if(o){g=Wv(Smb(u,i.d.f),25);if(b.b<g.j.e){o.c=true}else if(b.b>g.j.e+g.j.b){o.d=true}else{o.d=true;o.c=true}}}}for(j=Uh(iX(s));Cm(j);){i=Wv(Dm(j),12);if(i.a.b!=0){b=Wv(VI(i.a),10);if(i.d.g==(sN(),$M)){C=new X4(b,new HI(b.a,f.j.e),f,i);C.c=true;B.c[B.c.length]=C}if(i.d.g==pN){C=new X4(b,new HI(b.a,f.j.e+f.j.b),f,i);C.d=true;B.c[B.c.length]=C}}}}}if(B.c.length!=0){ypb();Gpb(B,null);n=(Cxb(0,B.c.length),Wv(B.c[0],142));e=new L3(n,a.d);for(m=1;m<B.c.length;m++){A=(Cxb(m,B.c.length),Wv(B.c[m],142));if(RR(e.j.d,A.j)&&!(TR(e.j.e+e.j.b,A.k)||TR(A.n,e.j.e))){K3(e,A)}else{vU(a.a.b,e);e=new L3(A,a.d)}}vU(a.a.b,e)}B.c=xv(UF,syb,1,0,4,1);N4(a)}
	function eZ(a,b,c,d,e,f){var g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,A,B,C,D,F,G,H,I,J,K,L,M;h=Wv(yU(a.d.c.c,d),16);K=new vtb;o=new vtb;for(n=0;n<h.a.c.length;++n){s=Wv(yU(h.a,n),9);n<c?(D=K.a.db(s,K),D==null):n>c&&(C=o.a.db(s,o),C==null)}L=new vtb;p=new vtb;for(u=(G=(new Snb(K.a)).a.bb().mb(),new Ynb(G));u.a.G();){s=(l=Wv(u.a.H(),21),Wv(l.yb(),9));g=b==1?mX(s):iX(s);for(j=(Il(),new Im(Dl(ul(g.a,new yl))));Cm(j);){i=Wv(Dm(j),12);rY(s.d)!=rY(i.d.f.d)&&stb(L,i.d.f)}}for(v=(H=(new Snb(o.a)).a.bb().mb(),new Ynb(H));v.a.G();){s=(l=Wv(v.a.H(),21),Wv(l.yb(),9));g=b==1?mX(s):iX(s);for(j=(Il(),new Im(Dl(ul(g.a,new yl))));Cm(j);){i=Wv(Dm(j),12);rY(s.d)!=rY(i.d.f.d)&&stb(p,i.d.f)}}if(aZ){Fmb()}B=Wv(yU(a.d.c.c,d+(b==1?1:-1)),16);q=eyb;r=$xb;for(m=0;m<B.a.c.length;m++){s=Wv(yU(B.a,m),9);L.a.R(s)?(q=q>m?q:m):p.a.R(s)&&(r=r<m?r:m)}if(q<r){for(w=(I=(new Snb(L.a)).a.bb().mb(),new Ynb(I));w.a.G();){s=(l=Wv(w.a.H(),21),Wv(l.yb(),9));for(k=Uh(mX(s));Cm(k);){i=Wv(Dm(k),12);if(rY(s.d)==rY(i.d.f.d)){return null}}for(j=Uh(iX(s));Cm(j);){i=Wv(Dm(j),12);if(rY(s.d)==rY(i.c.f.d)){return null}}}for(A=(F=(new Snb(p.a)).a.bb().mb(),new Ynb(F));A.a.G();){s=(l=Wv(A.a.H(),21),Wv(l.yb(),9));for(k=Uh(mX(s));Cm(k);){i=Wv(Dm(k),12);if(rY(s.d)==rY(i.d.f.d)){return null}}for(j=Uh(iX(s));Cm(j);){i=Wv(Dm(j),12);if(rY(s.d)==rY(i.c.f.d)){return null}}}K.a.Y()==0?(M=0):o.a.Y()==0?(M=B.a.c.length):(M=q+1);for(t=new Tob(h.a);t.a<t.c.c.length;){s=Wv(Rob(t),9);if(s.g==(CX(),BX)){return null}}if(f==1){return Co(Bv(tv(PF,1),Txb,24,0,[Elb(M)]))}else if(b==1&&d==e-2||b==0&&d==1){return Co(Bv(tv(PF,1),Txb,24,0,[Elb(M)]))}else{J=eZ(a,b,M,d+(b==1?1:-1),e,f-1);!!J&&b==1&&J.rb(0,Elb(M));return J}}return null}
	function aQ(b,c){var d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u;SP(c);o=(eM(),KL).b;if(o in c.a&&Pu(c,o).ic().a){return}j=Pu(c,'source');k=Pu(c,'sourcePort');l=Pu(c,'target');m=Pu(c,'targetPort');if(!j){throw new GQ("Edges must contain a 'source' property.",null,c)}else if(!j.lc()){throw new GQ("Invalid format of an edge's 'source' property. It must be a string.",j,c)}if(!l){throw new GQ("Edges must contain a 'target' property.",null,c)}else if(!l.lc()){throw new GQ("Invalid format of an edge's 'target' property. It must be a string.",l,c)}r=null;t=null;try{q=Wv(Tmb(b.i,j.lc().a),9);!!k&&!!k.lc()&&(r=Wv(Tmb(b.k,k.lc().a),7));s=Wv(Tmb(b.i,l.lc().a),9);!!m&&!!m.lc()&&(t=Wv(Tmb(b.k,m.lc().a),7))}catch(a){a=OH(a);if(aw(a,76)){throw new FQ("An edge's 'source', 'target', 'sourcePort', and 'targetPort' properties have to be strings.",c)}else throw NH(a)}if(!Ckb(Ixb(b.g))){if(!q||!s){return}else if(hX(q)!=hX(s)){return}}if(!q||!s){throw new FQ("An edge's source or target node could not be resolved.",c)}p=hX(q);e=new hW;sJ(e,(Rib(),uib),c);h=Wv(Pu(c,'id'),97);Vmb(b.a,h.a,e);Umb(b.b,e,c);hQ(c,e);dQ(b,c,e,p);f=Wv(rJ(p,jib),18);q==s&&f.ib((ohb(),nhb));if(!r){r=OW(q,new FI,(djb(),bjb),p)}else if(r.f!=q){throw new EQ('Inconsistent source port reference found.')}if(!t){t=OW(s,new FI,(djb(),ajb),p)}else if(t.f!=s){throw new EQ('Inconsistent target port reference found.')}dW(e,r);eW(e,t);(tl(Sh((Gi(),new gr(Ti(Bv(tv(UF,1),syb,1,4,[r.b,r.e]))))))>1||tl(Sh(new gr(Ti(Bv(tv(UF,1),syb,1,4,[t.b,t.e])))))>1)&&f.ib((ohb(),ihb));if(gw(rJ(p,(Mjb(),kjb)))===gw((p9(),n9))&&!(Hzb in c.a)){d=new jJ;try{i=Pu(c,Hzb).hc();for(g=0;g<i.a.length;++g){n=gu(i,g).kc();u=new HI(Pu(n,'x').jc().a,Pu(n,'y').jc().a);TI(d,u,d.c.b,d.c)}sJ(e,vib,d)}catch(a){a=OH(a);if(aw(a,54)){throw new FQ("Invalid format of an edges 'bendPoints' property.",c)}else throw NH(a)}}sJ(e,CL,null)}
	function d0(){d0=iI;L_=new f0('LEFT_DIR_PREPROCESSOR',0);o_=new f0('DOWN_DIR_PREPROCESSOR',1);c0=new f0('UP_DIR_PREPROCESSOR',2);m_=new f0('COMMENT_PREPROCESSOR',3);p_=new f0('EDGE_AND_LAYER_CONSTRAINT_EDGE_REVERSER',4);__=new f0('SPLINE_SELF_LOOP_PREPROCESSOR',5);z_=new f0('INTERACTIVE_EXTERNAL_PORT_POSITIONER',6);T_=new f0('PARTITION_PREPROCESSOR',7);j_=new f0('BIG_NODES_PREPROCESSOR',8);D_=new f0('LABEL_DUMMY_INSERTER',9);S_=new f0('PARTITION_POSTPROCESSOR',10);P_=new f0('NODE_PROMOTION',11);I_=new f0('LAYER_CONSTRAINT_PROCESSOR',12);s_=new f0('HIERARCHICAL_PORT_CONSTRAINT_PROCESSOR',13);h_=new f0('BIG_NODES_INTERMEDIATEPROCESSOR',14);N_=new f0('LONG_EDGE_SPLITTER',15);W_=new f0('PORT_SIDE_PROCESSOR',16);F_=new f0('LABEL_DUMMY_SWITCHER',17);G_=new f0('LABEL_MANAGEMENT_PROCESSOR',18);A_=new f0('INVERTED_PORT_PROCESSOR',19);Z_=new f0('SELF_LOOP_PROCESSOR',20);V_=new f0('PORT_LIST_SORTER',21);R_=new f0('NORTH_SOUTH_PORT_PREPROCESSOR',22);r_=new f0('GREEDY_SWITCH',23);U_=new f0('PORT_DISTRIBUTER',24);$_=new f0('SPLINE_SELF_LOOP_POSITIONER',25);Y_=new f0('SAUSAGE_COMPACTION',26);B_=new f0('IN_LAYER_CONSTRAINT_PROCESSOR',27);x_=new f0('HYPEREDGE_DUMMY_MERGER',28);H_=new f0('LABEL_SIDE_SELECTOR',29);k_=new f0('BIG_NODES_SPLITTER',30);C_=new f0('LABEL_AND_NODE_SIZE_PROCESSOR',31);a0=new f0('SPLINE_SELF_LOOP_ROUTER',32);O_=new f0('NODE_MARGIN_CALCULATOR',33);t_=new f0('HIERARCHICAL_PORT_DUMMY_SIZE_PROCESSOR',34);v_=new f0('HIERARCHICAL_PORT_POSITION_PROCESSOR',35);J_=new f0('LAYER_SIZE_AND_GRAPH_HEIGHT_CALCULATOR',36);i_=new f0('BIG_NODES_POSTPROCESSOR',37);l_=new f0('COMMENT_POSTPROCESSOR',38);y_=new f0('HYPERNODE_PROCESSOR',39);u_=new f0('HIERARCHICAL_PORT_ORTHOGONAL_EDGE_ROUTER',40);M_=new f0('LONG_EDGE_JOINER',41);Q_=new f0('NORTH_SOUTH_PORT_POSTPROCESSOR',42);E_=new f0('LABEL_DUMMY_REMOVER',43);w_=new f0('HORIZONTAL_COMPACTOR',44);X_=new f0('REVERSED_EDGE_RESTORER',45);K_=new f0('LEFT_DIR_POSTPROCESSOR',46);n_=new f0('DOWN_DIR_POSTPROCESSOR',47);b0=new f0('UP_DIR_POSTPROCESSOR',48);q_=new f0('END_LABEL_PROCESSOR',49)}
	function Rib(){Rib=iI;var a,b;uib=new CJ('origin');_hb=new CJ('processingConfiguration');Fib=new CJ('processors');$hb=new DJ('compoundNode',(xkb(),xkb(),vkb));lib=new DJ('insideConnections',(null,vkb));sib=new CJ('nestedLGraph');zib=new CJ('parentLNode');vib=new CJ('originalBendpoints');wib=new CJ('originalDummyNodePosition');xib=new CJ('originalLabelEdge');Hib=new CJ('representedLabels');pib=new DJ('labelSide',(kP(),jP));Iib=new DJ('reversed',(null,vkb));Gib=new CJ('random');qib=new DJ('longEdgeSource',null);rib=new DJ('longEdgeTarget',null);dib=new DJ('edgeConstraint',(Hgb(),Fgb));nib=new CJ('inLayerLayoutUnit');mib=new DJ('inLayerConstraint',(Hhb(),Fhb));oib=new DJ('inLayerSuccessorConstraint',new GU);Bib=new CJ('portDummy');aib=new DJ('crossingHint',Elb(0));jib=new DJ('graphProperties',(b=Wv(Hkb(mF),11),new atb(b,Wv(exb(b,b.length),11),0)));hib=new DJ('externalPortSide',(sN(),qN));iib=new DJ('externalPortSize',new FI);gib=new CJ('externalPortReplacedDummy');fib=new DJ('externalPortConnections',(a=Wv(Hkb(Kz),11),new atb(a,Wv(exb(a,a.length),11),0)));Cib=new DJ(yzb,0);Shb=new CJ('barycenterAssociates');Qib=new CJ('TopSideComments');Yhb=new CJ('BottomSideComments');Zhb=new CJ('CommentConnectionPort');kib=new DJ('inputCollect',(null,vkb));yib=new DJ('outputCollect',(null,vkb));cib=new DJ('cyclic',(null,vkb));Whb=new DJ('bigNodeOriginalSize',new llb(0));Vhb=new DJ('bigNodeInitial',(null,vkb));Thb=new DJ('de.cau.cs.kieler.klay.layered.bigNodeLabels',new GU);Uhb=new DJ('de.cau.cs.kieler.klay.layered.postProcess',null);bib=new CJ('crossHierarchyMap');Pib=new CJ('targetOffset');Lib=new DJ('splineLabelSize',new FI);Mib=new DJ('splineLoopSide',(Ieb(),Feb));Nib=new DJ('splineSelfLoopComponents',new GU);Oib=new DJ('splineSelfLoopMargins',new DP);Kib=new CJ('spacings');Aib=new DJ('partitionConstraint',(null,vkb));tib=new AJ((eM(),LL),new llb(0));Jib=new BJ(cM,new llb(20),new llb(1));Dib=new BJ(XL,new llb(10),new llb(1));Xhb=new BJ(pL,new llb(12),new llb(0));Eib=new AJ(ZL,Elb(0));Rhb=new BJ(nL,new llb(cAb),new llb(0));eib=new AJ(uL,(NK(),JK))}
	function Mjb(){Mjb=iI;Bjb=new DJ('de.cau.cs.kieler.klay.layered.nodePromotion',(I1(),G1));Cjb=new FJ('de.cau.cs.kieler.klay.layered.nodePromotionBoundary',Elb(0),Elb(0),Elb(100));Hjb=new DJ(vzb,Elb(1));Ejb=new EJ('de.cau.cs.kieler.klay.layered.inLayerSpacingFactor',new llb(1),new llb(0));qjb=new DJ('de.cau.cs.kieler.klay.layered.edgeSpacingFactor',new llb(0.5));pjb=new DJ('de.cau.cs.kieler.klay.layered.edgeNodeSpacingFactor',new llb(IAb));njb=new DJ('de.cau.cs.kieler.klay.layered.distributeNodes',(xkb(),xkb(),vkb));Ljb=new DJ('de.cau.cs.kieler.klay.layered.wideNodesOnMultipleLayers',(ckb(),bkb));ljb=new DJ('de.cau.cs.kieler.klay.layered.cycleBreaking',(Z7(),X7));zjb=new DJ('de.cau.cs.kieler.klay.layered.nodeLayering',(x8(),w8));kjb=new DJ('de.cau.cs.kieler.klay.layered.crossMin',(p9(),o9));tjb=new DJ('de.cau.cs.kieler.klay.layered.greedySwitch',(zhb(),whb));Ajb=new DJ('de.cau.cs.kieler.klay.layered.nodePlace',(kbb(),fbb));wjb=new FJ('de.cau.cs.kieler.klay.layered.linearSegmentsDeflectionDampening',new llb(HAb),new llb(0),new llb(1));sjb=new DJ('de.cau.cs.kieler.klay.layered.fixedAlignment',(_gb(),Ygb));ojb=new DJ('de.cau.cs.kieler.klay.layered.edgeLabelSideSelection',(Pgb(),Lgb));mjb=new DJ(uzb,(null,vkb));Kjb=new EJ('de.cau.cs.kieler.klay.layered.thoroughness',Elb(10),Elb(1));vjb=new DJ('de.cau.cs.kieler.klay.layered.layerConstraint',(Xib(),Wib));xjb=new DJ('de.cau.cs.kieler.klay.layered.mergeEdges',(null,vkb));yjb=new DJ('de.cau.cs.kieler.klay.layered.mergeHierarchyEdges',(null,wkb));ujb=new DJ('de.cau.cs.kieler.klay.layered.interactiveReferencePoint',(Mhb(),Khb));rjb=new DJ('de.cau.cs.kieler.klay.layered.feedBackEdges',(null,vkb));gjb=new DJ('de.cau.cs.kieler.klay.layered.unnecessaryBendpoints',(null,vkb));jjb=new DJ('de.cau.cs.kieler.klay.layered.contentAlignment',(zgb(),Vsb(ygb,Bv(tv(iF,1),uyb,123,0,[ugb]))));Ijb=new DJ('de.cau.cs.kieler.klay.layered.sausageFolding',(null,vkb));Jjb=new DJ('de.cau.cs.kieler.klay.layered.splines.selfLoopPlacement',(Qjb(),Pjb));hjb=new DJ('de.cau.cs.kieler.klay.layered.nodeplace.compactionStrategy',(lcb(),jcb));Djb=new DJ('de.cau.cs.kieler.klay.layered.northOrSouthPort',(null,vkb));Fjb=new DJ('de.cau.cs.kieler.klay.layered.postCompaction',(g4(),e4));Gjb=new DJ('de.cau.cs.kieler.klay.layered.postCompaction.constraints',(X3(),W3));ijb=new DJ('de.cau.cs.kieler.klay.layered.components.compact',(null,vkb))}
	function uO(){uO=iI;rO=new vO('OUT_T_L',0,(Gi(),new Er(Vsb((oM(),kM),Bv(tv(Gz,1),uyb,41,0,[nM,gM])))),(DO(),BO));qO=new vO('OUT_T_C',1,new gr(Ti(Bv(tv(UF,1),syb,1,4,[Vsb(kM,Bv(tv(Gz,1),uyb,41,0,[nM,fM])),Vsb(kM,Bv(tv(Gz,1),uyb,41,0,[nM,fM,hM]))]))),AO);sO=new vO('OUT_T_R',2,new Er(Vsb(kM,Bv(tv(Gz,1),uyb,41,0,[nM,iM]))),CO);iO=new vO('OUT_B_L',3,new Er(Vsb(kM,Bv(tv(Gz,1),uyb,41,0,[lM,gM]))),BO);hO=new vO('OUT_B_C',4,new gr(Ti(Bv(tv(UF,1),syb,1,4,[Vsb(kM,Bv(tv(Gz,1),uyb,41,0,[lM,fM])),Vsb(kM,Bv(tv(Gz,1),uyb,41,0,[lM,fM,hM]))]))),AO);jO=new vO('OUT_B_R',5,new Er(Vsb(kM,Bv(tv(Gz,1),uyb,41,0,[lM,iM]))),CO);mO=new vO('OUT_L_T',6,new Er(Vsb(kM,Bv(tv(Gz,1),uyb,41,0,[gM,nM,hM]))),CO);lO=new vO('OUT_L_C',7,new gr(Ti(Bv(tv(UF,1),syb,1,4,[Vsb(kM,Bv(tv(Gz,1),uyb,41,0,[gM,mM])),Vsb(kM,Bv(tv(Gz,1),uyb,41,0,[gM,mM,hM]))]))),CO);kO=new vO('OUT_L_B',8,new Er(Vsb(kM,Bv(tv(Gz,1),uyb,41,0,[gM,lM,hM]))),CO);pO=new vO('OUT_R_T',9,new Er(Vsb(kM,Bv(tv(Gz,1),uyb,41,0,[iM,nM,hM]))),BO);oO=new vO('OUT_R_C',10,new gr(Ti(Bv(tv(UF,1),syb,1,4,[Vsb(kM,Bv(tv(Gz,1),uyb,41,0,[iM,mM])),Vsb(kM,Bv(tv(Gz,1),uyb,41,0,[iM,mM,hM]))]))),BO);nO=new vO('OUT_R_B',11,new Er(Vsb(kM,Bv(tv(Gz,1),uyb,41,0,[iM,lM,hM]))),BO);fO=new vO('IN_T_L',12,new gr(Ti(Bv(tv(UF,1),syb,1,4,[Vsb(jM,Bv(tv(Gz,1),uyb,41,0,[nM,gM])),Vsb(jM,Bv(tv(Gz,1),uyb,41,0,[nM,gM,hM]))]))),BO);eO=new vO('IN_T_C',13,new gr(Ti(Bv(tv(UF,1),syb,1,4,[Vsb(jM,Bv(tv(Gz,1),uyb,41,0,[nM,fM])),Vsb(jM,Bv(tv(Gz,1),uyb,41,0,[nM,fM,hM]))]))),AO);gO=new vO('IN_T_R',14,new gr(Ti(Bv(tv(UF,1),syb,1,4,[Vsb(jM,Bv(tv(Gz,1),uyb,41,0,[nM,iM])),Vsb(jM,Bv(tv(Gz,1),uyb,41,0,[nM,iM,hM]))]))),CO);cO=new vO('IN_C_L',15,new gr(Ti(Bv(tv(UF,1),syb,1,4,[Vsb(jM,Bv(tv(Gz,1),uyb,41,0,[mM,gM])),Vsb(jM,Bv(tv(Gz,1),uyb,41,0,[mM,gM,hM]))]))),BO);bO=new vO('IN_C_C',16,new gr(Ti(Bv(tv(UF,1),syb,1,4,[Vsb(jM,Bv(tv(Gz,1),uyb,41,0,[mM,fM])),Vsb(jM,Bv(tv(Gz,1),uyb,41,0,[mM,fM,hM]))]))),AO);dO=new vO('IN_C_R',17,new gr(Ti(Bv(tv(UF,1),syb,1,4,[Vsb(jM,Bv(tv(Gz,1),uyb,41,0,[mM,iM])),Vsb(jM,Bv(tv(Gz,1),uyb,41,0,[mM,iM,hM]))]))),CO);_N=new vO('IN_B_L',18,new gr(Ti(Bv(tv(UF,1),syb,1,4,[Vsb(jM,Bv(tv(Gz,1),uyb,41,0,[lM,gM])),Vsb(jM,Bv(tv(Gz,1),uyb,41,0,[lM,gM,hM]))]))),BO);$N=new vO('IN_B_C',19,new gr(Ti(Bv(tv(UF,1),syb,1,4,[Vsb(jM,Bv(tv(Gz,1),uyb,41,0,[lM,fM])),Vsb(jM,Bv(tv(Gz,1),uyb,41,0,[lM,fM,hM]))]))),AO);aO=new vO('IN_B_R',20,new gr(Ti(Bv(tv(UF,1),syb,1,4,[Vsb(jM,Bv(tv(Gz,1),uyb,41,0,[lM,iM])),Vsb(jM,Bv(tv(Gz,1),uyb,41,0,[lM,iM,hM]))]))),CO);tO=new vO(szb,21,(null,Fi),null)}
	function lab(a,b,c){var d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,A,B,C,D,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,$,ab,bb,cb,db,eb,fb,gb,hb,ib;$=0;for(G=0,J=b.length;G<J;++G){D=b[G];if(LM(Wv(rJ(D,(eM(),TL)),28))){for(S=new Tob(D.f);S.a<S.c.c.length;){R=Wv(Rob(S),7);U=0;for(h=new Tob(R.e);h.a<h.c.c.length;){g=Wv(Rob(h),12);D.d!=g.d.f.d&&++U}U>0&&(a.a[R.k]=$++)}}else{L=0;for(S=new Tob(D.f);S.a<S.c.c.length;){R=Wv(Rob(S),7);for(h=new Tob(R.e);h.a<h.c.c.length;){g=Wv(Rob(h),12);D.d!=g.d.f.d&&++L}a.a[R.k]=$}L>0&&++$}}eb=0;for(H=0,K=c.length;H<K;++H){D=c[H];if(LM(Wv(rJ(D,(eM(),TL)),28))){M=0;for(S=new Tob(D.f);S.a<S.c.c.length;){R=Wv(Rob(S),7);if(R.g==(sN(),$M)){for(h=new Tob(R.b);h.a<h.c.c.length;){g=Wv(Rob(h),12);if(D.d!=g.c.f.d){++M;break}}}else{break}}O=0;V=new Fnb(D.f,D.f.c.length);while(V.b>0){R=(Bxb(V.b>0),Wv(V.a.sb(V.c=--V.b),7));U=0;for(h=new Tob(R.b);h.a<h.c.c.length;){g=Wv(Rob(h),12);D.d!=g.c.f.d&&++U}if(U>0){if(R.g==(sN(),$M)){a.a[R.k]=eb;++eb}else{a.a[R.k]=eb+M+O;++O}}}eb+=O}else{L=0;for(S=new Tob(D.f);S.a<S.c.c.length;){R=Wv(Rob(S),7);for(h=new Tob(R.b);h.a<h.c.c.length;){g=Wv(Rob(h),12);D.d!=g.c.f.d&&++L}a.a[R.k]=eb}L>0&&++eb}}T=(mp(),new ntb);n=new Wub;for(F=0,I=b.length;F<I;++F){D=b[F];for(cb=new Tob(D.f);cb.a<cb.c.c.length;){bb=Wv(Rob(cb),7);for(h=new Tob(bb.e);h.a<h.c.c.length;){g=Wv(Rob(h),12);gb=g.d;if(D.d!=gb.f.d){ab=Wv(re(Ktb(T.d,bb)),197);fb=Wv(re(Ktb(T.d,gb)),197);if(!ab&&!fb){m=new oab;n.a.db(m,n);vU(m.a,g);vU(m.d,bb);Ltb(T.d,bb,m);vU(m.d,gb);Ltb(T.d,gb,m)}else if(!ab){vU(fb.a,g);vU(fb.d,bb);Ltb(T.d,bb,fb)}else if(!fb){vU(ab.a,g);vU(ab.d,gb);Ltb(T.d,gb,ab)}else if(ab==fb){vU(ab.a,g)}else{vU(ab.a,g);for(Q=new Tob(fb.d);Q.a<Q.c.c.length;){P=Wv(Rob(Q),7);Ltb(T.d,P,ab)}xU(ab.a,fb.a);xU(ab.d,fb.d);n.a.eb(fb)!=null}}}}}o=Wv(Ye(n,xv(tE,{674:1,3:1,5:1,6:1},197,n.a.Y(),0,1)),674);C=b[0].d;Z=c[0].d;for(k=0,l=o.length;k<l;++k){j=o[k];j.e=$;j.f=eb;for(S=new Tob(j.d);S.a<S.c.c.length;){R=Wv(Rob(S),7);W=a.a[R.k];if(R.f.d==C){W<j.e&&(j.e=W);W>j.b&&(j.b=W)}else if(R.f.d==Z){W<j.f&&(j.f=W);W>j.c&&(j.c=W)}}}ipb(o,0,o.length,(hsb(),hsb(),gsb));db=xv(mw,Yyb,26,o.length,12,1);d=xv(mw,Yyb,26,eb+1,12,1);for(q=0;q<o.length;q++){db[q]=o[q].f;d[db[q]]=1}f=0;for(r=0;r<d.length;r++){d[r]==1?(d[r]=f):--f}X=0;for(s=0;s<db.length;s++){db[s]+=d[db[s]];X=Plb(X,db[s]+1)}i=1;while(i<X){i*=2}ib=2*i-1;i-=1;hb=xv(mw,Yyb,26,ib,12,1);e=0;for(A=0;A<db.length;A++){w=db[A]+i;++hb[w];while(w>0){w%2>0&&(e+=hb[w+1]);w=(w-1)/2|0;++hb[w]}}B=xv(sE,syb,156,o.length*2,0,1);for(t=0;t<o.length;t++){B[2*t]=new rab(o[t],o[t].e,o[t].b,(vab(),uab));B[2*t+1]=new rab(o[t],o[t].b,o[t].e,tab)}ipb(B,0,B.length,(null,gsb));N=0;for(u=0;u<B.length;u++){switch(B[u].d.e){case 0:++N;break;case 1:--N;e+=N;}}Y=xv(sE,syb,156,o.length*2,0,1);for(v=0;v<o.length;v++){Y[2*v]=new rab(o[v],o[v].f,o[v].c,(vab(),uab));Y[2*v+1]=new rab(o[v],o[v].c,o[v].f,tab)}ipb(Y,0,Y.length,(null,gsb));N=0;for(p=0;p<Y.length;p++){switch(Y[p].d.e){case 0:++N;break;case 1:--N;e+=N;}}return e}
	function eM(){eM=iI;var a,b;mL=new DJ('de.cau.cs.kieler.animate',(xkb(),xkb(),wkb));new DJ('de.cau.cs.kieler.minAnimTime',Elb(400));new DJ('de.cau.cs.kieler.maxAnimTime',Elb(4000));new DJ('de.cau.cs.kieler.animTimeFactor',Elb(100));jL=new DJ('de.cau.cs.kieler.additionalPortSpace',null);qL=new DJ('de.cau.cs.kieler.commentBox',(null,vkb));new CJ('de.cau.cs.kieler.diagramType');tL=new DJ('de.cau.cs.kieler.edgeLabelPlacement',(EK(),DK));vL=new DJ('de.cau.cs.kieler.edgeType',(YK(),WK));xL=new CJ('de.cau.cs.kieler.fontName');yL=new DJ('de.cau.cs.kieler.fontSize',Elb(0));AL=new DJ('de.cau.cs.kieler.hypernode',(null,vkb));CL=new DJ('de.cau.cs.kieler.junctionPoints',new jJ);new DJ('de.cau.cs.kieler.layoutAncestors',(null,vkb));GL=new DJ('de.cau.cs.kieler.margins',new DP);HL=new EJ('de.cau.cs.kieler.minHeight',new llb(0),new llb(0));IL=new EJ('de.cau.cs.kieler.minWidth',new llb(0),new llb(0));KL=new DJ('de.cau.cs.kieler.noLayout',(null,vkb));LL=new CJ('de.cau.cs.kieler.offset');SL=new CJ('de.cau.cs.kieler.klay.layered.portAnchor');UL=new CJ('de.cau.cs.kieler.portIndex');WL=new DJ('de.cau.cs.kieler.portSide',(sN(),qN));new DJ('de.cau.cs.kieler.progressBar',(null,vkb));new DJ('de.cau.cs.kieler.resetConfig',(null,wkb));new DJ('de.cau.cs.kieler.scaleFactor',new llb(1));dM=new DJ('de.cau.cs.kieler.thickness',new llb(1));new DJ('de.cau.cs.kieler.zoomToFit',(null,vkb));kL=new CJ('de.cau.cs.kieler.algorithm');lL=new DJ('de.cau.cs.kieler.alignment',(iK(),cK));nL=new DJ('de.cau.cs.kieler.aspectRatio',new llb(0));oL=new CJ('de.cau.cs.kieler.bendPoints');pL=new DJ('de.cau.cs.kieler.borderSpacing',new llb(-1));rL=new DJ(uzb,(null,vkb));sL=new DJ('de.cau.cs.kieler.direction',(sK(),qK));uL=new DJ('de.cau.cs.kieler.edgeRouting',(NK(),MK));wL=new DJ('de.cau.cs.kieler.expandNodes',(null,vkb));zL=new DJ('de.cau.cs.kieler.hierarchyHandling',(eL(),cL));BL=new DJ('de.cau.cs.kieler.interactive',(null,vkb));DL=new EJ('de.cau.cs.kieler.labelSpacing',new llb(3),new llb(0));EL=new DJ('de.cau.cs.kieler.layoutHierarchy',(null,vkb));JL=new DJ('de.cau.cs.kieler.nodeLabelPlacement',(oM(),b=Wv(Hkb(Gz),11),new atb(b,Wv(exb(b,b.length),11),0)));TL=new DJ('de.cau.cs.kieler.portConstraints',(KM(),JM));VL=new DJ('de.cau.cs.kieler.portLabelPlacement',(UM(),TM));XL=new EJ('de.cau.cs.kieler.portSpacing',new llb(-1),new llb(0));NL=new DJ('de.cau.cs.kieler.portAlignment',(zM(),xM));PL=new DJ('de.cau.cs.kieler.portAlignment.north',yM);QL=new DJ('de.cau.cs.kieler.portAlignment.south',yM);RL=new DJ('de.cau.cs.kieler.portAlignment.west',yM);OL=new DJ('de.cau.cs.kieler.portAlignment.east',yM);YL=new CJ('de.cau.cs.kieler.position');ZL=new CJ('de.cau.cs.kieler.priority');new CJ(vzb);$L=new DJ('de.cau.cs.kieler.selfLoopInside',(null,vkb));_L=new CJ('de.cau.cs.kieler.separateConnComp');aM=new DJ('de.cau.cs.kieler.sizeConstraint',(DN(),a=Wv(Hkb(Lz),11),new atb(a,Wv(exb(a,a.length),11),0)));bM=new DJ('de.cau.cs.kieler.sizeOptions',Vsb((MN(),KN),Bv(tv(Mz,1),uyb,139,0,[IN])));cM=new EJ('de.cau.cs.kieler.spacing',new llb(-1),new llb(0));FL=new DJ('de.cau.cs.kieler.layoutPartitions',(null,vkb));ML=new CJ('de.cau.cs.kieler.partition')}
	function wQ(b,c,d,e){tQ();var f,g,h,i,j,k,l,m,n,o,p,q,r,s,t;if(!e){if((!b.n?(ypb(),ypb(),wpb):b.n).R(new xQ(c))){return}}if(Wv(rQ.a,18).kb(c)){if(!d.lc()){throw new _J(Pzb+c+Qzb+d+').')}o=Wv(Wv(rQ.b,57).cb(c),79);p=d.lc().a;sJ(b,o,p);return}else if(Wv(oQ.a,18).kb(c)){try{if(!d.jc()){throw new Xlb}o=Wv(Wv(oQ.b,57).cb(c),79);s=Elb(dlb((bmb(),''+d.jc().a)));sJ(b,o,s);return}catch(a){a=OH(a);if(aw(a,130)){throw new _J("Invalid integer format for property '"+c+Qzb+d+').')}else throw NH(a)}}else if(Wv(kQ.a,18).kb(c)){if(!d.ic()){throw new _J(Pzb+c+Qzb+d+').')}o=Wv(Wv(kQ.b,57).cb(c),79);s=(xkb(),d.ic().a?wkb:vkb);sJ(b,o,s);return}else if(Wv(nQ.a,18).kb(c)){if(!d.jc()){throw new _J("Invalid float format for property '"+c+Qzb+d+').')}o=Wv(Wv(nQ.b,57).cb(c),79);s=new klb(d.jc().a);sJ(b,o,s);return}else if(Wv(mQ.a,18).kb(c)){if(!d.lc()){throw new _J(Rzb+c+Qzb+d+').')}l=d.lc().a;m=null;try{vQ((eM(),WL),c)?(m=(sN(),Wv(Gc((yN(),xN),l),32))):vQ(lL,c)?(m=(iK(),Wv(Gc((mK(),lK),l),103))):vQ(sL,c)?(m=(sK(),Wv(Gc((zK(),yK),l),59))):vQ(uL,c)?(m=(NK(),Wv(Gc((RK(),QK),l),122))):vQ(zL,c)?(m=(eL(),Wv(Gc((iL(),hL),l),166))):vQ(NL,c)||vQ(OL,c)||vQ(PL,c)||vQ(QL,c)||vQ(RL,c)?(m=(zM(),Wv(Gc((DM(),CM),l),100))):vQ(TL,c)?(m=(KM(),Wv(Gc((QM(),PM),l),28))):vQ(VL,c)?(m=(UM(),Wv(Gc((YM(),XM),l),149))):vQ(vL,c)?(m=(YK(),Wv(Gc((aL(),_K),l),133))):vQ(tL,c)?(m=(EK(),Wv(Gc((IK(),HK),l),107))):vQ((Mjb(),ljb),c)?(m=(Z7(),Wv(Gc((c8(),b8),l),193))):vQ(zjb,c)?(m=(x8(),Wv(Gc((C8(),B8),l),173))):vQ(ojb,c)?(m=(Pgb(),Wv(Gc((Ugb(),Tgb),l),115))):vQ(hjb,c)?(m=(lcb(),Wv(Gc((pcb(),ocb),l),194))):vQ(kjb,c)?(m=(p9(),Wv(Gc((u9(),t9),l),192))):vQ(Bjb,c)?(m=(I1(),Wv(Gc((M1(),L1),l),109))):vQ(Ajb,c)?(m=(kbb(),Wv(Gc((pbb(),obb),l),141))):vQ(Fjb,c)?(m=(g4(),Wv(Gc((k4(),j4),l),125))):vQ(Gjb,c)?(m=(X3(),Wv(Gc((_3(),$3),l),175))):vQ(sjb,c)?(m=(_gb(),Wv(Gc((dhb(),chb),l),124))):vQ(tjb,c)?(m=(zhb(),Wv(Gc((Dhb(),Chb),l),110))):vQ(vjb,c)?(m=(Xib(),Wv(Gc((_ib(),$ib),l),85))):vQ(Jjb,c)?(m=(Qjb(),Wv(Gc((Ujb(),Tjb),l),153))):vQ(Ljb,c)?(m=(ckb(),Wv(Gc((gkb(),fkb),l),172))):vQ(ujb,c)&&(m=(Mhb(),Wv(Gc((Qhb(),Phb),l),174)))}catch(a){a=OH(a);if(aw(a,54)){throw new _J(Rzb+c+Qzb+d+').')}else throw NH(a)}o=Wv(Wv(mQ.b,57).cb(c),79);sJ(b,o,m);return}else if(Wv(lQ.a,18).kb(c)){if(!d.lc()){throw new _J(Rzb+c+Qzb+d+').')}k=d.lc().a;q=null;j=fmb(k,'[\\[\\]\\s,]+');for(h=0,i=j.length;h<i;++h){g=j[h];if(pmb(hmb(g))==0){continue}if(vQ((eM(),JL),c)){!q&&(q=(f=Wv(Hkb(Gz),11),new atb(f,Wv(exb(f,f.length),11),0)));Wsb(q,(oM(),Wv(Gc((sM(),rM),g),41)))}else if(vQ(aM,c)){!q&&(q=(f=Wv(Hkb(Lz),11),new atb(f,Wv(exb(f,f.length),11),0)));Wsb(q,(DN(),Wv(Gc((HN(),GN),g),150)))}else if(vQ(bM,c)){!q&&(q=(f=Wv(Hkb(Mz),11),new atb(f,Wv(exb(f,f.length),11),0)));Wsb(q,(MN(),Wv(Gc((QN(),PN),g),139)))}else if(vQ((Mjb(),jjb),c)){!q&&(q=(f=Wv(Hkb(iF),11),new atb(f,Wv(exb(f,f.length),11),0)));Wsb(q,(zgb(),Wv(Gc((Dgb(),Cgb),g),123)))}}o=Wv(Wv(lQ.b,57).cb(c),79);sJ(b,o,q);return}else if(Wv(qQ.a,18).kb(c)){if(!d.lc()){throw new _J("Invalid _other_ format for property '"+c+Qzb+d+').')}if(vQ((eM(),YL),c)||vQ(SL,c)){try{r=new FI;AI(r,d.lc().a);o=Wv(Wv(qQ.b,57).cb(c),79);sJ(b,o,r);return}catch(a){a=OH(a);if(aw(a,29)){throw new _J("Invalid KVector format for property '"+c+"' "+d+'.')}else throw NH(a)}}else if(vQ(oL,c)||vQ(CL,c)){try{t=new jJ;iJ(t,d.lc().a);o=Wv(Wv(qQ.b,57).cb(c),79);sJ(b,o,t);return}catch(a){a=OH(a);if(aw(a,29)){throw new _J("Invalid KVectorChain format for property '"+c+"' "+d+'.')}else throw NH(a)}}else if(vQ(GL,c)||vQ(jL,c)){try{n=new DP;tP(n,d.lc().a);o=Wv(Wv(qQ.b,57).cb(c),79);sJ(b,o,n);return}catch(a){a=OH(a);if(aw(a,29)){throw new _J("Invalid Margins format for property '"+c+"' "+d+'.')}else throw NH(a)}}}else if(Wv(pQ.a,18).kb(c)){return}throw new _J("Unsupported layout option '"+c+Qzb+d+').')}
	var Sxb='object',Txb={3:1,8:1,5:1,6:1},Uxb={3:1,46:1},Vxb={3:1,54:1,46:1},Wxb='null',Xxb='anonymous',Yxb='Unknown',Zxb='function',$xb=2147483647,_xb={181:1,3:1,54:1,46:1},ayb=65536,byb=65535,cyb={3:1,54:1,29:1,46:1},dyb='For input string: "',eyb=-2147483648,fyb={56:1},gyb={23:1,145:1,185:1},hyb={3:1,5:1},iyb='Invalid UTF8 sequence',jyb='fromIndex: ',kyb='java.lang',lyb='com.google.gwt.core.client',myb='com.google.gwt.core.client.impl',nyb='java.io',oyb='java.nio.charset',pyb='javaemul.internal',qyb='com.google.common.base',ryb='%s (%s) must not be negative',syb={3:1,5:1,6:1},tyb='negative size: ',uyb={3:1,8:1,5:1,11:1,6:1},vyb={68:1,136:1,3:1,23:1,17:1},wyb={108:1,35:1},xyb='com.google.common.collect',yyb={108:1,35:1,96:1},zyb={144:1,3:1},Ayb={35:1},Byb={57:1},Cyb='java.util',Dyb={22:1,19:1},Eyb={22:1,19:1,18:1},Fyb={22:1,19:1,20:1},Gyb={22:1,19:1,20:1,63:1},Hyb={35:1,96:1},Iyb={22:1,19:1,18:1,137:1},Jyb={21:1},Kyb='AbstractMapEntry',Lyb={207:1,22:1,19:1},Myb={159:1,3:1,23:1,17:1},Nyb=1073741824,Oyb={22:1},Pyb={3:1,22:1,19:1},Qyb={87:1,3:1,22:1,19:1,20:1,63:1},Ryb={3:1,57:1},Syb={3:1,22:1,19:1,18:1},Tyb={64:1},Uyb='arraySize',Vyb='initialArraySize',Wyb={64:1,188:1,3:1,23:1,17:1},Xyb='occurrences',Yyb={52:1,3:1,5:1},Zyb={205:1,3:1,23:1,17:1},$yb=1.0E-4,_yb='com.google.gwt.json.client',azb=4194303,bzb=1048575,czb=4194304,dzb=17592186044416,ezb=-17592186044416,fzb='([{"\' \t\r\n',gzb=')]}"\' \t\r\n',hzb='The given string contains parts that cannot be parsed as numbers.',izb='de.cau.cs.kieler.core.math',jzb=-1.7976931348623157E308,kzb='de.cau.cs.kieler.core.properties',lzb={79:1,23:1},mzb='de.cau.cs.kieler.core.util',nzb='de.cau.cs.kieler.kiml',ozb='LEFT',pzb='RIGHT',qzb='CENTER',rzb='de.cau.cs.kieler.kiml.options',szb='UNDEFINED',tzb='NONE',uzb='de.cau.cs.kieler.debugMode',vzb='de.cau.cs.kieler.randomSeed',wzb='de.cau.cs.kieler.kiml.util.nodespacing',xzb='de.cau.cs.kieler.kiml.util.labelspacing',yzb='portRatioOrPosition',zzb='NodeMarginCalculator',Azb='bottom',Bzb={286:1,121:1,3:1,5:1},Czb='undefined',Dzb='text',Ezb='stacktrace',Fzb={34:1,3:1,8:1,5:1,6:1},Gzb='properties',Hzb='bendPoints',Izb='junctionPoints',Jzb='width',Kzb='height',Lzb='padding',Mzb='children',Nzb={38:1,39:1,42:1,51:1,71:1,3:1,8:1,5:1,6:1},Ozb='de.cau.cs.kieler.klay.gwt.client.layout',Pzb="Invalid boolean format for property '",Qzb="' (",Rzb="Invalid enum format for property '",Szb='de.cau.cs.kieler.klay.layered',Tzb='Layered layout',Uzb=Infinity,Vzb=-Infinity,Wzb='de.cau.cs.kieler.klay.layered.compaction.components',Xzb='de.cau.cs.kieler.klay.layered.compaction.oned',Yzb=' instance has been finished already.',Zzb='de.cau.cs.kieler.klay.layered.compaction.oned.algs',$zb='de.cau.cs.kieler.klay.layered.compaction.recthull',_zb={68:1},aAb='de.cau.cs.kieler.klay.layered.components',bAb={3:1,5:1,22:1,13:1,19:1,20:1,63:1},cAb=1.600000023841858,dAb=0.001,eAb={31:1},fAb='de.cau.cs.kieler.klay.layered.compound',gAb={38:1,39:1,47:1,42:1,3:1,8:1,5:1,6:1},hAb='de.cau.cs.kieler.klay.layered.graph',iAb='Port side is undefined',jAb='de.cau.cs.kieler.klay.layered.intermediate',kAb='Big nodes pre-processing',lAb=3.4028234663852886E38,mAb={38:1,39:1,42:1,346:1,71:1,3:1,8:1,5:1,6:1},nAb="Node '",oAb="' has its layer constraint set to FIRST or FIRST_SEPARATE, but has ",pAb='at least one incoming edge. Connections between nodes with these ',qAb='layer constraints are not supported.',rAb=1.7976931348623157E308,sAb='Odd port side processing',tAb={250:1,3:1,5:1},uAb=1.0E-8,vAb='de.cau.cs.kieler.klay.layered.intermediate.compaction',wAb='de.cau.cs.kieler.klay.layered.intermediate.greedyswitch',xAb={227:1,3:1,5:1},yAb='de.cau.cs.kieler.klay.layered.networksimplex',zAb='INTERACTIVE',AAb='de.cau.cs.kieler.klay.layered.p1cycles',BAb={106:1,31:1},CAb='de.cau.cs.kieler.klay.layered.p2layers',DAb='NETWORK_SIMPLEX',EAb='de.cau.cs.kieler.klay.layered.p3order',FAb=5.9604644775390625E-8,GAb='Port type is undefined',HAb=0.30000001192092896,IAb=0.699999988079071,JAb=0.8999999761581421,KAb='de.cau.cs.kieler.klay.layered.p3order.constraints',LAb='de.cau.cs.kieler.klay.layered.p3order.counting',MAb='de.cau.cs.kieler.klay.layered.p4nodes',NAb={625:1,3:1,5:1,6:1},OAb='de.cau.cs.kieler.klay.layered.p4nodes.bk',PAb='de.cau.cs.kieler.klay.layered.p5edges',QAb='de.cau.cs.kieler.klay.layered.p5edges.splines',RAb=1.0E-6,SAb=-1.0E-6,TAb='The list of vectors may not be empty.',UAb=0.09999999999999998,VAb='de.cau.cs.kieler.klay.layered.properties',WAb='_gwt_modCount',XAb={3:1,22:1,19:1,20:1,63:1},YAb={3:1,5:1,57:1},ZAb={3:1,5:1,22:1,19:1,50:1,18:1},$Ab='delete',_Ab=15525485,aBb=16777216,bBb=16777215,cBb={3:1,5:1,22:1,19:1,20:1,63:1},dBb={3:1,23:1,17:1,138:1};var _,fI,aI,LH=-1;gI();hI(1,null,{},pb);_.t=function qb(a){return this===a};_.u=function sb(){return this.$c};_.v=function ub(){return txb(this)};_.w=function wb(){return ob(this)};_.toString=function(){return this.w()};hI(46,1,Uxb);_.bc=function ct(){return this.f};_.w=function dt(){var a,b;return a=Ikb(this.$c),b=this.bc(),b!=null?a+': '+b:a};hI(54,46,Vxb);hI(72,54,Vxb,gt);hI(164,72,{164:1,3:1,54:1,46:1},kt);_.bc=function nt(){jt(this);return this.c};_.cc=function ot(){return gw(this.b)===gw(ht)?null:this.b};var ht;var Mt;hI(642,1,{});hI(356,642,{},Tt);_.dc=function Ut(a,b){var c={},k;var d=[];a.__gwt$backingJsError={'fnStack':d};var e=arguments.callee.caller;while(e){var f=(Nt(),e.name||(e.name=Rt(e.toString())));d.push(f);var g=':'+f;var h=c[g];if(h){var i,j;for(i=0,j=h.length;i<j;i++){if(h[i]===e){return}}}(h||(c[g]=[])).push(e);e=e.caller}};_.ec=function Vt(a){var b,c,d,e,f;d=(Nt(),f=a.__gwt$backingJsError,f&&f.fnStack?f.fnStack:[]);c=d.length;e=xv(WF,Txb,146,c,0,1);for(b=0;b<c;b++){e[b]=new Zlb(d[b],null,-1)}return e};hI(643,642,{});_.dc=function Yt(c,d){function e(b){if(!('stack' in b)){try{throw b}catch(a){}}return b}
	var f;typeof d=='string'?(f=e(new Error(d.replace('\n',' ')))):d&&typeof d==Sxb&&'stack' in d?(f=d):(f=e(new Error));c.__gwt$backingJsError=f};_.fc=function Zt(a,b,c,d){return new Zlb(b,a+'@'+d,c<0?-1:c)};_.ec=function $t(a){var b,c,d,e,f,g,h;e=(Nt(),h=a.__gwt$backingJsError,h&&h.stack?h.stack.split('\n'):[]);f=xv(WF,Txb,146,0,0,1);b=0;d=e.length;if(d==0){return f}g=Xt(this,e[0]);emb(g.d,Xxb)||(f[b++]=g);for(c=1;c<d;c++){f[b++]=Xt(this,e[c])}return f};hI(357,643,{},_t);_.fc=function au(a,b,c,d){return new Zlb(b,a,-1)};var Sv,Tv,Uv;hI(181,54,_xb);hI(351,181,_xb,ikb);hI(288,1,{},Kkb);_.Oc=function Lkb(a){var b;b=new Kkb;b.g=4;a>1?(b.c=Skb(this,a-1)):(b.c=this);return b};_.Pc=function Rkb(){Gkb(this);return this.b};_.Qc=function Tkb(){return Ikb(this)};_.Rc=function Vkb(){return Jkb(this)};_.Sc=function Xkb(){return (this.g&4)!=0};_.Tc=function Ykb(){return (this.g&1)!=0};_.w=function _kb(){return ((this.g&2)!=0?'interface ':(this.g&1)!=0?'':'class ')+(Gkb(this),this.n)};_.g=0;var Fkb=1;hI(119,72,{3:1,119:1,54:1,46:1},alb);hI(29,72,cyb,rlb,slb);hI(95,72,Vxb,nkb,okb);hI(231,1,{3:1,231:1});var blb;hI(24,231,{3:1,23:1,24:1,231:1},wlb);_.F=function ylb(a){return vlb(this,Wv(a,24))};_.t=function zlb(a){return aw(a,24)&&Wv(a,24).a==this.a};_.v=function Alb(){return this.a};_.w=function Clb(){return Dlb(this.a)};_.a=0;Uv={3:1,345:1,23:1,2:1};hI(350,1,fyb,smb);_.$b=function tmb(a,b){return rmb($v(a),$v(b))};hI(257,95,Vxb,Cmb);hI(145,1,{23:1,145:1});_.F=function Kmb(a){return Jmb(this,Wv(a,145))};_.t=function Lmb(a){var b;if(a===this){return true}if(!aw(a,145)){return false}b=Wv(a,145);return emb(this.a,b.a)};_.v=function Mmb(){return Pxb(this.a)};_.w=function Nmb(){return this.a};hI(358,29,cyb,Omb);hI(256,29,{3:1,54:1,29:1,46:1,256:1},Pmb);hI(185,145,gyb);var jxb,kxb,lxb;hI(289,185,gyb,oxb);_.Zc=function pxb(a,b,c){var d,e;d=xv(jw,hyb,26,c,12,1);for(e=0;e<c;++e){d[e]=a[b+e]&255&byb}return d};hI(355,185,gyb,qxb);_.Zc=function rxb(a,b,c){var d,e,f,g,h,i,j,k;f=0;for(j=0;j<c;){++f;e=a[b+j];if((e&192)==128){throw new slb(iyb)}else if((e&128)==0){++j}else if((e&224)==192){j+=2}else if((e&240)==224){j+=3}else if((e&248)==240){j+=4}else{throw new slb(iyb)}if(j>c){throw new okb(iyb)}}g=xv(jw,hyb,26,f,12,1);k=0;h=0;for(i=0;i<c;){e=a[b+i++];if((e&128)==0){h=1;e&=127}else if((e&224)==192){h=2;e&=31}else if((e&240)==224){h=3;e&=15}else if((e&248)==240){h=4;e&=7}else if((e&252)==248){h=5;e&=3}while(--h>0){d=a[b+i++];if((d&192)!=128){throw new slb('Invalid UTF8 sequence at '+(b+i-1)+', byte='+(d>>>0).toString(16))}e=e<<6|d&63}k+=Ekb(e,g,k)}return g};var UF=Nkb(kyb,'Object',1);var _F=Nkb(kyb,'Throwable',46);var KF=Nkb(kyb,'Exception',54);var VF=Nkb(kyb,'RuntimeException',72);var Zy=Nkb(lyb,'JavaScriptException',164);var ez=Nkb(myb,'StackTraceCreator/Collector',642);var bz=Nkb(myb,'StackTraceCreator/CollectorLegacy',356);var dz=Nkb(myb,'StackTraceCreator/CollectorModern',643);var cz=Nkb(myb,'StackTraceCreator/CollectorModernNoSourceMap',357);var wF=Nkb(nyb,'IOException',181);var zF=Nkb(nyb,'UnsupportedEncodingException',351);var GF=Nkb(kyb,'Class',288);var FF=Nkb(kyb,'ClassCastException',119);var MF=Nkb(kyb,'IllegalArgumentException',29);var OF=Nkb(kyb,'IndexOutOfBoundsException',95);var TF=Nkb(kyb,'Number',231);var PF=Nkb(kyb,'Integer',24);var $F=Nkb(kyb,'String',2);var XF=Nkb(kyb,'String/1',350);var ZF=Nkb(kyb,'StringIndexOutOfBoundsException',257);var bG=Nkb(oyb,'Charset',145);var cG=Nkb(oyb,'IllegalCharsetNameException',358);var dG=Nkb(oyb,'UnsupportedCharsetException',256);var JH=Nkb(pyb,'EmulatedCharset',185);var HH=Nkb(pyb,'EmulatedCharset/LatinCharset',289);var IH=Nkb(pyb,'EmulatedCharset/UtfCharset',355);hI(669,1,{3:1});var sw=Nkb(qyb,'Optional',669);hI(601,669,{3:1},Ab);_.t=function Bb(a){return a===this};_.v=function Cb(){return 2040732332};_.w=function Db(){return 'Optional.absent()'};_.A=function Eb(a){_b(a);return zb(),yb};var yb;var nw=Nkb(qyb,'Absent',601);var ow=Pkb(qyb,'Function');hI(208,1,{},Kb);_.C=function Lb(a){return Ib(a)};var rw=Nkb(qyb,'Joiner',208);hI(363,208,{},Nb);_.C=function Ob(a){return Mb(this,a)};var pw=Nkb(qyb,'Joiner/1',363);hI(362,1,{},Rb);var qw=Nkb(qyb,'Joiner/MapJoiner',362);var tw=Pkb(qyb,'Predicate');var gc;hI(244,1,{68:1,244:1,3:1},ic);_.D=function jc(a){var b;for(b=0;b<this.a.a.length;b++){if(!Wv(mpb(this.a,b),68).D(a)){return false}}return true};_.t=function kc(a){var b;if(aw(a,244)){b=Wv(a,244);return cn(this.a,b.a)}return false};_.v=function lc(){return Bpb(this.a)+306654252};_.w=function mc(){return 'Predicates.and('+Hb((hc(),gc),new wnb(this.a))+')'};var uw=Nkb(qyb,'Predicates/AndPredicate',244);hI(246,1,{68:1,246:1,3:1},nc);_.D=function oc(b){try{return this.a.kb(b)}catch(a){a=OH(a);if(aw(a,76)){return false}else if(aw(a,119)){return false}else throw NH(a)}};_.t=function pc(a){var b;if(aw(a,246)){b=Wv(a,246);return this.a.t(b.a)}return false};_.v=function qc(){return this.a.v()};_.w=function rc(){return 'Predicates.in('+this.a+')'};var vw=Nkb(qyb,'Predicates/InPredicate',246);hI(245,1,{68:1,245:1,3:1},sc);_.D=function tc(a){return rb(this.a,a)};_.t=function uc(a){var b;if(aw(a,245)){b=Wv(a,245);return rb(this.a,b.a)}return false};_.v=function vc(){return vb(this.a)};_.w=function wc(){return 'Predicates.equalTo('+this.a+')'};var ww=Nkb(qyb,'Predicates/IsEqualToPredicate',245);hI(17,1,{3:1,23:1,17:1});_.F=function Bc(a){return xc(this,Wv(a,17))};_.t=function Dc(a){return this===a};_.v=function Ec(){return txb(this)};_.w=function Fc(){return zc(this)};_.e=0;var IF=Nkb(kyb,'Enum',17);hI(136,17,vyb);var Hc,Ic,Jc,Kc;var Bw=Okb(qyb,'Predicates/ObjectPredicate',136,IF,Nc);hI(591,136,vyb,Oc);_.D=function Pc(a){return true};_.w=function Qc(){return 'Predicates.alwaysTrue()'};var xw=Okb(qyb,'Predicates/ObjectPredicate/1',591,Bw,null);hI(592,136,vyb,Rc);_.D=function Sc(a){return false};_.w=function Tc(){return 'Predicates.alwaysFalse()'};var yw=Okb(qyb,'Predicates/ObjectPredicate/2',592,Bw,null);hI(593,136,vyb,Uc);_.D=function Vc(a){return a==null};_.w=function Wc(){return 'Predicates.isNull()'};var zw=Okb(qyb,'Predicates/ObjectPredicate/3',593,Bw,null);hI(594,136,vyb,Xc);_.D=function Yc(a){return a!=null};_.w=function Zc(){return 'Predicates.notNull()'};var Aw=Okb(qyb,'Predicates/ObjectPredicate/4',594,Bw,null);hI(177,669,{177:1,3:1},$c);_.t=function _c(a){var b;if(aw(a,177)){b=Wv(a,177);return rb(this.a,b.a)}return false};_.v=function ad(){return 1502476572+vb(this.a)};_.w=function bd(){return 'Optional.of('+this.a+')'};_.A=function cd(a){return new $c(ac(a.B(this.a),'the Function passed to Optional.transform() must not return null.'))};var Cw=Nkb(qyb,'Present',177);hI(108,1,wyb);_.I=function ed(){dd()};var Xy=Nkb(xyb,'UnmodifiableIterator',108);hI(651,108,yyb);_.J=function fd(a){throw new Hmb};_.O=function gd(a){throw new Hmb};var Yy=Nkb(xyb,'UnmodifiableListIterator',651);hI(378,651,yyb);_.G=function hd(){return this.b<this.c};_.K=function jd(){return this.b>0};_.H=function kd(){if(this.b>=this.c){throw new nvb}return Lk(this,this.b++)};_.L=function ld(){return this.b};_.M=function md(){if(this.b<=0){throw new nvb}return Lk(this,--this.b)};_.N=function nd(){return this.b-1};_.b=0;_.c=0;var Dw=Nkb(xyb,'AbstractIndexedListIterator',378);hI(428,108,wyb);_.G=function rd(){return od(this)};_.H=function sd(){return pd(this)};_.d=1;var Ew=Nkb(xyb,'AbstractIterator',428);hI(653,1,{144:1});_.P=function vd(){var a;return a=this.f,!a?(this.f=this.S()):a};_.T=function wd(){return new Bf(this.P())};_.t=function xd(a){return Mp(this,a)};_.v=function yd(){return this.P().v()};_.V=function zd(){return this.Y()==0};_.W=function Ad(){return ud(this)};_.w=function Bd(){return this.P().w()};var Xw=Nkb(xyb,'AbstractMultimap',653);hI(294,653,zyb);_.Q=function Nd(){Cd(this)};_.R=function Od(a){return Qmb(this.b,a)};_.S=function Pd(){return new Ie(this,this.b)};_.T=function Qd(){return new If(this,this.b)};_.$=function Rd(){return Id(this.Z())};_.U=function Sd(a){return Dd(this,a)};_.X=function Td(a){return Gd(this,a)};_.Y=function Ud(){return this.c};_.c=0;var Uw=Nkb(xyb,'AbstractMapBasedMultimap',294);hI(600,294,zyb);_.Z=function Xd(){return new HU(this.a)};_.$=function Yd(){return Gi(),Gi(),Fi};_.U=function $d(a){return Wv(Dd(this,a),20)};_.X=function _d(a){return Wv(Gd(this,a),20)};_.P=function Wd(){var a;return a=this.f,!a?(this.f=new Ie(this,this.b)):a};_.t=function Zd(a){return Mp(this,a)};var Fw=Nkb(xyb,'AbstractListMultimap',600);hI(388,1,Ayb);_.G=function ae(){return this.b.b||this.d.G()};_.H=function be(){var a;if(!this.d.G()){a=pnb(this.b);a.yb();this.a=Wv(a.zb(),19);this.d=this.a.mb()}return this.d.H()};_.I=function ce(){this.d.I();this.a.V()&&qnb(this.b);--this.c.c};var Kw=Nkb(xyb,'AbstractMapBasedMultimap/Itr',388);hI(389,388,Ayb,de);var Gw=Nkb(xyb,'AbstractMapBasedMultimap/1',389);hI(638,1,Byb);_.Q=function ke(){this.bb().Q()};_._=function le(a){return ee(this,a)};_.R=function me(a){return !!ge(this,a,false)};_.ab=function ne(a){var b,c,d;for(c=this.bb().mb();c.G();){b=Wv(c.H(),21);d=b.zb();if(gw(a)===gw(d)||a!=null&&rb(a,d)){return true}}return false};_.t=function oe(a){return fe(this,a)};_.cb=function pe(a){return re(ge(this,a,false))};_.v=function se(){return Apb(this.bb())};_.V=function te(){return this.Y()==0};_.W=function ue(){return new Snb(this)};_.db=function ve(a,b){throw new Imb('Put not supported on this map')};_.eb=function we(a){return re(ge(this,a,true))};_.Y=function xe(){return this.bb().Y()};_.w=function ye(){return ie(this)};_.fb=function ze(){return new aob(this)};var tG=Nkb(Cyb,'AbstractMap',638);hI(654,638,Byb);_.bb=function Ce(){return Ae(this)};_.W=function De(){var a;a=this.d;return !a?(this.d=new Bf(this)):a};_.fb=function Ee(){return Be(this)};var ny=Nkb(xyb,'Maps/ViewCachingAbstractMap',654);hI(262,654,Byb,Ie);_.cb=function Ne(a){return Fe(this,a)};_.eb=function Qe(a){return Ge(this,a)};_.Q=function Je(){this.a==this.b.b?Cd(this.b):Ml(new xf(this))};_.R=function Ke(a){return qp(this.a,a)};_.hb=function Le(){return new sf(this)};_.gb=function(){return this.hb()};_.t=function Me(a){return this===a||fe(this.a,a)};_.v=function Oe(){return Apb(new inb(this.a))};_.W=function Pe(){return ud(this.b)};_.Y=function Re(){return Zmb(this.a)};_.w=function Se(){return ie(this.a)};var Jw=Nkb(xyb,'AbstractMapBasedMultimap/AsMap',262);hI(640,1,Dyb);_.ib=function $e(a){return Te()};_.jb=function _e(a){return Ue(this,a)};_.Q=function af(){We(this)};_.kb=function bf(a){return Ve(this,a,false)};_.lb=function cf(a){return Xe(this,a)};_.V=function df(){return this.Y()==0};_.nb=function ef(a){return Ve(this,a,true)};_.ob=function ff(){return this.pb(xv(UF,syb,1,this.Y(),4,1))};_.pb=function gf(a){return Ye(this,a)};_.w=function hf(){return Ze(this)};var eG=Nkb(Cyb,'AbstractCollection',640);hI(641,640,Eyb);_.t=function kf(a){return jf(this,a)};_.v=function lf(){return Apb(this)};var zG=Nkb(Cyb,'AbstractSet',641);hI(649,641,Eyb);var Jy=Nkb(xyb,'Sets/ImprovedAbstractSet',649);hI(655,649,Eyb);_.Q=function nf(){this.qb().Q()};_.kb=function of(a){return mf(this,a)};_.V=function pf(){return this.qb().V()};_.nb=function qf(a){var b;if(this.kb(a)){b=Wv(a,21);return this.qb().W().nb(b.yb())}return false};_.Y=function rf(){return this.qb().Y()};var ky=Nkb(xyb,'Maps/EntrySet',655);hI(387,655,Eyb,sf);_.kb=function tf(a){return Qh(new inb(this.a.a),a)};_.mb=function uf(){return new xf(this.a)};_.qb=function vf(){return this.a};_.nb=function wf(a){var b;if(!Qh(new inb(this.a.a),a)){return false}b=Wv(a,21);Hd(this.a.b,b.yb());return true};var Hw=Nkb(xyb,'AbstractMapBasedMultimap/AsMap/AsMapEntries',387);hI(299,1,Ayb,xf);_.H=function zf(){var a;return a=pnb(this.b),this.a=Wv(a.zb(),19),He(this.c,a)};_.G=function yf(){return this.b.b};_.I=function Af(){qnb(this.b);this.c.b.c-=this.a.Y();this.a.Q()};var Iw=Nkb(xyb,'AbstractMapBasedMultimap/AsMap/AsMapIterator',299);hI(260,649,Eyb,Bf);_.Q=function Cf(){this.b.Q()};_.kb=function Df(a){return this.b.R(a)};_.V=function Ef(){return this.b.V()};_.mb=function Ff(){return mp(),Wl(this.b.bb().mb(),(xp(),vp))};_.nb=function Gf(a){if(this.b.R(a)){this.b.eb(a);return true}return false};_.Y=function Hf(){return this.b.Y()};var ly=Nkb(xyb,'Maps/KeySet',260);hI(386,260,Eyb,If);_.Q=function Jf(){var a;Ml((a=this.b.bb().mb(),new Pf(this,a)))};_.lb=function Kf(a){return this.b.W().lb(a)};_.t=function Lf(a){return this===a||this.b.W().t(a)};_.v=function Mf(){return this.b.W().v()};_.mb=function Nf(){var a;return a=this.b.bb().mb(),new Pf(this,a)};_.nb=function Of(a){var b,c;c=0;b=Wv(this.b.eb(a),19);if(b){c=b.Y();b.Q();this.a.c-=c}return c>0};var Mw=Nkb(xyb,'AbstractMapBasedMultimap/KeySet',386);hI(300,1,Ayb,Pf);_.G=function Qf(){return this.c.G()};_.H=function Rf(){this.a=Wv(this.c.H(),21);return this.a.yb()};_.I=function Sf(){var a;ec(!!this.a);a=Wv(this.a.zb(),19);this.c.I();this.b.a.c-=a.Y();a.Q()};var Lw=Nkb(xyb,'AbstractMapBasedMultimap/KeySet/1',300);hI(216,640,Dyb,_f);_.ib=function ag(a){return Tf(this,a)};_.jb=function bg(a){return Uf(this,a)};_.Q=function cg(){Wf(this)};_.kb=function dg(a){return Yf(this),this.d.kb(a)};_.lb=function eg(a){return Yf(this),this.d.lb(a)};_.t=function fg(a){return Xf(this,a)};_.v=function gg(){return Yf(this),this.d.v()};_.mb=function hg(){return Yf(this),new xg(this)};_.nb=function ig(a){return Zf(this,a)};_.Y=function jg(){return Yf(this),this.d.Y()};_.w=function kg(){Yf(this);return xb(this.d)};var Pw=Nkb(xyb,'AbstractMapBasedMultimap/WrappedCollection',216);var sH=Pkb(Cyb,'List');hI(297,216,Fyb,mg);_.rb=function ng(a,b){var c;Yf(this);c=this.d.V();Wv(this.d,20).rb(a,b);++this.a.c;c&&Vf(this)};_.sb=function og(a){Yf(this);return Wv(this.d,20).sb(a)};_.tb=function pg(){Yf(this);return new Cg(this)};_.ub=function qg(a){Yf(this);return new Dg(this,a)};_.vb=function rg(a){var b;Yf(this);b=Wv(this.d,20).vb(a);--this.a.c;$f(this);return b};_.wb=function sg(a,b){Yf(this);return Wv(this.d,20).wb(a,b)};_.xb=function tg(a,b){Yf(this);return Ld(this.a,this.e,Wv(this.d,20).xb(a,b),!this.b?this:this.b)};var Rw=Nkb(xyb,'AbstractMapBasedMultimap/WrappedList',297);hI(385,297,Gyb,ug);var Nw=Nkb(xyb,'AbstractMapBasedMultimap/RandomAccessWrappedList',385);hI(189,1,Ayb,xg);_.G=function zg(){return wg(this),this.b.G()};_.H=function Ag(){return wg(this),this.b.H()};_.I=function Bg(){this.b.I();--this.d.f.c;$f(this.d)};var Ow=Nkb(xyb,'AbstractMapBasedMultimap/WrappedCollection/WrappedIterator',189);hI(298,189,Hyb,Cg,Dg);_.J=function Eg(a){var b;b=lg(this.a)==0;(wg(this),Wv(this.b,96)).J(a);++this.a.a.c;b&&Vf(this.a)};_.K=function Fg(){return (wg(this),Wv(this.b,96)).K()};_.L=function Gg(){return (wg(this),Wv(this.b,96)).L()};_.M=function Hg(){return (wg(this),Wv(this.b,96)).M()};_.N=function Ig(){return (wg(this),Wv(this.b,96)).N()};_.O=function Jg(a){(wg(this),Wv(this.b,96)).O(a)};var Qw=Nkb(xyb,'AbstractMapBasedMultimap/WrappedList/WrappedListIterator',298);hI(295,216,Eyb,Kg);var Sw=Nkb(xyb,'AbstractMapBasedMultimap/WrappedSet',295);hI(296,216,Iyb,Lg);var Tw=Nkb(xyb,'AbstractMapBasedMultimap/WrappedSortedSet',296);hI(668,1,Jyb);_.t=function Mg(a){var b;if(aw(a,21)){b=Wv(a,21);return Tb(this.yb(),b.yb())&&Tb(this.zb(),b.zb())}return false};_.v=function Ng(){var a,b;a=this.yb();b=this.zb();return (a==null?0:vb(a))^(b==null?0:vb(b))};_.Ab=function Og(a){throw new Hmb};_.w=function Pg(){return this.yb()+'='+this.zb()};var Vw=Nkb(xyb,Kyb,668);hI(390,640,Dyb,Qg);_.Q=function Rg(){Cd(this.a)};_.kb=function Sg(a){return td(this.a,a)};_.mb=function Tg(){return new de(this.a)};_.Y=function Ug(){return this.a.c};var Ww=Nkb(xyb,'AbstractMultimap/Values',390);hI(656,640,Lyb);_.ib=function Wg(a){return this.Bb(a,1),true};_.Bb=function Xg(a,b){throw new Hmb};_.jb=function Yg(a){return Eq(this,a)};_.Q=function Zg(){Ml(this.Eb())};_.kb=function $g(a){return this.Cb(a)>0};_.Cb=function _g(a){var b,c;for(c=Vg(this).mb();c.G();){b=Wv(c.H(),83);if(Tb(b.Zb(),a)){return b.Yb()}}return 0};_.gb=function ah(){return new qh(this)};_.bb=function bh(){return Vg(this)};_.t=function dh(a){return Fq(this,a)};_.v=function eh(){return Vg(this).v()};_.V=function fh(){return Vg(this).V()};_.mb=function gh(){return Dq(),new Oq(this,Vg(this).mb())};_.nb=function hh(a){return this.Fb(a,1)>0};_.Fb=function ih(a,b){throw new Hmb};_.Gb=function jh(a,b){var c,d;return Dq(),Mh(b,'count'),c=this.Cb(a),d=b-c,d>0?this.Bb(a,d):d<0&&this.Fb(a,-d),c};_.Hb=function kh(a,b,c){return Gq(this,a,b,c)};_.Y=function lh(){return Hq(this)};_.w=function mh(){return xb(Vg(this))};var Zw=Nkb(xyb,'AbstractMultiset',656);hI(657,649,Eyb);_.Q=function nh(){this.Ib().Q()};_.kb=function oh(a){var b,c;if(aw(a,83)){c=Wv(a,83);if(c.Yb()<=0){return false}b=this.Ib().Cb(c.Zb());return b==c.Yb()}return false};_.nb=function ph(a){var b,c,d,e;if(aw(a,83)){c=Wv(a,83);b=c.Zb();d=c.Yb();if(d!=0){e=this.Ib();return e.Hb(b,d,0)}}return false};var xy=Nkb(xyb,'Multisets/EntrySet',657);hI(396,657,Eyb,qh);_.mb=function rh(){return this.a.Eb()};_.Ib=function sh(){return this.a};_.Y=function th(){return this.a.Db()};var Yw=Nkb(xyb,'AbstractMultiset/EntrySet',396);hI(384,294,zyb);_.Z=function wh(){return new wtb(op(this.a))};_.$=function xh(){return hi(),kr(),jr};_.U=function zh(a){return Wv(Dd(this,a),18)};_.X=function Ah(a){return Wv(Gd(this,a),18)};_.P=function vh(){var a;return a=this.f,!a?(this.f=new Ie(this,this.b)):a};_.t=function yh(a){return Mp(this,a)};var $w=Nkb(xyb,'AbstractSetMultimap',384);hI(342,656,Lyb);var _w=Nkb(xyb,'AbstractSortedMultiset',342);hI(280,600,zyb,Dh);_.a=0;var ax=Nkb(xyb,'ArrayListMultimap',280);hI(159,17,Myb);var Eh,Fh;var dx=Okb(xyb,'BoundType',159,IF,Ih);hI(623,159,Myb,Jh);var bx=Okb(xyb,'BoundType/1',623,dx,null);hI(624,159,Myb,Kh);var cx=Okb(xyb,'BoundType/2',624,dx,null);var Nh;hI(234,1,Oyb);_.w=function Th(){return Vl(this.c.mb())};var fx=Nkb(xyb,'FluentIterable',234);hI(170,234,Oyb,Vh);_.mb=function Wh(){return Uh(this)};var ex=Nkb(xyb,'FluentIterable/2',170);hI(664,1,{});_.w=function Xh(){return xb(irb(this.a.d).b)};var mx=Nkb(xyb,'ForwardingObject',664);hI(665,664,Dyb);_.ib=function Yh(a){return irb(this.a.d),vqb()};_.jb=function Zh(a){return irb(this.a.d),wqb()};_.Q=function $h(){irb(this.a.d);xqb()};_.kb=function _h(a){return Irb(irb(this.a.d),a)};_.lb=function ai(a){return Jrb(irb(this.a.d),a)};_.V=function bi(){return irb(this.a.d).b.V()};_.mb=function ci(){var a;return a=irb(this.a.d).b.mb(),new Trb(a)};_.nb=function di(a){return irb(this.a.d),yqb()};_.Y=function ei(){return irb(this.a.d).b.Y()};_.ob=function fi(){return Krb(irb(this.a.d))};_.pb=function gi(a){return Lrb(irb(this.a.d),a)};var gx=Nkb(xyb,'ForwardingCollection',665);hI(660,640,Pyb);_.mb=function ti(){return this.Kb()};_.ib=function oi(a){return ii()};_.jb=function pi(a){return ji()};_.Q=function qi(){li()};_.kb=function ri(a){return a!=null&&Ve(this,a,false)};_.Jb=function si(){switch(this.Y()){case 0:return Gi(),Gi(),Fi;case 1:return Gi(),new Er(this.Kb().H());default:return new Zq(this,this.ob());}};_.nb=function ui(a){return mi()};var sx=Nkb(xyb,'ImmutableCollection',660);hI(316,660,Pyb,vi);_.mb=function Ai(){return Xl(this.a.mb())};_.kb=function wi(a){return a!=null&&this.a.kb(a)};_.lb=function xi(a){return this.a.lb(a)};_.V=function yi(){return this.a.V()};_.Kb=function zi(){return Xl(this.a.mb())};_.Y=function Bi(){return this.a.Y()};_.ob=function Ci(){return this.a.ob()};_.pb=function Di(a){return this.a.pb(a)};_.w=function Ei(){return xb(this.a)};var hx=Nkb(xyb,'ForwardingImmutableCollection',316);hI(87,660,Qyb);_.mb=function Pi(){return this.Kb()};_.tb=function Qi(){return this.Lb(0)};_.ub=function Si(a){return this.Lb(a)};_.xb=function Xi(a,b){return this.Mb(a,b)};_.rb=function Ji(a,b){throw new Hmb};_.t=function Mi(a){return yo(this,a)};_.v=function Ni(){return zo(this)};_.Kb=function Oi(){return this.Lb(0)};_.Lb=function Ri(a){return Hi(this,a)};_.vb=function Ui(a){throw new Hmb};_.wb=function Vi(a,b){throw new Hmb};_.Mb=function Wi(a,b){var c;return Yi((c=new Mo(this),new Mnb(c,a,b)))};var Fi;var wx=Nkb(xyb,'ImmutableList',87);hI(667,87,Qyb);_.mb=function gj(){return Xl(this.Nb().mb())};_.xb=function jj(a,b){return Yi(this.Nb().xb(a,b))};_.kb=function _i(a){return Zi(this,a)};_.lb=function aj(a){return this.Nb().lb(a)};_.t=function bj(a){return this.Nb().t(a)};_.sb=function cj(a){return $i(this,a)};_.v=function dj(){return this.Nb().v()};_.V=function ej(){return this.Nb().V()};_.Kb=function fj(){return Xl(this.Nb().mb())};_.Y=function hj(){return this.Nb().Y()};_.Mb=function ij(a,b){return Yi(this.Nb().xb(a,b))};_.ob=function kj(){return this.Nb().pb(xv(UF,syb,1,this.Nb().Y(),4,1))};_.pb=function lj(a){return this.Nb().pb(a)};_.w=function mj(){return xb(this.Nb())};var ix=Nkb(xyb,'ForwardingImmutableList',667);hI(524,1,Ryb);_.bb=function wj(){return nj(this)};_.W=function Aj(){return oj(this)};_.fb=function Gj(){return this.Rb()};_.Q=function qj(){throw new Hmb};_.R=function rj(a){return this.cb(a)!=null};_.ab=function sj(a){return this.Rb().kb(a)};_.Pb=function uj(){return new Uk(this)};_.Qb=function vj(){return new Zk(this)};_.t=function xj(a){return pp(this,a)};_.v=function yj(){return nj(this).v()};_.V=function zj(){return this.Y()==0};_.db=function Cj(a,b){return pj()};_.eb=function Dj(a){throw new Hmb};_.w=function Ej(){var a;return mp(),a=umb(Ph(this.Y()),123),Qb(lp,a,nj(this).mb()),a.a+='}',a.a};_.Rb=function Fj(){if(this.g){return this.g}return this.g=this.Qb()};_.e=null;_.f=null;_.g=null;var Cx=Nkb(xyb,'ImmutableMap',524);hI(320,524,Ryb);_.R=function Ij(a){return qp(this.d,a)};_.ab=function Jj(a){return hrb(this.d,a)};_.Ob=function Kj(){return ck(new Vj(this))};_.Pb=function Lj(){return ck(krb(this.d))};_.Qb=function Mj(){return hi(),new vi(lrb(this.d))};_.t=function Nj(a){return jrb(this.d,a)};_.cb=function Oj(a){return a==null?null:rp(this.d,a)};_.v=function Pj(){return this.d.c.v()};_.V=function Qj(){return this.d.c.V()};_.Y=function Rj(){return this.d.c.Y()};_.w=function Sj(){return xb(this.d.c)};var kx=Nkb(xyb,'ForwardingImmutableMap',320);hI(666,665,Eyb);_.t=function Tj(a){return a===this||Drb(irb(this.a.d),a)};_.v=function Uj(){return irb(this.a.d).b.v()};var nx=Nkb(xyb,'ForwardingSet',666);hI(523,666,Eyb,Vj);_.kb=function Wj(b){if(aw(b,21)&&Wv(b,21).yb()==null){return false}try{return Irb(irb(this.a.d),b)}catch(a){a=OH(a);if(aw(a,119)){return false}else throw NH(a)}};_.pb=function Xj(a){var b;b=Lrb(irb(this.a.d),a);irb(this.a.d).b.Y()<b.length&&Av(b,irb(this.a.d).b.Y(),null);return b};var jx=Nkb(xyb,'ForwardingImmutableMap/1',523);hI(663,660,Syb);_.mb=function ak(){return this.Kb()};_.t=function $j(a){return mr(this,a)};_.v=function _j(){return nr(this)};var Fx=Nkb(xyb,'ImmutableSet',663);hI(315,663,Syb);_.mb=function jk(){return Xl(new Nqb(this.a.b.mb()))};_.kb=function ek(a){return a!=null&&Brb(this.a,a)};_.lb=function fk(a){return Crb(this.a,a)};_.v=function gk(){return this.a.b.v()};_.V=function hk(){return this.a.b.V()};_.Kb=function ik(){return Xl(new Nqb(this.a.b.mb()))};_.Y=function kk(){return this.a.b.Y()};_.ob=function lk(){return this.a.b.ob()};_.pb=function mk(a){return Erb(this.a,a)};_.w=function nk(){return xb(this.a.b)};var lx=Nkb(xyb,'ForwardingImmutableSet',315);hI(178,1,{178:1,3:1},sk);_.t=function tk(a){var b;if(aw(a,178)){b=Wv(a,178);return this.a.t(b.a)&&this.b==b.b&&this.c==b.c&&this.d==b.d&&this.f==b.f&&Tb(this.e,b.e)&&Tb(this.g,b.g)}return false};_.v=function uk(){return fpb(Bv(tv(UF,1),syb,1,4,[this.a,this.e,this.d,this.g,this.f]))};_.w=function vk(){return umb(xmb(umb(xmb(umb(ymb(xmb(new zmb,this.a),':'),this.d==(Gh(),Eh)?91:40),this.b?this.e:'-\u221E'),44),this.c?this.g:'\u221E'),this.f==Eh?93:41).a};_.b=false;_.c=false;var ox=Nkb(xyb,'GeneralRange',178);hI(215,384,zyb,xk);_.a=2;var px=Nkb(xyb,'HashMultimap',215);hI(661,87,Qyb);_.kb=function yk(a){return this.Sb().kb(a)};_.V=function zk(){return this.Sb().V()};_.Y=function Ak(){return this.Sb().Y()};var qx=Nkb(xyb,'ImmutableAsList',661);hI(275,320,Ryb);_.Rb=function Ck(){return this.Ub()};_.fb=function Ek(){return this.Ub()};_.Ub=function Dk(){return oj(this.Tb())};var rx=Nkb(xyb,'ImmutableBiMap',275);hI(341,668,{3:1,21:1},Fk);_.yb=function Gk(){return this.a};_.zb=function Hk(){return this.b};_.Ab=function Ik(a){throw new Hmb};var tx=Nkb(xyb,'ImmutableEntry',341);hI(436,315,Syb,Jk);var ux=Nkb(xyb,'ImmutableEnumSet',436);hI(379,378,yyb,Mk);var vx=Nkb(xyb,'ImmutableList/1',379);hI(266,108,wyb,Nk);_.G=function Ok(){return this.a.G()};_.H=function Pk(){return Wv(this.a.H(),21).yb()};var xx=Nkb(xyb,'ImmutableMap/1',266);hI(670,663,Syb);_.mb=function Sk(){var a;return a=nj(this.a).Kb(),new Nk(a)};_.Jb=function Qk(){return new jl(this)};_.Kb=function Rk(){var a;return (a=this.c,!a?(this.c=new jl(this)):a).Kb()};var Ex=Nkb(xyb,'ImmutableSet/Indexed',670);hI(606,670,Syb,Uk);_.mb=function Xk(){var a;return a=nj(this.a).Kb(),new Nk(a)};_.kb=function Vk(a){return this.a.R(a)};_.Kb=function Wk(){var a;return a=nj(this.a).Kb(),new Nk(a)};_.Y=function Yk(){return this.a.Y()};var yx=Nkb(xyb,'ImmutableMapKeySet',606);hI(604,660,Pyb,Zk);_.mb=function bl(){return new dl(this)};_.kb=function $k(a){return a!=null&&(Il(),Il(),Tl(new dl(this),(hc(),a==null?(Lc(),Jc):new sc(a)))!=-1)};_.Jb=function _k(){var a;a=ki(nj(this.a));return new gl(this,a)};_.Kb=function al(){return new dl(this)};_.Y=function cl(){return this.a.Y()};var Bx=Nkb(xyb,'ImmutableMapValues',604);hI(282,108,wyb,dl);_.G=function el(){return this.a.G()};_.H=function fl(){return Wv(this.a.H(),21).zb()};var zx=Nkb(xyb,'ImmutableMapValues/1',282);hI(605,661,Qyb,gl);_.Sb=function hl(){return this.a};_.sb=function il(a){return Wv(this.b.sb(a),21).zb()};var Ax=Nkb(xyb,'ImmutableMapValues/2',605);hI(311,661,Qyb,jl);_.Sb=function kl(){return this.a};_.sb=function ll(a){return Tk(this.a,a)};var Dx=Nkb(xyb,'ImmutableSet/Indexed/1',311);hI(414,234,Oyb,vl);_.mb=function wl(){return Nl(this.a)};_.w=function xl(){return Ze(this.a)+' (cycled)'};var Hx=Nkb(xyb,'Iterables/1',414);hI(105,1,Tyb,yl);_.B=function zl(a){return Wv(a,22).mb()};var Gx=Nkb(xyb,'Iterables/12',105);hI(415,234,Oyb,Bl);_.mb=function Cl(){return Al(this)};var Ix=Nkb(xyb,'Iterables/4',415);hI(416,234,Oyb,El);_.mb=function Fl(){return Dl(this)};var Jx=Nkb(xyb,'Iterables/5',416);var Gl,Hl;hI(424,651,yyb,Yl);_.G=function Zl(){return false};_.K=function $l(){return false};_.H=function _l(){throw new nvb};_.L=function am(){return 0};_.M=function bm(){throw new nvb};_.N=function cm(){return -1};var Lx=Nkb(xyb,'Iterators/1',424);hI(264,108,wyb,dm);_.G=function em(){return !this.a};_.H=function fm(){if(this.a){throw new nvb}this.a=true;return this.b};_.a=false;var Kx=Nkb(xyb,'Iterators/11',264);hI(425,1,Ayb,gm);_.G=function hm(){return false};_.H=function im(){throw new nvb};_.I=function jm(){ec(false)};var Mx=Nkb(xyb,'Iterators/2',425);hI(426,108,wyb,km);_.G=function lm(){return this.a.G()};_.H=function mm(){return this.a.H()};var Nx=Nkb(xyb,'Iterators/3',426);hI(427,1,Ayb,om);_.G=function pm(){return this.a.G()||this.b.mb().G()};_.H=function qm(){return nm(this)};_.I=function rm(){this.a.I()};var Ox=Nkb(xyb,'Iterators/4',427);hI(429,428,wyb,tm);var Px=Nkb(xyb,'Iterators/6',429);hI(261,1,Ayb);_.G=function wm(){return this.b.G()};_.H=function xm(){return um(this)};_.I=function ym(){this.b.I()};var Oy=Nkb(xyb,'TransformedIterator',261);hI(430,261,Ayb,Am);_.Vb=function Bm(a){return zm(this,a)};var Qx=Nkb(xyb,'Iterators/7',430);hI(313,1,Ayb);_.G=function Fm(){return Cm(this)};_.H=function Gm(){return Dm(this)};_.I=function Hm(){ec(!!this.c);this.c.I();this.c=null};var Ay=Nkb(xyb,'MultitransformedIterator',313);hI(90,313,{90:1,35:1},Im);_.Wb=function Jm(a){return Wv(a,35)};var Sx=Nkb(xyb,'Iterators/ConcatenatedIterator',90);hI(314,313,Ayb,Lm);_.Wb=function Mm(a){return Km(Wv(a,35))};var Rx=Nkb(xyb,'Iterators/ConcatenatedIterator/1',314);hI(329,653,zyb,Um);_.U=function $m(a){return new Bn(this,a)};_.X=function an(a){return Sm(this,a)};_.Q=function Wm(){Pm(this)};_.R=function Xm(a){return Qm(this,a)};_.S=function Ym(){return new Pp(this)};_.T=function Zm(){return new Hn(this)};_.V=function _m(){return !this.a};_.Y=function bn(){return this.d};_.c=0;_.d=0;var _x=Nkb(xyb,'LinkedListMultimap',329);hI(647,640,Fyb);_.rb=function en(a,b){throw new Imb('Add not supported on this list')};_.ib=function fn(a){this.rb(this.Y(),a);return true};_.Q=function gn(){this.Xb(0,this.Y())};_.t=function hn(a){return cn(this,a)};_.v=function jn(){return Bpb(this)};_.mb=function kn(){return new wnb(this)};_.tb=function ln(){return this.ub(0)};_.ub=function mn(a){return new Fnb(this,a)};_.vb=function nn(a){throw new Imb('Remove not supported on this list')};_.Xb=function on(a,b){var c,d;d=this.ub(a);for(c=a;c<b;++c){d.H();d.I()}};_.wb=function pn(a,b){throw new Imb('Set not supported on this list')};_.xb=function qn(a,b){return new Mnb(this,a,b)};_.d=0;var lG=Nkb(Cyb,'AbstractList',647);hI(648,647,Fyb);_.rb=function vn(a,b){rn(this,a,b)};_.sb=function wn(a){return tn(this,a)};_.mb=function xn(){return this.ub(0)};_.vb=function yn(a){return un(this,a)};_.wb=function zn(b,c){var d,e;d=this.ub(b);try{e=d.H();d.O(c);return e}catch(a){a=OH(a);if(aw(a,74)){throw new okb("Can't set element "+b)}else throw NH(a)}};var yG=Nkb(Cyb,'AbstractSequentialList',648);hI(276,648,Fyb,Bn);_.ub=function Cn(a){return An(this,a)};_.Y=function Dn(){var a;a=Wv(Smb(this.a.b,this.b),126);return !a?0:a.a};var Vx=Nkb(xyb,'LinkedListMultimap/1',276);hI(330,648,Fyb,En);_.ub=function Fn(a){return new _n(this.a,a)};_.Y=function Gn(){return this.a.d};var Tx=Nkb(xyb,'LinkedListMultimap/1EntriesImpl',330);hI(563,649,Eyb,Hn);_.kb=function In(a){return Qm(this.a,a)};_.mb=function Jn(){return new Nn(this.a)};_.nb=function Kn(a){return !Sm(this.a,a).a.V()};_.Y=function Ln(){return Zmb(this.a.b)};var Ux=Nkb(xyb,'LinkedListMultimap/1KeySetImpl',563);hI(562,1,Ayb,Nn);_.G=function On(){Mn(this);return !!this.c};_.H=function Pn(){Mn(this);Vm(this.c);this.a=this.c;stb(this.d,this.a.a);do{this.c=this.c.b}while(!!this.c&&!stb(this.d,this.c.a));return this.a.a};_.I=function Qn(){Mn(this);ec(!!this.a);Ml(new mo(this.e,this.a.a));this.a=null;this.b=this.e.c};_.b=0;var Wx=Nkb(xyb,'LinkedListMultimap/DistinctKeyIterator',562);hI(126,1,{126:1},Rn);_.a=0;var Xx=Nkb(xyb,'LinkedListMultimap/KeyList',126);hI(560,668,Jyb,Sn);_.yb=function Tn(){return this.a};_.zb=function Un(){return this.f};_.Ab=function Vn(a){var b;b=this.f;this.f=a;return b};var Zx=Nkb(xyb,'LinkedListMultimap/Node',560);hI(561,1,Hyb,_n);_.J=function ao(a){Wv(a,21);Wn()};_.H=function eo(){return Yn(this)};_.M=function go(){return Zn(this)};_.O=function jo(a){Wv(a,21);$n()};_.G=function bo(){Xn(this);return !!this.c};_.K=function co(){Xn(this);return !!this.e};_.L=function fo(){return this.d};_.N=function ho(){return this.d-1};_.I=function io(){Xn(this);ec(!!this.a);if(this.a!=this.c){this.e=this.a.d;--this.d}else{this.c=this.a.b}Tm(this.f,this.a);this.a=null;this.b=this.f.c};_.b=0;_.d=0;var Yx=Nkb(xyb,'LinkedListMultimap/NodeIterator',561);hI(241,1,Hyb,mo,no);_.J=function oo(a){this.e=Nm(this.f,this.b,a,this.c);++this.d;this.a=null};_.G=function po(){return !!this.c};_.K=function qo(){return !!this.e};_.H=function ro(){return ko(this)};_.L=function so(){return this.d};_.M=function to(){return lo(this)};_.N=function uo(){return this.d-1};_.I=function vo(){ec(!!this.a);if(this.a!=this.c){this.e=this.a.e;--this.d}else{this.c=this.a.c}Tm(this.f,this.a);this.a=null};_.O=function wo(a){dc(!!this.a);this.a.f=a};_.d=0;var $x=Nkb(xyb,'LinkedListMultimap/ValueForKeyIterator',241);hI(419,647,Fyb);_.rb=function Go(a,b){this.a.rb(a,b)};_.kb=function Ho(a){return this.a.kb(a)};_.sb=function Io(a){return this.a.sb(a)};_.vb=function Jo(a){return this.a.vb(a)};_.wb=function Ko(a,b){return this.a.wb(a,b)};_.Y=function Lo(){return this.a.Y()};var by=Nkb(xyb,'Lists/AbstractListWrapper',419);hI(420,419,Gyb);var cy=Nkb(xyb,'Lists/RandomAccessListWrapper',420);hI(422,420,Gyb,Mo);_.ub=function No(a){return this.a.ub(a)};var ay=Nkb(xyb,'Lists/1',422);hI(88,647,{88:1,22:1,19:1,20:1},Ro);_.rb=function So(a,b){this.a.rb(Qo(this,a),b)};_.Q=function To(){this.a.Q()};_.sb=function Uo(a){return this.a.sb(Po(this,a))};_.mb=function Vo(){return Oo(this,0)};_.ub=function Wo(a){return Oo(this,a)};_.vb=function Xo(a){return this.a.vb(Po(this,a))};_.Xb=function Yo(a,b){(cc(a,b,this.a.Y()),Fo(this.a.xb(Qo(this,b),Qo(this,a)))).Q()};_.wb=function Zo(a,b){return this.a.wb(Po(this,a),b)};_.Y=function $o(){return this.a.Y()};_.xb=function _o(a,b){return cc(a,b,this.a.Y()),Fo(this.a.xb(Qo(this,b),Qo(this,a)))};var fy=Nkb(xyb,'Lists/ReverseList',88);hI(220,88,{88:1,22:1,19:1,20:1,63:1},ap);var dy=Nkb(xyb,'Lists/RandomAccessReverseList',220);hI(421,1,Hyb,bp);_.J=function cp(a){this.c.J(a);this.c.M();this.a=false};_.G=function dp(){return this.c.K()};_.K=function ep(){return this.c.G()};_.H=function fp(){if(!this.c.K()){throw new nvb}this.a=true;return this.c.M()};_.L=function gp(){return Qo(this.b,this.c.L())};_.M=function hp(){if(!this.c.G()){throw new nvb}this.a=true;return this.c.H()};_.N=function ip(){return Qo(this.b,this.c.L())-1};_.I=function jp(){ec(this.a);this.c.I();this.a=false};_.O=function kp(a){dc(this.a);this.c.O(a)};_.a=false;var ey=Nkb(xyb,'Lists/ReverseList/1',421);var lp;hI(376,261,Ayb,tp);_.Vb=function up(a){return mp(),new Fk(a,aq(this.a,a))};var gy=Nkb(xyb,'Maps/1',376);hI(188,17,Wyb);var vp,wp;var jy=Okb(xyb,'Maps/EntryFunction',188,IF,zp);hI(374,188,Wyb,Ap);_.B=function Bp(a){return Wv(a,21).yb()};var hy=Okb(xyb,'Maps/EntryFunction/1',374,jy,null);hI(375,188,Wyb,Cp);_.B=function Dp(a){return Wv(a,21).zb()};var iy=Okb(xyb,'Maps/EntryFunction/2',375,jy,null);hI(373,640,Dyb,Fp);_.Q=function Gp(){this.a.Q()};_.kb=function Hp(a){return this.a.ab(a)};_.V=function Ip(){return this.a.V()};_.mb=function Jp(){return Ep(this)};_.nb=function Kp(b){var c,d;try{return Ve(this,b,true)}catch(a){a=OH(a);if(aw(a,45)){for(d=this.a.bb().mb();d.G();){c=Wv(d.H(),21);if(Tb(b,c.zb())){this.a.eb(c.yb());return true}}return false}else throw NH(a)}};_.Y=function Lp(){return this.a.Y()};var my=Nkb(xyb,'Maps/Values',373);hI(301,654,Byb,Pp);_.cb=function Tp(a){return this.a.R(a)?this.a.U(a):null};_.eb=function Wp(a){return this.a.R(a)?this.a.X(a):null};_.Q=function Qp(){this.a.Q()};_.R=function Rp(a){return this.a.R(a)};_.hb=function Sp(){return new Yp(this)};_.gb=function(){return this.hb()};_.V=function Up(){return this.a.V()};_.W=function Vp(){return this.a.W()};_.Y=function Xp(){return this.a.W().Y()};var qy=Nkb(xyb,'Multimaps/AsMap',301);hI(393,655,Eyb,Yp);_.mb=function Zp(){return np(this.a.a.W(),new bq(this))};_.qb=function $p(){return this.a};_.nb=function _p(a){var b;if(!mf(this,a)){return false}b=Wv(a,21);Op(this.a,b.yb());return true};var py=Nkb(xyb,'Multimaps/AsMap/EntrySet',393);hI(395,1,Tyb,bq);_.B=function cq(a){return aq(this,a)};var oy=Nkb(xyb,'Multimaps/AsMap/EntrySet/1',395);hI(391,656,Lyb,eq);_.Q=function fq(){Pm(this.a)};_.kb=function gq(a){return Qm(this.a,a)};_.Cb=function hq(a){var b;return b=Wv(rp(Om(this.a),a),19),!b?0:b.Y()};_.gb=function iq(){return new wq(this)};_.Db=function jq(){return Om(this.a).Y()};_.Eb=function kq(){return new nq(Ae(Om(this.a)).mb())};_.mb=function lq(){return dq(this)};_.Fb=function mq(a,b){var c,d,e,f,g;Mh(b,Xyb);if(b==0){return g=Wv(rp(Om(this.a),a),19),!g?0:g.Y()}f=Wv(rp(Om(this.a),a),19);if(!f){return 0}e=f.Y();if(b>=e){f.Q()}else{d=f.mb();for(c=0;c<b;c++){d.H();d.I()}}return e};var uy=Nkb(xyb,'Multimaps/Keys',391);hI(302,261,Ayb,nq);_.Vb=function oq(a){return new tq(Wv(a,21))};var sy=Nkb(xyb,'Multimaps/Keys/1',302);hI(658,1,{83:1});_.t=function qq(a){var b;if(aw(a,83)){b=Wv(a,83);return this.Yb()==b.Yb()&&Tb(this.Zb(),b.Zb())}return false};_.v=function rq(){var a;a=this.Zb();return (a==null?0:vb(a))^this.Yb()};_.w=function sq(){return pq(this)};var wy=Nkb(xyb,'Multisets/AbstractEntry',658);hI(394,658,{83:1},tq);_.Yb=function uq(){return Wv(this.a.zb(),19).Y()};_.Zb=function vq(){return this.a.yb()};var ry=Nkb(xyb,'Multimaps/Keys/1/1',394);hI(392,657,Eyb,wq);_.kb=function xq(a){var b,c;if(aw(a,83)){c=Wv(a,83);b=Wv(Om(this.a.a).cb(c.Zb()),19);return !!b&&b.Y()==c.Yb()}return false};_.V=function yq(){return !this.a.a.a};_.mb=function zq(){return new nq(Ae(Om(this.a.a)).mb())};_.Ib=function Aq(){return this.a};_.nb=function Bq(a){var b,c;if(aw(a,83)){c=Wv(a,83);b=Wv(Om(this.a.a).cb(c.Zb()),19);if(!!b&&b.Y()==c.Yb()){b.Q();return true}}return false};_.Y=function Cq(){return Om(this.a.a).Y()};var ty=Nkb(xyb,'Multimaps/Keys/KeysEntrySet',392);hI(659,1,fyb);var Cy=Nkb(xyb,'Ordering',659);hI(398,659,fyb,Jq);_.$b=function Kq(a,b){return Iq(Wv(a,83),Wv(b,83))};var vy=Nkb(xyb,'Multisets/1',398);hI(397,658,{83:1,3:1},Lq);_.Yb=function Mq(){return this.a};_.Zb=function Nq(){return this.b};_.a=0;var yy=Nkb(xyb,'Multisets/ImmutableEntry',397);hI(303,1,Ayb,Oq);_.G=function Pq(){return this.d>0||this.c.G()};_.H=function Qq(){if(!(this.d>0||this.c.G())){throw new nvb}if(this.d==0){this.b=Wv(this.c.H(),83);this.f=this.d=this.b.Yb()}--this.d;this.a=true;return this.b.Zb()};_.I=function Rq(){ec(this.a);this.f==1?this.c.I():this.e.Fb(this.b.Zb(),1)>0;--this.f;this.a=false};_.a=false;_.d=0;_.f=0;var zy=Nkb(xyb,'Multisets/MultisetIteratorImpl',303);hI(622,659,{3:1,56:1},Vq);_.$b=function Wq(a,b){return Uq(Wv(a,23),Wv(b,23))};_.w=function Xq(){return 'Ordering.natural()'};var Sq;var By=Nkb(xyb,'NaturalOrdering',622);hI(343,661,Qyb,Zq);_.ub=function br(a){return Hi(this.b,a)};_.Sb=function $q(){return this.a};_.sb=function _q(a){return $i(this.b,a)};_.Lb=function ar(a){return Hi(this.b,a)};var Dy=Nkb(xyb,'RegularImmutableAsList',343);hI(559,275,Ryb,er);_.Tb=function fr(){return this.a};var cr;var Ey=Nkb(xyb,'RegularImmutableBiMap',559);hI(53,667,Qyb,gr);_.Nb=function hr(){return this.a};var Fy=Nkb(xyb,'RegularImmutableList',53);hI(321,320,Ryb,ir);var Gy=Nkb(xyb,'RegularImmutableMap',321);hI(265,315,Syb,lr);var jr;var Hy=Nkb(xyb,'RegularImmutableSet',265);hI(650,641,Eyb);var Ky=Nkb(xyb,'Sets/SetView',650);hI(377,650,Eyb,tr);_.kb=function ur(a){return ttb(this.b,a)&&ttb(this.c,a)};_.lb=function vr(a){return Xe(this.b,a)&&Xe(this.c,a)};_.V=function wr(){return sr(this)};_.mb=function xr(){var a;return Pl((a=(new Snb(this.b.a)).a.bb().mb(),new Ynb(a)),this.a)};_.Y=function yr(){var a;return Ul(Pl((a=(new Snb(this.b.a)).a.bb().mb(),new Ynb(a)),this.a))};var Iy=Nkb(xyb,'Sets/2',377);hI(328,275,Ryb,zr,Ar);_.fb=function Dr(){return hi(),new Gr(this.c)};_.Tb=function Br(){var a;a=this.a;return !a?(this.a=new Ar(this.c,this.b,this)):a};_.Ub=function Cr(){return hi(),new Gr(this.c)};var Ly=Nkb(xyb,'SingletonImmutableBiMap',328);hI(127,667,Qyb,Er);_.Nb=function Fr(){return this.a};var My=Nkb(xyb,'SingletonImmutableList',127);hI(135,663,Syb,Gr);_.mb=function Jr(){return Il(),new dm(this.a)};_.kb=function Hr(a){return rb(this.a,a)};_.Kb=function Ir(){return Il(),new dm(this.a)};_.Y=function Kr(){return 1};var Ny=Nkb(xyb,'SingletonImmutableSet',135);hI(285,342,{207:1,3:1,22:1,19:1},Ur,Vr);_.Bb=function Wr(a,b){return Lr(this,a,b)};_.Cb=function Xr(a){return Pr(this,a)};_.Db=function Yr(){return $s(Or(this,(qs(),os)))};_.Eb=function $r(){return new ks(this)};_.Fb=function _r(a,b){return Sr(this,a,b)};_.Gb=function as(a,b){return Tr(this,a,b)};_.Hb=function bs(a,b,c){var d,e,f;Mh(c,'newCount');Mh(b,'oldCount');Xb(ok(this.b,a));f=this.c.a;if(!f){if(b==0){c>0&&Lr(this,a,c);return true}else{return false}}e=xv(mw,Yyb,26,1,12,1);d=Ms(f,this.d,a,b,c,e);Us(this.c,f,d);return e[0]==b};_.Y=function cs(){return $s(Or(this,(qs(),ps)))};var Wy=Nkb(xyb,'TreeMultiset',285);hI(619,658,{83:1},fs);_.Yb=function gs(){var a;a=this.b.c;return a==0?Pr(this.a,this.b.b):a};_.Zb=function hs(){return this.b.b};var Py=Nkb(xyb,'TreeMultiset/1',619);hI(620,1,Ayb,ks);_.H=function ms(){return js(this)};_.G=function ls(){return is(this)};_.I=function ns(){ec(!!this.b);Tr(this.c,this.b.b.b,0);this.b=null};var Qy=Nkb(xyb,'TreeMultiset/2',620);hI(205,17,Zyb);var os,ps;var Ty=Okb(xyb,'TreeMultiset/Aggregate',205,IF,ss);hI(617,205,Zyb,ts);_._b=function us(a){return a.c};_.ac=function vs(a){return !a?0:a.j};var Ry=Okb(xyb,'TreeMultiset/Aggregate/1',617,Ty,null);hI(618,205,Zyb,ws);_._b=function xs(a){return 1};_.ac=function ys(a){return !a?0:a.a};var Sy=Okb(xyb,'TreeMultiset/Aggregate/2',618,Ty,null);hI(206,658,{83:1,206:1},Os);_.Yb=function Ps(){return this.c};_.Zb=function Qs(){return this.b};_.w=function Ss(){return Dq(),pq(new Lq(this.b,this.c))};_.a=0;_.c=0;_.d=0;_.j=0;var Uy=Nkb(xyb,'TreeMultiset/AvlNode',206);hI(616,1,{},Vs);var Vy=Nkb(xyb,'TreeMultiset/Reference',616);var $y=Nkb(lyb,'JavaScriptObject$',0);var qt;hI(628,1,{});var _y=Nkb(lyb,'Scheduler',628);var ut=0,vt=0,wt=-1;hI(360,628,{},Jt);var Ft;var az=Nkb(myb,'SchedulerImpl',360);hI(646,1,{});_.hc=function bu(){return null};_.ic=function cu(){return null};_.jc=function du(){return null};_.kc=function eu(){return null};_.lc=function fu(){return null};var nz=Nkb(_yb,'JSONValue',646);hI(214,646,{214:1},ju,ku);_.t=function lu(a){if(!aw(a,214)){return false}return this.a==Wv(a,214).a};_.gc=function mu(){return qu};_.v=function nu(){return txb(this.a)};_.hc=function ou(){return this};_.w=function pu(){var a,b,c;c=new Bmb('[');for(b=0,a=this.a.length;b<a;b++){b>0&&(c.a+=',',c);xmb(c,gu(this,b))}c.a+=']';return c.a};var fz=Nkb(_yb,'JSONArray',214);hI(292,646,{},uu);_.gc=function vu(){return yu};_.ic=function wu(){return this};_.w=function xu(){return Bkb(this.a)};_.a=false;var ru,su;var gz=Nkb(_yb,'JSONBoolean',292);hI(371,72,Vxb,zu);var hz=Nkb(_yb,'JSONException',371);hI(435,646,{},Cu);_.gc=function Du(){return Fu};_.w=function Eu(){return Wxb};var Au;var iz=Nkb(_yb,'JSONNull',435);hI(104,646,{104:1},Gu);_.t=function Hu(a){if(!aw(a,104)){return false}return this.a==Wv(a,104).a};_.gc=function Iu(){return Mu};_.v=function Ju(){return hw(Ixb(this.a))};_.jc=function Ku(){return this};_.w=function Lu(){return this.a+''};_.a=0;var jz=Nkb(_yb,'JSONNumber',104);hI(69,646,{69:1},Tu,Uu);_.t=function Vu(a){if(!aw(a,69)){return false}return this.a==Wv(a,69).a};_.gc=function Wu(){return $u};_.v=function Xu(){return txb(this.a)};_.kc=function Yu(){return this};_.w=function Zu(){var a,b,c,d,e,f;f=new Bmb('{');a=true;e=Nu(this,xv($F,Txb,2,0,5,1));for(c=0,d=e.length;c<d;++c){b=e[c];a?(a=false):(f.a+=', ',f);ymb(f,st(b));f.a+=':';xmb(f,Pu(this,b))}f.a+='}';return f.a};var lz=Nkb(_yb,'JSONObject',69);hI(361,641,Eyb,_u);_.kb=function av(a){return ew(a)&&Ou(this.a,$v(a))};_.mb=function bv(){return new wnb(new opb(this.b))};_.Y=function cv(){return this.b.length};var kz=Nkb(_yb,'JSONObject/1',361);var dv;hI(97,646,{97:1},lv);_.t=function mv(a){if(!aw(a,97)){return false}return emb(this.a,Wv(a,97).a)};_.gc=function nv(){return rv};_.v=function ov(){return Pxb(this.a)};_.lc=function pv(){return this};_.w=function qv(){return st(this.a)};var mz=Nkb(_yb,'JSONString',97);var Ov,Pv,Qv;hI(186,1,{},sI,tI);_.b=false;_.c=0;_.d=-1;_.e=0;_.f=false;_.j=0;var oz=Nkb('de.cau.cs.kieler.core.alg','BasicProgressMonitor',186);hI(10,1,{10:1,286:1,3:1,5:1},FI,GI,HI,II);_.t=function JI(a){return yI(this,a)};_.v=function KI(){return hw(Ixb(this.a))+Blb(hw(Ixb(this.b)))};_.w=function NI(){return '('+this.a+','+this.b+')'};_.a=0;_.b=0;var qz=Nkb(izb,'KVector',10);hI(58,648,{3:1,5:1,22:1,19:1,58:1,20:1},aJ);_.ib=function bJ(a){return QI(this,a)};_.Q=function cJ(){_I(this)};_.ub=function dJ(a){return WI(this,a)};_.Y=function eJ(){return this.b};_.b=0;var rH=Nkb(Cyb,'LinkedList',58);hI(44,58,{44:1,286:1,3:1,5:1,22:1,19:1,58:1,20:1},jJ,kJ);_.w=function mJ(){var a,b,c;a=new Bmb('(');b=WI(this,0);while(b.b!=b.d.c){c=Wv(_ub(b),10);ymb(a,c.a+','+c.b);b.b!=b.d.c&&(a.a+='; ',a)}return a.a+=')',a.a};var pz=Nkb(izb,'KVectorChain',44);var rz=Pkb(kzb,'IProperty');hI(131,1,{179:1,131:1,3:1},tJ);var sz=Nkb(kzb,'MapPropertyHolder',131);hI(14,1,lzb,AJ,BJ,CJ,DJ,EJ,FJ);_.F=function GJ(a){return xJ(this,Wv(a,79))};_.t=function HJ(a){return yJ(this,a)};_.mc=function IJ(){return this.b};_.nc=function JJ(){return this.c};_.oc=function KJ(){return this.d};_.v=function LJ(){return Pxb(this.b)};_.w=function MJ(){return this.b};var uJ,vJ;var vz=Nkb(kzb,'Property',14);hI(366,1,{23:1},NJ);_.F=function OJ(a){return -1};var tz=Nkb(kzb,'Property/1',366);hI(367,1,{23:1},PJ);_.F=function QJ(a){return 1};var uz=Nkb(kzb,'Property/2',367);hI(27,1,{27:1,22:1},RJ);_.t=function SJ(a){var b,c,d;if(aw(a,27)){c=Wv(a,27);b=this.a==null?c.a==null:rb(this.a,c.a);d=this.b==null?c.b==null:rb(this.b,c.b);return b&&d}else{return false}};_.v=function TJ(){var a,b,c,d,e,f;c=this.a==null?0:vb(this.a);a=c&byb;b=c&-65536;f=this.b==null?0:vb(this.b);d=f&byb;e=f&-65536;return a^e>>16&byb|b^d<<16};_.mb=function UJ(){return new WJ(this)};_.w=function VJ(){return this.a==null&&this.b==null?'pair(null,null)':this.a==null?'pair(null,'+xb(this.b)+')':this.b==null?'pair('+xb(this.a)+',null)':'pair('+xb(this.a)+','+xb(this.b)+')'};var xz=Nkb(mzb,'Pair',27);hI(431,1,Ayb,WJ);_.G=function XJ(){return !this.c&&(!this.b&&this.a.a!=null||this.a.b!=null)};_.H=function YJ(){if(!this.c&&!this.b&&this.a.a!=null){this.b=true;return this.a.a}else if(!this.c&&this.a.b!=null){this.c=true;return this.a.b}throw new nvb};_.I=function ZJ(){this.c&&this.a.b!=null?(this.a.b=null):this.b&&this.a.a!=null&&(this.a.a=null);throw new tlb};_.b=false;_.c=false;var wz=Nkb(mzb,'Pair/1',431);hI(228,72,Vxb,$J);var yz=Nkb(nzb,'UnsupportedConfigurationException',228);hI(99,72,Vxb,_J);var zz=Nkb(nzb,'UnsupportedGraphException',99);var aK;hI(103,17,{103:1,3:1,23:1,17:1},jK);var cK,dK,eK,fK,gK,hK;var Az=Okb(rzb,'Alignment',103,IF,kK);var lK;hI(59,17,{59:1,3:1,23:1,17:1},wK);var nK,oK,pK,qK,rK;var Bz=Okb(rzb,'Direction',59,IF,xK);var yK;hI(107,17,{107:1,3:1,23:1,17:1},FK);var AK,BK,CK,DK;var Cz=Okb(rzb,'EdgeLabelPlacement',107,IF,GK);var HK;hI(122,17,{122:1,3:1,23:1,17:1},OK);var JK,KK,LK,MK;var Dz=Okb(rzb,'EdgeRouting',122,IF,PK);var QK;hI(133,17,{133:1,3:1,23:1,17:1},ZK);var SK,TK,UK,VK,WK,XK;var Ez=Okb(rzb,'EdgeType',133,IF,$K);var _K;hI(166,17,{166:1,3:1,23:1,17:1},fL);var bL,cL,dL;var Fz=Okb(rzb,'HierarchyHandling',166,IF,gL);var hL;var jL,kL,lL,mL,nL,oL,pL,qL,rL,sL,tL,uL,vL,wL,xL,yL,zL,AL,BL,CL,DL,EL,FL,GL,HL,IL,JL,KL,LL,ML,NL,OL,PL,QL,RL,SL,TL,UL,VL,WL,XL,YL,ZL,$L,_L,aM,bM,cM,dM;hI(41,17,{41:1,3:1,23:1,17:1},pM);var fM,gM,hM,iM,jM,kM,lM,mM,nM;var Gz=Okb(rzb,'NodeLabelPlacement',41,IF,qM);var rM;hI(100,17,{100:1,3:1,23:1,17:1},AM);var uM,vM,wM,xM,yM;var Hz=Okb(rzb,'PortAlignment',100,IF,BM);var CM;hI(28,17,{28:1,3:1,23:1,17:1},NM);var EM,FM,GM,HM,IM,JM;var Iz=Okb(rzb,'PortConstraints',28,IF,OM);var PM;hI(149,17,{149:1,3:1,23:1,17:1},VM);var RM,SM,TM;var Jz=Okb(rzb,'PortLabelPlacement',149,IF,WM);var XM;hI(32,17,{32:1,3:1,23:1,17:1},uN);var ZM,$M,_M,aN,bN,cN,dN,eN,fN,gN,hN,iN,jN,kN,lN,mN,nN,oN,pN,qN,rN;var Kz=Okb(rzb,'PortSide',32,IF,wN);var xN;hI(150,17,{150:1,3:1,23:1,17:1},EN);var zN,AN,BN,CN;var Lz=Okb(rzb,'SizeConstraint',150,IF,FN);var GN;hI(139,17,{139:1,3:1,23:1,17:1},NN);var IN,JN,KN,LN;var Mz=Okb(rzb,'SizeOptions',139,IF,ON);var PN;hI(62,1,{62:1},UN,VN);_.t=function WN(a){var b;if(a==null||!aw(a,62)){return false}b=Wv(a,62);return ovb(this.d,b.d)&&ovb(this.e,b.e)&&ovb(this.c,b.c)&&ovb(this.b,b.b)};_.v=function XN(){return fpb(Bv(tv(UF,1),syb,1,4,[this.d,this.e,this.c,this.b]))};_.w=function YN(){return 'Rect[x='+this.d+',y='+this.e+',w='+this.c+',h='+this.b+']'};_.b=0;_.c=0;_.d=0;_.e=0;var Tz=Nkb(wzb,'Rectangle',62);hI(283,62,{283:1,62:1},ZN);_.a=0;var Nz=Nkb(xzb,'LabelGroup',283);hI(67,17,{67:1,3:1,23:1,17:1},vO);var $N,_N,aO,bO,cO,dO,eO,fO,gO,hO,iO,jO,kO,lO,mO,nO,oO,pO,qO,rO,sO,tO;var Oz=Okb(xzb,'LabelLocation',67,IF,xO);hI(225,17,{225:1,3:1,23:1,17:1},EO);var AO,BO,CO;var Pz=Okb(xzb,'TextAlignment',225,IF,FO);var HO;hI(589,1,{},fP);_.a=0;_.b=false;_.d=0;_.f=0;_.k=0;_.r=0;_.s=0;var Qz=Nkb(wzb,'LabelAndNodeSizeProcessor/NodeData',589);hI(171,17,{171:1,3:1,23:1,17:1},lP);var gP,hP,iP,jP;var Rz=Okb(wzb,'LabelSide',171,IF,mP);hI(590,1,{},rP);_.b=true;_.c=true;_.d=true;_.e=true;var Sz=Nkb(wzb,zzb,590);hI(121,1,Bzb);_.t=function wP(a){var b;if(aw(a,121)){b=Wv(a,121);return this.d==b.d&&this.a==b.a&&this.b==b.b&&this.c==b.c}else{return false}};_.v=function xP(){var a,b;a=hw(Ixb(this.b))<<16;a|=hw(Ixb(this.a))&byb;b=hw(Ixb(this.c))<<16;b|=hw(Ixb(this.d))&byb;return a^b};_.w=function zP(){return '[top='+this.d+',left='+this.b+',bottom='+this.a+',right='+this.c+']'};_.a=0;_.b=0;_.c=0;_.d=0;var Wz=Nkb(wzb,'Spacing',121);hI(232,121,Bzb,AP,BP,CP);var Uz=Nkb(wzb,'Spacing/Insets',232);hI(65,121,{286:1,121:1,65:1,3:1,5:1},DP,EP,FP);var Vz=Nkb(wzb,'Spacing/Margins',65);hI(364,1,{},jQ);_.c=false;_.d=null;_.g=null;var OP,PP,QP;var Xz=Nkb(Ozb,'JsonGraphImporter',364);var kQ,lQ,mQ,nQ,oQ,pQ,qQ,rQ,sQ;hI(417,14,lzb,xQ);var Yz=Nkb(Ozb,'LayoutOptionResolver/DummyProperty',417);hI(348,1,{},CQ);var yQ;var Zz=Nkb(Ozb,'RecursiveLGraphLayout',348);hI(73,99,{73:1,3:1,54:1,46:1},EQ,FQ,GQ);var $z=Nkb(Ozb,'UnsupportedJsonGraphException',73);hI(380,1,{},OQ);var HQ,IQ;var _z=Nkb(Szb,'GraphConfigurator',380);hI(49,1,{},WQ);var aA=Nkb(Szb,'IntermediateProcessingConfiguration',49);hI(365,1,{},dR);var bA=Nkb(Szb,'KlayLayered',365);hI(577,1,{},kR);_.i=0;var eR;var eA=Nkb(Wzb,'ComponentsToCGraphTransformer',577);var UR;hI(578,1,{},lR);_.tc=function mR(a,b){return Qlb(a.wc(),b.wc())};_.uc=function nR(a,b){return Qlb(a.xc(),b.xc())};var cA=Nkb(Wzb,'ComponentsToCGraphTransformer/1',578);hI(25,1,{25:1});_.k=0;_.o=null;_.p=true;_.r=Vzb;var kA=Nkb(Xzb,'CNode',25);hI(198,25,{198:1,25:1},pR,qR);_.vc=function rR(){this.b.d=this.j.d;this.b.e=this.j.e};_.wc=function sR(){return this.a!=null?Ixb(this.a):this.c.i};_.xc=function tR(){return this.a!=null?Ixb(this.a):this.c.i};_.w=function uR(){return ''};var dA=Nkb(Wzb,'ComponentsToCGraphTransformer/CRectNode',198);hI(549,1,{},HR);var vR,wR;var hA=Nkb(Wzb,'OneDimensionalComponentsCompaction',549);hI(550,1,Tyb,IR);_.B=function JR(a){return xR(),xkb(),Wv(Wv(a,27).a,25).f.f!=0?wkb:vkb};var fA=Nkb(Wzb,'OneDimensionalComponentsCompaction/lambda$0$Type',550);hI(551,1,Tyb,KR);_.B=function LR(a){return xR(),xkb(),uS(Wv(Wv(a,27).a,25).n,Wv(Wv(a,27).b,59))||Wv(Wv(a,27).a,25).f.f!=0&&uS(Wv(Wv(a,27).a,25).n,Wv(Wv(a,27).b,59))?wkb:vkb};var gA=Nkb(Wzb,'OneDimensionalComponentsCompaction/lambda$1$Type',551);hI(324,1,{},NR);var iA=Nkb(Xzb,'CGraph',324);hI(78,1,{78:1},QR);_.b=0;_.c=0;_.d=0;_.f=0;_.i=true;_.j=Vzb;var jA=Nkb(Xzb,'CGroup',78);hI(470,1,{},WR);_.tc=function XR(a,b){return Nlb(a.wc(),b.wc())};_.uc=function YR(a,b){return Nlb(a.xc(),b.xc())};var lA=Nkb(Xzb,'ISpacingsHandler/1',470);hI(323,1,{},rS);_.e=false;var ZR,$R,_R;var nA=Nkb(Xzb,'OneDimensionalCompactor',323);hI(554,1,Tyb,sS);_.B=function tS(a){return aS(),xkb(),Wv(Wv(a,27).a,25).f.f!=0?wkb:vkb};var mA=Nkb(Xzb,'OneDimensionalCompactor/lambda$0$Type',554);hI(335,1,{},xS);_.a=false;_.b=false;_.c=false;_.d=false;var oA=Nkb(Xzb,'Quadruplet',335);hI(587,1,{},yS);_.Cc=function zS(a){var b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s;k=Uzb;for(d=new Tob(a.a.b);d.a<d.c.c.length;){b=Wv(Rob(d),25);k=Qlb(k,b.f.g.j.d+b.g.a)}q=new aJ;for(h=new Tob(a.a.a);h.a<h.c.c.length;){g=Wv(Rob(h),78);g.j=k;g.f==0&&(TI(q,g,q.c.b,q.c),true)}while(q.b!=0){g=Wv(q.b==0?null:(Bxb(q.b!=0),$I(q,q.a.a)),78);e=g.g.j.d;for(n=(p=(new Snb(g.a.a)).a.bb().mb(),new Ynb(p));n.a.G();){l=(f=Wv(n.a.H(),21),Wv(f.yb(),25));s=g.j+l.g.a;l.f.i||l.j.d<s?(l.r=s):(l.r=l.j.d)}e-=g.g.r;g.b+=e;a.d==(sK(),pK)||a.d==nK?(g.c+=e):(g.c-=e);for(m=(o=(new Snb(g.a.a)).a.bb().mb(),new Ynb(o));m.a.G();){l=(f=Wv(m.a.H(),21),Wv(f.yb(),25));for(j=l.i.mb();j.G();){i=Wv(j.H(),25);tK(a.d)?(r=a.g.tc(l,i)):(r=a.g.uc(l,i));i.f.j=Nlb(i.f.j,l.r+l.j.c+r-i.g.a);i.p||(i.f.j=Nlb(i.f.j,i.j.d-i.g.a));--i.f.f;i.f.f==0&&QI(q,i.f)}}}for(c=new Tob(a.a.b);c.a<c.c.c.length;){b=Wv(Rob(c),25);b.j.d=b.r}};var pA=Nkb(Zzb,'LongestPathCompaction',587);hI(588,1,{},AS);_.Dc=function BS(a){var b,c,d,e,f,g,h;for(c=new Tob(a.a.b);c.a<c.c.c.length;){b=Wv(Rob(c),25);b.i.Q()}for(e=new Tob(a.a.b);e.a<e.c.c.length;){d=Wv(Rob(e),25);for(g=new Tob(a.a.b);g.a<g.c.c.length;){f=Wv(Rob(g),25);if(d==f){continue}if(!!d.f&&d.f==f.f){continue}tK(a.d)?(h=a.g.uc(d,f)):(h=a.g.tc(d,f));d!=f.o&&(f.j.d>d.j.d||d.j.d==f.j.d&&d.j.c<f.j.c)&&SR(f.j.e+f.j.b+h,d.j.e)&&TR(f.j.e,d.j.e+d.j.b+h)&&d.i.ib(f)}}};var qA=Nkb(Zzb,'QuadraticConstraintCalculation',588);hI(317,1,{},FS);_.Dc=function GS(a){this.b=a;ES(this,new RS,new TS)};var xA=Nkb(Zzb,'ScanlineConstraintCalculator',317);var JA=Pkb($zb,'Scanline/EventHandler');hI(464,1,{160:1},KS);_.Ec=function LS(a){IS(this,Wv(a,235))};var sA=Nkb(Zzb,'ScanlineConstraintCalculator/ConstraintsScanlineHandler',464);hI(465,1,fyb,MS);_.$b=function NS(a,b){return glb((Wv(a,25).j.d+Wv(a,25).j.c)/2,(Wv(b,25).j.d+Wv(b,25).j.c)/2)};var rA=Nkb(Zzb,'ScanlineConstraintCalculator/ConstraintsScanlineHandler/lambda$0$Type',465);hI(235,1,{235:1},OS);_.a=false;var tA=Nkb(Zzb,'ScanlineConstraintCalculator/Timestamp',235);hI(466,1,fyb,PS);_.$b=function QS(a,b){return HS(a,b)};var uA=Nkb(Zzb,'ScanlineConstraintCalculator/lambda$0$Type',466);hI(467,1,_zb,RS);_.D=function SS(a){return true};var vA=Nkb(Zzb,'ScanlineConstraintCalculator/lambda$1$Type',467);hI(468,1,Tyb,TS);_.B=function US(a){return 0};var wA=Nkb(Zzb,'ScanlineConstraintCalculator/lambda$2$Type',468);hI(48,1,{48:1},VS,WS);_.t=function XS(a){var b;if(a==null){return false}if(zA!=tb(a)){return false}b=Wv(a,48);return ovb(this.c,b.c)&&ovb(this.d,b.d)};_.v=function YS(){return fpb(Bv(tv(UF,1),syb,1,4,[this.c,this.d]))};_.w=function ZS(){return '('+this.c+', '+this.d+(this.a?'cx':'')+this.b+')'};_.a=true;_.c=0;_.d=0;var zA=Nkb($zb,'Point',48);hI(201,17,{201:1,3:1,23:1,17:1},fT);var $S,_S,aT,bT;var yA=Okb($zb,'Point/Quadrant',201,IF,iT);hI(569,1,{},qT);_.b=null;_.c=null;_.d=null;_.e=null;_.f=null;var jT,kT,lT,mT,nT;var IA=Nkb($zb,'RectilinearConvexHull',569);hI(243,1,{160:1},xT);_.Ec=function yT(a){wT(this,Wv(a,48))};_.b=0;var uT;var BA=Nkb($zb,'RectilinearConvexHull/MaximalElementsEventHandler',243);hI(571,1,fyb,AT);_.$b=function BT(a,b){return zT(a,b)};var AA=Nkb($zb,'RectilinearConvexHull/MaximalElementsEventHandler/lambda$0$Type',571);hI(570,1,{160:1},DT);_.Ec=function ET(a){CT(this,Wv(a,48))};_.a=0;_.b=null;_.c=null;_.d=null;_.e=null;var CA=Nkb($zb,'RectilinearConvexHull/RectangleEventHandler',570);hI(572,1,fyb,FT);_.$b=function GT(a,b){return oT(),Wv(a,48).c==Wv(b,48).c?glb(Wv(b,48).d,Wv(a,48).d):glb(Wv(a,48).c,Wv(b,48).c)};var DA=Nkb($zb,'RectilinearConvexHull/lambda$0$Type',572);hI(573,1,fyb,HT);_.$b=function IT(a,b){return oT(),Wv(a,48).c==Wv(b,48).c?glb(Wv(a,48).d,Wv(b,48).d):glb(Wv(a,48).c,Wv(b,48).c)};var EA=Nkb($zb,'RectilinearConvexHull/lambda$1$Type',573);hI(574,1,fyb,JT);_.$b=function KT(a,b){return oT(),Wv(a,48).c==Wv(b,48).c?glb(Wv(b,48).d,Wv(a,48).d):glb(Wv(b,48).c,Wv(a,48).c)};var FA=Nkb($zb,'RectilinearConvexHull/lambda$2$Type',574);hI(575,1,fyb,LT);_.$b=function MT(a,b){return oT(),Wv(a,48).c==Wv(b,48).c?glb(Wv(a,48).d,Wv(b,48).d):glb(Wv(b,48).c,Wv(a,48).c)};var GA=Nkb($zb,'RectilinearConvexHull/lambda$3$Type',575);hI(576,1,fyb,NT);_.$b=function OT(a,b){return sT(a,b)};var HA=Nkb($zb,'RectilinearConvexHull/lambda$4$Type',576);hI(469,1,{},QT);var KA=Nkb($zb,'Scanline',469);hI(662,1,{});var LA=Nkb(aAb,'AbstractGraphPlacer',662);hI(222,1,{222:1},_T);var WT;var NA=Nkb(aAb,'ComponentGroup',222);hI(434,662,{},fU);_.Fc=function gU(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o;this.a.c=xv(UF,syb,1,0,4,1);b.b.c=xv(UF,syb,1,0,4,1);if(a.V()){b.e.a=0;b.e.b=0;return}f=Wv(a.sb(0),55);qJ(b,f);for(e=a.mb();e.G();){d=Wv(e.H(),55);aU(this,d)}n=new FI;o=2*Wv(rJ(f,(Rib(),Jib)),15).a;for(i=new Tob(this.a);i.a<i.c.c.length;){g=Wv(Rob(i),222);j=bU(g,o);VT(Jd(g.a),n.a,n.b);n.a+=j.a;n.b+=j.b}b.e.a=n.a-o;b.e.b=n.b-o;if(Ckb(Ixb(Xv(rJ(f,(Mjb(),ijb)))))&&gw(rJ(f,(eM(),uL)))===gw((NK(),JK))){for(m=a.mb();m.G();){k=Wv(m.H(),55);UT(k,k.d.a,k.d.b)}c=new sU;iU(c,a,o);for(l=a.mb();l.G();){k=Wv(l.H(),55);vI(BI(k.d),c.e)}vI(BI(b.e),c.a)}for(h=new Tob(this.a);h.a<h.c.c.length;){g=Wv(Rob(h),222);TT(b,Jd(g.a))}};var MA=Nkb(aAb,'ComponentGroupGraphPlacer',434);hI(322,1,{},sU);var VA=Nkb(aAb,'ComponentsCompactor',322);hI(13,647,bAb,GU,HU,IU);_.rb=function JU(a,b){uU(this,a,b)};_.ib=function KU(a){return vU(this,a)};_.jb=function LU(a){return xU(this,a)};_.Q=function MU(){this.c=xv(UF,syb,1,0,4,1)};_.kb=function NU(a){return zU(this,a,0)!=-1};_.sb=function OU(a){return yU(this,a)};_.V=function PU(){return this.c.length==0};_.mb=function QU(){return new Tob(this)};_.vb=function RU(a){return AU(this,a)};_.nb=function SU(a){return BU(this,a)};_.Xb=function TU(a,b){CU(this,a,b)};_.wb=function UU(a,b){return DU(this,a,b)};_.Y=function VU(){return this.c.length};_.ob=function WU(){return EU(this)};_.pb=function XU(a){return FU(this,a)};var BG=Nkb(Cyb,'ArrayList',13);hI(532,13,bAb,$U);_.ib=function _U(a){return ZU(this,Wv(a,48))};var OA=Nkb(aAb,'ComponentsCompactor/Hullpoints',532);hI(529,1,{347:1},bV);_.a=false;var PA=Nkb(aAb,'ComponentsCompactor/InternalComponent',529);hI(528,1,Oyb,cV);_.mb=function dV(){return new Tob(this.a)};var QA=Nkb(aAb,'ComponentsCompactor/InternalConnectedComponents',528);hI(531,1,{251:1},eV);_.zc=function gV(){return null};_.Ac=function hV(){return this.a};_.yc=function fV(){return oU(this.d)};_.Bc=function iV(){return this.b};var RA=Nkb(aAb,'ComponentsCompactor/InternalExternalExtension',531);hI(530,1,{251:1},jV);_.Ac=function mV(){return this.a};_.yc=function kV(){return oU(this.d)};_.zc=function lV(){return this.c};_.Bc=function nV(){return this.b};var SA=Nkb(aAb,'ComponentsCompactor/InternalUnionExternalExtension',530);hI(534,1,{},oV);var TA=Nkb(aAb,'ComponentsCompactor/OuterSegments',534);hI(533,1,{},pV);var UA=Nkb(aAb,'ComponentsCompactor/Segments',533);hI(381,1,{},tV);var WA=Nkb(aAb,'ComponentsProcessor',381);hI(432,662,{},uV);_.Fc=function vV(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,A;if(a.Y()==1){t=Wv(a.sb(0),55);if(t!=b){b.b.c=xv(UF,syb,1,0,4,1);ST(b,t,0,0);qJ(b,t);YW(b.a,t.a);b.e.a=t.e.a;b.e.b=t.e.b}return}else if(a.V()){b.b.c=xv(UF,syb,1,0,4,1);b.e.a=0;b.e.b=0;return}for(h=a.mb();h.G();){f=Wv(h.H(),55);q=0;for(o=new Tob(f.b);o.a<o.c.c.length;){n=Wv(Rob(o),9);q+=Wv(rJ(n,(Rib(),Eib)),24).a}f.k=q}Gpb(a,new xV);e=Wv(a.sb(0),55);b.b.c=xv(UF,syb,1,0,4,1);qJ(b,e);m=0;v=0;for(i=a.mb();i.G();){f=Wv(i.H(),55);s=f.e;m=Nlb(m,s.a);v+=s.a*s.b}m=Nlb(m,Math.sqrt(v)*Wv(rJ(b,(Rib(),Rhb)),15).a);u=cAb*Wv(rJ(b,Jib),15).a;w=0;A=0;l=0;c=u;for(g=a.mb();g.G();){f=Wv(g.H(),55);s=f.e;if(w+s.a>m){w=0;A+=l+u;l=0}p=f.d;UT(f,w+p.a,A+p.b);p.a=0;p.b=0;c=Nlb(c,w+s.a);l=Nlb(l,s.b);w+=s.a+u}b.e.a=c;b.e.b=A+l;r=Wv(rJ(b,Jib),15).a;if(Ckb(Ixb(Xv(rJ(e,(Mjb(),ijb)))))){d=new sU;iU(d,a,r);for(k=a.mb();k.G();){j=Wv(k.H(),55);vI(BI(j.d),d.e)}vI(BI(b.e),d.a)}TT(b,a)};var YA=Nkb(aAb,'SimpleRowGraphPlacer',432);hI(433,1,fyb,xV);_.$b=function yV(a,b){return wV(Wv(a,55),Wv(b,55))};var XA=Nkb(aAb,'SimpleRowGraphPlacer/1',433);hI(369,1,eAb,CV);_.sc=function DV(a,b){BV(a,b)};var zV;var $A=Nkb(fAb,'CompoundGraphPostprocessor',369);hI(370,1,_zb,EV);_.D=function FV(a){var b;return b=Wv(rJ(Wv(a,114).b,(eM(),CL)),44),!!b&&b.b!=0};var ZA=Nkb(fAb,'CompoundGraphPostprocessor/1',370);hI(368,1,eAb,SV);_.sc=function TV(a,b){NV(this,a,b)};var aB=Nkb(fAb,'CompoundGraphPreprocessor',368);hI(187,1,{187:1},UV);_.c=false;var _A=Nkb(fAb,'CompoundGraphPreprocessor/ExternalPort',187);hI(114,1,{114:1},XV);_.w=function YV(){return zc(this.c)+':'+gW(this.b)};var cB=Nkb(fAb,'CrossHierarchyEdge',114);hI(310,1,fyb,$V);_.$b=function _V(a,b){return ZV(this,Wv(a,114),Wv(b,114))};var bB=Nkb(fAb,'CrossHierarchyEdgeComparator',310);hI(147,131,{179:1,131:1,147:1,3:1});_.k=0;var lB=Nkb(hAb,'LGraphElement',147);hI(12,147,{179:1,131:1,12:1,147:1,3:1},hW);_.w=function iW(){return gW(this)};var dB=Nkb(hAb,'LEdge',12);hI(55,147,{179:1,131:1,55:1,147:1,3:1,22:1},kW);_.mb=function lW(){return new Tob(this.c)};_.w=function mW(){if(this.c.c.length==0){return 'G-unlayered'+Ze(this.b)}else if(this.b.c.length==0){return 'G-layered'+Ze(this.c)}return 'G[layerless'+Ze(this.b)+', layers'+Ze(this.c)+']'};var mB=Nkb(hAb,'LGraph',55);hI(273,1,{});_.pc=function rW(){return this.e.j};var eB=Nkb(hAb,'LGraphAdapters/AbstractLShapeAdapter',273);hI(240,1,{627:1},tW);_.b=null;var fB=Nkb(hAb,'LGraphAdapters/LEdgeAdapter',240);hI(325,1,{},wW);_.pc=function xW(){return this.a.e};_.b=null;_.c=false;var gB=Nkb(hAb,'LGraphAdapters/LGraphAdapter',325);hI(224,273,{129:1,224:1},yW);var hB=Nkb(hAb,'LGraphAdapters/LLabelAdapter',224);hI(555,273,{626:1},BW);_.a=null;_.b=null;_.c=false;var iB=Nkb(hAb,'LGraphAdapters/LNodeAdapter',555);hI(556,273,{161:1},FW);_.a=null;_.b=null;_.c=null;_.d=false;var jB=Nkb(hAb,'LGraphAdapters/LPortAdapter',556);hI(557,1,fyb,HW);_.$b=function IW(a,b){return GW(Wv(a,7),Wv(b,7))};var kB=Nkb(hAb,'LGraphAdapters/PortComparator',557);hI(168,1,{168:1},ZW,$W);_.t=function _W(a){var b;if(aw(a,168)){b=Wv(a,168);return this.d==b.d&&this.a==b.a&&this.b==b.b&&this.c==b.c}else{return false}};_.v=function aX(){var a,b;a=hw(Ixb(this.b))<<16;a|=hw(Ixb(this.a))&byb;b=hw(Ixb(this.c))<<16;b|=hw(Ixb(this.d))&byb;return a^b};_.w=function bX(){return 'Insets[top='+this.d+',left='+this.b+',bottom='+this.a+',right='+this.c+']'};_.a=0;_.b=0;_.c=0;_.d=0;var nB=Nkb(hAb,'LInsets',168);hI(165,147,{179:1,131:1,147:1,165:1,3:1});var CB=Nkb(hAb,'LShape',165);hI(33,165,{179:1,131:1,147:1,33:1,165:1,3:1},dX);_.w=function eX(){return this.a==null?'l_'+this.k:'l_'+this.a};var oB=Nkb(hAb,'LLabel',33);hI(9,165,{179:1,131:1,147:1,9:1,165:1,3:1},uX);_.w=function vX(){return tX(this)};var qB=Nkb(hAb,'LNode',9);hI(132,17,{132:1,3:1,23:1,17:1},DX);var wX,xX,yX,zX,AX,BX;var pB=Okb(hAb,'LNode/NodeType',132,IF,EX);hI(7,165,{179:1,131:1,147:1,7:1,165:1,3:1},RX);_.w=function SX(){var a;return a=OX(this),a==null?'p_'+this.k:'p_'+a};var FX,GX,HX,IX,JX,KX;var BB=Nkb(hAb,'LPort',7);hI(399,1,_zb,UX);_.D=function VX(a){return TX(a)};var rB=Nkb(hAb,'LPort/1',399);hI(400,1,_zb,XX);_.D=function YX(a){return WX(a)};var sB=Nkb(hAb,'LPort/2',400);hI(401,1,_zb,ZX);_.D=function $X(a){return Wv(a,7).g==(sN(),$M)};var tB=Nkb(hAb,'LPort/3',401);hI(402,1,_zb,_X);_.D=function aY(a){return Wv(a,7).g==(sN(),ZM)};var uB=Nkb(hAb,'LPort/4',402);hI(403,1,_zb,bY);_.D=function cY(a){return Wv(a,7).g==(sN(),pN)};var vB=Nkb(hAb,'LPort/5',403);hI(404,1,_zb,dY);_.D=function eY(a){return Wv(a,7).g==(sN(),rN)};var wB=Nkb(hAb,'LPort/6',404);hI(190,1,Oyb,fY);_.mb=function gY(){var a;a=new Tob(this.a.b);return new hY(a)};var yB=Nkb(hAb,'LPort/7',190);hI(405,1,Ayb,hY);_.H=function jY(){return Wv(Rob(this.a),12).c};_.G=function iY(){return Qob(this.a)};_.I=function kY(){Sob(this.a)};var xB=Nkb(hAb,'LPort/7/1',405);hI(169,1,Oyb,lY);_.mb=function mY(){var a;return a=new Tob(this.a.e),new nY(a)};var AB=Nkb(hAb,'LPort/8',169);hI(304,1,Ayb,nY);_.H=function pY(){return Wv(Rob(this.a),12).d};_.G=function oY(){return Qob(this.a)};_.I=function qY(){Sob(this.a)};var zB=Nkb(hAb,'LPort/8/1',304);hI(16,147,{179:1,131:1,147:1,16:1,3:1,22:1},sY);_.mb=function tY(){return new Tob(this.a)};_.w=function uY(){return 'L_'+zU(this.b.c,this,0)+Ze(this.a)};var DB=Nkb(hAb,'Layer',16);hI(437,1,eAb,wY);_.sc=function xY(a,b){var c,d,e,f,g,h,i;nI(b,'Big nodes intermediate-processing',1);this.a=a;for(f=new Tob(this.a.c);f.a<f.c.c.length;){e=Wv(Rob(f),16);i=Eo(e.a);c=pl(i,new zY);for(h=Pl(c.b.mb(),c.a);od(h);){g=Wv(pd(h),9);if(gw(rJ(g,(Mjb(),vjb)))===gw((Xib(),Uib))||gw(rJ(g,vjb))===gw(Vib)){d=vY(this,g,false);sJ(d,vjb,Wv(rJ(g,vjb),85));sJ(g,vjb,Wib)}else{vY(this,g,true)}}}pI(b)};var FB=Nkb(jAb,'BigNodesIntermediateProcessor',437);hI(438,1,_zb,zY);_.D=function AY(a){return yY(Wv(a,9))};var EB=Nkb(jAb,'BigNodesIntermediateProcessor/1',438);hI(582,1,Tyb,CY);_.B=function DY(a){var b;return BY((b=this,iw(a),b))};var GB=Nkb(jAb,'BigNodesLabelHandler/CompoundFunction',582);hI(332,1,{},HY);_.a=0;_.e=null;_.f=0;var KB=Nkb(jAb,'BigNodesLabelHandler/Handler',332);hI(583,1,Tyb,JY);_.B=function KY(a){var b;return IY((b=this,iw(a),b))};var HB=Nkb(jAb,'BigNodesLabelHandler/Handler/1',583);hI(584,1,Tyb,MY);_.B=function NY(a){var b;return LY((b=this,iw(a),b))};var IB=Nkb(jAb,'BigNodesLabelHandler/Handler/2',584);hI(585,1,Tyb,PY);_.B=function QY(a){var b;return OY((b=this,iw(a),b))};var JB=Nkb(jAb,'BigNodesLabelHandler/Handler/3',585);hI(439,1,eAb,SY);_.sc=function TY(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o,p;nI(b,'Big nodes post-processing',1);this.a=a;for(h=new Tob(this.a.c);h.a<h.c.c.length;){g=Wv(Rob(h),16);c=pl(g.a,new VY);for(j=Pl(c.b.mb(),c.a);od(j);){i=Wv(pd(j),9);l=Wv(rJ(i,(Rib(),Whb)),15);f=RY(this,i);p=new GU;for(o=nX(f,(sN(),ZM)).mb();o.G();){m=Wv(o.H(),7);p.c[p.c.length]=m;k=m.i.a-f.j.a;m.i.a=l.a+k}i.j.a=l.a;for(n=new Tob(p);n.a<n.c.c.length;){m=Wv(Rob(n),7);PX(m,i)}this.a.e.a<i.i.a+i.j.a&&(this.a.e.a=i.i.a+i.j.a);e=Wv(rJ(i,Thb),20);xU(i.c,e);d=Wv(rJ(i,Uhb),64);!!d&&d.B(null)}}pI(b)};var MB=Nkb(jAb,'BigNodesPostProcessor',439);hI(440,1,_zb,VY);_.D=function WY(a){return UY(Wv(a,9))};var LB=Nkb(jAb,'BigNodesPostProcessor/1',440);hI(441,1,eAb,YY);_.sc=function ZY(a,b){var c,d,e,f,g,h,i,j,k,l,m,n;nI(b,kAb,1);this.c=a;l=this.c.b;e=0;for(i=new Tob(l);i.a<i.c.c.length;){g=Wv(Rob(i),9);g.k=e++}this.d=Wv(rJ(this.c,(Rib(),Jib)),15).a;this.a=Wv(rJ(this.c,(eM(),sL)),59);this.b=l.c.length;f=lAb;for(j=new Tob(l);j.a<j.c.c.length;){g=Wv(Rob(j),9);g.g==(CX(),AX)&&g.j.a<f&&(f=g.j.a)}f=50>f?50:f;c=new GU;n=f+this.d;for(k=new Tob(l);k.a<k.c.c.length;){g=Wv(Rob(k),9);if(g.g==(CX(),AX)&&g.j.a>n){m=1;d=g.j.a;while(d>f){++m;d=(g.j.a-(m-1)*this.d)/m}vU(c,new _Y(this,g,m,d))}}for(h=new Tob(c);h.a<h.c.c.length;){g=Wv(Rob(h),267);XY(g.d)&&$Y(g)}pI(b)};_.b=0;_.d=0;var OB=Nkb(jAb,'BigNodesPreProcessor',441);hI(267,1,{267:1},_Y);_.a=0;_.c=0;var NB=Nkb(jAb,'BigNodesPreProcessor/BigNode',267);hI(442,1,eAb,cZ);_.sc=function dZ(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o,p;nI(b,kAb,1);aZ=Ckb(Ixb(Xv(rJ(a,(eM(),rL)))));this.c=a;n=new GU;for(g=new Tob(a.c);g.a<g.c.c.length;){f=Wv(Rob(g),16);xU(n,f.a)}e=0;for(k=new Tob(n);k.a<k.c.c.length;){i=Wv(Rob(k),9);i.k=e++}this.d=Wv(rJ(this.c,(Rib(),Jib)),15).a;this.a=Wv(rJ(this.c,sL),59);this.b=n.c.length;h=lAb;for(l=new Tob(n);l.a<l.c.c.length;){i=Wv(Rob(l),9);i.g==(CX(),AX)&&i.j.a<h&&(h=i.j.a)}h=50>h?50:h;c=new GU;p=h+this.d;for(m=new Tob(n);m.a<m.c.c.length;){i=Wv(Rob(m),9);if(i.g==(CX(),AX)&&i.j.a>p){o=1;d=i.j.a;while(d>h){++o;d=(i.j.a-(o-1)*this.d)/o}vU(c,new nZ(this,i,o))}}for(j=new Tob(c);j.a<j.c.c.length;){i=Wv(Rob(j),268);bZ(i)&&gZ(i)}pI(b)};_.b=0;_.d=0;var aZ=false;var QB=Nkb(jAb,'BigNodesSplitter',442);hI(268,1,{268:1},nZ);_.a=0;_.e=4;var PB=Nkb(jAb,'BigNodesSplitter/BigNode',268);hI(443,1,eAb,qZ);_.sc=function rZ(a,b){var c,d,e,f,g,h,i,j;nI(b,'Comment post-processing',1);i=Wv(rJ(a,(Rib(),Jib)),15).a;for(f=new Tob(a.c);f.a<f.c.c.length;){e=Wv(Rob(f),16);d=new GU;for(h=new Tob(e.a);h.a<h.c.c.length;){g=Wv(Rob(h),9);j=Wv(rJ(g,Qib),20);c=Wv(rJ(g,Yhb),20);if(!!j||!!c){pZ(g,j,c,i);!!j&&xU(d,j);!!c&&xU(d,c)}}xU(e.a,d)}pI(b)};var RB=Nkb(jAb,'CommentPostprocessor',443);hI(444,1,eAb,tZ);_.sc=function uZ(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o,p,q;nI(b,'Comment pre-processing',1);h=new Tob(a.b);while(h.a<h.c.c.length){g=Wv(Rob(h),9);if(Ckb(Ixb(Xv(rJ(g,(eM(),qL)))))){d=0;c=null;i=null;for(n=new Tob(g.f);n.a<n.c.c.length;){l=Wv(Rob(n),7);d+=l.b.c.length+l.e.c.length;if(l.b.c.length==1){c=Wv(yU(l.b,0),12);i=c.c}if(l.e.c.length==1){c=Wv(yU(l.e,0),12);i=c.d}}if(d==1&&i.b.c.length+i.e.c.length==1&&!Ckb(Ixb(Xv(rJ(i.f,qL))))){sZ(g,c,i,i.f);Sob(h)}else{q=new GU;for(m=new Tob(g.f);m.a<m.c.c.length;){l=Wv(Rob(m),7);for(k=new Tob(l.e);k.a<k.c.c.length;){j=Wv(Rob(k),12);j.d.e.c.length==0||(q.c[q.c.length]=j,true)}for(f=new Tob(l.b);f.a<f.c.c.length;){e=Wv(Rob(f),12);e.c.b.c.length==0||(q.c[q.c.length]=e,true)}}for(p=new Tob(q);p.a<p.c.c.length;){o=Wv(Rob(p),12);cW(o,true)}}}}pI(b)};var SB=Nkb(jAb,'CommentPreprocessor',444);hI(445,1,eAb,wZ);_.sc=function xZ(a,b){var c,d,e,f,g,h,i,j,k,l;nI(b,'Edge and layer constraint edge reversal',1);for(j=new Tob(a.b);j.a<j.c.c.length;){i=Wv(Rob(j),9);g=Wv(rJ(i,(Mjb(),vjb)),85);f=null;switch(g.e){case 1:case 2:f=(Hgb(),Ggb);break;case 3:case 4:f=(Hgb(),Egb);}if(f){sJ(i,(Rib(),dib),(Hgb(),Ggb));f==Egb?vZ(i,g,(djb(),bjb)):f==Ggb&&vZ(i,g,(djb(),ajb))}else{if(MM(Wv(rJ(i,(eM(),TL)),28))&&i.f.c.length!=0){c=true;for(l=new Tob(i.f);l.a<l.c.c.length;){k=Wv(Rob(l),7);if(!(k.g==(sN(),ZM)&&k.b.c.length-k.e.c.length>0||k.g==rN&&k.b.c.length-k.e.c.length<0)){c=false;break}if(k.g==rN){for(e=new Tob(k.e);e.a<e.c.c.length;){d=Wv(Rob(e),12);h=Wv(rJ(d.d.f,vjb),85);if(h==(Xib(),Uib)||h==Vib){c=false;break}}}if(k.g==ZM){for(e=new Tob(k.b);e.a<e.c.c.length;){d=Wv(Rob(e),12);h=Wv(rJ(d.c.f,vjb),85);if(h==(Xib(),Sib)||h==Tib){c=false;break}}}}c&&vZ(i,g,(djb(),cjb))}}}pI(b)};var TB=Nkb(jAb,'EdgeAndLayerConstraintEdgeReverser',445);hI(446,1,eAb,AZ);_.sc=function BZ(a,b){var c,d,e,f,g,h,i,j,k,l;nI(b,'End label placement',1);g=Wv(rJ(a,(eM(),DL)),15).a;this.a=(mp(),new ntb);this.c=new ntb;this.b=new ntb;for(i=new Tob(a.c);i.a<i.c.c.length;){h=Wv(Rob(i),16);for(k=new Tob(h.a);k.a<k.c.c.length;){j=Wv(Rob(k),9);for(d=Uh(mX(j));Cm(d);){c=Wv(Dm(d),12);for(f=new Tob(c.b);f.a<f.c.c.length;){e=Wv(Rob(f),33);(gw(rJ(e,tL))===gw((EK(),CK))||gw(rJ(e,tL))===gw(BK))&&(l=null,gw(rJ(e,tL))===gw(CK)?(l=c.c):gw(rJ(e,tL))===gw(BK)&&(l=c.d),Qmb(this.a,l.f)||Umb(this.a,l.f,0),Qmb(this.c,l.f)||Umb(this.c,l.f,0),Qmb(this.b,l)||Umb(this.b,l,0),gw(rJ(e,(Rib(),pib)))===gw((kP(),gP))?zZ(e,l,g):yZ(e,l,g),undefined)}}}}pI(b)};var UB=Nkb(jAb,'EndLabelProcessor',446);hI(269,1,eAb,SZ);_.sc=function TZ(a,b){var c,d,e,f,g;nI(b,'Graph transformation ('+this.a+')',1);e=Ao(a.b);for(d=new Tob(a.c);d.a<d.c.c.length;){c=Wv(Rob(d),16);xU(e,c.a)}switch(this.a.e){case 0:JZ(e,a);break;case 1:NZ(e);g=Wv(rJ(a,(Mjb(),ojb)),115);!!g&&sJ(a,ojb,Qgb(g));MZ(a.d);MZ(a.e);break;case 2:JZ(e,a);LZ(e,a);NZ(e);f=Wv(rJ(a,(Mjb(),ojb)),115);!!f&&sJ(a,ojb,Qgb(f));MZ(a.d);MZ(a.e);}pI(b)};var WB=Nkb(jAb,'GraphTransformer',269);hI(221,17,{221:1,3:1,23:1,17:1},YZ);var UZ,VZ,WZ;var VB=Okb(jAb,'GraphTransformer/Mode',221,IF,ZZ);hI(448,1,eAb,d$);_.sc=function e$(a,b){nI(b,'Hierarchical port constraint processing',1);a$(a);c$(a);pI(b)};var YB=Nkb(jAb,'HierarchicalPortConstraintProcessor',448);hI(449,1,fyb,g$);_.$b=function h$(a,b){return f$(Wv(a,9),Wv(b,9))};var XB=Nkb(jAb,'HierarchicalPortConstraintProcessor/NodeComparator',449);hI(450,1,eAb,j$);_.sc=function k$(a,b){var c,d,e,f,g,h,i,j,k,l;nI(b,'Hierarchical port dummy size processing',1);i=new GU;l=new GU;h=Wv(rJ(a,(Rib(),Jib)),15).a;k=h*Wv(rJ(a,(Mjb(),qjb)),15).a;c=k*2;for(e=new Tob(a.c);e.a<e.c.c.length;){d=Wv(Rob(e),16);i.c=xv(UF,syb,1,0,4,1);l.c=xv(UF,syb,1,0,4,1);for(g=new Tob(d.a);g.a<g.c.c.length;){f=Wv(Rob(g),9);if(f.g==(CX(),xX)){j=Wv(rJ(f,hib),32);j==(sN(),$M)?(i.c[i.c.length]=f,true):j==pN&&(l.c[l.c.length]=f,true)}}i$(i,true,c);i$(l,false,c)}pI(b)};var ZB=Nkb(jAb,'HierarchicalPortDummySizeProcessor',450);hI(451,1,eAb,w$);_.sc=function x$(a,b){var c,d,e,f;nI(b,'Orthogonally routing hierarchical port edges',1);this.a=0;c=s$(a);v$(a,c);u$(this,a,c);q$(a);d=Wv(rJ(a,(eM(),TL)),28);e=a.c;p$((Cxb(0,e.c.length),Wv(e.c[0],16)),d,a);p$(Wv(yU(e,e.c.length-1),16),d,a);f=a.c;n$((Cxb(0,f.c.length),Wv(f.c[0],16)));n$(Wv(yU(f,f.c.length-1),16));pI(b)};_.a=0;var aC=Nkb(jAb,'HierarchicalPortOrthogonalEdgeRouter',451);hI(452,1,fyb,z$);_.$b=function A$(a,b){return y$(Wv(a,9),Wv(b,9))};var $B=Nkb(jAb,'HierarchicalPortOrthogonalEdgeRouter/1',452);hI(453,1,fyb,C$);_.$b=function D$(a,b){return B$(Wv(a,9),Wv(b,9))};var _B=Nkb(jAb,'HierarchicalPortOrthogonalEdgeRouter/2',453);hI(454,1,eAb,F$);_.sc=function G$(a,b){var c;nI(b,'Hierarchical port position processing',1);c=a.c;c.c.length>0&&E$((Cxb(0,c.c.length),Wv(c.c[0],16)),a);c.c.length>1&&E$(Wv(yU(c,c.c.length-1),16),a);pI(b)};var bC=Nkb(jAb,'HierarchicalPortPositionProcessor',454);hI(471,1,eAb,I$);_.sc=function J$(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o,p;nI(b,'Hyperedge merging',1);n=new Fnb(a.c,0);while(n.b<n.d.Y()){m=(Bxb(n.b<n.d.Y()),Wv(n.d.sb(n.c=n.b++),16));p=m.a;if(p.c.length==0){continue}h=null;l=null;for(o=0;o<p.c.length;o++){c=(Cxb(o,p.c.length),Wv(p.c[o],9));g=c.g;if(g==(CX(),zX)&&l==zX){e=Wv(rJ(c,(Rib(),qib)),7);j=Wv(rJ(h,qib),7);f=Wv(rJ(c,rib),7);k=Wv(rJ(h,rib),7);d=!!e||!!f;i=!!j||!!k;if(d&&i&&(e==j||f==k)){H$(c,h,e==j,f==k);Cxb(o,p.c.length);hxb(p.c,o,1);--o;c=h;g=l}}h=c;l=g}}pI(b)};var cC=Nkb(jAb,'HyperedgeDummyMerger',471);hI(472,1,eAb,L$);_.sc=function M$(a,b){var c,d,e,f,g,h,i,j,k,l;nI(b,'Hypernodes processing',1);for(e=new Tob(a.c);e.a<e.c.c.length;){d=Wv(Rob(e),16);for(h=new Tob(d.a);h.a<h.c.c.length;){g=Wv(Rob(h),9);if(Ckb(Ixb(Xv(rJ(g,(eM(),AL)))))&&g.f.c.length<=2){l=0;k=0;c=0;f=0;for(j=new Tob(g.f);j.a<j.c.c.length;){i=Wv(Rob(j),7);switch(i.g.e){case 1:++l;break;case 2:++k;break;case 3:++c;break;case 4:++f;}}l==0&&c==0&&K$(a,g,f<=k)}}}pI(b)};var dC=Nkb(jAb,'HypernodesProcessor',472);hI(473,1,eAb,N$);_.sc=function O$(a,b){var c,d,e,f,g,h,i,j,k;nI(b,'Layer constraint edge reversal',1);for(g=new Tob(a.c);g.a<g.c.c.length;){f=Wv(Rob(g),16);k=-1;c=new GU;j=Wv(FU(f.a,xv(qB,Nzb,9,f.a.c.length,0,1)),51);for(e=0;e<j.length;e++){d=Wv(rJ(j[e],(Rib(),mib)),140);if(k==-1){d!=(Hhb(),Ghb)&&(k=e)}else{if(d==(Hhb(),Ghb)){rX(j[e],null);qX(j[e],k++,f)}}d==(Hhb(),Ehb)&&vU(c,j[e])}for(i=new Tob(c);i.a<i.c.c.length;){h=Wv(Rob(i),9);rX(h,null);rX(h,f)}}pI(b)};var eC=Nkb(jAb,'InLayerConstraintProcessor',473);hI(474,1,eAb,R$);_.sc=function W$(a,b){var c,d,e,f,g,h;if(!Wv(rJ(a,(Rib(),jib)),18).kb((ohb(),hhb))){return}for(h=new Tob(a.b);h.a<h.c.c.length;){f=Wv(Rob(h),9);if(f.g==(CX(),AX)){e=Wv(rJ(f,(eM(),GL)),65);this.c=Qlb(this.c,f.i.a-e.b);this.a=Nlb(this.a,f.i.a+f.j.a+e.c);this.d=Qlb(this.d,f.i.b-e.d);this.b=Nlb(this.b,f.i.b+f.j.b+e.a)}}for(g=new Tob(a.b);g.a<g.c.c.length;){f=Wv(Rob(g),9);if(f.g!=(CX(),AX)){switch(f.g.e){case 2:d=Wv(rJ(f,(Mjb(),vjb)),85);if(d==(Xib(),Tib)){f.i.a=this.c-10;Q$(f,new X$).A(new Z$(f));break}if(d==Vib){f.i.a=this.a+10;Q$(f,new _$).A(new b_(f));break}c=Wv(rJ(f,mib),140);if(c==(Hhb(),Ghb)){P$(f).A(new d_(f));f.i.b=this.d-10;break}if(c==Ehb){P$(f).A(new f_(f));f.i.b=this.b+10;break}break;default:throw new slb('The node type '+f.g+' is not supported by the '+lC);}}}};_.a=Vzb;_.b=Vzb;_.c=Uzb;_.d=Uzb;var lC=Nkb(jAb,'InteractiveExternalPortPositioner',474);hI(475,1,Tyb,X$);_.B=function Y$(a){return Wv(a,12).d.f};var fC=Nkb(jAb,'InteractiveExternalPortPositioner/lambda$0$Type',475);hI(476,1,Tyb,Z$);_.B=function $$(a){return S$(this.a,a)};var gC=Nkb(jAb,'InteractiveExternalPortPositioner/lambda$1$Type',476);hI(477,1,Tyb,_$);_.B=function a_(a){return Wv(a,12).c.f};var hC=Nkb(jAb,'InteractiveExternalPortPositioner/lambda$2$Type',477);hI(478,1,Tyb,b_);_.B=function c_(a){return T$(this.a,a)};var iC=Nkb(jAb,'InteractiveExternalPortPositioner/lambda$3$Type',478);hI(479,1,Tyb,d_);_.B=function e_(a){return U$(this.a,a)};var jC=Nkb(jAb,'InteractiveExternalPortPositioner/lambda$4$Type',479);hI(480,1,Tyb,f_);_.B=function g_(a){return V$(this.a,a)};var kC=Nkb(jAb,'InteractiveExternalPortPositioner/lambda$5$Type',480);hI(37,17,{37:1,3:1,23:1,17:1},f0);var h_,i_,j_,k_,l_,m_,n_,o_,p_,q_,r_,s_,t_,u_,v_,w_,x_,y_,z_,A_,B_,C_,D_,E_,F_,G_,H_,I_,J_,K_,L_,M_,N_,O_,P_,Q_,R_,S_,T_,U_,V_,W_,X_,Y_,Z_,$_,__,a0,b0,c0;var mC=Okb(jAb,'IntermediateProcessorStrategy',37,IF,g0);hI(503,1,eAb,k0);_.sc=function l0(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s;nI(b,'Inverted port preprocessing',1);j=a.c;i=new Fnb(j,0);c=null;s=new GU;while(i.b<i.d.Y()){r=c;c=(Bxb(i.b<i.d.Y()),Wv(i.d.sb(i.c=i.b++),16));for(m=new Tob(s);m.a<m.c.c.length;){k=Wv(Rob(m),9);rX(k,r)}s.c=xv(UF,syb,1,0,4,1);for(n=new Tob(c.a);n.a<n.c.c.length;){k=Wv(Rob(n),9);if(k.g!=(CX(),AX)){continue}if(!MM(Wv(rJ(k,(eM(),TL)),28))){continue}for(q=pX(k,(djb(),ajb),(sN(),ZM)).mb();q.G();){o=Wv(q.H(),7);h=o.b;g=Wv(FU(h,xv(dB,gAb,12,h.c.length,0,1)),47);for(e=0,f=g.length;e<f;++e){d=g[e];h0(a,o,d,s)}}for(p=pX(k,bjb,rN).mb();p.G();){o=Wv(p.H(),7);h=o.e;g=Wv(FU(h,xv(dB,gAb,12,h.c.length,0,1)),47);for(e=0,f=g.length;e<f;++e){d=g[e];i0(a,o,d,s)}}}}for(l=new Tob(s);l.a<l.c.c.length;){k=Wv(Rob(l),9);rX(k,c)}pI(b)};var nC=Nkb(jAb,'InvertedPortProcessor',503);hI(481,1,eAb,m0);_.sc=function n0(a,b){nI(b,'Node and Port Label Placement and Node Sizing',1);GO((nW(),nW(),new wW(a,false)));pI(b)};var oC=Nkb(jAb,'LabelAndNodeSizeProcessor',481);hI(482,1,eAb,q0);_.sc=function r0(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t;nI(b,'Label dummy insertions',1);m=new GU;k=Wv(rJ(a,(eM(),DL)),15).a;l=Wv(rJ(a,sL),59);for(o=new Tob(a.b);o.a<o.c.c.length;){n=Wv(Rob(o),9);for(q=new Tob(n.f);q.a<q.c.c.length;){p=Wv(Rob(q),7);for(h=new Tob(p.e);h.a<h.c.c.length;){g=Wv(Rob(h),12);if(g.c.f!=g.d.f&&ol(g.b,o0)){s=Do(g.b.c.length);c=new uX(a);sX(c,(CX(),yX));sJ(c,(Rib(),uib),g);sJ(c,Hib,s);sJ(c,TL,(KM(),FM));sJ(c,qib,g.c);sJ(c,rib,g.d);m.c[m.c.length]=c;i1(g,c);t=Wv(rJ(g,dM),15).a;if(t<0){t=0;sJ(g,dM,new llb(t))}r=Math.floor(t/2);for(e=new Tob(c.f);e.a<e.c.c.length;){d=Wv(Rob(e),7);d.i.b=r}f=c.j;i=new Fnb(g.b,0);while(i.b<i.d.Y()){j=(Bxb(i.b<i.d.Y()),Wv(i.d.sb(i.c=i.b++),33));if(gw(rJ(j,tL))===gw((EK(),AK))){if(l==(sK(),rK)||l==nK){f.a+=j.j.a+k;f.b=Nlb(f.b,j.j.b)}else{f.a=Nlb(f.a,j.j.a);f.b+=j.j.b+k}s.c[s.c.length]=j;vnb(i)}}if(l==(sK(),rK)||l==nK){f.a-=k;f.b+=k+t}else{f.b+=k+t}}}}}xU(a.b,m);pI(b)};var o0;var qC=Nkb(jAb,'LabelDummyInserter',482);hI(483,1,_zb,s0);_.D=function t0(a){return gw(rJ(Wv(a,33),(eM(),tL)))===gw((EK(),AK))};var pC=Nkb(jAb,'LabelDummyInserter/1',483);hI(484,1,eAb,w0);_.sc=function x0(a,b){var c,d,e,f,g,h,i,j,k,l,m;nI(b,'Label dummy removal',1);e=Wv(rJ(a,(eM(),DL)),15).a;h=Wv(rJ(a,sL),59);for(g=new Tob(a.c);g.a<g.c.c.length;){f=Wv(Rob(g),16);j=new Fnb(f.a,0);while(j.b<j.d.Y()){i=(Bxb(j.b<j.d.Y()),Wv(j.d.sb(j.c=j.b++),9));if(i.g==(CX(),yX)){k=Wv(rJ(i,(Rib(),uib)),12);m=Wv(rJ(k,dM),15).a;c=new II(i.i);gw(rJ(i,pib))===gw((kP(),hP))&&(c.b+=m+e);d=new HI(i.j.a,i.j.b-m-e);l=Wv(rJ(i,Hib),20);h==(sK(),rK)||h==nK?v0(l,c,e,d,gw(rJ(i,pib))!==gw(gP)):u0(l,c,e,d);xU(k.b,l);c1(i,false);vnb(j)}}}pI(b)};var rC=Nkb(jAb,'LabelDummyRemover',484);hI(485,1,eAb,A0);_.sc=function B0(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s;nI(b,'Label dummy switching',1);c=new GU;l=new GU;h=new GU;n=new GU;for(g=new Tob(a.c);g.a<g.c.c.length;){f=Wv(Rob(g),16);for(k=new Tob(f.a);k.a<k.c.c.length;){j=Wv(Rob(k),9);if(j.g==(CX(),yX)){c.c[c.c.length]=j;h.c=xv(UF,syb,1,0,4,1);n.c=xv(UF,syb,1,0,4,1);p=j;do{p=Wv(Dm(Uh(iX(p))),12).c.f;p.g==zX&&(h.c[h.c.length]=p,true)}while(p.g==zX);s=j;do{s=Wv(Dm(Uh(mX(s))),12).d.f;s.g==zX&&(n.c[n.c.length]=s,true)}while(s.g==zX);i=h.c.length;o=n.c.length;if(i>o+1){m=(i+o)/2|0;vU(l,new RJ(j,(Cxb(m,h.c.length),Wv(h.c[m],9))))}else if(o>i+1){m=((o-i)/2|0)-1;vU(l,new RJ(j,(Cxb(m,n.c.length),Wv(n.c[m],9))))}}}}for(r=new Tob(l);r.a<r.c.c.length;){q=Wv(Rob(r),27);z0(Wv(q.a,9),Wv(q.b,9))}for(e=new Tob(c);e.a<e.c.c.length;){d=Wv(Rob(e),9);y0(d,new C0,(Rib(),rib));y0(d,new E0,qib)}pI(b)};var uC=Nkb(jAb,'LabelDummySwitcher',485);hI(486,1,Tyb,C0);_.B=function D0(a){return Wv(Dm(Uh(iX(Wv(a,9)))),12).c.f};var sC=Nkb(jAb,'LabelDummySwitcher/lambda$0$Type',486);hI(487,1,Tyb,E0);_.B=function F0(a){return Wv(Dm(Uh(mX(Wv(a,9)))),12).d.f};var tC=Nkb(jAb,'LabelDummySwitcher/lambda$1$Type',487);hI(488,1,eAb,G0);_.sc=function H0(a,b){nI(b,'Label management',1);iw(rJ(a,(bK(),aK)));pI(b)};var vC=Nkb(jAb,'LabelManagementProcessor',488);hI(489,1,eAb,S0);_.sc=function T0(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o,p;i=Wv(rJ(a,(Mjb(),ojb)),115);nI(b,'Label side selection ('+i+')',1);j=(_b(a),new Vh(a));switch(i.e){case 0:L0(j);break;case 1:K0(j);break;case 2:O0(j);break;case 3:N0(j);break;case 4:R0(j);}for(h=new Tob(a.c);h.a<h.c.c.length;){g=Wv(Rob(h),16);for(d=new Tob(g.a);d.a<d.c.c.length;){c=Wv(Rob(d),9);for(n=new Tob(c.f);n.a<n.c.c.length;){l=Wv(Rob(n),7);for(f=new Tob(l.c);f.a<f.c.c.length;){e=Wv(Rob(f),33);gw(rJ(e,(Rib(),pib)))===gw((kP(),jP))&&sJ(e,pib,I0)}}if(c.g==(CX(),yX)){if(gw(rJ(c,(Rib(),pib)))===gw((kP(),gP))){k=Wv(rJ(c,uib),12);p=Wv(rJ(k,(eM(),dM)),15).a;o=c.j.b-Math.ceil(p/2);for(m=new Tob(c.f);m.a<m.c.c.length;){l=Wv(Rob(m),7);l.i.b=o}}}}}pI(b)};var I0;var xC=Nkb(jAb,'LabelSideSelector',489);hI(490,1,fyb,V0);_.$b=function W0(a,b){return U0(Wv(a,7),Wv(b,7))};var wC=Nkb(jAb,'LabelSideSelector/1',490);hI(495,1,eAb,Z0);_.sc=function $0(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t;nI(b,'Layer constraint application',1);j=a.c;if(j.c.length==0){pI(b);return}f=(Cxb(0,j.c.length),Wv(j.c[0],16));g=Wv(yU(j,j.c.length-1),16);s=new sY(a);t=new sY(a);for(i=new Tob(j);i.a<i.c.c.length;){h=Wv(Rob(i),16);p=Wv(FU(h.a,xv(qB,Nzb,9,h.a.c.length,0,1)),51);for(m=0,o=p.length;m<o;++m){l=p[m];c=Wv(rJ(l,(Mjb(),vjb)),85);switch(c.e){case 1:rX(l,f);X0(l,false);break;case 2:rX(l,s);X0(l,true);break;case 3:rX(l,g);Y0(l);break;case 4:rX(l,t);Y0(l);}}}if(j.c.length>=2){k=true;q=(Cxb(1,j.c.length),Wv(j.c[1],16));for(n=new Tob(f.a);n.a<n.c.c.length;){l=Wv(Rob(n),9);if(gw(rJ(l,(Mjb(),vjb)))===gw((Xib(),Wib))){k=false;break}for(e=Uh(mX(l));Cm(e);){d=Wv(Dm(e),12);if(d.d.f.d==q){k=false;break}}if(!k){break}}if(k){p=Wv(FU(f.a,xv(qB,Nzb,9,f.a.c.length,0,1)),51);for(m=0,o=p.length;m<o;++m){l=p[m];rX(l,q)}BU(j,f)}}if(j.c.length>=2){k=true;r=Wv(yU(j,j.c.length-2),16);for(n=new Tob(g.a);n.a<n.c.c.length;){l=Wv(Rob(n),9);if(gw(rJ(l,(Mjb(),vjb)))===gw((Xib(),Wib))){k=false;break}for(e=Uh(iX(l));Cm(e);){d=Wv(Dm(e),12);if(d.c.f.d==r){k=false;break}}if(!k){break}}if(k){p=Wv(FU(g.a,xv(qB,Nzb,9,g.a.c.length,0,1)),51);for(m=0,o=p.length;m<o;++m){l=p[m];rX(l,r)}BU(j,g)}}j.c.length==1&&(Cxb(0,j.c.length),Wv(j.c[0],16)).a.c.length==0&&AU(j,0);s.a.c.length==0||(Fxb(0,j.c.length),fxb(j.c,0,s));t.a.c.length==0||(j.c[j.c.length]=t,true);pI(b)};var yC=Nkb(jAb,'LayerConstraintProcessor',495);hI(496,1,eAb,_0);_.sc=function a1(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o;nI(b,'Layer size calculation',1);j=rAb;i=4.9E-324;for(g=new Tob(a.c);g.a<g.c.c.length;){f=Wv(Rob(g),16);h=f.c;h.a=0;h.b=0;if(f.a.c.length==0){continue}for(l=new Tob(f.a);l.a<l.c.c.length;){k=Wv(Rob(l),9);n=k.j;m=k.e;h.a=Nlb(h.a,n.a+m.b+m.c)}d=Wv(yU(f.a,0),9);o=d.i.b-d.e.d;e=Wv(yU(f.a,f.a.c.length-1),9);c=e.i.b+e.j.b+e.e.a;h.b=c-o;j=j<o?j:o;i=i>c?i:c}a.e.b=i-j;a.d.b-=j;pI(b)};var zC=Nkb(jAb,'LayerSizeAndGraphHeightCalculator',496);hI(497,1,eAb,b1);_.sc=function d1(a,b){var c,d,e,f,g;nI(b,'Edge joining',1);c=Ckb(Ixb(Xv(rJ(a,(Mjb(),gjb)))));for(e=new Tob(a.c);e.a<e.c.c.length;){d=Wv(Rob(e),16);g=new Fnb(d.a,0);while(g.b<g.d.Y()){f=(Bxb(g.b<g.d.Y()),Wv(g.d.sb(g.c=g.b++),9));if(f.g==(CX(),zX)){c1(f,c);vnb(g)}}}pI(b)};var AC=Nkb(jAb,'LongEdgeJoiner',497);hI(498,1,eAb,e1);_.sc=function g1(a,b){var c,d,e,f,g,h,i,j,k,l,m,n;nI(b,'Edge splitting',1);if(a.c.c.length<=2){pI(b);return}f=new Fnb(a.c,0);g=(Bxb(f.b<f.d.Y()),Wv(f.d.sb(f.c=f.b++),16));while(f.b<f.d.Y()){e=g;g=(Bxb(f.b<f.d.Y()),Wv(f.d.sb(f.c=f.b++),16));for(i=new Tob(e.a);i.a<i.c.c.length;){h=Wv(Rob(i),9);for(k=new Tob(h.f);k.a<k.c.c.length;){j=Wv(Rob(k),7);for(d=new Tob(j.e);d.a<d.c.c.length;){c=Wv(Rob(d),12);m=c.d;l=m.f.d;l!=e&&l!=g&&i1(c,(n=new uX(a),sX(n,(CX(),zX)),sJ(n,(Rib(),uib),c),sJ(n,(eM(),TL),(KM(),FM)),rX(n,g),n))}}}}pI(b)};var BC=Nkb(jAb,'LongEdgeSplitter',498);hI(499,1,eAb,k1);_.sc=function l1(a,b){var c,d,e,f,g,h,i,j;nI(b,'Node margin calculation',1);c=new rP((nW(),new wW(a,true)));oP(c);h=Wv(rJ(a,(Rib(),Jib)),15).a;for(e=new Tob(a.c);e.a<e.c.c.length;){d=Wv(Rob(e),16);for(g=new Tob(d.a);g.a<g.c.c.length;){f=Wv(Rob(g),9);j1(f,h);i=f.e;j=Wv(rJ(f,Oib),65);i.b=Nlb(i.b,j.b);i.c=Nlb(i.c,j.c);i.a=Nlb(i.a,j.a);i.d=Nlb(i.d,j.d)}}pI(b)};var CC=Nkb(jAb,zzb,499);hI(491,1,eAb,q1);_.sc=function t1(a,b){var c,d,e,f,g,h,i,j,k,l;nI(b,'Node promotion heuristic',1);this.g=a;m1(this);this.q=Wv(rJ(a,(Mjb(),Bjb)),109);j=Wv(rJ(this.g,Cjb),24).a;e=new u1;switch(this.q.e){case 2:case 1:o1(this,e);break;case 3:this.q=(I1(),H1);o1(this,e);h=0;for(g=new Tob(this.a);g.a<g.c.c.length;){f=Wv(Rob(g),24);h=Plb(h,f.a)}if(h>this.j){this.q=B1;o1(this,e)}break;case 4:this.q=(I1(),H1);o1(this,e);i=0;for(d=new Tob(this.b);d.a<d.c.c.length;){c=Yv(Rob(d));i=Nlb(i,(Dxb(c),c))}if(i>this.k){this.q=E1;o1(this,e)}break;case 6:l=hw(Llb(this.f.length*j/100));o1(this,new w1(l));break;case 5:k=hw(Llb(this.d*j/100));o1(this,new y1(k));break;default:o1(this,e);}p1(this,a);pI(b)};_.d=0;_.e=0;_.i=0;_.j=0;_.k=0;_.n=0;var HC=Nkb(jAb,'NodePromotion',491);hI(492,1,Tyb,u1);_.B=function v1(a){return xkb(),xkb(),wkb};var DC=Nkb(jAb,'NodePromotion/lambda$0$Type',492);hI(493,1,Tyb,w1);_.B=function x1(a){return r1(this.a,a)};_.a=0;var EC=Nkb(jAb,'NodePromotion/lambda$1$Type',493);hI(494,1,Tyb,y1);_.B=function z1(a){return s1(this.a,a)};_.a=0;var FC=Nkb(jAb,'NodePromotion/lambda$2$Type',494);hI(109,17,{109:1,3:1,23:1,17:1},J1);var A1,B1,C1,D1,E1,F1,G1,H1;var GC=Okb(jAb,'NodePromotionStrategy',109,IF,K1);var L1;hI(500,1,eAb,R1);_.sc=function S1(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u;nI(b,sAb,1);n=Wv(rJ(a,(eM(),uL)),122);for(e=new Tob(a.c);e.a<e.c.c.length;){d=Wv(Rob(e),16);i=Wv(FU(d.a,xv(qB,Nzb,9,d.a.c.length,0,1)),51);for(g=0,h=i.length;g<h;++g){f=i[g];if(f.g!=(CX(),BX)){continue}if(n==(NK(),LK)){for(k=new Tob(f.f);k.a<k.c.c.length;){j=Wv(Rob(k),7);j.b.c.length==0||P1(j);j.e.c.length==0||Q1(j)}}else if(aw(rJ(f,(Rib(),uib)),12)){p=Wv(rJ(f,uib),12);q=Wv(nX(f,(sN(),rN)).mb().H(),7);r=Wv(nX(f,ZM).mb().H(),7);s=Wv(rJ(q,uib),7);t=Wv(rJ(r,uib),7);dW(p,t);eW(p,s);u=new II(r.f.i);u.a=MI(Bv(tv(qz,1),Fzb,10,0,[t.f.i,t.i,t.a])).a;QI(p.a,u);u=new II(q.f.i);u.a=MI(Bv(tv(qz,1),Fzb,10,0,[s.f.i,s.i,s.a])).a;QI(p.a,u)}else{if(f.f.c.length>=2){o=true;l=new Tob(f.f);c=Wv(Rob(l),7);while(l.a<l.c.c.length){m=c;c=Wv(Rob(l),7);if(!rb(rJ(m,uib),rJ(c,uib))){o=false;break}}}else{o=false}for(k=new Tob(f.f);k.a<k.c.c.length;){j=Wv(Rob(k),7);j.b.c.length==0||N1(j,o);j.e.c.length==0||O1(j,o)}}rX(f,null)}}pI(b)};var IC=Nkb(jAb,'NorthSouthPortPostprocessor',500);hI(501,1,eAb,X1);_.sc=function Y1(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u;nI(b,sAb,1);o=new GU;u=new GU;for(j=new Tob(a.c);j.a<j.c.c.length;){i=Wv(Rob(j),16);q=-1;n=Wv(FU(i.a,xv(qB,Nzb,9,i.a.c.length,0,1)),51);for(l=0,m=n.length;l<m;++l){k=n[l];++q;if(!(k.g==(CX(),AX)&&MM(Wv(rJ(k,(eM(),TL)),28)))){continue}LM(Wv(rJ(k,(eM(),TL)),28))||W1(k);sJ(k,(Rib(),nib),k);o.c=xv(UF,syb,1,0,4,1);u.c=xv(UF,syb,1,0,4,1);c=new GU;t=new aJ;ml(t,nX(k,(sN(),$M)));U1(a,t,o,u,c);h=q;for(f=new Tob(o);f.a<f.c.c.length;){d=Wv(Rob(f),9);qX(d,h,i);++q;sJ(d,nib,k);g=Wv(yU(d.f,0),7);p=Wv(rJ(g,uib),7);Ckb(Ixb(Xv(rJ(p,(Mjb(),Djb)))))||Wv(rJ(d,oib),20).ib(k)}_I(t);for(s=nX(k,pN).mb();s.G();){r=Wv(s.H(),7);TI(t,r,t.a,t.a.a)}U1(a,t,u,null,c);for(e=new Tob(u);e.a<e.c.c.length;){d=Wv(Rob(e),9);qX(d,++q,i);sJ(d,nib,k);g=Wv(yU(d.f,0),7);p=Wv(rJ(g,uib),7);Ckb(Ixb(Xv(rJ(p,(Mjb(),Djb)))))||Wv(rJ(k,oib),20).ib(d)}c.c.length==0||sJ(k,Shb,c)}}pI(b)};var KC=Nkb(jAb,'NorthSouthPortPreprocessor',501);hI(502,1,fyb,Z1);_.$b=function $1(a,b){var c,d;return c=a.g,d=b.g,c!=d?c.e-d.e:a.k==b.k?0:c==(sN(),$M)?a.k-b.k:b.k-a.k};var JC=Nkb(jAb,'NorthSouthPortPreprocessor/lambda$0$Type',502);hI(504,1,eAb,_1);_.sc=function a2(a,b){var c,d,e,f,g,h;nI(b,'Removing partition constraint edges',1);for(d=new Tob(a.c);d.a<d.c.c.length;){c=Wv(Rob(d),16);for(f=new Tob(c.a);f.a<f.c.c.length;){e=Wv(Rob(f),9);h=new Tob(e.f);while(h.a<h.c.c.length){g=Wv(Rob(h),7);Ckb(Ixb(Xv(rJ(g,(Rib(),Aib)))))&&Sob(h)}}}pI(b)};var LC=Nkb(jAb,'PartitionPostprocessor',504);hI(505,1,eAb,c2);_.sc=function d2(a,b){var c,d,e,f,g,h,i,j,k,l;nI(b,'Adding partition constraint edges',1);this.a=new GU;for(h=new Tob(a.b);h.a<h.c.c.length;){f=Wv(Rob(h),9);e=Wv(rJ(f,(eM(),ML)),24);b2(this,e.a).ib(f)}for(d=0;d<this.a.c.length-1;d++){for(g=Wv(yU(this.a,d),20).mb();g.G();){f=Wv(g.H(),9);k=new RX;PX(k,f);QX(k,(sN(),ZM));sJ(k,(Rib(),Aib),(xkb(),xkb(),wkb));for(j=Wv(yU(this.a,d+1),20).mb();j.G();){i=Wv(j.H(),9);l=new RX;PX(l,i);QX(l,rN);sJ(l,Aib,(null,wkb));c=new hW;sJ(c,Aib,(null,wkb));sJ(c,(eM(),ZL),Elb(20));dW(c,k);eW(c,l)}}}this.a=null;pI(b)};var MC=Nkb(jAb,'PartitionPreprocessor',505);hI(506,1,eAb,f2);_.sc=function g2(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o,p;nI(b,'Port distribution',1);c=jW(a);n=0;k=0;for(e=0,g=c.length;e<g;++e){d=c[e];for(i=0,j=d.length;i<j;++i){h=d[i];h.k=k++;for(m=new Tob(h.f);m.a<m.c.c.length;){l=Wv(Rob(m),7);l.k=n++}}}for(f=new Tob(a.c);f.a<f.c.c.length;){d=Wv(Rob(f),16);e2(d)}p=Wv(rJ(a,(Rib(),Gib)),154);o=wvb(p,1)!=0?new P9(xv(lw,tAb,26,n,12,1)):new M9(xv(lw,tAb,26,n,12,1));Z8(o,c);pI(b)};var NC=Nkb(jAb,'PortDistributionProcessor',506);hI(507,1,eAb,h2);_.sc=function i2(a,b){var c,d,e,f,g;nI(b,'Port order processing',1);g=new k2;for(d=new Tob(a.c);d.a<d.c.c.length;){c=Wv(Rob(d),16);for(f=new Tob(c.a);f.a<f.c.c.length;){e=Wv(Rob(f),9);MM(Wv(rJ(e,(eM(),TL)),28))&&Gpb(e.f,g)}}pI(b)};var PC=Nkb(jAb,'PortListSorter',507);hI(508,1,fyb,k2);_.$b=function l2(a,b){return j2(Wv(a,7),Wv(b,7))};var OC=Nkb(jAb,'PortListSorter/PortComparator',508);hI(509,1,eAb,n2);_.sc=function o2(a,b){var c,d,e,f,g;nI(b,'Port side processing',1);for(g=new Tob(a.b);g.a<g.c.c.length;){e=Wv(Rob(g),9);m2(e)}for(d=new Tob(a.c);d.a<d.c.c.length;){c=Wv(Rob(d),16);for(f=new Tob(c.a);f.a<f.c.c.length;){e=Wv(Rob(f),9);m2(e)}}pI(b)};var QC=Nkb(jAb,'PortSideProcessor',509);hI(510,1,eAb,q2);_.sc=function r2(a,b){var c,d,e,f,g,h,i,j,k,l;nI(b,'Restoring reversed edges',1);for(h=new Tob(a.c);h.a<h.c.c.length;){g=Wv(Rob(h),16);for(j=new Tob(g.a);j.a<j.c.c.length;){i=Wv(Rob(j),9);for(l=new Tob(i.f);l.a<l.c.c.length;){k=Wv(Rob(l),7);f=Wv(FU(k.e,xv(dB,gAb,12,k.e.c.length,0,1)),47);for(d=0,e=f.length;d<e;++d){c=f[d];Ckb(Ixb(Xv(rJ(c,(Rib(),Iib)))))&&cW(c,false)}}}}pI(b)};var RC=Nkb(jAb,'ReversedEdgeRestorer',510);hI(511,1,eAb,x2);_.sc=function y2(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,A,B,C,D,F,G,H,I,J;nI(b,'Sausage Folding',1);this.b=Wv(rJ(a,(Rib(),Jib)),15).a;this.a=this.b*Wv(rJ(a,(Mjb(),Ejb)),15).a;o=t2(this,a);n=a.c.c.length;p=u2(this,a);G=n*p;e=Wv(rJ(a,(eM(),sL)),59);e==(sK(),oK)||e==pK||e==qK?(d=Wv(rJ(a,Rhb),15).a):(d=1/Wv(rJ(a,Rhb),15).a);c=G/o;if(d>c){pI(b);return}D=0;f=rAb;do{++D;c=G/D/(o*D);m=f;f=c-d<=0?0-(c-d):c-d}while(c>d);m<f&&--D;B=n/(1>D?1:D)|0;j=B;u=B;J=true;while(j<n){l=Wv(yU(a.c,j),16);C=true;s=null;t=null;K:for(I=new Tob(l.a);I.a<I.c.c.length;){H=Wv(Rob(I),9);for(h=Uh(iX(H));Cm(h);){g=Wv(Dm(h),12);if(!!s&&s!=H){C=false;break K}s=H;F=g.c.f;if(!!t&&t!=F){C=false;break K}t=F}}if(J&&C){u=0;J=false}if(j!=u){v=Wv(yU(a.c,u),16);for(r=new Tob(Ao(l.a));r.a<r.c.c.length;){q=Wv(Rob(r),9);qX(q,v.a.c.length,v);if(u==0){for(h=new Tob(Ao(iX(q)));h.a<h.c.c.length;){g=Wv(Rob(h),12);cW(g,true);sJ(a,cib,(xkb(),xkb(),wkb));v2(a,g);i=new GU;s2(a,g.c,g,i);for(A=new Tob(i);A.a<A.c.c.length;){w=Wv(Rob(A),9);qX(w,v.a.c.length-1,v)}}}}}u>=B&&(J=true);++u;++j}k=new Fnb(a.c,0);while(k.b<k.d.Y()){l=(Bxb(k.b<k.d.Y()),Wv(k.d.sb(k.c=k.b++),16));l.a.c.length==0&&vnb(k)}pI(b)};_.a=0;_.b=0;var SC=Nkb(jAb,'SausageFolding',511);hI(512,1,eAb,A2);_.sc=function B2(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s;nI(b,'Self-loop processing',1);c=new GU;for(k=new Tob(a.c);k.a<k.c.c.length;){j=Wv(Rob(k),16);c.c=xv(UF,syb,1,0,4,1);for(m=new Tob(j.a);m.a<m.c.c.length;){l=Wv(Rob(m),9);for(o=new Tob(l.f);o.a<o.c.c.length;){n=Wv(Rob(o),7);i=Wv(FU(n.e,xv(dB,gAb,12,n.e.c.length,0,1)),47);for(g=0,h=i.length;g<h;++g){f=i[g];if(f.c.f!=f.d.f){continue}p=f.c;r=f.d;q=p.g;s=r.g;(q==(sN(),$M)||q==pN)&&s==rN?cW(f,false):q==pN&&s==$M?cW(f,false):q==ZM&&s!=ZM&&cW(f,false);q==ZM&&s==rN?vU(c,z2(a,f,r,p)):q==rN&&s==ZM&&vU(c,z2(a,f,p,r))}}}for(e=new Tob(c);e.a<e.c.c.length;){d=Wv(Rob(e),9);rX(d,j)}}pI(b)};var TC=Nkb(jAb,'SelfLoopProcessor',512);hI(513,1,eAb,H2);_.sc=function I2(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o;nI(b,'Spline SelfLoop positioning',1);k=Wv(rJ(a,(Mjb(),Jjb)),153);for(j=new Tob(a.c);j.a<j.c.c.length;){i=Wv(Rob(j),16);for(m=new Tob(i.a);m.a<m.c.c.length;){l=Wv(Rob(m),9);g=Wv(rJ(l,(Rib(),Nib)),20);h=new GU;for(e=g.mb();e.G();){c=Wv(e.H(),75);ceb(c);if((n=pr(c.g),Ue(n,c.i),n).a.Y()==0){h.c[h.c.length]=c}else{G2(c);c.g.a.Y()==0||C2(c)}}switch(k.e){case 0:o=new Q2(l);P2(o);N2(o,h);break;case 2:for(f=new Tob(h);f.a<f.c.c.length;){c=Wv(Rob(f),75);aeb(c,(Ieb(),meb),true)}break;case 1:for(d=new Tob(h);d.a<d.c.c.length;){c=Wv(Rob(d),75);aeb(c,(Ieb(),meb),true)}}switch(k.e){case 0:case 1:F2(g);break;case 2:E2(g);}}}pI(b)};var ZC=Nkb(jAb,'SplineSelfLoopPositioner',513);hI(515,1,{},Q2);var WC=Nkb(jAb,'SplineSelfLoopPositioner/DistributedLoopSidesCalculator',515);hI(516,1,{},$2);_.d=true;var VC=Nkb(jAb,'SplineSelfLoopPositioner/DistributedLoopSidesCalculator/SortedLoopSides',516);hI(116,1,{116:1},_2);_.a=0;_.b=0;var UC=Nkb(jAb,'SplineSelfLoopPositioner/DistributedLoopSidesCalculator/SortedLoopSides/SizeOfSide',116);hI(318,1,{},g3);var a3;var XC=Nkb(jAb,'SplineSelfLoopPositioner/PortReadder',318);hI(514,1,fyb,i3);_.$b=function j3(a,b){return h3(Wv(a,75),Wv(b,75))};var YC=Nkb(jAb,'SplineSelfLoopPositioner/TextWidthComparator',514);hI(517,1,eAb,l3);_.sc=function o3(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s;nI(b,'Spline SelfLoop pre-processing.',1);k=new Wub;for(m=new Tob(a.b);m.a<m.c.c.length;){l=Wv(Rob(m),9);k3(l);k.a.Q();for(h=Uh(mX(l));Cm(h);){f=Wv(Dm(h),12);bW(f)&&(n=k.a.db(f,k),n==null)}for(g=(o=(new Snb(k.a)).a.bb().mb(),new Ynb(o));g.a.G();){f=(i=Wv(g.a.H(),21),Wv(i.yb(),12));r=f.c.g;s=f.d.g;(r==(sN(),$M)&&(s==ZM||s==pN)||r==ZM&&s==pN||r==pN&&s==rN||r==rN&&(s==$M||s==ZM))&&cW(f,false)}c=n3(k,l);sJ(l,(Rib(),Nib),c);if(!LM(Wv(rJ(l,(eM(),TL)),28))){q=new vtb;for(e=new Tob(c);e.a<e.c.c.length;){d=Wv(Rob(e),75);Ue(q,Zdb(d));Ue(q,d.i)}j=new Fnb(l.f,0);while(j.b<j.d.Y()){p=(Bxb(j.b<j.d.Y()),Wv(j.d.sb(j.c=j.b++),7));q.a.R(p)&&vnb(j)}}}pI(b)};var $C=Nkb(jAb,'SplineSelfLoopPreProcessor',517);hI(518,1,eAb,u3);_.sc=function v3(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,A,B,C,D,F,G,H,I;nI(b,'Spline SelfLoop routing',1);D=new I3;for(m=new Tob(a.c);m.a<m.c.c.length;){l=Wv(Rob(m),16);for(s=new Tob(l.a);s.a<s.c.c.length;){r=Wv(Rob(s),9);u=r.f;n=new Wub;for(d=Wv(rJ(r,(Rib(),Nib)),20).mb();d.G();){c=Wv(d.H(),75);Ue(n,c.a)}v=new GU;for(g=(t=(new Snb(n.a)).a.bb().mb(),new Ynb(t));g.a.G();){f=(h=Wv(g.a.H(),21),Wv(h.yb(),12));B=f.c;G=f.d;k=new Tob(f.c.f.f);A=0;F=0;i=0;j=0;while(i<2){e=Wv(Rob(k),7);if(B==e){A=j;++i}if(G==e){F=j;++i}++j}w=Wv(rJ(f,Mib),60);C=w==(Ieb(),neb)||w==keb?u.c.length-(F-A<0?-(F-A):F-A)+1:F-A<0?-(F-A):F-A;vU(v,new G3(A,F,C,w,f))}Gpb(v,D);p=new vtb;o=new Tob(v);if(o.a<o.c.c.length){q=t3(Wv(Rob(o),195),p);while(o.a<o.c.c.length){Afb(q,t3(Wv(Rob(o),195),p))}sJ(r,Oib,(H=new DP,I=new Bfb(r.j.a,r.j.b),H.d=Nlb(0,I.d-q.d),H.b=Nlb(0,I.b-q.b),H.a=Nlb(0,q.a-I.a),H.c=Nlb(0,q.c-I.c),H))}}}pI(b)};var fD=Nkb(jAb,'SplineSelfLoopRouter',518);hI(91,1,{91:1},w3);_.w=function x3(){return this.b+': '+this.d+' -> '+this.a+' '+zc(this.c)};_.a=0;_.b=0;_.d=0;var cD=Nkb(jAb,'SplineSelfLoopRouter/LoopPadding',91);hI(521,1,_zb,z3);_.D=function A3(a){return y3(this,Wv(a,91))};_.a=0;_.c=0;var _C=Nkb(jAb,'SplineSelfLoopRouter/LoopPadding/EnclosingPredicate',521);hI(520,1,fyb,C3);_.$b=function D3(a,b){return B3(Wv(a,91),Wv(b,91))};var aD=Nkb(jAb,'SplineSelfLoopRouter/LoopPadding/MarginComparator',520);hI(196,1,_zb,E3);_.D=function F3(a){return Wv(a,91).c==this.a};var bD=Nkb(jAb,'SplineSelfLoopRouter/LoopPadding/PortSidePredicate',196);hI(195,1,{195:1},G3);_.c=0;_.d=0;_.e=0;var eD=Nkb(jAb,'SplineSelfLoopRouter/SelfLoopEdge',195);hI(519,1,fyb,I3);_.$b=function J3(a,b){return H3(Wv(a,195),Wv(b,195))};var dD=Nkb(jAb,'SplineSelfLoopRouter/SelfLoopEdge/StepSizeComparator',519);hI(82,25,{25:1,82:1},L3);_.vc=function M3(){var a,b,c,d;for(b=WI(this.a,0);b.b!=b.d.c;){a=Wv(_ub(b),10);a.a=this.j.d}for(d=WI(this.c,0);d.b!=d.d.c;){c=Wv(_ub(d),10);c.a=this.j.d}};_.wc=function N3(){return this.b};_.xc=function O3(){return this.e};_.w=function P3(){return Ze(new Snb(this.d.a))};_.b=0;_.e=0;var gD=Nkb(vAb,'CLEdge',82);hI(93,25,{25:1,93:1},Q3);_.vc=function R3(){this.b.i.a=this.j.d+this.b.e.b};_.wc=function S3(){if(this.b.g==(CX(),xX)){return 0}return this.a};_.xc=function T3(){if(this.b.g==(CX(),xX)){return 0}return this.c};_.w=function U3(){return xb(rJ(this.b,(Rib(),uib)))};_.a=0;_.c=0;var hD=Nkb(vAb,'CLNode',93);hI(175,17,{175:1,3:1,23:1,17:1},Y3);var V3,W3;var iD=Okb(vAb,'ConstraintCalculationStrategy',175,IF,Z3);var $3;hI(125,17,{125:1,3:1,23:1,17:1},h4);var a4,b4,c4,d4,e4,f4;var jD=Okb(vAb,'GraphCompactionStrategy',125,IF,i4);var j4;hI(455,1,eAb,o4);_.sc=function p4(a,b){var c,d,e;d=Wv(rJ(a,(Mjb(),Fjb)),125);if(d==(g4(),e4)){return}nI(b,'Horizontal Compaction',1);this.a=a;e=new Q4;c=new rS(P4(e,a));pS(c,this.b);switch(Wv(rJ(a,Gjb),175).e){case 1:nS(c,l4);break;default:nS(c,(aS(),$R));}switch(d.e){case 1:hS(c);break;case 2:hS(gS(c,(sK(),pK)));break;case 3:hS(bS(gS(hS(c),(sK(),pK))));break;case 4:hS(bS(oS(gS(hS(c),(sK(),pK)),new H4)));break;case 5:hS(mS(c,m4));}gS(c,(sK(),oK));c.e=true;L4(e);pI(b)};var l4,m4;var sD=Nkb(vAb,'HorizontalGraphCompactor',455);hI(462,1,{},q4);_.tc=function r4(a,b){var c,d,e;if(aw(a,82)&&aw(b,82)&&!sr(or(Wv(a,82).d,Wv(b,82).d))){return 0}c=null;aw(a,93)&&(c=Wv(a,93).b);d=null;aw(b,93)&&(d=Wv(b,93).b);if(!!c&&c.g==(CX(),xX)||!!d&&d.g==(CX(),xX)){return 0}e=Wv(rJ(this.a.a,(Rib(),Kib)),134);return Vjb(e,c?c.g:(CX(),zX),d?d.g:(CX(),zX))};_.uc=function s4(a,b){if(aw(a,82)&&aw(b,82)&&!sr(or(Wv(a,82).d,Wv(b,82).d))){return 1}return Qlb(a.xc(),b.xc())};var kD=Nkb(vAb,'HorizontalGraphCompactor/1',462);hI(456,317,{},u4);_.Dc=function v4(a){var b,c,d;this.b=a;ES(this,new z4,this.a);ES(this,new B4,this.a);b=Uzb;for(d=new Tob(this.b.a.b);d.a<d.c.c.length;){c=Wv(Rob(d),25);if(aw(c,93)&&Wv(c,93).b.g==(CX(),xX)){continue}b=Qlb(b,Ixb(w4(this.a,c)))}b==Uzb&&(b=0);ES(this,new D4,new F4(b))};var qD=Nkb(vAb,'HorizontalGraphCompactor/EdgeAwareScanlineConstraintCalculation',456);hI(457,1,Tyb,x4);_.B=function y4(a){return w4(this,a)};var lD=Nkb(vAb,'HorizontalGraphCompactor/EdgeAwareScanlineConstraintCalculation/lambda$0$Type',457);hI(458,1,_zb,z4);_.D=function A4(a){return aw(Wv(a,25),82)};var mD=Nkb(vAb,'HorizontalGraphCompactor/EdgeAwareScanlineConstraintCalculation/lambda$1$Type',458);hI(459,1,_zb,B4);_.D=function C4(a){return aw(Wv(a,25),93)};var nD=Nkb(vAb,'HorizontalGraphCompactor/EdgeAwareScanlineConstraintCalculation/lambda$2$Type',459);hI(460,1,_zb,D4);_.D=function E4(a){return true};var oD=Nkb(vAb,'HorizontalGraphCompactor/EdgeAwareScanlineConstraintCalculation/lambda$3$Type',460);hI(461,1,Tyb,F4);_.B=function G4(a){return this.a};_.a=0;var pD=Nkb(vAb,'HorizontalGraphCompactor/EdgeAwareScanlineConstraintCalculation/lambda$4$Type',461);hI(463,1,Tyb,H4);_.B=function I4(a){return n4(),xkb(),uS(Wv(Wv(a,27).a,25).n,Wv(Wv(a,27).b,59))?vkb:wkb};var rD=Nkb(vAb,'HorizontalGraphCompactor/lambda$0$Type',463);hI(553,1,{},Q4);_.c=false;var tD=Nkb(vAb,'LGraphToCGraphTransformer',553);hI(552,1,{},U4);_.Cc=function V4(a){var b,c,d,e,f;this.a=a;this.d=new l7;this.c=xv(UD,syb,61,this.a.a.a.c.length,0,1);this.b=0;for(c=new Tob(this.a.a.a);c.a<c.c.c.length;){b=Wv(Rob(c),78);b.d=this.b;f=x7(z7(y7(new A7,this.b),b),this.d);this.c[this.b]=f;++this.b}T4(this);S4(this);R4(this);F7(W7(this.d),new sI);for(e=new Tob(this.a.a.b);e.a<e.c.c.length;){d=Wv(Rob(e),25);d.r=this.c[d.f.d].e+d.g.a;d.j.d=d.r}};_.b=0;var uD=Nkb(vAb,'NetworkSimplexCompaction',552);hI(142,1,{142:1,23:1},X4);_.F=function Y4(a){return W4(this,Wv(a,142))};_.c=false;_.d=true;_.i=0;_.j=0;_.k=0;_.n=0;var vD=Nkb(vAb,'VerticalSegment',142);hI(586,1,{},_4);_.e=false;var wD=Nkb(wAb,'AllCrossingsCounter',586);hI(339,1,{});var xD=Nkb(wAb,'BetweenLayerEdgeAllCrossingsCounter',339);hI(613,1,{},k5);_.c=0;_.e=0;_.i=0;var AD=Nkb(wAb,'BetweenLayerEdgeTwoNodeCrossingsCounter',613);hI(284,1,{284:1},r5);_.w=function s5(){return 'AdjacencyList [node='+this.d+', adjacencies= '+this.a+']'};_.b=0;_.c=0;_.f=0;var zD=Nkb(wAb,'BetweenLayerEdgeTwoNodeCrossingsCounter/AdjacencyList',284);hI(128,1,{128:1,23:1},v5);_.F=function w5(a){return t5(this,Wv(a,128))};_.w=function x5(){return 'Adjacency [position='+this.c+', cardinality='+this.a+', currentCardinality='+this.b+']'};_.a=0;_.b=0;_.c=0;var yD=Nkb(wAb,'BetweenLayerEdgeTwoNodeCrossingsCounter/AdjacencyList/Adjacency',128);hI(610,339,{},y5);_.Gc=function z5(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,A,B,C,D,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,$,ab,bb,cb,db,eb,fb,gb,hb,ib,jb,kb,lb,mb,nb;eb=0;for(I=0,L=a.length;I<L;++I){G=a[I];if(LM(Wv(rJ(G,(eM(),TL)),28))){for(U=new Tob(G.f);U.a<U.c.c.length;){T=Wv(Rob(U),7);W=0;for(g=new Tob(T.e);g.a<g.c.c.length;){f=Wv(Rob(g),12);G.d!=f.d.f.d&&++W}W>0&&(this.a[T.k]=eb++)}}else{N=0;for(U=new Tob(G.f);U.a<U.c.c.length;){T=Wv(Rob(U),7);for(g=new Tob(T.e);g.a<g.c.c.length;){f=Wv(Rob(g),12);G.d!=f.d.f.d&&++N}this.a[T.k]=eb}N>0&&++eb}}jb=0;for(J=0,M=b.length;J<M;++J){G=b[J];if(LM(Wv(rJ(G,(eM(),TL)),28))){O=0;for(U=new Tob(G.f);U.a<U.c.c.length;){T=Wv(Rob(U),7);if(T.g==(sN(),$M)){for(g=new Tob(T.b);g.a<g.c.c.length;){f=Wv(Rob(g),12);if(G.d!=f.c.f.d){++O;break}}}else{break}}Q=0;X=new Fnb(G.f,G.f.c.length);while(X.b>0){T=(Bxb(X.b>0),Wv(X.a.sb(X.c=--X.b),7));W=0;for(g=new Tob(T.b);g.a<g.c.c.length;){f=Wv(Rob(g),12);G.d!=f.c.f.d&&++W}if(W>0){if(T.g==(sN(),$M)){this.a[T.k]=jb;++jb}else{this.a[T.k]=jb+O+Q;++Q}}}jb+=Q}else{N=0;for(U=new Tob(G.f);U.a<U.c.c.length;){T=Wv(Rob(U),7);for(g=new Tob(T.b);g.a<g.c.c.length;){f=Wv(Rob(g),12);G.d!=f.c.f.d&&++N}this.a[T.k]=jb}N>0&&++jb}}V=new ntb;p=new vtb;for(H=0,K=a.length;H<K;++H){G=a[H];for(hb=new Tob(G.f);hb.a<hb.c.c.length;){gb=Wv(Rob(hb),7);for(g=new Tob(gb.e);g.a<g.c.c.length;){f=Wv(Rob(g),12);lb=f.d;if(G.d!=lb.f.d){fb=Wv(re(Ktb(V.d,gb)),204);kb=Wv(re(Ktb(V.d,lb)),204);if(!fb&&!kb){o=new B5;p.a.db(o,p);QI(o.a,f);QI(o.e,gb);Ltb(V.d,gb,o);QI(o.e,lb);Ltb(V.d,lb,o)}else if(!fb){QI(kb.a,f);QI(kb.e,gb);Ltb(V.d,gb,kb)}else if(!kb){QI(fb.a,f);QI(fb.e,lb);Ltb(V.d,lb,fb)}else if(fb==kb){QI(fb.a,f)}else{QI(fb.a,f);for(S=WI(kb.e,0);S.b!=S.d.c;){R=Wv(_ub(S),7);Ltb(V.d,R,fb)}Ue(fb.a,kb.a);Ue(fb.e,kb.e);p.a.eb(kb)!=null}}}}}q=Wv(Ye(p,xv(CD,{675:1,3:1,5:1,6:1},204,p.a.Y(),0,1)),675);F=a[0].d;db=b[0].d;for(m=0,n=q.length;m<n;++m){l=q[m];l.f=eb;l.g=jb;for(U=WI(l.e,0);U.b!=U.d.c;){T=Wv(_ub(U),7);Y=this.a[T.k];if(T.f.d==F){if(Y<l.f){l.f=Y;l.b=txb(T)}Y>l.c&&(l.c=Y)}else if(T.f.d==db){Y<l.g&&(l.g=Y);Y>l.d&&(l.d=Y)}}}ipb(q,0,q.length,(hsb(),hsb(),gsb));ib=xv(mw,Yyb,26,q.length,12,1);c=xv(mw,Yyb,26,jb+1,12,1);for(s=0;s<q.length;s++){ib[s]=q[s].g;c[ib[s]]=1}e=0;for(t=0;t<c.length;t++){c[t]==1?(c[t]=e):--e}Z=0;for(u=0;u<ib.length;u++){ib[u]+=c[ib[u]];Z=Plb(Z,ib[u]+1)}k=1;while(k<Z){k*=2}nb=2*k-1;k-=1;mb=xv(mw,Yyb,26,nb,12,1);d=0;for(i=0,j=ib.length;i<j;++i){h=ib[i];w=h+k;++mb[w];while(w>0){w%2>0&&(d+=mb[w+1]);w=(w-1)/2|0;++mb[w]}}D=xv(BD,syb,158,q.length*2,0,1);for(v=0;v<q.length;v++){D[2*v]=new E5(q[v],q[v].f,q[v].c,0);D[2*v+1]=new E5(q[v],q[v].c,q[v].f,1)}ipb(D,0,D.length,(null,gsb));P=0;for(B=0,C=D.length;B<C;++B){A=D[B];switch(A.d){case 0:++P;break;case 1:--P;d+=P;}}cb=xv(BD,syb,158,q.length*2,0,1);for(r=0;r<q.length;r++){cb[2*r]=new E5(q[r],q[r].g,q[r].d,0);cb[2*r+1]=new E5(q[r],q[r].d,q[r].g,1)}ipb(cb,0,cb.length,(null,gsb));P=0;for(ab=0,bb=cb.length;ab<bb;++ab){$=cb[ab];switch($.d){case 0:++P;break;case 1:--P;d+=P;}}return d};var DD=Nkb(wAb,'BetweenLayerHyperedgeAllCrossingsCounter',610);hI(204,1,{204:1,23:1},B5);_.F=function C5(a){return A5(this,Wv(a,204))};_.b=0;_.c=0;_.d=0;_.f=0;_.g=0;var CD=Nkb(wAb,'BetweenLayerHyperedgeAllCrossingsCounter/Hyperedge',204);hI(158,1,{158:1,23:1},E5);_.F=function F5(a){return D5(this,Wv(a,158))};_.b=0;_.c=0;_.d=0;var BD=Nkb(wAb,'BetweenLayerHyperedgeAllCrossingsCounter/HyperedgeCorner',158);hI(611,339,{},H5);_.Gc=function J5(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,A,B;B=0;f=0;h=a[0].d;u=b[0].d;for(k=0,m=b.length;k<m;++k){i=b[k];if(LM(Wv(rJ(i,(eM(),TL)),28))){o=0;for(r=new Tob(i.f);r.a<r.c.c.length;){q=Wv(Rob(r),7);if(q.g==(sN(),$M)){for(e=new Tob(q.b);e.a<e.c.c.length;){d=Wv(Rob(e),12);if(d.c.f.d==h){++o;break}}}else{break}}p=0;t=new Fnb(i.f,i.f.c.length);while(t.b>0){q=(Bxb(t.b>0),Wv(t.a.sb(t.c=--t.b),7));s=0;for(e=new Tob(q.b);e.a<e.c.c.length;){d=Wv(Rob(e),12);d.c.f.d==h&&++s}if(s>0){if(q.g==(sN(),$M)){this.a[q.k]=B;++B}else{this.a[q.k]=B+o+p;++p}f+=s}}B+=p}else{n=0;for(r=new Tob(i.f);r.a<r.c.c.length;){q=Wv(Rob(r),7);for(e=new Tob(q.b);e.a<e.c.c.length;){d=Wv(Rob(e),12);d.c.f.d==h&&++n}this.a[q.k]=B}if(n>0){++B;f+=n}}}v=xv(mw,Yyb,26,f,12,1);g=0;for(j=0,l=a.length;j<l;++j){i=a[j];if(LM(Wv(rJ(i,(eM(),TL)),28))){for(r=new Tob(i.f);r.a<r.c.c.length;){q=Wv(Rob(r),7);w=g;for(e=new Tob(q.e);e.a<e.c.c.length;){d=Wv(Rob(e),12);A=d.d;A.f.d==u&&K5(v,w,g++,this.a[A.k])}}}else{w=g;for(r=new Tob(i.f);r.a<r.c.c.length;){q=Wv(Rob(r),7);for(e=new Tob(q.e);e.a<e.c.c.length;){d=Wv(Rob(e),12);A=d.d;A.f.d==u&&K5(v,w,g++,this.a[A.k])}}}}c=G5(B,f,v);return c};var ED=Nkb(wAb,'BetweenLayerStraightEdgeAllCrossingsCounter',611);hI(338,1,{},N5);_.b=0;_.e=false;var FD=Nkb(wAb,'CrossingMatrixFiller',338);hI(447,1,eAb,$5);_.sc=function _5(a,b){var c,d,e,f;nI(b,'Greedy switch crossing reduction',1);this.e=Wv(rJ(a,(Mjb(),tjb)),110);c=a.c.c.length;if(c<2||this.e==(zhb(),rhb)){pI(b);return}Q5(this,a);this.e.b?(this.e.a?R5(this):Z5(this),d=P5(this),e=this.e.a?this.c:Z4(this.b,this.d),this.i=!this.i,this.d=this.g,this.e.a?R5(this):Z5(this),f=this.e.a?this.c:Z4(this.b,this.d),e<=f&&S5(this,d),undefined):this.e.a?R5(this):Z5(this);T5(this,this.a);pI(b)};_.c=0;_.i=true;var GD=Nkb(wAb,'GreedySwitchProcessor',447);hI(340,1,{},k6);var HD=Nkb(wAb,'InLayerEdgeAllCrossingsCounter',340);hI(614,340,{},r6);_.b=0;_.d=0;var JD=Nkb(wAb,'InLayerEdgeTwoNodeCrossingCounter',614);hI(226,1,{226:1,23:1},t6);_.F=function u6(a){return s6(this,Wv(a,226))};_.w=function v6(){return 'ComparableEdgeAndPort [port='+this.b+', edge='+this.a+', portPosition='+this.c+']'};_.c=0;var ID=Nkb(wAb,'InLayerEdgeTwoNodeCrossingCounter/ComparableEdgeAndPort',226);hI(612,1,{},F6);_.e=true;_.f=0;_.g=0;_.k=false;var KD=Nkb(wAb,'NorthSouthEdgeAllCrossingsCounter',612);hI(615,1,{},R6);_.b=0;_.d=0;_.e=false;var LD=Nkb(wAb,'NorthSouthEdgeNeighbouringNodeCrossingsCounter',615);hI(143,1,Oyb,U6);_.mb=function V6(){return T6(this)};_.b=0;var ND=Nkb(wAb,'PortIterable',143);hI(344,1,Ayb,W6);_.H=function Y6(){return Wv(Dnb(this.a),7)};_.G=function X6(){return this.a.b>0};_.I=function Z6(){throw new Hmb};var MD=Nkb(wAb,'PortIterable/1',344);hI(336,1,{},b7);var OD=Nkb(wAb,'SwitchDecider',336);hI(89,1,{89:1},d7);_.w=function e7(){return 'NEdge[id='+this.b+' w='+this.f+' d='+this.a+']'};_.a=1;_.b=0;_.e=false;_.f=0;var QD=Nkb(yAb,'NEdge',89);hI(157,1,{},k7);var PD=Nkb(yAb,'NEdge/NEdgeBuilder',157);hI(278,1,{},l7);var RD=Nkb(yAb,'NGraph',278);hI(61,1,{61:1},n7);_.b=0;_.d=-1;_.e=0;_.i=-1;_.j=false;var UD=Nkb(yAb,'NNode',61);hI(333,13,bAb,q7);_.rb=function r7(a,b){++this.d;Fxb(a,this.c.length);fxb(this.c,a,b)};_.ib=function s7(a){return o7(this,a)};_.jb=function t7(a){++this.d;return xU(this,a)};_.Q=function u7(){++this.d;this.c=xv(UF,syb,1,0,4,1)};_.vb=function v7(a){++this.d;return AU(this,a)};_.nb=function w7(a){return p7(this,a)};var SD=Nkb(yAb,'NNode/ChangeAwareArrayList',333);hI(199,1,{},A7);var TD=Nkb(yAb,'NNode/NNodeBuilder',199);hI(595,1,{},V7);_.a=false;_.f=$xb;_.j=0;var VD=Nkb(yAb,'NetworkSimplex',595);hI(193,17,{180:1,193:1,3:1,23:1,17:1},$7);_.rc=function _7(){switch(this.e){case 0:return new g8;case 1:return new m8;default:throw new slb('No implementation is available for the cycle breaker '+(this.d!=null?this.d:''+this.e));}};var X7,Y7;var WD=Okb(AAb,'CycleBreakingStrategy',193,IF,a8);var b8;hI(539,1,BAb,g8);_.qc=function h8(a){return d8};_.sc=function i8(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,A,B,C,D,F,G,H,I,J;nI(b,'Greedy cycle removal',1);r=a.b;J=r.c.length;this.a=xv(mw,Yyb,26,J,12,1);this.c=xv(mw,Yyb,26,J,12,1);this.b=xv(mw,Yyb,26,J,12,1);h=0;for(p=new Tob(r);p.a<p.c.c.length;){n=Wv(Rob(p),9);n.k=h;for(w=new Tob(n.f);w.a<w.c.c.length;){u=Wv(Rob(w),7);for(f=new Tob(u.b);f.a<f.c.c.length;){c=Wv(Rob(f),12);if(c.c.f==n){continue}C=Wv(rJ(c,(Rib(),Eib)),24).a;this.a[h]+=C>0?C+1:1}for(e=new Tob(u.e);e.a<e.c.c.length;){c=Wv(Rob(e),12);if(c.d.f==n){continue}C=Wv(rJ(c,(Rib(),Eib)),24).a;this.c[h]+=C>0?C+1:1}}this.c[h]==0?QI(this.d,n):this.a[h]==0&&QI(this.e,n);++h}m=-1;l=1;j=new GU;D=Wv(rJ(a,(Rib(),Gib)),154);while(J>0){while(this.d.b!=0){G=Wv(YI(this.d),9);this.b[G.k]=m--;f8(this,G);--J}while(this.e.b!=0){H=Wv(YI(this.e),9);this.b[H.k]=l++;f8(this,H);--J}if(J>0){k=eyb;for(q=new Tob(r);q.a<q.c.c.length;){n=Wv(Rob(q),9);if(this.b[n.k]==0){s=this.c[n.k]-this.a[n.k];if(s>=k){if(s>k){j.c=xv(UF,syb,1,0,4,1);k=s}j.c[j.c.length]=n}}}i=Wv(yU(j,vvb(D,j.c.length)),9);this.b[i.k]=l++;f8(this,i);--J}}F=r.c.length+1;for(h=0;h<r.c.length;h++){this.b[h]<0&&(this.b[h]+=F)}for(o=new Tob(r);o.a<o.c.c.length;){n=Wv(Rob(o),9);B=Wv(FU(n.f,xv(BB,mAb,7,n.f.c.length,0,1)),346);for(v=0,A=B.length;v<A;++v){u=B[v];t=Wv(FU(u.e,xv(dB,gAb,12,u.e.c.length,0,1)),47);for(d=0,g=t.length;d<g;++d){c=t[d];I=c.d.f.k;if(this.b[n.k]>this.b[I]){cW(c,true);sJ(a,cib,(xkb(),xkb(),wkb))}}}}this.a=null;this.c=null;this.b=null;_I(this.e);_I(this.d);pI(b)};var d8;var XD=Nkb(AAb,'GreedyCycleBreaker',539);hI(540,1,BAb,m8);_.qc=function n8(a){return j8};_.sc=function o8(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o,p;nI(b,'Interactive cycle breaking',1);k=new GU;for(m=new Tob(a.b);m.a<m.c.c.length;){l=Wv(Rob(m),9);l.k=1;n=kX(l).a;for(j=oX(l,(djb(),bjb)).mb();j.G();){i=Wv(j.H(),7);for(e=new Tob(i.e);e.a<e.c.c.length;){c=Wv(Rob(e),12);o=c.d.f;if(o!=l){p=kX(o).a;p<n&&(k.c[k.c.length]=c,true)}}}}for(f=new Tob(k);f.a<f.c.c.length;){c=Wv(Rob(f),12);cW(c,true)}k.c=xv(UF,syb,1,0,4,1);for(h=new Tob(a.b);h.a<h.c.c.length;){g=Wv(Rob(h),9);g.k>0&&l8(this,g,k)}for(d=new Tob(k);d.a<d.c.c.length;){c=Wv(Rob(d),12);cW(c,true)}k.c=xv(UF,syb,1,0,4,1);pI(b)};var j8;var YD=Nkb(AAb,'InteractiveCycleBreaker',540);hI(543,1,BAb,q8);_.qc=function r8(a){return TQ(RQ(new WQ,(d0(),z_)),I_)};_.sc=function s8(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o,p;nI(b,'Interactive node layering',1);c=new GU;for(l=new Tob(a.b);l.a<l.c.c.length;){j=Wv(Rob(l),9);h=j.i.a;g=h+j.j.a;g=h+1>g?h+1:g;p=new Fnb(c,0);d=null;while(p.b<p.d.Y()){n=(Bxb(p.b<p.d.Y()),Wv(p.d.sb(p.c=p.b++),239));if(n.c>=g){Bxb(p.b>0);p.a.sb(p.c=--p.b);break}else if(n.a>h){if(!d){vU(n.b,j);n.c=Qlb(n.c,h);n.a=Nlb(n.a,g);d=n}else{xU(d.b,n.b);d.a=Nlb(d.a,n.a);vnb(p)}}}if(!d){d=new t8;d.c=h;d.a=g;Anb(p,d);vU(d.b,j)}}f=a.c;i=0;for(o=new Tob(c);o.a<o.c.c.length;){n=Wv(Rob(o),239);e=new sY(a);e.k=i++;f.c[f.c.length]=e;for(m=new Tob(n.b);m.a<m.c.c.length;){j=Wv(Rob(m),9);rX(j,e);j.k=0}}for(k=new Tob(a.b);k.a<k.c.c.length;){j=Wv(Rob(k),9);j.k==0&&p8(this,j,a)}while((Cxb(0,f.c.length),Wv(f.c[0],16)).a.c.length==0){Cxb(0,f.c.length);f.c.splice(0,1)}a.b.c=xv(UF,syb,1,0,4,1);pI(b)};var $D=Nkb(CAb,'InteractiveLayerer',543);hI(239,1,{239:1},t8);_.a=0;_.c=0;var ZD=Nkb(CAb,'InteractiveLayerer/LayerSpan',239);hI(173,17,{180:1,173:1,3:1,23:1,17:1},y8);_.rc=function z8(){switch(this.e){case 0:return new U8;case 1:return new J8;case 2:return new q8;default:throw new slb('No implementation is available for the layerer '+(this.d!=null?this.d:''+this.e));}};var u8,v8,w8;var _D=Okb(CAb,'LayeringStrategy',173,IF,A8);var B8;hI(542,1,BAb,J8);_.qc=function K8(a){var b;b=XQ(D8);Ckb(Ixb(Xv(rJ(a,(Mjb(),njb)))))||gw(rJ(a,Ljb))===gw((ckb(),_jb))?QQ(b,E8):gw(rJ(a,Ljb))===gw((ckb(),akb))&&QQ(b,F8);Ckb(Ixb(Xv(rJ(a,Ijb))))&&UQ(b,(d0(),Y_));return b};_.sc=function L8(a,b){var c,d,e,f,g;nI(b,'Longest path layering',1);this.a=a;g=this.a.b;this.b=xv(mw,Yyb,26,g.c.length,12,1);c=0;for(f=new Tob(g);f.a<f.c.c.length;){d=Wv(Rob(f),9);d.k=c;this.b[c]=-1;++c}for(e=new Tob(g);e.a<e.c.c.length;){d=Wv(Rob(e),9);I8(this,d)}g.c=xv(UF,syb,1,0,4,1);this.a=null;this.b=null;pI(b)};var D8,E8,F8;var aE=Nkb(CAb,'LongestPathLayerer',542);hI(541,1,BAb,U8);_.qc=function V8(a){var b;b=XQ(M8);if(Ckb(Ixb(Xv(rJ(a,(Mjb(),njb)))))||gw(rJ(a,Ljb))===gw((ckb(),_jb))){QQ(b,N8);this.d=(ckb(),_jb)}else if(gw(rJ(a,Ljb))===gw((ckb(),akb))){QQ(b,O8);this.d=akb}return b};_.sc=function W8(a,b){var c,d,e,f,g,h,i,j,k,l;nI(b,'Network simplex layering',1);this.b=a;l=Wv(rJ(a,(Mjb(),Kjb)),24).a*4;k=this.b.b;if(k.c.length<1){pI(b);return}for(d=WI(Q8(this,k),0);d.b!=d.d.c;){c=Wv(_ub(d),20);f=l*hw(Tlb(c.Y()));e=T8(c);F7(S7(U7(T7(W7(e),f),this.b),this.d==(ckb(),_jb)),rI(b,1));h=this.b.c;for(j=new Tob(e.a);j.a<j.c.c.length;){i=Wv(Rob(j),61);while(h.c.length<=i.e){uU(h,h.c.length,new sY(this.b))}g=Wv(i.f,9);rX(g,Wv(yU(h,i.e),16))}}k.c=xv(UF,syb,1,0,4,1);this.a=null;this.b=null;this.c=null;pI(b)};var M8,N8,O8;var bE=Nkb(CAb,'NetworkSimplexLayerer',541);hI(326,1,{});var dE=Nkb(EAb,'AbstractPortDistributor',326);hI(558,1,fyb,a9);_.$b=function b9(a,b){return _8(this,Wv(a,7),Wv(b,7))};var cE=Nkb(EAb,'AbstractPortDistributor/1',558);hI(564,1,{},j9);var gE=Nkb(EAb,'BarycenterHeuristic',564);hI(272,1,{272:1},k9);_.b=0;_.d=0;_.e=false;var eE=Nkb(EAb,'BarycenterHeuristic/BarycenterState',272);hI(565,1,fyb,l9);_.$b=function m9(a,b){return f9(this.a,a,b)};var fE=Nkb(EAb,'BarycenterHeuristic/lambda$0$Type',565);hI(192,17,{180:1,192:1,3:1,23:1,17:1},q9);_.rc=function r9(){switch(this.e){case 0:return new I9;case 1:return new y9;default:throw new slb('No implementation is available for the crossing minimizer '+(this.d!=null?this.d:''+this.e));}};var n9,o9;var hE=Okb(EAb,'CrossingMinimizationStrategy',192,IF,s9);var t9;hI(526,1,BAb,y9);_.qc=function z9(a){var b;b=XQ(v9);Wv(rJ(a,(Rib(),jib)),18).kb((ohb(),khb))&&TQ(b,(d0(),V_));return b};_.sc=function A9(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o;nI(b,'Interactive crossing minimization',1);m=0;for(e=new Tob(a.c);e.a<e.c.c.length;){d=Wv(Rob(e),16);c=0;j=0;for(i=new Tob(d.a);i.a<i.c.c.length;){g=Wv(Rob(i),9);if(g.i.a>0){c+=g.i.a+g.j.a/2;++j}for(l=new Tob(g.f);l.a<l.c.c.length;){k=Wv(Rob(l),7);k.k=m++}}c/=j;o=xv(kw,hyb,26,d.a.c.length,12,1);f=0;for(h=new Tob(d.a);h.a<h.c.c.length;){g=Wv(Rob(h),9);g.k=f++;o[g.k]=x9(g,c);g.g==(CX(),zX)&&sJ(g,(Rib(),wib),o[g.k])}Gpb(d.a,new C9(o))}n=new P9(xv(lw,tAb,26,m,12,1));Z8(n,jW(a));pI(b)};var v9;var jE=Nkb(EAb,'InteractiveCrossingMinimizer',526);hI(527,1,fyb,C9);_.$b=function D9(a,b){return B9(this,Wv(a,9),Wv(b,9))};var iE=Nkb(EAb,'InteractiveCrossingMinimizer/1',527);hI(525,1,BAb,I9);_.qc=function K9(a){var b;b=XQ(E9);Wv(rJ(a,(Rib(),jib)),18).kb((ohb(),khb))&&TQ(b,(d0(),V_));return b};_.sc=function L9(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,A,B,C,D,F,G,H;nI(b,'Layer sweep crossing minimization',1);F=Wv(rJ(a,(Rib(),Gib)),154);q=a.c.c.length;if(q<2){pI(b);return}G9(this,a);d=$xb;H=Wv(rJ(a,(Mjb(),Kjb)),24).a;c=xv(eE,Txb,671,a.c.c.length,0,2);m=0;for(p=new Tob(a.c);p.a<p.c.c.length;){o=Wv(Rob(p),16);o.k=m;c[m]=xv(eE,{671:1,3:1,5:1,6:1},272,o.a.c.length,0,1);n=0;for(v=new Tob(o.a);v.a<v.c.c.length;){u=Wv(Rob(v),9);u.k=n;c[m][n]=new k9(u);++n}++m}e=new X9(c,this.g);f=new j9(c,e,F,this.j);A=new P9(this.j);t=new M9(this.j);for(G=0;G<H&&d>0;G++){k=wvb(F,1)!=0;j=k?0:q-1;i=this.b[j];C=wvb(F,1)!=0?A:t;H9(i,f,k,false,true);g=$xb;h=true;do{J9(this.b,this.k);D=g;g=0;g+=bab(this.f,i,j);if(k){for(r=1;r<q;r++){l=this.b[r];X8(C,i,(djb(),bjb));H9(l,f,true,!h,false);g+=bab(this.f,l,r);this.d[r]||this.c[r-1]?(g+=lab(this.e,i,l)):(g+=hab(this.i,i,l));i=l}j=q-1}else{for(r=q-2;r>=0;r--){l=this.b[r];X8(C,i,(djb(),ajb));H9(l,f,false,!h,false);g+=bab(this.f,l,r);this.c[r]||this.d[r+1]?(g+=lab(this.e,l,i)):(g+=hab(this.i,l,i));i=l}j=0}h=false;k=!k}while(g<D&&g>0);if(g<d||D<d){if(g<=D){J9(this.b,this.a);d=g}else{J9(this.k,this.a);d=D}}}s=new Fnb(a.c,0);while(s.b<s.d.Y()){o=(Bxb(s.b<s.d.Y()),Wv(s.d.sb(s.c=s.b++),16));B=this.a[s.b-1];w=new Fnb(o.a,0);while(w.b<w.d.Y()){Bxb(w.b<w.d.Y());w.d.sb(w.c=w.b++);Enb(w,B[w.b-1])}}this.j=null;this.a=null;this.b=null;this.k=null;this.i=null;this.e=null;this.c=null;this.d=null;Pm(this.g);pI(b)};var E9;var kE=Nkb(EAb,'LayerSweepCrossingMinimizer',525);hI(327,326,{},M9);_.Hc=function N9(a,b,c){var d,e,f,g,h,i,j,k,l,m,n,o;m=this.a;if(LM(Wv(rJ(a,(eM(),TL)),28))){switch(c.e){case 1:{e=0;h=0;for(l=new Tob(a.f);l.a<l.c.c.length;){j=Wv(Rob(l),7);if(j.b.c.length!=0){++e;j.g==(sN(),$M)&&++h}}i=b+h;o=b+e;for(k=oX(a,(djb(),ajb)).mb();k.G();){j=Wv(k.H(),7);if(j.g==(sN(),$M)){m[j.k]=i;--i}else{m[j.k]=o;--o}}return e}case 2:{n=0;for(k=oX(a,(djb(),bjb)).mb();k.G();){j=Wv(k.H(),7);++n;m[j.k]=b+n}return n}default:throw new rlb;}}else{g=4;f=0;for(l=oX(a,c).mb();l.G();){j=Wv(l.H(),7);d=O9(c,j.g);g=g<d-1?g:d-1;f=f>d?f:d}if(f>g){for(k=oX(a,c).mb();k.G();){j=Wv(k.H(),7);m[j.k]=b+O9(c,j.g)-g}return f-g}return 0}};var lE=Nkb(EAb,'LayerTotalPortDistributor',327);hI(274,326,{},P9);_.Hc=function Q9(a,b,c){var d,e,f,g,h,i,j,k,l,m,n;l=this.a;if(LM(Wv(rJ(a,(eM(),TL)),28))){switch(c.e){case 1:{e=0;f=0;for(k=new Tob(a.f);k.a<k.c.c.length;){i=Wv(Rob(k),7);if(i.b.c.length!=0){++e;i.g==(sN(),$M)&&++f}}d=1/(e+1);g=b+f*d;n=b+1-d;for(j=oX(a,(djb(),ajb)).mb();j.G();){i=Wv(j.H(),7);if(i.g==(sN(),$M)){l[i.k]=g;g-=d}else{l[i.k]=n;n-=d}}break}case 2:{h=0;for(k=new Tob(a.f);k.a<k.c.c.length;){i=Wv(Rob(k),7);i.e.c.length==0||++h}d=1/(h+1);m=b+d;for(j=oX(a,(djb(),bjb)).mb();j.G();){i=Wv(j.H(),7);l[i.k]=m;m+=d}break}default:throw new slb(GAb);}}else{for(j=oX(a,c).mb();j.G();){i=Wv(j.H(),7);l[i.k]=b+R9(c,i.g)}}return 1};var mE=Nkb(EAb,'NodeRelativePortDistributor',274);hI(566,1,{},X9);var oE=Nkb(KAb,'ForsterConstraintResolver',566);hI(102,1,{102:1},$9,_9);_.w=function aab(){var a,b;b=new zmb;b.a+='[';for(a=0;a<this.d.length;a++){ymb(b,tX(this.d[a]));W9(this.g,this.d[0]).a!=null&&ymb(ymb((b.a+='<',b),ilb(Ixb(W9(this.g,this.d[0]).a))),'>');a<this.d.length-1&&(b.a+=', ',b)}return b.a+=']',b.a};_.a=0;_.c=0;_.f=0;var nE=Nkb(KAb,'ForsterConstraintResolver/ConstraintGroup',102);hI(331,1,{});var pE=Nkb(LAb,'AbstractCrossingsCounter',331);hI(568,331,{},iab);var qE=Nkb(LAb,'BarthJuengerMutzelCrossingsCounter',568);hI(567,331,{},mab);var uE=Nkb(LAb,'HyperedgeCrossingsCounter',567);hI(197,1,{197:1,23:1},oab);_.F=function pab(a){return nab(this,Wv(a,197))};_.b=0;_.c=0;_.e=0;_.f=0;var tE=Nkb(LAb,'HyperedgeCrossingsCounter/Hyperedge',197);hI(156,1,{156:1,23:1},rab);_.F=function sab(a){return qab(this,Wv(a,156))};_.b=0;_.c=0;var sE=Nkb(LAb,'HyperedgeCrossingsCounter/HyperedgeCorner',156);hI(242,17,{242:1,3:1,23:1,17:1},wab);var tab,uab;var rE=Okb(LAb,'HyperedgeCrossingsCounter/HyperedgeCorner/Type',242,IF,xab);hI(545,1,BAb,Bab);_.qc=function Cab(a){return Wv(rJ(a,(Rib(),jib)),18).kb((ohb(),hhb))?yab:null};_.sc=function Dab(a,b){var c,d;nI(b,'Interactive node placement',1);this.a=Wv(rJ(a,(Rib(),Kib)),134);for(d=new Tob(a.c);d.a<d.c.c.length;){c=Wv(Rob(d),16);Aab(this,c)}pI(b)};var yab;var vE=Nkb(MAb,'InteractiveNodePlacer',545);hI(546,1,BAb,Qab);_.qc=function Rab(a){return Wv(rJ(a,(Rib(),jib)),18).kb((ohb(),hhb))?Eab:null};_.sc=function Sab(a,b){nI(b,'Linear segments node placement',1);this.b=Wv(rJ(a,(Rib(),Kib)),134);Pab(this,a);Lab(this,a);Iab(this,a);Oab(this);this.a=null;this.b=null;pI(b)};var Eab,Fab,Gab;var xE=Nkb(MAb,'LinearSegmentsNodePlacer',546);hI(111,1,{111:1,23:1},Wab);_.F=function Xab(a){return Tab(this,Wv(a,111))};_.t=function Yab(a){var b;if(aw(a,111)){b=Wv(a,111);return this.b==b.b}return false};_.v=function Zab(){return this.b};_.w=function $ab(){return 'ls'+Ze(this.f)};_.a=0;_.b=0;_.c=-1;_.d=-1;_.i=0;var wE=Nkb(MAb,'LinearSegmentsNodePlacer/LinearSegment',111);hI(548,1,BAb,cbb);_.qc=function dbb(a){return Wv(rJ(a,(Rib(),jib)),18).kb((ohb(),hhb))?_ab:null};_.sc=function ebb(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,A,B,C,D,F,G,H,I,J;H=Wv(rJ(a,(Rib(),Kib)),134);u=(mp(),new ntb);t=0;e=new l7;for(i=new Tob(a.c);i.a<i.c.c.length;){g=Wv(Rob(i),16);D=null;C=null;for(n=new Tob(g.a);n.a<n.c.c.length;){m=Wv(Rob(n),9);++t;s=x7(new A7,e);s.f=m;Ltb(u.d,m,s);m.e.d=Llb(m.e.d);if(C){r=new d7;r.f=0;r.a=hw(Mlb(D.e.d+D.j.b+D.e.a+Xjb(H,Wv(C.f,9),m)));r.c=C;r.d=s;o7(C.g,r);o7(s.c,r)}D=m;C=s}}for(j=new Tob(a.c);j.a<j.c.c.length;){g=Wv(Rob(j),16);for(n=new Tob(g.a);n.a<n.c.c.length;){m=Wv(Rob(n),9);for(A=new Tob(m.f);A.a<A.c.c.length;){w=Wv(Rob(A),7);J=w.i.b+w.a.b;if(J!=Math.floor(J)){v=J-ZH(TH(Math.round(J)));w.i.b-=v}}}}for(h=new Tob(a.c);h.a<h.c.c.length;){g=Wv(Rob(h),16);for(n=new Tob(g.a);n.a<n.c.c.length;){m=Wv(Rob(n),9);for(l=Uh(mX(m));Cm(l);){k=Wv(Dm(l),12);if(bW(k)){continue}if(k.d.f.d==g){continue}G=k.c.f.e.d+k.c.i.b+k.c.a.b;I=k.d.f.e.d+k.d.i.b+k.d.a.b;c=I-G;B=hw(c);d=x7(new A7,e);o=new d7;o.f=bbb(k);o.a=B>0?B:0;o.c=d;o.d=Wv(Smb(u,k.c.f),61);o7(o.c.g,o);o7(o.d.c,o);F=new d7;F.f=bbb(k);F.a=B<0?-B:0;F.c=d;F.d=Wv(Smb(u,k.d.f),61);o7(F.c.g,F);o7(F.d.c,F)}}}f=Wv(rJ(a,(Mjb(),Kjb)),24).a*hw(Math.sqrt(t));F7(S7(T7(W7(e),f),false),rI(b,1));for(q=new Tob(e.a);q.a<q.c.c.length;){p=Wv(Rob(q),61);if(p.f!=null){m=Wv(p.f,9);m.i.b=p.e+m.e.d}}};var _ab;var yE=Nkb(MAb,'NetworkSimplexPlacer',548);hI(141,17,{180:1,141:1,3:1,23:1,17:1},lbb);_.rc=function mbb(){switch(this.e){case 0:return new sbb;case 1:return new Bab;case 2:return new Qab;case 3:return new dcb;case 4:return new cbb;default:throw new slb('No implementation is available for the node placer '+(this.d!=null?this.d:''+this.e));}};var fbb,gbb,hbb,ibb,jbb;var zE=Okb(MAb,'NodePlacementStrategy',141,IF,nbb);var obb;hI(544,1,BAb,sbb);_.qc=function tbb(a){return Wv(rJ(a,(Rib(),jib)),18).kb((ohb(),hhb))?qbb:null};_.sc=function ubb(a,b){var c,d,e,f,g,h,i,j,k,l;nI(b,'Simple node placement',1);l=Wv(rJ(a,(Rib(),Kib)),134);h=0;for(f=new Tob(a.c);f.a<f.c.c.length;){d=Wv(Rob(f),16);g=d.c;g.b=0;c=null;for(j=new Tob(d.a);j.a<j.c.c.length;){i=Wv(Rob(j),9);!!c&&(g.b+=Vjb(l,i.g,c.g)*l.d);g.b+=i.e.d+i.j.b+i.e.a;c=i}h=Nlb(h,g.b)}for(e=new Tob(a.c);e.a<e.c.c.length;){d=Wv(Rob(e),16);g=d.c;k=(h-g.b)/2;c=null;for(j=new Tob(d.a);j.a<j.c.c.length;){i=Wv(Rob(j),9);!!c&&(k+=Vjb(l,i.g,c.g)*l.d);k+=i.e.d;i.i.b=k;k+=i.j.b+i.e.a;c=i}}pI(b)};var qbb;var AE=Nkb(MAb,'SimpleNodePlacer',544);hI(81,1,{81:1},Cbb);_.w=function Dbb(){var a;a='';this.c==(Gbb(),Fbb)?(a+=pzb):this.c==Ebb&&(a+=ozb);this.k==(Lbb(),Jbb)?(a+='DOWN'):this.k==Kbb?(a+='UP'):(a+='BALANCED');return a};var DE=Nkb(OAb,'BKAlignedLayout',81);hI(248,17,{248:1,3:1,23:1,17:1},Hbb);var Ebb,Fbb;var BE=Okb(OAb,'BKAlignedLayout/HDirection',248,IF,Ibb);hI(247,17,{247:1,3:1,23:1,17:1},Mbb);var Jbb,Kbb;var CE=Okb(OAb,'BKAlignedLayout/VDirection',247,IF,Nbb);hI(596,1,{},Qbb);var EE=Nkb(OAb,'BKAligner',596);hI(599,1,{},Vbb);var HE=Nkb(OAb,'BKCompactor',599);hI(279,1,{279:1},Wbb);_.a=0;var FE=Nkb(OAb,'BKCompactor/ClassEdge',279);hI(200,1,{200:1},Ybb);_.a=0;_.b=0;var GE=Nkb(OAb,'BKCompactor/ClassNode',200);hI(547,1,BAb,dcb);_.qc=function hcb(a){return Wv(rJ(a,(Rib(),jib)),18).kb((ohb(),hhb))?Zbb:null};_.sc=function icb(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t;nI(b,'Brandes & Koepf node placement',1);this.b=a;this.d=scb(a);this.a=Ckb(Ixb(Xv(rJ(a,(Mjb(),mjb)))));this.e=gw(rJ(a,sjb))===gw((_gb(),Vgb));ccb(this,a);n=(Mh(4,Vyb),new HU(4));switch(Wv(rJ(a,sjb),124).e){case 3:o=new Cbb(a,this.d.d,(Lbb(),Jbb),(Gbb(),Ebb));n.c[n.c.length]=o;break;case 1:p=new Cbb(a,this.d.d,(Lbb(),Kbb),(Gbb(),Ebb));n.c[n.c.length]=p;break;case 4:s=new Cbb(a,this.d.d,(Lbb(),Jbb),(Gbb(),Fbb));n.c[n.c.length]=s;break;case 2:t=new Cbb(a,this.d.d,(Lbb(),Kbb),(Gbb(),Fbb));n.c[n.c.length]=t;break;default:o=new Cbb(a,this.d.d,(Lbb(),Jbb),(Gbb(),Ebb));p=new Cbb(a,this.d.d,Kbb,Ebb);s=new Cbb(a,this.d.d,Jbb,Fbb);t=new Cbb(a,this.d.d,Kbb,Fbb);n.c[n.c.length]=s;n.c[n.c.length]=t;n.c[n.c.length]=o;n.c[n.c.length]=p;}c=new Qbb(a,this.d);for(f=new Tob(n);f.a<f.c.c.length;){d=Wv(Rob(f),81);Pbb(c,d,this.c);Obb(d)}k=new Vbb(a,this.d);for(g=new Tob(n);g.a<g.c.c.length;){d=Wv(Rob(g),81);Sbb(k,d)}if(this.a){for(h=new Tob(n);h.a<h.c.c.length;){d=Wv(Rob(h),81);Fmb();d+' size is '+Abb(d)}}j=null;if(this.e){i=acb(this,n,this.d.d);_bb(this,a,i)&&(j=i)}if(!j){for(h=new Tob(n);h.a<h.c.c.length;){d=Wv(Rob(h),81);_bb(this,a,d)&&(!j||Abb(j)>Abb(d))&&(j=d)}}!j&&(j=(Cxb(0,n.c.length),Wv(n.c[0],81)));for(m=new Tob(a.c);m.a<m.c.c.length;){l=Wv(Rob(m),16);for(r=new Tob(l.a);r.a<r.c.c.length;){q=Wv(Rob(r),9);q.i.b=Ixb(j.n[q.k])+Ixb(j.d[q.k])}}if(this.a){Fmb();'Blocks: '+ecb(j);'Classes: '+fcb(j)}for(e=new Tob(n);e.a<e.c.c.length;){d=Wv(Rob(e),81);d.f=null;d.b=null;d.a=null;d.d=null;d.i=null;d.g=null;d.n=null}qcb(this.d);this.c.a.Q();pI(b)};_.a=false;_.e=false;var Zbb;var IE=Nkb(OAb,'BKNodePlacer',547);hI(194,17,{194:1,3:1,23:1,17:1},mcb);var jcb,kcb;var JE=Okb(OAb,'CompactionStrategy',194,IF,ncb);var ocb;hI(597,1,{},rcb);_.d=0;var LE=Nkb(OAb,'NeighborhoodInformation',597);hI(598,1,fyb,wcb);_.$b=function xcb(a,b){return vcb(this,Wv(a,27),Wv(b,27))};var KE=Nkb(OAb,'NeighborhoodInformation/NeighborComparator',598);hI(334,1,{});var PE=Nkb(OAb,'ThresholdStrategy',334);hI(602,334,{},Ccb);_.Ic=function Dcb(a,b,c){return this.a.k==(Lbb(),Kbb)?Uzb:Vzb};_.Jc=function Ecb(){};var ME=Nkb(OAb,'ThresholdStrategy/NullThresholdStrategy',602);hI(249,1,{249:1},Fcb);_.c=false;_.d=false;var NE=Nkb(OAb,'ThresholdStrategy/Postprocessable',249);hI(603,334,{},Jcb);_.Ic=function Kcb(a,b,c){var d,e,f;e=b==c;d=this.a.a[c.k]==b;if(!(e||d)){return a}f=a;if(this.a.c==(Gbb(),Fbb)){e&&(f=Gcb(this,b,true));(f==Infinity||f==-Infinity)&&d&&(f=Gcb(this,c,false))}else{e&&(f=Gcb(this,b,true));(f==Infinity||f==-Infinity)&&d&&(f=Gcb(this,c,false))}return f};_.Jc=function Lcb(){var a,b,c,d;while(this.d.b!=0){d=Wv(XI(this.d),249);c=Hcb(this,d);if(!c.a){continue}a=c.a;if(this.c.a[a.c.f.d.k]===this.c.a[a.d.f.d.k]){continue}b=Icb(this,d);b||Tvb(this.e,d)}while(this.e.a.c.length!=0){Icb(this,Wv(Svb(this.e),249))}};var OE=Nkb(OAb,'ThresholdStrategy/SimpleThresholdStrategy',603);hI(423,1,{180:1},Mcb);_.rc=function Ncb(){switch(this.a.e){case 1:return new Rdb;case 3:return new Wfb;default:return new Ycb;}};var QE=Nkb(PAb,'EdgeRouterFactory',423);hI(538,1,BAb,Ycb);_.qc=function Zcb(a){var b,c;c=Wv(rJ(a,(Rib(),jib)),18);b=new WQ;if(c.kb((ohb(),ihb))){QQ(b,Scb);QQ(b,Ucb)}if(c.kb(khb)||Ckb(Ixb(Xv(rJ(a,(Mjb(),rjb)))))){QQ(b,Ucb);c.kb(lhb)&&QQ(b,Vcb)}c.kb(hhb)&&QQ(b,Rcb);c.kb(nhb)&&QQ(b,Wcb);c.kb(jhb)&&QQ(b,Tcb);c.kb(ehb)&&QQ(b,Pcb);c.kb(ghb)&&QQ(b,Qcb);return b};_.sc=function $cb(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o;nI(b,'Orthogonal edge routing',1);m=Wv(rJ(a,(Rib(),Kib)),134);Ckb(Ixb(Xv(rJ(a,(eM(),rL)))));k=new cdb(0,m.a);o=0;f=new Fnb(a.c,0);g=null;h=null;do{i=f.b<f.d.Y()?(Bxb(f.b<f.d.Y()),Wv(f.d.sb(f.c=f.b++),16)):null;j=!i?null:i.a;if(g){UW(g,o);o+=g.c.a}n=!g?o:o+m.b;l=bdb(k,a,h,j,n);d=!g||nl(h,(Ndb(),Mdb));e=!i||nl(j,(Ndb(),Mdb));if(l>0){c=m.b+(l-1)*m.a;!!i&&(c+=m.b);c<m.f&&!d&&!e&&(c=m.f);o+=c}else !d&&!e&&(o+=m.f);g=i;h=j}while(i);a.e.a=o;pI(b)};var Pcb,Qcb,Rcb,Scb,Tcb,Ucb,Vcb,Wcb;var RE=Nkb(PAb,'OrthogonalEdgeRouter',538);hI(277,1,{},cdb);_.a=0;_.c=0;var XE=Nkb(PAb,'OrthogonalRoutingGenerator',277);hI(118,1,{118:1},kdb);_.w=function ldb(){return this.a+'->'+this.b};_.c=0;var SE=Nkb(PAb,'OrthogonalRoutingGenerator/Dependency',118);hI(80,1,{80:1,23:1},odb);_.F=function pdb(a){return ndb(this,Wv(a,80))};_.t=function qdb(a){var b;if(aw(a,80)){b=Wv(a,80);return this.d==b.d}return false};_.v=function rdb(){return this.d};_.w=function sdb(){var a,b,c,d;a=new Bmb('{');d=new Tob(this.g);while(d.a<d.c.c.length){c=Wv(Rob(d),7);b=lX(c.f);b==null&&(b='n'+jX(c.f));a.a+=''+b;d.a<d.c.c.length&&(a.a+=',',a)}a.a+='}';return a.a};_.a=NaN;_.c=0;_.d=0;_.f=0;_.i=0;_.k=NaN;var TE=Nkb(PAb,'OrthogonalRoutingGenerator/HyperNode',80);hI(580,1,{},tdb);_.Kc=function udb(a,b){var c,d,e,f,g,h,i,j,k,l;l=b+a.i*this.a.c;for(h=new Tob(a.g);h.a<h.c.c.length;){g=Wv(Rob(h),7);i=MI(Bv(tv(qz,1),Fzb,10,0,[g.f.i,g.i,g.a])).a;for(d=new Tob(g.e);d.a<d.c.c.length;){c=Wv(Rob(d),12);j=c.d;k=MI(Bv(tv(qz,1),Fzb,10,0,[j.f.i,j.i,j.a])).a;if((i-k<=0?0-(i-k):i-k)>dAb){e=new HI(i,l);QI(c.a,e);_cb(this.a,c,a,e,false);f=new HI(k,l);QI(c.a,f);_cb(this.a,c,a,f,false)}}}};_.Lc=function vdb(a){return a.f.i.a+a.i.a+a.a.a};_.Mc=function wdb(){return sN(),pN};_.Nc=function xdb(){return sN(),$M};var UE=Nkb(PAb,'OrthogonalRoutingGenerator/NorthToSouthRoutingStrategy',580);hI(581,1,{},ydb);_.Kc=function zdb(a,b){var c,d,e,f,g,h,i,j,k,l;l=b-a.i*this.a.c;for(h=new Tob(a.g);h.a<h.c.c.length;){g=Wv(Rob(h),7);i=MI(Bv(tv(qz,1),Fzb,10,0,[g.f.i,g.i,g.a])).a;for(d=new Tob(g.e);d.a<d.c.c.length;){c=Wv(Rob(d),12);j=c.d;k=MI(Bv(tv(qz,1),Fzb,10,0,[j.f.i,j.i,j.a])).a;if((i-k<=0?0-(i-k):i-k)>dAb){e=new HI(i,l);QI(c.a,e);_cb(this.a,c,a,e,false);f=new HI(k,l);QI(c.a,f);_cb(this.a,c,a,f,false)}}}};_.Lc=function Adb(a){return a.f.i.a+a.i.a+a.a.a};_.Mc=function Bdb(){return sN(),$M};_.Nc=function Cdb(){return sN(),pN};var VE=Nkb(PAb,'OrthogonalRoutingGenerator/SouthToNorthRoutingStrategy',581);hI(579,1,{},Ddb);_.Kc=function Edb(a,b){var c,d,e,f,g,h,i,j,k,l;l=b+a.i*this.a.c;for(h=new Tob(a.g);h.a<h.c.c.length;){g=Wv(Rob(h),7);i=MI(Bv(tv(qz,1),Fzb,10,0,[g.f.i,g.i,g.a])).b;for(d=new Tob(g.e);d.a<d.c.c.length;){c=Wv(Rob(d),12);j=c.d;k=MI(Bv(tv(qz,1),Fzb,10,0,[j.f.i,j.i,j.a])).b;if((i-k<=0?0-(i-k):i-k)>dAb){e=new HI(l,i);QI(c.a,e);_cb(this.a,c,a,e,true);f=new HI(l,k);QI(c.a,f);_cb(this.a,c,a,f,true)}}}};_.Lc=function Fdb(a){return a.f.i.b+a.i.b+a.a.b};_.Mc=function Gdb(){return sN(),ZM};_.Nc=function Hdb(){return sN(),rN};var WE=Nkb(PAb,'OrthogonalRoutingGenerator/WestToEastRoutingStrategy',579);hI(535,1,BAb,Rdb);_.qc=function Sdb(a){var b,c;c=Wv(rJ(a,(Rib(),jib)),18);b=new WQ;if(c.kb((ohb(),khb))||Ckb(Ixb(Xv(rJ(a,(Mjb(),rjb)))))){QQ(b,Kdb);c.kb(lhb)&&QQ(b,Ldb)}c.kb(ehb)&&QQ(b,Idb);c.kb(ghb)&&QQ(b,Jdb);return b};_.sc=function Tdb(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v;nI(b,'Polyline edge routing',1);l=Wv(rJ(a,(Rib(),Jib)),15).a;c=Wv(rJ(a,(Mjb(),qjb)),15).a;q=0;if(a.c.c.length!=0){r=Pdb(Wv(yU(a.c,0),16));q=0.4*c*r}f=new Fnb(a.c,0);while(f.b<f.d.Y()){e=(Bxb(f.b<f.d.Y()),Wv(f.d.sb(f.c=f.b++),16));d=nl(e,Mdb);d&&q>0&&(q-=l);UW(e,q);i=0;for(k=new Tob(e.a);k.a<k.c.c.length;){j=Wv(Rob(k),9);h=0;for(n=Uh(mX(j));Cm(n);){m=Wv(Dm(n),12);o=MX(m.c).b;p=MX(m.d).b;if(e==m.d.f.d){s=m.c;t=m.d;u=(MI(Bv(tv(qz,1),Fzb,10,0,[s.f.i,s.i,s.a])).b+MI(Bv(tv(qz,1),Fzb,10,0,[t.f.i,t.i,t.a])).b)/2;s.g==(sN(),ZM)?(v=new HI(q+s.f.d.c.a+0.4*c*(o-p<=0?0-(o-p):o-p),u)):(v=new HI(q-0.4*c*(o-p<=0?0-(o-p):o-p),u));rn(m.a,0,v);if(m.c.g==rN){o=0;p=0}}h=h>(p-o<=0?0-(p-o):p-o)?h:p-o<=0?0-(p-o):p-o}switch(j.g.e){case 0:case 4:case 1:case 3:Qdb(this,j,q);}i=i>h?i:h}if(f.b<f.d.Y()){r=Pdb((Bxb(f.b<f.d.Y()),Wv(f.d.sb(f.c=f.b++),16)));i=i>r?i:r;Bxb(f.b>0);f.a.sb(f.c=--f.b)}g=0.4*c*i;!d&&f.b<f.d.Y()&&(g+=l);q+=e.c.a+g}this.a.a.Q();a.e.a=q;pI(b)};var Idb,Jdb,Kdb,Ldb,Mdb;var ZE=Nkb(PAb,'PolylineEdgeRouter',535);hI(536,1,_zb,Vdb);_.D=function Wdb(a){return Udb(Wv(a,9))};var YE=Nkb(PAb,'PolylineEdgeRouter/1',536);hI(75,1,{75:1},deb);_.w=function eeb(){var a,b,c,d;c=new zmb;!!this.e&&ymb(ymb(c,zc(this.e)),': ');for(b=WI(Zdb(this),0);b.b!=b.d.c;){a=Wv(_ub(b),7);ymb(ymb(umb(ymb(c,(d=OX(a),d==null?'p_'+a.k:'p_'+d)),32),zc(a.g)),' / ')}return kkb(c,pmb(c.a)-2-1)};_.j=0;_.k=0;var $E=Nkb(QAb,'ConnectedSelfLoopComponent',75);hI(60,17,{60:1,3:1,23:1,17:1},Peb);_.c=0;var feb,geb,heb,ieb,jeb,keb,leb,meb,neb,oeb,peb,qeb,reb,seb,teb,ueb,veb,web,xeb,yeb,zeb,Aeb,Beb,Ceb,Deb,Eeb,Feb,Geb,Heb;var _E=Okb(QAb,'LoopSide',60,IF,Seb);hI(203,1,{},dfb,efb,ffb);_.w=function pfb(){return this.b.w()};_.c=0;_.d=false;_.e=false;_.f=false;_.i=0;_.j=0;var bF=Nkb(QAb,'NubSpline',203);hI(92,1,{92:1},sfb,tfb);var aF=Nkb(QAb,'NubSpline/PolarCP',92);hI(281,203,{},ufb);var cF=Nkb(QAb,'NubsSelfLoop',281);hI(112,1,{},Bfb,Cfb,Dfb,Efb,Ffb);_.a=jzb;_.b=rAb;_.c=jzb;_.d=rAb;var dF=Nkb(QAb,'Rectangle',112);hI(537,1,BAb,Wfb);_.qc=function Yfb(a){var b,c;b=new WQ;c=Wv(rJ(a,(Rib(),jib)),18);c.kb((ohb(),nhb))&&QQ(b,Lfb);c.kb(ehb)&&QQ(b,Hfb);if(c.kb(khb)||Ckb(Ixb(Xv(rJ(a,(Mjb(),rjb)))))){QQ(b,Jfb);c.kb(lhb)&&QQ(b,Kfb)}c.kb(ghb)&&QQ(b,Ifb);return b};_.sc=function $fb(a,b){var c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,A,B,C,D,F,G,H,I,J,K,L;nI(b,'Spline edge routing',1);u=Wv(rJ(a,(Rib(),Jib)),15).a;this.a=u*Wv(rJ(a,(Mjb(),qjb)),15).a;L=0;q=new Tob(a.c);r=null;J=(mp(),new ntb);I=new GU;i=true;j=true;do{A=q.a<q.c.c.length?Wv(Rob(q),16):null;m=new GU;g=new GU;s=new Wub;C=new Wub;G=new Wub;Tfb(new RJ(r,A),new RJ(s,C),g,J,I,G);Sfb(s,C,(fgb(),dgb),true,g,m);Sfb(s,C,dgb,false,g,m);Sfb(s,C,egb,true,g,m);Sfb(s,C,egb,false,g,m);Rfb(g,s,C,m);H=new Fnb(m,0);while(H.b<H.d.Y()){k=(Bxb(H.b<H.d.Y()),Wv(H.d.sb(H.c=H.b++),77));K=new Fnb(m,H.b);while(K.b<K.d.Y()){l=(Bxb(K.b<K.d.Y()),Wv(K.d.sb(K.c=K.b++),77));Qfb(k,l)}}Xfb(m,Wv(rJ(a,Gib),154));_fb(m);B=L+10;if(A){j=!A||nl(A.a,(Ndb(),Mdb));t=-1;for(e=new Tob(m);e.a<e.c.c.length;){c=Wv(Rob(e),77);t=Plb(t,c.n)}++t;if(t>0){n=(t+1)*this.a;n<u&&!i&&!j&&(n=u);B+=n}else i||j||Vfb(r)||Vfb(A)||(B+=u);UW(A,B)}for(F=(w=(new Snb(G.a)).a.bb().mb(),new Ynb(w));F.a.G();){D=(h=Wv(F.a.H(),21),Wv(h.yb(),12));v=D.c.f.i;hJ(D.a,v);for(p=new Tob(D.b);p.a<p.c.c.length;){o=Wv(Rob(p),33);vI(o.i,v)}}for(f=new Tob(m);f.a<f.c.c.length;){c=Wv(Rob(f),77);c.f?Ofb(c,L):Pfb(this,c,L,B)}if(A){L=B+A.c.a+10}else{t=-1;for(e=new Tob(m);e.a<e.c.c.length;){c=Wv(Rob(e),77);t=Plb(t,c.n)}t>=0&&(L+=(t+2)*this.a)}r=A;i=j}while(A);for(d=new Tob(I);d.a<d.c.c.length;){c=Wv(Rob(d),12);Nfb(c,J)}a.e.a=L;pI(b)};_.a=3;var Hfb,Ifb,Jfb,Kfb,Lfb;var hF=Nkb(QAb,'SplineEdgeRouter',537);hI(117,1,{117:1},bgb);_.w=function cgb(){return this.a+' ->('+this.c+') '+this.b};_.c=0;var eF=Nkb(QAb,'SplineEdgeRouter/Dependency',117);hI(223,17,{223:1,3:1,23:1,17:1},ggb);var dgb,egb;var fF=Okb(QAb,'SplineEdgeRouter/SideToProcess',223,IF,hgb);hI(77,1,{77:1,23:1},lgb,mgb);_.F=function ngb(a){return jgb(this,Wv(a,77))};_.a=0;_.b=0;_.e=0;_.f=false;_.i=0;_.k=0;_.n=0;_.p=0;var gF=Nkb(QAb,'SplineEdgeRouter/SplineHyperEdge',77);hI(123,17,{123:1,3:1,23:1,17:1},Agb);var tgb,ugb,vgb,wgb,xgb,ygb;var iF=Okb(VAb,'ContentAlignment',123,IF,Bgb);var Cgb;hI(218,17,{218:1,3:1,23:1,17:1},Igb);var Egb,Fgb,Ggb;var jF=Okb(VAb,'EdgeConstraint',218,IF,Jgb);hI(115,17,{115:1,3:1,23:1,17:1},Rgb);var Kgb,Lgb,Mgb,Ngb,Ogb;var kF=Okb(VAb,'EdgeLabelSideSelection',115,IF,Sgb);var Tgb;hI(124,17,{124:1,3:1,23:1,17:1},ahb);var Vgb,Wgb,Xgb,Ygb,Zgb,$gb;var lF=Okb(VAb,'FixedAlignment',124,IF,bhb);var chb;hI(113,17,{113:1,3:1,23:1,17:1},phb);var ehb,fhb,ghb,hhb,ihb,jhb,khb,lhb,mhb,nhb;var mF=Okb(VAb,'GraphProperties',113,IF,qhb);hI(110,17,{110:1,3:1,23:1,17:1},Ahb);_.a=false;_.b=false;_.c=false;var rhb,shb,thb,uhb,vhb,whb,xhb,yhb;var nF=Okb(VAb,'GreedySwitchType',110,IF,Bhb);var Chb;hI(140,17,{140:1,3:1,23:1,17:1},Ihb);var Ehb,Fhb,Ghb;var oF=Okb(VAb,'InLayerConstraint',140,IF,Jhb);hI(174,17,{174:1,3:1,23:1,17:1},Nhb);var Khb,Lhb;var pF=Okb(VAb,'InteractiveReferencePoint',174,IF,Ohb);var Phb;var Rhb,Shb,Thb,Uhb,Vhb,Whb,Xhb,Yhb,Zhb,$hb,_hb,aib,bib,cib,dib,eib,fib,gib,hib,iib,jib,kib,lib,mib,nib,oib,pib,qib,rib,sib,tib,uib,vib,wib,xib,yib,zib,Aib,Bib,Cib,Dib,Eib,Fib,Gib,Hib,Iib,Jib,Kib,Lib,Mib,Nib,Oib,Pib,Qib;hI(85,17,{85:1,3:1,23:1,17:1},Yib);var Sib,Tib,Uib,Vib,Wib;var qF=Okb(VAb,'LayerConstraint',85,IF,Zib);var $ib;hI(219,17,{219:1,3:1,23:1,17:1},ejb);var ajb,bjb,cjb;var rF=Okb(VAb,'PortType',219,IF,fjb);var gjb,hjb,ijb,jjb,kjb,ljb,mjb,njb,ojb,pjb,qjb,rjb,sjb,tjb,ujb,vjb,wjb,xjb,yjb,zjb,Ajb,Bjb,Cjb,Djb,Ejb,Fjb,Gjb,Hjb,Ijb,Jjb,Kjb,Ljb;hI(153,17,{153:1,3:1,23:1,17:1},Rjb);var Njb,Ojb,Pjb;var sF=Okb(VAb,'SelfLoopPlacement',153,IF,Sjb);var Tjb;hI(134,1,{134:1},$jb);_.a=0;_.b=0;_.c=0;_.d=0;_.e=0;_.f=0;var tF=Nkb(VAb,'Spacings',134);hI(172,17,{172:1,3:1,23:1,17:1},dkb);var _jb,akb,bkb;var uF=Okb(VAb,'WideNodesStrategy',172,IF,ekb);var fkb;hI(644,1,{});var xF=Nkb(nyb,'OutputStream',644);hI(645,644,{});var vF=Nkb(nyb,'FilterOutputStream',645);hI(291,645,{},hkb);var yF=Nkb(nyb,'PrintStream',291);hI(255,1,{});_.w=function mkb(){return this.a};var AF=Nkb(kyb,'AbstractStringBuilder',255);hI(621,95,Vxb,pkb);var BF=Nkb(kyb,'ArrayIndexOutOfBoundsException',621);hI(290,72,Vxb,qkb,rkb);var CF=Nkb(kyb,'ArrayStoreException',290);hI(252,46,Uxb);var JF=Nkb(kyb,'Error',252);hI(84,252,Uxb,tkb,ukb);var DF=Nkb(kyb,'AssertionError',84);Sv={3:1,349:1,23:1};var vkb,wkb;var EF=Nkb(kyb,'Boolean',349);Tv={3:1,23:1,184:1,231:1};var HF=Nkb(kyb,'Double',184);hI(15,231,{3:1,23:1,15:1,231:1},klb,llb);_.F=function mlb(a){return jlb(this,Wv(a,15))};_.t=function nlb(a){return aw(a,15)&&Wv(a,15).a==this.a};_.v=function olb(){return hw(this.a)};_.w=function plb(){return qlb(this.a)};_.a=0;var LF=Nkb(kyb,'Float',15);hI(101,72,Vxb,tlb,ulb);var NF=Nkb(kyb,'IllegalStateException',101);var Flb;var Hlb;hI(608,72,Vxb,Ulb);var QF=Nkb(kyb,'NegativeArraySizeException',608);hI(76,72,{3:1,54:1,76:1,46:1},Vlb,Wlb);var RF=Nkb(kyb,'NullPointerException',76);hI(130,29,{3:1,54:1,29:1,130:1,46:1},Xlb,Ylb);var SF=Nkb(kyb,'NumberFormatException',130);hI(146,1,{3:1,146:1},Zlb);_.t=function $lb(a){var b;if(aw(a,146)){b=Wv(a,146);return this.c==b.c&&ovb(this.d,b.d)&&ovb(this.a,b.a)&&ovb(this.b,b.b)}return false};_.v=function _lb(){return fpb(Bv(tv(UF,1),syb,1,4,[Elb(this.c),this.a,this.d,this.b]))};_.w=function amb(){return this.a+'.'+this.d+'('+(this.b!=null?this.b:'Unknown Source')+(this.c>=0?':'+this.c:'')+')'};_.c=0;var WF=Nkb(kyb,'StackTraceElement',146);hI(98,255,{345:1},zmb,Amb,Bmb);var YF=Nkb(kyb,'StringBuilder',98);var Dmb,Emb;hI(45,72,{3:1,54:1,46:1,45:1},Hmb,Imb);var aG=Nkb(kyb,'UnsupportedOperationException',45);hI(213,638,Byb);_.Q=function _mb(){Ymb(this)};_.R=function anb(a){return Qmb(this,a)};_.ab=function bnb(a){return Rmb(this,a,this.e)||Rmb(this,a,this.d)};_.bb=function cnb(){return new inb(this)};_.cb=function dnb(a){return Smb(this,a)};_.db=function enb(a,b){return Umb(this,a,b)};_.eb=function fnb(a){return Wmb(this,a)};_.Y=function gnb(){return Zmb(this)};var hG=Nkb(Cyb,'AbstractHashMap',213);hI(120,641,Eyb,inb);_.Q=function jnb(){this.a.Q()};_.kb=function knb(a){return hnb(this,a)};_.mb=function lnb(){return new rnb(this.a)};_.nb=function mnb(a){var b;if(hnb(this,a)){b=Wv(a,21).yb();this.a.eb(b);return true}return false};_.Y=function nnb(){return this.a.Y()};var gG=Nkb(Cyb,'AbstractHashMap/EntrySet',120);hI(148,1,Ayb,rnb);_.H=function tnb(){return pnb(this)};_.G=function snb(){return this.b};_.I=function unb(){qnb(this)};_.b=false;var fG=Nkb(Cyb,'AbstractHashMap/EntrySetIterator',148);hI(162,1,Ayb,wnb);_.G=function xnb(){return this.b<this.d.Y()};_.H=function ynb(){return Bxb(this.G()),this.d.sb(this.c=this.b++)};_.I=function znb(){vnb(this)};_.b=0;_.c=-1;var iG=Nkb(Cyb,'AbstractList/IteratorImpl',162);hI(43,162,Hyb,Fnb);_.J=function Gnb(a){Anb(this,a)};_.K=function Hnb(){return this.b>0};_.L=function Inb(){return this.b};_.M=function Jnb(){return Dnb(this)};_.N=function Knb(){return this.b-1};_.O=function Lnb(a){Enb(this,a)};var jG=Nkb(Cyb,'AbstractList/ListIteratorImpl',43);hI(258,647,Fyb,Mnb);_.rb=function Nnb(a,b){Fxb(a,this.b);this.c.rb(this.a+a,b);++this.b};_.sb=function Onb(a){Cxb(a,this.b);return this.c.sb(this.a+a)};_.vb=function Pnb(a){var b;Cxb(a,this.b);b=this.c.vb(this.a+a);--this.b;return b};_.wb=function Qnb(a,b){Cxb(a,this.b);return this.c.wb(this.a+a,b)};_.Y=function Rnb(){return this.b};_.a=0;_.b=0;var kG=Nkb(Cyb,'AbstractList/SubList',258);hI(36,641,Eyb,Snb);_.Q=function Tnb(){this.a.Q()};_.kb=function Unb(a){return this.a.R(a)};_.mb=function Vnb(){var a;return a=this.a.bb().mb(),new Ynb(a)};_.nb=function Wnb(a){if(this.a.R(a)){this.a.eb(a);return true}return false};_.Y=function Xnb(){return this.a.Y()};var nG=Nkb(Cyb,'AbstractMap/1',36);hI(40,1,Ayb,Ynb);_.G=function Znb(){return this.a.G()};_.H=function $nb(){var a;return a=Wv(this.a.H(),21),a.yb()};_.I=function _nb(){this.a.I()};var mG=Nkb(Cyb,'AbstractMap/1/1',40);hI(211,640,Dyb,aob);_.Q=function bob(){this.a.Q()};_.kb=function cob(a){return this.a.ab(a)};_.mb=function dob(){var a;return a=this.a.bb().mb(),new fob(a)};_.Y=function eob(){return this.a.Y()};var pG=Nkb(Cyb,'AbstractMap/2',211);hI(212,1,Ayb,fob);_.G=function gob(){return this.a.G()};_.H=function hob(){var a;return a=Wv(this.a.H(),21),a.zb()};_.I=function iob(){this.a.I()};var oG=Nkb(Cyb,'AbstractMap/2/1',212);hI(210,1,{210:1,21:1});_.t=function kob(a){var b;if(!aw(a,21)){return false}b=Wv(a,21);return ovb(this.d,b.yb())&&ovb(this.e,b.zb())};_.yb=function lob(){return this.d};_.zb=function mob(){return this.e};_.v=function nob(){return pvb(this.d)^pvb(this.e)};_.Ab=function oob(a){return job(this,a)};_.w=function pob(){return this.d+'='+this.e};var qG=Nkb(Cyb,'AbstractMap/AbstractEntry',210);hI(163,210,{210:1,163:1,21:1},qob);var rG=Nkb(Cyb,'AbstractMap/SimpleEntry',163);hI(652,1,Jyb);_.t=function rob(a){var b;if(!aw(a,21)){return false}b=Wv(a,21);return ovb(this.yb(),b.yb())&&ovb(this.zb(),b.zb())};_.v=function sob(){return pvb(this.yb())^pvb(this.zb())};_.w=function tob(){return this.yb()+'='+this.zb()};var sG=Nkb(Cyb,Kyb,652);hI(639,638,Byb);_._=function wob(a){return uob(this,a)};_.R=function xob(a){return vob(this,a)};_.bb=function yob(){return new Bob(this)};_.cb=function zob(a){return re(Wvb(this,a))};_.W=function Aob(){return new Gob(this)};var xG=Nkb(Cyb,'AbstractNavigableMap',639);hI(287,641,Eyb,Bob);_.kb=function Cob(a){return aw(a,21)&&uob(this.b,Wv(a,21))};_.mb=function Dob(){return new rwb(this.b)};_.nb=function Eob(a){var b;if(aw(a,21)){b=Wv(a,21);return dwb(this.b,b)}return false};_.Y=function Fob(){return this.b.c};var uG=Nkb(Cyb,'AbstractNavigableMap/EntrySet',287);hI(229,641,Iyb,Gob);_.Q=function Hob(){Vvb(this.a)};_.kb=function Iob(a){return vob(this.a,a)};_.mb=function Job(){var a;return a=new rwb((new wwb(this.a)).b),new Mob(a)};_.nb=function Kob(a){if(vob(this.a,a)){cwb(this.a,a);return true}return false};_.Y=function Lob(){return this.a.c};var wG=Nkb(Cyb,'AbstractNavigableMap/NavigableKeySet',229);hI(230,1,Ayb,Mob);_.G=function Nob(){return Bnb(this.a.a)};_.H=function Oob(){var a;return a=pwb(this.a),a.yb()};_.I=function Pob(){qwb(this.a)};var vG=Nkb(Cyb,'AbstractNavigableMap/NavigableKeySet/1',230);hI(4,1,Ayb,Tob);_.G=function Uob(){return Qob(this)};_.H=function Vob(){return Rob(this)};_.I=function Wob(){Sob(this)};_.a=0;_.b=-1;var AG=Nkb(Cyb,'ArrayList/1',4);hI(94,647,XAb,opb);_.kb=function ppb(a){return dn(this,a)!=-1};_.sb=function qpb(a){return mpb(this,a)};_.wb=function rpb(a,b){var c;c=(Cxb(a,this.a.length),this.a[a]);Av(this.a,a,b);return c};_.Y=function spb(){return this.a.length};_.ob=function tpb(){return npb(this,xv(UF,syb,1,this.a.length,4,1))};_.pb=function upb(a){return npb(this,a)};var CG=Nkb(Cyb,'Arrays/ArrayList',94);var vpb,wpb,xpb;hI(413,1,fyb,Ipb);_.$b=function Jpb(a,b){return zT(b,a)};var DG=Nkb(Cyb,'Collections/2',413);hI(406,647,XAb,Kpb);_.kb=function Lpb(a){return false};_.sb=function Mpb(a){Cxb(a,0);return null};_.mb=function Npb(){return ypb(),Rpb(),Qpb};_.tb=function Opb(){return ypb(),Rpb(),Qpb};_.Y=function Ppb(){return 0};var FG=Nkb(Cyb,'Collections/EmptyList',406);hI(407,1,Hyb,Spb);_.J=function Tpb(a){throw new Hmb};_.G=function Upb(){return false};_.K=function Vpb(){return false};_.H=function Wpb(){throw new nvb};_.L=function Xpb(){return 0};_.M=function Ypb(){throw new nvb};_.N=function Zpb(){return -1};_.I=function $pb(){throw new tlb};_.O=function _pb(a){throw new tlb};var Qpb;var EG=Nkb(Cyb,'Collections/EmptyListIterator',407);hI(409,638,Ryb,aqb);_.R=function bqb(a){return false};_.ab=function cqb(a){return false};_.bb=function dqb(){return ypb(),xpb};_.cb=function eqb(a){return null};_.W=function fqb(){return ypb(),xpb};_.Y=function gqb(){return 0};_.fb=function hqb(){return ypb(),vpb};var GG=Nkb(Cyb,'Collections/EmptyMap',409);hI(408,641,Syb,iqb);_.kb=function jqb(a){return false};_.mb=function kqb(){return ypb(),Rpb(),Qpb};_.Y=function lqb(){return 0};var HG=Nkb(Cyb,'Collections/EmptySet',408);hI(410,1,fyb,pqb);_.$b=function qqb(a,b){return oqb(Wv(a,23),Wv(b,23))};var mqb;var IG=Nkb(Cyb,'Collections/ReverseComparator',410);hI(411,647,{3:1,22:1,19:1,20:1},rqb);_.kb=function sqb(a){return ovb(this.a,a)};_.sb=function tqb(a){Cxb(a,1);return this.a};_.Y=function uqb(){return 1};var JG=Nkb(Cyb,'Collections/SingletonList',411);hI(217,1,Dyb,zqb);_.ib=function Aqb(a){return vqb()};_.jb=function Bqb(a){return wqb()};_.Q=function Cqb(){xqb()};_.kb=function Dqb(a){return this.b.kb(a)};_.lb=function Eqb(a){return this.b.lb(a)};_.V=function Fqb(){return this.b.V()};_.mb=function Gqb(){return new Nqb(this.b.mb())};_.nb=function Hqb(a){return yqb()};_.Y=function Iqb(){return this.b.Y()};_.ob=function Jqb(){return this.b.ob()};_.pb=function Kqb(a){return this.b.pb(a)};_.w=function Lqb(){return xb(this.b)};var LG=Nkb(Cyb,'Collections/UnmodifiableCollection',217);hI(152,1,Ayb,Nqb);_.G=function Oqb(){return this.b.G()};_.H=function Pqb(){return this.b.H()};_.I=function Qqb(){Mqb()};var KG=Nkb(Cyb,'Collections/UnmodifiableCollectionIterator',152);hI(233,217,Fyb,Rqb);_.rb=function Sqb(a,b){throw new Hmb};_.t=function Tqb(a){return this.a.t(a)};_.sb=function Uqb(a){return this.a.sb(a)};_.v=function Vqb(){return this.a.v()};_.V=function Wqb(){return this.a.V()};_.tb=function Xqb(){return new arb(this.a.ub(0))};_.ub=function Yqb(a){return new arb(this.a.ub(a))};_.vb=function Zqb(a){throw new Hmb};_.wb=function $qb(a,b){throw new Hmb};_.xb=function _qb(a,b){return new Rqb(this.a.xb(a,b))};var NG=Nkb(Cyb,'Collections/UnmodifiableList',233);hI(309,152,Hyb,arb);_.J=function brb(a){throw new Hmb};_.K=function crb(){return this.a.K()};_.L=function drb(){return this.a.L()};_.M=function erb(){return this.a.M()};_.N=function frb(){return this.a.N()};_.O=function grb(a){throw new Hmb};var MG=Nkb(Cyb,'Collections/UnmodifiableListIterator',309);hI(305,1,Byb,mrb);_.Q=function nrb(){throw new Hmb};_.R=function orb(a){return this.c.R(a)};_.ab=function prb(a){return hrb(this,a)};_.bb=function qrb(){return irb(this)};_.t=function rrb(a){return jrb(this,a)};_.cb=function srb(a){return this.c.cb(a)};_.v=function trb(){return this.c.v()};_.V=function urb(){return this.c.V()};_.W=function vrb(){return krb(this)};_.db=function wrb(a,b){throw new Hmb};_.eb=function xrb(a){throw new Hmb};_.Y=function yrb(){return this.c.Y()};_.w=function zrb(){return xb(this.c)};_.fb=function Arb(){return lrb(this)};var RG=Nkb(Cyb,'Collections/UnmodifiableMap',305);hI(151,217,Eyb,Frb);_.t=function Grb(a){return Drb(this,a)};_.v=function Hrb(){return this.b.v()};var TG=Nkb(Cyb,'Collections/UnmodifiableSet',151);hI(412,151,Eyb,Nrb);_.kb=function Orb(a){return Irb(this,a)};_.lb=function Prb(a){return Jrb(this,a)};_.mb=function Qrb(){var a;return a=this.b.mb(),new Trb(a)};_.ob=function Rrb(){return Krb(this)};_.pb=function Srb(a){return Lrb(this,a)};var QG=Nkb(Cyb,'Collections/UnmodifiableMap/UnmodifiableEntrySet',412);hI(263,1,Ayb,Trb);_.H=function Vrb(){return new Xrb(Wv(this.a.H(),21))};_.G=function Urb(){return this.a.G()};_.I=function Wrb(){throw new Hmb};var OG=Nkb(Cyb,'Collections/UnmodifiableMap/UnmodifiableEntrySet/1',263);hI(306,1,Jyb,Xrb);_.t=function Yrb(a){return this.a.t(a)};_.yb=function Zrb(){return this.a.yb()};_.zb=function $rb(){return this.a.zb()};_.v=function _rb(){return this.a.v()};_.Ab=function asb(a){throw new Hmb};_.w=function bsb(){return xb(this.a)};var PG=Nkb(Cyb,'Collections/UnmodifiableMap/UnmodifiableEntrySet/UnmodifiableEntry',306);hI(307,233,Gyb,csb);var SG=Nkb(Cyb,'Collections/UnmodifiableRandomAccessList',307);hI(308,151,Iyb,dsb);_.t=function esb(a){return this.a.t(a)};_.v=function fsb(){return this.a.v()};var UG=Nkb(Cyb,'Collections/UnmodifiableSortedSet',308);var gsb;hI(522,1,fyb,isb);_.$b=function jsb(a,b){Dxb(a);Dxb(b);return Akb(Wv(a,23),b)};var VG=Nkb(Cyb,'Comparators/1',522);hI(202,72,Vxb,nsb);var WG=Nkb(Cyb,'ConcurrentModificationException',202);hI(609,72,Vxb,osb);var XG=Nkb(Cyb,'EmptyStackException',609);hI(319,638,Byb,vsb);_.db=function Bsb(a,b){return ssb(this,a,b)};_.Q=function wsb(){psb(this)};_.R=function xsb(a){return Ysb(this.a,a)};_.ab=function ysb(a){var b,c;for(c=new jtb(this.a);c.a<c.c.a.length;){b=itb(c);if(ovb(a,this.b[b.e])){return true}}return false};_.bb=function zsb(){return new Fsb(this)};_.cb=function Asb(a){return qsb(this,a)};_.eb=function Csb(a){return tsb(this,a)};_.Y=function Dsb(){return this.a.c};var _G=Nkb(Cyb,'EnumMap',319);hI(236,641,Eyb,Fsb);_.Q=function Gsb(){psb(this.a)};_.kb=function Hsb(a){return Esb(this,a)};_.mb=function Isb(){return new Lsb(this.a)};_.nb=function Jsb(a){var b;if(Esb(this,a)){b=Wv(a,21).yb();tsb(this.a,b);return true}return false};_.Y=function Ksb(){return this.a.a.c};var ZG=Nkb(Cyb,'EnumMap/EntrySet',236);hI(237,1,Ayb,Lsb);_.H=function Nsb(){return this.b=itb(this.a),new Psb(this.c,this.b)};_.G=function Msb(){return htb(this.a)};_.I=function Osb(){uxb(!!this.b);tsb(this.c,this.b);this.b=null};var YG=Nkb(Cyb,'EnumMap/EntrySetIterator',237);hI(238,652,Jyb,Psb);_.yb=function Qsb(){return this.a};_.zb=function Rsb(){return this.b.b[this.a.e]};_.Ab=function Ssb(a){return usb(this.b,this.a.e,a)};var $G=Nkb(Cyb,'EnumMap/MapEntry',238);hI(86,641,{22:1,19:1,86:1,18:1});var cH=Nkb(Cyb,'EnumSet',86);hI(66,86,{22:1,19:1,86:1,66:1,18:1},atb);_.ib=function btb(a){return Wsb(this,Wv(a,17))};_.kb=function ctb(a){return Ysb(this,a)};_.mb=function dtb(){return new jtb(this)};_.nb=function etb(a){return $sb(this,a)};_.Y=function ftb(){return this.c};_.c=0;var bH=Nkb(Cyb,'EnumSet/EnumSetImpl',66);hI(167,1,Ayb,jtb);_.H=function ltb(){return itb(this)};_.G=function ktb(){return htb(this)};_.I=function mtb(){uxb(this.b!=-1);Av(this.c.b,this.b,null);--this.c.c;this.b=-1};_.a=-1;_.b=-1;var aH=Nkb(Cyb,'EnumSet/EnumSetImpl/IteratorImpl',167);hI(30,213,YAb,ntb,otb,ptb);_.Uc=function qtb(a,b){return gw(a)===gw(b)||a!=null&&rb(a,b)};_.Vc=function rtb(a){var b;b=vb(a);return b|0};var dH=Nkb(Cyb,'HashMap',30);hI(50,641,ZAb,vtb,wtb,xtb);_.ib=function ztb(a){return stb(this,a)};_.Q=function Atb(){this.a.Q()};_.Wc=function Btb(){return new xtb(this)};_.kb=function Ctb(a){return ttb(this,a)};_.V=function Dtb(){return this.a.Y()==0};_.mb=function Etb(){var a;return a=(new Snb(this.a)).a.bb().mb(),new Ynb(a)};_.nb=function Ftb(a){return utb(this,a)};_.Y=function Gtb(){return this.a.Y()};_.w=function Htb(){return Ze(new Snb(this.a))};var eH=Nkb(Cyb,'HashSet',50);hI(418,1,Oyb,Ntb);_.mb=function Otb(){return new Ptb(this)};_.c=0;var gH=Nkb(Cyb,'InternalHashCodeMap',418);hI(312,1,Ayb,Ptb);_.H=function Rtb(){return this.d=this.a[this.c++],this.d};_.G=function Qtb(){var a;if(this.c<this.a.length){return true}a=this.b.next();if(!a.done){this.a=a.value[1];this.c=0;return true}return false};_.I=function Stb(){Mtb(this.e,this.d.yb());this.c!=0&&--this.c};_.c=0;_.d=null;var fH=Nkb(Cyb,'InternalHashCodeMap/1',312);var Xtb;hI(382,1,Oyb,fub);_.mb=function gub(){return new hub(this)};_.c=0;_.d=0;var jH=Nkb(Cyb,'InternalStringMap',382);hI(293,1,Ayb,hub);_.H=function jub(){return this.c=this.a,this.a=this.b.next(),new lub(this.d,this.c,this.d.d)};_.G=function iub(){return !this.a.done};_.I=function kub(){eub(this.d,this.c.value[0])};var hH=Nkb(Cyb,'InternalStringMap/1',293);hI(383,652,Jyb,lub);_.yb=function mub(){return this.b.value[0]};_.zb=function nub(){if(this.a.d!=this.c){return cub(this.a,this.b.value[0])}return this.b.value[1]};_.Ab=function oub(a){return dub(this.a,this.b.value[0],a)};_.c=0;var iH=Nkb(Cyb,'InternalStringMap/2',383);hI(155,30,YAb,wub,xub);_.Q=function yub(){qub(this)};_.R=function zub(a){return Qmb(this.c,a)};_.ab=function Aub(a){var b;b=this.b.a;while(b!=this.b){if(ovb(b.e,a)){return true}b=b.a}return false};_.bb=function Bub(){return new Lub(this)};_.cb=function Cub(a){return rub(this,a)};_.db=function Dub(a,b){return tub(this,a,b)};_.eb=function Eub(a){return vub(this,a)};_.Y=function Fub(){return Zmb(this.c)};_.a=false;var nH=Nkb(Cyb,'LinkedHashMap',155);hI(176,163,{210:1,163:1,176:1,21:1},Iub,Jub);var kH=Nkb(Cyb,'LinkedHashMap/ChainEntry',176);hI(270,641,Eyb,Lub);_.Q=function Mub(){qub(this.a)};_.kb=function Nub(a){return Kub(this,a)};_.mb=function Oub(){return new Sub(this)};_.nb=function Pub(a){var b;if(Kub(this,a)){b=Wv(a,21).yb();vub(this.a,b);return true}return false};_.Y=function Qub(){return Zmb(this.a.c)};var mH=Nkb(Cyb,'LinkedHashMap/EntrySet',270);hI(271,1,Ayb,Sub);_.H=function Uub(){return Rub(this)};_.G=function Tub(){return this.b!=this.c.a.b};_.I=function Vub(){uxb(!!this.a);ksb(this.c.a.c,this);Hub(this.a);Wmb(this.c.a.c,this.a.d);lsb(this.c.a.c,this);this.a=null};var lH=Nkb(Cyb,'LinkedHashMap/EntrySet/EntryIterator',271);hI(70,50,ZAb,Wub,Xub,Yub);_.Wc=function Zub(){return new Yub(this)};var oH=Nkb(Cyb,'LinkedHashSet',70);hI(372,1,Hyb,cvb);_.J=function dvb(a){$ub(this,a)};_.G=function evb(){return this.b!=this.d.c};_.K=function fvb(){return this.b.b!=this.d.a};_.H=function gvb(){return _ub(this)};_.L=function hvb(){return this.a};_.M=function ivb(){return avb(this)};_.N=function jvb(){return this.a-1};_.I=function kvb(){bvb(this)};_.O=function lvb(a){uxb(!!this.c);this.c.c=a};_.a=0;_.c=null;var pH=Nkb(Cyb,'LinkedList/ListIteratorImpl',372);hI(259,1,{},mvb);var qH=Nkb(Cyb,'LinkedList/Node',259);hI(74,72,{3:1,54:1,46:1,74:1},nvb);var tH=Nkb(Cyb,'NoSuchElementException',74);hI(154,1,{154:1},yvb,zvb);_.a=0;_.b=0;var qvb,rvb,svb=0;var uH=Nkb(Cyb,'Random',154);hI(607,647,cBb);_.rb=function Avb(a,b){Dvb(a,this.a.c.length+1);uU(this.a,a,b)};_.ib=function Bvb(a){return vU(this.a,a)};_.jb=function Cvb(a){return xU(this.a,a)};_.Q=function Evb(){this.a.c=xv(UF,syb,1,0,4,1)};_.kb=function Fvb(a){return zU(this.a,a,0)!=-1};_.lb=function Gvb(a){return Xe(this.a,a)};_.sb=function Hvb(a){Dvb(a,this.a.c.length);return yU(this.a,a)};_.V=function Ivb(){return this.a.c.length==0};_.mb=function Jvb(){return new Tob(this.a)};_.vb=function Kvb(a){return Dvb(a,this.a.c.length),AU(this.a,a)};_.Xb=function Lvb(a,b){CU(this.a,a,b)};_.wb=function Mvb(a,b){Dvb(a,this.a.c.length);return DU(this.a,a,b)};_.Y=function Nvb(){return this.a.c.length};_.xb=function Ovb(a,b){return new Mnb(this.a,a,b)};_.ob=function Pvb(){return EU(this.a)};_.pb=function Qvb(a){return FU(this.a,a)};_.w=function Rvb(){return Ze(this.a)};var GH=Nkb(Cyb,'Vector',607);hI(337,607,cBb,Uvb);var vH=Nkb(Cyb,'Stack',337);hI(253,639,Ryb,iwb,jwb);_.Q=function kwb(){Vvb(this)};_.bb=function lwb(){return new wwb(this)};_.db=function mwb(a,b){return bwb(this,a,b)};_.eb=function nwb(a){return cwb(this,a)};_.Y=function owb(){return this.c};_.c=0;var EH=Nkb(Cyb,'TreeMap',253);hI(182,1,Ayb,rwb);_.H=function uwb(){return pwb(this)};_.G=function twb(){return Bnb(this.a)};_.I=function vwb(){qwb(this)};var wH=Nkb(Cyb,'TreeMap/EntryIterator',182);hI(209,287,Eyb,wwb);_.Q=function xwb(){Vvb(this.a)};var xH=Nkb(Cyb,'TreeMap/EntrySet',209);hI(183,163,{210:1,163:1,21:1,183:1},ywb);_.b=false;var yH=Nkb(Cyb,'TreeMap/Node',183);hI(254,1,{},zwb);_.w=function Awb(){return 'State: mv='+this.c+' value='+this.d+' done='+this.a+' found='+this.b};_.a=false;_.b=false;_.c=false;var zH=Nkb(Cyb,'TreeMap/State',254);hI(138,17,dBb,Gwb);_.Xc=function Hwb(){return false};_.Yc=function Iwb(){return false};var Bwb,Cwb,Dwb,Ewb;var DH=Okb(Cyb,'TreeMap/SubMapType',138,IF,Jwb);hI(352,138,dBb,Kwb);_.Yc=function Lwb(){return true};var AH=Okb(Cyb,'TreeMap/SubMapType/1',352,DH,null);hI(353,138,dBb,Mwb);_.Xc=function Nwb(){return true};_.Yc=function Owb(){return true};var BH=Okb(Cyb,'TreeMap/SubMapType/2',353,DH,null);hI(354,138,dBb,Pwb);_.Xc=function Qwb(){return true};var CH=Okb(Cyb,'TreeMap/SubMapType/3',354,DH,null);hI(191,641,{3:1,22:1,19:1,18:1,137:1,191:1},Vwb,Wwb);_.ib=function Xwb(a){return Rwb(this,a)};_.Q=function Ywb(){Vvb(this.a)};_.kb=function Zwb(a){return vob(this.a,a)};_.mb=function $wb(){var a;return a=new rwb((new wwb((new Gob(this.a)).a)).b),new Mob(a)};_.nb=function _wb(a){return Uwb(this,a)};_.Y=function axb(){return this.a.c};var FH=Nkb(Cyb,'TreeSet',191);var sxb=0;var Kxb,Lxb=0,Mxb;var mw=Qkb('int','I');var KH=Qkb('boolean','Z');var jw=Qkb('char','C');var kw=Qkb('double','D');var lw=Qkb('float','F');var Rxb=zt;var gwtOnLoad=gwtOnLoad=dI;bI(lI);eI('permProps',[[['locale','default'],['user.agent','gecko1_8']]]);
	var $moduleName, $moduleBase, $stats = function(){}, $sessionId = function(){};
	gwtOnLoad(null,'klay',null);
	})();


/***/ }),
/* 312 */
/***/ (function(module, exports, __webpack_require__) {

	// https://d3js.org Version 4.10.0. Copyright 2017 Mike Bostock.
	(function (global, factory) {
		 true ? factory(exports) :
		typeof define === 'function' && define.amd ? define(['exports'], factory) :
		(factory((global.d3 = global.d3 || {})));
	}(this, (function (exports) { 'use strict';

	var version = "4.10.0";

	var ascending = function(a, b) {
	  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
	};

	var bisector = function(compare) {
	  if (compare.length === 1) compare = ascendingComparator(compare);
	  return {
	    left: function(a, x, lo, hi) {
	      if (lo == null) lo = 0;
	      if (hi == null) hi = a.length;
	      while (lo < hi) {
	        var mid = lo + hi >>> 1;
	        if (compare(a[mid], x) < 0) lo = mid + 1;
	        else hi = mid;
	      }
	      return lo;
	    },
	    right: function(a, x, lo, hi) {
	      if (lo == null) lo = 0;
	      if (hi == null) hi = a.length;
	      while (lo < hi) {
	        var mid = lo + hi >>> 1;
	        if (compare(a[mid], x) > 0) hi = mid;
	        else lo = mid + 1;
	      }
	      return lo;
	    }
	  };
	};

	function ascendingComparator(f) {
	  return function(d, x) {
	    return ascending(f(d), x);
	  };
	}

	var ascendingBisect = bisector(ascending);
	var bisectRight = ascendingBisect.right;
	var bisectLeft = ascendingBisect.left;

	var pairs = function(array, f) {
	  if (f == null) f = pair;
	  var i = 0, n = array.length - 1, p = array[0], pairs = new Array(n < 0 ? 0 : n);
	  while (i < n) pairs[i] = f(p, p = array[++i]);
	  return pairs;
	};

	function pair(a, b) {
	  return [a, b];
	}

	var cross = function(values0, values1, reduce) {
	  var n0 = values0.length,
	      n1 = values1.length,
	      values = new Array(n0 * n1),
	      i0,
	      i1,
	      i,
	      value0;

	  if (reduce == null) reduce = pair;

	  for (i0 = i = 0; i0 < n0; ++i0) {
	    for (value0 = values0[i0], i1 = 0; i1 < n1; ++i1, ++i) {
	      values[i] = reduce(value0, values1[i1]);
	    }
	  }

	  return values;
	};

	var descending = function(a, b) {
	  return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;
	};

	var number = function(x) {
	  return x === null ? NaN : +x;
	};

	var variance = function(values, valueof) {
	  var n = values.length,
	      m = 0,
	      i = -1,
	      mean = 0,
	      value,
	      delta,
	      sum = 0;

	  if (valueof == null) {
	    while (++i < n) {
	      if (!isNaN(value = number(values[i]))) {
	        delta = value - mean;
	        mean += delta / ++m;
	        sum += delta * (value - mean);
	      }
	    }
	  }

	  else {
	    while (++i < n) {
	      if (!isNaN(value = number(valueof(values[i], i, values)))) {
	        delta = value - mean;
	        mean += delta / ++m;
	        sum += delta * (value - mean);
	      }
	    }
	  }

	  if (m > 1) return sum / (m - 1);
	};

	var deviation = function(array, f) {
	  var v = variance(array, f);
	  return v ? Math.sqrt(v) : v;
	};

	var extent = function(values, valueof) {
	  var n = values.length,
	      i = -1,
	      value,
	      min,
	      max;

	  if (valueof == null) {
	    while (++i < n) { // Find the first comparable value.
	      if ((value = values[i]) != null && value >= value) {
	        min = max = value;
	        while (++i < n) { // Compare the remaining values.
	          if ((value = values[i]) != null) {
	            if (min > value) min = value;
	            if (max < value) max = value;
	          }
	        }
	      }
	    }
	  }

	  else {
	    while (++i < n) { // Find the first comparable value.
	      if ((value = valueof(values[i], i, values)) != null && value >= value) {
	        min = max = value;
	        while (++i < n) { // Compare the remaining values.
	          if ((value = valueof(values[i], i, values)) != null) {
	            if (min > value) min = value;
	            if (max < value) max = value;
	          }
	        }
	      }
	    }
	  }

	  return [min, max];
	};

	var array = Array.prototype;

	var slice = array.slice;
	var map = array.map;

	var constant = function(x) {
	  return function() {
	    return x;
	  };
	};

	var identity = function(x) {
	  return x;
	};

	var sequence = function(start, stop, step) {
	  start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;

	  var i = -1,
	      n = Math.max(0, Math.ceil((stop - start) / step)) | 0,
	      range = new Array(n);

	  while (++i < n) {
	    range[i] = start + i * step;
	  }

	  return range;
	};

	var e10 = Math.sqrt(50);
	var e5 = Math.sqrt(10);
	var e2 = Math.sqrt(2);

	var ticks = function(start, stop, count) {
	  var reverse = stop < start,
	      i = -1,
	      n,
	      ticks,
	      step;

	  if (reverse) n = start, start = stop, stop = n;

	  if ((step = tickIncrement(start, stop, count)) === 0 || !isFinite(step)) return [];

	  if (step > 0) {
	    start = Math.ceil(start / step);
	    stop = Math.floor(stop / step);
	    ticks = new Array(n = Math.ceil(stop - start + 1));
	    while (++i < n) ticks[i] = (start + i) * step;
	  } else {
	    start = Math.floor(start * step);
	    stop = Math.ceil(stop * step);
	    ticks = new Array(n = Math.ceil(start - stop + 1));
	    while (++i < n) ticks[i] = (start - i) / step;
	  }

	  if (reverse) ticks.reverse();

	  return ticks;
	};

	function tickIncrement(start, stop, count) {
	  var step = (stop - start) / Math.max(0, count),
	      power = Math.floor(Math.log(step) / Math.LN10),
	      error = step / Math.pow(10, power);
	  return power >= 0
	      ? (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1) * Math.pow(10, power)
	      : -Math.pow(10, -power) / (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1);
	}

	function tickStep(start, stop, count) {
	  var step0 = Math.abs(stop - start) / Math.max(0, count),
	      step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)),
	      error = step0 / step1;
	  if (error >= e10) step1 *= 10;
	  else if (error >= e5) step1 *= 5;
	  else if (error >= e2) step1 *= 2;
	  return stop < start ? -step1 : step1;
	}

	var sturges = function(values) {
	  return Math.ceil(Math.log(values.length) / Math.LN2) + 1;
	};

	var histogram = function() {
	  var value = identity,
	      domain = extent,
	      threshold = sturges;

	  function histogram(data) {
	    var i,
	        n = data.length,
	        x,
	        values = new Array(n);

	    for (i = 0; i < n; ++i) {
	      values[i] = value(data[i], i, data);
	    }

	    var xz = domain(values),
	        x0 = xz[0],
	        x1 = xz[1],
	        tz = threshold(values, x0, x1);

	    // Convert number of thresholds into uniform thresholds.
	    if (!Array.isArray(tz)) {
	      tz = tickStep(x0, x1, tz);
	      tz = sequence(Math.ceil(x0 / tz) * tz, Math.floor(x1 / tz) * tz, tz); // exclusive
	    }

	    // Remove any thresholds outside the domain.
	    var m = tz.length;
	    while (tz[0] <= x0) tz.shift(), --m;
	    while (tz[m - 1] > x1) tz.pop(), --m;

	    var bins = new Array(m + 1),
	        bin;

	    // Initialize bins.
	    for (i = 0; i <= m; ++i) {
	      bin = bins[i] = [];
	      bin.x0 = i > 0 ? tz[i - 1] : x0;
	      bin.x1 = i < m ? tz[i] : x1;
	    }

	    // Assign data to bins by value, ignoring any outside the domain.
	    for (i = 0; i < n; ++i) {
	      x = values[i];
	      if (x0 <= x && x <= x1) {
	        bins[bisectRight(tz, x, 0, m)].push(data[i]);
	      }
	    }

	    return bins;
	  }

	  histogram.value = function(_) {
	    return arguments.length ? (value = typeof _ === "function" ? _ : constant(_), histogram) : value;
	  };

	  histogram.domain = function(_) {
	    return arguments.length ? (domain = typeof _ === "function" ? _ : constant([_[0], _[1]]), histogram) : domain;
	  };

	  histogram.thresholds = function(_) {
	    return arguments.length ? (threshold = typeof _ === "function" ? _ : Array.isArray(_) ? constant(slice.call(_)) : constant(_), histogram) : threshold;
	  };

	  return histogram;
	};

	var threshold = function(values, p, valueof) {
	  if (valueof == null) valueof = number;
	  if (!(n = values.length)) return;
	  if ((p = +p) <= 0 || n < 2) return +valueof(values[0], 0, values);
	  if (p >= 1) return +valueof(values[n - 1], n - 1, values);
	  var n,
	      i = (n - 1) * p,
	      i0 = Math.floor(i),
	      value0 = +valueof(values[i0], i0, values),
	      value1 = +valueof(values[i0 + 1], i0 + 1, values);
	  return value0 + (value1 - value0) * (i - i0);
	};

	var freedmanDiaconis = function(values, min, max) {
	  values = map.call(values, number).sort(ascending);
	  return Math.ceil((max - min) / (2 * (threshold(values, 0.75) - threshold(values, 0.25)) * Math.pow(values.length, -1 / 3)));
	};

	var scott = function(values, min, max) {
	  return Math.ceil((max - min) / (3.5 * deviation(values) * Math.pow(values.length, -1 / 3)));
	};

	var max = function(values, valueof) {
	  var n = values.length,
	      i = -1,
	      value,
	      max;

	  if (valueof == null) {
	    while (++i < n) { // Find the first comparable value.
	      if ((value = values[i]) != null && value >= value) {
	        max = value;
	        while (++i < n) { // Compare the remaining values.
	          if ((value = values[i]) != null && value > max) {
	            max = value;
	          }
	        }
	      }
	    }
	  }

	  else {
	    while (++i < n) { // Find the first comparable value.
	      if ((value = valueof(values[i], i, values)) != null && value >= value) {
	        max = value;
	        while (++i < n) { // Compare the remaining values.
	          if ((value = valueof(values[i], i, values)) != null && value > max) {
	            max = value;
	          }
	        }
	      }
	    }
	  }

	  return max;
	};

	var mean = function(values, valueof) {
	  var n = values.length,
	      m = n,
	      i = -1,
	      value,
	      sum = 0;

	  if (valueof == null) {
	    while (++i < n) {
	      if (!isNaN(value = number(values[i]))) sum += value;
	      else --m;
	    }
	  }

	  else {
	    while (++i < n) {
	      if (!isNaN(value = number(valueof(values[i], i, values)))) sum += value;
	      else --m;
	    }
	  }

	  if (m) return sum / m;
	};

	var median = function(values, valueof) {
	  var n = values.length,
	      i = -1,
	      value,
	      numbers = [];

	  if (valueof == null) {
	    while (++i < n) {
	      if (!isNaN(value = number(values[i]))) {
	        numbers.push(value);
	      }
	    }
	  }

	  else {
	    while (++i < n) {
	      if (!isNaN(value = number(valueof(values[i], i, values)))) {
	        numbers.push(value);
	      }
	    }
	  }

	  return threshold(numbers.sort(ascending), 0.5);
	};

	var merge = function(arrays) {
	  var n = arrays.length,
	      m,
	      i = -1,
	      j = 0,
	      merged,
	      array;

	  while (++i < n) j += arrays[i].length;
	  merged = new Array(j);

	  while (--n >= 0) {
	    array = arrays[n];
	    m = array.length;
	    while (--m >= 0) {
	      merged[--j] = array[m];
	    }
	  }

	  return merged;
	};

	var min = function(values, valueof) {
	  var n = values.length,
	      i = -1,
	      value,
	      min;

	  if (valueof == null) {
	    while (++i < n) { // Find the first comparable value.
	      if ((value = values[i]) != null && value >= value) {
	        min = value;
	        while (++i < n) { // Compare the remaining values.
	          if ((value = values[i]) != null && min > value) {
	            min = value;
	          }
	        }
	      }
	    }
	  }

	  else {
	    while (++i < n) { // Find the first comparable value.
	      if ((value = valueof(values[i], i, values)) != null && value >= value) {
	        min = value;
	        while (++i < n) { // Compare the remaining values.
	          if ((value = valueof(values[i], i, values)) != null && min > value) {
	            min = value;
	          }
	        }
	      }
	    }
	  }

	  return min;
	};

	var permute = function(array, indexes) {
	  var i = indexes.length, permutes = new Array(i);
	  while (i--) permutes[i] = array[indexes[i]];
	  return permutes;
	};

	var scan = function(values, compare) {
	  if (!(n = values.length)) return;
	  var n,
	      i = 0,
	      j = 0,
	      xi,
	      xj = values[j];

	  if (compare == null) compare = ascending;

	  while (++i < n) {
	    if (compare(xi = values[i], xj) < 0 || compare(xj, xj) !== 0) {
	      xj = xi, j = i;
	    }
	  }

	  if (compare(xj, xj) === 0) return j;
	};

	var shuffle = function(array, i0, i1) {
	  var m = (i1 == null ? array.length : i1) - (i0 = i0 == null ? 0 : +i0),
	      t,
	      i;

	  while (m) {
	    i = Math.random() * m-- | 0;
	    t = array[m + i0];
	    array[m + i0] = array[i + i0];
	    array[i + i0] = t;
	  }

	  return array;
	};

	var sum = function(values, valueof) {
	  var n = values.length,
	      i = -1,
	      value,
	      sum = 0;

	  if (valueof == null) {
	    while (++i < n) {
	      if (value = +values[i]) sum += value; // Note: zero and null are equivalent.
	    }
	  }

	  else {
	    while (++i < n) {
	      if (value = +valueof(values[i], i, values)) sum += value;
	    }
	  }

	  return sum;
	};

	var transpose = function(matrix) {
	  if (!(n = matrix.length)) return [];
	  for (var i = -1, m = min(matrix, length), transpose = new Array(m); ++i < m;) {
	    for (var j = -1, n, row = transpose[i] = new Array(n); ++j < n;) {
	      row[j] = matrix[j][i];
	    }
	  }
	  return transpose;
	};

	function length(d) {
	  return d.length;
	}

	var zip = function() {
	  return transpose(arguments);
	};

	var slice$1 = Array.prototype.slice;

	var identity$1 = function(x) {
	  return x;
	};

	var top = 1;
	var right = 2;
	var bottom = 3;
	var left = 4;
	var epsilon = 1e-6;

	function translateX(x) {
	  return "translate(" + (x + 0.5) + ",0)";
	}

	function translateY(y) {
	  return "translate(0," + (y + 0.5) + ")";
	}

	function number$1(scale) {
	  return function(d) {
	    return +scale(d);
	  };
	}

	function center(scale) {
	  var offset = Math.max(0, scale.bandwidth() - 1) / 2; // Adjust for 0.5px offset.
	  if (scale.round()) offset = Math.round(offset);
	  return function(d) {
	    return +scale(d) + offset;
	  };
	}

	function entering() {
	  return !this.__axis;
	}

	function axis(orient, scale) {
	  var tickArguments = [],
	      tickValues = null,
	      tickFormat = null,
	      tickSizeInner = 6,
	      tickSizeOuter = 6,
	      tickPadding = 3,
	      k = orient === top || orient === left ? -1 : 1,
	      x = orient === left || orient === right ? "x" : "y",
	      transform = orient === top || orient === bottom ? translateX : translateY;

	  function axis(context) {
	    var values = tickValues == null ? (scale.ticks ? scale.ticks.apply(scale, tickArguments) : scale.domain()) : tickValues,
	        format = tickFormat == null ? (scale.tickFormat ? scale.tickFormat.apply(scale, tickArguments) : identity$1) : tickFormat,
	        spacing = Math.max(tickSizeInner, 0) + tickPadding,
	        range = scale.range(),
	        range0 = +range[0] + 0.5,
	        range1 = +range[range.length - 1] + 0.5,
	        position = (scale.bandwidth ? center : number$1)(scale.copy()),
	        selection = context.selection ? context.selection() : context,
	        path = selection.selectAll(".domain").data([null]),
	        tick = selection.selectAll(".tick").data(values, scale).order(),
	        tickExit = tick.exit(),
	        tickEnter = tick.enter().append("g").attr("class", "tick"),
	        line = tick.select("line"),
	        text = tick.select("text");

	    path = path.merge(path.enter().insert("path", ".tick")
	        .attr("class", "domain")
	        .attr("stroke", "#000"));

	    tick = tick.merge(tickEnter);

	    line = line.merge(tickEnter.append("line")
	        .attr("stroke", "#000")
	        .attr(x + "2", k * tickSizeInner));

	    text = text.merge(tickEnter.append("text")
	        .attr("fill", "#000")
	        .attr(x, k * spacing)
	        .attr("dy", orient === top ? "0em" : orient === bottom ? "0.71em" : "0.32em"));

	    if (context !== selection) {
	      path = path.transition(context);
	      tick = tick.transition(context);
	      line = line.transition(context);
	      text = text.transition(context);

	      tickExit = tickExit.transition(context)
	          .attr("opacity", epsilon)
	          .attr("transform", function(d) { return isFinite(d = position(d)) ? transform(d) : this.getAttribute("transform"); });

	      tickEnter
	          .attr("opacity", epsilon)
	          .attr("transform", function(d) { var p = this.parentNode.__axis; return transform(p && isFinite(p = p(d)) ? p : position(d)); });
	    }

	    tickExit.remove();

	    path
	        .attr("d", orient === left || orient == right
	            ? "M" + k * tickSizeOuter + "," + range0 + "H0.5V" + range1 + "H" + k * tickSizeOuter
	            : "M" + range0 + "," + k * tickSizeOuter + "V0.5H" + range1 + "V" + k * tickSizeOuter);

	    tick
	        .attr("opacity", 1)
	        .attr("transform", function(d) { return transform(position(d)); });

	    line
	        .attr(x + "2", k * tickSizeInner);

	    text
	        .attr(x, k * spacing)
	        .text(format);

	    selection.filter(entering)
	        .attr("fill", "none")
	        .attr("font-size", 10)
	        .attr("font-family", "sans-serif")
	        .attr("text-anchor", orient === right ? "start" : orient === left ? "end" : "middle");

	    selection
	        .each(function() { this.__axis = position; });
	  }

	  axis.scale = function(_) {
	    return arguments.length ? (scale = _, axis) : scale;
	  };

	  axis.ticks = function() {
	    return tickArguments = slice$1.call(arguments), axis;
	  };

	  axis.tickArguments = function(_) {
	    return arguments.length ? (tickArguments = _ == null ? [] : slice$1.call(_), axis) : tickArguments.slice();
	  };

	  axis.tickValues = function(_) {
	    return arguments.length ? (tickValues = _ == null ? null : slice$1.call(_), axis) : tickValues && tickValues.slice();
	  };

	  axis.tickFormat = function(_) {
	    return arguments.length ? (tickFormat = _, axis) : tickFormat;
	  };

	  axis.tickSize = function(_) {
	    return arguments.length ? (tickSizeInner = tickSizeOuter = +_, axis) : tickSizeInner;
	  };

	  axis.tickSizeInner = function(_) {
	    return arguments.length ? (tickSizeInner = +_, axis) : tickSizeInner;
	  };

	  axis.tickSizeOuter = function(_) {
	    return arguments.length ? (tickSizeOuter = +_, axis) : tickSizeOuter;
	  };

	  axis.tickPadding = function(_) {
	    return arguments.length ? (tickPadding = +_, axis) : tickPadding;
	  };

	  return axis;
	}

	function axisTop(scale) {
	  return axis(top, scale);
	}

	function axisRight(scale) {
	  return axis(right, scale);
	}

	function axisBottom(scale) {
	  return axis(bottom, scale);
	}

	function axisLeft(scale) {
	  return axis(left, scale);
	}

	var noop = {value: function() {}};

	function dispatch() {
	  for (var i = 0, n = arguments.length, _ = {}, t; i < n; ++i) {
	    if (!(t = arguments[i] + "") || (t in _)) throw new Error("illegal type: " + t);
	    _[t] = [];
	  }
	  return new Dispatch(_);
	}

	function Dispatch(_) {
	  this._ = _;
	}

	function parseTypenames(typenames, types) {
	  return typenames.trim().split(/^|\s+/).map(function(t) {
	    var name = "", i = t.indexOf(".");
	    if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);
	    if (t && !types.hasOwnProperty(t)) throw new Error("unknown type: " + t);
	    return {type: t, name: name};
	  });
	}

	Dispatch.prototype = dispatch.prototype = {
	  constructor: Dispatch,
	  on: function(typename, callback) {
	    var _ = this._,
	        T = parseTypenames(typename + "", _),
	        t,
	        i = -1,
	        n = T.length;

	    // If no callback was specified, return the callback of the given type and name.
	    if (arguments.length < 2) {
	      while (++i < n) if ((t = (typename = T[i]).type) && (t = get(_[t], typename.name))) return t;
	      return;
	    }

	    // If a type was specified, set the callback for the given type and name.
	    // Otherwise, if a null callback was specified, remove callbacks of the given name.
	    if (callback != null && typeof callback !== "function") throw new Error("invalid callback: " + callback);
	    while (++i < n) {
	      if (t = (typename = T[i]).type) _[t] = set(_[t], typename.name, callback);
	      else if (callback == null) for (t in _) _[t] = set(_[t], typename.name, null);
	    }

	    return this;
	  },
	  copy: function() {
	    var copy = {}, _ = this._;
	    for (var t in _) copy[t] = _[t].slice();
	    return new Dispatch(copy);
	  },
	  call: function(type, that) {
	    if ((n = arguments.length - 2) > 0) for (var args = new Array(n), i = 0, n, t; i < n; ++i) args[i] = arguments[i + 2];
	    if (!this._.hasOwnProperty(type)) throw new Error("unknown type: " + type);
	    for (t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);
	  },
	  apply: function(type, that, args) {
	    if (!this._.hasOwnProperty(type)) throw new Error("unknown type: " + type);
	    for (var t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);
	  }
	};

	function get(type, name) {
	  for (var i = 0, n = type.length, c; i < n; ++i) {
	    if ((c = type[i]).name === name) {
	      return c.value;
	    }
	  }
	}

	function set(type, name, callback) {
	  for (var i = 0, n = type.length; i < n; ++i) {
	    if (type[i].name === name) {
	      type[i] = noop, type = type.slice(0, i).concat(type.slice(i + 1));
	      break;
	    }
	  }
	  if (callback != null) type.push({name: name, value: callback});
	  return type;
	}

	var xhtml = "http://www.w3.org/1999/xhtml";

	var namespaces = {
	  svg: "http://www.w3.org/2000/svg",
	  xhtml: xhtml,
	  xlink: "http://www.w3.org/1999/xlink",
	  xml: "http://www.w3.org/XML/1998/namespace",
	  xmlns: "http://www.w3.org/2000/xmlns/"
	};

	var namespace = function(name) {
	  var prefix = name += "", i = prefix.indexOf(":");
	  if (i >= 0 && (prefix = name.slice(0, i)) !== "xmlns") name = name.slice(i + 1);
	  return namespaces.hasOwnProperty(prefix) ? {space: namespaces[prefix], local: name} : name;
	};

	function creatorInherit(name) {
	  return function() {
	    var document = this.ownerDocument,
	        uri = this.namespaceURI;
	    return uri === xhtml && document.documentElement.namespaceURI === xhtml
	        ? document.createElement(name)
	        : document.createElementNS(uri, name);
	  };
	}

	function creatorFixed(fullname) {
	  return function() {
	    return this.ownerDocument.createElementNS(fullname.space, fullname.local);
	  };
	}

	var creator = function(name) {
	  var fullname = namespace(name);
	  return (fullname.local
	      ? creatorFixed
	      : creatorInherit)(fullname);
	};

	var nextId = 0;

	function local$1() {
	  return new Local;
	}

	function Local() {
	  this._ = "@" + (++nextId).toString(36);
	}

	Local.prototype = local$1.prototype = {
	  constructor: Local,
	  get: function(node) {
	    var id = this._;
	    while (!(id in node)) if (!(node = node.parentNode)) return;
	    return node[id];
	  },
	  set: function(node, value) {
	    return node[this._] = value;
	  },
	  remove: function(node) {
	    return this._ in node && delete node[this._];
	  },
	  toString: function() {
	    return this._;
	  }
	};

	var matcher = function(selector) {
	  return function() {
	    return this.matches(selector);
	  };
	};

	if (typeof document !== "undefined") {
	  var element = document.documentElement;
	  if (!element.matches) {
	    var vendorMatches = element.webkitMatchesSelector
	        || element.msMatchesSelector
	        || element.mozMatchesSelector
	        || element.oMatchesSelector;
	    matcher = function(selector) {
	      return function() {
	        return vendorMatches.call(this, selector);
	      };
	    };
	  }
	}

	var matcher$1 = matcher;

	var filterEvents = {};

	exports.event = null;

	if (typeof document !== "undefined") {
	  var element$1 = document.documentElement;
	  if (!("onmouseenter" in element$1)) {
	    filterEvents = {mouseenter: "mouseover", mouseleave: "mouseout"};
	  }
	}

	function filterContextListener(listener, index, group) {
	  listener = contextListener(listener, index, group);
	  return function(event) {
	    var related = event.relatedTarget;
	    if (!related || (related !== this && !(related.compareDocumentPosition(this) & 8))) {
	      listener.call(this, event);
	    }
	  };
	}

	function contextListener(listener, index, group) {
	  return function(event1) {
	    var event0 = exports.event; // Events can be reentrant (e.g., focus).
	    exports.event = event1;
	    try {
	      listener.call(this, this.__data__, index, group);
	    } finally {
	      exports.event = event0;
	    }
	  };
	}

	function parseTypenames$1(typenames) {
	  return typenames.trim().split(/^|\s+/).map(function(t) {
	    var name = "", i = t.indexOf(".");
	    if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);
	    return {type: t, name: name};
	  });
	}

	function onRemove(typename) {
	  return function() {
	    var on = this.__on;
	    if (!on) return;
	    for (var j = 0, i = -1, m = on.length, o; j < m; ++j) {
	      if (o = on[j], (!typename.type || o.type === typename.type) && o.name === typename.name) {
	        this.removeEventListener(o.type, o.listener, o.capture);
	      } else {
	        on[++i] = o;
	      }
	    }
	    if (++i) on.length = i;
	    else delete this.__on;
	  };
	}

	function onAdd(typename, value, capture) {
	  var wrap = filterEvents.hasOwnProperty(typename.type) ? filterContextListener : contextListener;
	  return function(d, i, group) {
	    var on = this.__on, o, listener = wrap(value, i, group);
	    if (on) for (var j = 0, m = on.length; j < m; ++j) {
	      if ((o = on[j]).type === typename.type && o.name === typename.name) {
	        this.removeEventListener(o.type, o.listener, o.capture);
	        this.addEventListener(o.type, o.listener = listener, o.capture = capture);
	        o.value = value;
	        return;
	      }
	    }
	    this.addEventListener(typename.type, listener, capture);
	    o = {type: typename.type, name: typename.name, value: value, listener: listener, capture: capture};
	    if (!on) this.__on = [o];
	    else on.push(o);
	  };
	}

	var selection_on = function(typename, value, capture) {
	  var typenames = parseTypenames$1(typename + ""), i, n = typenames.length, t;

	  if (arguments.length < 2) {
	    var on = this.node().__on;
	    if (on) for (var j = 0, m = on.length, o; j < m; ++j) {
	      for (i = 0, o = on[j]; i < n; ++i) {
	        if ((t = typenames[i]).type === o.type && t.name === o.name) {
	          return o.value;
	        }
	      }
	    }
	    return;
	  }

	  on = value ? onAdd : onRemove;
	  if (capture == null) capture = false;
	  for (i = 0; i < n; ++i) this.each(on(typenames[i], value, capture));
	  return this;
	};

	function customEvent(event1, listener, that, args) {
	  var event0 = exports.event;
	  event1.sourceEvent = exports.event;
	  exports.event = event1;
	  try {
	    return listener.apply(that, args);
	  } finally {
	    exports.event = event0;
	  }
	}

	var sourceEvent = function() {
	  var current = exports.event, source;
	  while (source = current.sourceEvent) current = source;
	  return current;
	};

	var point = function(node, event) {
	  var svg = node.ownerSVGElement || node;

	  if (svg.createSVGPoint) {
	    var point = svg.createSVGPoint();
	    point.x = event.clientX, point.y = event.clientY;
	    point = point.matrixTransform(node.getScreenCTM().inverse());
	    return [point.x, point.y];
	  }

	  var rect = node.getBoundingClientRect();
	  return [event.clientX - rect.left - node.clientLeft, event.clientY - rect.top - node.clientTop];
	};

	var mouse = function(node) {
	  var event = sourceEvent();
	  if (event.changedTouches) event = event.changedTouches[0];
	  return point(node, event);
	};

	function none() {}

	var selector = function(selector) {
	  return selector == null ? none : function() {
	    return this.querySelector(selector);
	  };
	};

	var selection_select = function(select) {
	  if (typeof select !== "function") select = selector(select);

	  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
	    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
	      if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {
	        if ("__data__" in node) subnode.__data__ = node.__data__;
	        subgroup[i] = subnode;
	      }
	    }
	  }

	  return new Selection(subgroups, this._parents);
	};

	function empty$1() {
	  return [];
	}

	var selectorAll = function(selector) {
	  return selector == null ? empty$1 : function() {
	    return this.querySelectorAll(selector);
	  };
	};

	var selection_selectAll = function(select) {
	  if (typeof select !== "function") select = selectorAll(select);

	  for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {
	    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
	      if (node = group[i]) {
	        subgroups.push(select.call(node, node.__data__, i, group));
	        parents.push(node);
	      }
	    }
	  }

	  return new Selection(subgroups, parents);
	};

	var selection_filter = function(match) {
	  if (typeof match !== "function") match = matcher$1(match);

	  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
	    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {
	      if ((node = group[i]) && match.call(node, node.__data__, i, group)) {
	        subgroup.push(node);
	      }
	    }
	  }

	  return new Selection(subgroups, this._parents);
	};

	var sparse = function(update) {
	  return new Array(update.length);
	};

	var selection_enter = function() {
	  return new Selection(this._enter || this._groups.map(sparse), this._parents);
	};

	function EnterNode(parent, datum) {
	  this.ownerDocument = parent.ownerDocument;
	  this.namespaceURI = parent.namespaceURI;
	  this._next = null;
	  this._parent = parent;
	  this.__data__ = datum;
	}

	EnterNode.prototype = {
	  constructor: EnterNode,
	  appendChild: function(child) { return this._parent.insertBefore(child, this._next); },
	  insertBefore: function(child, next) { return this._parent.insertBefore(child, next); },
	  querySelector: function(selector) { return this._parent.querySelector(selector); },
	  querySelectorAll: function(selector) { return this._parent.querySelectorAll(selector); }
	};

	var constant$1 = function(x) {
	  return function() {
	    return x;
	  };
	};

	var keyPrefix = "$"; // Protect against keys like “__proto__”.

	function bindIndex(parent, group, enter, update, exit, data) {
	  var i = 0,
	      node,
	      groupLength = group.length,
	      dataLength = data.length;

	  // Put any non-null nodes that fit into update.
	  // Put any null nodes into enter.
	  // Put any remaining data into enter.
	  for (; i < dataLength; ++i) {
	    if (node = group[i]) {
	      node.__data__ = data[i];
	      update[i] = node;
	    } else {
	      enter[i] = new EnterNode(parent, data[i]);
	    }
	  }

	  // Put any non-null nodes that don’t fit into exit.
	  for (; i < groupLength; ++i) {
	    if (node = group[i]) {
	      exit[i] = node;
	    }
	  }
	}

	function bindKey(parent, group, enter, update, exit, data, key) {
	  var i,
	      node,
	      nodeByKeyValue = {},
	      groupLength = group.length,
	      dataLength = data.length,
	      keyValues = new Array(groupLength),
	      keyValue;

	  // Compute the key for each node.
	  // If multiple nodes have the same key, the duplicates are added to exit.
	  for (i = 0; i < groupLength; ++i) {
	    if (node = group[i]) {
	      keyValues[i] = keyValue = keyPrefix + key.call(node, node.__data__, i, group);
	      if (keyValue in nodeByKeyValue) {
	        exit[i] = node;
	      } else {
	        nodeByKeyValue[keyValue] = node;
	      }
	    }
	  }

	  // Compute the key for each datum.
	  // If there a node associated with this key, join and add it to update.
	  // If there is not (or the key is a duplicate), add it to enter.
	  for (i = 0; i < dataLength; ++i) {
	    keyValue = keyPrefix + key.call(parent, data[i], i, data);
	    if (node = nodeByKeyValue[keyValue]) {
	      update[i] = node;
	      node.__data__ = data[i];
	      nodeByKeyValue[keyValue] = null;
	    } else {
	      enter[i] = new EnterNode(parent, data[i]);
	    }
	  }

	  // Add any remaining nodes that were not bound to data to exit.
	  for (i = 0; i < groupLength; ++i) {
	    if ((node = group[i]) && (nodeByKeyValue[keyValues[i]] === node)) {
	      exit[i] = node;
	    }
	  }
	}

	var selection_data = function(value, key) {
	  if (!value) {
	    data = new Array(this.size()), j = -1;
	    this.each(function(d) { data[++j] = d; });
	    return data;
	  }

	  var bind = key ? bindKey : bindIndex,
	      parents = this._parents,
	      groups = this._groups;

	  if (typeof value !== "function") value = constant$1(value);

	  for (var m = groups.length, update = new Array(m), enter = new Array(m), exit = new Array(m), j = 0; j < m; ++j) {
	    var parent = parents[j],
	        group = groups[j],
	        groupLength = group.length,
	        data = value.call(parent, parent && parent.__data__, j, parents),
	        dataLength = data.length,
	        enterGroup = enter[j] = new Array(dataLength),
	        updateGroup = update[j] = new Array(dataLength),
	        exitGroup = exit[j] = new Array(groupLength);

	    bind(parent, group, enterGroup, updateGroup, exitGroup, data, key);

	    // Now connect the enter nodes to their following update node, such that
	    // appendChild can insert the materialized enter node before this node,
	    // rather than at the end of the parent node.
	    for (var i0 = 0, i1 = 0, previous, next; i0 < dataLength; ++i0) {
	      if (previous = enterGroup[i0]) {
	        if (i0 >= i1) i1 = i0 + 1;
	        while (!(next = updateGroup[i1]) && ++i1 < dataLength);
	        previous._next = next || null;
	      }
	    }
	  }

	  update = new Selection(update, parents);
	  update._enter = enter;
	  update._exit = exit;
	  return update;
	};

	var selection_exit = function() {
	  return new Selection(this._exit || this._groups.map(sparse), this._parents);
	};

	var selection_merge = function(selection$$1) {

	  for (var groups0 = this._groups, groups1 = selection$$1._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {
	    for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
	      if (node = group0[i] || group1[i]) {
	        merge[i] = node;
	      }
	    }
	  }

	  for (; j < m0; ++j) {
	    merges[j] = groups0[j];
	  }

	  return new Selection(merges, this._parents);
	};

	var selection_order = function() {

	  for (var groups = this._groups, j = -1, m = groups.length; ++j < m;) {
	    for (var group = groups[j], i = group.length - 1, next = group[i], node; --i >= 0;) {
	      if (node = group[i]) {
	        if (next && next !== node.nextSibling) next.parentNode.insertBefore(node, next);
	        next = node;
	      }
	    }
	  }

	  return this;
	};

	var selection_sort = function(compare) {
	  if (!compare) compare = ascending$1;

	  function compareNode(a, b) {
	    return a && b ? compare(a.__data__, b.__data__) : !a - !b;
	  }

	  for (var groups = this._groups, m = groups.length, sortgroups = new Array(m), j = 0; j < m; ++j) {
	    for (var group = groups[j], n = group.length, sortgroup = sortgroups[j] = new Array(n), node, i = 0; i < n; ++i) {
	      if (node = group[i]) {
	        sortgroup[i] = node;
	      }
	    }
	    sortgroup.sort(compareNode);
	  }

	  return new Selection(sortgroups, this._parents).order();
	};

	function ascending$1(a, b) {
	  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
	}

	var selection_call = function() {
	  var callback = arguments[0];
	  arguments[0] = this;
	  callback.apply(null, arguments);
	  return this;
	};

	var selection_nodes = function() {
	  var nodes = new Array(this.size()), i = -1;
	  this.each(function() { nodes[++i] = this; });
	  return nodes;
	};

	var selection_node = function() {

	  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
	    for (var group = groups[j], i = 0, n = group.length; i < n; ++i) {
	      var node = group[i];
	      if (node) return node;
	    }
	  }

	  return null;
	};

	var selection_size = function() {
	  var size = 0;
	  this.each(function() { ++size; });
	  return size;
	};

	var selection_empty = function() {
	  return !this.node();
	};

	var selection_each = function(callback) {

	  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
	    for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {
	      if (node = group[i]) callback.call(node, node.__data__, i, group);
	    }
	  }

	  return this;
	};

	function attrRemove(name) {
	  return function() {
	    this.removeAttribute(name);
	  };
	}

	function attrRemoveNS(fullname) {
	  return function() {
	    this.removeAttributeNS(fullname.space, fullname.local);
	  };
	}

	function attrConstant(name, value) {
	  return function() {
	    this.setAttribute(name, value);
	  };
	}

	function attrConstantNS(fullname, value) {
	  return function() {
	    this.setAttributeNS(fullname.space, fullname.local, value);
	  };
	}

	function attrFunction(name, value) {
	  return function() {
	    var v = value.apply(this, arguments);
	    if (v == null) this.removeAttribute(name);
	    else this.setAttribute(name, v);
	  };
	}

	function attrFunctionNS(fullname, value) {
	  return function() {
	    var v = value.apply(this, arguments);
	    if (v == null) this.removeAttributeNS(fullname.space, fullname.local);
	    else this.setAttributeNS(fullname.space, fullname.local, v);
	  };
	}

	var selection_attr = function(name, value) {
	  var fullname = namespace(name);

	  if (arguments.length < 2) {
	    var node = this.node();
	    return fullname.local
	        ? node.getAttributeNS(fullname.space, fullname.local)
	        : node.getAttribute(fullname);
	  }

	  return this.each((value == null
	      ? (fullname.local ? attrRemoveNS : attrRemove) : (typeof value === "function"
	      ? (fullname.local ? attrFunctionNS : attrFunction)
	      : (fullname.local ? attrConstantNS : attrConstant)))(fullname, value));
	};

	var defaultView = function(node) {
	  return (node.ownerDocument && node.ownerDocument.defaultView) // node is a Node
	      || (node.document && node) // node is a Window
	      || node.defaultView; // node is a Document
	};

	function styleRemove(name) {
	  return function() {
	    this.style.removeProperty(name);
	  };
	}

	function styleConstant(name, value, priority) {
	  return function() {
	    this.style.setProperty(name, value, priority);
	  };
	}

	function styleFunction(name, value, priority) {
	  return function() {
	    var v = value.apply(this, arguments);
	    if (v == null) this.style.removeProperty(name);
	    else this.style.setProperty(name, v, priority);
	  };
	}

	var selection_style = function(name, value, priority) {
	  return arguments.length > 1
	      ? this.each((value == null
	            ? styleRemove : typeof value === "function"
	            ? styleFunction
	            : styleConstant)(name, value, priority == null ? "" : priority))
	      : styleValue(this.node(), name);
	};

	function styleValue(node, name) {
	  return node.style.getPropertyValue(name)
	      || defaultView(node).getComputedStyle(node, null).getPropertyValue(name);
	}

	function propertyRemove(name) {
	  return function() {
	    delete this[name];
	  };
	}

	function propertyConstant(name, value) {
	  return function() {
	    this[name] = value;
	  };
	}

	function propertyFunction(name, value) {
	  return function() {
	    var v = value.apply(this, arguments);
	    if (v == null) delete this[name];
	    else this[name] = v;
	  };
	}

	var selection_property = function(name, value) {
	  return arguments.length > 1
	      ? this.each((value == null
	          ? propertyRemove : typeof value === "function"
	          ? propertyFunction
	          : propertyConstant)(name, value))
	      : this.node()[name];
	};

	function classArray(string) {
	  return string.trim().split(/^|\s+/);
	}

	function classList(node) {
	  return node.classList || new ClassList(node);
	}

	function ClassList(node) {
	  this._node = node;
	  this._names = classArray(node.getAttribute("class") || "");
	}

	ClassList.prototype = {
	  add: function(name) {
	    var i = this._names.indexOf(name);
	    if (i < 0) {
	      this._names.push(name);
	      this._node.setAttribute("class", this._names.join(" "));
	    }
	  },
	  remove: function(name) {
	    var i = this._names.indexOf(name);
	    if (i >= 0) {
	      this._names.splice(i, 1);
	      this._node.setAttribute("class", this._names.join(" "));
	    }
	  },
	  contains: function(name) {
	    return this._names.indexOf(name) >= 0;
	  }
	};

	function classedAdd(node, names) {
	  var list = classList(node), i = -1, n = names.length;
	  while (++i < n) list.add(names[i]);
	}

	function classedRemove(node, names) {
	  var list = classList(node), i = -1, n = names.length;
	  while (++i < n) list.remove(names[i]);
	}

	function classedTrue(names) {
	  return function() {
	    classedAdd(this, names);
	  };
	}

	function classedFalse(names) {
	  return function() {
	    classedRemove(this, names);
	  };
	}

	function classedFunction(names, value) {
	  return function() {
	    (value.apply(this, arguments) ? classedAdd : classedRemove)(this, names);
	  };
	}

	var selection_classed = function(name, value) {
	  var names = classArray(name + "");

	  if (arguments.length < 2) {
	    var list = classList(this.node()), i = -1, n = names.length;
	    while (++i < n) if (!list.contains(names[i])) return false;
	    return true;
	  }

	  return this.each((typeof value === "function"
	      ? classedFunction : value
	      ? classedTrue
	      : classedFalse)(names, value));
	};

	function textRemove() {
	  this.textContent = "";
	}

	function textConstant(value) {
	  return function() {
	    this.textContent = value;
	  };
	}

	function textFunction(value) {
	  return function() {
	    var v = value.apply(this, arguments);
	    this.textContent = v == null ? "" : v;
	  };
	}

	var selection_text = function(value) {
	  return arguments.length
	      ? this.each(value == null
	          ? textRemove : (typeof value === "function"
	          ? textFunction
	          : textConstant)(value))
	      : this.node().textContent;
	};

	function htmlRemove() {
	  this.innerHTML = "";
	}

	function htmlConstant(value) {
	  return function() {
	    this.innerHTML = value;
	  };
	}

	function htmlFunction(value) {
	  return function() {
	    var v = value.apply(this, arguments);
	    this.innerHTML = v == null ? "" : v;
	  };
	}

	var selection_html = function(value) {
	  return arguments.length
	      ? this.each(value == null
	          ? htmlRemove : (typeof value === "function"
	          ? htmlFunction
	          : htmlConstant)(value))
	      : this.node().innerHTML;
	};

	function raise() {
	  if (this.nextSibling) this.parentNode.appendChild(this);
	}

	var selection_raise = function() {
	  return this.each(raise);
	};

	function lower() {
	  if (this.previousSibling) this.parentNode.insertBefore(this, this.parentNode.firstChild);
	}

	var selection_lower = function() {
	  return this.each(lower);
	};

	var selection_append = function(name) {
	  var create = typeof name === "function" ? name : creator(name);
	  return this.select(function() {
	    return this.appendChild(create.apply(this, arguments));
	  });
	};

	function constantNull() {
	  return null;
	}

	var selection_insert = function(name, before) {
	  var create = typeof name === "function" ? name : creator(name),
	      select = before == null ? constantNull : typeof before === "function" ? before : selector(before);
	  return this.select(function() {
	    return this.insertBefore(create.apply(this, arguments), select.apply(this, arguments) || null);
	  });
	};

	function remove() {
	  var parent = this.parentNode;
	  if (parent) parent.removeChild(this);
	}

	var selection_remove = function() {
	  return this.each(remove);
	};

	var selection_datum = function(value) {
	  return arguments.length
	      ? this.property("__data__", value)
	      : this.node().__data__;
	};

	function dispatchEvent(node, type, params) {
	  var window = defaultView(node),
	      event = window.CustomEvent;

	  if (typeof event === "function") {
	    event = new event(type, params);
	  } else {
	    event = window.document.createEvent("Event");
	    if (params) event.initEvent(type, params.bubbles, params.cancelable), event.detail = params.detail;
	    else event.initEvent(type, false, false);
	  }

	  node.dispatchEvent(event);
	}

	function dispatchConstant(type, params) {
	  return function() {
	    return dispatchEvent(this, type, params);
	  };
	}

	function dispatchFunction(type, params) {
	  return function() {
	    return dispatchEvent(this, type, params.apply(this, arguments));
	  };
	}

	var selection_dispatch = function(type, params) {
	  return this.each((typeof params === "function"
	      ? dispatchFunction
	      : dispatchConstant)(type, params));
	};

	var root = [null];

	function Selection(groups, parents) {
	  this._groups = groups;
	  this._parents = parents;
	}

	function selection() {
	  return new Selection([[document.documentElement]], root);
	}

	Selection.prototype = selection.prototype = {
	  constructor: Selection,
	  select: selection_select,
	  selectAll: selection_selectAll,
	  filter: selection_filter,
	  data: selection_data,
	  enter: selection_enter,
	  exit: selection_exit,
	  merge: selection_merge,
	  order: selection_order,
	  sort: selection_sort,
	  call: selection_call,
	  nodes: selection_nodes,
	  node: selection_node,
	  size: selection_size,
	  empty: selection_empty,
	  each: selection_each,
	  attr: selection_attr,
	  style: selection_style,
	  property: selection_property,
	  classed: selection_classed,
	  text: selection_text,
	  html: selection_html,
	  raise: selection_raise,
	  lower: selection_lower,
	  append: selection_append,
	  insert: selection_insert,
	  remove: selection_remove,
	  datum: selection_datum,
	  on: selection_on,
	  dispatch: selection_dispatch
	};

	var select = function(selector) {
	  return typeof selector === "string"
	      ? new Selection([[document.querySelector(selector)]], [document.documentElement])
	      : new Selection([[selector]], root);
	};

	var selectAll = function(selector) {
	  return typeof selector === "string"
	      ? new Selection([document.querySelectorAll(selector)], [document.documentElement])
	      : new Selection([selector == null ? [] : selector], root);
	};

	var touch = function(node, touches, identifier) {
	  if (arguments.length < 3) identifier = touches, touches = sourceEvent().changedTouches;

	  for (var i = 0, n = touches ? touches.length : 0, touch; i < n; ++i) {
	    if ((touch = touches[i]).identifier === identifier) {
	      return point(node, touch);
	    }
	  }

	  return null;
	};

	var touches = function(node, touches) {
	  if (touches == null) touches = sourceEvent().touches;

	  for (var i = 0, n = touches ? touches.length : 0, points = new Array(n); i < n; ++i) {
	    points[i] = point(node, touches[i]);
	  }

	  return points;
	};

	function nopropagation() {
	  exports.event.stopImmediatePropagation();
	}

	var noevent = function() {
	  exports.event.preventDefault();
	  exports.event.stopImmediatePropagation();
	};

	var dragDisable = function(view) {
	  var root = view.document.documentElement,
	      selection$$1 = select(view).on("dragstart.drag", noevent, true);
	  if ("onselectstart" in root) {
	    selection$$1.on("selectstart.drag", noevent, true);
	  } else {
	    root.__noselect = root.style.MozUserSelect;
	    root.style.MozUserSelect = "none";
	  }
	};

	function yesdrag(view, noclick) {
	  var root = view.document.documentElement,
	      selection$$1 = select(view).on("dragstart.drag", null);
	  if (noclick) {
	    selection$$1.on("click.drag", noevent, true);
	    setTimeout(function() { selection$$1.on("click.drag", null); }, 0);
	  }
	  if ("onselectstart" in root) {
	    selection$$1.on("selectstart.drag", null);
	  } else {
	    root.style.MozUserSelect = root.__noselect;
	    delete root.__noselect;
	  }
	}

	var constant$2 = function(x) {
	  return function() {
	    return x;
	  };
	};

	function DragEvent(target, type, subject, id, active, x, y, dx, dy, dispatch) {
	  this.target = target;
	  this.type = type;
	  this.subject = subject;
	  this.identifier = id;
	  this.active = active;
	  this.x = x;
	  this.y = y;
	  this.dx = dx;
	  this.dy = dy;
	  this._ = dispatch;
	}

	DragEvent.prototype.on = function() {
	  var value = this._.on.apply(this._, arguments);
	  return value === this._ ? this : value;
	};

	// Ignore right-click, since that should open the context menu.
	function defaultFilter$1() {
	  return !exports.event.button;
	}

	function defaultContainer() {
	  return this.parentNode;
	}

	function defaultSubject(d) {
	  return d == null ? {x: exports.event.x, y: exports.event.y} : d;
	}

	function touchable() {
	  return "ontouchstart" in this;
	}

	var drag = function() {
	  var filter = defaultFilter$1,
	      container = defaultContainer,
	      subject = defaultSubject,
	      gestures = {},
	      listeners = dispatch("start", "drag", "end"),
	      active = 0,
	      mousedownx,
	      mousedowny,
	      mousemoving,
	      touchending,
	      clickDistance2 = 0;

	  function drag(selection) {
	    selection
	        .on("mousedown.drag", mousedowned)
	      .filter(touchable)
	        .on("touchstart.drag", touchstarted)
	        .on("touchmove.drag", touchmoved)
	        .on("touchend.drag touchcancel.drag", touchended)
	        .style("touch-action", "none")
	        .style("-webkit-tap-highlight-color", "rgba(0,0,0,0)");
	  }

	  function mousedowned() {
	    if (touchending || !filter.apply(this, arguments)) return;
	    var gesture = beforestart("mouse", container.apply(this, arguments), mouse, this, arguments);
	    if (!gesture) return;
	    select(exports.event.view).on("mousemove.drag", mousemoved, true).on("mouseup.drag", mouseupped, true);
	    dragDisable(exports.event.view);
	    nopropagation();
	    mousemoving = false;
	    mousedownx = exports.event.clientX;
	    mousedowny = exports.event.clientY;
	    gesture("start");
	  }

	  function mousemoved() {
	    noevent();
	    if (!mousemoving) {
	      var dx = exports.event.clientX - mousedownx, dy = exports.event.clientY - mousedowny;
	      mousemoving = dx * dx + dy * dy > clickDistance2;
	    }
	    gestures.mouse("drag");
	  }

	  function mouseupped() {
	    select(exports.event.view).on("mousemove.drag mouseup.drag", null);
	    yesdrag(exports.event.view, mousemoving);
	    noevent();
	    gestures.mouse("end");
	  }

	  function touchstarted() {
	    if (!filter.apply(this, arguments)) return;
	    var touches$$1 = exports.event.changedTouches,
	        c = container.apply(this, arguments),
	        n = touches$$1.length, i, gesture;

	    for (i = 0; i < n; ++i) {
	      if (gesture = beforestart(touches$$1[i].identifier, c, touch, this, arguments)) {
	        nopropagation();
	        gesture("start");
	      }
	    }
	  }

	  function touchmoved() {
	    var touches$$1 = exports.event.changedTouches,
	        n = touches$$1.length, i, gesture;

	    for (i = 0; i < n; ++i) {
	      if (gesture = gestures[touches$$1[i].identifier]) {
	        noevent();
	        gesture("drag");
	      }
	    }
	  }

	  function touchended() {
	    var touches$$1 = exports.event.changedTouches,
	        n = touches$$1.length, i, gesture;

	    if (touchending) clearTimeout(touchending);
	    touchending = setTimeout(function() { touchending = null; }, 500); // Ghost clicks are delayed!
	    for (i = 0; i < n; ++i) {
	      if (gesture = gestures[touches$$1[i].identifier]) {
	        nopropagation();
	        gesture("end");
	      }
	    }
	  }

	  function beforestart(id, container, point, that, args) {
	    var p = point(container, id), s, dx, dy,
	        sublisteners = listeners.copy();

	    if (!customEvent(new DragEvent(drag, "beforestart", s, id, active, p[0], p[1], 0, 0, sublisteners), function() {
	      if ((exports.event.subject = s = subject.apply(that, args)) == null) return false;
	      dx = s.x - p[0] || 0;
	      dy = s.y - p[1] || 0;
	      return true;
	    })) return;

	    return function gesture(type) {
	      var p0 = p, n;
	      switch (type) {
	        case "start": gestures[id] = gesture, n = active++; break;
	        case "end": delete gestures[id], --active; // nobreak
	        case "drag": p = point(container, id), n = active; break;
	      }
	      customEvent(new DragEvent(drag, type, s, id, n, p[0] + dx, p[1] + dy, p[0] - p0[0], p[1] - p0[1], sublisteners), sublisteners.apply, sublisteners, [type, that, args]);
	    };
	  }

	  drag.filter = function(_) {
	    return arguments.length ? (filter = typeof _ === "function" ? _ : constant$2(!!_), drag) : filter;
	  };

	  drag.container = function(_) {
	    return arguments.length ? (container = typeof _ === "function" ? _ : constant$2(_), drag) : container;
	  };

	  drag.subject = function(_) {
	    return arguments.length ? (subject = typeof _ === "function" ? _ : constant$2(_), drag) : subject;
	  };

	  drag.on = function() {
	    var value = listeners.on.apply(listeners, arguments);
	    return value === listeners ? drag : value;
	  };

	  drag.clickDistance = function(_) {
	    return arguments.length ? (clickDistance2 = (_ = +_) * _, drag) : Math.sqrt(clickDistance2);
	  };

	  return drag;
	};

	var define = function(constructor, factory, prototype) {
	  constructor.prototype = factory.prototype = prototype;
	  prototype.constructor = constructor;
	};

	function extend(parent, definition) {
	  var prototype = Object.create(parent.prototype);
	  for (var key in definition) prototype[key] = definition[key];
	  return prototype;
	}

	function Color() {}

	var darker = 0.7;
	var brighter = 1 / darker;

	var reI = "\\s*([+-]?\\d+)\\s*";
	var reN = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*";
	var reP = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*";
	var reHex3 = /^#([0-9a-f]{3})$/;
	var reHex6 = /^#([0-9a-f]{6})$/;
	var reRgbInteger = new RegExp("^rgb\\(" + [reI, reI, reI] + "\\)$");
	var reRgbPercent = new RegExp("^rgb\\(" + [reP, reP, reP] + "\\)$");
	var reRgbaInteger = new RegExp("^rgba\\(" + [reI, reI, reI, reN] + "\\)$");
	var reRgbaPercent = new RegExp("^rgba\\(" + [reP, reP, reP, reN] + "\\)$");
	var reHslPercent = new RegExp("^hsl\\(" + [reN, reP, reP] + "\\)$");
	var reHslaPercent = new RegExp("^hsla\\(" + [reN, reP, reP, reN] + "\\)$");

	var named = {
	  aliceblue: 0xf0f8ff,
	  antiquewhite: 0xfaebd7,
	  aqua: 0x00ffff,
	  aquamarine: 0x7fffd4,
	  azure: 0xf0ffff,
	  beige: 0xf5f5dc,
	  bisque: 0xffe4c4,
	  black: 0x000000,
	  blanchedalmond: 0xffebcd,
	  blue: 0x0000ff,
	  blueviolet: 0x8a2be2,
	  brown: 0xa52a2a,
	  burlywood: 0xdeb887,
	  cadetblue: 0x5f9ea0,
	  chartreuse: 0x7fff00,
	  chocolate: 0xd2691e,
	  coral: 0xff7f50,
	  cornflowerblue: 0x6495ed,
	  cornsilk: 0xfff8dc,
	  crimson: 0xdc143c,
	  cyan: 0x00ffff,
	  darkblue: 0x00008b,
	  darkcyan: 0x008b8b,
	  darkgoldenrod: 0xb8860b,
	  darkgray: 0xa9a9a9,
	  darkgreen: 0x006400,
	  darkgrey: 0xa9a9a9,
	  darkkhaki: 0xbdb76b,
	  darkmagenta: 0x8b008b,
	  darkolivegreen: 0x556b2f,
	  darkorange: 0xff8c00,
	  darkorchid: 0x9932cc,
	  darkred: 0x8b0000,
	  darksalmon: 0xe9967a,
	  darkseagreen: 0x8fbc8f,
	  darkslateblue: 0x483d8b,
	  darkslategray: 0x2f4f4f,
	  darkslategrey: 0x2f4f4f,
	  darkturquoise: 0x00ced1,
	  darkviolet: 0x9400d3,
	  deeppink: 0xff1493,
	  deepskyblue: 0x00bfff,
	  dimgray: 0x696969,
	  dimgrey: 0x696969,
	  dodgerblue: 0x1e90ff,
	  firebrick: 0xb22222,
	  floralwhite: 0xfffaf0,
	  forestgreen: 0x228b22,
	  fuchsia: 0xff00ff,
	  gainsboro: 0xdcdcdc,
	  ghostwhite: 0xf8f8ff,
	  gold: 0xffd700,
	  goldenrod: 0xdaa520,
	  gray: 0x808080,
	  green: 0x008000,
	  greenyellow: 0xadff2f,
	  grey: 0x808080,
	  honeydew: 0xf0fff0,
	  hotpink: 0xff69b4,
	  indianred: 0xcd5c5c,
	  indigo: 0x4b0082,
	  ivory: 0xfffff0,
	  khaki: 0xf0e68c,
	  lavender: 0xe6e6fa,
	  lavenderblush: 0xfff0f5,
	  lawngreen: 0x7cfc00,
	  lemonchiffon: 0xfffacd,
	  lightblue: 0xadd8e6,
	  lightcoral: 0xf08080,
	  lightcyan: 0xe0ffff,
	  lightgoldenrodyellow: 0xfafad2,
	  lightgray: 0xd3d3d3,
	  lightgreen: 0x90ee90,
	  lightgrey: 0xd3d3d3,
	  lightpink: 0xffb6c1,
	  lightsalmon: 0xffa07a,
	  lightseagreen: 0x20b2aa,
	  lightskyblue: 0x87cefa,
	  lightslategray: 0x778899,
	  lightslategrey: 0x778899,
	  lightsteelblue: 0xb0c4de,
	  lightyellow: 0xffffe0,
	  lime: 0x00ff00,
	  limegreen: 0x32cd32,
	  linen: 0xfaf0e6,
	  magenta: 0xff00ff,
	  maroon: 0x800000,
	  mediumaquamarine: 0x66cdaa,
	  mediumblue: 0x0000cd,
	  mediumorchid: 0xba55d3,
	  mediumpurple: 0x9370db,
	  mediumseagreen: 0x3cb371,
	  mediumslateblue: 0x7b68ee,
	  mediumspringgreen: 0x00fa9a,
	  mediumturquoise: 0x48d1cc,
	  mediumvioletred: 0xc71585,
	  midnightblue: 0x191970,
	  mintcream: 0xf5fffa,
	  mistyrose: 0xffe4e1,
	  moccasin: 0xffe4b5,
	  navajowhite: 0xffdead,
	  navy: 0x000080,
	  oldlace: 0xfdf5e6,
	  olive: 0x808000,
	  olivedrab: 0x6b8e23,
	  orange: 0xffa500,
	  orangered: 0xff4500,
	  orchid: 0xda70d6,
	  palegoldenrod: 0xeee8aa,
	  palegreen: 0x98fb98,
	  paleturquoise: 0xafeeee,
	  palevioletred: 0xdb7093,
	  papayawhip: 0xffefd5,
	  peachpuff: 0xffdab9,
	  peru: 0xcd853f,
	  pink: 0xffc0cb,
	  plum: 0xdda0dd,
	  powderblue: 0xb0e0e6,
	  purple: 0x800080,
	  rebeccapurple: 0x663399,
	  red: 0xff0000,
	  rosybrown: 0xbc8f8f,
	  royalblue: 0x4169e1,
	  saddlebrown: 0x8b4513,
	  salmon: 0xfa8072,
	  sandybrown: 0xf4a460,
	  seagreen: 0x2e8b57,
	  seashell: 0xfff5ee,
	  sienna: 0xa0522d,
	  silver: 0xc0c0c0,
	  skyblue: 0x87ceeb,
	  slateblue: 0x6a5acd,
	  slategray: 0x708090,
	  slategrey: 0x708090,
	  snow: 0xfffafa,
	  springgreen: 0x00ff7f,
	  steelblue: 0x4682b4,
	  tan: 0xd2b48c,
	  teal: 0x008080,
	  thistle: 0xd8bfd8,
	  tomato: 0xff6347,
	  turquoise: 0x40e0d0,
	  violet: 0xee82ee,
	  wheat: 0xf5deb3,
	  white: 0xffffff,
	  whitesmoke: 0xf5f5f5,
	  yellow: 0xffff00,
	  yellowgreen: 0x9acd32
	};

	define(Color, color, {
	  displayable: function() {
	    return this.rgb().displayable();
	  },
	  toString: function() {
	    return this.rgb() + "";
	  }
	});

	function color(format) {
	  var m;
	  format = (format + "").trim().toLowerCase();
	  return (m = reHex3.exec(format)) ? (m = parseInt(m[1], 16), new Rgb((m >> 8 & 0xf) | (m >> 4 & 0x0f0), (m >> 4 & 0xf) | (m & 0xf0), ((m & 0xf) << 4) | (m & 0xf), 1)) // #f00
	      : (m = reHex6.exec(format)) ? rgbn(parseInt(m[1], 16)) // #ff0000
	      : (m = reRgbInteger.exec(format)) ? new Rgb(m[1], m[2], m[3], 1) // rgb(255, 0, 0)
	      : (m = reRgbPercent.exec(format)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) // rgb(100%, 0%, 0%)
	      : (m = reRgbaInteger.exec(format)) ? rgba(m[1], m[2], m[3], m[4]) // rgba(255, 0, 0, 1)
	      : (m = reRgbaPercent.exec(format)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) // rgb(100%, 0%, 0%, 1)
	      : (m = reHslPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) // hsl(120, 50%, 50%)
	      : (m = reHslaPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) // hsla(120, 50%, 50%, 1)
	      : named.hasOwnProperty(format) ? rgbn(named[format])
	      : format === "transparent" ? new Rgb(NaN, NaN, NaN, 0)
	      : null;
	}

	function rgbn(n) {
	  return new Rgb(n >> 16 & 0xff, n >> 8 & 0xff, n & 0xff, 1);
	}

	function rgba(r, g, b, a) {
	  if (a <= 0) r = g = b = NaN;
	  return new Rgb(r, g, b, a);
	}

	function rgbConvert(o) {
	  if (!(o instanceof Color)) o = color(o);
	  if (!o) return new Rgb;
	  o = o.rgb();
	  return new Rgb(o.r, o.g, o.b, o.opacity);
	}

	function rgb(r, g, b, opacity) {
	  return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);
	}

	function Rgb(r, g, b, opacity) {
	  this.r = +r;
	  this.g = +g;
	  this.b = +b;
	  this.opacity = +opacity;
	}

	define(Rgb, rgb, extend(Color, {
	  brighter: function(k) {
	    k = k == null ? brighter : Math.pow(brighter, k);
	    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
	  },
	  darker: function(k) {
	    k = k == null ? darker : Math.pow(darker, k);
	    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
	  },
	  rgb: function() {
	    return this;
	  },
	  displayable: function() {
	    return (0 <= this.r && this.r <= 255)
	        && (0 <= this.g && this.g <= 255)
	        && (0 <= this.b && this.b <= 255)
	        && (0 <= this.opacity && this.opacity <= 1);
	  },
	  toString: function() {
	    var a = this.opacity; a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));
	    return (a === 1 ? "rgb(" : "rgba(")
	        + Math.max(0, Math.min(255, Math.round(this.r) || 0)) + ", "
	        + Math.max(0, Math.min(255, Math.round(this.g) || 0)) + ", "
	        + Math.max(0, Math.min(255, Math.round(this.b) || 0))
	        + (a === 1 ? ")" : ", " + a + ")");
	  }
	}));

	function hsla(h, s, l, a) {
	  if (a <= 0) h = s = l = NaN;
	  else if (l <= 0 || l >= 1) h = s = NaN;
	  else if (s <= 0) h = NaN;
	  return new Hsl(h, s, l, a);
	}

	function hslConvert(o) {
	  if (o instanceof Hsl) return new Hsl(o.h, o.s, o.l, o.opacity);
	  if (!(o instanceof Color)) o = color(o);
	  if (!o) return new Hsl;
	  if (o instanceof Hsl) return o;
	  o = o.rgb();
	  var r = o.r / 255,
	      g = o.g / 255,
	      b = o.b / 255,
	      min = Math.min(r, g, b),
	      max = Math.max(r, g, b),
	      h = NaN,
	      s = max - min,
	      l = (max + min) / 2;
	  if (s) {
	    if (r === max) h = (g - b) / s + (g < b) * 6;
	    else if (g === max) h = (b - r) / s + 2;
	    else h = (r - g) / s + 4;
	    s /= l < 0.5 ? max + min : 2 - max - min;
	    h *= 60;
	  } else {
	    s = l > 0 && l < 1 ? 0 : h;
	  }
	  return new Hsl(h, s, l, o.opacity);
	}

	function hsl(h, s, l, opacity) {
	  return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s, l, opacity == null ? 1 : opacity);
	}

	function Hsl(h, s, l, opacity) {
	  this.h = +h;
	  this.s = +s;
	  this.l = +l;
	  this.opacity = +opacity;
	}

	define(Hsl, hsl, extend(Color, {
	  brighter: function(k) {
	    k = k == null ? brighter : Math.pow(brighter, k);
	    return new Hsl(this.h, this.s, this.l * k, this.opacity);
	  },
	  darker: function(k) {
	    k = k == null ? darker : Math.pow(darker, k);
	    return new Hsl(this.h, this.s, this.l * k, this.opacity);
	  },
	  rgb: function() {
	    var h = this.h % 360 + (this.h < 0) * 360,
	        s = isNaN(h) || isNaN(this.s) ? 0 : this.s,
	        l = this.l,
	        m2 = l + (l < 0.5 ? l : 1 - l) * s,
	        m1 = 2 * l - m2;
	    return new Rgb(
	      hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2),
	      hsl2rgb(h, m1, m2),
	      hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2),
	      this.opacity
	    );
	  },
	  displayable: function() {
	    return (0 <= this.s && this.s <= 1 || isNaN(this.s))
	        && (0 <= this.l && this.l <= 1)
	        && (0 <= this.opacity && this.opacity <= 1);
	  }
	}));

	/* From FvD 13.37, CSS Color Module Level 3 */
	function hsl2rgb(h, m1, m2) {
	  return (h < 60 ? m1 + (m2 - m1) * h / 60
	      : h < 180 ? m2
	      : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60
	      : m1) * 255;
	}

	var deg2rad = Math.PI / 180;
	var rad2deg = 180 / Math.PI;

	var Kn = 18;
	var Xn = 0.950470;
	var Yn = 1;
	var Zn = 1.088830;
	var t0 = 4 / 29;
	var t1 = 6 / 29;
	var t2 = 3 * t1 * t1;
	var t3 = t1 * t1 * t1;

	function labConvert(o) {
	  if (o instanceof Lab) return new Lab(o.l, o.a, o.b, o.opacity);
	  if (o instanceof Hcl) {
	    var h = o.h * deg2rad;
	    return new Lab(o.l, Math.cos(h) * o.c, Math.sin(h) * o.c, o.opacity);
	  }
	  if (!(o instanceof Rgb)) o = rgbConvert(o);
	  var b = rgb2xyz(o.r),
	      a = rgb2xyz(o.g),
	      l = rgb2xyz(o.b),
	      x = xyz2lab((0.4124564 * b + 0.3575761 * a + 0.1804375 * l) / Xn),
	      y = xyz2lab((0.2126729 * b + 0.7151522 * a + 0.0721750 * l) / Yn),
	      z = xyz2lab((0.0193339 * b + 0.1191920 * a + 0.9503041 * l) / Zn);
	  return new Lab(116 * y - 16, 500 * (x - y), 200 * (y - z), o.opacity);
	}

	function lab(l, a, b, opacity) {
	  return arguments.length === 1 ? labConvert(l) : new Lab(l, a, b, opacity == null ? 1 : opacity);
	}

	function Lab(l, a, b, opacity) {
	  this.l = +l;
	  this.a = +a;
	  this.b = +b;
	  this.opacity = +opacity;
	}

	define(Lab, lab, extend(Color, {
	  brighter: function(k) {
	    return new Lab(this.l + Kn * (k == null ? 1 : k), this.a, this.b, this.opacity);
	  },
	  darker: function(k) {
	    return new Lab(this.l - Kn * (k == null ? 1 : k), this.a, this.b, this.opacity);
	  },
	  rgb: function() {
	    var y = (this.l + 16) / 116,
	        x = isNaN(this.a) ? y : y + this.a / 500,
	        z = isNaN(this.b) ? y : y - this.b / 200;
	    y = Yn * lab2xyz(y);
	    x = Xn * lab2xyz(x);
	    z = Zn * lab2xyz(z);
	    return new Rgb(
	      xyz2rgb( 3.2404542 * x - 1.5371385 * y - 0.4985314 * z), // D65 -> sRGB
	      xyz2rgb(-0.9692660 * x + 1.8760108 * y + 0.0415560 * z),
	      xyz2rgb( 0.0556434 * x - 0.2040259 * y + 1.0572252 * z),
	      this.opacity
	    );
	  }
	}));

	function xyz2lab(t) {
	  return t > t3 ? Math.pow(t, 1 / 3) : t / t2 + t0;
	}

	function lab2xyz(t) {
	  return t > t1 ? t * t * t : t2 * (t - t0);
	}

	function xyz2rgb(x) {
	  return 255 * (x <= 0.0031308 ? 12.92 * x : 1.055 * Math.pow(x, 1 / 2.4) - 0.055);
	}

	function rgb2xyz(x) {
	  return (x /= 255) <= 0.04045 ? x / 12.92 : Math.pow((x + 0.055) / 1.055, 2.4);
	}

	function hclConvert(o) {
	  if (o instanceof Hcl) return new Hcl(o.h, o.c, o.l, o.opacity);
	  if (!(o instanceof Lab)) o = labConvert(o);
	  var h = Math.atan2(o.b, o.a) * rad2deg;
	  return new Hcl(h < 0 ? h + 360 : h, Math.sqrt(o.a * o.a + o.b * o.b), o.l, o.opacity);
	}

	function hcl(h, c, l, opacity) {
	  return arguments.length === 1 ? hclConvert(h) : new Hcl(h, c, l, opacity == null ? 1 : opacity);
	}

	function Hcl(h, c, l, opacity) {
	  this.h = +h;
	  this.c = +c;
	  this.l = +l;
	  this.opacity = +opacity;
	}

	define(Hcl, hcl, extend(Color, {
	  brighter: function(k) {
	    return new Hcl(this.h, this.c, this.l + Kn * (k == null ? 1 : k), this.opacity);
	  },
	  darker: function(k) {
	    return new Hcl(this.h, this.c, this.l - Kn * (k == null ? 1 : k), this.opacity);
	  },
	  rgb: function() {
	    return labConvert(this).rgb();
	  }
	}));

	var A = -0.14861;
	var B = +1.78277;
	var C = -0.29227;
	var D = -0.90649;
	var E = +1.97294;
	var ED = E * D;
	var EB = E * B;
	var BC_DA = B * C - D * A;

	function cubehelixConvert(o) {
	  if (o instanceof Cubehelix) return new Cubehelix(o.h, o.s, o.l, o.opacity);
	  if (!(o instanceof Rgb)) o = rgbConvert(o);
	  var r = o.r / 255,
	      g = o.g / 255,
	      b = o.b / 255,
	      l = (BC_DA * b + ED * r - EB * g) / (BC_DA + ED - EB),
	      bl = b - l,
	      k = (E * (g - l) - C * bl) / D,
	      s = Math.sqrt(k * k + bl * bl) / (E * l * (1 - l)), // NaN if l=0 or l=1
	      h = s ? Math.atan2(k, bl) * rad2deg - 120 : NaN;
	  return new Cubehelix(h < 0 ? h + 360 : h, s, l, o.opacity);
	}

	function cubehelix(h, s, l, opacity) {
	  return arguments.length === 1 ? cubehelixConvert(h) : new Cubehelix(h, s, l, opacity == null ? 1 : opacity);
	}

	function Cubehelix(h, s, l, opacity) {
	  this.h = +h;
	  this.s = +s;
	  this.l = +l;
	  this.opacity = +opacity;
	}

	define(Cubehelix, cubehelix, extend(Color, {
	  brighter: function(k) {
	    k = k == null ? brighter : Math.pow(brighter, k);
	    return new Cubehelix(this.h, this.s, this.l * k, this.opacity);
	  },
	  darker: function(k) {
	    k = k == null ? darker : Math.pow(darker, k);
	    return new Cubehelix(this.h, this.s, this.l * k, this.opacity);
	  },
	  rgb: function() {
	    var h = isNaN(this.h) ? 0 : (this.h + 120) * deg2rad,
	        l = +this.l,
	        a = isNaN(this.s) ? 0 : this.s * l * (1 - l),
	        cosh = Math.cos(h),
	        sinh = Math.sin(h);
	    return new Rgb(
	      255 * (l + a * (A * cosh + B * sinh)),
	      255 * (l + a * (C * cosh + D * sinh)),
	      255 * (l + a * (E * cosh)),
	      this.opacity
	    );
	  }
	}));

	function basis(t1, v0, v1, v2, v3) {
	  var t2 = t1 * t1, t3 = t2 * t1;
	  return ((1 - 3 * t1 + 3 * t2 - t3) * v0
	      + (4 - 6 * t2 + 3 * t3) * v1
	      + (1 + 3 * t1 + 3 * t2 - 3 * t3) * v2
	      + t3 * v3) / 6;
	}

	var basis$1 = function(values) {
	  var n = values.length - 1;
	  return function(t) {
	    var i = t <= 0 ? (t = 0) : t >= 1 ? (t = 1, n - 1) : Math.floor(t * n),
	        v1 = values[i],
	        v2 = values[i + 1],
	        v0 = i > 0 ? values[i - 1] : 2 * v1 - v2,
	        v3 = i < n - 1 ? values[i + 2] : 2 * v2 - v1;
	    return basis((t - i / n) * n, v0, v1, v2, v3);
	  };
	};

	var basisClosed = function(values) {
	  var n = values.length;
	  return function(t) {
	    var i = Math.floor(((t %= 1) < 0 ? ++t : t) * n),
	        v0 = values[(i + n - 1) % n],
	        v1 = values[i % n],
	        v2 = values[(i + 1) % n],
	        v3 = values[(i + 2) % n];
	    return basis((t - i / n) * n, v0, v1, v2, v3);
	  };
	};

	var constant$3 = function(x) {
	  return function() {
	    return x;
	  };
	};

	function linear(a, d) {
	  return function(t) {
	    return a + t * d;
	  };
	}

	function exponential(a, b, y) {
	  return a = Math.pow(a, y), b = Math.pow(b, y) - a, y = 1 / y, function(t) {
	    return Math.pow(a + t * b, y);
	  };
	}

	function hue(a, b) {
	  var d = b - a;
	  return d ? linear(a, d > 180 || d < -180 ? d - 360 * Math.round(d / 360) : d) : constant$3(isNaN(a) ? b : a);
	}

	function gamma(y) {
	  return (y = +y) === 1 ? nogamma : function(a, b) {
	    return b - a ? exponential(a, b, y) : constant$3(isNaN(a) ? b : a);
	  };
	}

	function nogamma(a, b) {
	  var d = b - a;
	  return d ? linear(a, d) : constant$3(isNaN(a) ? b : a);
	}

	var interpolateRgb = (function rgbGamma(y) {
	  var color$$1 = gamma(y);

	  function rgb$$1(start, end) {
	    var r = color$$1((start = rgb(start)).r, (end = rgb(end)).r),
	        g = color$$1(start.g, end.g),
	        b = color$$1(start.b, end.b),
	        opacity = nogamma(start.opacity, end.opacity);
	    return function(t) {
	      start.r = r(t);
	      start.g = g(t);
	      start.b = b(t);
	      start.opacity = opacity(t);
	      return start + "";
	    };
	  }

	  rgb$$1.gamma = rgbGamma;

	  return rgb$$1;
	})(1);

	function rgbSpline(spline) {
	  return function(colors) {
	    var n = colors.length,
	        r = new Array(n),
	        g = new Array(n),
	        b = new Array(n),
	        i, color$$1;
	    for (i = 0; i < n; ++i) {
	      color$$1 = rgb(colors[i]);
	      r[i] = color$$1.r || 0;
	      g[i] = color$$1.g || 0;
	      b[i] = color$$1.b || 0;
	    }
	    r = spline(r);
	    g = spline(g);
	    b = spline(b);
	    color$$1.opacity = 1;
	    return function(t) {
	      color$$1.r = r(t);
	      color$$1.g = g(t);
	      color$$1.b = b(t);
	      return color$$1 + "";
	    };
	  };
	}

	var rgbBasis = rgbSpline(basis$1);
	var rgbBasisClosed = rgbSpline(basisClosed);

	var array$1 = function(a, b) {
	  var nb = b ? b.length : 0,
	      na = a ? Math.min(nb, a.length) : 0,
	      x = new Array(nb),
	      c = new Array(nb),
	      i;

	  for (i = 0; i < na; ++i) x[i] = interpolateValue(a[i], b[i]);
	  for (; i < nb; ++i) c[i] = b[i];

	  return function(t) {
	    for (i = 0; i < na; ++i) c[i] = x[i](t);
	    return c;
	  };
	};

	var date = function(a, b) {
	  var d = new Date;
	  return a = +a, b -= a, function(t) {
	    return d.setTime(a + b * t), d;
	  };
	};

	var reinterpolate = function(a, b) {
	  return a = +a, b -= a, function(t) {
	    return a + b * t;
	  };
	};

	var object = function(a, b) {
	  var i = {},
	      c = {},
	      k;

	  if (a === null || typeof a !== "object") a = {};
	  if (b === null || typeof b !== "object") b = {};

	  for (k in b) {
	    if (k in a) {
	      i[k] = interpolateValue(a[k], b[k]);
	    } else {
	      c[k] = b[k];
	    }
	  }

	  return function(t) {
	    for (k in i) c[k] = i[k](t);
	    return c;
	  };
	};

	var reA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g;
	var reB = new RegExp(reA.source, "g");

	function zero(b) {
	  return function() {
	    return b;
	  };
	}

	function one(b) {
	  return function(t) {
	    return b(t) + "";
	  };
	}

	var interpolateString = function(a, b) {
	  var bi = reA.lastIndex = reB.lastIndex = 0, // scan index for next number in b
	      am, // current match in a
	      bm, // current match in b
	      bs, // string preceding current number in b, if any
	      i = -1, // index in s
	      s = [], // string constants and placeholders
	      q = []; // number interpolators

	  // Coerce inputs to strings.
	  a = a + "", b = b + "";

	  // Interpolate pairs of numbers in a & b.
	  while ((am = reA.exec(a))
	      && (bm = reB.exec(b))) {
	    if ((bs = bm.index) > bi) { // a string precedes the next number in b
	      bs = b.slice(bi, bs);
	      if (s[i]) s[i] += bs; // coalesce with previous string
	      else s[++i] = bs;
	    }
	    if ((am = am[0]) === (bm = bm[0])) { // numbers in a & b match
	      if (s[i]) s[i] += bm; // coalesce with previous string
	      else s[++i] = bm;
	    } else { // interpolate non-matching numbers
	      s[++i] = null;
	      q.push({i: i, x: reinterpolate(am, bm)});
	    }
	    bi = reB.lastIndex;
	  }

	  // Add remains of b.
	  if (bi < b.length) {
	    bs = b.slice(bi);
	    if (s[i]) s[i] += bs; // coalesce with previous string
	    else s[++i] = bs;
	  }

	  // Special optimization for only a single match.
	  // Otherwise, interpolate each of the numbers and rejoin the string.
	  return s.length < 2 ? (q[0]
	      ? one(q[0].x)
	      : zero(b))
	      : (b = q.length, function(t) {
	          for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);
	          return s.join("");
	        });
	};

	var interpolateValue = function(a, b) {
	  var t = typeof b, c;
	  return b == null || t === "boolean" ? constant$3(b)
	      : (t === "number" ? reinterpolate
	      : t === "string" ? ((c = color(b)) ? (b = c, interpolateRgb) : interpolateString)
	      : b instanceof color ? interpolateRgb
	      : b instanceof Date ? date
	      : Array.isArray(b) ? array$1
	      : typeof b.valueOf !== "function" && typeof b.toString !== "function" || isNaN(b) ? object
	      : reinterpolate)(a, b);
	};

	var interpolateRound = function(a, b) {
	  return a = +a, b -= a, function(t) {
	    return Math.round(a + b * t);
	  };
	};

	var degrees = 180 / Math.PI;

	var identity$2 = {
	  translateX: 0,
	  translateY: 0,
	  rotate: 0,
	  skewX: 0,
	  scaleX: 1,
	  scaleY: 1
	};

	var decompose = function(a, b, c, d, e, f) {
	  var scaleX, scaleY, skewX;
	  if (scaleX = Math.sqrt(a * a + b * b)) a /= scaleX, b /= scaleX;
	  if (skewX = a * c + b * d) c -= a * skewX, d -= b * skewX;
	  if (scaleY = Math.sqrt(c * c + d * d)) c /= scaleY, d /= scaleY, skewX /= scaleY;
	  if (a * d < b * c) a = -a, b = -b, skewX = -skewX, scaleX = -scaleX;
	  return {
	    translateX: e,
	    translateY: f,
	    rotate: Math.atan2(b, a) * degrees,
	    skewX: Math.atan(skewX) * degrees,
	    scaleX: scaleX,
	    scaleY: scaleY
	  };
	};

	var cssNode;
	var cssRoot;
	var cssView;
	var svgNode;

	function parseCss(value) {
	  if (value === "none") return identity$2;
	  if (!cssNode) cssNode = document.createElement("DIV"), cssRoot = document.documentElement, cssView = document.defaultView;
	  cssNode.style.transform = value;
	  value = cssView.getComputedStyle(cssRoot.appendChild(cssNode), null).getPropertyValue("transform");
	  cssRoot.removeChild(cssNode);
	  value = value.slice(7, -1).split(",");
	  return decompose(+value[0], +value[1], +value[2], +value[3], +value[4], +value[5]);
	}

	function parseSvg(value) {
	  if (value == null) return identity$2;
	  if (!svgNode) svgNode = document.createElementNS("http://www.w3.org/2000/svg", "g");
	  svgNode.setAttribute("transform", value);
	  if (!(value = svgNode.transform.baseVal.consolidate())) return identity$2;
	  value = value.matrix;
	  return decompose(value.a, value.b, value.c, value.d, value.e, value.f);
	}

	function interpolateTransform(parse, pxComma, pxParen, degParen) {

	  function pop(s) {
	    return s.length ? s.pop() + " " : "";
	  }

	  function translate(xa, ya, xb, yb, s, q) {
	    if (xa !== xb || ya !== yb) {
	      var i = s.push("translate(", null, pxComma, null, pxParen);
	      q.push({i: i - 4, x: reinterpolate(xa, xb)}, {i: i - 2, x: reinterpolate(ya, yb)});
	    } else if (xb || yb) {
	      s.push("translate(" + xb + pxComma + yb + pxParen);
	    }
	  }

	  function rotate(a, b, s, q) {
	    if (a !== b) {
	      if (a - b > 180) b += 360; else if (b - a > 180) a += 360; // shortest path
	      q.push({i: s.push(pop(s) + "rotate(", null, degParen) - 2, x: reinterpolate(a, b)});
	    } else if (b) {
	      s.push(pop(s) + "rotate(" + b + degParen);
	    }
	  }

	  function skewX(a, b, s, q) {
	    if (a !== b) {
	      q.push({i: s.push(pop(s) + "skewX(", null, degParen) - 2, x: reinterpolate(a, b)});
	    } else if (b) {
	      s.push(pop(s) + "skewX(" + b + degParen);
	    }
	  }

	  function scale(xa, ya, xb, yb, s, q) {
	    if (xa !== xb || ya !== yb) {
	      var i = s.push(pop(s) + "scale(", null, ",", null, ")");
	      q.push({i: i - 4, x: reinterpolate(xa, xb)}, {i: i - 2, x: reinterpolate(ya, yb)});
	    } else if (xb !== 1 || yb !== 1) {
	      s.push(pop(s) + "scale(" + xb + "," + yb + ")");
	    }
	  }

	  return function(a, b) {
	    var s = [], // string constants and placeholders
	        q = []; // number interpolators
	    a = parse(a), b = parse(b);
	    translate(a.translateX, a.translateY, b.translateX, b.translateY, s, q);
	    rotate(a.rotate, b.rotate, s, q);
	    skewX(a.skewX, b.skewX, s, q);
	    scale(a.scaleX, a.scaleY, b.scaleX, b.scaleY, s, q);
	    a = b = null; // gc
	    return function(t) {
	      var i = -1, n = q.length, o;
	      while (++i < n) s[(o = q[i]).i] = o.x(t);
	      return s.join("");
	    };
	  };
	}

	var interpolateTransformCss = interpolateTransform(parseCss, "px, ", "px)", "deg)");
	var interpolateTransformSvg = interpolateTransform(parseSvg, ", ", ")", ")");

	var rho = Math.SQRT2;
	var rho2 = 2;
	var rho4 = 4;
	var epsilon2 = 1e-12;

	function cosh(x) {
	  return ((x = Math.exp(x)) + 1 / x) / 2;
	}

	function sinh(x) {
	  return ((x = Math.exp(x)) - 1 / x) / 2;
	}

	function tanh(x) {
	  return ((x = Math.exp(2 * x)) - 1) / (x + 1);
	}

	// p0 = [ux0, uy0, w0]
	// p1 = [ux1, uy1, w1]
	var interpolateZoom = function(p0, p1) {
	  var ux0 = p0[0], uy0 = p0[1], w0 = p0[2],
	      ux1 = p1[0], uy1 = p1[1], w1 = p1[2],
	      dx = ux1 - ux0,
	      dy = uy1 - uy0,
	      d2 = dx * dx + dy * dy,
	      i,
	      S;

	  // Special case for u0 ≅ u1.
	  if (d2 < epsilon2) {
	    S = Math.log(w1 / w0) / rho;
	    i = function(t) {
	      return [
	        ux0 + t * dx,
	        uy0 + t * dy,
	        w0 * Math.exp(rho * t * S)
	      ];
	    };
	  }

	  // General case.
	  else {
	    var d1 = Math.sqrt(d2),
	        b0 = (w1 * w1 - w0 * w0 + rho4 * d2) / (2 * w0 * rho2 * d1),
	        b1 = (w1 * w1 - w0 * w0 - rho4 * d2) / (2 * w1 * rho2 * d1),
	        r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0),
	        r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);
	    S = (r1 - r0) / rho;
	    i = function(t) {
	      var s = t * S,
	          coshr0 = cosh(r0),
	          u = w0 / (rho2 * d1) * (coshr0 * tanh(rho * s + r0) - sinh(r0));
	      return [
	        ux0 + u * dx,
	        uy0 + u * dy,
	        w0 * coshr0 / cosh(rho * s + r0)
	      ];
	    };
	  }

	  i.duration = S * 1000;

	  return i;
	};

	function hsl$1(hue$$1) {
	  return function(start, end) {
	    var h = hue$$1((start = hsl(start)).h, (end = hsl(end)).h),
	        s = nogamma(start.s, end.s),
	        l = nogamma(start.l, end.l),
	        opacity = nogamma(start.opacity, end.opacity);
	    return function(t) {
	      start.h = h(t);
	      start.s = s(t);
	      start.l = l(t);
	      start.opacity = opacity(t);
	      return start + "";
	    };
	  }
	}

	var hsl$2 = hsl$1(hue);
	var hslLong = hsl$1(nogamma);

	function lab$1(start, end) {
	  var l = nogamma((start = lab(start)).l, (end = lab(end)).l),
	      a = nogamma(start.a, end.a),
	      b = nogamma(start.b, end.b),
	      opacity = nogamma(start.opacity, end.opacity);
	  return function(t) {
	    start.l = l(t);
	    start.a = a(t);
	    start.b = b(t);
	    start.opacity = opacity(t);
	    return start + "";
	  };
	}

	function hcl$1(hue$$1) {
	  return function(start, end) {
	    var h = hue$$1((start = hcl(start)).h, (end = hcl(end)).h),
	        c = nogamma(start.c, end.c),
	        l = nogamma(start.l, end.l),
	        opacity = nogamma(start.opacity, end.opacity);
	    return function(t) {
	      start.h = h(t);
	      start.c = c(t);
	      start.l = l(t);
	      start.opacity = opacity(t);
	      return start + "";
	    };
	  }
	}

	var hcl$2 = hcl$1(hue);
	var hclLong = hcl$1(nogamma);

	function cubehelix$1(hue$$1) {
	  return (function cubehelixGamma(y) {
	    y = +y;

	    function cubehelix$$1(start, end) {
	      var h = hue$$1((start = cubehelix(start)).h, (end = cubehelix(end)).h),
	          s = nogamma(start.s, end.s),
	          l = nogamma(start.l, end.l),
	          opacity = nogamma(start.opacity, end.opacity);
	      return function(t) {
	        start.h = h(t);
	        start.s = s(t);
	        start.l = l(Math.pow(t, y));
	        start.opacity = opacity(t);
	        return start + "";
	      };
	    }

	    cubehelix$$1.gamma = cubehelixGamma;

	    return cubehelix$$1;
	  })(1);
	}

	var cubehelix$2 = cubehelix$1(hue);
	var cubehelixLong = cubehelix$1(nogamma);

	var quantize = function(interpolator, n) {
	  var samples = new Array(n);
	  for (var i = 0; i < n; ++i) samples[i] = interpolator(i / (n - 1));
	  return samples;
	};

	var frame = 0;
	var timeout = 0;
	var interval = 0;
	var pokeDelay = 1000;
	var taskHead;
	var taskTail;
	var clockLast = 0;
	var clockNow = 0;
	var clockSkew = 0;
	var clock = typeof performance === "object" && performance.now ? performance : Date;
	var setFrame = typeof window === "object" && window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : function(f) { setTimeout(f, 17); };

	function now() {
	  return clockNow || (setFrame(clearNow), clockNow = clock.now() + clockSkew);
	}

	function clearNow() {
	  clockNow = 0;
	}

	function Timer() {
	  this._call =
	  this._time =
	  this._next = null;
	}

	Timer.prototype = timer.prototype = {
	  constructor: Timer,
	  restart: function(callback, delay, time) {
	    if (typeof callback !== "function") throw new TypeError("callback is not a function");
	    time = (time == null ? now() : +time) + (delay == null ? 0 : +delay);
	    if (!this._next && taskTail !== this) {
	      if (taskTail) taskTail._next = this;
	      else taskHead = this;
	      taskTail = this;
	    }
	    this._call = callback;
	    this._time = time;
	    sleep();
	  },
	  stop: function() {
	    if (this._call) {
	      this._call = null;
	      this._time = Infinity;
	      sleep();
	    }
	  }
	};

	function timer(callback, delay, time) {
	  var t = new Timer;
	  t.restart(callback, delay, time);
	  return t;
	}

	function timerFlush() {
	  now(); // Get the current time, if not already set.
	  ++frame; // Pretend we’ve set an alarm, if we haven’t already.
	  var t = taskHead, e;
	  while (t) {
	    if ((e = clockNow - t._time) >= 0) t._call.call(null, e);
	    t = t._next;
	  }
	  --frame;
	}

	function wake() {
	  clockNow = (clockLast = clock.now()) + clockSkew;
	  frame = timeout = 0;
	  try {
	    timerFlush();
	  } finally {
	    frame = 0;
	    nap();
	    clockNow = 0;
	  }
	}

	function poke() {
	  var now = clock.now(), delay = now - clockLast;
	  if (delay > pokeDelay) clockSkew -= delay, clockLast = now;
	}

	function nap() {
	  var t0, t1 = taskHead, t2, time = Infinity;
	  while (t1) {
	    if (t1._call) {
	      if (time > t1._time) time = t1._time;
	      t0 = t1, t1 = t1._next;
	    } else {
	      t2 = t1._next, t1._next = null;
	      t1 = t0 ? t0._next = t2 : taskHead = t2;
	    }
	  }
	  taskTail = t0;
	  sleep(time);
	}

	function sleep(time) {
	  if (frame) return; // Soonest alarm already set, or will be.
	  if (timeout) timeout = clearTimeout(timeout);
	  var delay = time - clockNow;
	  if (delay > 24) {
	    if (time < Infinity) timeout = setTimeout(wake, delay);
	    if (interval) interval = clearInterval(interval);
	  } else {
	    if (!interval) clockLast = clockNow, interval = setInterval(poke, pokeDelay);
	    frame = 1, setFrame(wake);
	  }
	}

	var timeout$1 = function(callback, delay, time) {
	  var t = new Timer;
	  delay = delay == null ? 0 : +delay;
	  t.restart(function(elapsed) {
	    t.stop();
	    callback(elapsed + delay);
	  }, delay, time);
	  return t;
	};

	var interval$1 = function(callback, delay, time) {
	  var t = new Timer, total = delay;
	  if (delay == null) return t.restart(callback, delay, time), t;
	  delay = +delay, time = time == null ? now() : +time;
	  t.restart(function tick(elapsed) {
	    elapsed += total;
	    t.restart(tick, total += delay, time);
	    callback(elapsed);
	  }, delay, time);
	  return t;
	};

	var emptyOn = dispatch("start", "end", "interrupt");
	var emptyTween = [];

	var CREATED = 0;
	var SCHEDULED = 1;
	var STARTING = 2;
	var STARTED = 3;
	var RUNNING = 4;
	var ENDING = 5;
	var ENDED = 6;

	var schedule = function(node, name, id, index, group, timing) {
	  var schedules = node.__transition;
	  if (!schedules) node.__transition = {};
	  else if (id in schedules) return;
	  create(node, id, {
	    name: name,
	    index: index, // For context during callback.
	    group: group, // For context during callback.
	    on: emptyOn,
	    tween: emptyTween,
	    time: timing.time,
	    delay: timing.delay,
	    duration: timing.duration,
	    ease: timing.ease,
	    timer: null,
	    state: CREATED
	  });
	};

	function init(node, id) {
	  var schedule = node.__transition;
	  if (!schedule || !(schedule = schedule[id]) || schedule.state > CREATED) throw new Error("too late");
	  return schedule;
	}

	function set$1(node, id) {
	  var schedule = node.__transition;
	  if (!schedule || !(schedule = schedule[id]) || schedule.state > STARTING) throw new Error("too late");
	  return schedule;
	}

	function get$1(node, id) {
	  var schedule = node.__transition;
	  if (!schedule || !(schedule = schedule[id])) throw new Error("too late");
	  return schedule;
	}

	function create(node, id, self) {
	  var schedules = node.__transition,
	      tween;

	  // Initialize the self timer when the transition is created.
	  // Note the actual delay is not known until the first callback!
	  schedules[id] = self;
	  self.timer = timer(schedule, 0, self.time);

	  function schedule(elapsed) {
	    self.state = SCHEDULED;
	    self.timer.restart(start, self.delay, self.time);

	    // If the elapsed delay is less than our first sleep, start immediately.
	    if (self.delay <= elapsed) start(elapsed - self.delay);
	  }

	  function start(elapsed) {
	    var i, j, n, o;

	    // If the state is not SCHEDULED, then we previously errored on start.
	    if (self.state !== SCHEDULED) return stop();

	    for (i in schedules) {
	      o = schedules[i];
	      if (o.name !== self.name) continue;

	      // While this element already has a starting transition during this frame,
	      // defer starting an interrupting transition until that transition has a
	      // chance to tick (and possibly end); see d3/d3-transition#54!
	      if (o.state === STARTED) return timeout$1(start);

	      // Interrupt the active transition, if any.
	      // Dispatch the interrupt event.
	      if (o.state === RUNNING) {
	        o.state = ENDED;
	        o.timer.stop();
	        o.on.call("interrupt", node, node.__data__, o.index, o.group);
	        delete schedules[i];
	      }

	      // Cancel any pre-empted transitions. No interrupt event is dispatched
	      // because the cancelled transitions never started. Note that this also
	      // removes this transition from the pending list!
	      else if (+i < id) {
	        o.state = ENDED;
	        o.timer.stop();
	        delete schedules[i];
	      }
	    }

	    // Defer the first tick to end of the current frame; see d3/d3#1576.
	    // Note the transition may be canceled after start and before the first tick!
	    // Note this must be scheduled before the start event; see d3/d3-transition#16!
	    // Assuming this is successful, subsequent callbacks go straight to tick.
	    timeout$1(function() {
	      if (self.state === STARTED) {
	        self.state = RUNNING;
	        self.timer.restart(tick, self.delay, self.time);
	        tick(elapsed);
	      }
	    });

	    // Dispatch the start event.
	    // Note this must be done before the tween are initialized.
	    self.state = STARTING;
	    self.on.call("start", node, node.__data__, self.index, self.group);
	    if (self.state !== STARTING) return; // interrupted
	    self.state = STARTED;

	    // Initialize the tween, deleting null tween.
	    tween = new Array(n = self.tween.length);
	    for (i = 0, j = -1; i < n; ++i) {
	      if (o = self.tween[i].value.call(node, node.__data__, self.index, self.group)) {
	        tween[++j] = o;
	      }
	    }
	    tween.length = j + 1;
	  }

	  function tick(elapsed) {
	    var t = elapsed < self.duration ? self.ease.call(null, elapsed / self.duration) : (self.timer.restart(stop), self.state = ENDING, 1),
	        i = -1,
	        n = tween.length;

	    while (++i < n) {
	      tween[i].call(null, t);
	    }

	    // Dispatch the end event.
	    if (self.state === ENDING) {
	      self.on.call("end", node, node.__data__, self.index, self.group);
	      stop();
	    }
	  }

	  function stop() {
	    self.state = ENDED;
	    self.timer.stop();
	    delete schedules[id];
	    for (var i in schedules) return; // eslint-disable-line no-unused-vars
	    delete node.__transition;
	  }
	}

	var interrupt = function(node, name) {
	  var schedules = node.__transition,
	      schedule$$1,
	      active,
	      empty = true,
	      i;

	  if (!schedules) return;

	  name = name == null ? null : name + "";

	  for (i in schedules) {
	    if ((schedule$$1 = schedules[i]).name !== name) { empty = false; continue; }
	    active = schedule$$1.state > STARTING && schedule$$1.state < ENDING;
	    schedule$$1.state = ENDED;
	    schedule$$1.timer.stop();
	    if (active) schedule$$1.on.call("interrupt", node, node.__data__, schedule$$1.index, schedule$$1.group);
	    delete schedules[i];
	  }

	  if (empty) delete node.__transition;
	};

	var selection_interrupt = function(name) {
	  return this.each(function() {
	    interrupt(this, name);
	  });
	};

	function tweenRemove(id, name) {
	  var tween0, tween1;
	  return function() {
	    var schedule$$1 = set$1(this, id),
	        tween = schedule$$1.tween;

	    // If this node shared tween with the previous node,
	    // just assign the updated shared tween and we’re done!
	    // Otherwise, copy-on-write.
	    if (tween !== tween0) {
	      tween1 = tween0 = tween;
	      for (var i = 0, n = tween1.length; i < n; ++i) {
	        if (tween1[i].name === name) {
	          tween1 = tween1.slice();
	          tween1.splice(i, 1);
	          break;
	        }
	      }
	    }

	    schedule$$1.tween = tween1;
	  };
	}

	function tweenFunction(id, name, value) {
	  var tween0, tween1;
	  if (typeof value !== "function") throw new Error;
	  return function() {
	    var schedule$$1 = set$1(this, id),
	        tween = schedule$$1.tween;

	    // If this node shared tween with the previous node,
	    // just assign the updated shared tween and we’re done!
	    // Otherwise, copy-on-write.
	    if (tween !== tween0) {
	      tween1 = (tween0 = tween).slice();
	      for (var t = {name: name, value: value}, i = 0, n = tween1.length; i < n; ++i) {
	        if (tween1[i].name === name) {
	          tween1[i] = t;
	          break;
	        }
	      }
	      if (i === n) tween1.push(t);
	    }

	    schedule$$1.tween = tween1;
	  };
	}

	var transition_tween = function(name, value) {
	  var id = this._id;

	  name += "";

	  if (arguments.length < 2) {
	    var tween = get$1(this.node(), id).tween;
	    for (var i = 0, n = tween.length, t; i < n; ++i) {
	      if ((t = tween[i]).name === name) {
	        return t.value;
	      }
	    }
	    return null;
	  }

	  return this.each((value == null ? tweenRemove : tweenFunction)(id, name, value));
	};

	function tweenValue(transition, name, value) {
	  var id = transition._id;

	  transition.each(function() {
	    var schedule$$1 = set$1(this, id);
	    (schedule$$1.value || (schedule$$1.value = {}))[name] = value.apply(this, arguments);
	  });

	  return function(node) {
	    return get$1(node, id).value[name];
	  };
	}

	var interpolate = function(a, b) {
	  var c;
	  return (typeof b === "number" ? reinterpolate
	      : b instanceof color ? interpolateRgb
	      : (c = color(b)) ? (b = c, interpolateRgb)
	      : interpolateString)(a, b);
	};

	function attrRemove$1(name) {
	  return function() {
	    this.removeAttribute(name);
	  };
	}

	function attrRemoveNS$1(fullname) {
	  return function() {
	    this.removeAttributeNS(fullname.space, fullname.local);
	  };
	}

	function attrConstant$1(name, interpolate$$1, value1) {
	  var value00,
	      interpolate0;
	  return function() {
	    var value0 = this.getAttribute(name);
	    return value0 === value1 ? null
	        : value0 === value00 ? interpolate0
	        : interpolate0 = interpolate$$1(value00 = value0, value1);
	  };
	}

	function attrConstantNS$1(fullname, interpolate$$1, value1) {
	  var value00,
	      interpolate0;
	  return function() {
	    var value0 = this.getAttributeNS(fullname.space, fullname.local);
	    return value0 === value1 ? null
	        : value0 === value00 ? interpolate0
	        : interpolate0 = interpolate$$1(value00 = value0, value1);
	  };
	}

	function attrFunction$1(name, interpolate$$1, value) {
	  var value00,
	      value10,
	      interpolate0;
	  return function() {
	    var value0, value1 = value(this);
	    if (value1 == null) return void this.removeAttribute(name);
	    value0 = this.getAttribute(name);
	    return value0 === value1 ? null
	        : value0 === value00 && value1 === value10 ? interpolate0
	        : interpolate0 = interpolate$$1(value00 = value0, value10 = value1);
	  };
	}

	function attrFunctionNS$1(fullname, interpolate$$1, value) {
	  var value00,
	      value10,
	      interpolate0;
	  return function() {
	    var value0, value1 = value(this);
	    if (value1 == null) return void this.removeAttributeNS(fullname.space, fullname.local);
	    value0 = this.getAttributeNS(fullname.space, fullname.local);
	    return value0 === value1 ? null
	        : value0 === value00 && value1 === value10 ? interpolate0
	        : interpolate0 = interpolate$$1(value00 = value0, value10 = value1);
	  };
	}

	var transition_attr = function(name, value) {
	  var fullname = namespace(name), i = fullname === "transform" ? interpolateTransformSvg : interpolate;
	  return this.attrTween(name, typeof value === "function"
	      ? (fullname.local ? attrFunctionNS$1 : attrFunction$1)(fullname, i, tweenValue(this, "attr." + name, value))
	      : value == null ? (fullname.local ? attrRemoveNS$1 : attrRemove$1)(fullname)
	      : (fullname.local ? attrConstantNS$1 : attrConstant$1)(fullname, i, value + ""));
	};

	function attrTweenNS(fullname, value) {
	  function tween() {
	    var node = this, i = value.apply(node, arguments);
	    return i && function(t) {
	      node.setAttributeNS(fullname.space, fullname.local, i(t));
	    };
	  }
	  tween._value = value;
	  return tween;
	}

	function attrTween(name, value) {
	  function tween() {
	    var node = this, i = value.apply(node, arguments);
	    return i && function(t) {
	      node.setAttribute(name, i(t));
	    };
	  }
	  tween._value = value;
	  return tween;
	}

	var transition_attrTween = function(name, value) {
	  var key = "attr." + name;
	  if (arguments.length < 2) return (key = this.tween(key)) && key._value;
	  if (value == null) return this.tween(key, null);
	  if (typeof value !== "function") throw new Error;
	  var fullname = namespace(name);
	  return this.tween(key, (fullname.local ? attrTweenNS : attrTween)(fullname, value));
	};

	function delayFunction(id, value) {
	  return function() {
	    init(this, id).delay = +value.apply(this, arguments);
	  };
	}

	function delayConstant(id, value) {
	  return value = +value, function() {
	    init(this, id).delay = value;
	  };
	}

	var transition_delay = function(value) {
	  var id = this._id;

	  return arguments.length
	      ? this.each((typeof value === "function"
	          ? delayFunction
	          : delayConstant)(id, value))
	      : get$1(this.node(), id).delay;
	};

	function durationFunction(id, value) {
	  return function() {
	    set$1(this, id).duration = +value.apply(this, arguments);
	  };
	}

	function durationConstant(id, value) {
	  return value = +value, function() {
	    set$1(this, id).duration = value;
	  };
	}

	var transition_duration = function(value) {
	  var id = this._id;

	  return arguments.length
	      ? this.each((typeof value === "function"
	          ? durationFunction
	          : durationConstant)(id, value))
	      : get$1(this.node(), id).duration;
	};

	function easeConstant(id, value) {
	  if (typeof value !== "function") throw new Error;
	  return function() {
	    set$1(this, id).ease = value;
	  };
	}

	var transition_ease = function(value) {
	  var id = this._id;

	  return arguments.length
	      ? this.each(easeConstant(id, value))
	      : get$1(this.node(), id).ease;
	};

	var transition_filter = function(match) {
	  if (typeof match !== "function") match = matcher$1(match);

	  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
	    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {
	      if ((node = group[i]) && match.call(node, node.__data__, i, group)) {
	        subgroup.push(node);
	      }
	    }
	  }

	  return new Transition(subgroups, this._parents, this._name, this._id);
	};

	var transition_merge = function(transition$$1) {
	  if (transition$$1._id !== this._id) throw new Error;

	  for (var groups0 = this._groups, groups1 = transition$$1._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {
	    for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
	      if (node = group0[i] || group1[i]) {
	        merge[i] = node;
	      }
	    }
	  }

	  for (; j < m0; ++j) {
	    merges[j] = groups0[j];
	  }

	  return new Transition(merges, this._parents, this._name, this._id);
	};

	function start(name) {
	  return (name + "").trim().split(/^|\s+/).every(function(t) {
	    var i = t.indexOf(".");
	    if (i >= 0) t = t.slice(0, i);
	    return !t || t === "start";
	  });
	}

	function onFunction(id, name, listener) {
	  var on0, on1, sit = start(name) ? init : set$1;
	  return function() {
	    var schedule$$1 = sit(this, id),
	        on = schedule$$1.on;

	    // If this node shared a dispatch with the previous node,
	    // just assign the updated shared dispatch and we’re done!
	    // Otherwise, copy-on-write.
	    if (on !== on0) (on1 = (on0 = on).copy()).on(name, listener);

	    schedule$$1.on = on1;
	  };
	}

	var transition_on = function(name, listener) {
	  var id = this._id;

	  return arguments.length < 2
	      ? get$1(this.node(), id).on.on(name)
	      : this.each(onFunction(id, name, listener));
	};

	function removeFunction(id) {
	  return function() {
	    var parent = this.parentNode;
	    for (var i in this.__transition) if (+i !== id) return;
	    if (parent) parent.removeChild(this);
	  };
	}

	var transition_remove = function() {
	  return this.on("end.remove", removeFunction(this._id));
	};

	var transition_select = function(select$$1) {
	  var name = this._name,
	      id = this._id;

	  if (typeof select$$1 !== "function") select$$1 = selector(select$$1);

	  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
	    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
	      if ((node = group[i]) && (subnode = select$$1.call(node, node.__data__, i, group))) {
	        if ("__data__" in node) subnode.__data__ = node.__data__;
	        subgroup[i] = subnode;
	        schedule(subgroup[i], name, id, i, subgroup, get$1(node, id));
	      }
	    }
	  }

	  return new Transition(subgroups, this._parents, name, id);
	};

	var transition_selectAll = function(select$$1) {
	  var name = this._name,
	      id = this._id;

	  if (typeof select$$1 !== "function") select$$1 = selectorAll(select$$1);

	  for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {
	    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
	      if (node = group[i]) {
	        for (var children = select$$1.call(node, node.__data__, i, group), child, inherit = get$1(node, id), k = 0, l = children.length; k < l; ++k) {
	          if (child = children[k]) {
	            schedule(child, name, id, k, children, inherit);
	          }
	        }
	        subgroups.push(children);
	        parents.push(node);
	      }
	    }
	  }

	  return new Transition(subgroups, parents, name, id);
	};

	var Selection$1 = selection.prototype.constructor;

	var transition_selection = function() {
	  return new Selection$1(this._groups, this._parents);
	};

	function styleRemove$1(name, interpolate$$1) {
	  var value00,
	      value10,
	      interpolate0;
	  return function() {
	    var value0 = styleValue(this, name),
	        value1 = (this.style.removeProperty(name), styleValue(this, name));
	    return value0 === value1 ? null
	        : value0 === value00 && value1 === value10 ? interpolate0
	        : interpolate0 = interpolate$$1(value00 = value0, value10 = value1);
	  };
	}

	function styleRemoveEnd(name) {
	  return function() {
	    this.style.removeProperty(name);
	  };
	}

	function styleConstant$1(name, interpolate$$1, value1) {
	  var value00,
	      interpolate0;
	  return function() {
	    var value0 = styleValue(this, name);
	    return value0 === value1 ? null
	        : value0 === value00 ? interpolate0
	        : interpolate0 = interpolate$$1(value00 = value0, value1);
	  };
	}

	function styleFunction$1(name, interpolate$$1, value) {
	  var value00,
	      value10,
	      interpolate0;
	  return function() {
	    var value0 = styleValue(this, name),
	        value1 = value(this);
	    if (value1 == null) value1 = (this.style.removeProperty(name), styleValue(this, name));
	    return value0 === value1 ? null
	        : value0 === value00 && value1 === value10 ? interpolate0
	        : interpolate0 = interpolate$$1(value00 = value0, value10 = value1);
	  };
	}

	var transition_style = function(name, value, priority) {
	  var i = (name += "") === "transform" ? interpolateTransformCss : interpolate;
	  return value == null ? this
	          .styleTween(name, styleRemove$1(name, i))
	          .on("end.style." + name, styleRemoveEnd(name))
	      : this.styleTween(name, typeof value === "function"
	          ? styleFunction$1(name, i, tweenValue(this, "style." + name, value))
	          : styleConstant$1(name, i, value + ""), priority);
	};

	function styleTween(name, value, priority) {
	  function tween() {
	    var node = this, i = value.apply(node, arguments);
	    return i && function(t) {
	      node.style.setProperty(name, i(t), priority);
	    };
	  }
	  tween._value = value;
	  return tween;
	}

	var transition_styleTween = function(name, value, priority) {
	  var key = "style." + (name += "");
	  if (arguments.length < 2) return (key = this.tween(key)) && key._value;
	  if (value == null) return this.tween(key, null);
	  if (typeof value !== "function") throw new Error;
	  return this.tween(key, styleTween(name, value, priority == null ? "" : priority));
	};

	function textConstant$1(value) {
	  return function() {
	    this.textContent = value;
	  };
	}

	function textFunction$1(value) {
	  return function() {
	    var value1 = value(this);
	    this.textContent = value1 == null ? "" : value1;
	  };
	}

	var transition_text = function(value) {
	  return this.tween("text", typeof value === "function"
	      ? textFunction$1(tweenValue(this, "text", value))
	      : textConstant$1(value == null ? "" : value + ""));
	};

	var transition_transition = function() {
	  var name = this._name,
	      id0 = this._id,
	      id1 = newId();

	  for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {
	    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
	      if (node = group[i]) {
	        var inherit = get$1(node, id0);
	        schedule(node, name, id1, i, group, {
	          time: inherit.time + inherit.delay + inherit.duration,
	          delay: 0,
	          duration: inherit.duration,
	          ease: inherit.ease
	        });
	      }
	    }
	  }

	  return new Transition(groups, this._parents, name, id1);
	};

	var id = 0;

	function Transition(groups, parents, name, id) {
	  this._groups = groups;
	  this._parents = parents;
	  this._name = name;
	  this._id = id;
	}

	function transition(name) {
	  return selection().transition(name);
	}

	function newId() {
	  return ++id;
	}

	var selection_prototype = selection.prototype;

	Transition.prototype = transition.prototype = {
	  constructor: Transition,
	  select: transition_select,
	  selectAll: transition_selectAll,
	  filter: transition_filter,
	  merge: transition_merge,
	  selection: transition_selection,
	  transition: transition_transition,
	  call: selection_prototype.call,
	  nodes: selection_prototype.nodes,
	  node: selection_prototype.node,
	  size: selection_prototype.size,
	  empty: selection_prototype.empty,
	  each: selection_prototype.each,
	  on: transition_on,
	  attr: transition_attr,
	  attrTween: transition_attrTween,
	  style: transition_style,
	  styleTween: transition_styleTween,
	  text: transition_text,
	  remove: transition_remove,
	  tween: transition_tween,
	  delay: transition_delay,
	  duration: transition_duration,
	  ease: transition_ease
	};

	function linear$1(t) {
	  return +t;
	}

	function quadIn(t) {
	  return t * t;
	}

	function quadOut(t) {
	  return t * (2 - t);
	}

	function quadInOut(t) {
	  return ((t *= 2) <= 1 ? t * t : --t * (2 - t) + 1) / 2;
	}

	function cubicIn(t) {
	  return t * t * t;
	}

	function cubicOut(t) {
	  return --t * t * t + 1;
	}

	function cubicInOut(t) {
	  return ((t *= 2) <= 1 ? t * t * t : (t -= 2) * t * t + 2) / 2;
	}

	var exponent = 3;

	var polyIn = (function custom(e) {
	  e = +e;

	  function polyIn(t) {
	    return Math.pow(t, e);
	  }

	  polyIn.exponent = custom;

	  return polyIn;
	})(exponent);

	var polyOut = (function custom(e) {
	  e = +e;

	  function polyOut(t) {
	    return 1 - Math.pow(1 - t, e);
	  }

	  polyOut.exponent = custom;

	  return polyOut;
	})(exponent);

	var polyInOut = (function custom(e) {
	  e = +e;

	  function polyInOut(t) {
	    return ((t *= 2) <= 1 ? Math.pow(t, e) : 2 - Math.pow(2 - t, e)) / 2;
	  }

	  polyInOut.exponent = custom;

	  return polyInOut;
	})(exponent);

	var pi = Math.PI;
	var halfPi = pi / 2;

	function sinIn(t) {
	  return 1 - Math.cos(t * halfPi);
	}

	function sinOut(t) {
	  return Math.sin(t * halfPi);
	}

	function sinInOut(t) {
	  return (1 - Math.cos(pi * t)) / 2;
	}

	function expIn(t) {
	  return Math.pow(2, 10 * t - 10);
	}

	function expOut(t) {
	  return 1 - Math.pow(2, -10 * t);
	}

	function expInOut(t) {
	  return ((t *= 2) <= 1 ? Math.pow(2, 10 * t - 10) : 2 - Math.pow(2, 10 - 10 * t)) / 2;
	}

	function circleIn(t) {
	  return 1 - Math.sqrt(1 - t * t);
	}

	function circleOut(t) {
	  return Math.sqrt(1 - --t * t);
	}

	function circleInOut(t) {
	  return ((t *= 2) <= 1 ? 1 - Math.sqrt(1 - t * t) : Math.sqrt(1 - (t -= 2) * t) + 1) / 2;
	}

	var b1 = 4 / 11;
	var b2 = 6 / 11;
	var b3 = 8 / 11;
	var b4 = 3 / 4;
	var b5 = 9 / 11;
	var b6 = 10 / 11;
	var b7 = 15 / 16;
	var b8 = 21 / 22;
	var b9 = 63 / 64;
	var b0 = 1 / b1 / b1;

	function bounceIn(t) {
	  return 1 - bounceOut(1 - t);
	}

	function bounceOut(t) {
	  return (t = +t) < b1 ? b0 * t * t : t < b3 ? b0 * (t -= b2) * t + b4 : t < b6 ? b0 * (t -= b5) * t + b7 : b0 * (t -= b8) * t + b9;
	}

	function bounceInOut(t) {
	  return ((t *= 2) <= 1 ? 1 - bounceOut(1 - t) : bounceOut(t - 1) + 1) / 2;
	}

	var overshoot = 1.70158;

	var backIn = (function custom(s) {
	  s = +s;

	  function backIn(t) {
	    return t * t * ((s + 1) * t - s);
	  }

	  backIn.overshoot = custom;

	  return backIn;
	})(overshoot);

	var backOut = (function custom(s) {
	  s = +s;

	  function backOut(t) {
	    return --t * t * ((s + 1) * t + s) + 1;
	  }

	  backOut.overshoot = custom;

	  return backOut;
	})(overshoot);

	var backInOut = (function custom(s) {
	  s = +s;

	  function backInOut(t) {
	    return ((t *= 2) < 1 ? t * t * ((s + 1) * t - s) : (t -= 2) * t * ((s + 1) * t + s) + 2) / 2;
	  }

	  backInOut.overshoot = custom;

	  return backInOut;
	})(overshoot);

	var tau = 2 * Math.PI;
	var amplitude = 1;
	var period = 0.3;

	var elasticIn = (function custom(a, p) {
	  var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);

	  function elasticIn(t) {
	    return a * Math.pow(2, 10 * --t) * Math.sin((s - t) / p);
	  }

	  elasticIn.amplitude = function(a) { return custom(a, p * tau); };
	  elasticIn.period = function(p) { return custom(a, p); };

	  return elasticIn;
	})(amplitude, period);

	var elasticOut = (function custom(a, p) {
	  var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);

	  function elasticOut(t) {
	    return 1 - a * Math.pow(2, -10 * (t = +t)) * Math.sin((t + s) / p);
	  }

	  elasticOut.amplitude = function(a) { return custom(a, p * tau); };
	  elasticOut.period = function(p) { return custom(a, p); };

	  return elasticOut;
	})(amplitude, period);

	var elasticInOut = (function custom(a, p) {
	  var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);

	  function elasticInOut(t) {
	    return ((t = t * 2 - 1) < 0
	        ? a * Math.pow(2, 10 * t) * Math.sin((s - t) / p)
	        : 2 - a * Math.pow(2, -10 * t) * Math.sin((s + t) / p)) / 2;
	  }

	  elasticInOut.amplitude = function(a) { return custom(a, p * tau); };
	  elasticInOut.period = function(p) { return custom(a, p); };

	  return elasticInOut;
	})(amplitude, period);

	var defaultTiming = {
	  time: null, // Set on use.
	  delay: 0,
	  duration: 250,
	  ease: cubicInOut
	};

	function inherit(node, id) {
	  var timing;
	  while (!(timing = node.__transition) || !(timing = timing[id])) {
	    if (!(node = node.parentNode)) {
	      return defaultTiming.time = now(), defaultTiming;
	    }
	  }
	  return timing;
	}

	var selection_transition = function(name) {
	  var id,
	      timing;

	  if (name instanceof Transition) {
	    id = name._id, name = name._name;
	  } else {
	    id = newId(), (timing = defaultTiming).time = now(), name = name == null ? null : name + "";
	  }

	  for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {
	    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
	      if (node = group[i]) {
	        schedule(node, name, id, i, group, timing || inherit(node, id));
	      }
	    }
	  }

	  return new Transition(groups, this._parents, name, id);
	};

	selection.prototype.interrupt = selection_interrupt;
	selection.prototype.transition = selection_transition;

	var root$1 = [null];

	var active = function(node, name) {
	  var schedules = node.__transition,
	      schedule$$1,
	      i;

	  if (schedules) {
	    name = name == null ? null : name + "";
	    for (i in schedules) {
	      if ((schedule$$1 = schedules[i]).state > SCHEDULED && schedule$$1.name === name) {
	        return new Transition([[node]], root$1, name, +i);
	      }
	    }
	  }

	  return null;
	};

	var constant$4 = function(x) {
	  return function() {
	    return x;
	  };
	};

	var BrushEvent = function(target, type, selection) {
	  this.target = target;
	  this.type = type;
	  this.selection = selection;
	};

	function nopropagation$1() {
	  exports.event.stopImmediatePropagation();
	}

	var noevent$1 = function() {
	  exports.event.preventDefault();
	  exports.event.stopImmediatePropagation();
	};

	var MODE_DRAG = {name: "drag"};
	var MODE_SPACE = {name: "space"};
	var MODE_HANDLE = {name: "handle"};
	var MODE_CENTER = {name: "center"};

	var X = {
	  name: "x",
	  handles: ["e", "w"].map(type),
	  input: function(x, e) { return x && [[x[0], e[0][1]], [x[1], e[1][1]]]; },
	  output: function(xy) { return xy && [xy[0][0], xy[1][0]]; }
	};

	var Y = {
	  name: "y",
	  handles: ["n", "s"].map(type),
	  input: function(y, e) { return y && [[e[0][0], y[0]], [e[1][0], y[1]]]; },
	  output: function(xy) { return xy && [xy[0][1], xy[1][1]]; }
	};

	var XY = {
	  name: "xy",
	  handles: ["n", "e", "s", "w", "nw", "ne", "se", "sw"].map(type),
	  input: function(xy) { return xy; },
	  output: function(xy) { return xy; }
	};

	var cursors = {
	  overlay: "crosshair",
	  selection: "move",
	  n: "ns-resize",
	  e: "ew-resize",
	  s: "ns-resize",
	  w: "ew-resize",
	  nw: "nwse-resize",
	  ne: "nesw-resize",
	  se: "nwse-resize",
	  sw: "nesw-resize"
	};

	var flipX = {
	  e: "w",
	  w: "e",
	  nw: "ne",
	  ne: "nw",
	  se: "sw",
	  sw: "se"
	};

	var flipY = {
	  n: "s",
	  s: "n",
	  nw: "sw",
	  ne: "se",
	  se: "ne",
	  sw: "nw"
	};

	var signsX = {
	  overlay: +1,
	  selection: +1,
	  n: null,
	  e: +1,
	  s: null,
	  w: -1,
	  nw: -1,
	  ne: +1,
	  se: +1,
	  sw: -1
	};

	var signsY = {
	  overlay: +1,
	  selection: +1,
	  n: -1,
	  e: null,
	  s: +1,
	  w: null,
	  nw: -1,
	  ne: -1,
	  se: +1,
	  sw: +1
	};

	function type(t) {
	  return {type: t};
	}

	// Ignore right-click, since that should open the context menu.
	function defaultFilter() {
	  return !exports.event.button;
	}

	function defaultExtent() {
	  var svg = this.ownerSVGElement || this;
	  return [[0, 0], [svg.width.baseVal.value, svg.height.baseVal.value]];
	}

	// Like d3.local, but with the name “__brush” rather than auto-generated.
	function local$$1(node) {
	  while (!node.__brush) if (!(node = node.parentNode)) return;
	  return node.__brush;
	}

	function empty(extent) {
	  return extent[0][0] === extent[1][0]
	      || extent[0][1] === extent[1][1];
	}

	function brushSelection(node) {
	  var state = node.__brush;
	  return state ? state.dim.output(state.selection) : null;
	}

	function brushX() {
	  return brush$1(X);
	}

	function brushY() {
	  return brush$1(Y);
	}

	var brush = function() {
	  return brush$1(XY);
	};

	function brush$1(dim) {
	  var extent = defaultExtent,
	      filter = defaultFilter,
	      listeners = dispatch(brush, "start", "brush", "end"),
	      handleSize = 6,
	      touchending;

	  function brush(group) {
	    var overlay = group
	        .property("__brush", initialize)
	      .selectAll(".overlay")
	      .data([type("overlay")]);

	    overlay.enter().append("rect")
	        .attr("class", "overlay")
	        .attr("pointer-events", "all")
	        .attr("cursor", cursors.overlay)
	      .merge(overlay)
	        .each(function() {
	          var extent = local$$1(this).extent;
	          select(this)
	              .attr("x", extent[0][0])
	              .attr("y", extent[0][1])
	              .attr("width", extent[1][0] - extent[0][0])
	              .attr("height", extent[1][1] - extent[0][1]);
	        });

	    group.selectAll(".selection")
	      .data([type("selection")])
	      .enter().append("rect")
	        .attr("class", "selection")
	        .attr("cursor", cursors.selection)
	        .attr("fill", "#777")
	        .attr("fill-opacity", 0.3)
	        .attr("stroke", "#fff")
	        .attr("shape-rendering", "crispEdges");

	    var handle = group.selectAll(".handle")
	      .data(dim.handles, function(d) { return d.type; });

	    handle.exit().remove();

	    handle.enter().append("rect")
	        .attr("class", function(d) { return "handle handle--" + d.type; })
	        .attr("cursor", function(d) { return cursors[d.type]; });

	    group
	        .each(redraw)
	        .attr("fill", "none")
	        .attr("pointer-events", "all")
	        .style("-webkit-tap-highlight-color", "rgba(0,0,0,0)")
	        .on("mousedown.brush touchstart.brush", started);
	  }

	  brush.move = function(group, selection) {
	    if (group.selection) {
	      group
	          .on("start.brush", function() { emitter(this, arguments).beforestart().start(); })
	          .on("interrupt.brush end.brush", function() { emitter(this, arguments).end(); })
	          .tween("brush", function() {
	            var that = this,
	                state = that.__brush,
	                emit = emitter(that, arguments),
	                selection0 = state.selection,
	                selection1 = dim.input(typeof selection === "function" ? selection.apply(this, arguments) : selection, state.extent),
	                i = interpolateValue(selection0, selection1);

	            function tween(t) {
	              state.selection = t === 1 && empty(selection1) ? null : i(t);
	              redraw.call(that);
	              emit.brush();
	            }

	            return selection0 && selection1 ? tween : tween(1);
	          });
	    } else {
	      group
	          .each(function() {
	            var that = this,
	                args = arguments,
	                state = that.__brush,
	                selection1 = dim.input(typeof selection === "function" ? selection.apply(that, args) : selection, state.extent),
	                emit = emitter(that, args).beforestart();

	            interrupt(that);
	            state.selection = selection1 == null || empty(selection1) ? null : selection1;
	            redraw.call(that);
	            emit.start().brush().end();
	          });
	    }
	  };

	  function redraw() {
	    var group = select(this),
	        selection = local$$1(this).selection;

	    if (selection) {
	      group.selectAll(".selection")
	          .style("display", null)
	          .attr("x", selection[0][0])
	          .attr("y", selection[0][1])
	          .attr("width", selection[1][0] - selection[0][0])
	          .attr("height", selection[1][1] - selection[0][1]);

	      group.selectAll(".handle")
	          .style("display", null)
	          .attr("x", function(d) { return d.type[d.type.length - 1] === "e" ? selection[1][0] - handleSize / 2 : selection[0][0] - handleSize / 2; })
	          .attr("y", function(d) { return d.type[0] === "s" ? selection[1][1] - handleSize / 2 : selection[0][1] - handleSize / 2; })
	          .attr("width", function(d) { return d.type === "n" || d.type === "s" ? selection[1][0] - selection[0][0] + handleSize : handleSize; })
	          .attr("height", function(d) { return d.type === "e" || d.type === "w" ? selection[1][1] - selection[0][1] + handleSize : handleSize; });
	    }

	    else {
	      group.selectAll(".selection,.handle")
	          .style("display", "none")
	          .attr("x", null)
	          .attr("y", null)
	          .attr("width", null)
	          .attr("height", null);
	    }
	  }

	  function emitter(that, args) {
	    return that.__brush.emitter || new Emitter(that, args);
	  }

	  function Emitter(that, args) {
	    this.that = that;
	    this.args = args;
	    this.state = that.__brush;
	    this.active = 0;
	  }

	  Emitter.prototype = {
	    beforestart: function() {
	      if (++this.active === 1) this.state.emitter = this, this.starting = true;
	      return this;
	    },
	    start: function() {
	      if (this.starting) this.starting = false, this.emit("start");
	      return this;
	    },
	    brush: function() {
	      this.emit("brush");
	      return this;
	    },
	    end: function() {
	      if (--this.active === 0) delete this.state.emitter, this.emit("end");
	      return this;
	    },
	    emit: function(type) {
	      customEvent(new BrushEvent(brush, type, dim.output(this.state.selection)), listeners.apply, listeners, [type, this.that, this.args]);
	    }
	  };

	  function started() {
	    if (exports.event.touches) { if (exports.event.changedTouches.length < exports.event.touches.length) return noevent$1(); }
	    else if (touchending) return;
	    if (!filter.apply(this, arguments)) return;

	    var that = this,
	        type = exports.event.target.__data__.type,
	        mode = (exports.event.metaKey ? type = "overlay" : type) === "selection" ? MODE_DRAG : (exports.event.altKey ? MODE_CENTER : MODE_HANDLE),
	        signX = dim === Y ? null : signsX[type],
	        signY = dim === X ? null : signsY[type],
	        state = local$$1(that),
	        extent = state.extent,
	        selection = state.selection,
	        W = extent[0][0], w0, w1,
	        N = extent[0][1], n0, n1,
	        E = extent[1][0], e0, e1,
	        S = extent[1][1], s0, s1,
	        dx,
	        dy,
	        moving,
	        shifting = signX && signY && exports.event.shiftKey,
	        lockX,
	        lockY,
	        point0 = mouse(that),
	        point = point0,
	        emit = emitter(that, arguments).beforestart();

	    if (type === "overlay") {
	      state.selection = selection = [
	        [w0 = dim === Y ? W : point0[0], n0 = dim === X ? N : point0[1]],
	        [e0 = dim === Y ? E : w0, s0 = dim === X ? S : n0]
	      ];
	    } else {
	      w0 = selection[0][0];
	      n0 = selection[0][1];
	      e0 = selection[1][0];
	      s0 = selection[1][1];
	    }

	    w1 = w0;
	    n1 = n0;
	    e1 = e0;
	    s1 = s0;

	    var group = select(that)
	        .attr("pointer-events", "none");

	    var overlay = group.selectAll(".overlay")
	        .attr("cursor", cursors[type]);

	    if (exports.event.touches) {
	      group
	          .on("touchmove.brush", moved, true)
	          .on("touchend.brush touchcancel.brush", ended, true);
	    } else {
	      var view = select(exports.event.view)
	          .on("keydown.brush", keydowned, true)
	          .on("keyup.brush", keyupped, true)
	          .on("mousemove.brush", moved, true)
	          .on("mouseup.brush", ended, true);

	      dragDisable(exports.event.view);
	    }

	    nopropagation$1();
	    interrupt(that);
	    redraw.call(that);
	    emit.start();

	    function moved() {
	      var point1 = mouse(that);
	      if (shifting && !lockX && !lockY) {
	        if (Math.abs(point1[0] - point[0]) > Math.abs(point1[1] - point[1])) lockY = true;
	        else lockX = true;
	      }
	      point = point1;
	      moving = true;
	      noevent$1();
	      move();
	    }

	    function move() {
	      var t;

	      dx = point[0] - point0[0];
	      dy = point[1] - point0[1];

	      switch (mode) {
	        case MODE_SPACE:
	        case MODE_DRAG: {
	          if (signX) dx = Math.max(W - w0, Math.min(E - e0, dx)), w1 = w0 + dx, e1 = e0 + dx;
	          if (signY) dy = Math.max(N - n0, Math.min(S - s0, dy)), n1 = n0 + dy, s1 = s0 + dy;
	          break;
	        }
	        case MODE_HANDLE: {
	          if (signX < 0) dx = Math.max(W - w0, Math.min(E - w0, dx)), w1 = w0 + dx, e1 = e0;
	          else if (signX > 0) dx = Math.max(W - e0, Math.min(E - e0, dx)), w1 = w0, e1 = e0 + dx;
	          if (signY < 0) dy = Math.max(N - n0, Math.min(S - n0, dy)), n1 = n0 + dy, s1 = s0;
	          else if (signY > 0) dy = Math.max(N - s0, Math.min(S - s0, dy)), n1 = n0, s1 = s0 + dy;
	          break;
	        }
	        case MODE_CENTER: {
	          if (signX) w1 = Math.max(W, Math.min(E, w0 - dx * signX)), e1 = Math.max(W, Math.min(E, e0 + dx * signX));
	          if (signY) n1 = Math.max(N, Math.min(S, n0 - dy * signY)), s1 = Math.max(N, Math.min(S, s0 + dy * signY));
	          break;
	        }
	      }

	      if (e1 < w1) {
	        signX *= -1;
	        t = w0, w0 = e0, e0 = t;
	        t = w1, w1 = e1, e1 = t;
	        if (type in flipX) overlay.attr("cursor", cursors[type = flipX[type]]);
	      }

	      if (s1 < n1) {
	        signY *= -1;
	        t = n0, n0 = s0, s0 = t;
	        t = n1, n1 = s1, s1 = t;
	        if (type in flipY) overlay.attr("cursor", cursors[type = flipY[type]]);
	      }

	      if (state.selection) selection = state.selection; // May be set by brush.move!
	      if (lockX) w1 = selection[0][0], e1 = selection[1][0];
	      if (lockY) n1 = selection[0][1], s1 = selection[1][1];

	      if (selection[0][0] !== w1
	          || selection[0][1] !== n1
	          || selection[1][0] !== e1
	          || selection[1][1] !== s1) {
	        state.selection = [[w1, n1], [e1, s1]];
	        redraw.call(that);
	        emit.brush();
	      }
	    }

	    function ended() {
	      nopropagation$1();
	      if (exports.event.touches) {
	        if (exports.event.touches.length) return;
	        if (touchending) clearTimeout(touchending);
	        touchending = setTimeout(function() { touchending = null; }, 500); // Ghost clicks are delayed!
	        group.on("touchmove.brush touchend.brush touchcancel.brush", null);
	      } else {
	        yesdrag(exports.event.view, moving);
	        view.on("keydown.brush keyup.brush mousemove.brush mouseup.brush", null);
	      }
	      group.attr("pointer-events", "all");
	      overlay.attr("cursor", cursors.overlay);
	      if (state.selection) selection = state.selection; // May be set by brush.move (on start)!
	      if (empty(selection)) state.selection = null, redraw.call(that);
	      emit.end();
	    }

	    function keydowned() {
	      switch (exports.event.keyCode) {
	        case 16: { // SHIFT
	          shifting = signX && signY;
	          break;
	        }
	        case 18: { // ALT
	          if (mode === MODE_HANDLE) {
	            if (signX) e0 = e1 - dx * signX, w0 = w1 + dx * signX;
	            if (signY) s0 = s1 - dy * signY, n0 = n1 + dy * signY;
	            mode = MODE_CENTER;
	            move();
	          }
	          break;
	        }
	        case 32: { // SPACE; takes priority over ALT
	          if (mode === MODE_HANDLE || mode === MODE_CENTER) {
	            if (signX < 0) e0 = e1 - dx; else if (signX > 0) w0 = w1 - dx;
	            if (signY < 0) s0 = s1 - dy; else if (signY > 0) n0 = n1 - dy;
	            mode = MODE_SPACE;
	            overlay.attr("cursor", cursors.selection);
	            move();
	          }
	          break;
	        }
	        default: return;
	      }
	      noevent$1();
	    }

	    function keyupped() {
	      switch (exports.event.keyCode) {
	        case 16: { // SHIFT
	          if (shifting) {
	            lockX = lockY = shifting = false;
	            move();
	          }
	          break;
	        }
	        case 18: { // ALT
	          if (mode === MODE_CENTER) {
	            if (signX < 0) e0 = e1; else if (signX > 0) w0 = w1;
	            if (signY < 0) s0 = s1; else if (signY > 0) n0 = n1;
	            mode = MODE_HANDLE;
	            move();
	          }
	          break;
	        }
	        case 32: { // SPACE
	          if (mode === MODE_SPACE) {
	            if (exports.event.altKey) {
	              if (signX) e0 = e1 - dx * signX, w0 = w1 + dx * signX;
	              if (signY) s0 = s1 - dy * signY, n0 = n1 + dy * signY;
	              mode = MODE_CENTER;
	            } else {
	              if (signX < 0) e0 = e1; else if (signX > 0) w0 = w1;
	              if (signY < 0) s0 = s1; else if (signY > 0) n0 = n1;
	              mode = MODE_HANDLE;
	            }
	            overlay.attr("cursor", cursors[type]);
	            move();
	          }
	          break;
	        }
	        default: return;
	      }
	      noevent$1();
	    }
	  }

	  function initialize() {
	    var state = this.__brush || {selection: null};
	    state.extent = extent.apply(this, arguments);
	    state.dim = dim;
	    return state;
	  }

	  brush.extent = function(_) {
	    return arguments.length ? (extent = typeof _ === "function" ? _ : constant$4([[+_[0][0], +_[0][1]], [+_[1][0], +_[1][1]]]), brush) : extent;
	  };

	  brush.filter = function(_) {
	    return arguments.length ? (filter = typeof _ === "function" ? _ : constant$4(!!_), brush) : filter;
	  };

	  brush.handleSize = function(_) {
	    return arguments.length ? (handleSize = +_, brush) : handleSize;
	  };

	  brush.on = function() {
	    var value = listeners.on.apply(listeners, arguments);
	    return value === listeners ? brush : value;
	  };

	  return brush;
	}

	var cos = Math.cos;
	var sin = Math.sin;
	var pi$1 = Math.PI;
	var halfPi$1 = pi$1 / 2;
	var tau$1 = pi$1 * 2;
	var max$1 = Math.max;

	function compareValue(compare) {
	  return function(a, b) {
	    return compare(
	      a.source.value + a.target.value,
	      b.source.value + b.target.value
	    );
	  };
	}

	var chord = function() {
	  var padAngle = 0,
	      sortGroups = null,
	      sortSubgroups = null,
	      sortChords = null;

	  function chord(matrix) {
	    var n = matrix.length,
	        groupSums = [],
	        groupIndex = sequence(n),
	        subgroupIndex = [],
	        chords = [],
	        groups = chords.groups = new Array(n),
	        subgroups = new Array(n * n),
	        k,
	        x,
	        x0,
	        dx,
	        i,
	        j;

	    // Compute the sum.
	    k = 0, i = -1; while (++i < n) {
	      x = 0, j = -1; while (++j < n) {
	        x += matrix[i][j];
	      }
	      groupSums.push(x);
	      subgroupIndex.push(sequence(n));
	      k += x;
	    }

	    // Sort groups…
	    if (sortGroups) groupIndex.sort(function(a, b) {
	      return sortGroups(groupSums[a], groupSums[b]);
	    });

	    // Sort subgroups…
	    if (sortSubgroups) subgroupIndex.forEach(function(d, i) {
	      d.sort(function(a, b) {
	        return sortSubgroups(matrix[i][a], matrix[i][b]);
	      });
	    });

	    // Convert the sum to scaling factor for [0, 2pi].
	    // TODO Allow start and end angle to be specified?
	    // TODO Allow padding to be specified as percentage?
	    k = max$1(0, tau$1 - padAngle * n) / k;
	    dx = k ? padAngle : tau$1 / n;

	    // Compute the start and end angle for each group and subgroup.
	    // Note: Opera has a bug reordering object literal properties!
	    x = 0, i = -1; while (++i < n) {
	      x0 = x, j = -1; while (++j < n) {
	        var di = groupIndex[i],
	            dj = subgroupIndex[di][j],
	            v = matrix[di][dj],
	            a0 = x,
	            a1 = x += v * k;
	        subgroups[dj * n + di] = {
	          index: di,
	          subindex: dj,
	          startAngle: a0,
	          endAngle: a1,
	          value: v
	        };
	      }
	      groups[di] = {
	        index: di,
	        startAngle: x0,
	        endAngle: x,
	        value: groupSums[di]
	      };
	      x += dx;
	    }

	    // Generate chords for each (non-empty) subgroup-subgroup link.
	    i = -1; while (++i < n) {
	      j = i - 1; while (++j < n) {
	        var source = subgroups[j * n + i],
	            target = subgroups[i * n + j];
	        if (source.value || target.value) {
	          chords.push(source.value < target.value
	              ? {source: target, target: source}
	              : {source: source, target: target});
	        }
	      }
	    }

	    return sortChords ? chords.sort(sortChords) : chords;
	  }

	  chord.padAngle = function(_) {
	    return arguments.length ? (padAngle = max$1(0, _), chord) : padAngle;
	  };

	  chord.sortGroups = function(_) {
	    return arguments.length ? (sortGroups = _, chord) : sortGroups;
	  };

	  chord.sortSubgroups = function(_) {
	    return arguments.length ? (sortSubgroups = _, chord) : sortSubgroups;
	  };

	  chord.sortChords = function(_) {
	    return arguments.length ? (_ == null ? sortChords = null : (sortChords = compareValue(_))._ = _, chord) : sortChords && sortChords._;
	  };

	  return chord;
	};

	var slice$2 = Array.prototype.slice;

	var constant$5 = function(x) {
	  return function() {
	    return x;
	  };
	};

	var pi$2 = Math.PI;
	var tau$2 = 2 * pi$2;
	var epsilon$1 = 1e-6;
	var tauEpsilon = tau$2 - epsilon$1;

	function Path() {
	  this._x0 = this._y0 = // start of current subpath
	  this._x1 = this._y1 = null; // end of current subpath
	  this._ = "";
	}

	function path() {
	  return new Path;
	}

	Path.prototype = path.prototype = {
	  constructor: Path,
	  moveTo: function(x, y) {
	    this._ += "M" + (this._x0 = this._x1 = +x) + "," + (this._y0 = this._y1 = +y);
	  },
	  closePath: function() {
	    if (this._x1 !== null) {
	      this._x1 = this._x0, this._y1 = this._y0;
	      this._ += "Z";
	    }
	  },
	  lineTo: function(x, y) {
	    this._ += "L" + (this._x1 = +x) + "," + (this._y1 = +y);
	  },
	  quadraticCurveTo: function(x1, y1, x, y) {
	    this._ += "Q" + (+x1) + "," + (+y1) + "," + (this._x1 = +x) + "," + (this._y1 = +y);
	  },
	  bezierCurveTo: function(x1, y1, x2, y2, x, y) {
	    this._ += "C" + (+x1) + "," + (+y1) + "," + (+x2) + "," + (+y2) + "," + (this._x1 = +x) + "," + (this._y1 = +y);
	  },
	  arcTo: function(x1, y1, x2, y2, r) {
	    x1 = +x1, y1 = +y1, x2 = +x2, y2 = +y2, r = +r;
	    var x0 = this._x1,
	        y0 = this._y1,
	        x21 = x2 - x1,
	        y21 = y2 - y1,
	        x01 = x0 - x1,
	        y01 = y0 - y1,
	        l01_2 = x01 * x01 + y01 * y01;

	    // Is the radius negative? Error.
	    if (r < 0) throw new Error("negative radius: " + r);

	    // Is this path empty? Move to (x1,y1).
	    if (this._x1 === null) {
	      this._ += "M" + (this._x1 = x1) + "," + (this._y1 = y1);
	    }

	    // Or, is (x1,y1) coincident with (x0,y0)? Do nothing.
	    else if (!(l01_2 > epsilon$1)) {}

	    // Or, are (x0,y0), (x1,y1) and (x2,y2) collinear?
	    // Equivalently, is (x1,y1) coincident with (x2,y2)?
	    // Or, is the radius zero? Line to (x1,y1).
	    else if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon$1) || !r) {
	      this._ += "L" + (this._x1 = x1) + "," + (this._y1 = y1);
	    }

	    // Otherwise, draw an arc!
	    else {
	      var x20 = x2 - x0,
	          y20 = y2 - y0,
	          l21_2 = x21 * x21 + y21 * y21,
	          l20_2 = x20 * x20 + y20 * y20,
	          l21 = Math.sqrt(l21_2),
	          l01 = Math.sqrt(l01_2),
	          l = r * Math.tan((pi$2 - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2),
	          t01 = l / l01,
	          t21 = l / l21;

	      // If the start tangent is not coincident with (x0,y0), line to.
	      if (Math.abs(t01 - 1) > epsilon$1) {
	        this._ += "L" + (x1 + t01 * x01) + "," + (y1 + t01 * y01);
	      }

	      this._ += "A" + r + "," + r + ",0,0," + (+(y01 * x20 > x01 * y20)) + "," + (this._x1 = x1 + t21 * x21) + "," + (this._y1 = y1 + t21 * y21);
	    }
	  },
	  arc: function(x, y, r, a0, a1, ccw) {
	    x = +x, y = +y, r = +r;
	    var dx = r * Math.cos(a0),
	        dy = r * Math.sin(a0),
	        x0 = x + dx,
	        y0 = y + dy,
	        cw = 1 ^ ccw,
	        da = ccw ? a0 - a1 : a1 - a0;

	    // Is the radius negative? Error.
	    if (r < 0) throw new Error("negative radius: " + r);

	    // Is this path empty? Move to (x0,y0).
	    if (this._x1 === null) {
	      this._ += "M" + x0 + "," + y0;
	    }

	    // Or, is (x0,y0) not coincident with the previous point? Line to (x0,y0).
	    else if (Math.abs(this._x1 - x0) > epsilon$1 || Math.abs(this._y1 - y0) > epsilon$1) {
	      this._ += "L" + x0 + "," + y0;
	    }

	    // Is this arc empty? We’re done.
	    if (!r) return;

	    // Does the angle go the wrong way? Flip the direction.
	    if (da < 0) da = da % tau$2 + tau$2;

	    // Is this a complete circle? Draw two arcs to complete the circle.
	    if (da > tauEpsilon) {
	      this._ += "A" + r + "," + r + ",0,1," + cw + "," + (x - dx) + "," + (y - dy) + "A" + r + "," + r + ",0,1," + cw + "," + (this._x1 = x0) + "," + (this._y1 = y0);
	    }

	    // Is this arc non-empty? Draw an arc!
	    else if (da > epsilon$1) {
	      this._ += "A" + r + "," + r + ",0," + (+(da >= pi$2)) + "," + cw + "," + (this._x1 = x + r * Math.cos(a1)) + "," + (this._y1 = y + r * Math.sin(a1));
	    }
	  },
	  rect: function(x, y, w, h) {
	    this._ += "M" + (this._x0 = this._x1 = +x) + "," + (this._y0 = this._y1 = +y) + "h" + (+w) + "v" + (+h) + "h" + (-w) + "Z";
	  },
	  toString: function() {
	    return this._;
	  }
	};

	function defaultSource(d) {
	  return d.source;
	}

	function defaultTarget(d) {
	  return d.target;
	}

	function defaultRadius(d) {
	  return d.radius;
	}

	function defaultStartAngle(d) {
	  return d.startAngle;
	}

	function defaultEndAngle(d) {
	  return d.endAngle;
	}

	var ribbon = function() {
	  var source = defaultSource,
	      target = defaultTarget,
	      radius = defaultRadius,
	      startAngle = defaultStartAngle,
	      endAngle = defaultEndAngle,
	      context = null;

	  function ribbon() {
	    var buffer,
	        argv = slice$2.call(arguments),
	        s = source.apply(this, argv),
	        t = target.apply(this, argv),
	        sr = +radius.apply(this, (argv[0] = s, argv)),
	        sa0 = startAngle.apply(this, argv) - halfPi$1,
	        sa1 = endAngle.apply(this, argv) - halfPi$1,
	        sx0 = sr * cos(sa0),
	        sy0 = sr * sin(sa0),
	        tr = +radius.apply(this, (argv[0] = t, argv)),
	        ta0 = startAngle.apply(this, argv) - halfPi$1,
	        ta1 = endAngle.apply(this, argv) - halfPi$1;

	    if (!context) context = buffer = path();

	    context.moveTo(sx0, sy0);
	    context.arc(0, 0, sr, sa0, sa1);
	    if (sa0 !== ta0 || sa1 !== ta1) { // TODO sr !== tr?
	      context.quadraticCurveTo(0, 0, tr * cos(ta0), tr * sin(ta0));
	      context.arc(0, 0, tr, ta0, ta1);
	    }
	    context.quadraticCurveTo(0, 0, sx0, sy0);
	    context.closePath();

	    if (buffer) return context = null, buffer + "" || null;
	  }

	  ribbon.radius = function(_) {
	    return arguments.length ? (radius = typeof _ === "function" ? _ : constant$5(+_), ribbon) : radius;
	  };

	  ribbon.startAngle = function(_) {
	    return arguments.length ? (startAngle = typeof _ === "function" ? _ : constant$5(+_), ribbon) : startAngle;
	  };

	  ribbon.endAngle = function(_) {
	    return arguments.length ? (endAngle = typeof _ === "function" ? _ : constant$5(+_), ribbon) : endAngle;
	  };

	  ribbon.source = function(_) {
	    return arguments.length ? (source = _, ribbon) : source;
	  };

	  ribbon.target = function(_) {
	    return arguments.length ? (target = _, ribbon) : target;
	  };

	  ribbon.context = function(_) {
	    return arguments.length ? ((context = _ == null ? null : _), ribbon) : context;
	  };

	  return ribbon;
	};

	var prefix = "$";

	function Map() {}

	Map.prototype = map$1.prototype = {
	  constructor: Map,
	  has: function(key) {
	    return (prefix + key) in this;
	  },
	  get: function(key) {
	    return this[prefix + key];
	  },
	  set: function(key, value) {
	    this[prefix + key] = value;
	    return this;
	  },
	  remove: function(key) {
	    var property = prefix + key;
	    return property in this && delete this[property];
	  },
	  clear: function() {
	    for (var property in this) if (property[0] === prefix) delete this[property];
	  },
	  keys: function() {
	    var keys = [];
	    for (var property in this) if (property[0] === prefix) keys.push(property.slice(1));
	    return keys;
	  },
	  values: function() {
	    var values = [];
	    for (var property in this) if (property[0] === prefix) values.push(this[property]);
	    return values;
	  },
	  entries: function() {
	    var entries = [];
	    for (var property in this) if (property[0] === prefix) entries.push({key: property.slice(1), value: this[property]});
	    return entries;
	  },
	  size: function() {
	    var size = 0;
	    for (var property in this) if (property[0] === prefix) ++size;
	    return size;
	  },
	  empty: function() {
	    for (var property in this) if (property[0] === prefix) return false;
	    return true;
	  },
	  each: function(f) {
	    for (var property in this) if (property[0] === prefix) f(this[property], property.slice(1), this);
	  }
	};

	function map$1(object, f) {
	  var map = new Map;

	  // Copy constructor.
	  if (object instanceof Map) object.each(function(value, key) { map.set(key, value); });

	  // Index array by numeric index or specified key function.
	  else if (Array.isArray(object)) {
	    var i = -1,
	        n = object.length,
	        o;

	    if (f == null) while (++i < n) map.set(i, object[i]);
	    else while (++i < n) map.set(f(o = object[i], i, object), o);
	  }

	  // Convert object to map.
	  else if (object) for (var key in object) map.set(key, object[key]);

	  return map;
	}

	var nest = function() {
	  var keys = [],
	      sortKeys = [],
	      sortValues,
	      rollup,
	      nest;

	  function apply(array, depth, createResult, setResult) {
	    if (depth >= keys.length) {
	      if (sortValues != null) array.sort(sortValues);
	      return rollup != null ? rollup(array) : array;
	    }

	    var i = -1,
	        n = array.length,
	        key = keys[depth++],
	        keyValue,
	        value,
	        valuesByKey = map$1(),
	        values,
	        result = createResult();

	    while (++i < n) {
	      if (values = valuesByKey.get(keyValue = key(value = array[i]) + "")) {
	        values.push(value);
	      } else {
	        valuesByKey.set(keyValue, [value]);
	      }
	    }

	    valuesByKey.each(function(values, key) {
	      setResult(result, key, apply(values, depth, createResult, setResult));
	    });

	    return result;
	  }

	  function entries(map, depth) {
	    if (++depth > keys.length) return map;
	    var array, sortKey = sortKeys[depth - 1];
	    if (rollup != null && depth >= keys.length) array = map.entries();
	    else array = [], map.each(function(v, k) { array.push({key: k, values: entries(v, depth)}); });
	    return sortKey != null ? array.sort(function(a, b) { return sortKey(a.key, b.key); }) : array;
	  }

	  return nest = {
	    object: function(array) { return apply(array, 0, createObject, setObject); },
	    map: function(array) { return apply(array, 0, createMap, setMap); },
	    entries: function(array) { return entries(apply(array, 0, createMap, setMap), 0); },
	    key: function(d) { keys.push(d); return nest; },
	    sortKeys: function(order) { sortKeys[keys.length - 1] = order; return nest; },
	    sortValues: function(order) { sortValues = order; return nest; },
	    rollup: function(f) { rollup = f; return nest; }
	  };
	};

	function createObject() {
	  return {};
	}

	function setObject(object, key, value) {
	  object[key] = value;
	}

	function createMap() {
	  return map$1();
	}

	function setMap(map, key, value) {
	  map.set(key, value);
	}

	function Set() {}

	var proto = map$1.prototype;

	Set.prototype = set$2.prototype = {
	  constructor: Set,
	  has: proto.has,
	  add: function(value) {
	    value += "";
	    this[prefix + value] = value;
	    return this;
	  },
	  remove: proto.remove,
	  clear: proto.clear,
	  values: proto.keys,
	  size: proto.size,
	  empty: proto.empty,
	  each: proto.each
	};

	function set$2(object, f) {
	  var set = new Set;

	  // Copy constructor.
	  if (object instanceof Set) object.each(function(value) { set.add(value); });

	  // Otherwise, assume it’s an array.
	  else if (object) {
	    var i = -1, n = object.length;
	    if (f == null) while (++i < n) set.add(object[i]);
	    else while (++i < n) set.add(f(object[i], i, object));
	  }

	  return set;
	}

	var keys = function(map) {
	  var keys = [];
	  for (var key in map) keys.push(key);
	  return keys;
	};

	var values = function(map) {
	  var values = [];
	  for (var key in map) values.push(map[key]);
	  return values;
	};

	var entries = function(map) {
	  var entries = [];
	  for (var key in map) entries.push({key: key, value: map[key]});
	  return entries;
	};

	function objectConverter(columns) {
	  return new Function("d", "return {" + columns.map(function(name, i) {
	    return JSON.stringify(name) + ": d[" + i + "]";
	  }).join(",") + "}");
	}

	function customConverter(columns, f) {
	  var object = objectConverter(columns);
	  return function(row, i) {
	    return f(object(row), i, columns);
	  };
	}

	// Compute unique columns in order of discovery.
	function inferColumns(rows) {
	  var columnSet = Object.create(null),
	      columns = [];

	  rows.forEach(function(row) {
	    for (var column in row) {
	      if (!(column in columnSet)) {
	        columns.push(columnSet[column] = column);
	      }
	    }
	  });

	  return columns;
	}

	var dsv = function(delimiter) {
	  var reFormat = new RegExp("[\"" + delimiter + "\n\r]"),
	      delimiterCode = delimiter.charCodeAt(0);

	  function parse(text, f) {
	    var convert, columns, rows = parseRows(text, function(row, i) {
	      if (convert) return convert(row, i - 1);
	      columns = row, convert = f ? customConverter(row, f) : objectConverter(row);
	    });
	    rows.columns = columns;
	    return rows;
	  }

	  function parseRows(text, f) {
	    var EOL = {}, // sentinel value for end-of-line
	        EOF = {}, // sentinel value for end-of-file
	        rows = [], // output rows
	        N = text.length,
	        I = 0, // current character index
	        n = 0, // the current line number
	        t, // the current token
	        eol; // is the current token followed by EOL?

	    function token() {
	      if (I >= N) return EOF; // special case: end of file
	      if (eol) return eol = false, EOL; // special case: end of line

	      // special case: quotes
	      var j = I, c;
	      if (text.charCodeAt(j) === 34) {
	        var i = j;
	        while (i++ < N) {
	          if (text.charCodeAt(i) === 34) {
	            if (text.charCodeAt(i + 1) !== 34) break;
	            ++i;
	          }
	        }
	        I = i + 2;
	        c = text.charCodeAt(i + 1);
	        if (c === 13) {
	          eol = true;
	          if (text.charCodeAt(i + 2) === 10) ++I;
	        } else if (c === 10) {
	          eol = true;
	        }
	        return text.slice(j + 1, i).replace(/""/g, "\"");
	      }

	      // common case: find next delimiter or newline
	      while (I < N) {
	        var k = 1;
	        c = text.charCodeAt(I++);
	        if (c === 10) eol = true; // \n
	        else if (c === 13) { eol = true; if (text.charCodeAt(I) === 10) ++I, ++k; } // \r|\r\n
	        else if (c !== delimiterCode) continue;
	        return text.slice(j, I - k);
	      }

	      // special case: last token before EOF
	      return text.slice(j);
	    }

	    while ((t = token()) !== EOF) {
	      var a = [];
	      while (t !== EOL && t !== EOF) {
	        a.push(t);
	        t = token();
	      }
	      if (f && (a = f(a, n++)) == null) continue;
	      rows.push(a);
	    }

	    return rows;
	  }

	  function format(rows, columns) {
	    if (columns == null) columns = inferColumns(rows);
	    return [columns.map(formatValue).join(delimiter)].concat(rows.map(function(row) {
	      return columns.map(function(column) {
	        return formatValue(row[column]);
	      }).join(delimiter);
	    })).join("\n");
	  }

	  function formatRows(rows) {
	    return rows.map(formatRow).join("\n");
	  }

	  function formatRow(row) {
	    return row.map(formatValue).join(delimiter);
	  }

	  function formatValue(text) {
	    return text == null ? ""
	        : reFormat.test(text += "") ? "\"" + text.replace(/\"/g, "\"\"") + "\""
	        : text;
	  }

	  return {
	    parse: parse,
	    parseRows: parseRows,
	    format: format,
	    formatRows: formatRows
	  };
	};

	var csv = dsv(",");

	var csvParse = csv.parse;
	var csvParseRows = csv.parseRows;
	var csvFormat = csv.format;
	var csvFormatRows = csv.formatRows;

	var tsv = dsv("\t");

	var tsvParse = tsv.parse;
	var tsvParseRows = tsv.parseRows;
	var tsvFormat = tsv.format;
	var tsvFormatRows = tsv.formatRows;

	var center$1 = function(x, y) {
	  var nodes;

	  if (x == null) x = 0;
	  if (y == null) y = 0;

	  function force() {
	    var i,
	        n = nodes.length,
	        node,
	        sx = 0,
	        sy = 0;

	    for (i = 0; i < n; ++i) {
	      node = nodes[i], sx += node.x, sy += node.y;
	    }

	    for (sx = sx / n - x, sy = sy / n - y, i = 0; i < n; ++i) {
	      node = nodes[i], node.x -= sx, node.y -= sy;
	    }
	  }

	  force.initialize = function(_) {
	    nodes = _;
	  };

	  force.x = function(_) {
	    return arguments.length ? (x = +_, force) : x;
	  };

	  force.y = function(_) {
	    return arguments.length ? (y = +_, force) : y;
	  };

	  return force;
	};

	var constant$6 = function(x) {
	  return function() {
	    return x;
	  };
	};

	var jiggle = function() {
	  return (Math.random() - 0.5) * 1e-6;
	};

	var tree_add = function(d) {
	  var x = +this._x.call(null, d),
	      y = +this._y.call(null, d);
	  return add(this.cover(x, y), x, y, d);
	};

	function add(tree, x, y, d) {
	  if (isNaN(x) || isNaN(y)) return tree; // ignore invalid points

	  var parent,
	      node = tree._root,
	      leaf = {data: d},
	      x0 = tree._x0,
	      y0 = tree._y0,
	      x1 = tree._x1,
	      y1 = tree._y1,
	      xm,
	      ym,
	      xp,
	      yp,
	      right,
	      bottom,
	      i,
	      j;

	  // If the tree is empty, initialize the root as a leaf.
	  if (!node) return tree._root = leaf, tree;

	  // Find the existing leaf for the new point, or add it.
	  while (node.length) {
	    if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;
	    if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;
	    if (parent = node, !(node = node[i = bottom << 1 | right])) return parent[i] = leaf, tree;
	  }

	  // Is the new point is exactly coincident with the existing point?
	  xp = +tree._x.call(null, node.data);
	  yp = +tree._y.call(null, node.data);
	  if (x === xp && y === yp) return leaf.next = node, parent ? parent[i] = leaf : tree._root = leaf, tree;

	  // Otherwise, split the leaf node until the old and new point are separated.
	  do {
	    parent = parent ? parent[i] = new Array(4) : tree._root = new Array(4);
	    if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;
	    if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;
	  } while ((i = bottom << 1 | right) === (j = (yp >= ym) << 1 | (xp >= xm)));
	  return parent[j] = node, parent[i] = leaf, tree;
	}

	function addAll(data) {
	  var d, i, n = data.length,
	      x,
	      y,
	      xz = new Array(n),
	      yz = new Array(n),
	      x0 = Infinity,
	      y0 = Infinity,
	      x1 = -Infinity,
	      y1 = -Infinity;

	  // Compute the points and their extent.
	  for (i = 0; i < n; ++i) {
	    if (isNaN(x = +this._x.call(null, d = data[i])) || isNaN(y = +this._y.call(null, d))) continue;
	    xz[i] = x;
	    yz[i] = y;
	    if (x < x0) x0 = x;
	    if (x > x1) x1 = x;
	    if (y < y0) y0 = y;
	    if (y > y1) y1 = y;
	  }

	  // If there were no (valid) points, inherit the existing extent.
	  if (x1 < x0) x0 = this._x0, x1 = this._x1;
	  if (y1 < y0) y0 = this._y0, y1 = this._y1;

	  // Expand the tree to cover the new points.
	  this.cover(x0, y0).cover(x1, y1);

	  // Add the new points.
	  for (i = 0; i < n; ++i) {
	    add(this, xz[i], yz[i], data[i]);
	  }

	  return this;
	}

	var tree_cover = function(x, y) {
	  if (isNaN(x = +x) || isNaN(y = +y)) return this; // ignore invalid points

	  var x0 = this._x0,
	      y0 = this._y0,
	      x1 = this._x1,
	      y1 = this._y1;

	  // If the quadtree has no extent, initialize them.
	  // Integer extent are necessary so that if we later double the extent,
	  // the existing quadrant boundaries don’t change due to floating point error!
	  if (isNaN(x0)) {
	    x1 = (x0 = Math.floor(x)) + 1;
	    y1 = (y0 = Math.floor(y)) + 1;
	  }

	  // Otherwise, double repeatedly to cover.
	  else if (x0 > x || x > x1 || y0 > y || y > y1) {
	    var z = x1 - x0,
	        node = this._root,
	        parent,
	        i;

	    switch (i = (y < (y0 + y1) / 2) << 1 | (x < (x0 + x1) / 2)) {
	      case 0: {
	        do parent = new Array(4), parent[i] = node, node = parent;
	        while (z *= 2, x1 = x0 + z, y1 = y0 + z, x > x1 || y > y1);
	        break;
	      }
	      case 1: {
	        do parent = new Array(4), parent[i] = node, node = parent;
	        while (z *= 2, x0 = x1 - z, y1 = y0 + z, x0 > x || y > y1);
	        break;
	      }
	      case 2: {
	        do parent = new Array(4), parent[i] = node, node = parent;
	        while (z *= 2, x1 = x0 + z, y0 = y1 - z, x > x1 || y0 > y);
	        break;
	      }
	      case 3: {
	        do parent = new Array(4), parent[i] = node, node = parent;
	        while (z *= 2, x0 = x1 - z, y0 = y1 - z, x0 > x || y0 > y);
	        break;
	      }
	    }

	    if (this._root && this._root.length) this._root = node;
	  }

	  // If the quadtree covers the point already, just return.
	  else return this;

	  this._x0 = x0;
	  this._y0 = y0;
	  this._x1 = x1;
	  this._y1 = y1;
	  return this;
	};

	var tree_data = function() {
	  var data = [];
	  this.visit(function(node) {
	    if (!node.length) do data.push(node.data); while (node = node.next)
	  });
	  return data;
	};

	var tree_extent = function(_) {
	  return arguments.length
	      ? this.cover(+_[0][0], +_[0][1]).cover(+_[1][0], +_[1][1])
	      : isNaN(this._x0) ? undefined : [[this._x0, this._y0], [this._x1, this._y1]];
	};

	var Quad = function(node, x0, y0, x1, y1) {
	  this.node = node;
	  this.x0 = x0;
	  this.y0 = y0;
	  this.x1 = x1;
	  this.y1 = y1;
	};

	var tree_find = function(x, y, radius) {
	  var data,
	      x0 = this._x0,
	      y0 = this._y0,
	      x1,
	      y1,
	      x2,
	      y2,
	      x3 = this._x1,
	      y3 = this._y1,
	      quads = [],
	      node = this._root,
	      q,
	      i;

	  if (node) quads.push(new Quad(node, x0, y0, x3, y3));
	  if (radius == null) radius = Infinity;
	  else {
	    x0 = x - radius, y0 = y - radius;
	    x3 = x + radius, y3 = y + radius;
	    radius *= radius;
	  }

	  while (q = quads.pop()) {

	    // Stop searching if this quadrant can’t contain a closer node.
	    if (!(node = q.node)
	        || (x1 = q.x0) > x3
	        || (y1 = q.y0) > y3
	        || (x2 = q.x1) < x0
	        || (y2 = q.y1) < y0) continue;

	    // Bisect the current quadrant.
	    if (node.length) {
	      var xm = (x1 + x2) / 2,
	          ym = (y1 + y2) / 2;

	      quads.push(
	        new Quad(node[3], xm, ym, x2, y2),
	        new Quad(node[2], x1, ym, xm, y2),
	        new Quad(node[1], xm, y1, x2, ym),
	        new Quad(node[0], x1, y1, xm, ym)
	      );

	      // Visit the closest quadrant first.
	      if (i = (y >= ym) << 1 | (x >= xm)) {
	        q = quads[quads.length - 1];
	        quads[quads.length - 1] = quads[quads.length - 1 - i];
	        quads[quads.length - 1 - i] = q;
	      }
	    }

	    // Visit this point. (Visiting coincident points isn’t necessary!)
	    else {
	      var dx = x - +this._x.call(null, node.data),
	          dy = y - +this._y.call(null, node.data),
	          d2 = dx * dx + dy * dy;
	      if (d2 < radius) {
	        var d = Math.sqrt(radius = d2);
	        x0 = x - d, y0 = y - d;
	        x3 = x + d, y3 = y + d;
	        data = node.data;
	      }
	    }
	  }

	  return data;
	};

	var tree_remove = function(d) {
	  if (isNaN(x = +this._x.call(null, d)) || isNaN(y = +this._y.call(null, d))) return this; // ignore invalid points

	  var parent,
	      node = this._root,
	      retainer,
	      previous,
	      next,
	      x0 = this._x0,
	      y0 = this._y0,
	      x1 = this._x1,
	      y1 = this._y1,
	      x,
	      y,
	      xm,
	      ym,
	      right,
	      bottom,
	      i,
	      j;

	  // If the tree is empty, initialize the root as a leaf.
	  if (!node) return this;

	  // Find the leaf node for the point.
	  // While descending, also retain the deepest parent with a non-removed sibling.
	  if (node.length) while (true) {
	    if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;
	    if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;
	    if (!(parent = node, node = node[i = bottom << 1 | right])) return this;
	    if (!node.length) break;
	    if (parent[(i + 1) & 3] || parent[(i + 2) & 3] || parent[(i + 3) & 3]) retainer = parent, j = i;
	  }

	  // Find the point to remove.
	  while (node.data !== d) if (!(previous = node, node = node.next)) return this;
	  if (next = node.next) delete node.next;

	  // If there are multiple coincident points, remove just the point.
	  if (previous) return (next ? previous.next = next : delete previous.next), this;

	  // If this is the root point, remove it.
	  if (!parent) return this._root = next, this;

	  // Remove this leaf.
	  next ? parent[i] = next : delete parent[i];

	  // If the parent now contains exactly one leaf, collapse superfluous parents.
	  if ((node = parent[0] || parent[1] || parent[2] || parent[3])
	      && node === (parent[3] || parent[2] || parent[1] || parent[0])
	      && !node.length) {
	    if (retainer) retainer[j] = node;
	    else this._root = node;
	  }

	  return this;
	};

	function removeAll(data) {
	  for (var i = 0, n = data.length; i < n; ++i) this.remove(data[i]);
	  return this;
	}

	var tree_root = function() {
	  return this._root;
	};

	var tree_size = function() {
	  var size = 0;
	  this.visit(function(node) {
	    if (!node.length) do ++size; while (node = node.next)
	  });
	  return size;
	};

	var tree_visit = function(callback) {
	  var quads = [], q, node = this._root, child, x0, y0, x1, y1;
	  if (node) quads.push(new Quad(node, this._x0, this._y0, this._x1, this._y1));
	  while (q = quads.pop()) {
	    if (!callback(node = q.node, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1) && node.length) {
	      var xm = (x0 + x1) / 2, ym = (y0 + y1) / 2;
	      if (child = node[3]) quads.push(new Quad(child, xm, ym, x1, y1));
	      if (child = node[2]) quads.push(new Quad(child, x0, ym, xm, y1));
	      if (child = node[1]) quads.push(new Quad(child, xm, y0, x1, ym));
	      if (child = node[0]) quads.push(new Quad(child, x0, y0, xm, ym));
	    }
	  }
	  return this;
	};

	var tree_visitAfter = function(callback) {
	  var quads = [], next = [], q;
	  if (this._root) quads.push(new Quad(this._root, this._x0, this._y0, this._x1, this._y1));
	  while (q = quads.pop()) {
	    var node = q.node;
	    if (node.length) {
	      var child, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1, xm = (x0 + x1) / 2, ym = (y0 + y1) / 2;
	      if (child = node[0]) quads.push(new Quad(child, x0, y0, xm, ym));
	      if (child = node[1]) quads.push(new Quad(child, xm, y0, x1, ym));
	      if (child = node[2]) quads.push(new Quad(child, x0, ym, xm, y1));
	      if (child = node[3]) quads.push(new Quad(child, xm, ym, x1, y1));
	    }
	    next.push(q);
	  }
	  while (q = next.pop()) {
	    callback(q.node, q.x0, q.y0, q.x1, q.y1);
	  }
	  return this;
	};

	function defaultX(d) {
	  return d[0];
	}

	var tree_x = function(_) {
	  return arguments.length ? (this._x = _, this) : this._x;
	};

	function defaultY(d) {
	  return d[1];
	}

	var tree_y = function(_) {
	  return arguments.length ? (this._y = _, this) : this._y;
	};

	function quadtree(nodes, x, y) {
	  var tree = new Quadtree(x == null ? defaultX : x, y == null ? defaultY : y, NaN, NaN, NaN, NaN);
	  return nodes == null ? tree : tree.addAll(nodes);
	}

	function Quadtree(x, y, x0, y0, x1, y1) {
	  this._x = x;
	  this._y = y;
	  this._x0 = x0;
	  this._y0 = y0;
	  this._x1 = x1;
	  this._y1 = y1;
	  this._root = undefined;
	}

	function leaf_copy(leaf) {
	  var copy = {data: leaf.data}, next = copy;
	  while (leaf = leaf.next) next = next.next = {data: leaf.data};
	  return copy;
	}

	var treeProto = quadtree.prototype = Quadtree.prototype;

	treeProto.copy = function() {
	  var copy = new Quadtree(this._x, this._y, this._x0, this._y0, this._x1, this._y1),
	      node = this._root,
	      nodes,
	      child;

	  if (!node) return copy;

	  if (!node.length) return copy._root = leaf_copy(node), copy;

	  nodes = [{source: node, target: copy._root = new Array(4)}];
	  while (node = nodes.pop()) {
	    for (var i = 0; i < 4; ++i) {
	      if (child = node.source[i]) {
	        if (child.length) nodes.push({source: child, target: node.target[i] = new Array(4)});
	        else node.target[i] = leaf_copy(child);
	      }
	    }
	  }

	  return copy;
	};

	treeProto.add = tree_add;
	treeProto.addAll = addAll;
	treeProto.cover = tree_cover;
	treeProto.data = tree_data;
	treeProto.extent = tree_extent;
	treeProto.find = tree_find;
	treeProto.remove = tree_remove;
	treeProto.removeAll = removeAll;
	treeProto.root = tree_root;
	treeProto.size = tree_size;
	treeProto.visit = tree_visit;
	treeProto.visitAfter = tree_visitAfter;
	treeProto.x = tree_x;
	treeProto.y = tree_y;

	function x(d) {
	  return d.x + d.vx;
	}

	function y(d) {
	  return d.y + d.vy;
	}

	var collide = function(radius) {
	  var nodes,
	      radii,
	      strength = 1,
	      iterations = 1;

	  if (typeof radius !== "function") radius = constant$6(radius == null ? 1 : +radius);

	  function force() {
	    var i, n = nodes.length,
	        tree,
	        node,
	        xi,
	        yi,
	        ri,
	        ri2;

	    for (var k = 0; k < iterations; ++k) {
	      tree = quadtree(nodes, x, y).visitAfter(prepare);
	      for (i = 0; i < n; ++i) {
	        node = nodes[i];
	        ri = radii[node.index], ri2 = ri * ri;
	        xi = node.x + node.vx;
	        yi = node.y + node.vy;
	        tree.visit(apply);
	      }
	    }

	    function apply(quad, x0, y0, x1, y1) {
	      var data = quad.data, rj = quad.r, r = ri + rj;
	      if (data) {
	        if (data.index > node.index) {
	          var x = xi - data.x - data.vx,
	              y = yi - data.y - data.vy,
	              l = x * x + y * y;
	          if (l < r * r) {
	            if (x === 0) x = jiggle(), l += x * x;
	            if (y === 0) y = jiggle(), l += y * y;
	            l = (r - (l = Math.sqrt(l))) / l * strength;
	            node.vx += (x *= l) * (r = (rj *= rj) / (ri2 + rj));
	            node.vy += (y *= l) * r;
	            data.vx -= x * (r = 1 - r);
	            data.vy -= y * r;
	          }
	        }
	        return;
	      }
	      return x0 > xi + r || x1 < xi - r || y0 > yi + r || y1 < yi - r;
	    }
	  }

	  function prepare(quad) {
	    if (quad.data) return quad.r = radii[quad.data.index];
	    for (var i = quad.r = 0; i < 4; ++i) {
	      if (quad[i] && quad[i].r > quad.r) {
	        quad.r = quad[i].r;
	      }
	    }
	  }

	  function initialize() {
	    if (!nodes) return;
	    var i, n = nodes.length, node;
	    radii = new Array(n);
	    for (i = 0; i < n; ++i) node = nodes[i], radii[node.index] = +radius(node, i, nodes);
	  }

	  force.initialize = function(_) {
	    nodes = _;
	    initialize();
	  };

	  force.iterations = function(_) {
	    return arguments.length ? (iterations = +_, force) : iterations;
	  };

	  force.strength = function(_) {
	    return arguments.length ? (strength = +_, force) : strength;
	  };

	  force.radius = function(_) {
	    return arguments.length ? (radius = typeof _ === "function" ? _ : constant$6(+_), initialize(), force) : radius;
	  };

	  return force;
	};

	function index(d) {
	  return d.index;
	}

	function find(nodeById, nodeId) {
	  var node = nodeById.get(nodeId);
	  if (!node) throw new Error("missing: " + nodeId);
	  return node;
	}

	var link = function(links) {
	  var id = index,
	      strength = defaultStrength,
	      strengths,
	      distance = constant$6(30),
	      distances,
	      nodes,
	      count,
	      bias,
	      iterations = 1;

	  if (links == null) links = [];

	  function defaultStrength(link) {
	    return 1 / Math.min(count[link.source.index], count[link.target.index]);
	  }

	  function force(alpha) {
	    for (var k = 0, n = links.length; k < iterations; ++k) {
	      for (var i = 0, link, source, target, x, y, l, b; i < n; ++i) {
	        link = links[i], source = link.source, target = link.target;
	        x = target.x + target.vx - source.x - source.vx || jiggle();
	        y = target.y + target.vy - source.y - source.vy || jiggle();
	        l = Math.sqrt(x * x + y * y);
	        l = (l - distances[i]) / l * alpha * strengths[i];
	        x *= l, y *= l;
	        target.vx -= x * (b = bias[i]);
	        target.vy -= y * b;
	        source.vx += x * (b = 1 - b);
	        source.vy += y * b;
	      }
	    }
	  }

	  function initialize() {
	    if (!nodes) return;

	    var i,
	        n = nodes.length,
	        m = links.length,
	        nodeById = map$1(nodes, id),
	        link;

	    for (i = 0, count = new Array(n); i < m; ++i) {
	      link = links[i], link.index = i;
	      if (typeof link.source !== "object") link.source = find(nodeById, link.source);
	      if (typeof link.target !== "object") link.target = find(nodeById, link.target);
	      count[link.source.index] = (count[link.source.index] || 0) + 1;
	      count[link.target.index] = (count[link.target.index] || 0) + 1;
	    }

	    for (i = 0, bias = new Array(m); i < m; ++i) {
	      link = links[i], bias[i] = count[link.source.index] / (count[link.source.index] + count[link.target.index]);
	    }

	    strengths = new Array(m), initializeStrength();
	    distances = new Array(m), initializeDistance();
	  }

	  function initializeStrength() {
	    if (!nodes) return;

	    for (var i = 0, n = links.length; i < n; ++i) {
	      strengths[i] = +strength(links[i], i, links);
	    }
	  }

	  function initializeDistance() {
	    if (!nodes) return;

	    for (var i = 0, n = links.length; i < n; ++i) {
	      distances[i] = +distance(links[i], i, links);
	    }
	  }

	  force.initialize = function(_) {
	    nodes = _;
	    initialize();
	  };

	  force.links = function(_) {
	    return arguments.length ? (links = _, initialize(), force) : links;
	  };

	  force.id = function(_) {
	    return arguments.length ? (id = _, force) : id;
	  };

	  force.iterations = function(_) {
	    return arguments.length ? (iterations = +_, force) : iterations;
	  };

	  force.strength = function(_) {
	    return arguments.length ? (strength = typeof _ === "function" ? _ : constant$6(+_), initializeStrength(), force) : strength;
	  };

	  force.distance = function(_) {
	    return arguments.length ? (distance = typeof _ === "function" ? _ : constant$6(+_), initializeDistance(), force) : distance;
	  };

	  return force;
	};

	function x$1(d) {
	  return d.x;
	}

	function y$1(d) {
	  return d.y;
	}

	var initialRadius = 10;
	var initialAngle = Math.PI * (3 - Math.sqrt(5));

	var simulation = function(nodes) {
	  var simulation,
	      alpha = 1,
	      alphaMin = 0.001,
	      alphaDecay = 1 - Math.pow(alphaMin, 1 / 300),
	      alphaTarget = 0,
	      velocityDecay = 0.6,
	      forces = map$1(),
	      stepper = timer(step),
	      event = dispatch("tick", "end");

	  if (nodes == null) nodes = [];

	  function step() {
	    tick();
	    event.call("tick", simulation);
	    if (alpha < alphaMin) {
	      stepper.stop();
	      event.call("end", simulation);
	    }
	  }

	  function tick() {
	    var i, n = nodes.length, node;

	    alpha += (alphaTarget - alpha) * alphaDecay;

	    forces.each(function(force) {
	      force(alpha);
	    });

	    for (i = 0; i < n; ++i) {
	      node = nodes[i];
	      if (node.fx == null) node.x += node.vx *= velocityDecay;
	      else node.x = node.fx, node.vx = 0;
	      if (node.fy == null) node.y += node.vy *= velocityDecay;
	      else node.y = node.fy, node.vy = 0;
	    }
	  }

	  function initializeNodes() {
	    for (var i = 0, n = nodes.length, node; i < n; ++i) {
	      node = nodes[i], node.index = i;
	      if (isNaN(node.x) || isNaN(node.y)) {
	        var radius = initialRadius * Math.sqrt(i), angle = i * initialAngle;
	        node.x = radius * Math.cos(angle);
	        node.y = radius * Math.sin(angle);
	      }
	      if (isNaN(node.vx) || isNaN(node.vy)) {
	        node.vx = node.vy = 0;
	      }
	    }
	  }

	  function initializeForce(force) {
	    if (force.initialize) force.initialize(nodes);
	    return force;
	  }

	  initializeNodes();

	  return simulation = {
	    tick: tick,

	    restart: function() {
	      return stepper.restart(step), simulation;
	    },

	    stop: function() {
	      return stepper.stop(), simulation;
	    },

	    nodes: function(_) {
	      return arguments.length ? (nodes = _, initializeNodes(), forces.each(initializeForce), simulation) : nodes;
	    },

	    alpha: function(_) {
	      return arguments.length ? (alpha = +_, simulation) : alpha;
	    },

	    alphaMin: function(_) {
	      return arguments.length ? (alphaMin = +_, simulation) : alphaMin;
	    },

	    alphaDecay: function(_) {
	      return arguments.length ? (alphaDecay = +_, simulation) : +alphaDecay;
	    },

	    alphaTarget: function(_) {
	      return arguments.length ? (alphaTarget = +_, simulation) : alphaTarget;
	    },

	    velocityDecay: function(_) {
	      return arguments.length ? (velocityDecay = 1 - _, simulation) : 1 - velocityDecay;
	    },

	    force: function(name, _) {
	      return arguments.length > 1 ? ((_ == null ? forces.remove(name) : forces.set(name, initializeForce(_))), simulation) : forces.get(name);
	    },

	    find: function(x, y, radius) {
	      var i = 0,
	          n = nodes.length,
	          dx,
	          dy,
	          d2,
	          node,
	          closest;

	      if (radius == null) radius = Infinity;
	      else radius *= radius;

	      for (i = 0; i < n; ++i) {
	        node = nodes[i];
	        dx = x - node.x;
	        dy = y - node.y;
	        d2 = dx * dx + dy * dy;
	        if (d2 < radius) closest = node, radius = d2;
	      }

	      return closest;
	    },

	    on: function(name, _) {
	      return arguments.length > 1 ? (event.on(name, _), simulation) : event.on(name);
	    }
	  };
	};

	var manyBody = function() {
	  var nodes,
	      node,
	      alpha,
	      strength = constant$6(-30),
	      strengths,
	      distanceMin2 = 1,
	      distanceMax2 = Infinity,
	      theta2 = 0.81;

	  function force(_) {
	    var i, n = nodes.length, tree = quadtree(nodes, x$1, y$1).visitAfter(accumulate);
	    for (alpha = _, i = 0; i < n; ++i) node = nodes[i], tree.visit(apply);
	  }

	  function initialize() {
	    if (!nodes) return;
	    var i, n = nodes.length, node;
	    strengths = new Array(n);
	    for (i = 0; i < n; ++i) node = nodes[i], strengths[node.index] = +strength(node, i, nodes);
	  }

	  function accumulate(quad) {
	    var strength = 0, q, c, x, y, i;

	    // For internal nodes, accumulate forces from child quadrants.
	    if (quad.length) {
	      for (x = y = i = 0; i < 4; ++i) {
	        if ((q = quad[i]) && (c = q.value)) {
	          strength += c, x += c * q.x, y += c * q.y;
	        }
	      }
	      quad.x = x / strength;
	      quad.y = y / strength;
	    }

	    // For leaf nodes, accumulate forces from coincident quadrants.
	    else {
	      q = quad;
	      q.x = q.data.x;
	      q.y = q.data.y;
	      do strength += strengths[q.data.index];
	      while (q = q.next);
	    }

	    quad.value = strength;
	  }

	  function apply(quad, x1, _, x2) {
	    if (!quad.value) return true;

	    var x = quad.x - node.x,
	        y = quad.y - node.y,
	        w = x2 - x1,
	        l = x * x + y * y;

	    // Apply the Barnes-Hut approximation if possible.
	    // Limit forces for very close nodes; randomize direction if coincident.
	    if (w * w / theta2 < l) {
	      if (l < distanceMax2) {
	        if (x === 0) x = jiggle(), l += x * x;
	        if (y === 0) y = jiggle(), l += y * y;
	        if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);
	        node.vx += x * quad.value * alpha / l;
	        node.vy += y * quad.value * alpha / l;
	      }
	      return true;
	    }

	    // Otherwise, process points directly.
	    else if (quad.length || l >= distanceMax2) return;

	    // Limit forces for very close nodes; randomize direction if coincident.
	    if (quad.data !== node || quad.next) {
	      if (x === 0) x = jiggle(), l += x * x;
	      if (y === 0) y = jiggle(), l += y * y;
	      if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);
	    }

	    do if (quad.data !== node) {
	      w = strengths[quad.data.index] * alpha / l;
	      node.vx += x * w;
	      node.vy += y * w;
	    } while (quad = quad.next);
	  }

	  force.initialize = function(_) {
	    nodes = _;
	    initialize();
	  };

	  force.strength = function(_) {
	    return arguments.length ? (strength = typeof _ === "function" ? _ : constant$6(+_), initialize(), force) : strength;
	  };

	  force.distanceMin = function(_) {
	    return arguments.length ? (distanceMin2 = _ * _, force) : Math.sqrt(distanceMin2);
	  };

	  force.distanceMax = function(_) {
	    return arguments.length ? (distanceMax2 = _ * _, force) : Math.sqrt(distanceMax2);
	  };

	  force.theta = function(_) {
	    return arguments.length ? (theta2 = _ * _, force) : Math.sqrt(theta2);
	  };

	  return force;
	};

	var x$2 = function(x) {
	  var strength = constant$6(0.1),
	      nodes,
	      strengths,
	      xz;

	  if (typeof x !== "function") x = constant$6(x == null ? 0 : +x);

	  function force(alpha) {
	    for (var i = 0, n = nodes.length, node; i < n; ++i) {
	      node = nodes[i], node.vx += (xz[i] - node.x) * strengths[i] * alpha;
	    }
	  }

	  function initialize() {
	    if (!nodes) return;
	    var i, n = nodes.length;
	    strengths = new Array(n);
	    xz = new Array(n);
	    for (i = 0; i < n; ++i) {
	      strengths[i] = isNaN(xz[i] = +x(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);
	    }
	  }

	  force.initialize = function(_) {
	    nodes = _;
	    initialize();
	  };

	  force.strength = function(_) {
	    return arguments.length ? (strength = typeof _ === "function" ? _ : constant$6(+_), initialize(), force) : strength;
	  };

	  force.x = function(_) {
	    return arguments.length ? (x = typeof _ === "function" ? _ : constant$6(+_), initialize(), force) : x;
	  };

	  return force;
	};

	var y$2 = function(y) {
	  var strength = constant$6(0.1),
	      nodes,
	      strengths,
	      yz;

	  if (typeof y !== "function") y = constant$6(y == null ? 0 : +y);

	  function force(alpha) {
	    for (var i = 0, n = nodes.length, node; i < n; ++i) {
	      node = nodes[i], node.vy += (yz[i] - node.y) * strengths[i] * alpha;
	    }
	  }

	  function initialize() {
	    if (!nodes) return;
	    var i, n = nodes.length;
	    strengths = new Array(n);
	    yz = new Array(n);
	    for (i = 0; i < n; ++i) {
	      strengths[i] = isNaN(yz[i] = +y(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);
	    }
	  }

	  force.initialize = function(_) {
	    nodes = _;
	    initialize();
	  };

	  force.strength = function(_) {
	    return arguments.length ? (strength = typeof _ === "function" ? _ : constant$6(+_), initialize(), force) : strength;
	  };

	  force.y = function(_) {
	    return arguments.length ? (y = typeof _ === "function" ? _ : constant$6(+_), initialize(), force) : y;
	  };

	  return force;
	};

	// Computes the decimal coefficient and exponent of the specified number x with
	// significant digits p, where x is positive and p is in [1, 21] or undefined.
	// For example, formatDecimal(1.23) returns ["123", 0].
	var formatDecimal = function(x, p) {
	  if ((i = (x = p ? x.toExponential(p - 1) : x.toExponential()).indexOf("e")) < 0) return null; // NaN, ±Infinity
	  var i, coefficient = x.slice(0, i);

	  // The string returned by toExponential either has the form \d\.\d+e[-+]\d+
	  // (e.g., 1.2e+3) or the form \de[-+]\d+ (e.g., 1e+3).
	  return [
	    coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,
	    +x.slice(i + 1)
	  ];
	};

	var exponent$1 = function(x) {
	  return x = formatDecimal(Math.abs(x)), x ? x[1] : NaN;
	};

	var formatGroup = function(grouping, thousands) {
	  return function(value, width) {
	    var i = value.length,
	        t = [],
	        j = 0,
	        g = grouping[0],
	        length = 0;

	    while (i > 0 && g > 0) {
	      if (length + g + 1 > width) g = Math.max(1, width - length);
	      t.push(value.substring(i -= g, i + g));
	      if ((length += g + 1) > width) break;
	      g = grouping[j = (j + 1) % grouping.length];
	    }

	    return t.reverse().join(thousands);
	  };
	};

	var formatNumerals = function(numerals) {
	  return function(value) {
	    return value.replace(/[0-9]/g, function(i) {
	      return numerals[+i];
	    });
	  };
	};

	var formatDefault = function(x, p) {
	  x = x.toPrecision(p);

	  out: for (var n = x.length, i = 1, i0 = -1, i1; i < n; ++i) {
	    switch (x[i]) {
	      case ".": i0 = i1 = i; break;
	      case "0": if (i0 === 0) i0 = i; i1 = i; break;
	      case "e": break out;
	      default: if (i0 > 0) i0 = 0; break;
	    }
	  }

	  return i0 > 0 ? x.slice(0, i0) + x.slice(i1 + 1) : x;
	};

	var prefixExponent;

	var formatPrefixAuto = function(x, p) {
	  var d = formatDecimal(x, p);
	  if (!d) return x + "";
	  var coefficient = d[0],
	      exponent = d[1],
	      i = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1,
	      n = coefficient.length;
	  return i === n ? coefficient
	      : i > n ? coefficient + new Array(i - n + 1).join("0")
	      : i > 0 ? coefficient.slice(0, i) + "." + coefficient.slice(i)
	      : "0." + new Array(1 - i).join("0") + formatDecimal(x, Math.max(0, p + i - 1))[0]; // less than 1y!
	};

	var formatRounded = function(x, p) {
	  var d = formatDecimal(x, p);
	  if (!d) return x + "";
	  var coefficient = d[0],
	      exponent = d[1];
	  return exponent < 0 ? "0." + new Array(-exponent).join("0") + coefficient
	      : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + "." + coefficient.slice(exponent + 1)
	      : coefficient + new Array(exponent - coefficient.length + 2).join("0");
	};

	var formatTypes = {
	  "": formatDefault,
	  "%": function(x, p) { return (x * 100).toFixed(p); },
	  "b": function(x) { return Math.round(x).toString(2); },
	  "c": function(x) { return x + ""; },
	  "d": function(x) { return Math.round(x).toString(10); },
	  "e": function(x, p) { return x.toExponential(p); },
	  "f": function(x, p) { return x.toFixed(p); },
	  "g": function(x, p) { return x.toPrecision(p); },
	  "o": function(x) { return Math.round(x).toString(8); },
	  "p": function(x, p) { return formatRounded(x * 100, p); },
	  "r": formatRounded,
	  "s": formatPrefixAuto,
	  "X": function(x) { return Math.round(x).toString(16).toUpperCase(); },
	  "x": function(x) { return Math.round(x).toString(16); }
	};

	// [[fill]align][sign][symbol][0][width][,][.precision][type]
	var re = /^(?:(.)?([<>=^]))?([+\-\( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?([a-z%])?$/i;

	function formatSpecifier(specifier) {
	  return new FormatSpecifier(specifier);
	}

	formatSpecifier.prototype = FormatSpecifier.prototype; // instanceof

	function FormatSpecifier(specifier) {
	  if (!(match = re.exec(specifier))) throw new Error("invalid format: " + specifier);

	  var match,
	      fill = match[1] || " ",
	      align = match[2] || ">",
	      sign = match[3] || "-",
	      symbol = match[4] || "",
	      zero = !!match[5],
	      width = match[6] && +match[6],
	      comma = !!match[7],
	      precision = match[8] && +match[8].slice(1),
	      type = match[9] || "";

	  // The "n" type is an alias for ",g".
	  if (type === "n") comma = true, type = "g";

	  // Map invalid types to the default format.
	  else if (!formatTypes[type]) type = "";

	  // If zero fill is specified, padding goes after sign and before digits.
	  if (zero || (fill === "0" && align === "=")) zero = true, fill = "0", align = "=";

	  this.fill = fill;
	  this.align = align;
	  this.sign = sign;
	  this.symbol = symbol;
	  this.zero = zero;
	  this.width = width;
	  this.comma = comma;
	  this.precision = precision;
	  this.type = type;
	}

	FormatSpecifier.prototype.toString = function() {
	  return this.fill
	      + this.align
	      + this.sign
	      + this.symbol
	      + (this.zero ? "0" : "")
	      + (this.width == null ? "" : Math.max(1, this.width | 0))
	      + (this.comma ? "," : "")
	      + (this.precision == null ? "" : "." + Math.max(0, this.precision | 0))
	      + this.type;
	};

	var identity$3 = function(x) {
	  return x;
	};

	var prefixes = ["y","z","a","f","p","n","\xB5","m","","k","M","G","T","P","E","Z","Y"];

	var formatLocale = function(locale) {
	  var group = locale.grouping && locale.thousands ? formatGroup(locale.grouping, locale.thousands) : identity$3,
	      currency = locale.currency,
	      decimal = locale.decimal,
	      numerals = locale.numerals ? formatNumerals(locale.numerals) : identity$3,
	      percent = locale.percent || "%";

	  function newFormat(specifier) {
	    specifier = formatSpecifier(specifier);

	    var fill = specifier.fill,
	        align = specifier.align,
	        sign = specifier.sign,
	        symbol = specifier.symbol,
	        zero = specifier.zero,
	        width = specifier.width,
	        comma = specifier.comma,
	        precision = specifier.precision,
	        type = specifier.type;

	    // Compute the prefix and suffix.
	    // For SI-prefix, the suffix is lazily computed.
	    var prefix = symbol === "$" ? currency[0] : symbol === "#" && /[boxX]/.test(type) ? "0" + type.toLowerCase() : "",
	        suffix = symbol === "$" ? currency[1] : /[%p]/.test(type) ? percent : "";

	    // What format function should we use?
	    // Is this an integer type?
	    // Can this type generate exponential notation?
	    var formatType = formatTypes[type],
	        maybeSuffix = !type || /[defgprs%]/.test(type);

	    // Set the default precision if not specified,
	    // or clamp the specified precision to the supported range.
	    // For significant precision, it must be in [1, 21].
	    // For fixed precision, it must be in [0, 20].
	    precision = precision == null ? (type ? 6 : 12)
	        : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision))
	        : Math.max(0, Math.min(20, precision));

	    function format(value) {
	      var valuePrefix = prefix,
	          valueSuffix = suffix,
	          i, n, c;

	      if (type === "c") {
	        valueSuffix = formatType(value) + valueSuffix;
	        value = "";
	      } else {
	        value = +value;

	        // Perform the initial formatting.
	        var valueNegative = value < 0;
	        value = formatType(Math.abs(value), precision);

	        // If a negative value rounds to zero during formatting, treat as positive.
	        if (valueNegative && +value === 0) valueNegative = false;

	        // Compute the prefix and suffix.
	        valuePrefix = (valueNegative ? (sign === "(" ? sign : "-") : sign === "-" || sign === "(" ? "" : sign) + valuePrefix;
	        valueSuffix = valueSuffix + (type === "s" ? prefixes[8 + prefixExponent / 3] : "") + (valueNegative && sign === "(" ? ")" : "");

	        // Break the formatted value into the integer “value” part that can be
	        // grouped, and fractional or exponential “suffix” part that is not.
	        if (maybeSuffix) {
	          i = -1, n = value.length;
	          while (++i < n) {
	            if (c = value.charCodeAt(i), 48 > c || c > 57) {
	              valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;
	              value = value.slice(0, i);
	              break;
	            }
	          }
	        }
	      }

	      // If the fill character is not "0", grouping is applied before padding.
	      if (comma && !zero) value = group(value, Infinity);

	      // Compute the padding.
	      var length = valuePrefix.length + value.length + valueSuffix.length,
	          padding = length < width ? new Array(width - length + 1).join(fill) : "";

	      // If the fill character is "0", grouping is applied after padding.
	      if (comma && zero) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = "";

	      // Reconstruct the final output based on the desired alignment.
	      switch (align) {
	        case "<": value = valuePrefix + value + valueSuffix + padding; break;
	        case "=": value = valuePrefix + padding + value + valueSuffix; break;
	        case "^": value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length); break;
	        default: value = padding + valuePrefix + value + valueSuffix; break;
	      }

	      return numerals(value);
	    }

	    format.toString = function() {
	      return specifier + "";
	    };

	    return format;
	  }

	  function formatPrefix(specifier, value) {
	    var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = "f", specifier)),
	        e = Math.max(-8, Math.min(8, Math.floor(exponent$1(value) / 3))) * 3,
	        k = Math.pow(10, -e),
	        prefix = prefixes[8 + e / 3];
	    return function(value) {
	      return f(k * value) + prefix;
	    };
	  }

	  return {
	    format: newFormat,
	    formatPrefix: formatPrefix
	  };
	};

	var locale$1;



	defaultLocale({
	  decimal: ".",
	  thousands: ",",
	  grouping: [3],
	  currency: ["$", ""]
	});

	function defaultLocale(definition) {
	  locale$1 = formatLocale(definition);
	  exports.format = locale$1.format;
	  exports.formatPrefix = locale$1.formatPrefix;
	  return locale$1;
	}

	var precisionFixed = function(step) {
	  return Math.max(0, -exponent$1(Math.abs(step)));
	};

	var precisionPrefix = function(step, value) {
	  return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent$1(value) / 3))) * 3 - exponent$1(Math.abs(step)));
	};

	var precisionRound = function(step, max) {
	  step = Math.abs(step), max = Math.abs(max) - step;
	  return Math.max(0, exponent$1(max) - exponent$1(step)) + 1;
	};

	// Adds floating point numbers with twice the normal precision.
	// Reference: J. R. Shewchuk, Adaptive Precision Floating-Point Arithmetic and
	// Fast Robust Geometric Predicates, Discrete & Computational Geometry 18(3)
	// 305–363 (1997).
	// Code adapted from GeographicLib by Charles F. F. Karney,
	// http://geographiclib.sourceforge.net/

	var adder = function() {
	  return new Adder;
	};

	function Adder() {
	  this.reset();
	}

	Adder.prototype = {
	  constructor: Adder,
	  reset: function() {
	    this.s = // rounded value
	    this.t = 0; // exact error
	  },
	  add: function(y) {
	    add$1(temp, y, this.t);
	    add$1(this, temp.s, this.s);
	    if (this.s) this.t += temp.t;
	    else this.s = temp.t;
	  },
	  valueOf: function() {
	    return this.s;
	  }
	};

	var temp = new Adder;

	function add$1(adder, a, b) {
	  var x = adder.s = a + b,
	      bv = x - a,
	      av = x - bv;
	  adder.t = (a - av) + (b - bv);
	}

	var epsilon$2 = 1e-6;
	var epsilon2$1 = 1e-12;
	var pi$3 = Math.PI;
	var halfPi$2 = pi$3 / 2;
	var quarterPi = pi$3 / 4;
	var tau$3 = pi$3 * 2;

	var degrees$1 = 180 / pi$3;
	var radians = pi$3 / 180;

	var abs = Math.abs;
	var atan = Math.atan;
	var atan2 = Math.atan2;
	var cos$1 = Math.cos;
	var ceil = Math.ceil;
	var exp = Math.exp;

	var log = Math.log;
	var pow = Math.pow;
	var sin$1 = Math.sin;
	var sign = Math.sign || function(x) { return x > 0 ? 1 : x < 0 ? -1 : 0; };
	var sqrt = Math.sqrt;
	var tan = Math.tan;

	function acos(x) {
	  return x > 1 ? 0 : x < -1 ? pi$3 : Math.acos(x);
	}

	function asin(x) {
	  return x > 1 ? halfPi$2 : x < -1 ? -halfPi$2 : Math.asin(x);
	}

	function haversin(x) {
	  return (x = sin$1(x / 2)) * x;
	}

	function noop$1() {}

	function streamGeometry(geometry, stream) {
	  if (geometry && streamGeometryType.hasOwnProperty(geometry.type)) {
	    streamGeometryType[geometry.type](geometry, stream);
	  }
	}

	var streamObjectType = {
	  Feature: function(object, stream) {
	    streamGeometry(object.geometry, stream);
	  },
	  FeatureCollection: function(object, stream) {
	    var features = object.features, i = -1, n = features.length;
	    while (++i < n) streamGeometry(features[i].geometry, stream);
	  }
	};

	var streamGeometryType = {
	  Sphere: function(object, stream) {
	    stream.sphere();
	  },
	  Point: function(object, stream) {
	    object = object.coordinates;
	    stream.point(object[0], object[1], object[2]);
	  },
	  MultiPoint: function(object, stream) {
	    var coordinates = object.coordinates, i = -1, n = coordinates.length;
	    while (++i < n) object = coordinates[i], stream.point(object[0], object[1], object[2]);
	  },
	  LineString: function(object, stream) {
	    streamLine(object.coordinates, stream, 0);
	  },
	  MultiLineString: function(object, stream) {
	    var coordinates = object.coordinates, i = -1, n = coordinates.length;
	    while (++i < n) streamLine(coordinates[i], stream, 0);
	  },
	  Polygon: function(object, stream) {
	    streamPolygon(object.coordinates, stream);
	  },
	  MultiPolygon: function(object, stream) {
	    var coordinates = object.coordinates, i = -1, n = coordinates.length;
	    while (++i < n) streamPolygon(coordinates[i], stream);
	  },
	  GeometryCollection: function(object, stream) {
	    var geometries = object.geometries, i = -1, n = geometries.length;
	    while (++i < n) streamGeometry(geometries[i], stream);
	  }
	};

	function streamLine(coordinates, stream, closed) {
	  var i = -1, n = coordinates.length - closed, coordinate;
	  stream.lineStart();
	  while (++i < n) coordinate = coordinates[i], stream.point(coordinate[0], coordinate[1], coordinate[2]);
	  stream.lineEnd();
	}

	function streamPolygon(coordinates, stream) {
	  var i = -1, n = coordinates.length;
	  stream.polygonStart();
	  while (++i < n) streamLine(coordinates[i], stream, 1);
	  stream.polygonEnd();
	}

	var geoStream = function(object, stream) {
	  if (object && streamObjectType.hasOwnProperty(object.type)) {
	    streamObjectType[object.type](object, stream);
	  } else {
	    streamGeometry(object, stream);
	  }
	};

	var areaRingSum = adder();

	var areaSum = adder();
	var lambda00;
	var phi00;
	var lambda0;
	var cosPhi0;
	var sinPhi0;

	var areaStream = {
	  point: noop$1,
	  lineStart: noop$1,
	  lineEnd: noop$1,
	  polygonStart: function() {
	    areaRingSum.reset();
	    areaStream.lineStart = areaRingStart;
	    areaStream.lineEnd = areaRingEnd;
	  },
	  polygonEnd: function() {
	    var areaRing = +areaRingSum;
	    areaSum.add(areaRing < 0 ? tau$3 + areaRing : areaRing);
	    this.lineStart = this.lineEnd = this.point = noop$1;
	  },
	  sphere: function() {
	    areaSum.add(tau$3);
	  }
	};

	function areaRingStart() {
	  areaStream.point = areaPointFirst;
	}

	function areaRingEnd() {
	  areaPoint(lambda00, phi00);
	}

	function areaPointFirst(lambda, phi) {
	  areaStream.point = areaPoint;
	  lambda00 = lambda, phi00 = phi;
	  lambda *= radians, phi *= radians;
	  lambda0 = lambda, cosPhi0 = cos$1(phi = phi / 2 + quarterPi), sinPhi0 = sin$1(phi);
	}

	function areaPoint(lambda, phi) {
	  lambda *= radians, phi *= radians;
	  phi = phi / 2 + quarterPi; // half the angular distance from south pole

	  // Spherical excess E for a spherical triangle with vertices: south pole,
	  // previous point, current point.  Uses a formula derived from Cagnoli’s
	  // theorem.  See Todhunter, Spherical Trig. (1871), Sec. 103, Eq. (2).
	  var dLambda = lambda - lambda0,
	      sdLambda = dLambda >= 0 ? 1 : -1,
	      adLambda = sdLambda * dLambda,
	      cosPhi = cos$1(phi),
	      sinPhi = sin$1(phi),
	      k = sinPhi0 * sinPhi,
	      u = cosPhi0 * cosPhi + k * cos$1(adLambda),
	      v = k * sdLambda * sin$1(adLambda);
	  areaRingSum.add(atan2(v, u));

	  // Advance the previous points.
	  lambda0 = lambda, cosPhi0 = cosPhi, sinPhi0 = sinPhi;
	}

	var area = function(object) {
	  areaSum.reset();
	  geoStream(object, areaStream);
	  return areaSum * 2;
	};

	function spherical(cartesian) {
	  return [atan2(cartesian[1], cartesian[0]), asin(cartesian[2])];
	}

	function cartesian(spherical) {
	  var lambda = spherical[0], phi = spherical[1], cosPhi = cos$1(phi);
	  return [cosPhi * cos$1(lambda), cosPhi * sin$1(lambda), sin$1(phi)];
	}

	function cartesianDot(a, b) {
	  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
	}

	function cartesianCross(a, b) {
	  return [a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]];
	}

	// TODO return a
	function cartesianAddInPlace(a, b) {
	  a[0] += b[0], a[1] += b[1], a[2] += b[2];
	}

	function cartesianScale(vector, k) {
	  return [vector[0] * k, vector[1] * k, vector[2] * k];
	}

	// TODO return d
	function cartesianNormalizeInPlace(d) {
	  var l = sqrt(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);
	  d[0] /= l, d[1] /= l, d[2] /= l;
	}

	var lambda0$1;
	var phi0;
	var lambda1;
	var phi1;
	var lambda2;
	var lambda00$1;
	var phi00$1;
	var p0;
	var deltaSum = adder();
	var ranges;
	var range;

	var boundsStream = {
	  point: boundsPoint,
	  lineStart: boundsLineStart,
	  lineEnd: boundsLineEnd,
	  polygonStart: function() {
	    boundsStream.point = boundsRingPoint;
	    boundsStream.lineStart = boundsRingStart;
	    boundsStream.lineEnd = boundsRingEnd;
	    deltaSum.reset();
	    areaStream.polygonStart();
	  },
	  polygonEnd: function() {
	    areaStream.polygonEnd();
	    boundsStream.point = boundsPoint;
	    boundsStream.lineStart = boundsLineStart;
	    boundsStream.lineEnd = boundsLineEnd;
	    if (areaRingSum < 0) lambda0$1 = -(lambda1 = 180), phi0 = -(phi1 = 90);
	    else if (deltaSum > epsilon$2) phi1 = 90;
	    else if (deltaSum < -epsilon$2) phi0 = -90;
	    range[0] = lambda0$1, range[1] = lambda1;
	  }
	};

	function boundsPoint(lambda, phi) {
	  ranges.push(range = [lambda0$1 = lambda, lambda1 = lambda]);
	  if (phi < phi0) phi0 = phi;
	  if (phi > phi1) phi1 = phi;
	}

	function linePoint(lambda, phi) {
	  var p = cartesian([lambda * radians, phi * radians]);
	  if (p0) {
	    var normal = cartesianCross(p0, p),
	        equatorial = [normal[1], -normal[0], 0],
	        inflection = cartesianCross(equatorial, normal);
	    cartesianNormalizeInPlace(inflection);
	    inflection = spherical(inflection);
	    var delta = lambda - lambda2,
	        sign$$1 = delta > 0 ? 1 : -1,
	        lambdai = inflection[0] * degrees$1 * sign$$1,
	        phii,
	        antimeridian = abs(delta) > 180;
	    if (antimeridian ^ (sign$$1 * lambda2 < lambdai && lambdai < sign$$1 * lambda)) {
	      phii = inflection[1] * degrees$1;
	      if (phii > phi1) phi1 = phii;
	    } else if (lambdai = (lambdai + 360) % 360 - 180, antimeridian ^ (sign$$1 * lambda2 < lambdai && lambdai < sign$$1 * lambda)) {
	      phii = -inflection[1] * degrees$1;
	      if (phii < phi0) phi0 = phii;
	    } else {
	      if (phi < phi0) phi0 = phi;
	      if (phi > phi1) phi1 = phi;
	    }
	    if (antimeridian) {
	      if (lambda < lambda2) {
	        if (angle(lambda0$1, lambda) > angle(lambda0$1, lambda1)) lambda1 = lambda;
	      } else {
	        if (angle(lambda, lambda1) > angle(lambda0$1, lambda1)) lambda0$1 = lambda;
	      }
	    } else {
	      if (lambda1 >= lambda0$1) {
	        if (lambda < lambda0$1) lambda0$1 = lambda;
	        if (lambda > lambda1) lambda1 = lambda;
	      } else {
	        if (lambda > lambda2) {
	          if (angle(lambda0$1, lambda) > angle(lambda0$1, lambda1)) lambda1 = lambda;
	        } else {
	          if (angle(lambda, lambda1) > angle(lambda0$1, lambda1)) lambda0$1 = lambda;
	        }
	      }
	    }
	  } else {
	    ranges.push(range = [lambda0$1 = lambda, lambda1 = lambda]);
	  }
	  if (phi < phi0) phi0 = phi;
	  if (phi > phi1) phi1 = phi;
	  p0 = p, lambda2 = lambda;
	}

	function boundsLineStart() {
	  boundsStream.point = linePoint;
	}

	function boundsLineEnd() {
	  range[0] = lambda0$1, range[1] = lambda1;
	  boundsStream.point = boundsPoint;
	  p0 = null;
	}

	function boundsRingPoint(lambda, phi) {
	  if (p0) {
	    var delta = lambda - lambda2;
	    deltaSum.add(abs(delta) > 180 ? delta + (delta > 0 ? 360 : -360) : delta);
	  } else {
	    lambda00$1 = lambda, phi00$1 = phi;
	  }
	  areaStream.point(lambda, phi);
	  linePoint(lambda, phi);
	}

	function boundsRingStart() {
	  areaStream.lineStart();
	}

	function boundsRingEnd() {
	  boundsRingPoint(lambda00$1, phi00$1);
	  areaStream.lineEnd();
	  if (abs(deltaSum) > epsilon$2) lambda0$1 = -(lambda1 = 180);
	  range[0] = lambda0$1, range[1] = lambda1;
	  p0 = null;
	}

	// Finds the left-right distance between two longitudes.
	// This is almost the same as (lambda1 - lambda0 + 360°) % 360°, except that we want
	// the distance between ±180° to be 360°.
	function angle(lambda0, lambda1) {
	  return (lambda1 -= lambda0) < 0 ? lambda1 + 360 : lambda1;
	}

	function rangeCompare(a, b) {
	  return a[0] - b[0];
	}

	function rangeContains(range, x) {
	  return range[0] <= range[1] ? range[0] <= x && x <= range[1] : x < range[0] || range[1] < x;
	}

	var bounds = function(feature) {
	  var i, n, a, b, merged, deltaMax, delta;

	  phi1 = lambda1 = -(lambda0$1 = phi0 = Infinity);
	  ranges = [];
	  geoStream(feature, boundsStream);

	  // First, sort ranges by their minimum longitudes.
	  if (n = ranges.length) {
	    ranges.sort(rangeCompare);

	    // Then, merge any ranges that overlap.
	    for (i = 1, a = ranges[0], merged = [a]; i < n; ++i) {
	      b = ranges[i];
	      if (rangeContains(a, b[0]) || rangeContains(a, b[1])) {
	        if (angle(a[0], b[1]) > angle(a[0], a[1])) a[1] = b[1];
	        if (angle(b[0], a[1]) > angle(a[0], a[1])) a[0] = b[0];
	      } else {
	        merged.push(a = b);
	      }
	    }

	    // Finally, find the largest gap between the merged ranges.
	    // The final bounding box will be the inverse of this gap.
	    for (deltaMax = -Infinity, n = merged.length - 1, i = 0, a = merged[n]; i <= n; a = b, ++i) {
	      b = merged[i];
	      if ((delta = angle(a[1], b[0])) > deltaMax) deltaMax = delta, lambda0$1 = b[0], lambda1 = a[1];
	    }
	  }

	  ranges = range = null;

	  return lambda0$1 === Infinity || phi0 === Infinity
	      ? [[NaN, NaN], [NaN, NaN]]
	      : [[lambda0$1, phi0], [lambda1, phi1]];
	};

	var W0;
	var W1;
	var X0;
	var Y0;
	var Z0;
	var X1;
	var Y1;
	var Z1;
	var X2;
	var Y2;
	var Z2;
	var lambda00$2;
	var phi00$2;
	var x0;
	var y0;
	var z0; // previous point

	var centroidStream = {
	  sphere: noop$1,
	  point: centroidPoint,
	  lineStart: centroidLineStart,
	  lineEnd: centroidLineEnd,
	  polygonStart: function() {
	    centroidStream.lineStart = centroidRingStart;
	    centroidStream.lineEnd = centroidRingEnd;
	  },
	  polygonEnd: function() {
	    centroidStream.lineStart = centroidLineStart;
	    centroidStream.lineEnd = centroidLineEnd;
	  }
	};

	// Arithmetic mean of Cartesian vectors.
	function centroidPoint(lambda, phi) {
	  lambda *= radians, phi *= radians;
	  var cosPhi = cos$1(phi);
	  centroidPointCartesian(cosPhi * cos$1(lambda), cosPhi * sin$1(lambda), sin$1(phi));
	}

	function centroidPointCartesian(x, y, z) {
	  ++W0;
	  X0 += (x - X0) / W0;
	  Y0 += (y - Y0) / W0;
	  Z0 += (z - Z0) / W0;
	}

	function centroidLineStart() {
	  centroidStream.point = centroidLinePointFirst;
	}

	function centroidLinePointFirst(lambda, phi) {
	  lambda *= radians, phi *= radians;
	  var cosPhi = cos$1(phi);
	  x0 = cosPhi * cos$1(lambda);
	  y0 = cosPhi * sin$1(lambda);
	  z0 = sin$1(phi);
	  centroidStream.point = centroidLinePoint;
	  centroidPointCartesian(x0, y0, z0);
	}

	function centroidLinePoint(lambda, phi) {
	  lambda *= radians, phi *= radians;
	  var cosPhi = cos$1(phi),
	      x = cosPhi * cos$1(lambda),
	      y = cosPhi * sin$1(lambda),
	      z = sin$1(phi),
	      w = atan2(sqrt((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);
	  W1 += w;
	  X1 += w * (x0 + (x0 = x));
	  Y1 += w * (y0 + (y0 = y));
	  Z1 += w * (z0 + (z0 = z));
	  centroidPointCartesian(x0, y0, z0);
	}

	function centroidLineEnd() {
	  centroidStream.point = centroidPoint;
	}

	// See J. E. Brock, The Inertia Tensor for a Spherical Triangle,
	// J. Applied Mechanics 42, 239 (1975).
	function centroidRingStart() {
	  centroidStream.point = centroidRingPointFirst;
	}

	function centroidRingEnd() {
	  centroidRingPoint(lambda00$2, phi00$2);
	  centroidStream.point = centroidPoint;
	}

	function centroidRingPointFirst(lambda, phi) {
	  lambda00$2 = lambda, phi00$2 = phi;
	  lambda *= radians, phi *= radians;
	  centroidStream.point = centroidRingPoint;
	  var cosPhi = cos$1(phi);
	  x0 = cosPhi * cos$1(lambda);
	  y0 = cosPhi * sin$1(lambda);
	  z0 = sin$1(phi);
	  centroidPointCartesian(x0, y0, z0);
	}

	function centroidRingPoint(lambda, phi) {
	  lambda *= radians, phi *= radians;
	  var cosPhi = cos$1(phi),
	      x = cosPhi * cos$1(lambda),
	      y = cosPhi * sin$1(lambda),
	      z = sin$1(phi),
	      cx = y0 * z - z0 * y,
	      cy = z0 * x - x0 * z,
	      cz = x0 * y - y0 * x,
	      m = sqrt(cx * cx + cy * cy + cz * cz),
	      w = asin(m), // line weight = angle
	      v = m && -w / m; // area weight multiplier
	  X2 += v * cx;
	  Y2 += v * cy;
	  Z2 += v * cz;
	  W1 += w;
	  X1 += w * (x0 + (x0 = x));
	  Y1 += w * (y0 + (y0 = y));
	  Z1 += w * (z0 + (z0 = z));
	  centroidPointCartesian(x0, y0, z0);
	}

	var centroid = function(object) {
	  W0 = W1 =
	  X0 = Y0 = Z0 =
	  X1 = Y1 = Z1 =
	  X2 = Y2 = Z2 = 0;
	  geoStream(object, centroidStream);

	  var x = X2,
	      y = Y2,
	      z = Z2,
	      m = x * x + y * y + z * z;

	  // If the area-weighted ccentroid is undefined, fall back to length-weighted ccentroid.
	  if (m < epsilon2$1) {
	    x = X1, y = Y1, z = Z1;
	    // If the feature has zero length, fall back to arithmetic mean of point vectors.
	    if (W1 < epsilon$2) x = X0, y = Y0, z = Z0;
	    m = x * x + y * y + z * z;
	    // If the feature still has an undefined ccentroid, then return.
	    if (m < epsilon2$1) return [NaN, NaN];
	  }

	  return [atan2(y, x) * degrees$1, asin(z / sqrt(m)) * degrees$1];
	};

	var constant$7 = function(x) {
	  return function() {
	    return x;
	  };
	};

	var compose = function(a, b) {

	  function compose(x, y) {
	    return x = a(x, y), b(x[0], x[1]);
	  }

	  if (a.invert && b.invert) compose.invert = function(x, y) {
	    return x = b.invert(x, y), x && a.invert(x[0], x[1]);
	  };

	  return compose;
	};

	function rotationIdentity(lambda, phi) {
	  return [lambda > pi$3 ? lambda - tau$3 : lambda < -pi$3 ? lambda + tau$3 : lambda, phi];
	}

	rotationIdentity.invert = rotationIdentity;

	function rotateRadians(deltaLambda, deltaPhi, deltaGamma) {
	  return (deltaLambda %= tau$3) ? (deltaPhi || deltaGamma ? compose(rotationLambda(deltaLambda), rotationPhiGamma(deltaPhi, deltaGamma))
	    : rotationLambda(deltaLambda))
	    : (deltaPhi || deltaGamma ? rotationPhiGamma(deltaPhi, deltaGamma)
	    : rotationIdentity);
	}

	function forwardRotationLambda(deltaLambda) {
	  return function(lambda, phi) {
	    return lambda += deltaLambda, [lambda > pi$3 ? lambda - tau$3 : lambda < -pi$3 ? lambda + tau$3 : lambda, phi];
	  };
	}

	function rotationLambda(deltaLambda) {
	  var rotation = forwardRotationLambda(deltaLambda);
	  rotation.invert = forwardRotationLambda(-deltaLambda);
	  return rotation;
	}

	function rotationPhiGamma(deltaPhi, deltaGamma) {
	  var cosDeltaPhi = cos$1(deltaPhi),
	      sinDeltaPhi = sin$1(deltaPhi),
	      cosDeltaGamma = cos$1(deltaGamma),
	      sinDeltaGamma = sin$1(deltaGamma);

	  function rotation(lambda, phi) {
	    var cosPhi = cos$1(phi),
	        x = cos$1(lambda) * cosPhi,
	        y = sin$1(lambda) * cosPhi,
	        z = sin$1(phi),
	        k = z * cosDeltaPhi + x * sinDeltaPhi;
	    return [
	      atan2(y * cosDeltaGamma - k * sinDeltaGamma, x * cosDeltaPhi - z * sinDeltaPhi),
	      asin(k * cosDeltaGamma + y * sinDeltaGamma)
	    ];
	  }

	  rotation.invert = function(lambda, phi) {
	    var cosPhi = cos$1(phi),
	        x = cos$1(lambda) * cosPhi,
	        y = sin$1(lambda) * cosPhi,
	        z = sin$1(phi),
	        k = z * cosDeltaGamma - y * sinDeltaGamma;
	    return [
	      atan2(y * cosDeltaGamma + z * sinDeltaGamma, x * cosDeltaPhi + k * sinDeltaPhi),
	      asin(k * cosDeltaPhi - x * sinDeltaPhi)
	    ];
	  };

	  return rotation;
	}

	var rotation = function(rotate) {
	  rotate = rotateRadians(rotate[0] * radians, rotate[1] * radians, rotate.length > 2 ? rotate[2] * radians : 0);

	  function forward(coordinates) {
	    coordinates = rotate(coordinates[0] * radians, coordinates[1] * radians);
	    return coordinates[0] *= degrees$1, coordinates[1] *= degrees$1, coordinates;
	  }

	  forward.invert = function(coordinates) {
	    coordinates = rotate.invert(coordinates[0] * radians, coordinates[1] * radians);
	    return coordinates[0] *= degrees$1, coordinates[1] *= degrees$1, coordinates;
	  };

	  return forward;
	};

	// Generates a circle centered at [0°, 0°], with a given radius and precision.
	function circleStream(stream, radius, delta, direction, t0, t1) {
	  if (!delta) return;
	  var cosRadius = cos$1(radius),
	      sinRadius = sin$1(radius),
	      step = direction * delta;
	  if (t0 == null) {
	    t0 = radius + direction * tau$3;
	    t1 = radius - step / 2;
	  } else {
	    t0 = circleRadius(cosRadius, t0);
	    t1 = circleRadius(cosRadius, t1);
	    if (direction > 0 ? t0 < t1 : t0 > t1) t0 += direction * tau$3;
	  }
	  for (var point, t = t0; direction > 0 ? t > t1 : t < t1; t -= step) {
	    point = spherical([cosRadius, -sinRadius * cos$1(t), -sinRadius * sin$1(t)]);
	    stream.point(point[0], point[1]);
	  }
	}

	// Returns the signed angle of a cartesian point relative to [cosRadius, 0, 0].
	function circleRadius(cosRadius, point) {
	  point = cartesian(point), point[0] -= cosRadius;
	  cartesianNormalizeInPlace(point);
	  var radius = acos(-point[1]);
	  return ((-point[2] < 0 ? -radius : radius) + tau$3 - epsilon$2) % tau$3;
	}

	var circle = function() {
	  var center = constant$7([0, 0]),
	      radius = constant$7(90),
	      precision = constant$7(6),
	      ring,
	      rotate,
	      stream = {point: point};

	  function point(x, y) {
	    ring.push(x = rotate(x, y));
	    x[0] *= degrees$1, x[1] *= degrees$1;
	  }

	  function circle() {
	    var c = center.apply(this, arguments),
	        r = radius.apply(this, arguments) * radians,
	        p = precision.apply(this, arguments) * radians;
	    ring = [];
	    rotate = rotateRadians(-c[0] * radians, -c[1] * radians, 0).invert;
	    circleStream(stream, r, p, 1);
	    c = {type: "Polygon", coordinates: [ring]};
	    ring = rotate = null;
	    return c;
	  }

	  circle.center = function(_) {
	    return arguments.length ? (center = typeof _ === "function" ? _ : constant$7([+_[0], +_[1]]), circle) : center;
	  };

	  circle.radius = function(_) {
	    return arguments.length ? (radius = typeof _ === "function" ? _ : constant$7(+_), circle) : radius;
	  };

	  circle.precision = function(_) {
	    return arguments.length ? (precision = typeof _ === "function" ? _ : constant$7(+_), circle) : precision;
	  };

	  return circle;
	};

	var clipBuffer = function() {
	  var lines = [],
	      line;
	  return {
	    point: function(x, y) {
	      line.push([x, y]);
	    },
	    lineStart: function() {
	      lines.push(line = []);
	    },
	    lineEnd: noop$1,
	    rejoin: function() {
	      if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));
	    },
	    result: function() {
	      var result = lines;
	      lines = [];
	      line = null;
	      return result;
	    }
	  };
	};

	var clipLine = function(a, b, x0, y0, x1, y1) {
	  var ax = a[0],
	      ay = a[1],
	      bx = b[0],
	      by = b[1],
	      t0 = 0,
	      t1 = 1,
	      dx = bx - ax,
	      dy = by - ay,
	      r;

	  r = x0 - ax;
	  if (!dx && r > 0) return;
	  r /= dx;
	  if (dx < 0) {
	    if (r < t0) return;
	    if (r < t1) t1 = r;
	  } else if (dx > 0) {
	    if (r > t1) return;
	    if (r > t0) t0 = r;
	  }

	  r = x1 - ax;
	  if (!dx && r < 0) return;
	  r /= dx;
	  if (dx < 0) {
	    if (r > t1) return;
	    if (r > t0) t0 = r;
	  } else if (dx > 0) {
	    if (r < t0) return;
	    if (r < t1) t1 = r;
	  }

	  r = y0 - ay;
	  if (!dy && r > 0) return;
	  r /= dy;
	  if (dy < 0) {
	    if (r < t0) return;
	    if (r < t1) t1 = r;
	  } else if (dy > 0) {
	    if (r > t1) return;
	    if (r > t0) t0 = r;
	  }

	  r = y1 - ay;
	  if (!dy && r < 0) return;
	  r /= dy;
	  if (dy < 0) {
	    if (r > t1) return;
	    if (r > t0) t0 = r;
	  } else if (dy > 0) {
	    if (r < t0) return;
	    if (r < t1) t1 = r;
	  }

	  if (t0 > 0) a[0] = ax + t0 * dx, a[1] = ay + t0 * dy;
	  if (t1 < 1) b[0] = ax + t1 * dx, b[1] = ay + t1 * dy;
	  return true;
	};

	var pointEqual = function(a, b) {
	  return abs(a[0] - b[0]) < epsilon$2 && abs(a[1] - b[1]) < epsilon$2;
	};

	function Intersection(point, points, other, entry) {
	  this.x = point;
	  this.z = points;
	  this.o = other; // another intersection
	  this.e = entry; // is an entry?
	  this.v = false; // visited
	  this.n = this.p = null; // next & previous
	}

	// A generalized polygon clipping algorithm: given a polygon that has been cut
	// into its visible line segments, and rejoins the segments by interpolating
	// along the clip edge.
	var clipPolygon = function(segments, compareIntersection, startInside, interpolate, stream) {
	  var subject = [],
	      clip = [],
	      i,
	      n;

	  segments.forEach(function(segment) {
	    if ((n = segment.length - 1) <= 0) return;
	    var n, p0 = segment[0], p1 = segment[n], x;

	    // If the first and last points of a segment are coincident, then treat as a
	    // closed ring. TODO if all rings are closed, then the winding order of the
	    // exterior ring should be checked.
	    if (pointEqual(p0, p1)) {
	      stream.lineStart();
	      for (i = 0; i < n; ++i) stream.point((p0 = segment[i])[0], p0[1]);
	      stream.lineEnd();
	      return;
	    }

	    subject.push(x = new Intersection(p0, segment, null, true));
	    clip.push(x.o = new Intersection(p0, null, x, false));
	    subject.push(x = new Intersection(p1, segment, null, false));
	    clip.push(x.o = new Intersection(p1, null, x, true));
	  });

	  if (!subject.length) return;

	  clip.sort(compareIntersection);
	  link$1(subject);
	  link$1(clip);

	  for (i = 0, n = clip.length; i < n; ++i) {
	    clip[i].e = startInside = !startInside;
	  }

	  var start = subject[0],
	      points,
	      point;

	  while (1) {
	    // Find first unvisited intersection.
	    var current = start,
	        isSubject = true;
	    while (current.v) if ((current = current.n) === start) return;
	    points = current.z;
	    stream.lineStart();
	    do {
	      current.v = current.o.v = true;
	      if (current.e) {
	        if (isSubject) {
	          for (i = 0, n = points.length; i < n; ++i) stream.point((point = points[i])[0], point[1]);
	        } else {
	          interpolate(current.x, current.n.x, 1, stream);
	        }
	        current = current.n;
	      } else {
	        if (isSubject) {
	          points = current.p.z;
	          for (i = points.length - 1; i >= 0; --i) stream.point((point = points[i])[0], point[1]);
	        } else {
	          interpolate(current.x, current.p.x, -1, stream);
	        }
	        current = current.p;
	      }
	      current = current.o;
	      points = current.z;
	      isSubject = !isSubject;
	    } while (!current.v);
	    stream.lineEnd();
	  }
	};

	function link$1(array) {
	  if (!(n = array.length)) return;
	  var n,
	      i = 0,
	      a = array[0],
	      b;
	  while (++i < n) {
	    a.n = b = array[i];
	    b.p = a;
	    a = b;
	  }
	  a.n = b = array[0];
	  b.p = a;
	}

	var clipMax = 1e9;
	var clipMin = -clipMax;

	// TODO Use d3-polygon’s polygonContains here for the ring check?
	// TODO Eliminate duplicate buffering in clipBuffer and polygon.push?

	function clipExtent(x0, y0, x1, y1) {

	  function visible(x, y) {
	    return x0 <= x && x <= x1 && y0 <= y && y <= y1;
	  }

	  function interpolate(from, to, direction, stream) {
	    var a = 0, a1 = 0;
	    if (from == null
	        || (a = corner(from, direction)) !== (a1 = corner(to, direction))
	        || comparePoint(from, to) < 0 ^ direction > 0) {
	      do stream.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);
	      while ((a = (a + direction + 4) % 4) !== a1);
	    } else {
	      stream.point(to[0], to[1]);
	    }
	  }

	  function corner(p, direction) {
	    return abs(p[0] - x0) < epsilon$2 ? direction > 0 ? 0 : 3
	        : abs(p[0] - x1) < epsilon$2 ? direction > 0 ? 2 : 1
	        : abs(p[1] - y0) < epsilon$2 ? direction > 0 ? 1 : 0
	        : direction > 0 ? 3 : 2; // abs(p[1] - y1) < epsilon
	  }

	  function compareIntersection(a, b) {
	    return comparePoint(a.x, b.x);
	  }

	  function comparePoint(a, b) {
	    var ca = corner(a, 1),
	        cb = corner(b, 1);
	    return ca !== cb ? ca - cb
	        : ca === 0 ? b[1] - a[1]
	        : ca === 1 ? a[0] - b[0]
	        : ca === 2 ? a[1] - b[1]
	        : b[0] - a[0];
	  }

	  return function(stream) {
	    var activeStream = stream,
	        bufferStream = clipBuffer(),
	        segments,
	        polygon,
	        ring,
	        x__, y__, v__, // first point
	        x_, y_, v_, // previous point
	        first,
	        clean;

	    var clipStream = {
	      point: point,
	      lineStart: lineStart,
	      lineEnd: lineEnd,
	      polygonStart: polygonStart,
	      polygonEnd: polygonEnd
	    };

	    function point(x, y) {
	      if (visible(x, y)) activeStream.point(x, y);
	    }

	    function polygonInside() {
	      var winding = 0;

	      for (var i = 0, n = polygon.length; i < n; ++i) {
	        for (var ring = polygon[i], j = 1, m = ring.length, point = ring[0], a0, a1, b0 = point[0], b1 = point[1]; j < m; ++j) {
	          a0 = b0, a1 = b1, point = ring[j], b0 = point[0], b1 = point[1];
	          if (a1 <= y1) { if (b1 > y1 && (b0 - a0) * (y1 - a1) > (b1 - a1) * (x0 - a0)) ++winding; }
	          else { if (b1 <= y1 && (b0 - a0) * (y1 - a1) < (b1 - a1) * (x0 - a0)) --winding; }
	        }
	      }

	      return winding;
	    }

	    // Buffer geometry within a polygon and then clip it en masse.
	    function polygonStart() {
	      activeStream = bufferStream, segments = [], polygon = [], clean = true;
	    }

	    function polygonEnd() {
	      var startInside = polygonInside(),
	          cleanInside = clean && startInside,
	          visible = (segments = merge(segments)).length;
	      if (cleanInside || visible) {
	        stream.polygonStart();
	        if (cleanInside) {
	          stream.lineStart();
	          interpolate(null, null, 1, stream);
	          stream.lineEnd();
	        }
	        if (visible) {
	          clipPolygon(segments, compareIntersection, startInside, interpolate, stream);
	        }
	        stream.polygonEnd();
	      }
	      activeStream = stream, segments = polygon = ring = null;
	    }

	    function lineStart() {
	      clipStream.point = linePoint;
	      if (polygon) polygon.push(ring = []);
	      first = true;
	      v_ = false;
	      x_ = y_ = NaN;
	    }

	    // TODO rather than special-case polygons, simply handle them separately.
	    // Ideally, coincident intersection points should be jittered to avoid
	    // clipping issues.
	    function lineEnd() {
	      if (segments) {
	        linePoint(x__, y__);
	        if (v__ && v_) bufferStream.rejoin();
	        segments.push(bufferStream.result());
	      }
	      clipStream.point = point;
	      if (v_) activeStream.lineEnd();
	    }

	    function linePoint(x, y) {
	      var v = visible(x, y);
	      if (polygon) ring.push([x, y]);
	      if (first) {
	        x__ = x, y__ = y, v__ = v;
	        first = false;
	        if (v) {
	          activeStream.lineStart();
	          activeStream.point(x, y);
	        }
	      } else {
	        if (v && v_) activeStream.point(x, y);
	        else {
	          var a = [x_ = Math.max(clipMin, Math.min(clipMax, x_)), y_ = Math.max(clipMin, Math.min(clipMax, y_))],
	              b = [x = Math.max(clipMin, Math.min(clipMax, x)), y = Math.max(clipMin, Math.min(clipMax, y))];
	          if (clipLine(a, b, x0, y0, x1, y1)) {
	            if (!v_) {
	              activeStream.lineStart();
	              activeStream.point(a[0], a[1]);
	            }
	            activeStream.point(b[0], b[1]);
	            if (!v) activeStream.lineEnd();
	            clean = false;
	          } else if (v) {
	            activeStream.lineStart();
	            activeStream.point(x, y);
	            clean = false;
	          }
	        }
	      }
	      x_ = x, y_ = y, v_ = v;
	    }

	    return clipStream;
	  };
	}

	var extent$1 = function() {
	  var x0 = 0,
	      y0 = 0,
	      x1 = 960,
	      y1 = 500,
	      cache,
	      cacheStream,
	      clip;

	  return clip = {
	    stream: function(stream) {
	      return cache && cacheStream === stream ? cache : cache = clipExtent(x0, y0, x1, y1)(cacheStream = stream);
	    },
	    extent: function(_) {
	      return arguments.length ? (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1], cache = cacheStream = null, clip) : [[x0, y0], [x1, y1]];
	    }
	  };
	};

	var sum$1 = adder();

	var polygonContains = function(polygon, point) {
	  var lambda = point[0],
	      phi = point[1],
	      normal = [sin$1(lambda), -cos$1(lambda), 0],
	      angle = 0,
	      winding = 0;

	  sum$1.reset();

	  for (var i = 0, n = polygon.length; i < n; ++i) {
	    if (!(m = (ring = polygon[i]).length)) continue;
	    var ring,
	        m,
	        point0 = ring[m - 1],
	        lambda0 = point0[0],
	        phi0 = point0[1] / 2 + quarterPi,
	        sinPhi0 = sin$1(phi0),
	        cosPhi0 = cos$1(phi0);

	    for (var j = 0; j < m; ++j, lambda0 = lambda1, sinPhi0 = sinPhi1, cosPhi0 = cosPhi1, point0 = point1) {
	      var point1 = ring[j],
	          lambda1 = point1[0],
	          phi1 = point1[1] / 2 + quarterPi,
	          sinPhi1 = sin$1(phi1),
	          cosPhi1 = cos$1(phi1),
	          delta = lambda1 - lambda0,
	          sign$$1 = delta >= 0 ? 1 : -1,
	          absDelta = sign$$1 * delta,
	          antimeridian = absDelta > pi$3,
	          k = sinPhi0 * sinPhi1;

	      sum$1.add(atan2(k * sign$$1 * sin$1(absDelta), cosPhi0 * cosPhi1 + k * cos$1(absDelta)));
	      angle += antimeridian ? delta + sign$$1 * tau$3 : delta;

	      // Are the longitudes either side of the point’s meridian (lambda),
	      // and are the latitudes smaller than the parallel (phi)?
	      if (antimeridian ^ lambda0 >= lambda ^ lambda1 >= lambda) {
	        var arc = cartesianCross(cartesian(point0), cartesian(point1));
	        cartesianNormalizeInPlace(arc);
	        var intersection = cartesianCross(normal, arc);
	        cartesianNormalizeInPlace(intersection);
	        var phiArc = (antimeridian ^ delta >= 0 ? -1 : 1) * asin(intersection[2]);
	        if (phi > phiArc || phi === phiArc && (arc[0] || arc[1])) {
	          winding += antimeridian ^ delta >= 0 ? 1 : -1;
	        }
	      }
	    }
	  }

	  // First, determine whether the South pole is inside or outside:
	  //
	  // It is inside if:
	  // * the polygon winds around it in a clockwise direction.
	  // * the polygon does not (cumulatively) wind around it, but has a negative
	  //   (counter-clockwise) area.
	  //
	  // Second, count the (signed) number of times a segment crosses a lambda
	  // from the point to the South pole.  If it is zero, then the point is the
	  // same side as the South pole.

	  return (angle < -epsilon$2 || angle < epsilon$2 && sum$1 < -epsilon$2) ^ (winding & 1);
	};

	var lengthSum = adder();
	var lambda0$2;
	var sinPhi0$1;
	var cosPhi0$1;

	var lengthStream = {
	  sphere: noop$1,
	  point: noop$1,
	  lineStart: lengthLineStart,
	  lineEnd: noop$1,
	  polygonStart: noop$1,
	  polygonEnd: noop$1
	};

	function lengthLineStart() {
	  lengthStream.point = lengthPointFirst;
	  lengthStream.lineEnd = lengthLineEnd;
	}

	function lengthLineEnd() {
	  lengthStream.point = lengthStream.lineEnd = noop$1;
	}

	function lengthPointFirst(lambda, phi) {
	  lambda *= radians, phi *= radians;
	  lambda0$2 = lambda, sinPhi0$1 = sin$1(phi), cosPhi0$1 = cos$1(phi);
	  lengthStream.point = lengthPoint;
	}

	function lengthPoint(lambda, phi) {
	  lambda *= radians, phi *= radians;
	  var sinPhi = sin$1(phi),
	      cosPhi = cos$1(phi),
	      delta = abs(lambda - lambda0$2),
	      cosDelta = cos$1(delta),
	      sinDelta = sin$1(delta),
	      x = cosPhi * sinDelta,
	      y = cosPhi0$1 * sinPhi - sinPhi0$1 * cosPhi * cosDelta,
	      z = sinPhi0$1 * sinPhi + cosPhi0$1 * cosPhi * cosDelta;
	  lengthSum.add(atan2(sqrt(x * x + y * y), z));
	  lambda0$2 = lambda, sinPhi0$1 = sinPhi, cosPhi0$1 = cosPhi;
	}

	var length$1 = function(object) {
	  lengthSum.reset();
	  geoStream(object, lengthStream);
	  return +lengthSum;
	};

	var coordinates = [null, null];
	var object$1 = {type: "LineString", coordinates: coordinates};

	var distance = function(a, b) {
	  coordinates[0] = a;
	  coordinates[1] = b;
	  return length$1(object$1);
	};

	var containsObjectType = {
	  Feature: function(object, point) {
	    return containsGeometry(object.geometry, point);
	  },
	  FeatureCollection: function(object, point) {
	    var features = object.features, i = -1, n = features.length;
	    while (++i < n) if (containsGeometry(features[i].geometry, point)) return true;
	    return false;
	  }
	};

	var containsGeometryType = {
	  Sphere: function() {
	    return true;
	  },
	  Point: function(object, point) {
	    return containsPoint(object.coordinates, point);
	  },
	  MultiPoint: function(object, point) {
	    var coordinates = object.coordinates, i = -1, n = coordinates.length;
	    while (++i < n) if (containsPoint(coordinates[i], point)) return true;
	    return false;
	  },
	  LineString: function(object, point) {
	    return containsLine(object.coordinates, point);
	  },
	  MultiLineString: function(object, point) {
	    var coordinates = object.coordinates, i = -1, n = coordinates.length;
	    while (++i < n) if (containsLine(coordinates[i], point)) return true;
	    return false;
	  },
	  Polygon: function(object, point) {
	    return containsPolygon(object.coordinates, point);
	  },
	  MultiPolygon: function(object, point) {
	    var coordinates = object.coordinates, i = -1, n = coordinates.length;
	    while (++i < n) if (containsPolygon(coordinates[i], point)) return true;
	    return false;
	  },
	  GeometryCollection: function(object, point) {
	    var geometries = object.geometries, i = -1, n = geometries.length;
	    while (++i < n) if (containsGeometry(geometries[i], point)) return true;
	    return false;
	  }
	};

	function containsGeometry(geometry, point) {
	  return geometry && containsGeometryType.hasOwnProperty(geometry.type)
	      ? containsGeometryType[geometry.type](geometry, point)
	      : false;
	}

	function containsPoint(coordinates, point) {
	  return distance(coordinates, point) === 0;
	}

	function containsLine(coordinates, point) {
	  var ab = distance(coordinates[0], coordinates[1]),
	      ao = distance(coordinates[0], point),
	      ob = distance(point, coordinates[1]);
	  return ao + ob <= ab + epsilon$2;
	}

	function containsPolygon(coordinates, point) {
	  return !!polygonContains(coordinates.map(ringRadians), pointRadians(point));
	}

	function ringRadians(ring) {
	  return ring = ring.map(pointRadians), ring.pop(), ring;
	}

	function pointRadians(point) {
	  return [point[0] * radians, point[1] * radians];
	}

	var contains = function(object, point) {
	  return (object && containsObjectType.hasOwnProperty(object.type)
	      ? containsObjectType[object.type]
	      : containsGeometry)(object, point);
	};

	function graticuleX(y0, y1, dy) {
	  var y = sequence(y0, y1 - epsilon$2, dy).concat(y1);
	  return function(x) { return y.map(function(y) { return [x, y]; }); };
	}

	function graticuleY(x0, x1, dx) {
	  var x = sequence(x0, x1 - epsilon$2, dx).concat(x1);
	  return function(y) { return x.map(function(x) { return [x, y]; }); };
	}

	function graticule() {
	  var x1, x0, X1, X0,
	      y1, y0, Y1, Y0,
	      dx = 10, dy = dx, DX = 90, DY = 360,
	      x, y, X, Y,
	      precision = 2.5;

	  function graticule() {
	    return {type: "MultiLineString", coordinates: lines()};
	  }

	  function lines() {
	    return sequence(ceil(X0 / DX) * DX, X1, DX).map(X)
	        .concat(sequence(ceil(Y0 / DY) * DY, Y1, DY).map(Y))
	        .concat(sequence(ceil(x0 / dx) * dx, x1, dx).filter(function(x) { return abs(x % DX) > epsilon$2; }).map(x))
	        .concat(sequence(ceil(y0 / dy) * dy, y1, dy).filter(function(y) { return abs(y % DY) > epsilon$2; }).map(y));
	  }

	  graticule.lines = function() {
	    return lines().map(function(coordinates) { return {type: "LineString", coordinates: coordinates}; });
	  };

	  graticule.outline = function() {
	    return {
	      type: "Polygon",
	      coordinates: [
	        X(X0).concat(
	        Y(Y1).slice(1),
	        X(X1).reverse().slice(1),
	        Y(Y0).reverse().slice(1))
	      ]
	    };
	  };

	  graticule.extent = function(_) {
	    if (!arguments.length) return graticule.extentMinor();
	    return graticule.extentMajor(_).extentMinor(_);
	  };

	  graticule.extentMajor = function(_) {
	    if (!arguments.length) return [[X0, Y0], [X1, Y1]];
	    X0 = +_[0][0], X1 = +_[1][0];
	    Y0 = +_[0][1], Y1 = +_[1][1];
	    if (X0 > X1) _ = X0, X0 = X1, X1 = _;
	    if (Y0 > Y1) _ = Y0, Y0 = Y1, Y1 = _;
	    return graticule.precision(precision);
	  };

	  graticule.extentMinor = function(_) {
	    if (!arguments.length) return [[x0, y0], [x1, y1]];
	    x0 = +_[0][0], x1 = +_[1][0];
	    y0 = +_[0][1], y1 = +_[1][1];
	    if (x0 > x1) _ = x0, x0 = x1, x1 = _;
	    if (y0 > y1) _ = y0, y0 = y1, y1 = _;
	    return graticule.precision(precision);
	  };

	  graticule.step = function(_) {
	    if (!arguments.length) return graticule.stepMinor();
	    return graticule.stepMajor(_).stepMinor(_);
	  };

	  graticule.stepMajor = function(_) {
	    if (!arguments.length) return [DX, DY];
	    DX = +_[0], DY = +_[1];
	    return graticule;
	  };

	  graticule.stepMinor = function(_) {
	    if (!arguments.length) return [dx, dy];
	    dx = +_[0], dy = +_[1];
	    return graticule;
	  };

	  graticule.precision = function(_) {
	    if (!arguments.length) return precision;
	    precision = +_;
	    x = graticuleX(y0, y1, 90);
	    y = graticuleY(x0, x1, precision);
	    X = graticuleX(Y0, Y1, 90);
	    Y = graticuleY(X0, X1, precision);
	    return graticule;
	  };

	  return graticule
	      .extentMajor([[-180, -90 + epsilon$2], [180, 90 - epsilon$2]])
	      .extentMinor([[-180, -80 - epsilon$2], [180, 80 + epsilon$2]]);
	}

	function graticule10() {
	  return graticule()();
	}

	var interpolate$1 = function(a, b) {
	  var x0 = a[0] * radians,
	      y0 = a[1] * radians,
	      x1 = b[0] * radians,
	      y1 = b[1] * radians,
	      cy0 = cos$1(y0),
	      sy0 = sin$1(y0),
	      cy1 = cos$1(y1),
	      sy1 = sin$1(y1),
	      kx0 = cy0 * cos$1(x0),
	      ky0 = cy0 * sin$1(x0),
	      kx1 = cy1 * cos$1(x1),
	      ky1 = cy1 * sin$1(x1),
	      d = 2 * asin(sqrt(haversin(y1 - y0) + cy0 * cy1 * haversin(x1 - x0))),
	      k = sin$1(d);

	  var interpolate = d ? function(t) {
	    var B = sin$1(t *= d) / k,
	        A = sin$1(d - t) / k,
	        x = A * kx0 + B * kx1,
	        y = A * ky0 + B * ky1,
	        z = A * sy0 + B * sy1;
	    return [
	      atan2(y, x) * degrees$1,
	      atan2(z, sqrt(x * x + y * y)) * degrees$1
	    ];
	  } : function() {
	    return [x0 * degrees$1, y0 * degrees$1];
	  };

	  interpolate.distance = d;

	  return interpolate;
	};

	var identity$4 = function(x) {
	  return x;
	};

	var areaSum$1 = adder();
	var areaRingSum$1 = adder();
	var x00;
	var y00;
	var x0$1;
	var y0$1;

	var areaStream$1 = {
	  point: noop$1,
	  lineStart: noop$1,
	  lineEnd: noop$1,
	  polygonStart: function() {
	    areaStream$1.lineStart = areaRingStart$1;
	    areaStream$1.lineEnd = areaRingEnd$1;
	  },
	  polygonEnd: function() {
	    areaStream$1.lineStart = areaStream$1.lineEnd = areaStream$1.point = noop$1;
	    areaSum$1.add(abs(areaRingSum$1));
	    areaRingSum$1.reset();
	  },
	  result: function() {
	    var area = areaSum$1 / 2;
	    areaSum$1.reset();
	    return area;
	  }
	};

	function areaRingStart$1() {
	  areaStream$1.point = areaPointFirst$1;
	}

	function areaPointFirst$1(x, y) {
	  areaStream$1.point = areaPoint$1;
	  x00 = x0$1 = x, y00 = y0$1 = y;
	}

	function areaPoint$1(x, y) {
	  areaRingSum$1.add(y0$1 * x - x0$1 * y);
	  x0$1 = x, y0$1 = y;
	}

	function areaRingEnd$1() {
	  areaPoint$1(x00, y00);
	}

	var x0$2 = Infinity;
	var y0$2 = x0$2;
	var x1 = -x0$2;
	var y1 = x1;

	var boundsStream$1 = {
	  point: boundsPoint$1,
	  lineStart: noop$1,
	  lineEnd: noop$1,
	  polygonStart: noop$1,
	  polygonEnd: noop$1,
	  result: function() {
	    var bounds = [[x0$2, y0$2], [x1, y1]];
	    x1 = y1 = -(y0$2 = x0$2 = Infinity);
	    return bounds;
	  }
	};

	function boundsPoint$1(x, y) {
	  if (x < x0$2) x0$2 = x;
	  if (x > x1) x1 = x;
	  if (y < y0$2) y0$2 = y;
	  if (y > y1) y1 = y;
	}

	// TODO Enforce positive area for exterior, negative area for interior?

	var X0$1 = 0;
	var Y0$1 = 0;
	var Z0$1 = 0;
	var X1$1 = 0;
	var Y1$1 = 0;
	var Z1$1 = 0;
	var X2$1 = 0;
	var Y2$1 = 0;
	var Z2$1 = 0;
	var x00$1;
	var y00$1;
	var x0$3;
	var y0$3;

	var centroidStream$1 = {
	  point: centroidPoint$1,
	  lineStart: centroidLineStart$1,
	  lineEnd: centroidLineEnd$1,
	  polygonStart: function() {
	    centroidStream$1.lineStart = centroidRingStart$1;
	    centroidStream$1.lineEnd = centroidRingEnd$1;
	  },
	  polygonEnd: function() {
	    centroidStream$1.point = centroidPoint$1;
	    centroidStream$1.lineStart = centroidLineStart$1;
	    centroidStream$1.lineEnd = centroidLineEnd$1;
	  },
	  result: function() {
	    var centroid = Z2$1 ? [X2$1 / Z2$1, Y2$1 / Z2$1]
	        : Z1$1 ? [X1$1 / Z1$1, Y1$1 / Z1$1]
	        : Z0$1 ? [X0$1 / Z0$1, Y0$1 / Z0$1]
	        : [NaN, NaN];
	    X0$1 = Y0$1 = Z0$1 =
	    X1$1 = Y1$1 = Z1$1 =
	    X2$1 = Y2$1 = Z2$1 = 0;
	    return centroid;
	  }
	};

	function centroidPoint$1(x, y) {
	  X0$1 += x;
	  Y0$1 += y;
	  ++Z0$1;
	}

	function centroidLineStart$1() {
	  centroidStream$1.point = centroidPointFirstLine;
	}

	function centroidPointFirstLine(x, y) {
	  centroidStream$1.point = centroidPointLine;
	  centroidPoint$1(x0$3 = x, y0$3 = y);
	}

	function centroidPointLine(x, y) {
	  var dx = x - x0$3, dy = y - y0$3, z = sqrt(dx * dx + dy * dy);
	  X1$1 += z * (x0$3 + x) / 2;
	  Y1$1 += z * (y0$3 + y) / 2;
	  Z1$1 += z;
	  centroidPoint$1(x0$3 = x, y0$3 = y);
	}

	function centroidLineEnd$1() {
	  centroidStream$1.point = centroidPoint$1;
	}

	function centroidRingStart$1() {
	  centroidStream$1.point = centroidPointFirstRing;
	}

	function centroidRingEnd$1() {
	  centroidPointRing(x00$1, y00$1);
	}

	function centroidPointFirstRing(x, y) {
	  centroidStream$1.point = centroidPointRing;
	  centroidPoint$1(x00$1 = x0$3 = x, y00$1 = y0$3 = y);
	}

	function centroidPointRing(x, y) {
	  var dx = x - x0$3,
	      dy = y - y0$3,
	      z = sqrt(dx * dx + dy * dy);

	  X1$1 += z * (x0$3 + x) / 2;
	  Y1$1 += z * (y0$3 + y) / 2;
	  Z1$1 += z;

	  z = y0$3 * x - x0$3 * y;
	  X2$1 += z * (x0$3 + x);
	  Y2$1 += z * (y0$3 + y);
	  Z2$1 += z * 3;
	  centroidPoint$1(x0$3 = x, y0$3 = y);
	}

	function PathContext(context) {
	  this._context = context;
	}

	PathContext.prototype = {
	  _radius: 4.5,
	  pointRadius: function(_) {
	    return this._radius = _, this;
	  },
	  polygonStart: function() {
	    this._line = 0;
	  },
	  polygonEnd: function() {
	    this._line = NaN;
	  },
	  lineStart: function() {
	    this._point = 0;
	  },
	  lineEnd: function() {
	    if (this._line === 0) this._context.closePath();
	    this._point = NaN;
	  },
	  point: function(x, y) {
	    switch (this._point) {
	      case 0: {
	        this._context.moveTo(x, y);
	        this._point = 1;
	        break;
	      }
	      case 1: {
	        this._context.lineTo(x, y);
	        break;
	      }
	      default: {
	        this._context.moveTo(x + this._radius, y);
	        this._context.arc(x, y, this._radius, 0, tau$3);
	        break;
	      }
	    }
	  },
	  result: noop$1
	};

	var lengthSum$1 = adder();
	var lengthRing;
	var x00$2;
	var y00$2;
	var x0$4;
	var y0$4;

	var lengthStream$1 = {
	  point: noop$1,
	  lineStart: function() {
	    lengthStream$1.point = lengthPointFirst$1;
	  },
	  lineEnd: function() {
	    if (lengthRing) lengthPoint$1(x00$2, y00$2);
	    lengthStream$1.point = noop$1;
	  },
	  polygonStart: function() {
	    lengthRing = true;
	  },
	  polygonEnd: function() {
	    lengthRing = null;
	  },
	  result: function() {
	    var length = +lengthSum$1;
	    lengthSum$1.reset();
	    return length;
	  }
	};

	function lengthPointFirst$1(x, y) {
	  lengthStream$1.point = lengthPoint$1;
	  x00$2 = x0$4 = x, y00$2 = y0$4 = y;
	}

	function lengthPoint$1(x, y) {
	  x0$4 -= x, y0$4 -= y;
	  lengthSum$1.add(sqrt(x0$4 * x0$4 + y0$4 * y0$4));
	  x0$4 = x, y0$4 = y;
	}

	function PathString() {
	  this._string = [];
	}

	PathString.prototype = {
	  _radius: 4.5,
	  _circle: circle$1(4.5),
	  pointRadius: function(_) {
	    if ((_ = +_) !== this._radius) this._radius = _, this._circle = null;
	    return this;
	  },
	  polygonStart: function() {
	    this._line = 0;
	  },
	  polygonEnd: function() {
	    this._line = NaN;
	  },
	  lineStart: function() {
	    this._point = 0;
	  },
	  lineEnd: function() {
	    if (this._line === 0) this._string.push("Z");
	    this._point = NaN;
	  },
	  point: function(x, y) {
	    switch (this._point) {
	      case 0: {
	        this._string.push("M", x, ",", y);
	        this._point = 1;
	        break;
	      }
	      case 1: {
	        this._string.push("L", x, ",", y);
	        break;
	      }
	      default: {
	        if (this._circle == null) this._circle = circle$1(this._radius);
	        this._string.push("M", x, ",", y, this._circle);
	        break;
	      }
	    }
	  },
	  result: function() {
	    if (this._string.length) {
	      var result = this._string.join("");
	      this._string = [];
	      return result;
	    } else {
	      return null;
	    }
	  }
	};

	function circle$1(radius) {
	  return "m0," + radius
	      + "a" + radius + "," + radius + " 0 1,1 0," + -2 * radius
	      + "a" + radius + "," + radius + " 0 1,1 0," + 2 * radius
	      + "z";
	}

	var index$1 = function(projection, context) {
	  var pointRadius = 4.5,
	      projectionStream,
	      contextStream;

	  function path(object) {
	    if (object) {
	      if (typeof pointRadius === "function") contextStream.pointRadius(+pointRadius.apply(this, arguments));
	      geoStream(object, projectionStream(contextStream));
	    }
	    return contextStream.result();
	  }

	  path.area = function(object) {
	    geoStream(object, projectionStream(areaStream$1));
	    return areaStream$1.result();
	  };

	  path.measure = function(object) {
	    geoStream(object, projectionStream(lengthStream$1));
	    return lengthStream$1.result();
	  };

	  path.bounds = function(object) {
	    geoStream(object, projectionStream(boundsStream$1));
	    return boundsStream$1.result();
	  };

	  path.centroid = function(object) {
	    geoStream(object, projectionStream(centroidStream$1));
	    return centroidStream$1.result();
	  };

	  path.projection = function(_) {
	    return arguments.length ? (projectionStream = _ == null ? (projection = null, identity$4) : (projection = _).stream, path) : projection;
	  };

	  path.context = function(_) {
	    if (!arguments.length) return context;
	    contextStream = _ == null ? (context = null, new PathString) : new PathContext(context = _);
	    if (typeof pointRadius !== "function") contextStream.pointRadius(pointRadius);
	    return path;
	  };

	  path.pointRadius = function(_) {
	    if (!arguments.length) return pointRadius;
	    pointRadius = typeof _ === "function" ? _ : (contextStream.pointRadius(+_), +_);
	    return path;
	  };

	  return path.projection(projection).context(context);
	};

	var clip = function(pointVisible, clipLine, interpolate, start) {
	  return function(rotate, sink) {
	    var line = clipLine(sink),
	        rotatedStart = rotate.invert(start[0], start[1]),
	        ringBuffer = clipBuffer(),
	        ringSink = clipLine(ringBuffer),
	        polygonStarted = false,
	        polygon,
	        segments,
	        ring;

	    var clip = {
	      point: point,
	      lineStart: lineStart,
	      lineEnd: lineEnd,
	      polygonStart: function() {
	        clip.point = pointRing;
	        clip.lineStart = ringStart;
	        clip.lineEnd = ringEnd;
	        segments = [];
	        polygon = [];
	      },
	      polygonEnd: function() {
	        clip.point = point;
	        clip.lineStart = lineStart;
	        clip.lineEnd = lineEnd;
	        segments = merge(segments);
	        var startInside = polygonContains(polygon, rotatedStart);
	        if (segments.length) {
	          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
	          clipPolygon(segments, compareIntersection, startInside, interpolate, sink);
	        } else if (startInside) {
	          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
	          sink.lineStart();
	          interpolate(null, null, 1, sink);
	          sink.lineEnd();
	        }
	        if (polygonStarted) sink.polygonEnd(), polygonStarted = false;
	        segments = polygon = null;
	      },
	      sphere: function() {
	        sink.polygonStart();
	        sink.lineStart();
	        interpolate(null, null, 1, sink);
	        sink.lineEnd();
	        sink.polygonEnd();
	      }
	    };

	    function point(lambda, phi) {
	      var point = rotate(lambda, phi);
	      if (pointVisible(lambda = point[0], phi = point[1])) sink.point(lambda, phi);
	    }

	    function pointLine(lambda, phi) {
	      var point = rotate(lambda, phi);
	      line.point(point[0], point[1]);
	    }

	    function lineStart() {
	      clip.point = pointLine;
	      line.lineStart();
	    }

	    function lineEnd() {
	      clip.point = point;
	      line.lineEnd();
	    }

	    function pointRing(lambda, phi) {
	      ring.push([lambda, phi]);
	      var point = rotate(lambda, phi);
	      ringSink.point(point[0], point[1]);
	    }

	    function ringStart() {
	      ringSink.lineStart();
	      ring = [];
	    }

	    function ringEnd() {
	      pointRing(ring[0][0], ring[0][1]);
	      ringSink.lineEnd();

	      var clean = ringSink.clean(),
	          ringSegments = ringBuffer.result(),
	          i, n = ringSegments.length, m,
	          segment,
	          point;

	      ring.pop();
	      polygon.push(ring);
	      ring = null;

	      if (!n) return;

	      // No intersections.
	      if (clean & 1) {
	        segment = ringSegments[0];
	        if ((m = segment.length - 1) > 0) {
	          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
	          sink.lineStart();
	          for (i = 0; i < m; ++i) sink.point((point = segment[i])[0], point[1]);
	          sink.lineEnd();
	        }
	        return;
	      }

	      // Rejoin connected segments.
	      // TODO reuse ringBuffer.rejoin()?
	      if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));

	      segments.push(ringSegments.filter(validSegment));
	    }

	    return clip;
	  };
	};

	function validSegment(segment) {
	  return segment.length > 1;
	}

	// Intersections are sorted along the clip edge. For both antimeridian cutting
	// and circle clipping, the same comparison is used.
	function compareIntersection(a, b) {
	  return ((a = a.x)[0] < 0 ? a[1] - halfPi$2 - epsilon$2 : halfPi$2 - a[1])
	       - ((b = b.x)[0] < 0 ? b[1] - halfPi$2 - epsilon$2 : halfPi$2 - b[1]);
	}

	var clipAntimeridian = clip(
	  function() { return true; },
	  clipAntimeridianLine,
	  clipAntimeridianInterpolate,
	  [-pi$3, -halfPi$2]
	);

	// Takes a line and cuts into visible segments. Return values: 0 - there were
	// intersections or the line was empty; 1 - no intersections; 2 - there were
	// intersections, and the first and last segments should be rejoined.
	function clipAntimeridianLine(stream) {
	  var lambda0 = NaN,
	      phi0 = NaN,
	      sign0 = NaN,
	      clean; // no intersections

	  return {
	    lineStart: function() {
	      stream.lineStart();
	      clean = 1;
	    },
	    point: function(lambda1, phi1) {
	      var sign1 = lambda1 > 0 ? pi$3 : -pi$3,
	          delta = abs(lambda1 - lambda0);
	      if (abs(delta - pi$3) < epsilon$2) { // line crosses a pole
	        stream.point(lambda0, phi0 = (phi0 + phi1) / 2 > 0 ? halfPi$2 : -halfPi$2);
	        stream.point(sign0, phi0);
	        stream.lineEnd();
	        stream.lineStart();
	        stream.point(sign1, phi0);
	        stream.point(lambda1, phi0);
	        clean = 0;
	      } else if (sign0 !== sign1 && delta >= pi$3) { // line crosses antimeridian
	        if (abs(lambda0 - sign0) < epsilon$2) lambda0 -= sign0 * epsilon$2; // handle degeneracies
	        if (abs(lambda1 - sign1) < epsilon$2) lambda1 -= sign1 * epsilon$2;
	        phi0 = clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1);
	        stream.point(sign0, phi0);
	        stream.lineEnd();
	        stream.lineStart();
	        stream.point(sign1, phi0);
	        clean = 0;
	      }
	      stream.point(lambda0 = lambda1, phi0 = phi1);
	      sign0 = sign1;
	    },
	    lineEnd: function() {
	      stream.lineEnd();
	      lambda0 = phi0 = NaN;
	    },
	    clean: function() {
	      return 2 - clean; // if intersections, rejoin first and last segments
	    }
	  };
	}

	function clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1) {
	  var cosPhi0,
	      cosPhi1,
	      sinLambda0Lambda1 = sin$1(lambda0 - lambda1);
	  return abs(sinLambda0Lambda1) > epsilon$2
	      ? atan((sin$1(phi0) * (cosPhi1 = cos$1(phi1)) * sin$1(lambda1)
	          - sin$1(phi1) * (cosPhi0 = cos$1(phi0)) * sin$1(lambda0))
	          / (cosPhi0 * cosPhi1 * sinLambda0Lambda1))
	      : (phi0 + phi1) / 2;
	}

	function clipAntimeridianInterpolate(from, to, direction, stream) {
	  var phi;
	  if (from == null) {
	    phi = direction * halfPi$2;
	    stream.point(-pi$3, phi);
	    stream.point(0, phi);
	    stream.point(pi$3, phi);
	    stream.point(pi$3, 0);
	    stream.point(pi$3, -phi);
	    stream.point(0, -phi);
	    stream.point(-pi$3, -phi);
	    stream.point(-pi$3, 0);
	    stream.point(-pi$3, phi);
	  } else if (abs(from[0] - to[0]) > epsilon$2) {
	    var lambda = from[0] < to[0] ? pi$3 : -pi$3;
	    phi = direction * lambda / 2;
	    stream.point(-lambda, phi);
	    stream.point(0, phi);
	    stream.point(lambda, phi);
	  } else {
	    stream.point(to[0], to[1]);
	  }
	}

	var clipCircle = function(radius, delta) {
	  var cr = cos$1(radius),
	      smallRadius = cr > 0,
	      notHemisphere = abs(cr) > epsilon$2; // TODO optimise for this common case

	  function interpolate(from, to, direction, stream) {
	    circleStream(stream, radius, delta, direction, from, to);
	  }

	  function visible(lambda, phi) {
	    return cos$1(lambda) * cos$1(phi) > cr;
	  }

	  // Takes a line and cuts into visible segments. Return values used for polygon
	  // clipping: 0 - there were intersections or the line was empty; 1 - no
	  // intersections 2 - there were intersections, and the first and last segments
	  // should be rejoined.
	  function clipLine(stream) {
	    var point0, // previous point
	        c0, // code for previous point
	        v0, // visibility of previous point
	        v00, // visibility of first point
	        clean; // no intersections
	    return {
	      lineStart: function() {
	        v00 = v0 = false;
	        clean = 1;
	      },
	      point: function(lambda, phi) {
	        var point1 = [lambda, phi],
	            point2,
	            v = visible(lambda, phi),
	            c = smallRadius
	              ? v ? 0 : code(lambda, phi)
	              : v ? code(lambda + (lambda < 0 ? pi$3 : -pi$3), phi) : 0;
	        if (!point0 && (v00 = v0 = v)) stream.lineStart();
	        // Handle degeneracies.
	        // TODO ignore if not clipping polygons.
	        if (v !== v0) {
	          point2 = intersect(point0, point1);
	          if (!point2 || pointEqual(point0, point2) || pointEqual(point1, point2)) {
	            point1[0] += epsilon$2;
	            point1[1] += epsilon$2;
	            v = visible(point1[0], point1[1]);
	          }
	        }
	        if (v !== v0) {
	          clean = 0;
	          if (v) {
	            // outside going in
	            stream.lineStart();
	            point2 = intersect(point1, point0);
	            stream.point(point2[0], point2[1]);
	          } else {
	            // inside going out
	            point2 = intersect(point0, point1);
	            stream.point(point2[0], point2[1]);
	            stream.lineEnd();
	          }
	          point0 = point2;
	        } else if (notHemisphere && point0 && smallRadius ^ v) {
	          var t;
	          // If the codes for two points are different, or are both zero,
	          // and there this segment intersects with the small circle.
	          if (!(c & c0) && (t = intersect(point1, point0, true))) {
	            clean = 0;
	            if (smallRadius) {
	              stream.lineStart();
	              stream.point(t[0][0], t[0][1]);
	              stream.point(t[1][0], t[1][1]);
	              stream.lineEnd();
	            } else {
	              stream.point(t[1][0], t[1][1]);
	              stream.lineEnd();
	              stream.lineStart();
	              stream.point(t[0][0], t[0][1]);
	            }
	          }
	        }
	        if (v && (!point0 || !pointEqual(point0, point1))) {
	          stream.point(point1[0], point1[1]);
	        }
	        point0 = point1, v0 = v, c0 = c;
	      },
	      lineEnd: function() {
	        if (v0) stream.lineEnd();
	        point0 = null;
	      },
	      // Rejoin first and last segments if there were intersections and the first
	      // and last points were visible.
	      clean: function() {
	        return clean | ((v00 && v0) << 1);
	      }
	    };
	  }

	  // Intersects the great circle between a and b with the clip circle.
	  function intersect(a, b, two) {
	    var pa = cartesian(a),
	        pb = cartesian(b);

	    // We have two planes, n1.p = d1 and n2.p = d2.
	    // Find intersection line p(t) = c1 n1 + c2 n2 + t (n1 ⨯ n2).
	    var n1 = [1, 0, 0], // normal
	        n2 = cartesianCross(pa, pb),
	        n2n2 = cartesianDot(n2, n2),
	        n1n2 = n2[0], // cartesianDot(n1, n2),
	        determinant = n2n2 - n1n2 * n1n2;

	    // Two polar points.
	    if (!determinant) return !two && a;

	    var c1 =  cr * n2n2 / determinant,
	        c2 = -cr * n1n2 / determinant,
	        n1xn2 = cartesianCross(n1, n2),
	        A = cartesianScale(n1, c1),
	        B = cartesianScale(n2, c2);
	    cartesianAddInPlace(A, B);

	    // Solve |p(t)|^2 = 1.
	    var u = n1xn2,
	        w = cartesianDot(A, u),
	        uu = cartesianDot(u, u),
	        t2 = w * w - uu * (cartesianDot(A, A) - 1);

	    if (t2 < 0) return;

	    var t = sqrt(t2),
	        q = cartesianScale(u, (-w - t) / uu);
	    cartesianAddInPlace(q, A);
	    q = spherical(q);

	    if (!two) return q;

	    // Two intersection points.
	    var lambda0 = a[0],
	        lambda1 = b[0],
	        phi0 = a[1],
	        phi1 = b[1],
	        z;

	    if (lambda1 < lambda0) z = lambda0, lambda0 = lambda1, lambda1 = z;

	    var delta = lambda1 - lambda0,
	        polar = abs(delta - pi$3) < epsilon$2,
	        meridian = polar || delta < epsilon$2;

	    if (!polar && phi1 < phi0) z = phi0, phi0 = phi1, phi1 = z;

	    // Check that the first point is between a and b.
	    if (meridian
	        ? polar
	          ? phi0 + phi1 > 0 ^ q[1] < (abs(q[0] - lambda0) < epsilon$2 ? phi0 : phi1)
	          : phi0 <= q[1] && q[1] <= phi1
	        : delta > pi$3 ^ (lambda0 <= q[0] && q[0] <= lambda1)) {
	      var q1 = cartesianScale(u, (-w + t) / uu);
	      cartesianAddInPlace(q1, A);
	      return [q, spherical(q1)];
	    }
	  }

	  // Generates a 4-bit vector representing the location of a point relative to
	  // the small circle's bounding box.
	  function code(lambda, phi) {
	    var r = smallRadius ? radius : pi$3 - radius,
	        code = 0;
	    if (lambda < -r) code |= 1; // left
	    else if (lambda > r) code |= 2; // right
	    if (phi < -r) code |= 4; // below
	    else if (phi > r) code |= 8; // above
	    return code;
	  }

	  return clip(visible, clipLine, interpolate, smallRadius ? [0, -radius] : [-pi$3, radius - pi$3]);
	};

	var transform = function(methods) {
	  return {
	    stream: transformer(methods)
	  };
	};

	function transformer(methods) {
	  return function(stream) {
	    var s = new TransformStream;
	    for (var key in methods) s[key] = methods[key];
	    s.stream = stream;
	    return s;
	  };
	}

	function TransformStream() {}

	TransformStream.prototype = {
	  constructor: TransformStream,
	  point: function(x, y) { this.stream.point(x, y); },
	  sphere: function() { this.stream.sphere(); },
	  lineStart: function() { this.stream.lineStart(); },
	  lineEnd: function() { this.stream.lineEnd(); },
	  polygonStart: function() { this.stream.polygonStart(); },
	  polygonEnd: function() { this.stream.polygonEnd(); }
	};

	function fitExtent(projection, extent, object) {
	  var w = extent[1][0] - extent[0][0],
	      h = extent[1][1] - extent[0][1],
	      clip = projection.clipExtent && projection.clipExtent();

	  projection
	      .scale(150)
	      .translate([0, 0]);

	  if (clip != null) projection.clipExtent(null);

	  geoStream(object, projection.stream(boundsStream$1));

	  var b = boundsStream$1.result(),
	      k = Math.min(w / (b[1][0] - b[0][0]), h / (b[1][1] - b[0][1])),
	      x = +extent[0][0] + (w - k * (b[1][0] + b[0][0])) / 2,
	      y = +extent[0][1] + (h - k * (b[1][1] + b[0][1])) / 2;

	  if (clip != null) projection.clipExtent(clip);

	  return projection
	      .scale(k * 150)
	      .translate([x, y]);
	}

	function fitSize(projection, size, object) {
	  return fitExtent(projection, [[0, 0], size], object);
	}

	var maxDepth = 16;
	var cosMinDistance = cos$1(30 * radians); // cos(minimum angular distance)

	var resample = function(project, delta2) {
	  return +delta2 ? resample$1(project, delta2) : resampleNone(project);
	};

	function resampleNone(project) {
	  return transformer({
	    point: function(x, y) {
	      x = project(x, y);
	      this.stream.point(x[0], x[1]);
	    }
	  });
	}

	function resample$1(project, delta2) {

	  function resampleLineTo(x0, y0, lambda0, a0, b0, c0, x1, y1, lambda1, a1, b1, c1, depth, stream) {
	    var dx = x1 - x0,
	        dy = y1 - y0,
	        d2 = dx * dx + dy * dy;
	    if (d2 > 4 * delta2 && depth--) {
	      var a = a0 + a1,
	          b = b0 + b1,
	          c = c0 + c1,
	          m = sqrt(a * a + b * b + c * c),
	          phi2 = asin(c /= m),
	          lambda2 = abs(abs(c) - 1) < epsilon$2 || abs(lambda0 - lambda1) < epsilon$2 ? (lambda0 + lambda1) / 2 : atan2(b, a),
	          p = project(lambda2, phi2),
	          x2 = p[0],
	          y2 = p[1],
	          dx2 = x2 - x0,
	          dy2 = y2 - y0,
	          dz = dy * dx2 - dx * dy2;
	      if (dz * dz / d2 > delta2 // perpendicular projected distance
	          || abs((dx * dx2 + dy * dy2) / d2 - 0.5) > 0.3 // midpoint close to an end
	          || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) { // angular distance
	        resampleLineTo(x0, y0, lambda0, a0, b0, c0, x2, y2, lambda2, a /= m, b /= m, c, depth, stream);
	        stream.point(x2, y2);
	        resampleLineTo(x2, y2, lambda2, a, b, c, x1, y1, lambda1, a1, b1, c1, depth, stream);
	      }
	    }
	  }
	  return function(stream) {
	    var lambda00, x00, y00, a00, b00, c00, // first point
	        lambda0, x0, y0, a0, b0, c0; // previous point

	    var resampleStream = {
	      point: point,
	      lineStart: lineStart,
	      lineEnd: lineEnd,
	      polygonStart: function() { stream.polygonStart(); resampleStream.lineStart = ringStart; },
	      polygonEnd: function() { stream.polygonEnd(); resampleStream.lineStart = lineStart; }
	    };

	    function point(x, y) {
	      x = project(x, y);
	      stream.point(x[0], x[1]);
	    }

	    function lineStart() {
	      x0 = NaN;
	      resampleStream.point = linePoint;
	      stream.lineStart();
	    }

	    function linePoint(lambda, phi) {
	      var c = cartesian([lambda, phi]), p = project(lambda, phi);
	      resampleLineTo(x0, y0, lambda0, a0, b0, c0, x0 = p[0], y0 = p[1], lambda0 = lambda, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);
	      stream.point(x0, y0);
	    }

	    function lineEnd() {
	      resampleStream.point = point;
	      stream.lineEnd();
	    }

	    function ringStart() {
	      lineStart();
	      resampleStream.point = ringPoint;
	      resampleStream.lineEnd = ringEnd;
	    }

	    function ringPoint(lambda, phi) {
	      linePoint(lambda00 = lambda, phi), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;
	      resampleStream.point = linePoint;
	    }

	    function ringEnd() {
	      resampleLineTo(x0, y0, lambda0, a0, b0, c0, x00, y00, lambda00, a00, b00, c00, maxDepth, stream);
	      resampleStream.lineEnd = lineEnd;
	      lineEnd();
	    }

	    return resampleStream;
	  };
	}

	var transformRadians = transformer({
	  point: function(x, y) {
	    this.stream.point(x * radians, y * radians);
	  }
	});

	function projection(project) {
	  return projectionMutator(function() { return project; })();
	}

	function projectionMutator(projectAt) {
	  var project,
	      k = 150, // scale
	      x = 480, y = 250, // translate
	      dx, dy, lambda = 0, phi = 0, // center
	      deltaLambda = 0, deltaPhi = 0, deltaGamma = 0, rotate, projectRotate, // rotate
	      theta = null, preclip = clipAntimeridian, // clip angle
	      x0 = null, y0, x1, y1, postclip = identity$4, // clip extent
	      delta2 = 0.5, projectResample = resample(projectTransform, delta2), // precision
	      cache,
	      cacheStream;

	  function projection(point) {
	    point = projectRotate(point[0] * radians, point[1] * radians);
	    return [point[0] * k + dx, dy - point[1] * k];
	  }

	  function invert(point) {
	    point = projectRotate.invert((point[0] - dx) / k, (dy - point[1]) / k);
	    return point && [point[0] * degrees$1, point[1] * degrees$1];
	  }

	  function projectTransform(x, y) {
	    return x = project(x, y), [x[0] * k + dx, dy - x[1] * k];
	  }

	  projection.stream = function(stream) {
	    return cache && cacheStream === stream ? cache : cache = transformRadians(preclip(rotate, projectResample(postclip(cacheStream = stream))));
	  };

	  projection.clipAngle = function(_) {
	    return arguments.length ? (preclip = +_ ? clipCircle(theta = _ * radians, 6 * radians) : (theta = null, clipAntimeridian), reset()) : theta * degrees$1;
	  };

	  projection.clipExtent = function(_) {
	    return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, identity$4) : clipExtent(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];
	  };

	  projection.scale = function(_) {
	    return arguments.length ? (k = +_, recenter()) : k;
	  };

	  projection.translate = function(_) {
	    return arguments.length ? (x = +_[0], y = +_[1], recenter()) : [x, y];
	  };

	  projection.center = function(_) {
	    return arguments.length ? (lambda = _[0] % 360 * radians, phi = _[1] % 360 * radians, recenter()) : [lambda * degrees$1, phi * degrees$1];
	  };

	  projection.rotate = function(_) {
	    return arguments.length ? (deltaLambda = _[0] % 360 * radians, deltaPhi = _[1] % 360 * radians, deltaGamma = _.length > 2 ? _[2] % 360 * radians : 0, recenter()) : [deltaLambda * degrees$1, deltaPhi * degrees$1, deltaGamma * degrees$1];
	  };

	  projection.precision = function(_) {
	    return arguments.length ? (projectResample = resample(projectTransform, delta2 = _ * _), reset()) : sqrt(delta2);
	  };

	  projection.fitExtent = function(extent, object) {
	    return fitExtent(projection, extent, object);
	  };

	  projection.fitSize = function(size, object) {
	    return fitSize(projection, size, object);
	  };

	  function recenter() {
	    projectRotate = compose(rotate = rotateRadians(deltaLambda, deltaPhi, deltaGamma), project);
	    var center = project(lambda, phi);
	    dx = x - center[0] * k;
	    dy = y + center[1] * k;
	    return reset();
	  }

	  function reset() {
	    cache = cacheStream = null;
	    return projection;
	  }

	  return function() {
	    project = projectAt.apply(this, arguments);
	    projection.invert = project.invert && invert;
	    return recenter();
	  };
	}

	function conicProjection(projectAt) {
	  var phi0 = 0,
	      phi1 = pi$3 / 3,
	      m = projectionMutator(projectAt),
	      p = m(phi0, phi1);

	  p.parallels = function(_) {
	    return arguments.length ? m(phi0 = _[0] * radians, phi1 = _[1] * radians) : [phi0 * degrees$1, phi1 * degrees$1];
	  };

	  return p;
	}

	function cylindricalEqualAreaRaw(phi0) {
	  var cosPhi0 = cos$1(phi0);

	  function forward(lambda, phi) {
	    return [lambda * cosPhi0, sin$1(phi) / cosPhi0];
	  }

	  forward.invert = function(x, y) {
	    return [x / cosPhi0, asin(y * cosPhi0)];
	  };

	  return forward;
	}

	function conicEqualAreaRaw(y0, y1) {
	  var sy0 = sin$1(y0), n = (sy0 + sin$1(y1)) / 2;

	  // Are the parallels symmetrical around the Equator?
	  if (abs(n) < epsilon$2) return cylindricalEqualAreaRaw(y0);

	  var c = 1 + sy0 * (2 * n - sy0), r0 = sqrt(c) / n;

	  function project(x, y) {
	    var r = sqrt(c - 2 * n * sin$1(y)) / n;
	    return [r * sin$1(x *= n), r0 - r * cos$1(x)];
	  }

	  project.invert = function(x, y) {
	    var r0y = r0 - y;
	    return [atan2(x, abs(r0y)) / n * sign(r0y), asin((c - (x * x + r0y * r0y) * n * n) / (2 * n))];
	  };

	  return project;
	}

	var conicEqualArea = function() {
	  return conicProjection(conicEqualAreaRaw)
	      .scale(155.424)
	      .center([0, 33.6442]);
	};

	var albers = function() {
	  return conicEqualArea()
	      .parallels([29.5, 45.5])
	      .scale(1070)
	      .translate([480, 250])
	      .rotate([96, 0])
	      .center([-0.6, 38.7]);
	};

	// The projections must have mutually exclusive clip regions on the sphere,
	// as this will avoid emitting interleaving lines and polygons.
	function multiplex(streams) {
	  var n = streams.length;
	  return {
	    point: function(x, y) { var i = -1; while (++i < n) streams[i].point(x, y); },
	    sphere: function() { var i = -1; while (++i < n) streams[i].sphere(); },
	    lineStart: function() { var i = -1; while (++i < n) streams[i].lineStart(); },
	    lineEnd: function() { var i = -1; while (++i < n) streams[i].lineEnd(); },
	    polygonStart: function() { var i = -1; while (++i < n) streams[i].polygonStart(); },
	    polygonEnd: function() { var i = -1; while (++i < n) streams[i].polygonEnd(); }
	  };
	}

	// A composite projection for the United States, configured by default for
	// 960×500. The projection also works quite well at 960×600 if you change the
	// scale to 1285 and adjust the translate accordingly. The set of standard
	// parallels for each region comes from USGS, which is published here:
	// http://egsc.usgs.gov/isb/pubs/MapProjections/projections.html#albers
	var albersUsa = function() {
	  var cache,
	      cacheStream,
	      lower48 = albers(), lower48Point,
	      alaska = conicEqualArea().rotate([154, 0]).center([-2, 58.5]).parallels([55, 65]), alaskaPoint, // EPSG:3338
	      hawaii = conicEqualArea().rotate([157, 0]).center([-3, 19.9]).parallels([8, 18]), hawaiiPoint, // ESRI:102007
	      point, pointStream = {point: function(x, y) { point = [x, y]; }};

	  function albersUsa(coordinates) {
	    var x = coordinates[0], y = coordinates[1];
	    return point = null,
	        (lower48Point.point(x, y), point)
	        || (alaskaPoint.point(x, y), point)
	        || (hawaiiPoint.point(x, y), point);
	  }

	  albersUsa.invert = function(coordinates) {
	    var k = lower48.scale(),
	        t = lower48.translate(),
	        x = (coordinates[0] - t[0]) / k,
	        y = (coordinates[1] - t[1]) / k;
	    return (y >= 0.120 && y < 0.234 && x >= -0.425 && x < -0.214 ? alaska
	        : y >= 0.166 && y < 0.234 && x >= -0.214 && x < -0.115 ? hawaii
	        : lower48).invert(coordinates);
	  };

	  albersUsa.stream = function(stream) {
	    return cache && cacheStream === stream ? cache : cache = multiplex([lower48.stream(cacheStream = stream), alaska.stream(stream), hawaii.stream(stream)]);
	  };

	  albersUsa.precision = function(_) {
	    if (!arguments.length) return lower48.precision();
	    lower48.precision(_), alaska.precision(_), hawaii.precision(_);
	    return reset();
	  };

	  albersUsa.scale = function(_) {
	    if (!arguments.length) return lower48.scale();
	    lower48.scale(_), alaska.scale(_ * 0.35), hawaii.scale(_);
	    return albersUsa.translate(lower48.translate());
	  };

	  albersUsa.translate = function(_) {
	    if (!arguments.length) return lower48.translate();
	    var k = lower48.scale(), x = +_[0], y = +_[1];

	    lower48Point = lower48
	        .translate(_)
	        .clipExtent([[x - 0.455 * k, y - 0.238 * k], [x + 0.455 * k, y + 0.238 * k]])
	        .stream(pointStream);

	    alaskaPoint = alaska
	        .translate([x - 0.307 * k, y + 0.201 * k])
	        .clipExtent([[x - 0.425 * k + epsilon$2, y + 0.120 * k + epsilon$2], [x - 0.214 * k - epsilon$2, y + 0.234 * k - epsilon$2]])
	        .stream(pointStream);

	    hawaiiPoint = hawaii
	        .translate([x - 0.205 * k, y + 0.212 * k])
	        .clipExtent([[x - 0.214 * k + epsilon$2, y + 0.166 * k + epsilon$2], [x - 0.115 * k - epsilon$2, y + 0.234 * k - epsilon$2]])
	        .stream(pointStream);

	    return reset();
	  };

	  albersUsa.fitExtent = function(extent, object) {
	    return fitExtent(albersUsa, extent, object);
	  };

	  albersUsa.fitSize = function(size, object) {
	    return fitSize(albersUsa, size, object);
	  };

	  function reset() {
	    cache = cacheStream = null;
	    return albersUsa;
	  }

	  return albersUsa.scale(1070);
	};

	function azimuthalRaw(scale) {
	  return function(x, y) {
	    var cx = cos$1(x),
	        cy = cos$1(y),
	        k = scale(cx * cy);
	    return [
	      k * cy * sin$1(x),
	      k * sin$1(y)
	    ];
	  }
	}

	function azimuthalInvert(angle) {
	  return function(x, y) {
	    var z = sqrt(x * x + y * y),
	        c = angle(z),
	        sc = sin$1(c),
	        cc = cos$1(c);
	    return [
	      atan2(x * sc, z * cc),
	      asin(z && y * sc / z)
	    ];
	  }
	}

	var azimuthalEqualAreaRaw = azimuthalRaw(function(cxcy) {
	  return sqrt(2 / (1 + cxcy));
	});

	azimuthalEqualAreaRaw.invert = azimuthalInvert(function(z) {
	  return 2 * asin(z / 2);
	});

	var azimuthalEqualArea = function() {
	  return projection(azimuthalEqualAreaRaw)
	      .scale(124.75)
	      .clipAngle(180 - 1e-3);
	};

	var azimuthalEquidistantRaw = azimuthalRaw(function(c) {
	  return (c = acos(c)) && c / sin$1(c);
	});

	azimuthalEquidistantRaw.invert = azimuthalInvert(function(z) {
	  return z;
	});

	var azimuthalEquidistant = function() {
	  return projection(azimuthalEquidistantRaw)
	      .scale(79.4188)
	      .clipAngle(180 - 1e-3);
	};

	function mercatorRaw(lambda, phi) {
	  return [lambda, log(tan((halfPi$2 + phi) / 2))];
	}

	mercatorRaw.invert = function(x, y) {
	  return [x, 2 * atan(exp(y)) - halfPi$2];
	};

	var mercator = function() {
	  return mercatorProjection(mercatorRaw)
	      .scale(961 / tau$3);
	};

	function mercatorProjection(project) {
	  var m = projection(project),
	      center = m.center,
	      scale = m.scale,
	      translate = m.translate,
	      clipExtent = m.clipExtent,
	      x0 = null, y0, x1, y1; // clip extent

	  m.scale = function(_) {
	    return arguments.length ? (scale(_), reclip()) : scale();
	  };

	  m.translate = function(_) {
	    return arguments.length ? (translate(_), reclip()) : translate();
	  };

	  m.center = function(_) {
	    return arguments.length ? (center(_), reclip()) : center();
	  };

	  m.clipExtent = function(_) {
	    return arguments.length ? ((_ == null ? x0 = y0 = x1 = y1 = null : (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1])), reclip()) : x0 == null ? null : [[x0, y0], [x1, y1]];
	  };

	  function reclip() {
	    var k = pi$3 * scale(),
	        t = m(rotation(m.rotate()).invert([0, 0]));
	    return clipExtent(x0 == null
	        ? [[t[0] - k, t[1] - k], [t[0] + k, t[1] + k]] : project === mercatorRaw
	        ? [[Math.max(t[0] - k, x0), y0], [Math.min(t[0] + k, x1), y1]]
	        : [[x0, Math.max(t[1] - k, y0)], [x1, Math.min(t[1] + k, y1)]]);
	  }

	  return reclip();
	}

	function tany(y) {
	  return tan((halfPi$2 + y) / 2);
	}

	function conicConformalRaw(y0, y1) {
	  var cy0 = cos$1(y0),
	      n = y0 === y1 ? sin$1(y0) : log(cy0 / cos$1(y1)) / log(tany(y1) / tany(y0)),
	      f = cy0 * pow(tany(y0), n) / n;

	  if (!n) return mercatorRaw;

	  function project(x, y) {
	    if (f > 0) { if (y < -halfPi$2 + epsilon$2) y = -halfPi$2 + epsilon$2; }
	    else { if (y > halfPi$2 - epsilon$2) y = halfPi$2 - epsilon$2; }
	    var r = f / pow(tany(y), n);
	    return [r * sin$1(n * x), f - r * cos$1(n * x)];
	  }

	  project.invert = function(x, y) {
	    var fy = f - y, r = sign(n) * sqrt(x * x + fy * fy);
	    return [atan2(x, abs(fy)) / n * sign(fy), 2 * atan(pow(f / r, 1 / n)) - halfPi$2];
	  };

	  return project;
	}

	var conicConformal = function() {
	  return conicProjection(conicConformalRaw)
	      .scale(109.5)
	      .parallels([30, 30]);
	};

	function equirectangularRaw(lambda, phi) {
	  return [lambda, phi];
	}

	equirectangularRaw.invert = equirectangularRaw;

	var equirectangular = function() {
	  return projection(equirectangularRaw)
	      .scale(152.63);
	};

	function conicEquidistantRaw(y0, y1) {
	  var cy0 = cos$1(y0),
	      n = y0 === y1 ? sin$1(y0) : (cy0 - cos$1(y1)) / (y1 - y0),
	      g = cy0 / n + y0;

	  if (abs(n) < epsilon$2) return equirectangularRaw;

	  function project(x, y) {
	    var gy = g - y, nx = n * x;
	    return [gy * sin$1(nx), g - gy * cos$1(nx)];
	  }

	  project.invert = function(x, y) {
	    var gy = g - y;
	    return [atan2(x, abs(gy)) / n * sign(gy), g - sign(n) * sqrt(x * x + gy * gy)];
	  };

	  return project;
	}

	var conicEquidistant = function() {
	  return conicProjection(conicEquidistantRaw)
	      .scale(131.154)
	      .center([0, 13.9389]);
	};

	function gnomonicRaw(x, y) {
	  var cy = cos$1(y), k = cos$1(x) * cy;
	  return [cy * sin$1(x) / k, sin$1(y) / k];
	}

	gnomonicRaw.invert = azimuthalInvert(atan);

	var gnomonic = function() {
	  return projection(gnomonicRaw)
	      .scale(144.049)
	      .clipAngle(60);
	};

	function scaleTranslate(kx, ky, tx, ty) {
	  return kx === 1 && ky === 1 && tx === 0 && ty === 0 ? identity$4 : transformer({
	    point: function(x, y) {
	      this.stream.point(x * kx + tx, y * ky + ty);
	    }
	  });
	}

	var identity$5 = function() {
	  var k = 1, tx = 0, ty = 0, sx = 1, sy = 1, transform$$1 = identity$4, // scale, translate and reflect
	      x0 = null, y0, x1, y1, clip = identity$4, // clip extent
	      cache,
	      cacheStream,
	      projection;

	  function reset() {
	    cache = cacheStream = null;
	    return projection;
	  }

	  return projection = {
	    stream: function(stream) {
	      return cache && cacheStream === stream ? cache : cache = transform$$1(clip(cacheStream = stream));
	    },
	    clipExtent: function(_) {
	      return arguments.length ? (clip = _ == null ? (x0 = y0 = x1 = y1 = null, identity$4) : clipExtent(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];
	    },
	    scale: function(_) {
	      return arguments.length ? (transform$$1 = scaleTranslate((k = +_) * sx, k * sy, tx, ty), reset()) : k;
	    },
	    translate: function(_) {
	      return arguments.length ? (transform$$1 = scaleTranslate(k * sx, k * sy, tx = +_[0], ty = +_[1]), reset()) : [tx, ty];
	    },
	    reflectX: function(_) {
	      return arguments.length ? (transform$$1 = scaleTranslate(k * (sx = _ ? -1 : 1), k * sy, tx, ty), reset()) : sx < 0;
	    },
	    reflectY: function(_) {
	      return arguments.length ? (transform$$1 = scaleTranslate(k * sx, k * (sy = _ ? -1 : 1), tx, ty), reset()) : sy < 0;
	    },
	    fitExtent: function(extent, object) {
	      return fitExtent(projection, extent, object);
	    },
	    fitSize: function(size, object) {
	      return fitSize(projection, size, object);
	    }
	  };
	};

	function orthographicRaw(x, y) {
	  return [cos$1(y) * sin$1(x), sin$1(y)];
	}

	orthographicRaw.invert = azimuthalInvert(asin);

	var orthographic = function() {
	  return projection(orthographicRaw)
	      .scale(249.5)
	      .clipAngle(90 + epsilon$2);
	};

	function stereographicRaw(x, y) {
	  var cy = cos$1(y), k = 1 + cos$1(x) * cy;
	  return [cy * sin$1(x) / k, sin$1(y) / k];
	}

	stereographicRaw.invert = azimuthalInvert(function(z) {
	  return 2 * atan(z);
	});

	var stereographic = function() {
	  return projection(stereographicRaw)
	      .scale(250)
	      .clipAngle(142);
	};

	function transverseMercatorRaw(lambda, phi) {
	  return [log(tan((halfPi$2 + phi) / 2)), -lambda];
	}

	transverseMercatorRaw.invert = function(x, y) {
	  return [-y, 2 * atan(exp(x)) - halfPi$2];
	};

	var transverseMercator = function() {
	  var m = mercatorProjection(transverseMercatorRaw),
	      center = m.center,
	      rotate = m.rotate;

	  m.center = function(_) {
	    return arguments.length ? center([-_[1], _[0]]) : (_ = center(), [_[1], -_[0]]);
	  };

	  m.rotate = function(_) {
	    return arguments.length ? rotate([_[0], _[1], _.length > 2 ? _[2] + 90 : 90]) : (_ = rotate(), [_[0], _[1], _[2] - 90]);
	  };

	  return rotate([0, 0, 90])
	      .scale(159.155);
	};

	function defaultSeparation(a, b) {
	  return a.parent === b.parent ? 1 : 2;
	}

	function meanX(children) {
	  return children.reduce(meanXReduce, 0) / children.length;
	}

	function meanXReduce(x, c) {
	  return x + c.x;
	}

	function maxY(children) {
	  return 1 + children.reduce(maxYReduce, 0);
	}

	function maxYReduce(y, c) {
	  return Math.max(y, c.y);
	}

	function leafLeft(node) {
	  var children;
	  while (children = node.children) node = children[0];
	  return node;
	}

	function leafRight(node) {
	  var children;
	  while (children = node.children) node = children[children.length - 1];
	  return node;
	}

	var cluster = function() {
	  var separation = defaultSeparation,
	      dx = 1,
	      dy = 1,
	      nodeSize = false;

	  function cluster(root) {
	    var previousNode,
	        x = 0;

	    // First walk, computing the initial x & y values.
	    root.eachAfter(function(node) {
	      var children = node.children;
	      if (children) {
	        node.x = meanX(children);
	        node.y = maxY(children);
	      } else {
	        node.x = previousNode ? x += separation(node, previousNode) : 0;
	        node.y = 0;
	        previousNode = node;
	      }
	    });

	    var left = leafLeft(root),
	        right = leafRight(root),
	        x0 = left.x - separation(left, right) / 2,
	        x1 = right.x + separation(right, left) / 2;

	    // Second walk, normalizing x & y to the desired size.
	    return root.eachAfter(nodeSize ? function(node) {
	      node.x = (node.x - root.x) * dx;
	      node.y = (root.y - node.y) * dy;
	    } : function(node) {
	      node.x = (node.x - x0) / (x1 - x0) * dx;
	      node.y = (1 - (root.y ? node.y / root.y : 1)) * dy;
	    });
	  }

	  cluster.separation = function(x) {
	    return arguments.length ? (separation = x, cluster) : separation;
	  };

	  cluster.size = function(x) {
	    return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], cluster) : (nodeSize ? null : [dx, dy]);
	  };

	  cluster.nodeSize = function(x) {
	    return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], cluster) : (nodeSize ? [dx, dy] : null);
	  };

	  return cluster;
	};

	function count(node) {
	  var sum = 0,
	      children = node.children,
	      i = children && children.length;
	  if (!i) sum = 1;
	  else while (--i >= 0) sum += children[i].value;
	  node.value = sum;
	}

	var node_count = function() {
	  return this.eachAfter(count);
	};

	var node_each = function(callback) {
	  var node = this, current, next = [node], children, i, n;
	  do {
	    current = next.reverse(), next = [];
	    while (node = current.pop()) {
	      callback(node), children = node.children;
	      if (children) for (i = 0, n = children.length; i < n; ++i) {
	        next.push(children[i]);
	      }
	    }
	  } while (next.length);
	  return this;
	};

	var node_eachBefore = function(callback) {
	  var node = this, nodes = [node], children, i;
	  while (node = nodes.pop()) {
	    callback(node), children = node.children;
	    if (children) for (i = children.length - 1; i >= 0; --i) {
	      nodes.push(children[i]);
	    }
	  }
	  return this;
	};

	var node_eachAfter = function(callback) {
	  var node = this, nodes = [node], next = [], children, i, n;
	  while (node = nodes.pop()) {
	    next.push(node), children = node.children;
	    if (children) for (i = 0, n = children.length; i < n; ++i) {
	      nodes.push(children[i]);
	    }
	  }
	  while (node = next.pop()) {
	    callback(node);
	  }
	  return this;
	};

	var node_sum = function(value) {
	  return this.eachAfter(function(node) {
	    var sum = +value(node.data) || 0,
	        children = node.children,
	        i = children && children.length;
	    while (--i >= 0) sum += children[i].value;
	    node.value = sum;
	  });
	};

	var node_sort = function(compare) {
	  return this.eachBefore(function(node) {
	    if (node.children) {
	      node.children.sort(compare);
	    }
	  });
	};

	var node_path = function(end) {
	  var start = this,
	      ancestor = leastCommonAncestor(start, end),
	      nodes = [start];
	  while (start !== ancestor) {
	    start = start.parent;
	    nodes.push(start);
	  }
	  var k = nodes.length;
	  while (end !== ancestor) {
	    nodes.splice(k, 0, end);
	    end = end.parent;
	  }
	  return nodes;
	};

	function leastCommonAncestor(a, b) {
	  if (a === b) return a;
	  var aNodes = a.ancestors(),
	      bNodes = b.ancestors(),
	      c = null;
	  a = aNodes.pop();
	  b = bNodes.pop();
	  while (a === b) {
	    c = a;
	    a = aNodes.pop();
	    b = bNodes.pop();
	  }
	  return c;
	}

	var node_ancestors = function() {
	  var node = this, nodes = [node];
	  while (node = node.parent) {
	    nodes.push(node);
	  }
	  return nodes;
	};

	var node_descendants = function() {
	  var nodes = [];
	  this.each(function(node) {
	    nodes.push(node);
	  });
	  return nodes;
	};

	var node_leaves = function() {
	  var leaves = [];
	  this.eachBefore(function(node) {
	    if (!node.children) {
	      leaves.push(node);
	    }
	  });
	  return leaves;
	};

	var node_links = function() {
	  var root = this, links = [];
	  root.each(function(node) {
	    if (node !== root) { // Don’t include the root’s parent, if any.
	      links.push({source: node.parent, target: node});
	    }
	  });
	  return links;
	};

	function hierarchy(data, children) {
	  var root = new Node(data),
	      valued = +data.value && (root.value = data.value),
	      node,
	      nodes = [root],
	      child,
	      childs,
	      i,
	      n;

	  if (children == null) children = defaultChildren;

	  while (node = nodes.pop()) {
	    if (valued) node.value = +node.data.value;
	    if ((childs = children(node.data)) && (n = childs.length)) {
	      node.children = new Array(n);
	      for (i = n - 1; i >= 0; --i) {
	        nodes.push(child = node.children[i] = new Node(childs[i]));
	        child.parent = node;
	        child.depth = node.depth + 1;
	      }
	    }
	  }

	  return root.eachBefore(computeHeight);
	}

	function node_copy() {
	  return hierarchy(this).eachBefore(copyData);
	}

	function defaultChildren(d) {
	  return d.children;
	}

	function copyData(node) {
	  node.data = node.data.data;
	}

	function computeHeight(node) {
	  var height = 0;
	  do node.height = height;
	  while ((node = node.parent) && (node.height < ++height));
	}

	function Node(data) {
	  this.data = data;
	  this.depth =
	  this.height = 0;
	  this.parent = null;
	}

	Node.prototype = hierarchy.prototype = {
	  constructor: Node,
	  count: node_count,
	  each: node_each,
	  eachAfter: node_eachAfter,
	  eachBefore: node_eachBefore,
	  sum: node_sum,
	  sort: node_sort,
	  path: node_path,
	  ancestors: node_ancestors,
	  descendants: node_descendants,
	  leaves: node_leaves,
	  links: node_links,
	  copy: node_copy
	};

	var slice$3 = Array.prototype.slice;

	function shuffle$1(array) {
	  var m = array.length,
	      t,
	      i;

	  while (m) {
	    i = Math.random() * m-- | 0;
	    t = array[m];
	    array[m] = array[i];
	    array[i] = t;
	  }

	  return array;
	}

	var enclose = function(circles) {
	  var i = 0, n = (circles = shuffle$1(slice$3.call(circles))).length, B = [], p, e;

	  while (i < n) {
	    p = circles[i];
	    if (e && enclosesWeak(e, p)) ++i;
	    else e = encloseBasis(B = extendBasis(B, p)), i = 0;
	  }

	  return e;
	};

	function extendBasis(B, p) {
	  var i, j;

	  if (enclosesWeakAll(p, B)) return [p];

	  // If we get here then B must have at least one element.
	  for (i = 0; i < B.length; ++i) {
	    if (enclosesNot(p, B[i])
	        && enclosesWeakAll(encloseBasis2(B[i], p), B)) {
	      return [B[i], p];
	    }
	  }

	  // If we get here then B must have at least two elements.
	  for (i = 0; i < B.length - 1; ++i) {
	    for (j = i + 1; j < B.length; ++j) {
	      if (enclosesNot(encloseBasis2(B[i], B[j]), p)
	          && enclosesNot(encloseBasis2(B[i], p), B[j])
	          && enclosesNot(encloseBasis2(B[j], p), B[i])
	          && enclosesWeakAll(encloseBasis3(B[i], B[j], p), B)) {
	        return [B[i], B[j], p];
	      }
	    }
	  }

	  // If we get here then something is very wrong.
	  throw new Error;
	}

	function enclosesNot(a, b) {
	  var dr = a.r - b.r, dx = b.x - a.x, dy = b.y - a.y;
	  return dr < 0 || dr * dr < dx * dx + dy * dy;
	}

	function enclosesWeak(a, b) {
	  var dr = a.r - b.r + 1e-6, dx = b.x - a.x, dy = b.y - a.y;
	  return dr > 0 && dr * dr > dx * dx + dy * dy;
	}

	function enclosesWeakAll(a, B) {
	  for (var i = 0; i < B.length; ++i) {
	    if (!enclosesWeak(a, B[i])) {
	      return false;
	    }
	  }
	  return true;
	}

	function encloseBasis(B) {
	  switch (B.length) {
	    case 1: return encloseBasis1(B[0]);
	    case 2: return encloseBasis2(B[0], B[1]);
	    case 3: return encloseBasis3(B[0], B[1], B[2]);
	  }
	}

	function encloseBasis1(a) {
	  return {
	    x: a.x,
	    y: a.y,
	    r: a.r
	  };
	}

	function encloseBasis2(a, b) {
	  var x1 = a.x, y1 = a.y, r1 = a.r,
	      x2 = b.x, y2 = b.y, r2 = b.r,
	      x21 = x2 - x1, y21 = y2 - y1, r21 = r2 - r1,
	      l = Math.sqrt(x21 * x21 + y21 * y21);
	  return {
	    x: (x1 + x2 + x21 / l * r21) / 2,
	    y: (y1 + y2 + y21 / l * r21) / 2,
	    r: (l + r1 + r2) / 2
	  };
	}

	function encloseBasis3(a, b, c) {
	  var x1 = a.x, y1 = a.y, r1 = a.r,
	      x2 = b.x, y2 = b.y, r2 = b.r,
	      x3 = c.x, y3 = c.y, r3 = c.r,
	      a2 = x1 - x2,
	      a3 = x1 - x3,
	      b2 = y1 - y2,
	      b3 = y1 - y3,
	      c2 = r2 - r1,
	      c3 = r3 - r1,
	      d1 = x1 * x1 + y1 * y1 - r1 * r1,
	      d2 = d1 - x2 * x2 - y2 * y2 + r2 * r2,
	      d3 = d1 - x3 * x3 - y3 * y3 + r3 * r3,
	      ab = a3 * b2 - a2 * b3,
	      xa = (b2 * d3 - b3 * d2) / (ab * 2) - x1,
	      xb = (b3 * c2 - b2 * c3) / ab,
	      ya = (a3 * d2 - a2 * d3) / (ab * 2) - y1,
	      yb = (a2 * c3 - a3 * c2) / ab,
	      A = xb * xb + yb * yb - 1,
	      B = 2 * (r1 + xa * xb + ya * yb),
	      C = xa * xa + ya * ya - r1 * r1,
	      r = -(A ? (B + Math.sqrt(B * B - 4 * A * C)) / (2 * A) : C / B);
	  return {
	    x: x1 + xa + xb * r,
	    y: y1 + ya + yb * r,
	    r: r
	  };
	}

	function place(a, b, c) {
	  var ax = a.x,
	      ay = a.y,
	      da = b.r + c.r,
	      db = a.r + c.r,
	      dx = b.x - ax,
	      dy = b.y - ay,
	      dc = dx * dx + dy * dy;
	  if (dc) {
	    var x = 0.5 + ((db *= db) - (da *= da)) / (2 * dc),
	        y = Math.sqrt(Math.max(0, 2 * da * (db + dc) - (db -= dc) * db - da * da)) / (2 * dc);
	    c.x = ax + x * dx + y * dy;
	    c.y = ay + x * dy - y * dx;
	  } else {
	    c.x = ax + db;
	    c.y = ay;
	  }
	}

	function intersects(a, b) {
	  var dx = b.x - a.x,
	      dy = b.y - a.y,
	      dr = a.r + b.r;
	  return dr * dr - 1e-6 > dx * dx + dy * dy;
	}

	function score(node) {
	  var a = node._,
	      b = node.next._,
	      ab = a.r + b.r,
	      dx = (a.x * b.r + b.x * a.r) / ab,
	      dy = (a.y * b.r + b.y * a.r) / ab;
	  return dx * dx + dy * dy;
	}

	function Node$1(circle) {
	  this._ = circle;
	  this.next = null;
	  this.previous = null;
	}

	function packEnclose(circles) {
	  if (!(n = circles.length)) return 0;

	  var a, b, c, n, aa, ca, i, j, k, sj, sk;

	  // Place the first circle.
	  a = circles[0], a.x = 0, a.y = 0;
	  if (!(n > 1)) return a.r;

	  // Place the second circle.
	  b = circles[1], a.x = -b.r, b.x = a.r, b.y = 0;
	  if (!(n > 2)) return a.r + b.r;

	  // Place the third circle.
	  place(b, a, c = circles[2]);

	  // Initialize the front-chain using the first three circles a, b and c.
	  a = new Node$1(a), b = new Node$1(b), c = new Node$1(c);
	  a.next = c.previous = b;
	  b.next = a.previous = c;
	  c.next = b.previous = a;

	  // Attempt to place each remaining circle…
	  pack: for (i = 3; i < n; ++i) {
	    place(a._, b._, c = circles[i]), c = new Node$1(c);

	    // Find the closest intersecting circle on the front-chain, if any.
	    // “Closeness” is determined by linear distance along the front-chain.
	    // “Ahead” or “behind” is likewise determined by linear distance.
	    j = b.next, k = a.previous, sj = b._.r, sk = a._.r;
	    do {
	      if (sj <= sk) {
	        if (intersects(j._, c._)) {
	          b = j, a.next = b, b.previous = a, --i;
	          continue pack;
	        }
	        sj += j._.r, j = j.next;
	      } else {
	        if (intersects(k._, c._)) {
	          a = k, a.next = b, b.previous = a, --i;
	          continue pack;
	        }
	        sk += k._.r, k = k.previous;
	      }
	    } while (j !== k.next);

	    // Success! Insert the new circle c between a and b.
	    c.previous = a, c.next = b, a.next = b.previous = b = c;

	    // Compute the new closest circle pair to the centroid.
	    aa = score(a);
	    while ((c = c.next) !== b) {
	      if ((ca = score(c)) < aa) {
	        a = c, aa = ca;
	      }
	    }
	    b = a.next;
	  }

	  // Compute the enclosing circle of the front chain.
	  a = [b._], c = b; while ((c = c.next) !== b) a.push(c._); c = enclose(a);

	  // Translate the circles to put the enclosing circle around the origin.
	  for (i = 0; i < n; ++i) a = circles[i], a.x -= c.x, a.y -= c.y;

	  return c.r;
	}

	var siblings = function(circles) {
	  packEnclose(circles);
	  return circles;
	};

	function optional(f) {
	  return f == null ? null : required(f);
	}

	function required(f) {
	  if (typeof f !== "function") throw new Error;
	  return f;
	}

	function constantZero() {
	  return 0;
	}

	var constant$8 = function(x) {
	  return function() {
	    return x;
	  };
	};

	function defaultRadius$1(d) {
	  return Math.sqrt(d.value);
	}

	var index$2 = function() {
	  var radius = null,
	      dx = 1,
	      dy = 1,
	      padding = constantZero;

	  function pack(root) {
	    root.x = dx / 2, root.y = dy / 2;
	    if (radius) {
	      root.eachBefore(radiusLeaf(radius))
	          .eachAfter(packChildren(padding, 0.5))
	          .eachBefore(translateChild(1));
	    } else {
	      root.eachBefore(radiusLeaf(defaultRadius$1))
	          .eachAfter(packChildren(constantZero, 1))
	          .eachAfter(packChildren(padding, root.r / Math.min(dx, dy)))
	          .eachBefore(translateChild(Math.min(dx, dy) / (2 * root.r)));
	    }
	    return root;
	  }

	  pack.radius = function(x) {
	    return arguments.length ? (radius = optional(x), pack) : radius;
	  };

	  pack.size = function(x) {
	    return arguments.length ? (dx = +x[0], dy = +x[1], pack) : [dx, dy];
	  };

	  pack.padding = function(x) {
	    return arguments.length ? (padding = typeof x === "function" ? x : constant$8(+x), pack) : padding;
	  };

	  return pack;
	};

	function radiusLeaf(radius) {
	  return function(node) {
	    if (!node.children) {
	      node.r = Math.max(0, +radius(node) || 0);
	    }
	  };
	}

	function packChildren(padding, k) {
	  return function(node) {
	    if (children = node.children) {
	      var children,
	          i,
	          n = children.length,
	          r = padding(node) * k || 0,
	          e;

	      if (r) for (i = 0; i < n; ++i) children[i].r += r;
	      e = packEnclose(children);
	      if (r) for (i = 0; i < n; ++i) children[i].r -= r;
	      node.r = e + r;
	    }
	  };
	}

	function translateChild(k) {
	  return function(node) {
	    var parent = node.parent;
	    node.r *= k;
	    if (parent) {
	      node.x = parent.x + k * node.x;
	      node.y = parent.y + k * node.y;
	    }
	  };
	}

	var roundNode = function(node) {
	  node.x0 = Math.round(node.x0);
	  node.y0 = Math.round(node.y0);
	  node.x1 = Math.round(node.x1);
	  node.y1 = Math.round(node.y1);
	};

	var treemapDice = function(parent, x0, y0, x1, y1) {
	  var nodes = parent.children,
	      node,
	      i = -1,
	      n = nodes.length,
	      k = parent.value && (x1 - x0) / parent.value;

	  while (++i < n) {
	    node = nodes[i], node.y0 = y0, node.y1 = y1;
	    node.x0 = x0, node.x1 = x0 += node.value * k;
	  }
	};

	var partition = function() {
	  var dx = 1,
	      dy = 1,
	      padding = 0,
	      round = false;

	  function partition(root) {
	    var n = root.height + 1;
	    root.x0 =
	    root.y0 = padding;
	    root.x1 = dx;
	    root.y1 = dy / n;
	    root.eachBefore(positionNode(dy, n));
	    if (round) root.eachBefore(roundNode);
	    return root;
	  }

	  function positionNode(dy, n) {
	    return function(node) {
	      if (node.children) {
	        treemapDice(node, node.x0, dy * (node.depth + 1) / n, node.x1, dy * (node.depth + 2) / n);
	      }
	      var x0 = node.x0,
	          y0 = node.y0,
	          x1 = node.x1 - padding,
	          y1 = node.y1 - padding;
	      if (x1 < x0) x0 = x1 = (x0 + x1) / 2;
	      if (y1 < y0) y0 = y1 = (y0 + y1) / 2;
	      node.x0 = x0;
	      node.y0 = y0;
	      node.x1 = x1;
	      node.y1 = y1;
	    };
	  }

	  partition.round = function(x) {
	    return arguments.length ? (round = !!x, partition) : round;
	  };

	  partition.size = function(x) {
	    return arguments.length ? (dx = +x[0], dy = +x[1], partition) : [dx, dy];
	  };

	  partition.padding = function(x) {
	    return arguments.length ? (padding = +x, partition) : padding;
	  };

	  return partition;
	};

	var keyPrefix$1 = "$";
	var preroot = {depth: -1};
	var ambiguous = {};

	function defaultId(d) {
	  return d.id;
	}

	function defaultParentId(d) {
	  return d.parentId;
	}

	var stratify = function() {
	  var id = defaultId,
	      parentId = defaultParentId;

	  function stratify(data) {
	    var d,
	        i,
	        n = data.length,
	        root,
	        parent,
	        node,
	        nodes = new Array(n),
	        nodeId,
	        nodeKey,
	        nodeByKey = {};

	    for (i = 0; i < n; ++i) {
	      d = data[i], node = nodes[i] = new Node(d);
	      if ((nodeId = id(d, i, data)) != null && (nodeId += "")) {
	        nodeKey = keyPrefix$1 + (node.id = nodeId);
	        nodeByKey[nodeKey] = nodeKey in nodeByKey ? ambiguous : node;
	      }
	    }

	    for (i = 0; i < n; ++i) {
	      node = nodes[i], nodeId = parentId(data[i], i, data);
	      if (nodeId == null || !(nodeId += "")) {
	        if (root) throw new Error("multiple roots");
	        root = node;
	      } else {
	        parent = nodeByKey[keyPrefix$1 + nodeId];
	        if (!parent) throw new Error("missing: " + nodeId);
	        if (parent === ambiguous) throw new Error("ambiguous: " + nodeId);
	        if (parent.children) parent.children.push(node);
	        else parent.children = [node];
	        node.parent = parent;
	      }
	    }

	    if (!root) throw new Error("no root");
	    root.parent = preroot;
	    root.eachBefore(function(node) { node.depth = node.parent.depth + 1; --n; }).eachBefore(computeHeight);
	    root.parent = null;
	    if (n > 0) throw new Error("cycle");

	    return root;
	  }

	  stratify.id = function(x) {
	    return arguments.length ? (id = required(x), stratify) : id;
	  };

	  stratify.parentId = function(x) {
	    return arguments.length ? (parentId = required(x), stratify) : parentId;
	  };

	  return stratify;
	};

	function defaultSeparation$1(a, b) {
	  return a.parent === b.parent ? 1 : 2;
	}

	// function radialSeparation(a, b) {
	//   return (a.parent === b.parent ? 1 : 2) / a.depth;
	// }

	// This function is used to traverse the left contour of a subtree (or
	// subforest). It returns the successor of v on this contour. This successor is
	// either given by the leftmost child of v or by the thread of v. The function
	// returns null if and only if v is on the highest level of its subtree.
	function nextLeft(v) {
	  var children = v.children;
	  return children ? children[0] : v.t;
	}

	// This function works analogously to nextLeft.
	function nextRight(v) {
	  var children = v.children;
	  return children ? children[children.length - 1] : v.t;
	}

	// Shifts the current subtree rooted at w+. This is done by increasing
	// prelim(w+) and mod(w+) by shift.
	function moveSubtree(wm, wp, shift) {
	  var change = shift / (wp.i - wm.i);
	  wp.c -= change;
	  wp.s += shift;
	  wm.c += change;
	  wp.z += shift;
	  wp.m += shift;
	}

	// All other shifts, applied to the smaller subtrees between w- and w+, are
	// performed by this function. To prepare the shifts, we have to adjust
	// change(w+), shift(w+), and change(w-).
	function executeShifts(v) {
	  var shift = 0,
	      change = 0,
	      children = v.children,
	      i = children.length,
	      w;
	  while (--i >= 0) {
	    w = children[i];
	    w.z += shift;
	    w.m += shift;
	    shift += w.s + (change += w.c);
	  }
	}

	// If vi-’s ancestor is a sibling of v, returns vi-’s ancestor. Otherwise,
	// returns the specified (default) ancestor.
	function nextAncestor(vim, v, ancestor) {
	  return vim.a.parent === v.parent ? vim.a : ancestor;
	}

	function TreeNode(node, i) {
	  this._ = node;
	  this.parent = null;
	  this.children = null;
	  this.A = null; // default ancestor
	  this.a = this; // ancestor
	  this.z = 0; // prelim
	  this.m = 0; // mod
	  this.c = 0; // change
	  this.s = 0; // shift
	  this.t = null; // thread
	  this.i = i; // number
	}

	TreeNode.prototype = Object.create(Node.prototype);

	function treeRoot(root) {
	  var tree = new TreeNode(root, 0),
	      node,
	      nodes = [tree],
	      child,
	      children,
	      i,
	      n;

	  while (node = nodes.pop()) {
	    if (children = node._.children) {
	      node.children = new Array(n = children.length);
	      for (i = n - 1; i >= 0; --i) {
	        nodes.push(child = node.children[i] = new TreeNode(children[i], i));
	        child.parent = node;
	      }
	    }
	  }

	  (tree.parent = new TreeNode(null, 0)).children = [tree];
	  return tree;
	}

	// Node-link tree diagram using the Reingold-Tilford "tidy" algorithm
	var tree = function() {
	  var separation = defaultSeparation$1,
	      dx = 1,
	      dy = 1,
	      nodeSize = null;

	  function tree(root) {
	    var t = treeRoot(root);

	    // Compute the layout using Buchheim et al.’s algorithm.
	    t.eachAfter(firstWalk), t.parent.m = -t.z;
	    t.eachBefore(secondWalk);

	    // If a fixed node size is specified, scale x and y.
	    if (nodeSize) root.eachBefore(sizeNode);

	    // If a fixed tree size is specified, scale x and y based on the extent.
	    // Compute the left-most, right-most, and depth-most nodes for extents.
	    else {
	      var left = root,
	          right = root,
	          bottom = root;
	      root.eachBefore(function(node) {
	        if (node.x < left.x) left = node;
	        if (node.x > right.x) right = node;
	        if (node.depth > bottom.depth) bottom = node;
	      });
	      var s = left === right ? 1 : separation(left, right) / 2,
	          tx = s - left.x,
	          kx = dx / (right.x + s + tx),
	          ky = dy / (bottom.depth || 1);
	      root.eachBefore(function(node) {
	        node.x = (node.x + tx) * kx;
	        node.y = node.depth * ky;
	      });
	    }

	    return root;
	  }

	  // Computes a preliminary x-coordinate for v. Before that, FIRST WALK is
	  // applied recursively to the children of v, as well as the function
	  // APPORTION. After spacing out the children by calling EXECUTE SHIFTS, the
	  // node v is placed to the midpoint of its outermost children.
	  function firstWalk(v) {
	    var children = v.children,
	        siblings = v.parent.children,
	        w = v.i ? siblings[v.i - 1] : null;
	    if (children) {
	      executeShifts(v);
	      var midpoint = (children[0].z + children[children.length - 1].z) / 2;
	      if (w) {
	        v.z = w.z + separation(v._, w._);
	        v.m = v.z - midpoint;
	      } else {
	        v.z = midpoint;
	      }
	    } else if (w) {
	      v.z = w.z + separation(v._, w._);
	    }
	    v.parent.A = apportion(v, w, v.parent.A || siblings[0]);
	  }

	  // Computes all real x-coordinates by summing up the modifiers recursively.
	  function secondWalk(v) {
	    v._.x = v.z + v.parent.m;
	    v.m += v.parent.m;
	  }

	  // The core of the algorithm. Here, a new subtree is combined with the
	  // previous subtrees. Threads are used to traverse the inside and outside
	  // contours of the left and right subtree up to the highest common level. The
	  // vertices used for the traversals are vi+, vi-, vo-, and vo+, where the
	  // superscript o means outside and i means inside, the subscript - means left
	  // subtree and + means right subtree. For summing up the modifiers along the
	  // contour, we use respective variables si+, si-, so-, and so+. Whenever two
	  // nodes of the inside contours conflict, we compute the left one of the
	  // greatest uncommon ancestors using the function ANCESTOR and call MOVE
	  // SUBTREE to shift the subtree and prepare the shifts of smaller subtrees.
	  // Finally, we add a new thread (if necessary).
	  function apportion(v, w, ancestor) {
	    if (w) {
	      var vip = v,
	          vop = v,
	          vim = w,
	          vom = vip.parent.children[0],
	          sip = vip.m,
	          sop = vop.m,
	          sim = vim.m,
	          som = vom.m,
	          shift;
	      while (vim = nextRight(vim), vip = nextLeft(vip), vim && vip) {
	        vom = nextLeft(vom);
	        vop = nextRight(vop);
	        vop.a = v;
	        shift = vim.z + sim - vip.z - sip + separation(vim._, vip._);
	        if (shift > 0) {
	          moveSubtree(nextAncestor(vim, v, ancestor), v, shift);
	          sip += shift;
	          sop += shift;
	        }
	        sim += vim.m;
	        sip += vip.m;
	        som += vom.m;
	        sop += vop.m;
	      }
	      if (vim && !nextRight(vop)) {
	        vop.t = vim;
	        vop.m += sim - sop;
	      }
	      if (vip && !nextLeft(vom)) {
	        vom.t = vip;
	        vom.m += sip - som;
	        ancestor = v;
	      }
	    }
	    return ancestor;
	  }

	  function sizeNode(node) {
	    node.x *= dx;
	    node.y = node.depth * dy;
	  }

	  tree.separation = function(x) {
	    return arguments.length ? (separation = x, tree) : separation;
	  };

	  tree.size = function(x) {
	    return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], tree) : (nodeSize ? null : [dx, dy]);
	  };

	  tree.nodeSize = function(x) {
	    return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], tree) : (nodeSize ? [dx, dy] : null);
	  };

	  return tree;
	};

	var treemapSlice = function(parent, x0, y0, x1, y1) {
	  var nodes = parent.children,
	      node,
	      i = -1,
	      n = nodes.length,
	      k = parent.value && (y1 - y0) / parent.value;

	  while (++i < n) {
	    node = nodes[i], node.x0 = x0, node.x1 = x1;
	    node.y0 = y0, node.y1 = y0 += node.value * k;
	  }
	};

	var phi = (1 + Math.sqrt(5)) / 2;

	function squarifyRatio(ratio, parent, x0, y0, x1, y1) {
	  var rows = [],
	      nodes = parent.children,
	      row,
	      nodeValue,
	      i0 = 0,
	      i1 = 0,
	      n = nodes.length,
	      dx, dy,
	      value = parent.value,
	      sumValue,
	      minValue,
	      maxValue,
	      newRatio,
	      minRatio,
	      alpha,
	      beta;

	  while (i0 < n) {
	    dx = x1 - x0, dy = y1 - y0;

	    // Find the next non-empty node.
	    do sumValue = nodes[i1++].value; while (!sumValue && i1 < n);
	    minValue = maxValue = sumValue;
	    alpha = Math.max(dy / dx, dx / dy) / (value * ratio);
	    beta = sumValue * sumValue * alpha;
	    minRatio = Math.max(maxValue / beta, beta / minValue);

	    // Keep adding nodes while the aspect ratio maintains or improves.
	    for (; i1 < n; ++i1) {
	      sumValue += nodeValue = nodes[i1].value;
	      if (nodeValue < minValue) minValue = nodeValue;
	      if (nodeValue > maxValue) maxValue = nodeValue;
	      beta = sumValue * sumValue * alpha;
	      newRatio = Math.max(maxValue / beta, beta / minValue);
	      if (newRatio > minRatio) { sumValue -= nodeValue; break; }
	      minRatio = newRatio;
	    }

	    // Position and record the row orientation.
	    rows.push(row = {value: sumValue, dice: dx < dy, children: nodes.slice(i0, i1)});
	    if (row.dice) treemapDice(row, x0, y0, x1, value ? y0 += dy * sumValue / value : y1);
	    else treemapSlice(row, x0, y0, value ? x0 += dx * sumValue / value : x1, y1);
	    value -= sumValue, i0 = i1;
	  }

	  return rows;
	}

	var squarify = (function custom(ratio) {

	  function squarify(parent, x0, y0, x1, y1) {
	    squarifyRatio(ratio, parent, x0, y0, x1, y1);
	  }

	  squarify.ratio = function(x) {
	    return custom((x = +x) > 1 ? x : 1);
	  };

	  return squarify;
	})(phi);

	var index$3 = function() {
	  var tile = squarify,
	      round = false,
	      dx = 1,
	      dy = 1,
	      paddingStack = [0],
	      paddingInner = constantZero,
	      paddingTop = constantZero,
	      paddingRight = constantZero,
	      paddingBottom = constantZero,
	      paddingLeft = constantZero;

	  function treemap(root) {
	    root.x0 =
	    root.y0 = 0;
	    root.x1 = dx;
	    root.y1 = dy;
	    root.eachBefore(positionNode);
	    paddingStack = [0];
	    if (round) root.eachBefore(roundNode);
	    return root;
	  }

	  function positionNode(node) {
	    var p = paddingStack[node.depth],
	        x0 = node.x0 + p,
	        y0 = node.y0 + p,
	        x1 = node.x1 - p,
	        y1 = node.y1 - p;
	    if (x1 < x0) x0 = x1 = (x0 + x1) / 2;
	    if (y1 < y0) y0 = y1 = (y0 + y1) / 2;
	    node.x0 = x0;
	    node.y0 = y0;
	    node.x1 = x1;
	    node.y1 = y1;
	    if (node.children) {
	      p = paddingStack[node.depth + 1] = paddingInner(node) / 2;
	      x0 += paddingLeft(node) - p;
	      y0 += paddingTop(node) - p;
	      x1 -= paddingRight(node) - p;
	      y1 -= paddingBottom(node) - p;
	      if (x1 < x0) x0 = x1 = (x0 + x1) / 2;
	      if (y1 < y0) y0 = y1 = (y0 + y1) / 2;
	      tile(node, x0, y0, x1, y1);
	    }
	  }

	  treemap.round = function(x) {
	    return arguments.length ? (round = !!x, treemap) : round;
	  };

	  treemap.size = function(x) {
	    return arguments.length ? (dx = +x[0], dy = +x[1], treemap) : [dx, dy];
	  };

	  treemap.tile = function(x) {
	    return arguments.length ? (tile = required(x), treemap) : tile;
	  };

	  treemap.padding = function(x) {
	    return arguments.length ? treemap.paddingInner(x).paddingOuter(x) : treemap.paddingInner();
	  };

	  treemap.paddingInner = function(x) {
	    return arguments.length ? (paddingInner = typeof x === "function" ? x : constant$8(+x), treemap) : paddingInner;
	  };

	  treemap.paddingOuter = function(x) {
	    return arguments.length ? treemap.paddingTop(x).paddingRight(x).paddingBottom(x).paddingLeft(x) : treemap.paddingTop();
	  };

	  treemap.paddingTop = function(x) {
	    return arguments.length ? (paddingTop = typeof x === "function" ? x : constant$8(+x), treemap) : paddingTop;
	  };

	  treemap.paddingRight = function(x) {
	    return arguments.length ? (paddingRight = typeof x === "function" ? x : constant$8(+x), treemap) : paddingRight;
	  };

	  treemap.paddingBottom = function(x) {
	    return arguments.length ? (paddingBottom = typeof x === "function" ? x : constant$8(+x), treemap) : paddingBottom;
	  };

	  treemap.paddingLeft = function(x) {
	    return arguments.length ? (paddingLeft = typeof x === "function" ? x : constant$8(+x), treemap) : paddingLeft;
	  };

	  return treemap;
	};

	var binary = function(parent, x0, y0, x1, y1) {
	  var nodes = parent.children,
	      i, n = nodes.length,
	      sum, sums = new Array(n + 1);

	  for (sums[0] = sum = i = 0; i < n; ++i) {
	    sums[i + 1] = sum += nodes[i].value;
	  }

	  partition(0, n, parent.value, x0, y0, x1, y1);

	  function partition(i, j, value, x0, y0, x1, y1) {
	    if (i >= j - 1) {
	      var node = nodes[i];
	      node.x0 = x0, node.y0 = y0;
	      node.x1 = x1, node.y1 = y1;
	      return;
	    }

	    var valueOffset = sums[i],
	        valueTarget = (value / 2) + valueOffset,
	        k = i + 1,
	        hi = j - 1;

	    while (k < hi) {
	      var mid = k + hi >>> 1;
	      if (sums[mid] < valueTarget) k = mid + 1;
	      else hi = mid;
	    }

	    if ((valueTarget - sums[k - 1]) < (sums[k] - valueTarget) && i + 1 < k) --k;

	    var valueLeft = sums[k] - valueOffset,
	        valueRight = value - valueLeft;

	    if ((x1 - x0) > (y1 - y0)) {
	      var xk = (x0 * valueRight + x1 * valueLeft) / value;
	      partition(i, k, valueLeft, x0, y0, xk, y1);
	      partition(k, j, valueRight, xk, y0, x1, y1);
	    } else {
	      var yk = (y0 * valueRight + y1 * valueLeft) / value;
	      partition(i, k, valueLeft, x0, y0, x1, yk);
	      partition(k, j, valueRight, x0, yk, x1, y1);
	    }
	  }
	};

	var sliceDice = function(parent, x0, y0, x1, y1) {
	  (parent.depth & 1 ? treemapSlice : treemapDice)(parent, x0, y0, x1, y1);
	};

	var resquarify = (function custom(ratio) {

	  function resquarify(parent, x0, y0, x1, y1) {
	    if ((rows = parent._squarify) && (rows.ratio === ratio)) {
	      var rows,
	          row,
	          nodes,
	          i,
	          j = -1,
	          n,
	          m = rows.length,
	          value = parent.value;

	      while (++j < m) {
	        row = rows[j], nodes = row.children;
	        for (i = row.value = 0, n = nodes.length; i < n; ++i) row.value += nodes[i].value;
	        if (row.dice) treemapDice(row, x0, y0, x1, y0 += (y1 - y0) * row.value / value);
	        else treemapSlice(row, x0, y0, x0 += (x1 - x0) * row.value / value, y1);
	        value -= row.value;
	      }
	    } else {
	      parent._squarify = rows = squarifyRatio(ratio, parent, x0, y0, x1, y1);
	      rows.ratio = ratio;
	    }
	  }

	  resquarify.ratio = function(x) {
	    return custom((x = +x) > 1 ? x : 1);
	  };

	  return resquarify;
	})(phi);

	var area$1 = function(polygon) {
	  var i = -1,
	      n = polygon.length,
	      a,
	      b = polygon[n - 1],
	      area = 0;

	  while (++i < n) {
	    a = b;
	    b = polygon[i];
	    area += a[1] * b[0] - a[0] * b[1];
	  }

	  return area / 2;
	};

	var centroid$1 = function(polygon) {
	  var i = -1,
	      n = polygon.length,
	      x = 0,
	      y = 0,
	      a,
	      b = polygon[n - 1],
	      c,
	      k = 0;

	  while (++i < n) {
	    a = b;
	    b = polygon[i];
	    k += c = a[0] * b[1] - b[0] * a[1];
	    x += (a[0] + b[0]) * c;
	    y += (a[1] + b[1]) * c;
	  }

	  return k *= 3, [x / k, y / k];
	};

	// Returns the 2D cross product of AB and AC vectors, i.e., the z-component of
	// the 3D cross product in a quadrant I Cartesian coordinate system (+x is
	// right, +y is up). Returns a positive value if ABC is counter-clockwise,
	// negative if clockwise, and zero if the points are collinear.
	var cross$1 = function(a, b, c) {
	  return (b[0] - a[0]) * (c[1] - a[1]) - (b[1] - a[1]) * (c[0] - a[0]);
	};

	function lexicographicOrder(a, b) {
	  return a[0] - b[0] || a[1] - b[1];
	}

	// Computes the upper convex hull per the monotone chain algorithm.
	// Assumes points.length >= 3, is sorted by x, unique in y.
	// Returns an array of indices into points in left-to-right order.
	function computeUpperHullIndexes(points) {
	  var n = points.length,
	      indexes = [0, 1],
	      size = 2;

	  for (var i = 2; i < n; ++i) {
	    while (size > 1 && cross$1(points[indexes[size - 2]], points[indexes[size - 1]], points[i]) <= 0) --size;
	    indexes[size++] = i;
	  }

	  return indexes.slice(0, size); // remove popped points
	}

	var hull = function(points) {
	  if ((n = points.length) < 3) return null;

	  var i,
	      n,
	      sortedPoints = new Array(n),
	      flippedPoints = new Array(n);

	  for (i = 0; i < n; ++i) sortedPoints[i] = [+points[i][0], +points[i][1], i];
	  sortedPoints.sort(lexicographicOrder);
	  for (i = 0; i < n; ++i) flippedPoints[i] = [sortedPoints[i][0], -sortedPoints[i][1]];

	  var upperIndexes = computeUpperHullIndexes(sortedPoints),
	      lowerIndexes = computeUpperHullIndexes(flippedPoints);

	  // Construct the hull polygon, removing possible duplicate endpoints.
	  var skipLeft = lowerIndexes[0] === upperIndexes[0],
	      skipRight = lowerIndexes[lowerIndexes.length - 1] === upperIndexes[upperIndexes.length - 1],
	      hull = [];

	  // Add upper hull in right-to-l order.
	  // Then add lower hull in left-to-right order.
	  for (i = upperIndexes.length - 1; i >= 0; --i) hull.push(points[sortedPoints[upperIndexes[i]][2]]);
	  for (i = +skipLeft; i < lowerIndexes.length - skipRight; ++i) hull.push(points[sortedPoints[lowerIndexes[i]][2]]);

	  return hull;
	};

	var contains$1 = function(polygon, point) {
	  var n = polygon.length,
	      p = polygon[n - 1],
	      x = point[0], y = point[1],
	      x0 = p[0], y0 = p[1],
	      x1, y1,
	      inside = false;

	  for (var i = 0; i < n; ++i) {
	    p = polygon[i], x1 = p[0], y1 = p[1];
	    if (((y1 > y) !== (y0 > y)) && (x < (x0 - x1) * (y - y1) / (y0 - y1) + x1)) inside = !inside;
	    x0 = x1, y0 = y1;
	  }

	  return inside;
	};

	var length$2 = function(polygon) {
	  var i = -1,
	      n = polygon.length,
	      b = polygon[n - 1],
	      xa,
	      ya,
	      xb = b[0],
	      yb = b[1],
	      perimeter = 0;

	  while (++i < n) {
	    xa = xb;
	    ya = yb;
	    b = polygon[i];
	    xb = b[0];
	    yb = b[1];
	    xa -= xb;
	    ya -= yb;
	    perimeter += Math.sqrt(xa * xa + ya * ya);
	  }

	  return perimeter;
	};

	var slice$4 = [].slice;

	var noabort = {};

	function Queue(size) {
	  this._size = size;
	  this._call =
	  this._error = null;
	  this._tasks = [];
	  this._data = [];
	  this._waiting =
	  this._active =
	  this._ended =
	  this._start = 0; // inside a synchronous task callback?
	}

	Queue.prototype = queue.prototype = {
	  constructor: Queue,
	  defer: function(callback) {
	    if (typeof callback !== "function") throw new Error("invalid callback");
	    if (this._call) throw new Error("defer after await");
	    if (this._error != null) return this;
	    var t = slice$4.call(arguments, 1);
	    t.push(callback);
	    ++this._waiting, this._tasks.push(t);
	    poke$1(this);
	    return this;
	  },
	  abort: function() {
	    if (this._error == null) abort(this, new Error("abort"));
	    return this;
	  },
	  await: function(callback) {
	    if (typeof callback !== "function") throw new Error("invalid callback");
	    if (this._call) throw new Error("multiple await");
	    this._call = function(error, results) { callback.apply(null, [error].concat(results)); };
	    maybeNotify(this);
	    return this;
	  },
	  awaitAll: function(callback) {
	    if (typeof callback !== "function") throw new Error("invalid callback");
	    if (this._call) throw new Error("multiple await");
	    this._call = callback;
	    maybeNotify(this);
	    return this;
	  }
	};

	function poke$1(q) {
	  if (!q._start) {
	    try { start$1(q); } // let the current task complete
	    catch (e) {
	      if (q._tasks[q._ended + q._active - 1]) abort(q, e); // task errored synchronously
	      else if (!q._data) throw e; // await callback errored synchronously
	    }
	  }
	}

	function start$1(q) {
	  while (q._start = q._waiting && q._active < q._size) {
	    var i = q._ended + q._active,
	        t = q._tasks[i],
	        j = t.length - 1,
	        c = t[j];
	    t[j] = end(q, i);
	    --q._waiting, ++q._active;
	    t = c.apply(null, t);
	    if (!q._tasks[i]) continue; // task finished synchronously
	    q._tasks[i] = t || noabort;
	  }
	}

	function end(q, i) {
	  return function(e, r) {
	    if (!q._tasks[i]) return; // ignore multiple callbacks
	    --q._active, ++q._ended;
	    q._tasks[i] = null;
	    if (q._error != null) return; // ignore secondary errors
	    if (e != null) {
	      abort(q, e);
	    } else {
	      q._data[i] = r;
	      if (q._waiting) poke$1(q);
	      else maybeNotify(q);
	    }
	  };
	}

	function abort(q, e) {
	  var i = q._tasks.length, t;
	  q._error = e; // ignore active callbacks
	  q._data = undefined; // allow gc
	  q._waiting = NaN; // prevent starting

	  while (--i >= 0) {
	    if (t = q._tasks[i]) {
	      q._tasks[i] = null;
	      if (t.abort) {
	        try { t.abort(); }
	        catch (e) { /* ignore */ }
	      }
	    }
	  }

	  q._active = NaN; // allow notification
	  maybeNotify(q);
	}

	function maybeNotify(q) {
	  if (!q._active && q._call) {
	    var d = q._data;
	    q._data = undefined; // allow gc
	    q._call(q._error, d);
	  }
	}

	function queue(concurrency) {
	  if (concurrency == null) concurrency = Infinity;
	  else if (!((concurrency = +concurrency) >= 1)) throw new Error("invalid concurrency");
	  return new Queue(concurrency);
	}

	var defaultSource$1 = function() {
	  return Math.random();
	};

	var uniform = (function sourceRandomUniform(source) {
	  function randomUniform(min, max) {
	    min = min == null ? 0 : +min;
	    max = max == null ? 1 : +max;
	    if (arguments.length === 1) max = min, min = 0;
	    else max -= min;
	    return function() {
	      return source() * max + min;
	    };
	  }

	  randomUniform.source = sourceRandomUniform;

	  return randomUniform;
	})(defaultSource$1);

	var normal = (function sourceRandomNormal(source) {
	  function randomNormal(mu, sigma) {
	    var x, r;
	    mu = mu == null ? 0 : +mu;
	    sigma = sigma == null ? 1 : +sigma;
	    return function() {
	      var y;

	      // If available, use the second previously-generated uniform random.
	      if (x != null) y = x, x = null;

	      // Otherwise, generate a new x and y.
	      else do {
	        x = source() * 2 - 1;
	        y = source() * 2 - 1;
	        r = x * x + y * y;
	      } while (!r || r > 1);

	      return mu + sigma * y * Math.sqrt(-2 * Math.log(r) / r);
	    };
	  }

	  randomNormal.source = sourceRandomNormal;

	  return randomNormal;
	})(defaultSource$1);

	var logNormal = (function sourceRandomLogNormal(source) {
	  function randomLogNormal() {
	    var randomNormal = normal.source(source).apply(this, arguments);
	    return function() {
	      return Math.exp(randomNormal());
	    };
	  }

	  randomLogNormal.source = sourceRandomLogNormal;

	  return randomLogNormal;
	})(defaultSource$1);

	var irwinHall = (function sourceRandomIrwinHall(source) {
	  function randomIrwinHall(n) {
	    return function() {
	      for (var sum = 0, i = 0; i < n; ++i) sum += source();
	      return sum;
	    };
	  }

	  randomIrwinHall.source = sourceRandomIrwinHall;

	  return randomIrwinHall;
	})(defaultSource$1);

	var bates = (function sourceRandomBates(source) {
	  function randomBates(n) {
	    var randomIrwinHall = irwinHall.source(source)(n);
	    return function() {
	      return randomIrwinHall() / n;
	    };
	  }

	  randomBates.source = sourceRandomBates;

	  return randomBates;
	})(defaultSource$1);

	var exponential$1 = (function sourceRandomExponential(source) {
	  function randomExponential(lambda) {
	    return function() {
	      return -Math.log(1 - source()) / lambda;
	    };
	  }

	  randomExponential.source = sourceRandomExponential;

	  return randomExponential;
	})(defaultSource$1);

	var request = function(url, callback) {
	  var request,
	      event = dispatch("beforesend", "progress", "load", "error"),
	      mimeType,
	      headers = map$1(),
	      xhr = new XMLHttpRequest,
	      user = null,
	      password = null,
	      response,
	      responseType,
	      timeout = 0;

	  // If IE does not support CORS, use XDomainRequest.
	  if (typeof XDomainRequest !== "undefined"
	      && !("withCredentials" in xhr)
	      && /^(http(s)?:)?\/\//.test(url)) xhr = new XDomainRequest;

	  "onload" in xhr
	      ? xhr.onload = xhr.onerror = xhr.ontimeout = respond
	      : xhr.onreadystatechange = function(o) { xhr.readyState > 3 && respond(o); };

	  function respond(o) {
	    var status = xhr.status, result;
	    if (!status && hasResponse(xhr)
	        || status >= 200 && status < 300
	        || status === 304) {
	      if (response) {
	        try {
	          result = response.call(request, xhr);
	        } catch (e) {
	          event.call("error", request, e);
	          return;
	        }
	      } else {
	        result = xhr;
	      }
	      event.call("load", request, result);
	    } else {
	      event.call("error", request, o);
	    }
	  }

	  xhr.onprogress = function(e) {
	    event.call("progress", request, e);
	  };

	  request = {
	    header: function(name, value) {
	      name = (name + "").toLowerCase();
	      if (arguments.length < 2) return headers.get(name);
	      if (value == null) headers.remove(name);
	      else headers.set(name, value + "");
	      return request;
	    },

	    // If mimeType is non-null and no Accept header is set, a default is used.
	    mimeType: function(value) {
	      if (!arguments.length) return mimeType;
	      mimeType = value == null ? null : value + "";
	      return request;
	    },

	    // Specifies what type the response value should take;
	    // for instance, arraybuffer, blob, document, or text.
	    responseType: function(value) {
	      if (!arguments.length) return responseType;
	      responseType = value;
	      return request;
	    },

	    timeout: function(value) {
	      if (!arguments.length) return timeout;
	      timeout = +value;
	      return request;
	    },

	    user: function(value) {
	      return arguments.length < 1 ? user : (user = value == null ? null : value + "", request);
	    },

	    password: function(value) {
	      return arguments.length < 1 ? password : (password = value == null ? null : value + "", request);
	    },

	    // Specify how to convert the response content to a specific type;
	    // changes the callback value on "load" events.
	    response: function(value) {
	      response = value;
	      return request;
	    },

	    // Alias for send("GET", …).
	    get: function(data, callback) {
	      return request.send("GET", data, callback);
	    },

	    // Alias for send("POST", …).
	    post: function(data, callback) {
	      return request.send("POST", data, callback);
	    },

	    // If callback is non-null, it will be used for error and load events.
	    send: function(method, data, callback) {
	      xhr.open(method, url, true, user, password);
	      if (mimeType != null && !headers.has("accept")) headers.set("accept", mimeType + ",*/*");
	      if (xhr.setRequestHeader) headers.each(function(value, name) { xhr.setRequestHeader(name, value); });
	      if (mimeType != null && xhr.overrideMimeType) xhr.overrideMimeType(mimeType);
	      if (responseType != null) xhr.responseType = responseType;
	      if (timeout > 0) xhr.timeout = timeout;
	      if (callback == null && typeof data === "function") callback = data, data = null;
	      if (callback != null && callback.length === 1) callback = fixCallback(callback);
	      if (callback != null) request.on("error", callback).on("load", function(xhr) { callback(null, xhr); });
	      event.call("beforesend", request, xhr);
	      xhr.send(data == null ? null : data);
	      return request;
	    },

	    abort: function() {
	      xhr.abort();
	      return request;
	    },

	    on: function() {
	      var value = event.on.apply(event, arguments);
	      return value === event ? request : value;
	    }
	  };

	  if (callback != null) {
	    if (typeof callback !== "function") throw new Error("invalid callback: " + callback);
	    return request.get(callback);
	  }

	  return request;
	};

	function fixCallback(callback) {
	  return function(error, xhr) {
	    callback(error == null ? xhr : null);
	  };
	}

	function hasResponse(xhr) {
	  var type = xhr.responseType;
	  return type && type !== "text"
	      ? xhr.response // null on error
	      : xhr.responseText; // "" on error
	}

	var type$1 = function(defaultMimeType, response) {
	  return function(url, callback) {
	    var r = request(url).mimeType(defaultMimeType).response(response);
	    if (callback != null) {
	      if (typeof callback !== "function") throw new Error("invalid callback: " + callback);
	      return r.get(callback);
	    }
	    return r;
	  };
	};

	var html = type$1("text/html", function(xhr) {
	  return document.createRange().createContextualFragment(xhr.responseText);
	});

	var json = type$1("application/json", function(xhr) {
	  return JSON.parse(xhr.responseText);
	});

	var text = type$1("text/plain", function(xhr) {
	  return xhr.responseText;
	});

	var xml = type$1("application/xml", function(xhr) {
	  var xml = xhr.responseXML;
	  if (!xml) throw new Error("parse error");
	  return xml;
	});

	var dsv$1 = function(defaultMimeType, parse) {
	  return function(url, row, callback) {
	    if (arguments.length < 3) callback = row, row = null;
	    var r = request(url).mimeType(defaultMimeType);
	    r.row = function(_) { return arguments.length ? r.response(responseOf(parse, row = _)) : row; };
	    r.row(row);
	    return callback ? r.get(callback) : r;
	  };
	};

	function responseOf(parse, row) {
	  return function(request$$1) {
	    return parse(request$$1.responseText, row);
	  };
	}

	var csv$1 = dsv$1("text/csv", csvParse);

	var tsv$1 = dsv$1("text/tab-separated-values", tsvParse);

	var array$2 = Array.prototype;

	var map$3 = array$2.map;
	var slice$5 = array$2.slice;

	var implicit = {name: "implicit"};

	function ordinal(range) {
	  var index = map$1(),
	      domain = [],
	      unknown = implicit;

	  range = range == null ? [] : slice$5.call(range);

	  function scale(d) {
	    var key = d + "", i = index.get(key);
	    if (!i) {
	      if (unknown !== implicit) return unknown;
	      index.set(key, i = domain.push(d));
	    }
	    return range[(i - 1) % range.length];
	  }

	  scale.domain = function(_) {
	    if (!arguments.length) return domain.slice();
	    domain = [], index = map$1();
	    var i = -1, n = _.length, d, key;
	    while (++i < n) if (!index.has(key = (d = _[i]) + "")) index.set(key, domain.push(d));
	    return scale;
	  };

	  scale.range = function(_) {
	    return arguments.length ? (range = slice$5.call(_), scale) : range.slice();
	  };

	  scale.unknown = function(_) {
	    return arguments.length ? (unknown = _, scale) : unknown;
	  };

	  scale.copy = function() {
	    return ordinal()
	        .domain(domain)
	        .range(range)
	        .unknown(unknown);
	  };

	  return scale;
	}

	function band() {
	  var scale = ordinal().unknown(undefined),
	      domain = scale.domain,
	      ordinalRange = scale.range,
	      range = [0, 1],
	      step,
	      bandwidth,
	      round = false,
	      paddingInner = 0,
	      paddingOuter = 0,
	      align = 0.5;

	  delete scale.unknown;

	  function rescale() {
	    var n = domain().length,
	        reverse = range[1] < range[0],
	        start = range[reverse - 0],
	        stop = range[1 - reverse];
	    step = (stop - start) / Math.max(1, n - paddingInner + paddingOuter * 2);
	    if (round) step = Math.floor(step);
	    start += (stop - start - step * (n - paddingInner)) * align;
	    bandwidth = step * (1 - paddingInner);
	    if (round) start = Math.round(start), bandwidth = Math.round(bandwidth);
	    var values = sequence(n).map(function(i) { return start + step * i; });
	    return ordinalRange(reverse ? values.reverse() : values);
	  }

	  scale.domain = function(_) {
	    return arguments.length ? (domain(_), rescale()) : domain();
	  };

	  scale.range = function(_) {
	    return arguments.length ? (range = [+_[0], +_[1]], rescale()) : range.slice();
	  };

	  scale.rangeRound = function(_) {
	    return range = [+_[0], +_[1]], round = true, rescale();
	  };

	  scale.bandwidth = function() {
	    return bandwidth;
	  };

	  scale.step = function() {
	    return step;
	  };

	  scale.round = function(_) {
	    return arguments.length ? (round = !!_, rescale()) : round;
	  };

	  scale.padding = function(_) {
	    return arguments.length ? (paddingInner = paddingOuter = Math.max(0, Math.min(1, _)), rescale()) : paddingInner;
	  };

	  scale.paddingInner = function(_) {
	    return arguments.length ? (paddingInner = Math.max(0, Math.min(1, _)), rescale()) : paddingInner;
	  };

	  scale.paddingOuter = function(_) {
	    return arguments.length ? (paddingOuter = Math.max(0, Math.min(1, _)), rescale()) : paddingOuter;
	  };

	  scale.align = function(_) {
	    return arguments.length ? (align = Math.max(0, Math.min(1, _)), rescale()) : align;
	  };

	  scale.copy = function() {
	    return band()
	        .domain(domain())
	        .range(range)
	        .round(round)
	        .paddingInner(paddingInner)
	        .paddingOuter(paddingOuter)
	        .align(align);
	  };

	  return rescale();
	}

	function pointish(scale) {
	  var copy = scale.copy;

	  scale.padding = scale.paddingOuter;
	  delete scale.paddingInner;
	  delete scale.paddingOuter;

	  scale.copy = function() {
	    return pointish(copy());
	  };

	  return scale;
	}

	function point$1() {
	  return pointish(band().paddingInner(1));
	}

	var constant$9 = function(x) {
	  return function() {
	    return x;
	  };
	};

	var number$2 = function(x) {
	  return +x;
	};

	var unit = [0, 1];

	function deinterpolateLinear(a, b) {
	  return (b -= (a = +a))
	      ? function(x) { return (x - a) / b; }
	      : constant$9(b);
	}

	function deinterpolateClamp(deinterpolate) {
	  return function(a, b) {
	    var d = deinterpolate(a = +a, b = +b);
	    return function(x) { return x <= a ? 0 : x >= b ? 1 : d(x); };
	  };
	}

	function reinterpolateClamp(reinterpolate$$1) {
	  return function(a, b) {
	    var r = reinterpolate$$1(a = +a, b = +b);
	    return function(t) { return t <= 0 ? a : t >= 1 ? b : r(t); };
	  };
	}

	function bimap(domain, range, deinterpolate, reinterpolate$$1) {
	  var d0 = domain[0], d1 = domain[1], r0 = range[0], r1 = range[1];
	  if (d1 < d0) d0 = deinterpolate(d1, d0), r0 = reinterpolate$$1(r1, r0);
	  else d0 = deinterpolate(d0, d1), r0 = reinterpolate$$1(r0, r1);
	  return function(x) { return r0(d0(x)); };
	}

	function polymap(domain, range, deinterpolate, reinterpolate$$1) {
	  var j = Math.min(domain.length, range.length) - 1,
	      d = new Array(j),
	      r = new Array(j),
	      i = -1;

	  // Reverse descending domains.
	  if (domain[j] < domain[0]) {
	    domain = domain.slice().reverse();
	    range = range.slice().reverse();
	  }

	  while (++i < j) {
	    d[i] = deinterpolate(domain[i], domain[i + 1]);
	    r[i] = reinterpolate$$1(range[i], range[i + 1]);
	  }

	  return function(x) {
	    var i = bisectRight(domain, x, 1, j) - 1;
	    return r[i](d[i](x));
	  };
	}

	function copy(source, target) {
	  return target
	      .domain(source.domain())
	      .range(source.range())
	      .interpolate(source.interpolate())
	      .clamp(source.clamp());
	}

	// deinterpolate(a, b)(x) takes a domain value x in [a,b] and returns the corresponding parameter t in [0,1].
	// reinterpolate(a, b)(t) takes a parameter t in [0,1] and returns the corresponding domain value x in [a,b].
	function continuous(deinterpolate, reinterpolate$$1) {
	  var domain = unit,
	      range = unit,
	      interpolate = interpolateValue,
	      clamp = false,
	      piecewise,
	      output,
	      input;

	  function rescale() {
	    piecewise = Math.min(domain.length, range.length) > 2 ? polymap : bimap;
	    output = input = null;
	    return scale;
	  }

	  function scale(x) {
	    return (output || (output = piecewise(domain, range, clamp ? deinterpolateClamp(deinterpolate) : deinterpolate, interpolate)))(+x);
	  }

	  scale.invert = function(y) {
	    return (input || (input = piecewise(range, domain, deinterpolateLinear, clamp ? reinterpolateClamp(reinterpolate$$1) : reinterpolate$$1)))(+y);
	  };

	  scale.domain = function(_) {
	    return arguments.length ? (domain = map$3.call(_, number$2), rescale()) : domain.slice();
	  };

	  scale.range = function(_) {
	    return arguments.length ? (range = slice$5.call(_), rescale()) : range.slice();
	  };

	  scale.rangeRound = function(_) {
	    return range = slice$5.call(_), interpolate = interpolateRound, rescale();
	  };

	  scale.clamp = function(_) {
	    return arguments.length ? (clamp = !!_, rescale()) : clamp;
	  };

	  scale.interpolate = function(_) {
	    return arguments.length ? (interpolate = _, rescale()) : interpolate;
	  };

	  return rescale();
	}

	var tickFormat = function(domain, count, specifier) {
	  var start = domain[0],
	      stop = domain[domain.length - 1],
	      step = tickStep(start, stop, count == null ? 10 : count),
	      precision;
	  specifier = formatSpecifier(specifier == null ? ",f" : specifier);
	  switch (specifier.type) {
	    case "s": {
	      var value = Math.max(Math.abs(start), Math.abs(stop));
	      if (specifier.precision == null && !isNaN(precision = precisionPrefix(step, value))) specifier.precision = precision;
	      return exports.formatPrefix(specifier, value);
	    }
	    case "":
	    case "e":
	    case "g":
	    case "p":
	    case "r": {
	      if (specifier.precision == null && !isNaN(precision = precisionRound(step, Math.max(Math.abs(start), Math.abs(stop))))) specifier.precision = precision - (specifier.type === "e");
	      break;
	    }
	    case "f":
	    case "%": {
	      if (specifier.precision == null && !isNaN(precision = precisionFixed(step))) specifier.precision = precision - (specifier.type === "%") * 2;
	      break;
	    }
	  }
	  return exports.format(specifier);
	};

	function linearish(scale) {
	  var domain = scale.domain;

	  scale.ticks = function(count) {
	    var d = domain();
	    return ticks(d[0], d[d.length - 1], count == null ? 10 : count);
	  };

	  scale.tickFormat = function(count, specifier) {
	    return tickFormat(domain(), count, specifier);
	  };

	  scale.nice = function(count) {
	    if (count == null) count = 10;

	    var d = domain(),
	        i0 = 0,
	        i1 = d.length - 1,
	        start = d[i0],
	        stop = d[i1],
	        step;

	    if (stop < start) {
	      step = start, start = stop, stop = step;
	      step = i0, i0 = i1, i1 = step;
	    }

	    step = tickIncrement(start, stop, count);

	    if (step > 0) {
	      start = Math.floor(start / step) * step;
	      stop = Math.ceil(stop / step) * step;
	      step = tickIncrement(start, stop, count);
	    } else if (step < 0) {
	      start = Math.ceil(start * step) / step;
	      stop = Math.floor(stop * step) / step;
	      step = tickIncrement(start, stop, count);
	    }

	    if (step > 0) {
	      d[i0] = Math.floor(start / step) * step;
	      d[i1] = Math.ceil(stop / step) * step;
	      domain(d);
	    } else if (step < 0) {
	      d[i0] = Math.ceil(start * step) / step;
	      d[i1] = Math.floor(stop * step) / step;
	      domain(d);
	    }

	    return scale;
	  };

	  return scale;
	}

	function linear$2() {
	  var scale = continuous(deinterpolateLinear, reinterpolate);

	  scale.copy = function() {
	    return copy(scale, linear$2());
	  };

	  return linearish(scale);
	}

	function identity$6() {
	  var domain = [0, 1];

	  function scale(x) {
	    return +x;
	  }

	  scale.invert = scale;

	  scale.domain = scale.range = function(_) {
	    return arguments.length ? (domain = map$3.call(_, number$2), scale) : domain.slice();
	  };

	  scale.copy = function() {
	    return identity$6().domain(domain);
	  };

	  return linearish(scale);
	}

	var nice = function(domain, interval) {
	  domain = domain.slice();

	  var i0 = 0,
	      i1 = domain.length - 1,
	      x0 = domain[i0],
	      x1 = domain[i1],
	      t;

	  if (x1 < x0) {
	    t = i0, i0 = i1, i1 = t;
	    t = x0, x0 = x1, x1 = t;
	  }

	  domain[i0] = interval.floor(x0);
	  domain[i1] = interval.ceil(x1);
	  return domain;
	};

	function deinterpolate(a, b) {
	  return (b = Math.log(b / a))
	      ? function(x) { return Math.log(x / a) / b; }
	      : constant$9(b);
	}

	function reinterpolate$1(a, b) {
	  return a < 0
	      ? function(t) { return -Math.pow(-b, t) * Math.pow(-a, 1 - t); }
	      : function(t) { return Math.pow(b, t) * Math.pow(a, 1 - t); };
	}

	function pow10(x) {
	  return isFinite(x) ? +("1e" + x) : x < 0 ? 0 : x;
	}

	function powp(base) {
	  return base === 10 ? pow10
	      : base === Math.E ? Math.exp
	      : function(x) { return Math.pow(base, x); };
	}

	function logp(base) {
	  return base === Math.E ? Math.log
	      : base === 10 && Math.log10
	      || base === 2 && Math.log2
	      || (base = Math.log(base), function(x) { return Math.log(x) / base; });
	}

	function reflect(f) {
	  return function(x) {
	    return -f(-x);
	  };
	}

	function log$1() {
	  var scale = continuous(deinterpolate, reinterpolate$1).domain([1, 10]),
	      domain = scale.domain,
	      base = 10,
	      logs = logp(10),
	      pows = powp(10);

	  function rescale() {
	    logs = logp(base), pows = powp(base);
	    if (domain()[0] < 0) logs = reflect(logs), pows = reflect(pows);
	    return scale;
	  }

	  scale.base = function(_) {
	    return arguments.length ? (base = +_, rescale()) : base;
	  };

	  scale.domain = function(_) {
	    return arguments.length ? (domain(_), rescale()) : domain();
	  };

	  scale.ticks = function(count) {
	    var d = domain(),
	        u = d[0],
	        v = d[d.length - 1],
	        r;

	    if (r = v < u) i = u, u = v, v = i;

	    var i = logs(u),
	        j = logs(v),
	        p,
	        k,
	        t,
	        n = count == null ? 10 : +count,
	        z = [];

	    if (!(base % 1) && j - i < n) {
	      i = Math.round(i) - 1, j = Math.round(j) + 1;
	      if (u > 0) for (; i < j; ++i) {
	        for (k = 1, p = pows(i); k < base; ++k) {
	          t = p * k;
	          if (t < u) continue;
	          if (t > v) break;
	          z.push(t);
	        }
	      } else for (; i < j; ++i) {
	        for (k = base - 1, p = pows(i); k >= 1; --k) {
	          t = p * k;
	          if (t < u) continue;
	          if (t > v) break;
	          z.push(t);
	        }
	      }
	    } else {
	      z = ticks(i, j, Math.min(j - i, n)).map(pows);
	    }

	    return r ? z.reverse() : z;
	  };

	  scale.tickFormat = function(count, specifier) {
	    if (specifier == null) specifier = base === 10 ? ".0e" : ",";
	    if (typeof specifier !== "function") specifier = exports.format(specifier);
	    if (count === Infinity) return specifier;
	    if (count == null) count = 10;
	    var k = Math.max(1, base * count / scale.ticks().length); // TODO fast estimate?
	    return function(d) {
	      var i = d / pows(Math.round(logs(d)));
	      if (i * base < base - 0.5) i *= base;
	      return i <= k ? specifier(d) : "";
	    };
	  };

	  scale.nice = function() {
	    return domain(nice(domain(), {
	      floor: function(x) { return pows(Math.floor(logs(x))); },
	      ceil: function(x) { return pows(Math.ceil(logs(x))); }
	    }));
	  };

	  scale.copy = function() {
	    return copy(scale, log$1().base(base));
	  };

	  return scale;
	}

	function raise$1(x, exponent) {
	  return x < 0 ? -Math.pow(-x, exponent) : Math.pow(x, exponent);
	}

	function pow$1() {
	  var exponent = 1,
	      scale = continuous(deinterpolate, reinterpolate),
	      domain = scale.domain;

	  function deinterpolate(a, b) {
	    return (b = raise$1(b, exponent) - (a = raise$1(a, exponent)))
	        ? function(x) { return (raise$1(x, exponent) - a) / b; }
	        : constant$9(b);
	  }

	  function reinterpolate(a, b) {
	    b = raise$1(b, exponent) - (a = raise$1(a, exponent));
	    return function(t) { return raise$1(a + b * t, 1 / exponent); };
	  }

	  scale.exponent = function(_) {
	    return arguments.length ? (exponent = +_, domain(domain())) : exponent;
	  };

	  scale.copy = function() {
	    return copy(scale, pow$1().exponent(exponent));
	  };

	  return linearish(scale);
	}

	function sqrt$1() {
	  return pow$1().exponent(0.5);
	}

	function quantile() {
	  var domain = [],
	      range = [],
	      thresholds = [];

	  function rescale() {
	    var i = 0, n = Math.max(1, range.length);
	    thresholds = new Array(n - 1);
	    while (++i < n) thresholds[i - 1] = threshold(domain, i / n);
	    return scale;
	  }

	  function scale(x) {
	    if (!isNaN(x = +x)) return range[bisectRight(thresholds, x)];
	  }

	  scale.invertExtent = function(y) {
	    var i = range.indexOf(y);
	    return i < 0 ? [NaN, NaN] : [
	      i > 0 ? thresholds[i - 1] : domain[0],
	      i < thresholds.length ? thresholds[i] : domain[domain.length - 1]
	    ];
	  };

	  scale.domain = function(_) {
	    if (!arguments.length) return domain.slice();
	    domain = [];
	    for (var i = 0, n = _.length, d; i < n; ++i) if (d = _[i], d != null && !isNaN(d = +d)) domain.push(d);
	    domain.sort(ascending);
	    return rescale();
	  };

	  scale.range = function(_) {
	    return arguments.length ? (range = slice$5.call(_), rescale()) : range.slice();
	  };

	  scale.quantiles = function() {
	    return thresholds.slice();
	  };

	  scale.copy = function() {
	    return quantile()
	        .domain(domain)
	        .range(range);
	  };

	  return scale;
	}

	function quantize$1() {
	  var x0 = 0,
	      x1 = 1,
	      n = 1,
	      domain = [0.5],
	      range = [0, 1];

	  function scale(x) {
	    if (x <= x) return range[bisectRight(domain, x, 0, n)];
	  }

	  function rescale() {
	    var i = -1;
	    domain = new Array(n);
	    while (++i < n) domain[i] = ((i + 1) * x1 - (i - n) * x0) / (n + 1);
	    return scale;
	  }

	  scale.domain = function(_) {
	    return arguments.length ? (x0 = +_[0], x1 = +_[1], rescale()) : [x0, x1];
	  };

	  scale.range = function(_) {
	    return arguments.length ? (n = (range = slice$5.call(_)).length - 1, rescale()) : range.slice();
	  };

	  scale.invertExtent = function(y) {
	    var i = range.indexOf(y);
	    return i < 0 ? [NaN, NaN]
	        : i < 1 ? [x0, domain[0]]
	        : i >= n ? [domain[n - 1], x1]
	        : [domain[i - 1], domain[i]];
	  };

	  scale.copy = function() {
	    return quantize$1()
	        .domain([x0, x1])
	        .range(range);
	  };

	  return linearish(scale);
	}

	function threshold$1() {
	  var domain = [0.5],
	      range = [0, 1],
	      n = 1;

	  function scale(x) {
	    if (x <= x) return range[bisectRight(domain, x, 0, n)];
	  }

	  scale.domain = function(_) {
	    return arguments.length ? (domain = slice$5.call(_), n = Math.min(domain.length, range.length - 1), scale) : domain.slice();
	  };

	  scale.range = function(_) {
	    return arguments.length ? (range = slice$5.call(_), n = Math.min(domain.length, range.length - 1), scale) : range.slice();
	  };

	  scale.invertExtent = function(y) {
	    var i = range.indexOf(y);
	    return [domain[i - 1], domain[i]];
	  };

	  scale.copy = function() {
	    return threshold$1()
	        .domain(domain)
	        .range(range);
	  };

	  return scale;
	}

	var t0$1 = new Date;
	var t1$1 = new Date;

	function newInterval(floori, offseti, count, field) {

	  function interval(date) {
	    return floori(date = new Date(+date)), date;
	  }

	  interval.floor = interval;

	  interval.ceil = function(date) {
	    return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;
	  };

	  interval.round = function(date) {
	    var d0 = interval(date),
	        d1 = interval.ceil(date);
	    return date - d0 < d1 - date ? d0 : d1;
	  };

	  interval.offset = function(date, step) {
	    return offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date;
	  };

	  interval.range = function(start, stop, step) {
	    var range = [];
	    start = interval.ceil(start);
	    step = step == null ? 1 : Math.floor(step);
	    if (!(start < stop) || !(step > 0)) return range; // also handles Invalid Date
	    do range.push(new Date(+start)); while (offseti(start, step), floori(start), start < stop)
	    return range;
	  };

	  interval.filter = function(test) {
	    return newInterval(function(date) {
	      if (date >= date) while (floori(date), !test(date)) date.setTime(date - 1);
	    }, function(date, step) {
	      if (date >= date) {
	        if (step < 0) while (++step <= 0) {
	          while (offseti(date, -1), !test(date)) {} // eslint-disable-line no-empty
	        } else while (--step >= 0) {
	          while (offseti(date, +1), !test(date)) {} // eslint-disable-line no-empty
	        }
	      }
	    });
	  };

	  if (count) {
	    interval.count = function(start, end) {
	      t0$1.setTime(+start), t1$1.setTime(+end);
	      floori(t0$1), floori(t1$1);
	      return Math.floor(count(t0$1, t1$1));
	    };

	    interval.every = function(step) {
	      step = Math.floor(step);
	      return !isFinite(step) || !(step > 0) ? null
	          : !(step > 1) ? interval
	          : interval.filter(field
	              ? function(d) { return field(d) % step === 0; }
	              : function(d) { return interval.count(0, d) % step === 0; });
	    };
	  }

	  return interval;
	}

	var millisecond = newInterval(function() {
	  // noop
	}, function(date, step) {
	  date.setTime(+date + step);
	}, function(start, end) {
	  return end - start;
	});

	// An optimized implementation for this simple case.
	millisecond.every = function(k) {
	  k = Math.floor(k);
	  if (!isFinite(k) || !(k > 0)) return null;
	  if (!(k > 1)) return millisecond;
	  return newInterval(function(date) {
	    date.setTime(Math.floor(date / k) * k);
	  }, function(date, step) {
	    date.setTime(+date + step * k);
	  }, function(start, end) {
	    return (end - start) / k;
	  });
	};

	var milliseconds = millisecond.range;

	var durationSecond$1 = 1e3;
	var durationMinute$1 = 6e4;
	var durationHour$1 = 36e5;
	var durationDay$1 = 864e5;
	var durationWeek$1 = 6048e5;

	var second = newInterval(function(date) {
	  date.setTime(Math.floor(date / durationSecond$1) * durationSecond$1);
	}, function(date, step) {
	  date.setTime(+date + step * durationSecond$1);
	}, function(start, end) {
	  return (end - start) / durationSecond$1;
	}, function(date) {
	  return date.getUTCSeconds();
	});

	var seconds = second.range;

	var minute = newInterval(function(date) {
	  date.setTime(Math.floor(date / durationMinute$1) * durationMinute$1);
	}, function(date, step) {
	  date.setTime(+date + step * durationMinute$1);
	}, function(start, end) {
	  return (end - start) / durationMinute$1;
	}, function(date) {
	  return date.getMinutes();
	});

	var minutes = minute.range;

	var hour = newInterval(function(date) {
	  var offset = date.getTimezoneOffset() * durationMinute$1 % durationHour$1;
	  if (offset < 0) offset += durationHour$1;
	  date.setTime(Math.floor((+date - offset) / durationHour$1) * durationHour$1 + offset);
	}, function(date, step) {
	  date.setTime(+date + step * durationHour$1);
	}, function(start, end) {
	  return (end - start) / durationHour$1;
	}, function(date) {
	  return date.getHours();
	});

	var hours = hour.range;

	var day = newInterval(function(date) {
	  date.setHours(0, 0, 0, 0);
	}, function(date, step) {
	  date.setDate(date.getDate() + step);
	}, function(start, end) {
	  return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute$1) / durationDay$1;
	}, function(date) {
	  return date.getDate() - 1;
	});

	var days = day.range;

	function weekday(i) {
	  return newInterval(function(date) {
	    date.setDate(date.getDate() - (date.getDay() + 7 - i) % 7);
	    date.setHours(0, 0, 0, 0);
	  }, function(date, step) {
	    date.setDate(date.getDate() + step * 7);
	  }, function(start, end) {
	    return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute$1) / durationWeek$1;
	  });
	}

	var sunday = weekday(0);
	var monday = weekday(1);
	var tuesday = weekday(2);
	var wednesday = weekday(3);
	var thursday = weekday(4);
	var friday = weekday(5);
	var saturday = weekday(6);

	var sundays = sunday.range;
	var mondays = monday.range;
	var tuesdays = tuesday.range;
	var wednesdays = wednesday.range;
	var thursdays = thursday.range;
	var fridays = friday.range;
	var saturdays = saturday.range;

	var month = newInterval(function(date) {
	  date.setDate(1);
	  date.setHours(0, 0, 0, 0);
	}, function(date, step) {
	  date.setMonth(date.getMonth() + step);
	}, function(start, end) {
	  return end.getMonth() - start.getMonth() + (end.getFullYear() - start.getFullYear()) * 12;
	}, function(date) {
	  return date.getMonth();
	});

	var months = month.range;

	var year = newInterval(function(date) {
	  date.setMonth(0, 1);
	  date.setHours(0, 0, 0, 0);
	}, function(date, step) {
	  date.setFullYear(date.getFullYear() + step);
	}, function(start, end) {
	  return end.getFullYear() - start.getFullYear();
	}, function(date) {
	  return date.getFullYear();
	});

	// An optimized implementation for this simple case.
	year.every = function(k) {
	  return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : newInterval(function(date) {
	    date.setFullYear(Math.floor(date.getFullYear() / k) * k);
	    date.setMonth(0, 1);
	    date.setHours(0, 0, 0, 0);
	  }, function(date, step) {
	    date.setFullYear(date.getFullYear() + step * k);
	  });
	};

	var years = year.range;

	var utcMinute = newInterval(function(date) {
	  date.setUTCSeconds(0, 0);
	}, function(date, step) {
	  date.setTime(+date + step * durationMinute$1);
	}, function(start, end) {
	  return (end - start) / durationMinute$1;
	}, function(date) {
	  return date.getUTCMinutes();
	});

	var utcMinutes = utcMinute.range;

	var utcHour = newInterval(function(date) {
	  date.setUTCMinutes(0, 0, 0);
	}, function(date, step) {
	  date.setTime(+date + step * durationHour$1);
	}, function(start, end) {
	  return (end - start) / durationHour$1;
	}, function(date) {
	  return date.getUTCHours();
	});

	var utcHours = utcHour.range;

	var utcDay = newInterval(function(date) {
	  date.setUTCHours(0, 0, 0, 0);
	}, function(date, step) {
	  date.setUTCDate(date.getUTCDate() + step);
	}, function(start, end) {
	  return (end - start) / durationDay$1;
	}, function(date) {
	  return date.getUTCDate() - 1;
	});

	var utcDays = utcDay.range;

	function utcWeekday(i) {
	  return newInterval(function(date) {
	    date.setUTCDate(date.getUTCDate() - (date.getUTCDay() + 7 - i) % 7);
	    date.setUTCHours(0, 0, 0, 0);
	  }, function(date, step) {
	    date.setUTCDate(date.getUTCDate() + step * 7);
	  }, function(start, end) {
	    return (end - start) / durationWeek$1;
	  });
	}

	var utcSunday = utcWeekday(0);
	var utcMonday = utcWeekday(1);
	var utcTuesday = utcWeekday(2);
	var utcWednesday = utcWeekday(3);
	var utcThursday = utcWeekday(4);
	var utcFriday = utcWeekday(5);
	var utcSaturday = utcWeekday(6);

	var utcSundays = utcSunday.range;
	var utcMondays = utcMonday.range;
	var utcTuesdays = utcTuesday.range;
	var utcWednesdays = utcWednesday.range;
	var utcThursdays = utcThursday.range;
	var utcFridays = utcFriday.range;
	var utcSaturdays = utcSaturday.range;

	var utcMonth = newInterval(function(date) {
	  date.setUTCDate(1);
	  date.setUTCHours(0, 0, 0, 0);
	}, function(date, step) {
	  date.setUTCMonth(date.getUTCMonth() + step);
	}, function(start, end) {
	  return end.getUTCMonth() - start.getUTCMonth() + (end.getUTCFullYear() - start.getUTCFullYear()) * 12;
	}, function(date) {
	  return date.getUTCMonth();
	});

	var utcMonths = utcMonth.range;

	var utcYear = newInterval(function(date) {
	  date.setUTCMonth(0, 1);
	  date.setUTCHours(0, 0, 0, 0);
	}, function(date, step) {
	  date.setUTCFullYear(date.getUTCFullYear() + step);
	}, function(start, end) {
	  return end.getUTCFullYear() - start.getUTCFullYear();
	}, function(date) {
	  return date.getUTCFullYear();
	});

	// An optimized implementation for this simple case.
	utcYear.every = function(k) {
	  return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : newInterval(function(date) {
	    date.setUTCFullYear(Math.floor(date.getUTCFullYear() / k) * k);
	    date.setUTCMonth(0, 1);
	    date.setUTCHours(0, 0, 0, 0);
	  }, function(date, step) {
	    date.setUTCFullYear(date.getUTCFullYear() + step * k);
	  });
	};

	var utcYears = utcYear.range;

	function localDate(d) {
	  if (0 <= d.y && d.y < 100) {
	    var date = new Date(-1, d.m, d.d, d.H, d.M, d.S, d.L);
	    date.setFullYear(d.y);
	    return date;
	  }
	  return new Date(d.y, d.m, d.d, d.H, d.M, d.S, d.L);
	}

	function utcDate(d) {
	  if (0 <= d.y && d.y < 100) {
	    var date = new Date(Date.UTC(-1, d.m, d.d, d.H, d.M, d.S, d.L));
	    date.setUTCFullYear(d.y);
	    return date;
	  }
	  return new Date(Date.UTC(d.y, d.m, d.d, d.H, d.M, d.S, d.L));
	}

	function newYear(y) {
	  return {y: y, m: 0, d: 1, H: 0, M: 0, S: 0, L: 0};
	}

	function formatLocale$1(locale) {
	  var locale_dateTime = locale.dateTime,
	      locale_date = locale.date,
	      locale_time = locale.time,
	      locale_periods = locale.periods,
	      locale_weekdays = locale.days,
	      locale_shortWeekdays = locale.shortDays,
	      locale_months = locale.months,
	      locale_shortMonths = locale.shortMonths;

	  var periodRe = formatRe(locale_periods),
	      periodLookup = formatLookup(locale_periods),
	      weekdayRe = formatRe(locale_weekdays),
	      weekdayLookup = formatLookup(locale_weekdays),
	      shortWeekdayRe = formatRe(locale_shortWeekdays),
	      shortWeekdayLookup = formatLookup(locale_shortWeekdays),
	      monthRe = formatRe(locale_months),
	      monthLookup = formatLookup(locale_months),
	      shortMonthRe = formatRe(locale_shortMonths),
	      shortMonthLookup = formatLookup(locale_shortMonths);

	  var formats = {
	    "a": formatShortWeekday,
	    "A": formatWeekday,
	    "b": formatShortMonth,
	    "B": formatMonth,
	    "c": null,
	    "d": formatDayOfMonth,
	    "e": formatDayOfMonth,
	    "H": formatHour24,
	    "I": formatHour12,
	    "j": formatDayOfYear,
	    "L": formatMilliseconds,
	    "m": formatMonthNumber,
	    "M": formatMinutes,
	    "p": formatPeriod,
	    "S": formatSeconds,
	    "U": formatWeekNumberSunday,
	    "w": formatWeekdayNumber,
	    "W": formatWeekNumberMonday,
	    "x": null,
	    "X": null,
	    "y": formatYear,
	    "Y": formatFullYear,
	    "Z": formatZone,
	    "%": formatLiteralPercent
	  };

	  var utcFormats = {
	    "a": formatUTCShortWeekday,
	    "A": formatUTCWeekday,
	    "b": formatUTCShortMonth,
	    "B": formatUTCMonth,
	    "c": null,
	    "d": formatUTCDayOfMonth,
	    "e": formatUTCDayOfMonth,
	    "H": formatUTCHour24,
	    "I": formatUTCHour12,
	    "j": formatUTCDayOfYear,
	    "L": formatUTCMilliseconds,
	    "m": formatUTCMonthNumber,
	    "M": formatUTCMinutes,
	    "p": formatUTCPeriod,
	    "S": formatUTCSeconds,
	    "U": formatUTCWeekNumberSunday,
	    "w": formatUTCWeekdayNumber,
	    "W": formatUTCWeekNumberMonday,
	    "x": null,
	    "X": null,
	    "y": formatUTCYear,
	    "Y": formatUTCFullYear,
	    "Z": formatUTCZone,
	    "%": formatLiteralPercent
	  };

	  var parses = {
	    "a": parseShortWeekday,
	    "A": parseWeekday,
	    "b": parseShortMonth,
	    "B": parseMonth,
	    "c": parseLocaleDateTime,
	    "d": parseDayOfMonth,
	    "e": parseDayOfMonth,
	    "H": parseHour24,
	    "I": parseHour24,
	    "j": parseDayOfYear,
	    "L": parseMilliseconds,
	    "m": parseMonthNumber,
	    "M": parseMinutes,
	    "p": parsePeriod,
	    "S": parseSeconds,
	    "U": parseWeekNumberSunday,
	    "w": parseWeekdayNumber,
	    "W": parseWeekNumberMonday,
	    "x": parseLocaleDate,
	    "X": parseLocaleTime,
	    "y": parseYear,
	    "Y": parseFullYear,
	    "Z": parseZone,
	    "%": parseLiteralPercent
	  };

	  // These recursive directive definitions must be deferred.
	  formats.x = newFormat(locale_date, formats);
	  formats.X = newFormat(locale_time, formats);
	  formats.c = newFormat(locale_dateTime, formats);
	  utcFormats.x = newFormat(locale_date, utcFormats);
	  utcFormats.X = newFormat(locale_time, utcFormats);
	  utcFormats.c = newFormat(locale_dateTime, utcFormats);

	  function newFormat(specifier, formats) {
	    return function(date) {
	      var string = [],
	          i = -1,
	          j = 0,
	          n = specifier.length,
	          c,
	          pad,
	          format;

	      if (!(date instanceof Date)) date = new Date(+date);

	      while (++i < n) {
	        if (specifier.charCodeAt(i) === 37) {
	          string.push(specifier.slice(j, i));
	          if ((pad = pads[c = specifier.charAt(++i)]) != null) c = specifier.charAt(++i);
	          else pad = c === "e" ? " " : "0";
	          if (format = formats[c]) c = format(date, pad);
	          string.push(c);
	          j = i + 1;
	        }
	      }

	      string.push(specifier.slice(j, i));
	      return string.join("");
	    };
	  }

	  function newParse(specifier, newDate) {
	    return function(string) {
	      var d = newYear(1900),
	          i = parseSpecifier(d, specifier, string += "", 0);
	      if (i != string.length) return null;

	      // The am-pm flag is 0 for AM, and 1 for PM.
	      if ("p" in d) d.H = d.H % 12 + d.p * 12;

	      // Convert day-of-week and week-of-year to day-of-year.
	      if ("W" in d || "U" in d) {
	        if (!("w" in d)) d.w = "W" in d ? 1 : 0;
	        var day$$1 = "Z" in d ? utcDate(newYear(d.y)).getUTCDay() : newDate(newYear(d.y)).getDay();
	        d.m = 0;
	        d.d = "W" in d ? (d.w + 6) % 7 + d.W * 7 - (day$$1 + 5) % 7 : d.w + d.U * 7 - (day$$1 + 6) % 7;
	      }

	      // If a time zone is specified, all fields are interpreted as UTC and then
	      // offset according to the specified time zone.
	      if ("Z" in d) {
	        d.H += d.Z / 100 | 0;
	        d.M += d.Z % 100;
	        return utcDate(d);
	      }

	      // Otherwise, all fields are in local time.
	      return newDate(d);
	    };
	  }

	  function parseSpecifier(d, specifier, string, j) {
	    var i = 0,
	        n = specifier.length,
	        m = string.length,
	        c,
	        parse;

	    while (i < n) {
	      if (j >= m) return -1;
	      c = specifier.charCodeAt(i++);
	      if (c === 37) {
	        c = specifier.charAt(i++);
	        parse = parses[c in pads ? specifier.charAt(i++) : c];
	        if (!parse || ((j = parse(d, string, j)) < 0)) return -1;
	      } else if (c != string.charCodeAt(j++)) {
	        return -1;
	      }
	    }

	    return j;
	  }

	  function parsePeriod(d, string, i) {
	    var n = periodRe.exec(string.slice(i));
	    return n ? (d.p = periodLookup[n[0].toLowerCase()], i + n[0].length) : -1;
	  }

	  function parseShortWeekday(d, string, i) {
	    var n = shortWeekdayRe.exec(string.slice(i));
	    return n ? (d.w = shortWeekdayLookup[n[0].toLowerCase()], i + n[0].length) : -1;
	  }

	  function parseWeekday(d, string, i) {
	    var n = weekdayRe.exec(string.slice(i));
	    return n ? (d.w = weekdayLookup[n[0].toLowerCase()], i + n[0].length) : -1;
	  }

	  function parseShortMonth(d, string, i) {
	    var n = shortMonthRe.exec(string.slice(i));
	    return n ? (d.m = shortMonthLookup[n[0].toLowerCase()], i + n[0].length) : -1;
	  }

	  function parseMonth(d, string, i) {
	    var n = monthRe.exec(string.slice(i));
	    return n ? (d.m = monthLookup[n[0].toLowerCase()], i + n[0].length) : -1;
	  }

	  function parseLocaleDateTime(d, string, i) {
	    return parseSpecifier(d, locale_dateTime, string, i);
	  }

	  function parseLocaleDate(d, string, i) {
	    return parseSpecifier(d, locale_date, string, i);
	  }

	  function parseLocaleTime(d, string, i) {
	    return parseSpecifier(d, locale_time, string, i);
	  }

	  function formatShortWeekday(d) {
	    return locale_shortWeekdays[d.getDay()];
	  }

	  function formatWeekday(d) {
	    return locale_weekdays[d.getDay()];
	  }

	  function formatShortMonth(d) {
	    return locale_shortMonths[d.getMonth()];
	  }

	  function formatMonth(d) {
	    return locale_months[d.getMonth()];
	  }

	  function formatPeriod(d) {
	    return locale_periods[+(d.getHours() >= 12)];
	  }

	  function formatUTCShortWeekday(d) {
	    return locale_shortWeekdays[d.getUTCDay()];
	  }

	  function formatUTCWeekday(d) {
	    return locale_weekdays[d.getUTCDay()];
	  }

	  function formatUTCShortMonth(d) {
	    return locale_shortMonths[d.getUTCMonth()];
	  }

	  function formatUTCMonth(d) {
	    return locale_months[d.getUTCMonth()];
	  }

	  function formatUTCPeriod(d) {
	    return locale_periods[+(d.getUTCHours() >= 12)];
	  }

	  return {
	    format: function(specifier) {
	      var f = newFormat(specifier += "", formats);
	      f.toString = function() { return specifier; };
	      return f;
	    },
	    parse: function(specifier) {
	      var p = newParse(specifier += "", localDate);
	      p.toString = function() { return specifier; };
	      return p;
	    },
	    utcFormat: function(specifier) {
	      var f = newFormat(specifier += "", utcFormats);
	      f.toString = function() { return specifier; };
	      return f;
	    },
	    utcParse: function(specifier) {
	      var p = newParse(specifier, utcDate);
	      p.toString = function() { return specifier; };
	      return p;
	    }
	  };
	}

	var pads = {"-": "", "_": " ", "0": "0"};
	var numberRe = /^\s*\d+/;
	var percentRe = /^%/;
	var requoteRe = /[\\\^\$\*\+\?\|\[\]\(\)\.\{\}]/g;

	function pad(value, fill, width) {
	  var sign = value < 0 ? "-" : "",
	      string = (sign ? -value : value) + "",
	      length = string.length;
	  return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);
	}

	function requote(s) {
	  return s.replace(requoteRe, "\\$&");
	}

	function formatRe(names) {
	  return new RegExp("^(?:" + names.map(requote).join("|") + ")", "i");
	}

	function formatLookup(names) {
	  var map = {}, i = -1, n = names.length;
	  while (++i < n) map[names[i].toLowerCase()] = i;
	  return map;
	}

	function parseWeekdayNumber(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 1));
	  return n ? (d.w = +n[0], i + n[0].length) : -1;
	}

	function parseWeekNumberSunday(d, string, i) {
	  var n = numberRe.exec(string.slice(i));
	  return n ? (d.U = +n[0], i + n[0].length) : -1;
	}

	function parseWeekNumberMonday(d, string, i) {
	  var n = numberRe.exec(string.slice(i));
	  return n ? (d.W = +n[0], i + n[0].length) : -1;
	}

	function parseFullYear(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 4));
	  return n ? (d.y = +n[0], i + n[0].length) : -1;
	}

	function parseYear(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 2));
	  return n ? (d.y = +n[0] + (+n[0] > 68 ? 1900 : 2000), i + n[0].length) : -1;
	}

	function parseZone(d, string, i) {
	  var n = /^(Z)|([+-]\d\d)(?:\:?(\d\d))?/.exec(string.slice(i, i + 6));
	  return n ? (d.Z = n[1] ? 0 : -(n[2] + (n[3] || "00")), i + n[0].length) : -1;
	}

	function parseMonthNumber(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 2));
	  return n ? (d.m = n[0] - 1, i + n[0].length) : -1;
	}

	function parseDayOfMonth(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 2));
	  return n ? (d.d = +n[0], i + n[0].length) : -1;
	}

	function parseDayOfYear(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 3));
	  return n ? (d.m = 0, d.d = +n[0], i + n[0].length) : -1;
	}

	function parseHour24(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 2));
	  return n ? (d.H = +n[0], i + n[0].length) : -1;
	}

	function parseMinutes(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 2));
	  return n ? (d.M = +n[0], i + n[0].length) : -1;
	}

	function parseSeconds(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 2));
	  return n ? (d.S = +n[0], i + n[0].length) : -1;
	}

	function parseMilliseconds(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 3));
	  return n ? (d.L = +n[0], i + n[0].length) : -1;
	}

	function parseLiteralPercent(d, string, i) {
	  var n = percentRe.exec(string.slice(i, i + 1));
	  return n ? i + n[0].length : -1;
	}

	function formatDayOfMonth(d, p) {
	  return pad(d.getDate(), p, 2);
	}

	function formatHour24(d, p) {
	  return pad(d.getHours(), p, 2);
	}

	function formatHour12(d, p) {
	  return pad(d.getHours() % 12 || 12, p, 2);
	}

	function formatDayOfYear(d, p) {
	  return pad(1 + day.count(year(d), d), p, 3);
	}

	function formatMilliseconds(d, p) {
	  return pad(d.getMilliseconds(), p, 3);
	}

	function formatMonthNumber(d, p) {
	  return pad(d.getMonth() + 1, p, 2);
	}

	function formatMinutes(d, p) {
	  return pad(d.getMinutes(), p, 2);
	}

	function formatSeconds(d, p) {
	  return pad(d.getSeconds(), p, 2);
	}

	function formatWeekNumberSunday(d, p) {
	  return pad(sunday.count(year(d), d), p, 2);
	}

	function formatWeekdayNumber(d) {
	  return d.getDay();
	}

	function formatWeekNumberMonday(d, p) {
	  return pad(monday.count(year(d), d), p, 2);
	}

	function formatYear(d, p) {
	  return pad(d.getFullYear() % 100, p, 2);
	}

	function formatFullYear(d, p) {
	  return pad(d.getFullYear() % 10000, p, 4);
	}

	function formatZone(d) {
	  var z = d.getTimezoneOffset();
	  return (z > 0 ? "-" : (z *= -1, "+"))
	      + pad(z / 60 | 0, "0", 2)
	      + pad(z % 60, "0", 2);
	}

	function formatUTCDayOfMonth(d, p) {
	  return pad(d.getUTCDate(), p, 2);
	}

	function formatUTCHour24(d, p) {
	  return pad(d.getUTCHours(), p, 2);
	}

	function formatUTCHour12(d, p) {
	  return pad(d.getUTCHours() % 12 || 12, p, 2);
	}

	function formatUTCDayOfYear(d, p) {
	  return pad(1 + utcDay.count(utcYear(d), d), p, 3);
	}

	function formatUTCMilliseconds(d, p) {
	  return pad(d.getUTCMilliseconds(), p, 3);
	}

	function formatUTCMonthNumber(d, p) {
	  return pad(d.getUTCMonth() + 1, p, 2);
	}

	function formatUTCMinutes(d, p) {
	  return pad(d.getUTCMinutes(), p, 2);
	}

	function formatUTCSeconds(d, p) {
	  return pad(d.getUTCSeconds(), p, 2);
	}

	function formatUTCWeekNumberSunday(d, p) {
	  return pad(utcSunday.count(utcYear(d), d), p, 2);
	}

	function formatUTCWeekdayNumber(d) {
	  return d.getUTCDay();
	}

	function formatUTCWeekNumberMonday(d, p) {
	  return pad(utcMonday.count(utcYear(d), d), p, 2);
	}

	function formatUTCYear(d, p) {
	  return pad(d.getUTCFullYear() % 100, p, 2);
	}

	function formatUTCFullYear(d, p) {
	  return pad(d.getUTCFullYear() % 10000, p, 4);
	}

	function formatUTCZone() {
	  return "+0000";
	}

	function formatLiteralPercent() {
	  return "%";
	}

	var locale$2;





	defaultLocale$1({
	  dateTime: "%x, %X",
	  date: "%-m/%-d/%Y",
	  time: "%-I:%M:%S %p",
	  periods: ["AM", "PM"],
	  days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
	  shortDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
	  months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
	  shortMonths: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
	});

	function defaultLocale$1(definition) {
	  locale$2 = formatLocale$1(definition);
	  exports.timeFormat = locale$2.format;
	  exports.timeParse = locale$2.parse;
	  exports.utcFormat = locale$2.utcFormat;
	  exports.utcParse = locale$2.utcParse;
	  return locale$2;
	}

	var isoSpecifier = "%Y-%m-%dT%H:%M:%S.%LZ";

	function formatIsoNative(date) {
	  return date.toISOString();
	}

	var formatIso = Date.prototype.toISOString
	    ? formatIsoNative
	    : exports.utcFormat(isoSpecifier);

	function parseIsoNative(string) {
	  var date = new Date(string);
	  return isNaN(date) ? null : date;
	}

	var parseIso = +new Date("2000-01-01T00:00:00.000Z")
	    ? parseIsoNative
	    : exports.utcParse(isoSpecifier);

	var durationSecond = 1000;
	var durationMinute = durationSecond * 60;
	var durationHour = durationMinute * 60;
	var durationDay = durationHour * 24;
	var durationWeek = durationDay * 7;
	var durationMonth = durationDay * 30;
	var durationYear = durationDay * 365;

	function date$1(t) {
	  return new Date(t);
	}

	function number$3(t) {
	  return t instanceof Date ? +t : +new Date(+t);
	}

	function calendar(year$$1, month$$1, week, day$$1, hour$$1, minute$$1, second$$1, millisecond$$1, format) {
	  var scale = continuous(deinterpolateLinear, reinterpolate),
	      invert = scale.invert,
	      domain = scale.domain;

	  var formatMillisecond = format(".%L"),
	      formatSecond = format(":%S"),
	      formatMinute = format("%I:%M"),
	      formatHour = format("%I %p"),
	      formatDay = format("%a %d"),
	      formatWeek = format("%b %d"),
	      formatMonth = format("%B"),
	      formatYear = format("%Y");

	  var tickIntervals = [
	    [second$$1,  1,      durationSecond],
	    [second$$1,  5,  5 * durationSecond],
	    [second$$1, 15, 15 * durationSecond],
	    [second$$1, 30, 30 * durationSecond],
	    [minute$$1,  1,      durationMinute],
	    [minute$$1,  5,  5 * durationMinute],
	    [minute$$1, 15, 15 * durationMinute],
	    [minute$$1, 30, 30 * durationMinute],
	    [  hour$$1,  1,      durationHour  ],
	    [  hour$$1,  3,  3 * durationHour  ],
	    [  hour$$1,  6,  6 * durationHour  ],
	    [  hour$$1, 12, 12 * durationHour  ],
	    [   day$$1,  1,      durationDay   ],
	    [   day$$1,  2,  2 * durationDay   ],
	    [  week,  1,      durationWeek  ],
	    [ month$$1,  1,      durationMonth ],
	    [ month$$1,  3,  3 * durationMonth ],
	    [  year$$1,  1,      durationYear  ]
	  ];

	  function tickFormat(date$$1) {
	    return (second$$1(date$$1) < date$$1 ? formatMillisecond
	        : minute$$1(date$$1) < date$$1 ? formatSecond
	        : hour$$1(date$$1) < date$$1 ? formatMinute
	        : day$$1(date$$1) < date$$1 ? formatHour
	        : month$$1(date$$1) < date$$1 ? (week(date$$1) < date$$1 ? formatDay : formatWeek)
	        : year$$1(date$$1) < date$$1 ? formatMonth
	        : formatYear)(date$$1);
	  }

	  function tickInterval(interval$$1, start, stop, step) {
	    if (interval$$1 == null) interval$$1 = 10;

	    // If a desired tick count is specified, pick a reasonable tick interval
	    // based on the extent of the domain and a rough estimate of tick size.
	    // Otherwise, assume interval is already a time interval and use it.
	    if (typeof interval$$1 === "number") {
	      var target = Math.abs(stop - start) / interval$$1,
	          i = bisector(function(i) { return i[2]; }).right(tickIntervals, target);
	      if (i === tickIntervals.length) {
	        step = tickStep(start / durationYear, stop / durationYear, interval$$1);
	        interval$$1 = year$$1;
	      } else if (i) {
	        i = tickIntervals[target / tickIntervals[i - 1][2] < tickIntervals[i][2] / target ? i - 1 : i];
	        step = i[1];
	        interval$$1 = i[0];
	      } else {
	        step = tickStep(start, stop, interval$$1);
	        interval$$1 = millisecond$$1;
	      }
	    }

	    return step == null ? interval$$1 : interval$$1.every(step);
	  }

	  scale.invert = function(y) {
	    return new Date(invert(y));
	  };

	  scale.domain = function(_) {
	    return arguments.length ? domain(map$3.call(_, number$3)) : domain().map(date$1);
	  };

	  scale.ticks = function(interval$$1, step) {
	    var d = domain(),
	        t0 = d[0],
	        t1 = d[d.length - 1],
	        r = t1 < t0,
	        t;
	    if (r) t = t0, t0 = t1, t1 = t;
	    t = tickInterval(interval$$1, t0, t1, step);
	    t = t ? t.range(t0, t1 + 1) : []; // inclusive stop
	    return r ? t.reverse() : t;
	  };

	  scale.tickFormat = function(count, specifier) {
	    return specifier == null ? tickFormat : format(specifier);
	  };

	  scale.nice = function(interval$$1, step) {
	    var d = domain();
	    return (interval$$1 = tickInterval(interval$$1, d[0], d[d.length - 1], step))
	        ? domain(nice(d, interval$$1))
	        : scale;
	  };

	  scale.copy = function() {
	    return copy(scale, calendar(year$$1, month$$1, week, day$$1, hour$$1, minute$$1, second$$1, millisecond$$1, format));
	  };

	  return scale;
	}

	var time = function() {
	  return calendar(year, month, sunday, day, hour, minute, second, millisecond, exports.timeFormat).domain([new Date(2000, 0, 1), new Date(2000, 0, 2)]);
	};

	var utcTime = function() {
	  return calendar(utcYear, utcMonth, utcSunday, utcDay, utcHour, utcMinute, second, millisecond, exports.utcFormat).domain([Date.UTC(2000, 0, 1), Date.UTC(2000, 0, 2)]);
	};

	var colors = function(s) {
	  return s.match(/.{6}/g).map(function(x) {
	    return "#" + x;
	  });
	};

	var category10 = colors("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf");

	var category20b = colors("393b795254a36b6ecf9c9ede6379398ca252b5cf6bcedb9c8c6d31bd9e39e7ba52e7cb94843c39ad494ad6616be7969c7b4173a55194ce6dbdde9ed6");

	var category20c = colors("3182bd6baed69ecae1c6dbefe6550dfd8d3cfdae6bfdd0a231a35474c476a1d99bc7e9c0756bb19e9ac8bcbddcdadaeb636363969696bdbdbdd9d9d9");

	var category20 = colors("1f77b4aec7e8ff7f0effbb782ca02c98df8ad62728ff98969467bdc5b0d58c564bc49c94e377c2f7b6d27f7f7fc7c7c7bcbd22dbdb8d17becf9edae5");

	var cubehelix$3 = cubehelixLong(cubehelix(300, 0.5, 0.0), cubehelix(-240, 0.5, 1.0));

	var warm = cubehelixLong(cubehelix(-100, 0.75, 0.35), cubehelix(80, 1.50, 0.8));

	var cool = cubehelixLong(cubehelix(260, 0.75, 0.35), cubehelix(80, 1.50, 0.8));

	var rainbow = cubehelix();

	var rainbow$1 = function(t) {
	  if (t < 0 || t > 1) t -= Math.floor(t);
	  var ts = Math.abs(t - 0.5);
	  rainbow.h = 360 * t - 100;
	  rainbow.s = 1.5 - 1.5 * ts;
	  rainbow.l = 0.8 - 0.9 * ts;
	  return rainbow + "";
	};

	function ramp(range) {
	  var n = range.length;
	  return function(t) {
	    return range[Math.max(0, Math.min(n - 1, Math.floor(t * n)))];
	  };
	}

	var viridis = ramp(colors("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725"));

	var magma = ramp(colors("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf"));

	var inferno = ramp(colors("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4"));

	var plasma = ramp(colors("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921"));

	function sequential(interpolator) {
	  var x0 = 0,
	      x1 = 1,
	      clamp = false;

	  function scale(x) {
	    var t = (x - x0) / (x1 - x0);
	    return interpolator(clamp ? Math.max(0, Math.min(1, t)) : t);
	  }

	  scale.domain = function(_) {
	    return arguments.length ? (x0 = +_[0], x1 = +_[1], scale) : [x0, x1];
	  };

	  scale.clamp = function(_) {
	    return arguments.length ? (clamp = !!_, scale) : clamp;
	  };

	  scale.interpolator = function(_) {
	    return arguments.length ? (interpolator = _, scale) : interpolator;
	  };

	  scale.copy = function() {
	    return sequential(interpolator).domain([x0, x1]).clamp(clamp);
	  };

	  return linearish(scale);
	}

	var constant$10 = function(x) {
	  return function constant() {
	    return x;
	  };
	};

	var abs$1 = Math.abs;
	var atan2$1 = Math.atan2;
	var cos$2 = Math.cos;
	var max$2 = Math.max;
	var min$1 = Math.min;
	var sin$2 = Math.sin;
	var sqrt$2 = Math.sqrt;

	var epsilon$3 = 1e-12;
	var pi$4 = Math.PI;
	var halfPi$3 = pi$4 / 2;
	var tau$4 = 2 * pi$4;

	function acos$1(x) {
	  return x > 1 ? 0 : x < -1 ? pi$4 : Math.acos(x);
	}

	function asin$1(x) {
	  return x >= 1 ? halfPi$3 : x <= -1 ? -halfPi$3 : Math.asin(x);
	}

	function arcInnerRadius(d) {
	  return d.innerRadius;
	}

	function arcOuterRadius(d) {
	  return d.outerRadius;
	}

	function arcStartAngle(d) {
	  return d.startAngle;
	}

	function arcEndAngle(d) {
	  return d.endAngle;
	}

	function arcPadAngle(d) {
	  return d && d.padAngle; // Note: optional!
	}

	function intersect(x0, y0, x1, y1, x2, y2, x3, y3) {
	  var x10 = x1 - x0, y10 = y1 - y0,
	      x32 = x3 - x2, y32 = y3 - y2,
	      t = (x32 * (y0 - y2) - y32 * (x0 - x2)) / (y32 * x10 - x32 * y10);
	  return [x0 + t * x10, y0 + t * y10];
	}

	// Compute perpendicular offset line of length rc.
	// http://mathworld.wolfram.com/Circle-LineIntersection.html
	function cornerTangents(x0, y0, x1, y1, r1, rc, cw) {
	  var x01 = x0 - x1,
	      y01 = y0 - y1,
	      lo = (cw ? rc : -rc) / sqrt$2(x01 * x01 + y01 * y01),
	      ox = lo * y01,
	      oy = -lo * x01,
	      x11 = x0 + ox,
	      y11 = y0 + oy,
	      x10 = x1 + ox,
	      y10 = y1 + oy,
	      x00 = (x11 + x10) / 2,
	      y00 = (y11 + y10) / 2,
	      dx = x10 - x11,
	      dy = y10 - y11,
	      d2 = dx * dx + dy * dy,
	      r = r1 - rc,
	      D = x11 * y10 - x10 * y11,
	      d = (dy < 0 ? -1 : 1) * sqrt$2(max$2(0, r * r * d2 - D * D)),
	      cx0 = (D * dy - dx * d) / d2,
	      cy0 = (-D * dx - dy * d) / d2,
	      cx1 = (D * dy + dx * d) / d2,
	      cy1 = (-D * dx + dy * d) / d2,
	      dx0 = cx0 - x00,
	      dy0 = cy0 - y00,
	      dx1 = cx1 - x00,
	      dy1 = cy1 - y00;

	  // Pick the closer of the two intersection points.
	  // TODO Is there a faster way to determine which intersection to use?
	  if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1) cx0 = cx1, cy0 = cy1;

	  return {
	    cx: cx0,
	    cy: cy0,
	    x01: -ox,
	    y01: -oy,
	    x11: cx0 * (r1 / r - 1),
	    y11: cy0 * (r1 / r - 1)
	  };
	}

	var arc = function() {
	  var innerRadius = arcInnerRadius,
	      outerRadius = arcOuterRadius,
	      cornerRadius = constant$10(0),
	      padRadius = null,
	      startAngle = arcStartAngle,
	      endAngle = arcEndAngle,
	      padAngle = arcPadAngle,
	      context = null;

	  function arc() {
	    var buffer,
	        r,
	        r0 = +innerRadius.apply(this, arguments),
	        r1 = +outerRadius.apply(this, arguments),
	        a0 = startAngle.apply(this, arguments) - halfPi$3,
	        a1 = endAngle.apply(this, arguments) - halfPi$3,
	        da = abs$1(a1 - a0),
	        cw = a1 > a0;

	    if (!context) context = buffer = path();

	    // Ensure that the outer radius is always larger than the inner radius.
	    if (r1 < r0) r = r1, r1 = r0, r0 = r;

	    // Is it a point?
	    if (!(r1 > epsilon$3)) context.moveTo(0, 0);

	    // Or is it a circle or annulus?
	    else if (da > tau$4 - epsilon$3) {
	      context.moveTo(r1 * cos$2(a0), r1 * sin$2(a0));
	      context.arc(0, 0, r1, a0, a1, !cw);
	      if (r0 > epsilon$3) {
	        context.moveTo(r0 * cos$2(a1), r0 * sin$2(a1));
	        context.arc(0, 0, r0, a1, a0, cw);
	      }
	    }

	    // Or is it a circular or annular sector?
	    else {
	      var a01 = a0,
	          a11 = a1,
	          a00 = a0,
	          a10 = a1,
	          da0 = da,
	          da1 = da,
	          ap = padAngle.apply(this, arguments) / 2,
	          rp = (ap > epsilon$3) && (padRadius ? +padRadius.apply(this, arguments) : sqrt$2(r0 * r0 + r1 * r1)),
	          rc = min$1(abs$1(r1 - r0) / 2, +cornerRadius.apply(this, arguments)),
	          rc0 = rc,
	          rc1 = rc,
	          t0,
	          t1;

	      // Apply padding? Note that since r1 ≥ r0, da1 ≥ da0.
	      if (rp > epsilon$3) {
	        var p0 = asin$1(rp / r0 * sin$2(ap)),
	            p1 = asin$1(rp / r1 * sin$2(ap));
	        if ((da0 -= p0 * 2) > epsilon$3) p0 *= (cw ? 1 : -1), a00 += p0, a10 -= p0;
	        else da0 = 0, a00 = a10 = (a0 + a1) / 2;
	        if ((da1 -= p1 * 2) > epsilon$3) p1 *= (cw ? 1 : -1), a01 += p1, a11 -= p1;
	        else da1 = 0, a01 = a11 = (a0 + a1) / 2;
	      }

	      var x01 = r1 * cos$2(a01),
	          y01 = r1 * sin$2(a01),
	          x10 = r0 * cos$2(a10),
	          y10 = r0 * sin$2(a10);

	      // Apply rounded corners?
	      if (rc > epsilon$3) {
	        var x11 = r1 * cos$2(a11),
	            y11 = r1 * sin$2(a11),
	            x00 = r0 * cos$2(a00),
	            y00 = r0 * sin$2(a00);

	        // Restrict the corner radius according to the sector angle.
	        if (da < pi$4) {
	          var oc = da0 > epsilon$3 ? intersect(x01, y01, x00, y00, x11, y11, x10, y10) : [x10, y10],
	              ax = x01 - oc[0],
	              ay = y01 - oc[1],
	              bx = x11 - oc[0],
	              by = y11 - oc[1],
	              kc = 1 / sin$2(acos$1((ax * bx + ay * by) / (sqrt$2(ax * ax + ay * ay) * sqrt$2(bx * bx + by * by))) / 2),
	              lc = sqrt$2(oc[0] * oc[0] + oc[1] * oc[1]);
	          rc0 = min$1(rc, (r0 - lc) / (kc - 1));
	          rc1 = min$1(rc, (r1 - lc) / (kc + 1));
	        }
	      }

	      // Is the sector collapsed to a line?
	      if (!(da1 > epsilon$3)) context.moveTo(x01, y01);

	      // Does the sector’s outer ring have rounded corners?
	      else if (rc1 > epsilon$3) {
	        t0 = cornerTangents(x00, y00, x01, y01, r1, rc1, cw);
	        t1 = cornerTangents(x11, y11, x10, y10, r1, rc1, cw);

	        context.moveTo(t0.cx + t0.x01, t0.cy + t0.y01);

	        // Have the corners merged?
	        if (rc1 < rc) context.arc(t0.cx, t0.cy, rc1, atan2$1(t0.y01, t0.x01), atan2$1(t1.y01, t1.x01), !cw);

	        // Otherwise, draw the two corners and the ring.
	        else {
	          context.arc(t0.cx, t0.cy, rc1, atan2$1(t0.y01, t0.x01), atan2$1(t0.y11, t0.x11), !cw);
	          context.arc(0, 0, r1, atan2$1(t0.cy + t0.y11, t0.cx + t0.x11), atan2$1(t1.cy + t1.y11, t1.cx + t1.x11), !cw);
	          context.arc(t1.cx, t1.cy, rc1, atan2$1(t1.y11, t1.x11), atan2$1(t1.y01, t1.x01), !cw);
	        }
	      }

	      // Or is the outer ring just a circular arc?
	      else context.moveTo(x01, y01), context.arc(0, 0, r1, a01, a11, !cw);

	      // Is there no inner ring, and it’s a circular sector?
	      // Or perhaps it’s an annular sector collapsed due to padding?
	      if (!(r0 > epsilon$3) || !(da0 > epsilon$3)) context.lineTo(x10, y10);

	      // Does the sector’s inner ring (or point) have rounded corners?
	      else if (rc0 > epsilon$3) {
	        t0 = cornerTangents(x10, y10, x11, y11, r0, -rc0, cw);
	        t1 = cornerTangents(x01, y01, x00, y00, r0, -rc0, cw);

	        context.lineTo(t0.cx + t0.x01, t0.cy + t0.y01);

	        // Have the corners merged?
	        if (rc0 < rc) context.arc(t0.cx, t0.cy, rc0, atan2$1(t0.y01, t0.x01), atan2$1(t1.y01, t1.x01), !cw);

	        // Otherwise, draw the two corners and the ring.
	        else {
	          context.arc(t0.cx, t0.cy, rc0, atan2$1(t0.y01, t0.x01), atan2$1(t0.y11, t0.x11), !cw);
	          context.arc(0, 0, r0, atan2$1(t0.cy + t0.y11, t0.cx + t0.x11), atan2$1(t1.cy + t1.y11, t1.cx + t1.x11), cw);
	          context.arc(t1.cx, t1.cy, rc0, atan2$1(t1.y11, t1.x11), atan2$1(t1.y01, t1.x01), !cw);
	        }
	      }

	      // Or is the inner ring just a circular arc?
	      else context.arc(0, 0, r0, a10, a00, cw);
	    }

	    context.closePath();

	    if (buffer) return context = null, buffer + "" || null;
	  }

	  arc.centroid = function() {
	    var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2,
	        a = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - pi$4 / 2;
	    return [cos$2(a) * r, sin$2(a) * r];
	  };

	  arc.innerRadius = function(_) {
	    return arguments.length ? (innerRadius = typeof _ === "function" ? _ : constant$10(+_), arc) : innerRadius;
	  };

	  arc.outerRadius = function(_) {
	    return arguments.length ? (outerRadius = typeof _ === "function" ? _ : constant$10(+_), arc) : outerRadius;
	  };

	  arc.cornerRadius = function(_) {
	    return arguments.length ? (cornerRadius = typeof _ === "function" ? _ : constant$10(+_), arc) : cornerRadius;
	  };

	  arc.padRadius = function(_) {
	    return arguments.length ? (padRadius = _ == null ? null : typeof _ === "function" ? _ : constant$10(+_), arc) : padRadius;
	  };

	  arc.startAngle = function(_) {
	    return arguments.length ? (startAngle = typeof _ === "function" ? _ : constant$10(+_), arc) : startAngle;
	  };

	  arc.endAngle = function(_) {
	    return arguments.length ? (endAngle = typeof _ === "function" ? _ : constant$10(+_), arc) : endAngle;
	  };

	  arc.padAngle = function(_) {
	    return arguments.length ? (padAngle = typeof _ === "function" ? _ : constant$10(+_), arc) : padAngle;
	  };

	  arc.context = function(_) {
	    return arguments.length ? ((context = _ == null ? null : _), arc) : context;
	  };

	  return arc;
	};

	function Linear(context) {
	  this._context = context;
	}

	Linear.prototype = {
	  areaStart: function() {
	    this._line = 0;
	  },
	  areaEnd: function() {
	    this._line = NaN;
	  },
	  lineStart: function() {
	    this._point = 0;
	  },
	  lineEnd: function() {
	    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
	    this._line = 1 - this._line;
	  },
	  point: function(x, y) {
	    x = +x, y = +y;
	    switch (this._point) {
	      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
	      case 1: this._point = 2; // proceed
	      default: this._context.lineTo(x, y); break;
	    }
	  }
	};

	var curveLinear = function(context) {
	  return new Linear(context);
	};

	function x$3(p) {
	  return p[0];
	}

	function y$3(p) {
	  return p[1];
	}

	var line = function() {
	  var x = x$3,
	      y = y$3,
	      defined = constant$10(true),
	      context = null,
	      curve = curveLinear,
	      output = null;

	  function line(data) {
	    var i,
	        n = data.length,
	        d,
	        defined0 = false,
	        buffer;

	    if (context == null) output = curve(buffer = path());

	    for (i = 0; i <= n; ++i) {
	      if (!(i < n && defined(d = data[i], i, data)) === defined0) {
	        if (defined0 = !defined0) output.lineStart();
	        else output.lineEnd();
	      }
	      if (defined0) output.point(+x(d, i, data), +y(d, i, data));
	    }

	    if (buffer) return output = null, buffer + "" || null;
	  }

	  line.x = function(_) {
	    return arguments.length ? (x = typeof _ === "function" ? _ : constant$10(+_), line) : x;
	  };

	  line.y = function(_) {
	    return arguments.length ? (y = typeof _ === "function" ? _ : constant$10(+_), line) : y;
	  };

	  line.defined = function(_) {
	    return arguments.length ? (defined = typeof _ === "function" ? _ : constant$10(!!_), line) : defined;
	  };

	  line.curve = function(_) {
	    return arguments.length ? (curve = _, context != null && (output = curve(context)), line) : curve;
	  };

	  line.context = function(_) {
	    return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), line) : context;
	  };

	  return line;
	};

	var area$2 = function() {
	  var x0 = x$3,
	      x1 = null,
	      y0 = constant$10(0),
	      y1 = y$3,
	      defined = constant$10(true),
	      context = null,
	      curve = curveLinear,
	      output = null;

	  function area(data) {
	    var i,
	        j,
	        k,
	        n = data.length,
	        d,
	        defined0 = false,
	        buffer,
	        x0z = new Array(n),
	        y0z = new Array(n);

	    if (context == null) output = curve(buffer = path());

	    for (i = 0; i <= n; ++i) {
	      if (!(i < n && defined(d = data[i], i, data)) === defined0) {
	        if (defined0 = !defined0) {
	          j = i;
	          output.areaStart();
	          output.lineStart();
	        } else {
	          output.lineEnd();
	          output.lineStart();
	          for (k = i - 1; k >= j; --k) {
	            output.point(x0z[k], y0z[k]);
	          }
	          output.lineEnd();
	          output.areaEnd();
	        }
	      }
	      if (defined0) {
	        x0z[i] = +x0(d, i, data), y0z[i] = +y0(d, i, data);
	        output.point(x1 ? +x1(d, i, data) : x0z[i], y1 ? +y1(d, i, data) : y0z[i]);
	      }
	    }

	    if (buffer) return output = null, buffer + "" || null;
	  }

	  function arealine() {
	    return line().defined(defined).curve(curve).context(context);
	  }

	  area.x = function(_) {
	    return arguments.length ? (x0 = typeof _ === "function" ? _ : constant$10(+_), x1 = null, area) : x0;
	  };

	  area.x0 = function(_) {
	    return arguments.length ? (x0 = typeof _ === "function" ? _ : constant$10(+_), area) : x0;
	  };

	  area.x1 = function(_) {
	    return arguments.length ? (x1 = _ == null ? null : typeof _ === "function" ? _ : constant$10(+_), area) : x1;
	  };

	  area.y = function(_) {
	    return arguments.length ? (y0 = typeof _ === "function" ? _ : constant$10(+_), y1 = null, area) : y0;
	  };

	  area.y0 = function(_) {
	    return arguments.length ? (y0 = typeof _ === "function" ? _ : constant$10(+_), area) : y0;
	  };

	  area.y1 = function(_) {
	    return arguments.length ? (y1 = _ == null ? null : typeof _ === "function" ? _ : constant$10(+_), area) : y1;
	  };

	  area.lineX0 =
	  area.lineY0 = function() {
	    return arealine().x(x0).y(y0);
	  };

	  area.lineY1 = function() {
	    return arealine().x(x0).y(y1);
	  };

	  area.lineX1 = function() {
	    return arealine().x(x1).y(y0);
	  };

	  area.defined = function(_) {
	    return arguments.length ? (defined = typeof _ === "function" ? _ : constant$10(!!_), area) : defined;
	  };

	  area.curve = function(_) {
	    return arguments.length ? (curve = _, context != null && (output = curve(context)), area) : curve;
	  };

	  area.context = function(_) {
	    return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), area) : context;
	  };

	  return area;
	};

	var descending$1 = function(a, b) {
	  return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;
	};

	var identity$7 = function(d) {
	  return d;
	};

	var pie = function() {
	  var value = identity$7,
	      sortValues = descending$1,
	      sort = null,
	      startAngle = constant$10(0),
	      endAngle = constant$10(tau$4),
	      padAngle = constant$10(0);

	  function pie(data) {
	    var i,
	        n = data.length,
	        j,
	        k,
	        sum = 0,
	        index = new Array(n),
	        arcs = new Array(n),
	        a0 = +startAngle.apply(this, arguments),
	        da = Math.min(tau$4, Math.max(-tau$4, endAngle.apply(this, arguments) - a0)),
	        a1,
	        p = Math.min(Math.abs(da) / n, padAngle.apply(this, arguments)),
	        pa = p * (da < 0 ? -1 : 1),
	        v;

	    for (i = 0; i < n; ++i) {
	      if ((v = arcs[index[i] = i] = +value(data[i], i, data)) > 0) {
	        sum += v;
	      }
	    }

	    // Optionally sort the arcs by previously-computed values or by data.
	    if (sortValues != null) index.sort(function(i, j) { return sortValues(arcs[i], arcs[j]); });
	    else if (sort != null) index.sort(function(i, j) { return sort(data[i], data[j]); });

	    // Compute the arcs! They are stored in the original data's order.
	    for (i = 0, k = sum ? (da - n * pa) / sum : 0; i < n; ++i, a0 = a1) {
	      j = index[i], v = arcs[j], a1 = a0 + (v > 0 ? v * k : 0) + pa, arcs[j] = {
	        data: data[j],
	        index: i,
	        value: v,
	        startAngle: a0,
	        endAngle: a1,
	        padAngle: p
	      };
	    }

	    return arcs;
	  }

	  pie.value = function(_) {
	    return arguments.length ? (value = typeof _ === "function" ? _ : constant$10(+_), pie) : value;
	  };

	  pie.sortValues = function(_) {
	    return arguments.length ? (sortValues = _, sort = null, pie) : sortValues;
	  };

	  pie.sort = function(_) {
	    return arguments.length ? (sort = _, sortValues = null, pie) : sort;
	  };

	  pie.startAngle = function(_) {
	    return arguments.length ? (startAngle = typeof _ === "function" ? _ : constant$10(+_), pie) : startAngle;
	  };

	  pie.endAngle = function(_) {
	    return arguments.length ? (endAngle = typeof _ === "function" ? _ : constant$10(+_), pie) : endAngle;
	  };

	  pie.padAngle = function(_) {
	    return arguments.length ? (padAngle = typeof _ === "function" ? _ : constant$10(+_), pie) : padAngle;
	  };

	  return pie;
	};

	var curveRadialLinear = curveRadial(curveLinear);

	function Radial(curve) {
	  this._curve = curve;
	}

	Radial.prototype = {
	  areaStart: function() {
	    this._curve.areaStart();
	  },
	  areaEnd: function() {
	    this._curve.areaEnd();
	  },
	  lineStart: function() {
	    this._curve.lineStart();
	  },
	  lineEnd: function() {
	    this._curve.lineEnd();
	  },
	  point: function(a, r) {
	    this._curve.point(r * Math.sin(a), r * -Math.cos(a));
	  }
	};

	function curveRadial(curve) {

	  function radial(context) {
	    return new Radial(curve(context));
	  }

	  radial._curve = curve;

	  return radial;
	}

	function lineRadial(l) {
	  var c = l.curve;

	  l.angle = l.x, delete l.x;
	  l.radius = l.y, delete l.y;

	  l.curve = function(_) {
	    return arguments.length ? c(curveRadial(_)) : c()._curve;
	  };

	  return l;
	}

	var lineRadial$1 = function() {
	  return lineRadial(line().curve(curveRadialLinear));
	};

	var areaRadial = function() {
	  var a = area$2().curve(curveRadialLinear),
	      c = a.curve,
	      x0 = a.lineX0,
	      x1 = a.lineX1,
	      y0 = a.lineY0,
	      y1 = a.lineY1;

	  a.angle = a.x, delete a.x;
	  a.startAngle = a.x0, delete a.x0;
	  a.endAngle = a.x1, delete a.x1;
	  a.radius = a.y, delete a.y;
	  a.innerRadius = a.y0, delete a.y0;
	  a.outerRadius = a.y1, delete a.y1;
	  a.lineStartAngle = function() { return lineRadial(x0()); }, delete a.lineX0;
	  a.lineEndAngle = function() { return lineRadial(x1()); }, delete a.lineX1;
	  a.lineInnerRadius = function() { return lineRadial(y0()); }, delete a.lineY0;
	  a.lineOuterRadius = function() { return lineRadial(y1()); }, delete a.lineY1;

	  a.curve = function(_) {
	    return arguments.length ? c(curveRadial(_)) : c()._curve;
	  };

	  return a;
	};

	var pointRadial = function(x, y) {
	  return [(y = +y) * Math.cos(x -= Math.PI / 2), y * Math.sin(x)];
	};

	var slice$6 = Array.prototype.slice;

	function linkSource(d) {
	  return d.source;
	}

	function linkTarget(d) {
	  return d.target;
	}

	function link$2(curve) {
	  var source = linkSource,
	      target = linkTarget,
	      x = x$3,
	      y = y$3,
	      context = null;

	  function link() {
	    var buffer, argv = slice$6.call(arguments), s = source.apply(this, argv), t = target.apply(this, argv);
	    if (!context) context = buffer = path();
	    curve(context, +x.apply(this, (argv[0] = s, argv)), +y.apply(this, argv), +x.apply(this, (argv[0] = t, argv)), +y.apply(this, argv));
	    if (buffer) return context = null, buffer + "" || null;
	  }

	  link.source = function(_) {
	    return arguments.length ? (source = _, link) : source;
	  };

	  link.target = function(_) {
	    return arguments.length ? (target = _, link) : target;
	  };

	  link.x = function(_) {
	    return arguments.length ? (x = typeof _ === "function" ? _ : constant$10(+_), link) : x;
	  };

	  link.y = function(_) {
	    return arguments.length ? (y = typeof _ === "function" ? _ : constant$10(+_), link) : y;
	  };

	  link.context = function(_) {
	    return arguments.length ? ((context = _ == null ? null : _), link) : context;
	  };

	  return link;
	}

	function curveHorizontal(context, x0, y0, x1, y1) {
	  context.moveTo(x0, y0);
	  context.bezierCurveTo(x0 = (x0 + x1) / 2, y0, x0, y1, x1, y1);
	}

	function curveVertical(context, x0, y0, x1, y1) {
	  context.moveTo(x0, y0);
	  context.bezierCurveTo(x0, y0 = (y0 + y1) / 2, x1, y0, x1, y1);
	}

	function curveRadial$1(context, x0, y0, x1, y1) {
	  var p0 = pointRadial(x0, y0),
	      p1 = pointRadial(x0, y0 = (y0 + y1) / 2),
	      p2 = pointRadial(x1, y0),
	      p3 = pointRadial(x1, y1);
	  context.moveTo(p0[0], p0[1]);
	  context.bezierCurveTo(p1[0], p1[1], p2[0], p2[1], p3[0], p3[1]);
	}

	function linkHorizontal() {
	  return link$2(curveHorizontal);
	}

	function linkVertical() {
	  return link$2(curveVertical);
	}

	function linkRadial() {
	  var l = link$2(curveRadial$1);
	  l.angle = l.x, delete l.x;
	  l.radius = l.y, delete l.y;
	  return l;
	}

	var circle$2 = {
	  draw: function(context, size) {
	    var r = Math.sqrt(size / pi$4);
	    context.moveTo(r, 0);
	    context.arc(0, 0, r, 0, tau$4);
	  }
	};

	var cross$2 = {
	  draw: function(context, size) {
	    var r = Math.sqrt(size / 5) / 2;
	    context.moveTo(-3 * r, -r);
	    context.lineTo(-r, -r);
	    context.lineTo(-r, -3 * r);
	    context.lineTo(r, -3 * r);
	    context.lineTo(r, -r);
	    context.lineTo(3 * r, -r);
	    context.lineTo(3 * r, r);
	    context.lineTo(r, r);
	    context.lineTo(r, 3 * r);
	    context.lineTo(-r, 3 * r);
	    context.lineTo(-r, r);
	    context.lineTo(-3 * r, r);
	    context.closePath();
	  }
	};

	var tan30 = Math.sqrt(1 / 3);
	var tan30_2 = tan30 * 2;

	var diamond = {
	  draw: function(context, size) {
	    var y = Math.sqrt(size / tan30_2),
	        x = y * tan30;
	    context.moveTo(0, -y);
	    context.lineTo(x, 0);
	    context.lineTo(0, y);
	    context.lineTo(-x, 0);
	    context.closePath();
	  }
	};

	var ka = 0.89081309152928522810;
	var kr = Math.sin(pi$4 / 10) / Math.sin(7 * pi$4 / 10);
	var kx = Math.sin(tau$4 / 10) * kr;
	var ky = -Math.cos(tau$4 / 10) * kr;

	var star = {
	  draw: function(context, size) {
	    var r = Math.sqrt(size * ka),
	        x = kx * r,
	        y = ky * r;
	    context.moveTo(0, -r);
	    context.lineTo(x, y);
	    for (var i = 1; i < 5; ++i) {
	      var a = tau$4 * i / 5,
	          c = Math.cos(a),
	          s = Math.sin(a);
	      context.lineTo(s * r, -c * r);
	      context.lineTo(c * x - s * y, s * x + c * y);
	    }
	    context.closePath();
	  }
	};

	var square = {
	  draw: function(context, size) {
	    var w = Math.sqrt(size),
	        x = -w / 2;
	    context.rect(x, x, w, w);
	  }
	};

	var sqrt3 = Math.sqrt(3);

	var triangle = {
	  draw: function(context, size) {
	    var y = -Math.sqrt(size / (sqrt3 * 3));
	    context.moveTo(0, y * 2);
	    context.lineTo(-sqrt3 * y, -y);
	    context.lineTo(sqrt3 * y, -y);
	    context.closePath();
	  }
	};

	var c = -0.5;
	var s = Math.sqrt(3) / 2;
	var k = 1 / Math.sqrt(12);
	var a = (k / 2 + 1) * 3;

	var wye = {
	  draw: function(context, size) {
	    var r = Math.sqrt(size / a),
	        x0 = r / 2,
	        y0 = r * k,
	        x1 = x0,
	        y1 = r * k + r,
	        x2 = -x1,
	        y2 = y1;
	    context.moveTo(x0, y0);
	    context.lineTo(x1, y1);
	    context.lineTo(x2, y2);
	    context.lineTo(c * x0 - s * y0, s * x0 + c * y0);
	    context.lineTo(c * x1 - s * y1, s * x1 + c * y1);
	    context.lineTo(c * x2 - s * y2, s * x2 + c * y2);
	    context.lineTo(c * x0 + s * y0, c * y0 - s * x0);
	    context.lineTo(c * x1 + s * y1, c * y1 - s * x1);
	    context.lineTo(c * x2 + s * y2, c * y2 - s * x2);
	    context.closePath();
	  }
	};

	var symbols = [
	  circle$2,
	  cross$2,
	  diamond,
	  square,
	  star,
	  triangle,
	  wye
	];

	var symbol = function() {
	  var type = constant$10(circle$2),
	      size = constant$10(64),
	      context = null;

	  function symbol() {
	    var buffer;
	    if (!context) context = buffer = path();
	    type.apply(this, arguments).draw(context, +size.apply(this, arguments));
	    if (buffer) return context = null, buffer + "" || null;
	  }

	  symbol.type = function(_) {
	    return arguments.length ? (type = typeof _ === "function" ? _ : constant$10(_), symbol) : type;
	  };

	  symbol.size = function(_) {
	    return arguments.length ? (size = typeof _ === "function" ? _ : constant$10(+_), symbol) : size;
	  };

	  symbol.context = function(_) {
	    return arguments.length ? (context = _ == null ? null : _, symbol) : context;
	  };

	  return symbol;
	};

	var noop$2 = function() {};

	function point$2(that, x, y) {
	  that._context.bezierCurveTo(
	    (2 * that._x0 + that._x1) / 3,
	    (2 * that._y0 + that._y1) / 3,
	    (that._x0 + 2 * that._x1) / 3,
	    (that._y0 + 2 * that._y1) / 3,
	    (that._x0 + 4 * that._x1 + x) / 6,
	    (that._y0 + 4 * that._y1 + y) / 6
	  );
	}

	function Basis(context) {
	  this._context = context;
	}

	Basis.prototype = {
	  areaStart: function() {
	    this._line = 0;
	  },
	  areaEnd: function() {
	    this._line = NaN;
	  },
	  lineStart: function() {
	    this._x0 = this._x1 =
	    this._y0 = this._y1 = NaN;
	    this._point = 0;
	  },
	  lineEnd: function() {
	    switch (this._point) {
	      case 3: point$2(this, this._x1, this._y1); // proceed
	      case 2: this._context.lineTo(this._x1, this._y1); break;
	    }
	    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
	    this._line = 1 - this._line;
	  },
	  point: function(x, y) {
	    x = +x, y = +y;
	    switch (this._point) {
	      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
	      case 1: this._point = 2; break;
	      case 2: this._point = 3; this._context.lineTo((5 * this._x0 + this._x1) / 6, (5 * this._y0 + this._y1) / 6); // proceed
	      default: point$2(this, x, y); break;
	    }
	    this._x0 = this._x1, this._x1 = x;
	    this._y0 = this._y1, this._y1 = y;
	  }
	};

	var basis$2 = function(context) {
	  return new Basis(context);
	};

	function BasisClosed(context) {
	  this._context = context;
	}

	BasisClosed.prototype = {
	  areaStart: noop$2,
	  areaEnd: noop$2,
	  lineStart: function() {
	    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 =
	    this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = NaN;
	    this._point = 0;
	  },
	  lineEnd: function() {
	    switch (this._point) {
	      case 1: {
	        this._context.moveTo(this._x2, this._y2);
	        this._context.closePath();
	        break;
	      }
	      case 2: {
	        this._context.moveTo((this._x2 + 2 * this._x3) / 3, (this._y2 + 2 * this._y3) / 3);
	        this._context.lineTo((this._x3 + 2 * this._x2) / 3, (this._y3 + 2 * this._y2) / 3);
	        this._context.closePath();
	        break;
	      }
	      case 3: {
	        this.point(this._x2, this._y2);
	        this.point(this._x3, this._y3);
	        this.point(this._x4, this._y4);
	        break;
	      }
	    }
	  },
	  point: function(x, y) {
	    x = +x, y = +y;
	    switch (this._point) {
	      case 0: this._point = 1; this._x2 = x, this._y2 = y; break;
	      case 1: this._point = 2; this._x3 = x, this._y3 = y; break;
	      case 2: this._point = 3; this._x4 = x, this._y4 = y; this._context.moveTo((this._x0 + 4 * this._x1 + x) / 6, (this._y0 + 4 * this._y1 + y) / 6); break;
	      default: point$2(this, x, y); break;
	    }
	    this._x0 = this._x1, this._x1 = x;
	    this._y0 = this._y1, this._y1 = y;
	  }
	};

	var basisClosed$1 = function(context) {
	  return new BasisClosed(context);
	};

	function BasisOpen(context) {
	  this._context = context;
	}

	BasisOpen.prototype = {
	  areaStart: function() {
	    this._line = 0;
	  },
	  areaEnd: function() {
	    this._line = NaN;
	  },
	  lineStart: function() {
	    this._x0 = this._x1 =
	    this._y0 = this._y1 = NaN;
	    this._point = 0;
	  },
	  lineEnd: function() {
	    if (this._line || (this._line !== 0 && this._point === 3)) this._context.closePath();
	    this._line = 1 - this._line;
	  },
	  point: function(x, y) {
	    x = +x, y = +y;
	    switch (this._point) {
	      case 0: this._point = 1; break;
	      case 1: this._point = 2; break;
	      case 2: this._point = 3; var x0 = (this._x0 + 4 * this._x1 + x) / 6, y0 = (this._y0 + 4 * this._y1 + y) / 6; this._line ? this._context.lineTo(x0, y0) : this._context.moveTo(x0, y0); break;
	      case 3: this._point = 4; // proceed
	      default: point$2(this, x, y); break;
	    }
	    this._x0 = this._x1, this._x1 = x;
	    this._y0 = this._y1, this._y1 = y;
	  }
	};

	var basisOpen = function(context) {
	  return new BasisOpen(context);
	};

	function Bundle(context, beta) {
	  this._basis = new Basis(context);
	  this._beta = beta;
	}

	Bundle.prototype = {
	  lineStart: function() {
	    this._x = [];
	    this._y = [];
	    this._basis.lineStart();
	  },
	  lineEnd: function() {
	    var x = this._x,
	        y = this._y,
	        j = x.length - 1;

	    if (j > 0) {
	      var x0 = x[0],
	          y0 = y[0],
	          dx = x[j] - x0,
	          dy = y[j] - y0,
	          i = -1,
	          t;

	      while (++i <= j) {
	        t = i / j;
	        this._basis.point(
	          this._beta * x[i] + (1 - this._beta) * (x0 + t * dx),
	          this._beta * y[i] + (1 - this._beta) * (y0 + t * dy)
	        );
	      }
	    }

	    this._x = this._y = null;
	    this._basis.lineEnd();
	  },
	  point: function(x, y) {
	    this._x.push(+x);
	    this._y.push(+y);
	  }
	};

	var bundle = (function custom(beta) {

	  function bundle(context) {
	    return beta === 1 ? new Basis(context) : new Bundle(context, beta);
	  }

	  bundle.beta = function(beta) {
	    return custom(+beta);
	  };

	  return bundle;
	})(0.85);

	function point$3(that, x, y) {
	  that._context.bezierCurveTo(
	    that._x1 + that._k * (that._x2 - that._x0),
	    that._y1 + that._k * (that._y2 - that._y0),
	    that._x2 + that._k * (that._x1 - x),
	    that._y2 + that._k * (that._y1 - y),
	    that._x2,
	    that._y2
	  );
	}

	function Cardinal(context, tension) {
	  this._context = context;
	  this._k = (1 - tension) / 6;
	}

	Cardinal.prototype = {
	  areaStart: function() {
	    this._line = 0;
	  },
	  areaEnd: function() {
	    this._line = NaN;
	  },
	  lineStart: function() {
	    this._x0 = this._x1 = this._x2 =
	    this._y0 = this._y1 = this._y2 = NaN;
	    this._point = 0;
	  },
	  lineEnd: function() {
	    switch (this._point) {
	      case 2: this._context.lineTo(this._x2, this._y2); break;
	      case 3: point$3(this, this._x1, this._y1); break;
	    }
	    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
	    this._line = 1 - this._line;
	  },
	  point: function(x, y) {
	    x = +x, y = +y;
	    switch (this._point) {
	      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
	      case 1: this._point = 2; this._x1 = x, this._y1 = y; break;
	      case 2: this._point = 3; // proceed
	      default: point$3(this, x, y); break;
	    }
	    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
	    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
	  }
	};

	var cardinal = (function custom(tension) {

	  function cardinal(context) {
	    return new Cardinal(context, tension);
	  }

	  cardinal.tension = function(tension) {
	    return custom(+tension);
	  };

	  return cardinal;
	})(0);

	function CardinalClosed(context, tension) {
	  this._context = context;
	  this._k = (1 - tension) / 6;
	}

	CardinalClosed.prototype = {
	  areaStart: noop$2,
	  areaEnd: noop$2,
	  lineStart: function() {
	    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 =
	    this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
	    this._point = 0;
	  },
	  lineEnd: function() {
	    switch (this._point) {
	      case 1: {
	        this._context.moveTo(this._x3, this._y3);
	        this._context.closePath();
	        break;
	      }
	      case 2: {
	        this._context.lineTo(this._x3, this._y3);
	        this._context.closePath();
	        break;
	      }
	      case 3: {
	        this.point(this._x3, this._y3);
	        this.point(this._x4, this._y4);
	        this.point(this._x5, this._y5);
	        break;
	      }
	    }
	  },
	  point: function(x, y) {
	    x = +x, y = +y;
	    switch (this._point) {
	      case 0: this._point = 1; this._x3 = x, this._y3 = y; break;
	      case 1: this._point = 2; this._context.moveTo(this._x4 = x, this._y4 = y); break;
	      case 2: this._point = 3; this._x5 = x, this._y5 = y; break;
	      default: point$3(this, x, y); break;
	    }
	    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
	    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
	  }
	};

	var cardinalClosed = (function custom(tension) {

	  function cardinal$$1(context) {
	    return new CardinalClosed(context, tension);
	  }

	  cardinal$$1.tension = function(tension) {
	    return custom(+tension);
	  };

	  return cardinal$$1;
	})(0);

	function CardinalOpen(context, tension) {
	  this._context = context;
	  this._k = (1 - tension) / 6;
	}

	CardinalOpen.prototype = {
	  areaStart: function() {
	    this._line = 0;
	  },
	  areaEnd: function() {
	    this._line = NaN;
	  },
	  lineStart: function() {
	    this._x0 = this._x1 = this._x2 =
	    this._y0 = this._y1 = this._y2 = NaN;
	    this._point = 0;
	  },
	  lineEnd: function() {
	    if (this._line || (this._line !== 0 && this._point === 3)) this._context.closePath();
	    this._line = 1 - this._line;
	  },
	  point: function(x, y) {
	    x = +x, y = +y;
	    switch (this._point) {
	      case 0: this._point = 1; break;
	      case 1: this._point = 2; break;
	      case 2: this._point = 3; this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2); break;
	      case 3: this._point = 4; // proceed
	      default: point$3(this, x, y); break;
	    }
	    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
	    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
	  }
	};

	var cardinalOpen = (function custom(tension) {

	  function cardinal$$1(context) {
	    return new CardinalOpen(context, tension);
	  }

	  cardinal$$1.tension = function(tension) {
	    return custom(+tension);
	  };

	  return cardinal$$1;
	})(0);

	function point$4(that, x, y) {
	  var x1 = that._x1,
	      y1 = that._y1,
	      x2 = that._x2,
	      y2 = that._y2;

	  if (that._l01_a > epsilon$3) {
	    var a = 2 * that._l01_2a + 3 * that._l01_a * that._l12_a + that._l12_2a,
	        n = 3 * that._l01_a * (that._l01_a + that._l12_a);
	    x1 = (x1 * a - that._x0 * that._l12_2a + that._x2 * that._l01_2a) / n;
	    y1 = (y1 * a - that._y0 * that._l12_2a + that._y2 * that._l01_2a) / n;
	  }

	  if (that._l23_a > epsilon$3) {
	    var b = 2 * that._l23_2a + 3 * that._l23_a * that._l12_a + that._l12_2a,
	        m = 3 * that._l23_a * (that._l23_a + that._l12_a);
	    x2 = (x2 * b + that._x1 * that._l23_2a - x * that._l12_2a) / m;
	    y2 = (y2 * b + that._y1 * that._l23_2a - y * that._l12_2a) / m;
	  }

	  that._context.bezierCurveTo(x1, y1, x2, y2, that._x2, that._y2);
	}

	function CatmullRom(context, alpha) {
	  this._context = context;
	  this._alpha = alpha;
	}

	CatmullRom.prototype = {
	  areaStart: function() {
	    this._line = 0;
	  },
	  areaEnd: function() {
	    this._line = NaN;
	  },
	  lineStart: function() {
	    this._x0 = this._x1 = this._x2 =
	    this._y0 = this._y1 = this._y2 = NaN;
	    this._l01_a = this._l12_a = this._l23_a =
	    this._l01_2a = this._l12_2a = this._l23_2a =
	    this._point = 0;
	  },
	  lineEnd: function() {
	    switch (this._point) {
	      case 2: this._context.lineTo(this._x2, this._y2); break;
	      case 3: this.point(this._x2, this._y2); break;
	    }
	    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
	    this._line = 1 - this._line;
	  },
	  point: function(x, y) {
	    x = +x, y = +y;

	    if (this._point) {
	      var x23 = this._x2 - x,
	          y23 = this._y2 - y;
	      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
	    }

	    switch (this._point) {
	      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
	      case 1: this._point = 2; break;
	      case 2: this._point = 3; // proceed
	      default: point$4(this, x, y); break;
	    }

	    this._l01_a = this._l12_a, this._l12_a = this._l23_a;
	    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
	    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
	    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
	  }
	};

	var catmullRom = (function custom(alpha) {

	  function catmullRom(context) {
	    return alpha ? new CatmullRom(context, alpha) : new Cardinal(context, 0);
	  }

	  catmullRom.alpha = function(alpha) {
	    return custom(+alpha);
	  };

	  return catmullRom;
	})(0.5);

	function CatmullRomClosed(context, alpha) {
	  this._context = context;
	  this._alpha = alpha;
	}

	CatmullRomClosed.prototype = {
	  areaStart: noop$2,
	  areaEnd: noop$2,
	  lineStart: function() {
	    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 =
	    this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
	    this._l01_a = this._l12_a = this._l23_a =
	    this._l01_2a = this._l12_2a = this._l23_2a =
	    this._point = 0;
	  },
	  lineEnd: function() {
	    switch (this._point) {
	      case 1: {
	        this._context.moveTo(this._x3, this._y3);
	        this._context.closePath();
	        break;
	      }
	      case 2: {
	        this._context.lineTo(this._x3, this._y3);
	        this._context.closePath();
	        break;
	      }
	      case 3: {
	        this.point(this._x3, this._y3);
	        this.point(this._x4, this._y4);
	        this.point(this._x5, this._y5);
	        break;
	      }
	    }
	  },
	  point: function(x, y) {
	    x = +x, y = +y;

	    if (this._point) {
	      var x23 = this._x2 - x,
	          y23 = this._y2 - y;
	      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
	    }

	    switch (this._point) {
	      case 0: this._point = 1; this._x3 = x, this._y3 = y; break;
	      case 1: this._point = 2; this._context.moveTo(this._x4 = x, this._y4 = y); break;
	      case 2: this._point = 3; this._x5 = x, this._y5 = y; break;
	      default: point$4(this, x, y); break;
	    }

	    this._l01_a = this._l12_a, this._l12_a = this._l23_a;
	    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
	    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
	    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
	  }
	};

	var catmullRomClosed = (function custom(alpha) {

	  function catmullRom$$1(context) {
	    return alpha ? new CatmullRomClosed(context, alpha) : new CardinalClosed(context, 0);
	  }

	  catmullRom$$1.alpha = function(alpha) {
	    return custom(+alpha);
	  };

	  return catmullRom$$1;
	})(0.5);

	function CatmullRomOpen(context, alpha) {
	  this._context = context;
	  this._alpha = alpha;
	}

	CatmullRomOpen.prototype = {
	  areaStart: function() {
	    this._line = 0;
	  },
	  areaEnd: function() {
	    this._line = NaN;
	  },
	  lineStart: function() {
	    this._x0 = this._x1 = this._x2 =
	    this._y0 = this._y1 = this._y2 = NaN;
	    this._l01_a = this._l12_a = this._l23_a =
	    this._l01_2a = this._l12_2a = this._l23_2a =
	    this._point = 0;
	  },
	  lineEnd: function() {
	    if (this._line || (this._line !== 0 && this._point === 3)) this._context.closePath();
	    this._line = 1 - this._line;
	  },
	  point: function(x, y) {
	    x = +x, y = +y;

	    if (this._point) {
	      var x23 = this._x2 - x,
	          y23 = this._y2 - y;
	      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
	    }

	    switch (this._point) {
	      case 0: this._point = 1; break;
	      case 1: this._point = 2; break;
	      case 2: this._point = 3; this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2); break;
	      case 3: this._point = 4; // proceed
	      default: point$4(this, x, y); break;
	    }

	    this._l01_a = this._l12_a, this._l12_a = this._l23_a;
	    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
	    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
	    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
	  }
	};

	var catmullRomOpen = (function custom(alpha) {

	  function catmullRom$$1(context) {
	    return alpha ? new CatmullRomOpen(context, alpha) : new CardinalOpen(context, 0);
	  }

	  catmullRom$$1.alpha = function(alpha) {
	    return custom(+alpha);
	  };

	  return catmullRom$$1;
	})(0.5);

	function LinearClosed(context) {
	  this._context = context;
	}

	LinearClosed.prototype = {
	  areaStart: noop$2,
	  areaEnd: noop$2,
	  lineStart: function() {
	    this._point = 0;
	  },
	  lineEnd: function() {
	    if (this._point) this._context.closePath();
	  },
	  point: function(x, y) {
	    x = +x, y = +y;
	    if (this._point) this._context.lineTo(x, y);
	    else this._point = 1, this._context.moveTo(x, y);
	  }
	};

	var linearClosed = function(context) {
	  return new LinearClosed(context);
	};

	function sign$1(x) {
	  return x < 0 ? -1 : 1;
	}

	// Calculate the slopes of the tangents (Hermite-type interpolation) based on
	// the following paper: Steffen, M. 1990. A Simple Method for Monotonic
	// Interpolation in One Dimension. Astronomy and Astrophysics, Vol. 239, NO.
	// NOV(II), P. 443, 1990.
	function slope3(that, x2, y2) {
	  var h0 = that._x1 - that._x0,
	      h1 = x2 - that._x1,
	      s0 = (that._y1 - that._y0) / (h0 || h1 < 0 && -0),
	      s1 = (y2 - that._y1) / (h1 || h0 < 0 && -0),
	      p = (s0 * h1 + s1 * h0) / (h0 + h1);
	  return (sign$1(s0) + sign$1(s1)) * Math.min(Math.abs(s0), Math.abs(s1), 0.5 * Math.abs(p)) || 0;
	}

	// Calculate a one-sided slope.
	function slope2(that, t) {
	  var h = that._x1 - that._x0;
	  return h ? (3 * (that._y1 - that._y0) / h - t) / 2 : t;
	}

	// According to https://en.wikipedia.org/wiki/Cubic_Hermite_spline#Representations
	// "you can express cubic Hermite interpolation in terms of cubic Bézier curves
	// with respect to the four values p0, p0 + m0 / 3, p1 - m1 / 3, p1".
	function point$5(that, t0, t1) {
	  var x0 = that._x0,
	      y0 = that._y0,
	      x1 = that._x1,
	      y1 = that._y1,
	      dx = (x1 - x0) / 3;
	  that._context.bezierCurveTo(x0 + dx, y0 + dx * t0, x1 - dx, y1 - dx * t1, x1, y1);
	}

	function MonotoneX(context) {
	  this._context = context;
	}

	MonotoneX.prototype = {
	  areaStart: function() {
	    this._line = 0;
	  },
	  areaEnd: function() {
	    this._line = NaN;
	  },
	  lineStart: function() {
	    this._x0 = this._x1 =
	    this._y0 = this._y1 =
	    this._t0 = NaN;
	    this._point = 0;
	  },
	  lineEnd: function() {
	    switch (this._point) {
	      case 2: this._context.lineTo(this._x1, this._y1); break;
	      case 3: point$5(this, this._t0, slope2(this, this._t0)); break;
	    }
	    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
	    this._line = 1 - this._line;
	  },
	  point: function(x, y) {
	    var t1 = NaN;

	    x = +x, y = +y;
	    if (x === this._x1 && y === this._y1) return; // Ignore coincident points.
	    switch (this._point) {
	      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
	      case 1: this._point = 2; break;
	      case 2: this._point = 3; point$5(this, slope2(this, t1 = slope3(this, x, y)), t1); break;
	      default: point$5(this, this._t0, t1 = slope3(this, x, y)); break;
	    }

	    this._x0 = this._x1, this._x1 = x;
	    this._y0 = this._y1, this._y1 = y;
	    this._t0 = t1;
	  }
	};

	function MonotoneY(context) {
	  this._context = new ReflectContext(context);
	}

	(MonotoneY.prototype = Object.create(MonotoneX.prototype)).point = function(x, y) {
	  MonotoneX.prototype.point.call(this, y, x);
	};

	function ReflectContext(context) {
	  this._context = context;
	}

	ReflectContext.prototype = {
	  moveTo: function(x, y) { this._context.moveTo(y, x); },
	  closePath: function() { this._context.closePath(); },
	  lineTo: function(x, y) { this._context.lineTo(y, x); },
	  bezierCurveTo: function(x1, y1, x2, y2, x, y) { this._context.bezierCurveTo(y1, x1, y2, x2, y, x); }
	};

	function monotoneX(context) {
	  return new MonotoneX(context);
	}

	function monotoneY(context) {
	  return new MonotoneY(context);
	}

	function Natural(context) {
	  this._context = context;
	}

	Natural.prototype = {
	  areaStart: function() {
	    this._line = 0;
	  },
	  areaEnd: function() {
	    this._line = NaN;
	  },
	  lineStart: function() {
	    this._x = [];
	    this._y = [];
	  },
	  lineEnd: function() {
	    var x = this._x,
	        y = this._y,
	        n = x.length;

	    if (n) {
	      this._line ? this._context.lineTo(x[0], y[0]) : this._context.moveTo(x[0], y[0]);
	      if (n === 2) {
	        this._context.lineTo(x[1], y[1]);
	      } else {
	        var px = controlPoints(x),
	            py = controlPoints(y);
	        for (var i0 = 0, i1 = 1; i1 < n; ++i0, ++i1) {
	          this._context.bezierCurveTo(px[0][i0], py[0][i0], px[1][i0], py[1][i0], x[i1], y[i1]);
	        }
	      }
	    }

	    if (this._line || (this._line !== 0 && n === 1)) this._context.closePath();
	    this._line = 1 - this._line;
	    this._x = this._y = null;
	  },
	  point: function(x, y) {
	    this._x.push(+x);
	    this._y.push(+y);
	  }
	};

	// See https://www.particleincell.com/2012/bezier-splines/ for derivation.
	function controlPoints(x) {
	  var i,
	      n = x.length - 1,
	      m,
	      a = new Array(n),
	      b = new Array(n),
	      r = new Array(n);
	  a[0] = 0, b[0] = 2, r[0] = x[0] + 2 * x[1];
	  for (i = 1; i < n - 1; ++i) a[i] = 1, b[i] = 4, r[i] = 4 * x[i] + 2 * x[i + 1];
	  a[n - 1] = 2, b[n - 1] = 7, r[n - 1] = 8 * x[n - 1] + x[n];
	  for (i = 1; i < n; ++i) m = a[i] / b[i - 1], b[i] -= m, r[i] -= m * r[i - 1];
	  a[n - 1] = r[n - 1] / b[n - 1];
	  for (i = n - 2; i >= 0; --i) a[i] = (r[i] - a[i + 1]) / b[i];
	  b[n - 1] = (x[n] + a[n - 1]) / 2;
	  for (i = 0; i < n - 1; ++i) b[i] = 2 * x[i + 1] - a[i + 1];
	  return [a, b];
	}

	var natural = function(context) {
	  return new Natural(context);
	};

	function Step(context, t) {
	  this._context = context;
	  this._t = t;
	}

	Step.prototype = {
	  areaStart: function() {
	    this._line = 0;
	  },
	  areaEnd: function() {
	    this._line = NaN;
	  },
	  lineStart: function() {
	    this._x = this._y = NaN;
	    this._point = 0;
	  },
	  lineEnd: function() {
	    if (0 < this._t && this._t < 1 && this._point === 2) this._context.lineTo(this._x, this._y);
	    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
	    if (this._line >= 0) this._t = 1 - this._t, this._line = 1 - this._line;
	  },
	  point: function(x, y) {
	    x = +x, y = +y;
	    switch (this._point) {
	      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
	      case 1: this._point = 2; // proceed
	      default: {
	        if (this._t <= 0) {
	          this._context.lineTo(this._x, y);
	          this._context.lineTo(x, y);
	        } else {
	          var x1 = this._x * (1 - this._t) + x * this._t;
	          this._context.lineTo(x1, this._y);
	          this._context.lineTo(x1, y);
	        }
	        break;
	      }
	    }
	    this._x = x, this._y = y;
	  }
	};

	var step = function(context) {
	  return new Step(context, 0.5);
	};

	function stepBefore(context) {
	  return new Step(context, 0);
	}

	function stepAfter(context) {
	  return new Step(context, 1);
	}

	var none$1 = function(series, order) {
	  if (!((n = series.length) > 1)) return;
	  for (var i = 1, j, s0, s1 = series[order[0]], n, m = s1.length; i < n; ++i) {
	    s0 = s1, s1 = series[order[i]];
	    for (j = 0; j < m; ++j) {
	      s1[j][1] += s1[j][0] = isNaN(s0[j][1]) ? s0[j][0] : s0[j][1];
	    }
	  }
	};

	var none$2 = function(series) {
	  var n = series.length, o = new Array(n);
	  while (--n >= 0) o[n] = n;
	  return o;
	};

	function stackValue(d, key) {
	  return d[key];
	}

	var stack = function() {
	  var keys = constant$10([]),
	      order = none$2,
	      offset = none$1,
	      value = stackValue;

	  function stack(data) {
	    var kz = keys.apply(this, arguments),
	        i,
	        m = data.length,
	        n = kz.length,
	        sz = new Array(n),
	        oz;

	    for (i = 0; i < n; ++i) {
	      for (var ki = kz[i], si = sz[i] = new Array(m), j = 0, sij; j < m; ++j) {
	        si[j] = sij = [0, +value(data[j], ki, j, data)];
	        sij.data = data[j];
	      }
	      si.key = ki;
	    }

	    for (i = 0, oz = order(sz); i < n; ++i) {
	      sz[oz[i]].index = i;
	    }

	    offset(sz, oz);
	    return sz;
	  }

	  stack.keys = function(_) {
	    return arguments.length ? (keys = typeof _ === "function" ? _ : constant$10(slice$6.call(_)), stack) : keys;
	  };

	  stack.value = function(_) {
	    return arguments.length ? (value = typeof _ === "function" ? _ : constant$10(+_), stack) : value;
	  };

	  stack.order = function(_) {
	    return arguments.length ? (order = _ == null ? none$2 : typeof _ === "function" ? _ : constant$10(slice$6.call(_)), stack) : order;
	  };

	  stack.offset = function(_) {
	    return arguments.length ? (offset = _ == null ? none$1 : _, stack) : offset;
	  };

	  return stack;
	};

	var expand = function(series, order) {
	  if (!((n = series.length) > 0)) return;
	  for (var i, n, j = 0, m = series[0].length, y; j < m; ++j) {
	    for (y = i = 0; i < n; ++i) y += series[i][j][1] || 0;
	    if (y) for (i = 0; i < n; ++i) series[i][j][1] /= y;
	  }
	  none$1(series, order);
	};

	var diverging = function(series, order) {
	  if (!((n = series.length) > 1)) return;
	  for (var i, j = 0, d, dy, yp, yn, n, m = series[order[0]].length; j < m; ++j) {
	    for (yp = yn = 0, i = 0; i < n; ++i) {
	      if ((dy = (d = series[order[i]][j])[1] - d[0]) >= 0) {
	        d[0] = yp, d[1] = yp += dy;
	      } else if (dy < 0) {
	        d[1] = yn, d[0] = yn += dy;
	      } else {
	        d[0] = yp;
	      }
	    }
	  }
	};

	var silhouette = function(series, order) {
	  if (!((n = series.length) > 0)) return;
	  for (var j = 0, s0 = series[order[0]], n, m = s0.length; j < m; ++j) {
	    for (var i = 0, y = 0; i < n; ++i) y += series[i][j][1] || 0;
	    s0[j][1] += s0[j][0] = -y / 2;
	  }
	  none$1(series, order);
	};

	var wiggle = function(series, order) {
	  if (!((n = series.length) > 0) || !((m = (s0 = series[order[0]]).length) > 0)) return;
	  for (var y = 0, j = 1, s0, m, n; j < m; ++j) {
	    for (var i = 0, s1 = 0, s2 = 0; i < n; ++i) {
	      var si = series[order[i]],
	          sij0 = si[j][1] || 0,
	          sij1 = si[j - 1][1] || 0,
	          s3 = (sij0 - sij1) / 2;
	      for (var k = 0; k < i; ++k) {
	        var sk = series[order[k]],
	            skj0 = sk[j][1] || 0,
	            skj1 = sk[j - 1][1] || 0;
	        s3 += skj0 - skj1;
	      }
	      s1 += sij0, s2 += s3 * sij0;
	    }
	    s0[j - 1][1] += s0[j - 1][0] = y;
	    if (s1) y -= s2 / s1;
	  }
	  s0[j - 1][1] += s0[j - 1][0] = y;
	  none$1(series, order);
	};

	var ascending$2 = function(series) {
	  var sums = series.map(sum$2);
	  return none$2(series).sort(function(a, b) { return sums[a] - sums[b]; });
	};

	function sum$2(series) {
	  var s = 0, i = -1, n = series.length, v;
	  while (++i < n) if (v = +series[i][1]) s += v;
	  return s;
	}

	var descending$2 = function(series) {
	  return ascending$2(series).reverse();
	};

	var insideOut = function(series) {
	  var n = series.length,
	      i,
	      j,
	      sums = series.map(sum$2),
	      order = none$2(series).sort(function(a, b) { return sums[b] - sums[a]; }),
	      top = 0,
	      bottom = 0,
	      tops = [],
	      bottoms = [];

	  for (i = 0; i < n; ++i) {
	    j = order[i];
	    if (top < bottom) {
	      top += sums[j];
	      tops.push(j);
	    } else {
	      bottom += sums[j];
	      bottoms.push(j);
	    }
	  }

	  return bottoms.reverse().concat(tops);
	};

	var reverse = function(series) {
	  return none$2(series).reverse();
	};

	var constant$11 = function(x) {
	  return function() {
	    return x;
	  };
	};

	function x$4(d) {
	  return d[0];
	}

	function y$4(d) {
	  return d[1];
	}

	function RedBlackTree() {
	  this._ = null; // root node
	}

	function RedBlackNode(node) {
	  node.U = // parent node
	  node.C = // color - true for red, false for black
	  node.L = // left node
	  node.R = // right node
	  node.P = // previous node
	  node.N = null; // next node
	}

	RedBlackTree.prototype = {
	  constructor: RedBlackTree,

	  insert: function(after, node) {
	    var parent, grandpa, uncle;

	    if (after) {
	      node.P = after;
	      node.N = after.N;
	      if (after.N) after.N.P = node;
	      after.N = node;
	      if (after.R) {
	        after = after.R;
	        while (after.L) after = after.L;
	        after.L = node;
	      } else {
	        after.R = node;
	      }
	      parent = after;
	    } else if (this._) {
	      after = RedBlackFirst(this._);
	      node.P = null;
	      node.N = after;
	      after.P = after.L = node;
	      parent = after;
	    } else {
	      node.P = node.N = null;
	      this._ = node;
	      parent = null;
	    }
	    node.L = node.R = null;
	    node.U = parent;
	    node.C = true;

	    after = node;
	    while (parent && parent.C) {
	      grandpa = parent.U;
	      if (parent === grandpa.L) {
	        uncle = grandpa.R;
	        if (uncle && uncle.C) {
	          parent.C = uncle.C = false;
	          grandpa.C = true;
	          after = grandpa;
	        } else {
	          if (after === parent.R) {
	            RedBlackRotateLeft(this, parent);
	            after = parent;
	            parent = after.U;
	          }
	          parent.C = false;
	          grandpa.C = true;
	          RedBlackRotateRight(this, grandpa);
	        }
	      } else {
	        uncle = grandpa.L;
	        if (uncle && uncle.C) {
	          parent.C = uncle.C = false;
	          grandpa.C = true;
	          after = grandpa;
	        } else {
	          if (after === parent.L) {
	            RedBlackRotateRight(this, parent);
	            after = parent;
	            parent = after.U;
	          }
	          parent.C = false;
	          grandpa.C = true;
	          RedBlackRotateLeft(this, grandpa);
	        }
	      }
	      parent = after.U;
	    }
	    this._.C = false;
	  },

	  remove: function(node) {
	    if (node.N) node.N.P = node.P;
	    if (node.P) node.P.N = node.N;
	    node.N = node.P = null;

	    var parent = node.U,
	        sibling,
	        left = node.L,
	        right = node.R,
	        next,
	        red;

	    if (!left) next = right;
	    else if (!right) next = left;
	    else next = RedBlackFirst(right);

	    if (parent) {
	      if (parent.L === node) parent.L = next;
	      else parent.R = next;
	    } else {
	      this._ = next;
	    }

	    if (left && right) {
	      red = next.C;
	      next.C = node.C;
	      next.L = left;
	      left.U = next;
	      if (next !== right) {
	        parent = next.U;
	        next.U = node.U;
	        node = next.R;
	        parent.L = node;
	        next.R = right;
	        right.U = next;
	      } else {
	        next.U = parent;
	        parent = next;
	        node = next.R;
	      }
	    } else {
	      red = node.C;
	      node = next;
	    }

	    if (node) node.U = parent;
	    if (red) return;
	    if (node && node.C) { node.C = false; return; }

	    do {
	      if (node === this._) break;
	      if (node === parent.L) {
	        sibling = parent.R;
	        if (sibling.C) {
	          sibling.C = false;
	          parent.C = true;
	          RedBlackRotateLeft(this, parent);
	          sibling = parent.R;
	        }
	        if ((sibling.L && sibling.L.C)
	            || (sibling.R && sibling.R.C)) {
	          if (!sibling.R || !sibling.R.C) {
	            sibling.L.C = false;
	            sibling.C = true;
	            RedBlackRotateRight(this, sibling);
	            sibling = parent.R;
	          }
	          sibling.C = parent.C;
	          parent.C = sibling.R.C = false;
	          RedBlackRotateLeft(this, parent);
	          node = this._;
	          break;
	        }
	      } else {
	        sibling = parent.L;
	        if (sibling.C) {
	          sibling.C = false;
	          parent.C = true;
	          RedBlackRotateRight(this, parent);
	          sibling = parent.L;
	        }
	        if ((sibling.L && sibling.L.C)
	          || (sibling.R && sibling.R.C)) {
	          if (!sibling.L || !sibling.L.C) {
	            sibling.R.C = false;
	            sibling.C = true;
	            RedBlackRotateLeft(this, sibling);
	            sibling = parent.L;
	          }
	          sibling.C = parent.C;
	          parent.C = sibling.L.C = false;
	          RedBlackRotateRight(this, parent);
	          node = this._;
	          break;
	        }
	      }
	      sibling.C = true;
	      node = parent;
	      parent = parent.U;
	    } while (!node.C);

	    if (node) node.C = false;
	  }
	};

	function RedBlackRotateLeft(tree, node) {
	  var p = node,
	      q = node.R,
	      parent = p.U;

	  if (parent) {
	    if (parent.L === p) parent.L = q;
	    else parent.R = q;
	  } else {
	    tree._ = q;
	  }

	  q.U = parent;
	  p.U = q;
	  p.R = q.L;
	  if (p.R) p.R.U = p;
	  q.L = p;
	}

	function RedBlackRotateRight(tree, node) {
	  var p = node,
	      q = node.L,
	      parent = p.U;

	  if (parent) {
	    if (parent.L === p) parent.L = q;
	    else parent.R = q;
	  } else {
	    tree._ = q;
	  }

	  q.U = parent;
	  p.U = q;
	  p.L = q.R;
	  if (p.L) p.L.U = p;
	  q.R = p;
	}

	function RedBlackFirst(node) {
	  while (node.L) node = node.L;
	  return node;
	}

	function createEdge(left, right, v0, v1) {
	  var edge = [null, null],
	      index = edges.push(edge) - 1;
	  edge.left = left;
	  edge.right = right;
	  if (v0) setEdgeEnd(edge, left, right, v0);
	  if (v1) setEdgeEnd(edge, right, left, v1);
	  cells[left.index].halfedges.push(index);
	  cells[right.index].halfedges.push(index);
	  return edge;
	}

	function createBorderEdge(left, v0, v1) {
	  var edge = [v0, v1];
	  edge.left = left;
	  return edge;
	}

	function setEdgeEnd(edge, left, right, vertex) {
	  if (!edge[0] && !edge[1]) {
	    edge[0] = vertex;
	    edge.left = left;
	    edge.right = right;
	  } else if (edge.left === right) {
	    edge[1] = vertex;
	  } else {
	    edge[0] = vertex;
	  }
	}

	// Liang–Barsky line clipping.
	function clipEdge(edge, x0, y0, x1, y1) {
	  var a = edge[0],
	      b = edge[1],
	      ax = a[0],
	      ay = a[1],
	      bx = b[0],
	      by = b[1],
	      t0 = 0,
	      t1 = 1,
	      dx = bx - ax,
	      dy = by - ay,
	      r;

	  r = x0 - ax;
	  if (!dx && r > 0) return;
	  r /= dx;
	  if (dx < 0) {
	    if (r < t0) return;
	    if (r < t1) t1 = r;
	  } else if (dx > 0) {
	    if (r > t1) return;
	    if (r > t0) t0 = r;
	  }

	  r = x1 - ax;
	  if (!dx && r < 0) return;
	  r /= dx;
	  if (dx < 0) {
	    if (r > t1) return;
	    if (r > t0) t0 = r;
	  } else if (dx > 0) {
	    if (r < t0) return;
	    if (r < t1) t1 = r;
	  }

	  r = y0 - ay;
	  if (!dy && r > 0) return;
	  r /= dy;
	  if (dy < 0) {
	    if (r < t0) return;
	    if (r < t1) t1 = r;
	  } else if (dy > 0) {
	    if (r > t1) return;
	    if (r > t0) t0 = r;
	  }

	  r = y1 - ay;
	  if (!dy && r < 0) return;
	  r /= dy;
	  if (dy < 0) {
	    if (r > t1) return;
	    if (r > t0) t0 = r;
	  } else if (dy > 0) {
	    if (r < t0) return;
	    if (r < t1) t1 = r;
	  }

	  if (!(t0 > 0) && !(t1 < 1)) return true; // TODO Better check?

	  if (t0 > 0) edge[0] = [ax + t0 * dx, ay + t0 * dy];
	  if (t1 < 1) edge[1] = [ax + t1 * dx, ay + t1 * dy];
	  return true;
	}

	function connectEdge(edge, x0, y0, x1, y1) {
	  var v1 = edge[1];
	  if (v1) return true;

	  var v0 = edge[0],
	      left = edge.left,
	      right = edge.right,
	      lx = left[0],
	      ly = left[1],
	      rx = right[0],
	      ry = right[1],
	      fx = (lx + rx) / 2,
	      fy = (ly + ry) / 2,
	      fm,
	      fb;

	  if (ry === ly) {
	    if (fx < x0 || fx >= x1) return;
	    if (lx > rx) {
	      if (!v0) v0 = [fx, y0];
	      else if (v0[1] >= y1) return;
	      v1 = [fx, y1];
	    } else {
	      if (!v0) v0 = [fx, y1];
	      else if (v0[1] < y0) return;
	      v1 = [fx, y0];
	    }
	  } else {
	    fm = (lx - rx) / (ry - ly);
	    fb = fy - fm * fx;
	    if (fm < -1 || fm > 1) {
	      if (lx > rx) {
	        if (!v0) v0 = [(y0 - fb) / fm, y0];
	        else if (v0[1] >= y1) return;
	        v1 = [(y1 - fb) / fm, y1];
	      } else {
	        if (!v0) v0 = [(y1 - fb) / fm, y1];
	        else if (v0[1] < y0) return;
	        v1 = [(y0 - fb) / fm, y0];
	      }
	    } else {
	      if (ly < ry) {
	        if (!v0) v0 = [x0, fm * x0 + fb];
	        else if (v0[0] >= x1) return;
	        v1 = [x1, fm * x1 + fb];
	      } else {
	        if (!v0) v0 = [x1, fm * x1 + fb];
	        else if (v0[0] < x0) return;
	        v1 = [x0, fm * x0 + fb];
	      }
	    }
	  }

	  edge[0] = v0;
	  edge[1] = v1;
	  return true;
	}

	function clipEdges(x0, y0, x1, y1) {
	  var i = edges.length,
	      edge;

	  while (i--) {
	    if (!connectEdge(edge = edges[i], x0, y0, x1, y1)
	        || !clipEdge(edge, x0, y0, x1, y1)
	        || !(Math.abs(edge[0][0] - edge[1][0]) > epsilon$4
	            || Math.abs(edge[0][1] - edge[1][1]) > epsilon$4)) {
	      delete edges[i];
	    }
	  }
	}

	function createCell(site) {
	  return cells[site.index] = {
	    site: site,
	    halfedges: []
	  };
	}

	function cellHalfedgeAngle(cell, edge) {
	  var site = cell.site,
	      va = edge.left,
	      vb = edge.right;
	  if (site === vb) vb = va, va = site;
	  if (vb) return Math.atan2(vb[1] - va[1], vb[0] - va[0]);
	  if (site === va) va = edge[1], vb = edge[0];
	  else va = edge[0], vb = edge[1];
	  return Math.atan2(va[0] - vb[0], vb[1] - va[1]);
	}

	function cellHalfedgeStart(cell, edge) {
	  return edge[+(edge.left !== cell.site)];
	}

	function cellHalfedgeEnd(cell, edge) {
	  return edge[+(edge.left === cell.site)];
	}

	function sortCellHalfedges() {
	  for (var i = 0, n = cells.length, cell, halfedges, j, m; i < n; ++i) {
	    if ((cell = cells[i]) && (m = (halfedges = cell.halfedges).length)) {
	      var index = new Array(m),
	          array = new Array(m);
	      for (j = 0; j < m; ++j) index[j] = j, array[j] = cellHalfedgeAngle(cell, edges[halfedges[j]]);
	      index.sort(function(i, j) { return array[j] - array[i]; });
	      for (j = 0; j < m; ++j) array[j] = halfedges[index[j]];
	      for (j = 0; j < m; ++j) halfedges[j] = array[j];
	    }
	  }
	}

	function clipCells(x0, y0, x1, y1) {
	  var nCells = cells.length,
	      iCell,
	      cell,
	      site,
	      iHalfedge,
	      halfedges,
	      nHalfedges,
	      start,
	      startX,
	      startY,
	      end,
	      endX,
	      endY,
	      cover = true;

	  for (iCell = 0; iCell < nCells; ++iCell) {
	    if (cell = cells[iCell]) {
	      site = cell.site;
	      halfedges = cell.halfedges;
	      iHalfedge = halfedges.length;

	      // Remove any dangling clipped edges.
	      while (iHalfedge--) {
	        if (!edges[halfedges[iHalfedge]]) {
	          halfedges.splice(iHalfedge, 1);
	        }
	      }

	      // Insert any border edges as necessary.
	      iHalfedge = 0, nHalfedges = halfedges.length;
	      while (iHalfedge < nHalfedges) {
	        end = cellHalfedgeEnd(cell, edges[halfedges[iHalfedge]]), endX = end[0], endY = end[1];
	        start = cellHalfedgeStart(cell, edges[halfedges[++iHalfedge % nHalfedges]]), startX = start[0], startY = start[1];
	        if (Math.abs(endX - startX) > epsilon$4 || Math.abs(endY - startY) > epsilon$4) {
	          halfedges.splice(iHalfedge, 0, edges.push(createBorderEdge(site, end,
	              Math.abs(endX - x0) < epsilon$4 && y1 - endY > epsilon$4 ? [x0, Math.abs(startX - x0) < epsilon$4 ? startY : y1]
	              : Math.abs(endY - y1) < epsilon$4 && x1 - endX > epsilon$4 ? [Math.abs(startY - y1) < epsilon$4 ? startX : x1, y1]
	              : Math.abs(endX - x1) < epsilon$4 && endY - y0 > epsilon$4 ? [x1, Math.abs(startX - x1) < epsilon$4 ? startY : y0]
	              : Math.abs(endY - y0) < epsilon$4 && endX - x0 > epsilon$4 ? [Math.abs(startY - y0) < epsilon$4 ? startX : x0, y0]
	              : null)) - 1);
	          ++nHalfedges;
	        }
	      }

	      if (nHalfedges) cover = false;
	    }
	  }

	  // If there weren’t any edges, have the closest site cover the extent.
	  // It doesn’t matter which corner of the extent we measure!
	  if (cover) {
	    var dx, dy, d2, dc = Infinity;

	    for (iCell = 0, cover = null; iCell < nCells; ++iCell) {
	      if (cell = cells[iCell]) {
	        site = cell.site;
	        dx = site[0] - x0;
	        dy = site[1] - y0;
	        d2 = dx * dx + dy * dy;
	        if (d2 < dc) dc = d2, cover = cell;
	      }
	    }

	    if (cover) {
	      var v00 = [x0, y0], v01 = [x0, y1], v11 = [x1, y1], v10 = [x1, y0];
	      cover.halfedges.push(
	        edges.push(createBorderEdge(site = cover.site, v00, v01)) - 1,
	        edges.push(createBorderEdge(site, v01, v11)) - 1,
	        edges.push(createBorderEdge(site, v11, v10)) - 1,
	        edges.push(createBorderEdge(site, v10, v00)) - 1
	      );
	    }
	  }

	  // Lastly delete any cells with no edges; these were entirely clipped.
	  for (iCell = 0; iCell < nCells; ++iCell) {
	    if (cell = cells[iCell]) {
	      if (!cell.halfedges.length) {
	        delete cells[iCell];
	      }
	    }
	  }
	}

	var circlePool = [];

	var firstCircle;

	function Circle() {
	  RedBlackNode(this);
	  this.x =
	  this.y =
	  this.arc =
	  this.site =
	  this.cy = null;
	}

	function attachCircle(arc) {
	  var lArc = arc.P,
	      rArc = arc.N;

	  if (!lArc || !rArc) return;

	  var lSite = lArc.site,
	      cSite = arc.site,
	      rSite = rArc.site;

	  if (lSite === rSite) return;

	  var bx = cSite[0],
	      by = cSite[1],
	      ax = lSite[0] - bx,
	      ay = lSite[1] - by,
	      cx = rSite[0] - bx,
	      cy = rSite[1] - by;

	  var d = 2 * (ax * cy - ay * cx);
	  if (d >= -epsilon2$2) return;

	  var ha = ax * ax + ay * ay,
	      hc = cx * cx + cy * cy,
	      x = (cy * ha - ay * hc) / d,
	      y = (ax * hc - cx * ha) / d;

	  var circle = circlePool.pop() || new Circle;
	  circle.arc = arc;
	  circle.site = cSite;
	  circle.x = x + bx;
	  circle.y = (circle.cy = y + by) + Math.sqrt(x * x + y * y); // y bottom

	  arc.circle = circle;

	  var before = null,
	      node = circles._;

	  while (node) {
	    if (circle.y < node.y || (circle.y === node.y && circle.x <= node.x)) {
	      if (node.L) node = node.L;
	      else { before = node.P; break; }
	    } else {
	      if (node.R) node = node.R;
	      else { before = node; break; }
	    }
	  }

	  circles.insert(before, circle);
	  if (!before) firstCircle = circle;
	}

	function detachCircle(arc) {
	  var circle = arc.circle;
	  if (circle) {
	    if (!circle.P) firstCircle = circle.N;
	    circles.remove(circle);
	    circlePool.push(circle);
	    RedBlackNode(circle);
	    arc.circle = null;
	  }
	}

	var beachPool = [];

	function Beach() {
	  RedBlackNode(this);
	  this.edge =
	  this.site =
	  this.circle = null;
	}

	function createBeach(site) {
	  var beach = beachPool.pop() || new Beach;
	  beach.site = site;
	  return beach;
	}

	function detachBeach(beach) {
	  detachCircle(beach);
	  beaches.remove(beach);
	  beachPool.push(beach);
	  RedBlackNode(beach);
	}

	function removeBeach(beach) {
	  var circle = beach.circle,
	      x = circle.x,
	      y = circle.cy,
	      vertex = [x, y],
	      previous = beach.P,
	      next = beach.N,
	      disappearing = [beach];

	  detachBeach(beach);

	  var lArc = previous;
	  while (lArc.circle
	      && Math.abs(x - lArc.circle.x) < epsilon$4
	      && Math.abs(y - lArc.circle.cy) < epsilon$4) {
	    previous = lArc.P;
	    disappearing.unshift(lArc);
	    detachBeach(lArc);
	    lArc = previous;
	  }

	  disappearing.unshift(lArc);
	  detachCircle(lArc);

	  var rArc = next;
	  while (rArc.circle
	      && Math.abs(x - rArc.circle.x) < epsilon$4
	      && Math.abs(y - rArc.circle.cy) < epsilon$4) {
	    next = rArc.N;
	    disappearing.push(rArc);
	    detachBeach(rArc);
	    rArc = next;
	  }

	  disappearing.push(rArc);
	  detachCircle(rArc);

	  var nArcs = disappearing.length,
	      iArc;
	  for (iArc = 1; iArc < nArcs; ++iArc) {
	    rArc = disappearing[iArc];
	    lArc = disappearing[iArc - 1];
	    setEdgeEnd(rArc.edge, lArc.site, rArc.site, vertex);
	  }

	  lArc = disappearing[0];
	  rArc = disappearing[nArcs - 1];
	  rArc.edge = createEdge(lArc.site, rArc.site, null, vertex);

	  attachCircle(lArc);
	  attachCircle(rArc);
	}

	function addBeach(site) {
	  var x = site[0],
	      directrix = site[1],
	      lArc,
	      rArc,
	      dxl,
	      dxr,
	      node = beaches._;

	  while (node) {
	    dxl = leftBreakPoint(node, directrix) - x;
	    if (dxl > epsilon$4) node = node.L; else {
	      dxr = x - rightBreakPoint(node, directrix);
	      if (dxr > epsilon$4) {
	        if (!node.R) {
	          lArc = node;
	          break;
	        }
	        node = node.R;
	      } else {
	        if (dxl > -epsilon$4) {
	          lArc = node.P;
	          rArc = node;
	        } else if (dxr > -epsilon$4) {
	          lArc = node;
	          rArc = node.N;
	        } else {
	          lArc = rArc = node;
	        }
	        break;
	      }
	    }
	  }

	  createCell(site);
	  var newArc = createBeach(site);
	  beaches.insert(lArc, newArc);

	  if (!lArc && !rArc) return;

	  if (lArc === rArc) {
	    detachCircle(lArc);
	    rArc = createBeach(lArc.site);
	    beaches.insert(newArc, rArc);
	    newArc.edge = rArc.edge = createEdge(lArc.site, newArc.site);
	    attachCircle(lArc);
	    attachCircle(rArc);
	    return;
	  }

	  if (!rArc) { // && lArc
	    newArc.edge = createEdge(lArc.site, newArc.site);
	    return;
	  }

	  // else lArc !== rArc
	  detachCircle(lArc);
	  detachCircle(rArc);

	  var lSite = lArc.site,
	      ax = lSite[0],
	      ay = lSite[1],
	      bx = site[0] - ax,
	      by = site[1] - ay,
	      rSite = rArc.site,
	      cx = rSite[0] - ax,
	      cy = rSite[1] - ay,
	      d = 2 * (bx * cy - by * cx),
	      hb = bx * bx + by * by,
	      hc = cx * cx + cy * cy,
	      vertex = [(cy * hb - by * hc) / d + ax, (bx * hc - cx * hb) / d + ay];

	  setEdgeEnd(rArc.edge, lSite, rSite, vertex);
	  newArc.edge = createEdge(lSite, site, null, vertex);
	  rArc.edge = createEdge(site, rSite, null, vertex);
	  attachCircle(lArc);
	  attachCircle(rArc);
	}

	function leftBreakPoint(arc, directrix) {
	  var site = arc.site,
	      rfocx = site[0],
	      rfocy = site[1],
	      pby2 = rfocy - directrix;

	  if (!pby2) return rfocx;

	  var lArc = arc.P;
	  if (!lArc) return -Infinity;

	  site = lArc.site;
	  var lfocx = site[0],
	      lfocy = site[1],
	      plby2 = lfocy - directrix;

	  if (!plby2) return lfocx;

	  var hl = lfocx - rfocx,
	      aby2 = 1 / pby2 - 1 / plby2,
	      b = hl / plby2;

	  if (aby2) return (-b + Math.sqrt(b * b - 2 * aby2 * (hl * hl / (-2 * plby2) - lfocy + plby2 / 2 + rfocy - pby2 / 2))) / aby2 + rfocx;

	  return (rfocx + lfocx) / 2;
	}

	function rightBreakPoint(arc, directrix) {
	  var rArc = arc.N;
	  if (rArc) return leftBreakPoint(rArc, directrix);
	  var site = arc.site;
	  return site[1] === directrix ? site[0] : Infinity;
	}

	var epsilon$4 = 1e-6;
	var epsilon2$2 = 1e-12;
	var beaches;
	var cells;
	var circles;
	var edges;

	function triangleArea(a, b, c) {
	  return (a[0] - c[0]) * (b[1] - a[1]) - (a[0] - b[0]) * (c[1] - a[1]);
	}

	function lexicographic(a, b) {
	  return b[1] - a[1]
	      || b[0] - a[0];
	}

	function Diagram(sites, extent) {
	  var site = sites.sort(lexicographic).pop(),
	      x,
	      y,
	      circle;

	  edges = [];
	  cells = new Array(sites.length);
	  beaches = new RedBlackTree;
	  circles = new RedBlackTree;

	  while (true) {
	    circle = firstCircle;
	    if (site && (!circle || site[1] < circle.y || (site[1] === circle.y && site[0] < circle.x))) {
	      if (site[0] !== x || site[1] !== y) {
	        addBeach(site);
	        x = site[0], y = site[1];
	      }
	      site = sites.pop();
	    } else if (circle) {
	      removeBeach(circle.arc);
	    } else {
	      break;
	    }
	  }

	  sortCellHalfedges();

	  if (extent) {
	    var x0 = +extent[0][0],
	        y0 = +extent[0][1],
	        x1 = +extent[1][0],
	        y1 = +extent[1][1];
	    clipEdges(x0, y0, x1, y1);
	    clipCells(x0, y0, x1, y1);
	  }

	  this.edges = edges;
	  this.cells = cells;

	  beaches =
	  circles =
	  edges =
	  cells = null;
	}

	Diagram.prototype = {
	  constructor: Diagram,

	  polygons: function() {
	    var edges = this.edges;

	    return this.cells.map(function(cell) {
	      var polygon = cell.halfedges.map(function(i) { return cellHalfedgeStart(cell, edges[i]); });
	      polygon.data = cell.site.data;
	      return polygon;
	    });
	  },

	  triangles: function() {
	    var triangles = [],
	        edges = this.edges;

	    this.cells.forEach(function(cell, i) {
	      if (!(m = (halfedges = cell.halfedges).length)) return;
	      var site = cell.site,
	          halfedges,
	          j = -1,
	          m,
	          s0,
	          e1 = edges[halfedges[m - 1]],
	          s1 = e1.left === site ? e1.right : e1.left;

	      while (++j < m) {
	        s0 = s1;
	        e1 = edges[halfedges[j]];
	        s1 = e1.left === site ? e1.right : e1.left;
	        if (s0 && s1 && i < s0.index && i < s1.index && triangleArea(site, s0, s1) < 0) {
	          triangles.push([site.data, s0.data, s1.data]);
	        }
	      }
	    });

	    return triangles;
	  },

	  links: function() {
	    return this.edges.filter(function(edge) {
	      return edge.right;
	    }).map(function(edge) {
	      return {
	        source: edge.left.data,
	        target: edge.right.data
	      };
	    });
	  },

	  find: function(x, y, radius) {
	    var that = this, i0, i1 = that._found || 0, n = that.cells.length, cell;

	    // Use the previously-found cell, or start with an arbitrary one.
	    while (!(cell = that.cells[i1])) if (++i1 >= n) return null;
	    var dx = x - cell.site[0], dy = y - cell.site[1], d2 = dx * dx + dy * dy;

	    // Traverse the half-edges to find a closer cell, if any.
	    do {
	      cell = that.cells[i0 = i1], i1 = null;
	      cell.halfedges.forEach(function(e) {
	        var edge = that.edges[e], v = edge.left;
	        if ((v === cell.site || !v) && !(v = edge.right)) return;
	        var vx = x - v[0], vy = y - v[1], v2 = vx * vx + vy * vy;
	        if (v2 < d2) d2 = v2, i1 = v.index;
	      });
	    } while (i1 !== null);

	    that._found = i0;

	    return radius == null || d2 <= radius * radius ? cell.site : null;
	  }
	};

	var voronoi = function() {
	  var x = x$4,
	      y = y$4,
	      extent = null;

	  function voronoi(data) {
	    return new Diagram(data.map(function(d, i) {
	      var s = [Math.round(x(d, i, data) / epsilon$4) * epsilon$4, Math.round(y(d, i, data) / epsilon$4) * epsilon$4];
	      s.index = i;
	      s.data = d;
	      return s;
	    }), extent);
	  }

	  voronoi.polygons = function(data) {
	    return voronoi(data).polygons();
	  };

	  voronoi.links = function(data) {
	    return voronoi(data).links();
	  };

	  voronoi.triangles = function(data) {
	    return voronoi(data).triangles();
	  };

	  voronoi.x = function(_) {
	    return arguments.length ? (x = typeof _ === "function" ? _ : constant$11(+_), voronoi) : x;
	  };

	  voronoi.y = function(_) {
	    return arguments.length ? (y = typeof _ === "function" ? _ : constant$11(+_), voronoi) : y;
	  };

	  voronoi.extent = function(_) {
	    return arguments.length ? (extent = _ == null ? null : [[+_[0][0], +_[0][1]], [+_[1][0], +_[1][1]]], voronoi) : extent && [[extent[0][0], extent[0][1]], [extent[1][0], extent[1][1]]];
	  };

	  voronoi.size = function(_) {
	    return arguments.length ? (extent = _ == null ? null : [[0, 0], [+_[0], +_[1]]], voronoi) : extent && [extent[1][0] - extent[0][0], extent[1][1] - extent[0][1]];
	  };

	  return voronoi;
	};

	var constant$12 = function(x) {
	  return function() {
	    return x;
	  };
	};

	function ZoomEvent(target, type, transform) {
	  this.target = target;
	  this.type = type;
	  this.transform = transform;
	}

	function Transform(k, x, y) {
	  this.k = k;
	  this.x = x;
	  this.y = y;
	}

	Transform.prototype = {
	  constructor: Transform,
	  scale: function(k) {
	    return k === 1 ? this : new Transform(this.k * k, this.x, this.y);
	  },
	  translate: function(x, y) {
	    return x === 0 & y === 0 ? this : new Transform(this.k, this.x + this.k * x, this.y + this.k * y);
	  },
	  apply: function(point) {
	    return [point[0] * this.k + this.x, point[1] * this.k + this.y];
	  },
	  applyX: function(x) {
	    return x * this.k + this.x;
	  },
	  applyY: function(y) {
	    return y * this.k + this.y;
	  },
	  invert: function(location) {
	    return [(location[0] - this.x) / this.k, (location[1] - this.y) / this.k];
	  },
	  invertX: function(x) {
	    return (x - this.x) / this.k;
	  },
	  invertY: function(y) {
	    return (y - this.y) / this.k;
	  },
	  rescaleX: function(x) {
	    return x.copy().domain(x.range().map(this.invertX, this).map(x.invert, x));
	  },
	  rescaleY: function(y) {
	    return y.copy().domain(y.range().map(this.invertY, this).map(y.invert, y));
	  },
	  toString: function() {
	    return "translate(" + this.x + "," + this.y + ") scale(" + this.k + ")";
	  }
	};

	var identity$8 = new Transform(1, 0, 0);

	transform$1.prototype = Transform.prototype;

	function transform$1(node) {
	  return node.__zoom || identity$8;
	}

	function nopropagation$2() {
	  exports.event.stopImmediatePropagation();
	}

	var noevent$2 = function() {
	  exports.event.preventDefault();
	  exports.event.stopImmediatePropagation();
	};

	// Ignore right-click, since that should open the context menu.
	function defaultFilter$2() {
	  return !exports.event.button;
	}

	function defaultExtent$1() {
	  var e = this, w, h;
	  if (e instanceof SVGElement) {
	    e = e.ownerSVGElement || e;
	    w = e.width.baseVal.value;
	    h = e.height.baseVal.value;
	  } else {
	    w = e.clientWidth;
	    h = e.clientHeight;
	  }
	  return [[0, 0], [w, h]];
	}

	function defaultTransform() {
	  return this.__zoom || identity$8;
	}

	function defaultWheelDelta() {
	  return -exports.event.deltaY * (exports.event.deltaMode ? 120 : 1) / 500;
	}

	function touchable$1() {
	  return "ontouchstart" in this;
	}

	var zoom = function() {
	  var filter = defaultFilter$2,
	      extent = defaultExtent$1,
	      wheelDelta = defaultWheelDelta,
	      k0 = 0,
	      k1 = Infinity,
	      x0 = -k1,
	      x1 = k1,
	      y0 = x0,
	      y1 = x1,
	      duration = 250,
	      interpolate = interpolateZoom,
	      gestures = [],
	      listeners = dispatch("start", "zoom", "end"),
	      touchstarting,
	      touchending,
	      touchDelay = 500,
	      wheelDelay = 150,
	      clickDistance2 = 0;

	  function zoom(selection$$1) {
	    selection$$1
	        .property("__zoom", defaultTransform)
	        .on("wheel.zoom", wheeled)
	        .on("mousedown.zoom", mousedowned)
	        .on("dblclick.zoom", dblclicked)
	      .filter(touchable$1)
	        .on("touchstart.zoom", touchstarted)
	        .on("touchmove.zoom", touchmoved)
	        .on("touchend.zoom touchcancel.zoom", touchended)
	        .style("touch-action", "none")
	        .style("-webkit-tap-highlight-color", "rgba(0,0,0,0)");
	  }

	  zoom.transform = function(collection, transform$$1) {
	    var selection$$1 = collection.selection ? collection.selection() : collection;
	    selection$$1.property("__zoom", defaultTransform);
	    if (collection !== selection$$1) {
	      schedule(collection, transform$$1);
	    } else {
	      selection$$1.interrupt().each(function() {
	        gesture(this, arguments)
	            .start()
	            .zoom(null, typeof transform$$1 === "function" ? transform$$1.apply(this, arguments) : transform$$1)
	            .end();
	      });
	    }
	  };

	  zoom.scaleBy = function(selection$$1, k) {
	    zoom.scaleTo(selection$$1, function() {
	      var k0 = this.__zoom.k,
	          k1 = typeof k === "function" ? k.apply(this, arguments) : k;
	      return k0 * k1;
	    });
	  };

	  zoom.scaleTo = function(selection$$1, k) {
	    zoom.transform(selection$$1, function() {
	      var e = extent.apply(this, arguments),
	          t0 = this.__zoom,
	          p0 = centroid(e),
	          p1 = t0.invert(p0),
	          k1 = typeof k === "function" ? k.apply(this, arguments) : k;
	      return constrain(translate(scale(t0, k1), p0, p1), e);
	    });
	  };

	  zoom.translateBy = function(selection$$1, x, y) {
	    zoom.transform(selection$$1, function() {
	      return constrain(this.__zoom.translate(
	        typeof x === "function" ? x.apply(this, arguments) : x,
	        typeof y === "function" ? y.apply(this, arguments) : y
	      ), extent.apply(this, arguments));
	    });
	  };

	  zoom.translateTo = function(selection$$1, x, y) {
	    zoom.transform(selection$$1, function() {
	      var e = extent.apply(this, arguments),
	          t = this.__zoom,
	          p = centroid(e);
	      return constrain(identity$8.translate(p[0], p[1]).scale(t.k).translate(
	        typeof x === "function" ? -x.apply(this, arguments) : -x,
	        typeof y === "function" ? -y.apply(this, arguments) : -y
	      ), e);
	    });
	  };

	  function scale(transform$$1, k) {
	    k = Math.max(k0, Math.min(k1, k));
	    return k === transform$$1.k ? transform$$1 : new Transform(k, transform$$1.x, transform$$1.y);
	  }

	  function translate(transform$$1, p0, p1) {
	    var x = p0[0] - p1[0] * transform$$1.k, y = p0[1] - p1[1] * transform$$1.k;
	    return x === transform$$1.x && y === transform$$1.y ? transform$$1 : new Transform(transform$$1.k, x, y);
	  }

	  function constrain(transform$$1, extent) {
	    var dx0 = transform$$1.invertX(extent[0][0]) - x0,
	        dx1 = transform$$1.invertX(extent[1][0]) - x1,
	        dy0 = transform$$1.invertY(extent[0][1]) - y0,
	        dy1 = transform$$1.invertY(extent[1][1]) - y1;
	    return transform$$1.translate(
	      dx1 > dx0 ? (dx0 + dx1) / 2 : Math.min(0, dx0) || Math.max(0, dx1),
	      dy1 > dy0 ? (dy0 + dy1) / 2 : Math.min(0, dy0) || Math.max(0, dy1)
	    );
	  }

	  function centroid(extent) {
	    return [(+extent[0][0] + +extent[1][0]) / 2, (+extent[0][1] + +extent[1][1]) / 2];
	  }

	  function schedule(transition$$1, transform$$1, center) {
	    transition$$1
	        .on("start.zoom", function() { gesture(this, arguments).start(); })
	        .on("interrupt.zoom end.zoom", function() { gesture(this, arguments).end(); })
	        .tween("zoom", function() {
	          var that = this,
	              args = arguments,
	              g = gesture(that, args),
	              e = extent.apply(that, args),
	              p = center || centroid(e),
	              w = Math.max(e[1][0] - e[0][0], e[1][1] - e[0][1]),
	              a = that.__zoom,
	              b = typeof transform$$1 === "function" ? transform$$1.apply(that, args) : transform$$1,
	              i = interpolate(a.invert(p).concat(w / a.k), b.invert(p).concat(w / b.k));
	          return function(t) {
	            if (t === 1) t = b; // Avoid rounding error on end.
	            else { var l = i(t), k = w / l[2]; t = new Transform(k, p[0] - l[0] * k, p[1] - l[1] * k); }
	            g.zoom(null, t);
	          };
	        });
	  }

	  function gesture(that, args) {
	    for (var i = 0, n = gestures.length, g; i < n; ++i) {
	      if ((g = gestures[i]).that === that) {
	        return g;
	      }
	    }
	    return new Gesture(that, args);
	  }

	  function Gesture(that, args) {
	    this.that = that;
	    this.args = args;
	    this.index = -1;
	    this.active = 0;
	    this.extent = extent.apply(that, args);
	  }

	  Gesture.prototype = {
	    start: function() {
	      if (++this.active === 1) {
	        this.index = gestures.push(this) - 1;
	        this.emit("start");
	      }
	      return this;
	    },
	    zoom: function(key, transform$$1) {
	      if (this.mouse && key !== "mouse") this.mouse[1] = transform$$1.invert(this.mouse[0]);
	      if (this.touch0 && key !== "touch") this.touch0[1] = transform$$1.invert(this.touch0[0]);
	      if (this.touch1 && key !== "touch") this.touch1[1] = transform$$1.invert(this.touch1[0]);
	      this.that.__zoom = transform$$1;
	      this.emit("zoom");
	      return this;
	    },
	    end: function() {
	      if (--this.active === 0) {
	        gestures.splice(this.index, 1);
	        this.index = -1;
	        this.emit("end");
	      }
	      return this;
	    },
	    emit: function(type) {
	      customEvent(new ZoomEvent(zoom, type, this.that.__zoom), listeners.apply, listeners, [type, this.that, this.args]);
	    }
	  };

	  function wheeled() {
	    if (!filter.apply(this, arguments)) return;
	    var g = gesture(this, arguments),
	        t = this.__zoom,
	        k = Math.max(k0, Math.min(k1, t.k * Math.pow(2, wheelDelta.apply(this, arguments)))),
	        p = mouse(this);

	    // If the mouse is in the same location as before, reuse it.
	    // If there were recent wheel events, reset the wheel idle timeout.
	    if (g.wheel) {
	      if (g.mouse[0][0] !== p[0] || g.mouse[0][1] !== p[1]) {
	        g.mouse[1] = t.invert(g.mouse[0] = p);
	      }
	      clearTimeout(g.wheel);
	    }

	    // If this wheel event won’t trigger a transform change, ignore it.
	    else if (t.k === k) return;

	    // Otherwise, capture the mouse point and location at the start.
	    else {
	      g.mouse = [p, t.invert(p)];
	      interrupt(this);
	      g.start();
	    }

	    noevent$2();
	    g.wheel = setTimeout(wheelidled, wheelDelay);
	    g.zoom("mouse", constrain(translate(scale(t, k), g.mouse[0], g.mouse[1]), g.extent));

	    function wheelidled() {
	      g.wheel = null;
	      g.end();
	    }
	  }

	  function mousedowned() {
	    if (touchending || !filter.apply(this, arguments)) return;
	    var g = gesture(this, arguments),
	        v = select(exports.event.view).on("mousemove.zoom", mousemoved, true).on("mouseup.zoom", mouseupped, true),
	        p = mouse(this),
	        x0 = exports.event.clientX,
	        y0 = exports.event.clientY;

	    dragDisable(exports.event.view);
	    nopropagation$2();
	    g.mouse = [p, this.__zoom.invert(p)];
	    interrupt(this);
	    g.start();

	    function mousemoved() {
	      noevent$2();
	      if (!g.moved) {
	        var dx = exports.event.clientX - x0, dy = exports.event.clientY - y0;
	        g.moved = dx * dx + dy * dy > clickDistance2;
	      }
	      g.zoom("mouse", constrain(translate(g.that.__zoom, g.mouse[0] = mouse(g.that), g.mouse[1]), g.extent));
	    }

	    function mouseupped() {
	      v.on("mousemove.zoom mouseup.zoom", null);
	      yesdrag(exports.event.view, g.moved);
	      noevent$2();
	      g.end();
	    }
	  }

	  function dblclicked() {
	    if (!filter.apply(this, arguments)) return;
	    var t0 = this.__zoom,
	        p0 = mouse(this),
	        p1 = t0.invert(p0),
	        k1 = t0.k * (exports.event.shiftKey ? 0.5 : 2),
	        t1 = constrain(translate(scale(t0, k1), p0, p1), extent.apply(this, arguments));

	    noevent$2();
	    if (duration > 0) select(this).transition().duration(duration).call(schedule, t1, p0);
	    else select(this).call(zoom.transform, t1);
	  }

	  function touchstarted() {
	    if (!filter.apply(this, arguments)) return;
	    var g = gesture(this, arguments),
	        touches$$1 = exports.event.changedTouches,
	        started,
	        n = touches$$1.length, i, t, p;

	    nopropagation$2();
	    for (i = 0; i < n; ++i) {
	      t = touches$$1[i], p = touch(this, touches$$1, t.identifier);
	      p = [p, this.__zoom.invert(p), t.identifier];
	      if (!g.touch0) g.touch0 = p, started = true;
	      else if (!g.touch1) g.touch1 = p;
	    }

	    // If this is a dbltap, reroute to the (optional) dblclick.zoom handler.
	    if (touchstarting) {
	      touchstarting = clearTimeout(touchstarting);
	      if (!g.touch1) {
	        g.end();
	        p = select(this).on("dblclick.zoom");
	        if (p) p.apply(this, arguments);
	        return;
	      }
	    }

	    if (started) {
	      touchstarting = setTimeout(function() { touchstarting = null; }, touchDelay);
	      interrupt(this);
	      g.start();
	    }
	  }

	  function touchmoved() {
	    var g = gesture(this, arguments),
	        touches$$1 = exports.event.changedTouches,
	        n = touches$$1.length, i, t, p, l;

	    noevent$2();
	    if (touchstarting) touchstarting = clearTimeout(touchstarting);
	    for (i = 0; i < n; ++i) {
	      t = touches$$1[i], p = touch(this, touches$$1, t.identifier);
	      if (g.touch0 && g.touch0[2] === t.identifier) g.touch0[0] = p;
	      else if (g.touch1 && g.touch1[2] === t.identifier) g.touch1[0] = p;
	    }
	    t = g.that.__zoom;
	    if (g.touch1) {
	      var p0 = g.touch0[0], l0 = g.touch0[1],
	          p1 = g.touch1[0], l1 = g.touch1[1],
	          dp = (dp = p1[0] - p0[0]) * dp + (dp = p1[1] - p0[1]) * dp,
	          dl = (dl = l1[0] - l0[0]) * dl + (dl = l1[1] - l0[1]) * dl;
	      t = scale(t, Math.sqrt(dp / dl));
	      p = [(p0[0] + p1[0]) / 2, (p0[1] + p1[1]) / 2];
	      l = [(l0[0] + l1[0]) / 2, (l0[1] + l1[1]) / 2];
	    }
	    else if (g.touch0) p = g.touch0[0], l = g.touch0[1];
	    else return;
	    g.zoom("touch", constrain(translate(t, p, l), g.extent));
	  }

	  function touchended() {
	    var g = gesture(this, arguments),
	        touches$$1 = exports.event.changedTouches,
	        n = touches$$1.length, i, t;

	    nopropagation$2();
	    if (touchending) clearTimeout(touchending);
	    touchending = setTimeout(function() { touchending = null; }, touchDelay);
	    for (i = 0; i < n; ++i) {
	      t = touches$$1[i];
	      if (g.touch0 && g.touch0[2] === t.identifier) delete g.touch0;
	      else if (g.touch1 && g.touch1[2] === t.identifier) delete g.touch1;
	    }
	    if (g.touch1 && !g.touch0) g.touch0 = g.touch1, delete g.touch1;
	    if (g.touch0) g.touch0[1] = this.__zoom.invert(g.touch0[0]);
	    else g.end();
	  }

	  zoom.wheelDelta = function(_) {
	    return arguments.length ? (wheelDelta = typeof _ === "function" ? _ : constant$12(+_), zoom) : wheelDelta;
	  };

	  zoom.filter = function(_) {
	    return arguments.length ? (filter = typeof _ === "function" ? _ : constant$12(!!_), zoom) : filter;
	  };

	  zoom.extent = function(_) {
	    return arguments.length ? (extent = typeof _ === "function" ? _ : constant$12([[+_[0][0], +_[0][1]], [+_[1][0], +_[1][1]]]), zoom) : extent;
	  };

	  zoom.scaleExtent = function(_) {
	    return arguments.length ? (k0 = +_[0], k1 = +_[1], zoom) : [k0, k1];
	  };

	  zoom.translateExtent = function(_) {
	    return arguments.length ? (x0 = +_[0][0], x1 = +_[1][0], y0 = +_[0][1], y1 = +_[1][1], zoom) : [[x0, y0], [x1, y1]];
	  };

	  zoom.duration = function(_) {
	    return arguments.length ? (duration = +_, zoom) : duration;
	  };

	  zoom.interpolate = function(_) {
	    return arguments.length ? (interpolate = _, zoom) : interpolate;
	  };

	  zoom.on = function() {
	    var value = listeners.on.apply(listeners, arguments);
	    return value === listeners ? zoom : value;
	  };

	  zoom.clickDistance = function(_) {
	    return arguments.length ? (clickDistance2 = (_ = +_) * _, zoom) : Math.sqrt(clickDistance2);
	  };

	  return zoom;
	};

	exports.version = version;
	exports.bisect = bisectRight;
	exports.bisectRight = bisectRight;
	exports.bisectLeft = bisectLeft;
	exports.ascending = ascending;
	exports.bisector = bisector;
	exports.cross = cross;
	exports.descending = descending;
	exports.deviation = deviation;
	exports.extent = extent;
	exports.histogram = histogram;
	exports.thresholdFreedmanDiaconis = freedmanDiaconis;
	exports.thresholdScott = scott;
	exports.thresholdSturges = sturges;
	exports.max = max;
	exports.mean = mean;
	exports.median = median;
	exports.merge = merge;
	exports.min = min;
	exports.pairs = pairs;
	exports.permute = permute;
	exports.quantile = threshold;
	exports.range = sequence;
	exports.scan = scan;
	exports.shuffle = shuffle;
	exports.sum = sum;
	exports.ticks = ticks;
	exports.tickIncrement = tickIncrement;
	exports.tickStep = tickStep;
	exports.transpose = transpose;
	exports.variance = variance;
	exports.zip = zip;
	exports.axisTop = axisTop;
	exports.axisRight = axisRight;
	exports.axisBottom = axisBottom;
	exports.axisLeft = axisLeft;
	exports.brush = brush;
	exports.brushX = brushX;
	exports.brushY = brushY;
	exports.brushSelection = brushSelection;
	exports.chord = chord;
	exports.ribbon = ribbon;
	exports.nest = nest;
	exports.set = set$2;
	exports.map = map$1;
	exports.keys = keys;
	exports.values = values;
	exports.entries = entries;
	exports.color = color;
	exports.rgb = rgb;
	exports.hsl = hsl;
	exports.lab = lab;
	exports.hcl = hcl;
	exports.cubehelix = cubehelix;
	exports.dispatch = dispatch;
	exports.drag = drag;
	exports.dragDisable = dragDisable;
	exports.dragEnable = yesdrag;
	exports.dsvFormat = dsv;
	exports.csvParse = csvParse;
	exports.csvParseRows = csvParseRows;
	exports.csvFormat = csvFormat;
	exports.csvFormatRows = csvFormatRows;
	exports.tsvParse = tsvParse;
	exports.tsvParseRows = tsvParseRows;
	exports.tsvFormat = tsvFormat;
	exports.tsvFormatRows = tsvFormatRows;
	exports.easeLinear = linear$1;
	exports.easeQuad = quadInOut;
	exports.easeQuadIn = quadIn;
	exports.easeQuadOut = quadOut;
	exports.easeQuadInOut = quadInOut;
	exports.easeCubic = cubicInOut;
	exports.easeCubicIn = cubicIn;
	exports.easeCubicOut = cubicOut;
	exports.easeCubicInOut = cubicInOut;
	exports.easePoly = polyInOut;
	exports.easePolyIn = polyIn;
	exports.easePolyOut = polyOut;
	exports.easePolyInOut = polyInOut;
	exports.easeSin = sinInOut;
	exports.easeSinIn = sinIn;
	exports.easeSinOut = sinOut;
	exports.easeSinInOut = sinInOut;
	exports.easeExp = expInOut;
	exports.easeExpIn = expIn;
	exports.easeExpOut = expOut;
	exports.easeExpInOut = expInOut;
	exports.easeCircle = circleInOut;
	exports.easeCircleIn = circleIn;
	exports.easeCircleOut = circleOut;
	exports.easeCircleInOut = circleInOut;
	exports.easeBounce = bounceOut;
	exports.easeBounceIn = bounceIn;
	exports.easeBounceOut = bounceOut;
	exports.easeBounceInOut = bounceInOut;
	exports.easeBack = backInOut;
	exports.easeBackIn = backIn;
	exports.easeBackOut = backOut;
	exports.easeBackInOut = backInOut;
	exports.easeElastic = elasticOut;
	exports.easeElasticIn = elasticIn;
	exports.easeElasticOut = elasticOut;
	exports.easeElasticInOut = elasticInOut;
	exports.forceCenter = center$1;
	exports.forceCollide = collide;
	exports.forceLink = link;
	exports.forceManyBody = manyBody;
	exports.forceSimulation = simulation;
	exports.forceX = x$2;
	exports.forceY = y$2;
	exports.formatDefaultLocale = defaultLocale;
	exports.formatLocale = formatLocale;
	exports.formatSpecifier = formatSpecifier;
	exports.precisionFixed = precisionFixed;
	exports.precisionPrefix = precisionPrefix;
	exports.precisionRound = precisionRound;
	exports.geoArea = area;
	exports.geoBounds = bounds;
	exports.geoCentroid = centroid;
	exports.geoCircle = circle;
	exports.geoClipExtent = extent$1;
	exports.geoContains = contains;
	exports.geoDistance = distance;
	exports.geoGraticule = graticule;
	exports.geoGraticule10 = graticule10;
	exports.geoInterpolate = interpolate$1;
	exports.geoLength = length$1;
	exports.geoPath = index$1;
	exports.geoAlbers = albers;
	exports.geoAlbersUsa = albersUsa;
	exports.geoAzimuthalEqualArea = azimuthalEqualArea;
	exports.geoAzimuthalEqualAreaRaw = azimuthalEqualAreaRaw;
	exports.geoAzimuthalEquidistant = azimuthalEquidistant;
	exports.geoAzimuthalEquidistantRaw = azimuthalEquidistantRaw;
	exports.geoConicConformal = conicConformal;
	exports.geoConicConformalRaw = conicConformalRaw;
	exports.geoConicEqualArea = conicEqualArea;
	exports.geoConicEqualAreaRaw = conicEqualAreaRaw;
	exports.geoConicEquidistant = conicEquidistant;
	exports.geoConicEquidistantRaw = conicEquidistantRaw;
	exports.geoEquirectangular = equirectangular;
	exports.geoEquirectangularRaw = equirectangularRaw;
	exports.geoGnomonic = gnomonic;
	exports.geoGnomonicRaw = gnomonicRaw;
	exports.geoIdentity = identity$5;
	exports.geoProjection = projection;
	exports.geoProjectionMutator = projectionMutator;
	exports.geoMercator = mercator;
	exports.geoMercatorRaw = mercatorRaw;
	exports.geoOrthographic = orthographic;
	exports.geoOrthographicRaw = orthographicRaw;
	exports.geoStereographic = stereographic;
	exports.geoStereographicRaw = stereographicRaw;
	exports.geoTransverseMercator = transverseMercator;
	exports.geoTransverseMercatorRaw = transverseMercatorRaw;
	exports.geoRotation = rotation;
	exports.geoStream = geoStream;
	exports.geoTransform = transform;
	exports.cluster = cluster;
	exports.hierarchy = hierarchy;
	exports.pack = index$2;
	exports.packSiblings = siblings;
	exports.packEnclose = enclose;
	exports.partition = partition;
	exports.stratify = stratify;
	exports.tree = tree;
	exports.treemap = index$3;
	exports.treemapBinary = binary;
	exports.treemapDice = treemapDice;
	exports.treemapSlice = treemapSlice;
	exports.treemapSliceDice = sliceDice;
	exports.treemapSquarify = squarify;
	exports.treemapResquarify = resquarify;
	exports.interpolate = interpolateValue;
	exports.interpolateArray = array$1;
	exports.interpolateBasis = basis$1;
	exports.interpolateBasisClosed = basisClosed;
	exports.interpolateDate = date;
	exports.interpolateNumber = reinterpolate;
	exports.interpolateObject = object;
	exports.interpolateRound = interpolateRound;
	exports.interpolateString = interpolateString;
	exports.interpolateTransformCss = interpolateTransformCss;
	exports.interpolateTransformSvg = interpolateTransformSvg;
	exports.interpolateZoom = interpolateZoom;
	exports.interpolateRgb = interpolateRgb;
	exports.interpolateRgbBasis = rgbBasis;
	exports.interpolateRgbBasisClosed = rgbBasisClosed;
	exports.interpolateHsl = hsl$2;
	exports.interpolateHslLong = hslLong;
	exports.interpolateLab = lab$1;
	exports.interpolateHcl = hcl$2;
	exports.interpolateHclLong = hclLong;
	exports.interpolateCubehelix = cubehelix$2;
	exports.interpolateCubehelixLong = cubehelixLong;
	exports.quantize = quantize;
	exports.path = path;
	exports.polygonArea = area$1;
	exports.polygonCentroid = centroid$1;
	exports.polygonHull = hull;
	exports.polygonContains = contains$1;
	exports.polygonLength = length$2;
	exports.quadtree = quadtree;
	exports.queue = queue;
	exports.randomUniform = uniform;
	exports.randomNormal = normal;
	exports.randomLogNormal = logNormal;
	exports.randomBates = bates;
	exports.randomIrwinHall = irwinHall;
	exports.randomExponential = exponential$1;
	exports.request = request;
	exports.html = html;
	exports.json = json;
	exports.text = text;
	exports.xml = xml;
	exports.csv = csv$1;
	exports.tsv = tsv$1;
	exports.scaleBand = band;
	exports.scalePoint = point$1;
	exports.scaleIdentity = identity$6;
	exports.scaleLinear = linear$2;
	exports.scaleLog = log$1;
	exports.scaleOrdinal = ordinal;
	exports.scaleImplicit = implicit;
	exports.scalePow = pow$1;
	exports.scaleSqrt = sqrt$1;
	exports.scaleQuantile = quantile;
	exports.scaleQuantize = quantize$1;
	exports.scaleThreshold = threshold$1;
	exports.scaleTime = time;
	exports.scaleUtc = utcTime;
	exports.schemeCategory10 = category10;
	exports.schemeCategory20b = category20b;
	exports.schemeCategory20c = category20c;
	exports.schemeCategory20 = category20;
	exports.interpolateCubehelixDefault = cubehelix$3;
	exports.interpolateRainbow = rainbow$1;
	exports.interpolateWarm = warm;
	exports.interpolateCool = cool;
	exports.interpolateViridis = viridis;
	exports.interpolateMagma = magma;
	exports.interpolateInferno = inferno;
	exports.interpolatePlasma = plasma;
	exports.scaleSequential = sequential;
	exports.creator = creator;
	exports.local = local$1;
	exports.matcher = matcher$1;
	exports.mouse = mouse;
	exports.namespace = namespace;
	exports.namespaces = namespaces;
	exports.select = select;
	exports.selectAll = selectAll;
	exports.selection = selection;
	exports.selector = selector;
	exports.selectorAll = selectorAll;
	exports.style = styleValue;
	exports.touch = touch;
	exports.touches = touches;
	exports.window = defaultView;
	exports.customEvent = customEvent;
	exports.arc = arc;
	exports.area = area$2;
	exports.line = line;
	exports.pie = pie;
	exports.areaRadial = areaRadial;
	exports.radialArea = areaRadial;
	exports.lineRadial = lineRadial$1;
	exports.radialLine = lineRadial$1;
	exports.pointRadial = pointRadial;
	exports.linkHorizontal = linkHorizontal;
	exports.linkVertical = linkVertical;
	exports.linkRadial = linkRadial;
	exports.symbol = symbol;
	exports.symbols = symbols;
	exports.symbolCircle = circle$2;
	exports.symbolCross = cross$2;
	exports.symbolDiamond = diamond;
	exports.symbolSquare = square;
	exports.symbolStar = star;
	exports.symbolTriangle = triangle;
	exports.symbolWye = wye;
	exports.curveBasisClosed = basisClosed$1;
	exports.curveBasisOpen = basisOpen;
	exports.curveBasis = basis$2;
	exports.curveBundle = bundle;
	exports.curveCardinalClosed = cardinalClosed;
	exports.curveCardinalOpen = cardinalOpen;
	exports.curveCardinal = cardinal;
	exports.curveCatmullRomClosed = catmullRomClosed;
	exports.curveCatmullRomOpen = catmullRomOpen;
	exports.curveCatmullRom = catmullRom;
	exports.curveLinearClosed = linearClosed;
	exports.curveLinear = curveLinear;
	exports.curveMonotoneX = monotoneX;
	exports.curveMonotoneY = monotoneY;
	exports.curveNatural = natural;
	exports.curveStep = step;
	exports.curveStepAfter = stepAfter;
	exports.curveStepBefore = stepBefore;
	exports.stack = stack;
	exports.stackOffsetExpand = expand;
	exports.stackOffsetDiverging = diverging;
	exports.stackOffsetNone = none$1;
	exports.stackOffsetSilhouette = silhouette;
	exports.stackOffsetWiggle = wiggle;
	exports.stackOrderAscending = ascending$2;
	exports.stackOrderDescending = descending$2;
	exports.stackOrderInsideOut = insideOut;
	exports.stackOrderNone = none$2;
	exports.stackOrderReverse = reverse;
	exports.timeInterval = newInterval;
	exports.timeMillisecond = millisecond;
	exports.timeMilliseconds = milliseconds;
	exports.utcMillisecond = millisecond;
	exports.utcMilliseconds = milliseconds;
	exports.timeSecond = second;
	exports.timeSeconds = seconds;
	exports.utcSecond = second;
	exports.utcSeconds = seconds;
	exports.timeMinute = minute;
	exports.timeMinutes = minutes;
	exports.timeHour = hour;
	exports.timeHours = hours;
	exports.timeDay = day;
	exports.timeDays = days;
	exports.timeWeek = sunday;
	exports.timeWeeks = sundays;
	exports.timeSunday = sunday;
	exports.timeSundays = sundays;
	exports.timeMonday = monday;
	exports.timeMondays = mondays;
	exports.timeTuesday = tuesday;
	exports.timeTuesdays = tuesdays;
	exports.timeWednesday = wednesday;
	exports.timeWednesdays = wednesdays;
	exports.timeThursday = thursday;
	exports.timeThursdays = thursdays;
	exports.timeFriday = friday;
	exports.timeFridays = fridays;
	exports.timeSaturday = saturday;
	exports.timeSaturdays = saturdays;
	exports.timeMonth = month;
	exports.timeMonths = months;
	exports.timeYear = year;
	exports.timeYears = years;
	exports.utcMinute = utcMinute;
	exports.utcMinutes = utcMinutes;
	exports.utcHour = utcHour;
	exports.utcHours = utcHours;
	exports.utcDay = utcDay;
	exports.utcDays = utcDays;
	exports.utcWeek = utcSunday;
	exports.utcWeeks = utcSundays;
	exports.utcSunday = utcSunday;
	exports.utcSundays = utcSundays;
	exports.utcMonday = utcMonday;
	exports.utcMondays = utcMondays;
	exports.utcTuesday = utcTuesday;
	exports.utcTuesdays = utcTuesdays;
	exports.utcWednesday = utcWednesday;
	exports.utcWednesdays = utcWednesdays;
	exports.utcThursday = utcThursday;
	exports.utcThursdays = utcThursdays;
	exports.utcFriday = utcFriday;
	exports.utcFridays = utcFridays;
	exports.utcSaturday = utcSaturday;
	exports.utcSaturdays = utcSaturdays;
	exports.utcMonth = utcMonth;
	exports.utcMonths = utcMonths;
	exports.utcYear = utcYear;
	exports.utcYears = utcYears;
	exports.timeFormatDefaultLocale = defaultLocale$1;
	exports.timeFormatLocale = formatLocale$1;
	exports.isoFormat = formatIso;
	exports.isoParse = parseIso;
	exports.now = now;
	exports.timer = timer;
	exports.timerFlush = timerFlush;
	exports.timeout = timeout$1;
	exports.interval = interval$1;
	exports.transition = transition;
	exports.active = active;
	exports.interrupt = interrupt;
	exports.voronoi = voronoi;
	exports.zoom = zoom;
	exports.zoomTransform = transform$1;
	exports.zoomIdentity = identity$8;

	Object.defineProperty(exports, '__esModule', { value: true });

	})));


/***/ }),
/* 313 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';

	console.log("Trying again", [].slice.call(document.querySelectorAll('script[src]')).pop().src.replace(/.*?static\/app\/([^\/]*).*/, "$1"))
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) { return typeof obj; } : function(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	var _createClass = function() {
	    function defineProperties(target, props) {
	        for (var i = 0; i < props.length; i++) {
	            var descriptor = props[i];
	            descriptor.enumerable = descriptor.enumerable || false;
	            descriptor.configurable = true;
	            if ("value" in descriptor) descriptor.writable = true;
	            Object.defineProperty(target, descriptor.key, descriptor);
	        }
	    }
	    return function(Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; };
	}();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _setModalMaxHeight(element) {
	    this.$element = $(element);
	    this.$content = this.$element.find('.modal-content');
	    var borderWidth = this.$content.outerHeight() - this.$content.innerHeight();
	    var dialogMargin = $(window).width() < 768 ? 20 : 60;
	    var contentHeight = $(window).height() - (dialogMargin + borderWidth);
	    var headerHeight = this.$element.find('.modal-header').outerHeight() || 0;
	    var footerHeight = this.$element.find('.modal-footer').outerHeight() || 0;
	    var maxHeight = contentHeight - (headerHeight + footerHeight);

	    this.$content.css({
	        'overflow': 'hidden'
	    });

	    this.$element
	        .find('.modal-body').css({
	            'max-height': maxHeight,
	            'overflow-y': 'auto'
	        });
	}

	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(309)], __WEBPACK_AMD_DEFINE_RESULT__ = function(_) {
	    return function() {
	        /**
	         * A utility wrapper around Bootstrap's modal.
	         * @param {string|object} id                            Either an id or a jQuery element that contains the id in its "data-target" attribute
	         * @param {object}         [options]                    Bootstrap modal options
	         * @param {boolean|string} [options.backdrop]           Whether or not to show a backdrop, or the string "static" to show a backdrop that doesn't close the modal when clicked
	         * @param {boolean}        [options.keyboard]           Whether or not the escape key clsoes the modal
	         * @param {boolean}        [options.show=false]         Whether or not to show the modal when it's created
	         * @param {string}         [options.type='normal']      Can be 'normal', 'wide', or 'noPadding'
	         * @param {string}         [options.title]              The modal's title
	         * @param {boolean}        [options.destroyOnHide=true] Destroy the modal when it's hidden
	         * @returns {element}
	         */
	        function Modal(id, options) {
	            var _this = this;

	            _classCallCheck(this, Modal);

	            var modalOptions = _.extend({ show: false }, options);

	            // if "id" is the element that triggers the modal display, extract the actual id from it; otherwise use it as-is
	            var modalId = id != null && (typeof id === 'undefined' ? 'undefined' : _typeof(id)) === 'object' && id.jquery != null ? id.attr('data-target').slice(1) : id;

	            var header = $('<div>').addClass('modal-header');

	            var headerCloseButton = $('<button>').addClass('close').attr({
	                'type': 'button',
	                'data-dismiss': 'modal',
	                'aria-label': 'Close'
	            }).append($('<span>').attr('aria-hidden', true).text('&times;'));

	            this.title = $('<h3>').addClass('modal-title');

	            this.body = $('<div>').addClass('modal-body');

	            this.footer = $('<div>').addClass('modal-footer');

	            // Multiselect can grow large and step over footer causing issues clicking button in footer
	            this.footer.css('position', 'relative');
	            this.footer.css('z-index', 1);

	            this.$el = $('<div>').addClass('modal hide fade mlts-modal').attr('id', modalId).append($('<div>').addClass('modal-dialog').append($('<div>').addClass('modal-content').append(header.append(headerCloseButton, this.title), this.body, this.footer)));

	            if (modalOptions.title != null) this.setTitle(modalOptions.title);

	            if (modalOptions.type === 'wide') this.$el.addClass('modal-wide');
	            else if (modalOptions.type === 'noPadding') this.$el.addClass('mlts-modal-no-padding');

	            // remove the modal from the dom after it's hidden
	            if (modalOptions.destroyOnHide !== false) {
	                this.$el.on('hidden.bs.modal', function() {
	                    return _this.$el.remove();
	                });
	            }

	            this.$el.on('show.bs.modal', function() {
	                $(this).show();
	                _setModalMaxHeight(this);
	            });

	            $(window).resize(function() {
	                if ($('.modal.in').length != 0) {
	                    _setModalMaxHeight($('.modal.in'));
	                }
	            });

	            this.$el.modal(modalOptions);
	        }

	        _createClass(Modal, [{
	            key: 'setTitle',
	            value: function setTitle(titleText) {
	                this.title.text(titleText);
	            }
	        }, {
	            key: 'setAlert',
	            value: function setAlert(alertMessage, alertType) {
	                if (this.alert == null) {
	                    this.alert = $('<div>').addClass('mlts-modal-alert');
	                    this.body.prepend(this.alert);
	                }

	                //Messages.setAlert(this.alert, alertMessage, alertType, undefined, true);
	            }
	        }, {
	            key: 'removeAlert',
	            value: function removeAlert() {
	                //Messages.removeAlert(this.alert, true);
	            }
	        }, {
	            key: 'show',
	            value: function show() {
	                this.$el.modal('show');
	            }
	        }, {
	            key: 'hide',
	            value: function hide() {
	                this.$el.modal('hide');
	            }
	        }]);

	        return Modal;
	    }();
	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


	//# sourceURL=Modal.js

/***/ }),
/* 314 */
/***/ (function(module, exports, __webpack_require__) {

	(function webpackUniversalModuleDefinition(root, factory) {
		if(true)
			module.exports = factory(__webpack_require__(304));
		else if(typeof define === 'function' && define.amd)
			define(["cose-base"], factory);
		else if(typeof exports === 'object')
			exports["cytoscapeCoseBilkent"] = factory(require("cose-base"));
		else
			root["cytoscapeCoseBilkent"] = factory(root["coseBase"]);
	})(this, function(__WEBPACK_EXTERNAL_MODULE_0__) {
	return /******/ (function(modules) { // webpackBootstrap
	/******/ 	// The module cache
	/******/ 	var installedModules = {};
	/******/
	/******/ 	// The require function
	/******/ 	function __webpack_require__(moduleId) {
	/******/
	/******/ 		// Check if module is in cache
	/******/ 		if(installedModules[moduleId]) {
	/******/ 			return installedModules[moduleId].exports;
	/******/ 		}
	/******/ 		// Create a new module (and put it into the cache)
	/******/ 		var module = installedModules[moduleId] = {
	/******/ 			i: moduleId,
	/******/ 			l: false,
	/******/ 			exports: {}
	/******/ 		};
	/******/
	/******/ 		// Execute the module function
	/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
	/******/
	/******/ 		// Flag the module as loaded
	/******/ 		module.l = true;
	/******/
	/******/ 		// Return the exports of the module
	/******/ 		return module.exports;
	/******/ 	}
	/******/
	/******/
	/******/ 	// expose the modules object (__webpack_modules__)
	/******/ 	__webpack_require__.m = modules;
	/******/
	/******/ 	// expose the module cache
	/******/ 	__webpack_require__.c = installedModules;
	/******/
	/******/ 	// identity function for calling harmony imports with the correct context
	/******/ 	__webpack_require__.i = function(value) { return value; };
	/******/
	/******/ 	// define getter function for harmony exports
	/******/ 	__webpack_require__.d = function(exports, name, getter) {
	/******/ 		if(!__webpack_require__.o(exports, name)) {
	/******/ 			Object.defineProperty(exports, name, {
	/******/ 				configurable: false,
	/******/ 				enumerable: true,
	/******/ 				get: getter
	/******/ 			});
	/******/ 		}
	/******/ 	};
	/******/
	/******/ 	// getDefaultExport function for compatibility with non-harmony modules
	/******/ 	__webpack_require__.n = function(module) {
	/******/ 		var getter = module && module.__esModule ?
	/******/ 			function getDefault() { return module['default']; } :
	/******/ 			function getModuleExports() { return module; };
	/******/ 		__webpack_require__.d(getter, 'a', getter);
	/******/ 		return getter;
	/******/ 	};
	/******/
	/******/ 	// Object.prototype.hasOwnProperty.call
	/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
	/******/
	/******/ 	// __webpack_public_path__
	/******/ 	__webpack_require__.p = "";
	/******/
	/******/ 	// Load entry module and return exports
	/******/ 	return __webpack_require__(__webpack_require__.s = 1);
	/******/ })
	/************************************************************************/
	/******/ ([
	/* 0 */
	/***/ (function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_0__;

	/***/ }),
	/* 1 */
	/***/ (function(module, exports, __webpack_require__) {

	"use strict";


	var LayoutConstants = __webpack_require__(0).layoutBase.LayoutConstants;
	var FDLayoutConstants = __webpack_require__(0).layoutBase.FDLayoutConstants;
	var CoSEConstants = __webpack_require__(0).CoSEConstants;
	var CoSELayout = __webpack_require__(0).CoSELayout;
	var CoSENode = __webpack_require__(0).CoSENode;
	var PointD = __webpack_require__(0).layoutBase.PointD;
	var DimensionD = __webpack_require__(0).layoutBase.DimensionD;

	var defaults = {
	  // Called on `layoutready`
	  ready: function ready() {},
	  // Called on `layoutstop`
	  stop: function stop() {},
	  // 'draft', 'default' or 'proof" 
	  // - 'draft' fast cooling rate 
	  // - 'default' moderate cooling rate 
	  // - "proof" slow cooling rate
	  quality: 'default',
	  // include labels in node dimensions
	  nodeDimensionsIncludeLabels: false,
	  // number of ticks per frame; higher is faster but more jerky
	  refresh: 30,
	  // Whether to fit the network view after when done
	  fit: true,
	  // Padding on fit
	  padding: 10,
	  // Whether to enable incremental mode
	  randomize: true,
	  // Node repulsion (non overlapping) multiplier
	  nodeRepulsion: 4500,
	  // Ideal edge (non nested) length
	  idealEdgeLength: 50,
	  // Divisor to compute edge forces
	  edgeElasticity: 0.45,
	  // Nesting factor (multiplier) to compute ideal edge length for nested edges
	  nestingFactor: 0.1,
	  // Gravity force (constant)
	  gravity: 0.25,
	  // Maximum number of iterations to perform
	  numIter: 2500,
	  // For enabling tiling
	  tile: true,
	  // Type of layout animation. The option set is {'during', 'end', false}
	  animate: 'end',
	  // Duration for animate:end
	  animationDuration: 500,
	  // Represents the amount of the vertical space to put between the zero degree members during the tiling operation(can also be a function)
	  tilingPaddingVertical: 10,
	  // Represents the amount of the horizontal space to put between the zero degree members during the tiling operation(can also be a function)
	  tilingPaddingHorizontal: 10,
	  // Gravity range (constant) for compounds
	  gravityRangeCompound: 1.5,
	  // Gravity force (constant) for compounds
	  gravityCompound: 1.0,
	  // Gravity range (constant)
	  gravityRange: 3.8,
	  // Initial cooling factor for incremental layout
	  initialEnergyOnIncremental: 0.5
	};

	function extend(defaults, options) {
	  var obj = {};

	  for (var i in defaults) {
	    obj[i] = defaults[i];
	  }

	  for (var i in options) {
	    obj[i] = options[i];
	  }

	  return obj;
	};

	function _CoSELayout(_options) {
	  this.options = extend(defaults, _options);
	  getUserOptions(this.options);
	}

	var getUserOptions = function getUserOptions(options) {
	  if (options.nodeRepulsion != null) CoSEConstants.DEFAULT_REPULSION_STRENGTH = FDLayoutConstants.DEFAULT_REPULSION_STRENGTH = options.nodeRepulsion;
	  if (options.idealEdgeLength != null) CoSEConstants.DEFAULT_EDGE_LENGTH = FDLayoutConstants.DEFAULT_EDGE_LENGTH = options.idealEdgeLength;
	  if (options.edgeElasticity != null) CoSEConstants.DEFAULT_SPRING_STRENGTH = FDLayoutConstants.DEFAULT_SPRING_STRENGTH = options.edgeElasticity;
	  if (options.nestingFactor != null) CoSEConstants.PER_LEVEL_IDEAL_EDGE_LENGTH_FACTOR = FDLayoutConstants.PER_LEVEL_IDEAL_EDGE_LENGTH_FACTOR = options.nestingFactor;
	  if (options.gravity != null) CoSEConstants.DEFAULT_GRAVITY_STRENGTH = FDLayoutConstants.DEFAULT_GRAVITY_STRENGTH = options.gravity;
	  if (options.numIter != null) CoSEConstants.MAX_ITERATIONS = FDLayoutConstants.MAX_ITERATIONS = options.numIter;
	  if (options.gravityRange != null) CoSEConstants.DEFAULT_GRAVITY_RANGE_FACTOR = FDLayoutConstants.DEFAULT_GRAVITY_RANGE_FACTOR = options.gravityRange;
	  if (options.gravityCompound != null) CoSEConstants.DEFAULT_COMPOUND_GRAVITY_STRENGTH = FDLayoutConstants.DEFAULT_COMPOUND_GRAVITY_STRENGTH = options.gravityCompound;
	  if (options.gravityRangeCompound != null) CoSEConstants.DEFAULT_COMPOUND_GRAVITY_RANGE_FACTOR = FDLayoutConstants.DEFAULT_COMPOUND_GRAVITY_RANGE_FACTOR = options.gravityRangeCompound;
	  if (options.initialEnergyOnIncremental != null) CoSEConstants.DEFAULT_COOLING_FACTOR_INCREMENTAL = FDLayoutConstants.DEFAULT_COOLING_FACTOR_INCREMENTAL = options.initialEnergyOnIncremental;

	  if (options.quality == 'draft') LayoutConstants.QUALITY = 0;else if (options.quality == 'proof') LayoutConstants.QUALITY = 2;else LayoutConstants.QUALITY = 1;

	  CoSEConstants.NODE_DIMENSIONS_INCLUDE_LABELS = FDLayoutConstants.NODE_DIMENSIONS_INCLUDE_LABELS = LayoutConstants.NODE_DIMENSIONS_INCLUDE_LABELS = options.nodeDimensionsIncludeLabels;
	  CoSEConstants.DEFAULT_INCREMENTAL = FDLayoutConstants.DEFAULT_INCREMENTAL = LayoutConstants.DEFAULT_INCREMENTAL = !options.randomize;
	  CoSEConstants.ANIMATE = FDLayoutConstants.ANIMATE = LayoutConstants.ANIMATE = options.animate;
	  CoSEConstants.TILE = options.tile;
	  CoSEConstants.TILING_PADDING_VERTICAL = typeof options.tilingPaddingVertical === 'function' ? options.tilingPaddingVertical.call() : options.tilingPaddingVertical;
	  CoSEConstants.TILING_PADDING_HORIZONTAL = typeof options.tilingPaddingHorizontal === 'function' ? options.tilingPaddingHorizontal.call() : options.tilingPaddingHorizontal;
	};

	_CoSELayout.prototype.run = function () {
	  var ready;
	  var frameId;
	  var options = this.options;
	  var idToLNode = this.idToLNode = {};
	  var layout = this.layout = new CoSELayout();
	  var self = this;

	  self.stopped = false;

	  this.cy = this.options.cy;

	  this.cy.trigger({ type: 'layoutstart', layout: this });

	  var gm = layout.newGraphManager();
	  this.gm = gm;

	  var nodes = this.options.eles.nodes();
	  var edges = this.options.eles.edges();

	  this.root = gm.addRoot();
	  this.processChildrenList(this.root, this.getTopMostNodes(nodes), layout);

	  for (var i = 0; i < edges.length; i++) {
	    var edge = edges[i];
	    var sourceNode = this.idToLNode[edge.data("source")];
	    var targetNode = this.idToLNode[edge.data("target")];
	    if (sourceNode !== targetNode && sourceNode.getEdgesBetween(targetNode).length == 0) {
	      var e1 = gm.add(layout.newEdge(), sourceNode, targetNode);
	      e1.id = edge.id();
	    }
	  }

	  var getPositions = function getPositions(ele, i) {
	    if (typeof ele === "number") {
	      ele = i;
	    }
	    var theId = ele.data('id');
	    var lNode = self.idToLNode[theId];

	    return {
	      x: lNode.getRect().getCenterX(),
	      y: lNode.getRect().getCenterY()
	    };
	  };

	  /*
	   * Reposition nodes in iterations animatedly
	   */
	  var iterateAnimated = function iterateAnimated() {
	    // Thigs to perform after nodes are repositioned on screen
	    var afterReposition = function afterReposition() {
	      if (options.fit) {
	        options.cy.fit(options.eles, options.padding);
	      }

	      if (!ready) {
	        ready = true;
	        self.cy.one('layoutready', options.ready);
	        self.cy.trigger({ type: 'layoutready', layout: self });
	      }
	    };

	    var ticksPerFrame = self.options.refresh;
	    var isDone;

	    for (var i = 0; i < ticksPerFrame && !isDone; i++) {
	      isDone = self.stopped || self.layout.tick();
	    }

	    // If layout is done
	    if (isDone) {
	      // If the layout is not a sublayout and it is successful perform post layout.
	      if (layout.checkLayoutSuccess() && !layout.isSubLayout) {
	        layout.doPostLayout();
	      }

	      // If layout has a tilingPostLayout function property call it.
	      if (layout.tilingPostLayout) {
	        layout.tilingPostLayout();
	      }

	      layout.isLayoutFinished = true;

	      self.options.eles.nodes().positions(getPositions);

	      afterReposition();

	      // trigger layoutstop when the layout stops (e.g. finishes)
	      self.cy.one('layoutstop', self.options.stop);
	      self.cy.trigger({ type: 'layoutstop', layout: self });

	      if (frameId) {
	        cancelAnimationFrame(frameId);
	      }

	      ready = false;
	      return;
	    }

	    var animationData = self.layout.getPositionsData(); // Get positions of layout nodes note that all nodes may not be layout nodes because of tiling

	    // Position nodes, for the nodes whose id does not included in data (because they are removed from their parents and included in dummy compounds)
	    // use position of their ancestors or dummy ancestors
	    options.eles.nodes().positions(function (ele, i) {
	      if (typeof ele === "number") {
	        ele = i;
	      }
	      // If ele is a compound node, then its position will be defined by its children
	      if (!ele.isParent()) {
	        var theId = ele.id();
	        var pNode = animationData[theId];
	        var temp = ele;
	        // If pNode is undefined search until finding position data of its first ancestor (It may be dummy as well)
	        while (pNode == null) {
	          pNode = animationData[temp.data('parent')] || animationData['DummyCompound_' + temp.data('parent')];
	          animationData[theId] = pNode;
	          temp = temp.parent()[0];
	          if (temp == undefined) {
	            break;
	          }
	        }
	        if (pNode != null) {
	          return {
	            x: pNode.x,
	            y: pNode.y
	          };
	        } else {
	          return {
	            x: ele.position('x'),
	            y: ele.position('y')
	          };
	        }
	      }
	    });

	    afterReposition();

	    frameId = requestAnimationFrame(iterateAnimated);
	  };

	  /*
	  * Listen 'layoutstarted' event and start animated iteration if animate option is 'during'
	  */
	  layout.addListener('layoutstarted', function () {
	    if (self.options.animate === 'during') {
	      frameId = requestAnimationFrame(iterateAnimated);
	    }
	  });

	  layout.runLayout(); // Run cose layout

	  /*
	   * If animate option is not 'during' ('end' or false) perform these here (If it is 'during' similar things are already performed)
	   */
	  if (this.options.animate !== "during") {
	    self.options.eles.nodes().not(":parent").layoutPositions(self, self.options, getPositions); // Use layout positions to reposition the nodes it considers the options parameter
	    ready = false;
	  }

	  return this; // chaining
	};

	//Get the top most ones of a list of nodes
	_CoSELayout.prototype.getTopMostNodes = function (nodes) {
	  var nodesMap = {};
	  for (var i = 0; i < nodes.length; i++) {
	    nodesMap[nodes[i].id()] = true;
	  }
	  var roots = nodes.filter(function (ele, i) {
	    if (typeof ele === "number") {
	      ele = i;
	    }
	    var parent = ele.parent()[0];
	    while (parent != null) {
	      if (nodesMap[parent.id()]) {
	        return false;
	      }
	      parent = parent.parent()[0];
	    }
	    return true;
	  });

	  return roots;
	};

	_CoSELayout.prototype.processChildrenList = function (parent, children, layout) {
	  var size = children.length;
	  for (var i = 0; i < size; i++) {
	    var theChild = children[i];
	    var children_of_children = theChild.children();
	    var theNode;

	    var dimensions = theChild.layoutDimensions({
	      nodeDimensionsIncludeLabels: this.options.nodeDimensionsIncludeLabels
	    });

	    if (theChild.outerWidth() != null && theChild.outerHeight() != null) {
	      theNode = parent.add(new CoSENode(layout.graphManager, new PointD(theChild.position('x') - dimensions.w / 2, theChild.position('y') - dimensions.h / 2), new DimensionD(parseFloat(dimensions.w), parseFloat(dimensions.h))));
	    } else {
	      theNode = parent.add(new CoSENode(this.graphManager));
	    }
	    // Attach id to the layout node
	    theNode.id = theChild.data("id");
	    // Attach the paddings of cy node to layout node
	    theNode.paddingLeft = parseInt(theChild.css('padding'));
	    theNode.paddingTop = parseInt(theChild.css('padding'));
	    theNode.paddingRight = parseInt(theChild.css('padding'));
	    theNode.paddingBottom = parseInt(theChild.css('padding'));

	    //Attach the label properties to compound if labels will be included in node dimensions  
	    if (this.options.nodeDimensionsIncludeLabels) {
	      if (theChild.isParent()) {
	        var labelWidth = theChild.boundingBox({ includeLabels: true, includeNodes: false }).w;
	        var labelHeight = theChild.boundingBox({ includeLabels: true, includeNodes: false }).h;
	        var labelPos = theChild.css("text-halign");
	        theNode.labelWidth = labelWidth;
	        theNode.labelHeight = labelHeight;
	        theNode.labelPos = labelPos;
	      }
	    }

	    // Map the layout node
	    this.idToLNode[theChild.data("id")] = theNode;

	    if (isNaN(theNode.rect.x)) {
	      theNode.rect.x = 0;
	    }

	    if (isNaN(theNode.rect.y)) {
	      theNode.rect.y = 0;
	    }

	    if (children_of_children != null && children_of_children.length > 0) {
	      var theNewGraph;
	      theNewGraph = layout.getGraphManager().add(layout.newGraph(), theNode);
	      this.processChildrenList(theNewGraph, children_of_children, layout);
	    }
	  }
	};

	/**
	 * @brief : called on continuous layouts to stop them before they finish
	 */
	_CoSELayout.prototype.stop = function () {
	  this.stopped = true;

	  return this; // chaining
	};

	var register = function register(cytoscape) {
	  //  var Layout = getLayout( cytoscape );

	  cytoscape('layout', 'cose-bilkent', _CoSELayout);
	};

	// auto reg for globals
	if (typeof cytoscape !== 'undefined') {
	  register(cytoscape);
	}

	module.exports = register;

	/***/ })
	/******/ ]);
	});

/***/ }),
/* 315 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	__webpack_require__(295);

	// https://docs.microsoft.com/en-us/windows/desktop/api/winuser/nf-winuser-setdoubleclicktime
	var INTERVAL = 500;
	function extension(interval) {
	    if (interval === void 0) { interval = INTERVAL; }
	    var clicked = null;
	    this.on('click', function (evt) {
	        if (clicked && clicked === evt.target) {
	            clicked = null;
	            evt.preventDefault();
	            evt.stopPropagation();
	            evt.target.emit('dblclick', [evt]);
	        }
	        else {
	            clicked = evt.target;
	            setTimeout(function () {
	                if (clicked && clicked === evt.target) {
	                    clicked = null;
	                    evt.target.emit('dblclick:timeout', [evt]);
	                }
	            }, interval);
	        }
	    });
	    return this; // chainability
	}

	function register(cy) {
	    if (!cy) {
	        return;
	    }
	    // Initialize extension
	    // Register extension
	    var extensionName = 'dblclick';
	    cy('core', extensionName, extension);
	    // cy('collection', extensionName, extension);
	    // cy('layout', extensionName, extension);
	    // cy('renderer', extensionName, extension);
	}
	if (typeof window.cytoscape !== 'undefined') {
	    register(window.cytoscape);
	}

	module.exports = register;
	//# sourceMappingURL=index.common.js.map


/***/ }),
/* 316 */
/***/ (function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_316__;

/***/ })
/******/ ])});;