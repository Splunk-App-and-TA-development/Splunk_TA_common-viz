/*
 * Visualization source
 */




define([
            'jquery',
            'underscore',
            'api/SplunkVisualizationBase',
            'api/SplunkVisualizationUtils',
            'globe.gl'
            // Add required assets to this list
        ],
        function(
            $,
            _,
            SplunkVisualizationBase,
            vizUtils,
            globe
        ) {

            


    // Extend from SplunkVisualizationBase
    return SplunkVisualizationBase.extend({

        initialize: function() {
            SplunkVisualizationBase.prototype.initialize.apply(this, arguments);
            this.$el = $(this.el);
            
            
        },

        // Optionally implement to format data returned from search. 
        // The returned object will be passed to updateView as 'data'
        formatData: function(data) {

            // Format data 

            return data;
        },
  
        // Implement updateView to render a visualization.
        //  'data' will be the data object returned from formatData or from the search
        //  'config' will be the configuration property object
        updateView: function(data, config) {

            function moveMap(globeref, animationPath, animationCount) {

                if (animationCount == null || animationCount == animationPath.length) {
                    animationCount = 0;
                }
                
                console.log(animationPath[animationCount]["lat"]);

                globeref.pointOfView({
                    lat: animationPath[animationCount]["lat"],
                    lng: animationPath[animationCount]["lng"],
                    altitude: 2,
                }, 1000)

                animationCount+=1;

                _.delay(moveMap, 5000, globeref, animationPath, animationCount);
            }

            var rotateEnabled = config[this.getPropertyNamespaceInfo().propertyNamespace+'rotateEnabled'] || "false";
            var rotateSpeed = config[this.getPropertyNamespaceInfo().propertyNamespace+'rotateSpeed'] || "0.1";
            var doRotate = (rotateEnabled == "true");
            var textureName = config[this.getPropertyNamespaceInfo().propertyNamespace+'textureName'] || "day";

            if (textureName == "day") {
                var texture = "/static/app/arc_globe/marble.jpg"
            } else {
                var texture = "/static/app/arc_globe/blackmarble.jpg"
            }

            console.log(doRotate);

            var clientHeight = document.getElementById($(this.el).attr('id')).clientHeight;
            console.log("Init height: " + clientHeight);
            this.GLOBE = globe().height(clientHeight);
            
            this.GLOBE(document.getElementById($(this.el).attr('id')))
                .globeImageUrl(texture)
                .labelLat('lat')
                .labelLng('lng')
                .labelText('labelText')
                .labelLabel('label')
                .labelSize(3)
                .arcColor('color')
                .arcDashAnimateTime('dashTime')
                .arcDashLength('dashLength')
                .arcDashGap('dashGap')
                .arcStroke('stroke');
            this.GLOBE.controls().autoRotate = doRotate;
            this.GLOBE.controls().autoRotateSpeed = rotateSpeed;
            
            
            
            

            this.init = true;

            console.log(this.init);

            var dataRows = data.rows;
            if (!dataRows || dataRows.length === 0 || dataRows[0].length === 0) {
                return this;
            }

            var dataFields = data.fields;
            for (i = 0; i < dataFields.length; i++) {
                switch (dataFields[i].name) {
                    case "lat":
                        var lat_idx = i;
                        break;
                    case "lon":
                        var lon_idx = i;
                        break;
                    case "color":
                        var color_idx = i;
                        break;
                    case "dashTime":
                        var dashTime_idx= i;
                        break;
                    case "dashGap":
                        var dashGap_idx = i;
                        break;
                    case "dashLength":
                        var dashLength_idx = i;
                        break;
                    case "stroke":
                        var stroke_idx = i;
                        break;
                    case "label":
                        var label_idx = i;
                        break;
                    case "rotate_to":
                        var rotateTo_idx = i;
                        break;
                }
            }

            var animated = false;

            console.log(data);


            var outgoing_data = new Array();
            var label_data = new Array();
            var animation_route = new Array();
            
        
            for (x = 0; x < dataRows.length; x++) {
                var row = dataRows[x];

                console.log("first row");

                if (Array.isArray(row[lat_idx])) {
                    console.log("Got row");
                    for (i = 0; i < row[lat_idx].length; i++) { // end_lat should be same length as all other coordinates
                        if (i<row[lat_idx].length-1) { // don't grab the last item in array.
                            console.log("Running through coordinates");
                            console.log(i);
                            var endLat = parseFloat(+row[lat_idx][i]);
                            var endLon = parseFloat(+row[lon_idx][i]);

                            var startLat = parseFloat(+row[lat_idx][i+1]);
                            var startLon = parseFloat(+row[lon_idx][i+1]);

                            if (Array.isArray(row[color_idx])) {
                                var color = vizUtils.escapeHtml(row[color_idx][i]);
                            } else {
                                var color = vizUtils.escapeHtml(row[color_idx]);
                            }

                            if (Array.isArray(row[dashTime_idx])) {
                                var dashTime = vizUtils.escapeHtml(row[dashTime_idx][i]);
                            } else {
                                var dashTime = vizUtils.escapeHtml(row[dashTime_idx]);
                            }

                            if (Array.isArray(row[dashGap_idx])) {
                                var dashGap = vizUtils.escapeHtml(row[dashGap_idx][i]);
                            } else {
                                var dashGap = vizUtils.escapeHtml(row[dashGap_idx]);
                            }

                            if (Array.isArray(row[dashLength_idx])) {
                                var dashLength = vizUtils.escapeHtml(row[dashLength_idx][i]);
                            } else {
                                var dashLength = vizUtils.escapeHtml(row[dashLength_idx]);
                            }

                            if (Array.isArray(row[stroke_idx])) {
                                var stroke = vizUtils.escapeHtml(row[stroke_idx][i]);
                            } else {
                                var stroke = vizUtils.escapeHtml(row[stroke_idx]);
                            }

                            if (Array.isArray(row[rotateTo_idx])) {
                                if (vizUtils.escapeHtml(row[rotateTo_idx][i] == "true")) {
                                    animation_route.push({
                                       "lat":parseFloat(+row[lat_idx][i]),
                                       "lng":parseFloat(+row[lon_idx][i])
                                    })
                                }
                            } 

                            if (Array.isArray(row[label_idx])) {
                                if (vizUtils.escapeHtml(row[dashLength_idx][i] != "N/A")) 
                                {
                                    label_data.push({
                                    "lat":parseFloat(+row[lat_idx][i]),
                                    "lng":parseFloat(+row[lon_idx][i]),
                                    "label":vizUtils.escapeHtml(row[label_idx][i]),
                                    "labelText": vizUtils.escapeHtml(row[label_idx][i])})
                                }
                            } 


                            if (!color) color = () => staticColor;

                            outgoing_data.push({
                                "startLat":startLat, 
                                "startLng":startLon,
                                "endLat":endLat,
                                "endLng":endLon,
                                "color": color,
                                "dashGap": dashGap,
                                "dashLength": dashLength,
                                "dashTime": dashTime,
                                "stroke": stroke,
                            });
                            
                        }
                    }
                }                 
            }

            // exit loop

            
            

            this.GLOBE.arcsData(outgoing_data);
            this.GLOBE.labelsData(label_data);

            console.log(animation_route);
            moveMap(this.GLOBE, animation_route, null);

        },

        // Search data params
        getInitialDataParams: function() {
            return ({
                outputMode: SplunkVisualizationBase.ROW_MAJOR_OUTPUT_MODE,
                count: 10000
            });
        },

        // Override to respond to re-sizing events
        reflow: function() {
            this.$el = $(this.el);
            var clientHeight = document.getElementById($(this.el).attr('id')).clientHeight;
            console.log("Reflow: " + clientHeight);
        }
    });
});